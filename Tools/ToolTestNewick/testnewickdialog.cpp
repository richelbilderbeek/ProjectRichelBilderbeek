
#include <fstream>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Weffc++"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"
#include <boost/numeric/conversion/cast.hpp>

#include "manydigitnewick.h"
#include "newick.h"
#include "newickvector.h"
#include "sortedbinarynewickvector.h"
#include "trace.h"
#include "testnewick.h"
#include "testnewickdialog.h"
#include "twodigitnewick.h"
#pragma GCC diagnostic pop

ribi::TestNewickDialog::TestNewickDialog(const int types)
  : m_table{},
    m_text{},
    m_types(types)
{
  START_TRACE();

  //Test all Newicks
  #ifndef NDEBUG
  Newick::Test();
  BinaryNewickVector::Test();
  TwoDigitNewick::Test();

  const std::vector<std::string> newicks = Newick::CreateValidNewicks();
  const std::vector<boost::shared_ptr<TestNewick> > tests
    = TestNewick::CreateTests(TestNewick::m_flag_all);
  const BigInteger max_complexity = 10000;
  for(const std::string& newick_str: newicks)
  {
    const std::vector<int> newick = Newick::StringToNewick(newick_str);
    //Only test binary Newicks and relatively small Newicks
    if (Newick::CalcComplexity(newick) > max_complexity)
    {
      continue;
    }
    //Start the tests

    //TRACE(std::string("Testing ") + newick_str);

    const double theta = 1.0 + GetRandomUniform() * 10.0;
    m_table.resize(0);

    //Do all valid tests
    for(const boost::shared_ptr<TestNewick>& test: tests)
    {
      if (test->CanCalculate(newick_str,theta))
      {
        test->Calculate(newick_str,theta);
        TestNewickResult r;
        r.newick = newick_str;
        r.theta = theta;
        r.test_name = test->GetTestName();
        r.probability = test->GetProbability();
        r.time = test ->GetTime();
        m_table.push_back(r);
      }
    }
    assert(!m_table.empty());
    const std::vector<double> probabilities = ExtractProbabilities(m_table);
    if (!Newick::AllAboutEqual(probabilities))
    {
      std::cerr
        << "WARNING: DIFFERENT PROBABILITIES FOUND"  << '\n'
        << "FOR NEWICK " << newick_str << '\n';
      for(const double& p: probabilities)
      {
        std::cerr << p << '\n';
      }

      for(const auto& p: m_table)
      {
        std::cerr
          << "Probability ("
          << p.newick
          << "): "
          << p.probability
          << '\n';
      }
    }
    assert(Newick::AllAboutEqual(probabilities));
  }
  #endif
}

void ribi::TestNewickDialog::DoAutoCalculate(
  const std::string& newick_str,
  const std::string& theta_str,
  const std::string& max_complexity_str)
{
  if (!Newick::IsNewick(newick_str))
  {
    m_text = "Invalid Newick";
    return;
  }
  try
  {
    boost::lexical_cast<double>(theta_str);
  }
  catch (boost::bad_lexical_cast&)
  {
    m_text = "Invalid theta";
    return;
  }

  const BigInteger max_complexity
    = stringToBigInteger(max_complexity_str);
  if (Newick::CalcComplexity(Newick::StringToNewick(newick_str))
    < max_complexity)
  {
    DoCalculate(newick_str,theta_str);
  }
  else
  {
    #ifdef USE_WT_LIBRARY
    m_text = "Complexity too high";
    #else
    m_text = "Newick too complex to auto-calculate. Press 'Calculate' or increase the value for auto-calculate";
    #endif
    return;
  }
}

void ribi::TestNewickDialog::DoCalculate(
  const std::string& newick_str,
  const std::string& theta_str)
{
  m_table.resize(0);
  if (!Newick::IsNewick(newick_str))
  {
    m_text = "Invalid Newick";
    return;
  }
  try
  {
    boost::lexical_cast<double>(theta_str);
  }
  catch (boost::bad_lexical_cast&)
  {
    m_text = "Invalid theta";
    return;
  }
  const std::vector<int> newick = Newick::StringToNewick(newick_str);
  const double theta = boost::lexical_cast<double>(theta_str);
  const std::vector<boost::shared_ptr<TestNewick> > tests = TestNewick::CreateTests(m_types);

  //Do all valid tests
  for(const boost::shared_ptr<TestNewick>& test: tests)
  {
    if (test->CanCalculate(newick_str,theta))
    {
      test->Calculate(newick_str,theta);
      TestNewickResult r;
      r.newick = newick_str;
      r.theta = theta;
      r.test_name = test->GetTestName();
      r.probability = test->GetProbability();
      r.time = test ->GetTime();
      m_table.push_back(r);
    }
  }

  assert(!m_table.empty());
  const std::vector<double> probabilities = ExtractProbabilities(m_table);
  if (!Newick::AllAboutEqual(probabilities))
  {
    m_text = "WARNING: DIFFERENT PROBABILITIES FOUND";
  }
  else
  {
    m_text = "All probabilities about equal";
  }
}

const std::vector<double> ribi::TestNewickDialog::ExtractProbabilities(
  const std::vector<TestNewickResult>& v)
{
  std::vector<double> w;
  for(const auto& i: v)
  {
    w.push_back( i.probability );
  }
  return w;
}

const ribi::About ribi::TestNewickDialog::GetAbout()
{
  About about(
    "Richel Bilderbeek",
    "QtTestNewickDialog",
    "Qt dialog to compare the Newick classes",
    "the 24th of March 2011",
    "2010-2014",
    "http://www.richelbilderbeek.nl/ToolTestNewick.htm",
    GetVersion(),
    GetVersionHistory());
  about.AddLibrary("BigInt: version 2010.04.30");
  about.AddLibrary("BinaryNewickVector: version " + BinaryNewickVector::GetVersion());
  about.AddLibrary("NewickVector: version " + NewickVector::GetVersion());
  about.AddLibrary("SortedBinaryNewickVector: version " + SortedBinaryNewickVector::GetVersion());
  about.AddLibrary("TwoDigitNewick: version " + TwoDigitNewick::GetVersion());
  return about;
}

const std::string ribi::TestNewickDialog::GetVersion()
{
  return "2.4";
}

const std::vector<std::string> ribi::TestNewickDialog::GetVersionHistory()
{
  return {
    "2011-03-06: version 2.1: initial version, same versioning as QtTestNewickDialog",
    "2011-03-08: version 2.2: minor changes in Newick namespace, added About screen",
    "2011-03-11: version 2.3: put GUI logic in GUI-independent TestNewickDialog class",
    "2011-03-24: version 2.4: put About in TestNewickDialog"
  };
}

//From http://www.richelbilderbeek.nl/CppGetRandomUniform.htm
double ribi::TestNewickDialog::GetRandomUniform()
{
  return static_cast<double>(std::rand())/static_cast<double>(RAND_MAX);
}

//From http://www.richelbilderbeek.nl/CppRandomizeTimer.htm
void ribi::TestNewickDialog::RandomizeTimer()
{
  std::srand(std::time(0));
}

const std::vector<std::string> ribi::TestNewickDialog::GetHardBiologicalBinaryNewicks()
{
  std::vector<std::string> v;
  v.push_back("((1,(1,(((((1,(1,((1,1),(3,1)))),1),((((1,((1,((1,1),(45,6))),(((1,1),(4,1)),2))),1),2),1)),1),2))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(2,2))),1),((((1,((1,(1,(35,7))),((4,4),1))),1),4),1)),1),1))),((1,(1,1)),1))");
  v.push_back("((1,(1,((((((2,1),(1,((1,1),1))),1),((((1,((1,(5,(36,10))),((2,2),1))),1),(1,5)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,((((((1,1),(1,(2,(3,1)))),1),((((1,((1,(1,(36,10))),((5,6),1))),1),2),1)),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,(2,3))),1),((((1,((1,((1,1),(34,10))),((4,(4,1)),3))),1),(1,1)),1)),1),1))),(2,1))");
  v.push_back("((1,(1,(((((((1,1),1),(1,(2,1))),1),((((1,((1,(3,(47,14))),((6,4),(1,1)))),1),(1,1)),1)),1),2))),(1,1))");
  v.push_back("((1,(1,((((((1,1),(1,(3,((1,1),1)))),1),((((1,((1,(2,(45,8))),((5,2),1))),1),(2,5)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,((1,1),((1,1),1)))),1),((((1,((1,((2,1),(35,10))),((4,(5,1)),2))),1),8),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,(1,1)))),1),((((1,((1,(2,(66,13))),((8,(5,1)),1))),1),(1,5)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((2,(1,(2,((1,1),1)))),1),((((1,((1,(2,(57,8))),((4,(1,2)),2))),1),6),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(2,3))),1),((((1,((1,(3,(41,10))),((4,(1,1)),(1,2)))),1),5),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,((1,1),2))),1),((((1,((1,(1,(44,12))),((3,5),1))),1),(3,9)),(1,1))),1),1))),1)");
  v.push_back("((1,(1,(((((1,(2,(1,(4,1)))),1),((((1,((1,((1,1),(61,8))),((3,(4,1)),2))),1),(1,5)),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,(2,((1,1),3)))),1),((((1,((1,((2,1),(39,8))),((7,3),1))),1),(2,3)),(1,1))),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,(1,3))),1),((((1,((1,((2,2),(37,9))),(4,2))),1),(4,2)),1)),1),1))),(2,1))");
  v.push_back("((1,(1,((((((1,1),(1,(1,2))),1),((((1,((1,(1,(38,12))),((4,5),2))),1),(1,3)),1)),1),2))),(3,1))");
  v.push_back("((1,(1,((((((1,1),(1,(2,((1,(1,1)),1)))),1),((((1,((1,(3,(53,13))),8)),1),(2,3)),2)),1),1))),((1,(1,1)),1))");
  v.push_back("((1,(1,(((((2,(1,(3,((1,1),2)))),1),((((1,((1,((1,1),(50,9))),((6,(2,1)),3))),1),2),1)),1),1))),((1,(1,1)),1))");
  v.push_back("((1,(1,(((((1,(1,((1,1),(2,1)))),1),((((1,((1,((2,1),(47,7))),((8,4),1))),1),(1,8)),1)),1),1))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,(2,(3,1)))),1),((((1,((1,(2,(26,7))),((7,3),1))),1),(3,3)),1)),1),1))),(2,1))");
  v.push_back("((1,(1,((((((1,1),(1,(6,((1,3),1)))),1),((((1,((1,((2,2),(39,12))),((3,(2,1)),1))),1),3),1)),1),1))),((1,(1,1)),1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,1),1)))),1),((((1,((1,((6,2),(47,7))),((4,(6,1)),1))),1),(1,4)),1)),1),2))),((1,(1,1)),1))");
  v.push_back("((1,(1,(((((1,(2,(1,(2,1)))),1),((((1,((1,(2,(49,7))),((7,2),3))),1),(1,6)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,(1,1)),1)))),1),((((1,((1,((2,2),(43,12))),((5,6),(1,2)))),1),1),2)),1),1))),2)");
  v.push_back("((1,(1,((((((1,1),(1,(2,((1,3),1)))),1),((((1,((1,(1,(68,13))),((6,5),3))),1),(1,2)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,((((((2,1),(1,((1,1),2))),1),((((1,((1,((1,2),(59,9))),((11,2),(1,1)))),1),(1,7)),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,((((((1,1),(1,(2,((1,(2,1)),1)))),1),((((1,((1,((1,2),(42,7))),((8,4),1))),1),(2,3)),1)),1),2))),1)");
  v.push_back("((1,(1,(((((((1,3),1),(1,(1,((1,1),1)))),1),((((1,((1,((2,1),(48,14))),((4,4),4))),1),(3,1)),1)),1),1))),((1,(1,1)),1))");
  v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,(5,(36,12))),((4,4),4))),1),8),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(3,((1,(1,2)),1)))),1),((((1,((1,(3,(33,12))),((4,3),1))),1),(2,3)),(1,1))),1),1))),2)");
  v.push_back("((1,(1,(((((1,(1,((3,1),((1,1),1)))),1),((((1,((1,((1,1),(49,10))),((9,4),2))),1),(1,5)),1)),1),1))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,((1,1),(3,1)))),1),((((1,((1,(1,(32,11))),((5,4),1))),1),(2,8)),(3,1))),1),1))),(1,1))");
  v.push_back("((1,(1,(((((2,(1,((1,1),(3,1)))),1),((((1,((1,(1,(54,12))),((7,4),1))),1),(1,6)),2)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((((2,1),1),(1,(1,((1,1),1)))),1),((((1,((1,(2,(48,11))),((5,6),2))),1),(1,4)),1)),1),1))),2)");
  v.push_back("((1,(1,((((((2,1),(1,((2,2),((1,1),1)))),1),((((1,((1,((2,2),(61,14))),((4,3),1))),1),(1,3)),(1,1))),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,((1,1),((1,1),1)))),1),((((1,((1,((1,4),(59,17))),((4,(1,1)),(1,1)))),1),(2,8)),1)),1),3))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,((1,2),((1,1),1)))),1),((((1,((1,((4,2),(45,7))),((5,4),(1,1)))),1),(2,6)),((1,1),1))),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(2,((1,1),1))),1),((((1,((1,(3,(33,10))),((6,3),(1,1)))),1),(1,5)),2)),1),2))),2)");
  v.push_back("((1,(1,(((((((2,1),1),(1,(3,(2,1)))),1),((((1,((1,((1,1),(50,7))),((6,4),2))),1),(1,4)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((2,(1,((1,2),2))),1),((((1,((1,((2,2),(62,8))),((10,(2,1)),(1,1)))),1),(1,4)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((3,(2,((2,1),((1,(1,1)),1)))),1),((((1,((1,((1,2),(41,20))),((4,1),2))),1),(1,8)),1)),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,(1,((1,1),1)))),1),((((1,((1,((4,1),(44,16))),((7,3),1))),1),(2,7)),1)),1),1))),2)");
  v.push_back("((1,(1,((((((2,1),(1,(1,((1,(1,1)),1)))),1),((((1,((1,((1,3),(57,18))),((2,(7,1)),2))),1),4),((1,1),1))),1),1))),((1,2),1))");
  v.push_back("((1,(1,((((((2,1),(1,(4,((1,2),1)))),1),((((1,((1,((4,1),(58,11))),((10,1),1))),1),(1,1)),1)),1),1))),((1,2),1))");
  v.push_back("((1,(1,(((((2,(1,(1,((1,(1,1)),1)))),1),((((1,((1,((1,4),(42,7))),((5,4),1))),1),5),1)),1),2))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,(1,1)),1)))),1),((((1,((1,(5,(60,14))),((4,5),(1,1)))),1),(1,4)),2)),1),1))),((1,(2,1)),1))");
  v.push_back("((1,(1,(((((3,(1,(1,(2,1)))),1),((((1,((1,(1,(53,11))),((4,(2,1)),(2,1)))),1),(1,3)),2)),1),3))),(1,1))");
  v.push_back("((1,(1,(((((2,(1,(2,((1,2),1)))),1),((((1,((1,(2,(47,13))),((7,2),1))),1),(1,3)),1)),1),2))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,((1,1),1))),1),((((1,((1,((2,1),(53,8))),((7,2),3))),1),(3,5)),2)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,(2,1)))),1),((((1,((1,((2,2),(40,7))),((4,7),2))),1),3),1)),1),2))),((1,2),1))");
  v.push_back("((1,(1,((((((1,1),(1,((1,1),(2,1)))),1),((((1,((1,((1,2),(52,5))),((6,(5,2)),(1,2)))),1),(1,4)),1)),1),1))),(3,1))");
  v.push_back("((1,(1,(((((1,(1,((3,1),((1,1),1)))),1),((((1,((1,((3,1),(62,20))),((10,(1,1)),2))),1),(1,4)),1)),1),1))),((1,2),1))");
  v.push_back("((1,(1,((((((2,1),(1,(2,(1,1)))),1),((((1,((1,((3,2),(56,10))),((5,(5,1)),1))),1),3),(1,1))),1),1))),2)");
  v.push_back("((1,(1,(((((((2,1),1),(1,(3,((1,(3,3)),1)))),1),((((1,((1,((3,1),(48,9))),((1,(1,1)),3))),1),(1,4)),((1,2),1))),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,5))),1),((((1,((1,(1,(44,11))),((7,3),2))),1),(1,3)),(2,1))),1),2))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,((1,2),((1,1),1)))),1),((((1,((1,((5,1),(66,13))),((8,6),2))),1),(1,2)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(4,(2,1)))),1),((((1,((1,(4,(55,7))),((8,2),(1,1)))),1),(1,3)),1)),1),2))),2)");
  v.push_back("((1,(1,((((((1,1),(1,(1,3))),1),((((1,((1,((2,1),(55,12))),((7,3),1))),1),8),3)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,((1,2),((1,(2,1)),1)))),1),((((1,((1,(2,(50,13))),((6,5),2))),1),(3,2)),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,((((4,1),((((1,((1,((1,2),(57,5))),((4,4),1))),1),(2,8)),2)),1),1))),((1,2),1))");
  v.push_back("((1,(1,((((((1,1),(1,(2,((1,2),1)))),1),((((1,((1,(4,(63,11))),((3,(5,1)),1))),1),(1,7)),2)),1),1))),1)");
  v.push_back("((1,(1,(((((((1,1),1),(1,(2,((1,1),1)))),1),((((1,((1,((1,3),(55,13))),((5,6),1))),1),(1,7)),(2,1))),1),1))),((1,(1,1)),1))");
  v.push_back("((1,(1,((((((2,1),(1,((1,1),((1,1),1)))),1),((((1,((1,((2,3),(48,15))),((5,(1,1)),2))),1),(3,5)),((1,1),1))),1),1))),((1,(1,1)),1))");
  v.push_back("((1,(1,(((((1,(1,(2,(2,1)))),1),((((1,((1,((3,4),(49,9))),((4,4),1))),1),5),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(2,(4,1)))),1),((((1,((1,(3,(53,7))),((4,(4,1)),1))),1),(3,5)),1)),1),1))),1)");
  v.push_back("((1,(1,(((((((1,1),1),(1,((1,1),(2,1)))),1),((((1,((1,(2,(75,16))),((5,6),1))),1),(1,5)),1)),1),1))),(3,1))");
  v.push_back("((1,(1,((((((1,1),(2,(1,(1,1)))),1),((((1,((1,((1,1),(49,20))),((6,1),(1,1)))),1),4),3)),1),5))),2)");
  v.push_back("((1,(1,(((((1,(1,(2,(2,1)))),1),((((1,((1,(4,(38,10))),((5,(3,1)),3))),1),7),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,(1,1)),1)))),1),((((1,((1,((2,3),(38,9))),((10,8),2))),1),5),1)),1),1))),1)");
  v.push_back("((1,(1,(((((2,(1,((1,1),(1,1)))),1),((((1,((1,((1,2),(72,10))),((5,6),3))),1),(1,5)),(1,1))),1),1))),((1,1),1))");
  v.push_back("((1,(1,((((((1,1),(1,((1,1),((1,(2,1)),1)))),1),((((1,((1,((3,1),(41,11))),((6,(6,2)),2))),1),(2,2)),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((2,(1,(1,(1,2)))),1),((((1,((1,(2,(35,15))),((7,5),1))),1),(1,5)),1)),1),2))),2)");
  v.push_back("((1,(1,((((((1,1),(1,((1,1),(1,1)))),1),((((1,((1,((5,2),(59,15))),((7,4),1))),1),(1,5)),1)),1),2))),((1,(1,1)),1))");
  v.push_back("((1,(1,((((((2,1),(1,(2,(1,1)))),1),((((1,((1,(1,(52,18))),((4,5),2))),1),(1,5)),1)),1),1))),((1,2),1))");
  v.push_back("((1,(1,(((((2,(1,(1,(2,1)))),1),((((1,((1,((1,3),(52,15))),((3,2),(2,1)))),1),(2,4)),1)),1),2))),1)");
  v.push_back("((1,(1,((((((1,1),(2,((1,1),((1,(2,1)),1)))),1),((((1,((1,((4,1),(42,11))),((7,3),2))),1),4),2)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,(4,((1,(1,1)),1)))),1),((((1,((1,(2,(58,13))),((8,3),1))),1),(1,8)),1)),1),1))),2)");
  v.push_back("((1,(1,(((((((1,1),1),(1,(1,((1,2),1)))),1),((((1,((1,((1,3),(44,12))),((3,(3,2)),2))),1),4),2)),1),1))),(3,1))");
  v.push_back("((1,(1,((((((1,2),(1,((1,1),3))),1),((((1,((1,((3,1),(39,9))),((4,(5,1)),1))),1),(3,5)),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((2,(1,((1,1),(3,1)))),1),((((1,((1,((1,1),(59,16))),((9,2),2))),1),(1,5)),1)),1),1))),2)");
  v.push_back("((1,(1,(((((1,(1,(2,2))),1),((((1,((1,(1,(44,5))),((8,3),2))),1),(3,3)),3)),1),2))),(1,1))");
  v.push_back("((1,(1,((((((2,1),(1,(2,((1,4),1)))),1),((((1,((1,(3,(48,14))),((12,(1,1)),(1,1)))),1),1),2)),1),2))),2)");
  v.push_back("((1,(1,(((((2,(1,(2,((1,(1,2)),1)))),1),((((1,((1,((2,1),(55,7))),((3,3),2))),1),(2,9)),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,5),1)))),1),((((1,((1,((1,3),(41,12))),((3,3),4))),1),(1,4)),1)),1),1))),(3,1))");
  v.push_back("((1,(1,((((((3,1),(1,((1,1),((1,(1,1)),1)))),1),((((1,((1,(1,(78,19))),((4,(10,1)),2))),1),(1,7)),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(2,(1,((1,2),1)))),1),((((1,((1,(1,(37,14))),((3,(3,1)),(1,3)))),1),(1,6)),2)),1),4))),((1,(1,1)),1))");
  v.push_back("((1,(1,(((((2,(1,(2,((1,2),1)))),1),((((1,((1,((3,1),(54,7))),((4,2),(1,3)))),1),(1,6)),1)),1),2))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(2,2))),1),((((1,((1,(3,(53,9))),((7,(6,1)),(1,1)))),1),(3,4)),1)),1),1))),((1,(1,1)),1))");
  v.push_back("((1,(1,((((((1,1),(1,(2,(2,1)))),1),((((1,((1,(1,(71,12))),((10,(3,1)),2))),1),(2,4)),1)),1),2))),(1,1))");
  v.push_back("((1,(1,(((((((1,1),1),(1,(1,((1,1),1)))),1),((((1,((1,(2,(55,8))),((6,7),2))),1),(5,5)),1)),1),1))),((1,(1,1)),1))");
  v.push_back("((1,(1,(((((1,(1,((1,1),((1,(1,2)),1)))),1),((((1,((1,((2,3),(43,12))),((1,7),1))),1),(2,6)),(1,1))),1),2))),((1,2),1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,5),1)))),1),((((1,((1,((4,2),(44,6))),((4,(3,1)),2))),1),(2,2)),1)),1),1))),(3,1))");
  v.push_back("((1,(1,(((((1,(2,(1,((1,1),1)))),1),((((1,((1,(5,(41,7))),((5,7),1))),1),(3,11)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,((((((2,1),(1,(1,((1,(2,1)),1)))),1),((((1,((1,((1,3),(65,16))),((9,(5,1)),(1,1)))),1),(1,4)),(1,1))),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((2,(1,(1,((1,3),1)))),1),((((1,((1,((1,1),(67,5))),((5,7),1))),1),(3,4)),1)),1),3))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,(1,4))),1),((((1,((1,((4,1),(48,16))),((3,6),1))),1),(1,3)),1)),1),3))),2)");
  v.push_back("((1,(1,((((((1,2),(3,(1,((1,2),1)))),1),((((1,((1,((3,1),(57,10))),((3,3),3))),1),(1,3)),1)),1),1))),2)");
  v.push_back("((1,(1,(((((((1,1),1),(1,((2,3),(2,1)))),1),((((1,((1,(2,(46,9))),((4,(2,2)),(1,1)))),1),(2,9)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(2,((1,1),3))),1),((((1,((1,((1,1),(46,5))),((9,3),(2,1)))),1),(2,9)),1)),1),1))),((1,2),1))");
  v.push_back("((1,(1,((((((3,1),(1,((1,1),((1,(2,1)),1)))),1),((((1,((1,((3,2),(68,16))),((5,2),(1,1)))),1),7),1)),1),1))),((1,(1,1)),1))");
  return v;
}

const std::vector<std::string> ribi::TestNewickDialog::GetHardBinaryNewicks()
{
  std::vector<std::string> v;
  v.push_back("((4,4),4)");
  v.push_back("(((4,4),4),4)");
  v.push_back("((((4,4),4),4),4)");
  v.push_back("(((((4,4),4),4),4),4)");
  v.push_back("((((((4,4),4),4),4),4),4)");
  v.push_back("(((((((4,4),4),4),4),4),4),4)");
  v.push_back("((((((((4,4),4),4),4),4),4),4),4)");
  v.push_back("(((((((((4,4),4),4),4),4),4),4),4),4)");
  v.push_back("((((((((((4,4),4),4),4),4),4),4),4),4),4)");
  v.push_back("(((((((((((4,4),4),4),4),4),4),4),4),4),4),4)");
  v.push_back("((((((((((((4,4),4),4),4),4),4),4),4),4),4),4),4)");
  v.push_back("(((((((((((((4,4),4),4),4),4),4),4),4),4),4),4),4),4)");
  v.push_back("((((((((((((((4,4),4),4),4),4),4),4),4),4),4),4),4),4),4)");
  v.push_back("(((((((((((((((4,4),4),4),4),4),4),4),4),4),4),4),4),4),4),4)");
  v.push_back("((((((((((((((((4,4),4),4),4),4),4),4),4),4),4),4),4),3),3),3),3)");
  return v;
}

const std::vector<std::string> ribi::TestNewickDialog::GetLightBiologicalBinaryNewicks()
{
  std::vector<std::string> v;
  v.push_back("((1,(1,((((((1,1),(1,1)),1),((((1,((1,(1,(10,3))),((3,2),1))),1),2),1)),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,(2,1))),1),((((1,((1,(1,(18,3))),((1,(2,2)),2))),1),1),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,(1,4)),1)))),1),((((1,((1,(2,(11,5))),((1,1),1))),1),2),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,1),1)))),1),((((1,((1,((1,1),(12,6))),(4,1))),1),(1,2)),2)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,((2,1),(1,1)))),1),((((1,((1,(2,(32,6))),((1,2),(1,1)))),1),(1,1)),1)),1),1))),1)");
  v.push_back("((1,(1,(((((1,2),1),((((1,((1,((1,1),(17,3))),(4,1))),1),7),1)),1),1))),(1,1))");
  v.push_back("((1,(1,((((((1,1),(1,(1,2))),1),((((1,((1,(1,(29,3))),((5,1),1))),1),(2,1)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,1)),1),((((1,((1,((1,1),(30,7))),((6,(1,1)),(1,2)))),1),(1,1)),(1,1))),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,(2,(19,3))),(4,1))),1),3),1)),1),1))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,(1,(1,1)))),1),((((1,((1,((1,1),(18,4))),((2,2),1))),1),7),1)),1),1))),2)");
  v.push_back("((1,(1,(((((1,(1,(1,2))),1),((((1,((1,(1,(11,7))),((4,(2,1)),1))),1),3),1)),1),1))),1)");
  v.push_back("((1,(1,(((((2,(1,((1,2),1))),1),((((1,((1,(2,(22,4))),((1,2),(1,1)))),1),(1,1)),1)),1),1))),2)");
  v.push_back("((1,(1,((((2,1),((((1,((1,(1,(16,9))),((2,4),1))),1),2),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((2,(1,(1,(1,1)))),1),((((1,((1,(3,(37,12))),((2,1),1))),1),(1,1)),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,(2,(1,1)))),1),((((1,((1,((1,1),(19,3))),((3,1),1))),1),(3,3)),(1,1))),1),1))),1)");
  v.push_back("((1,(1,(((((((1,1),1),(1,(1,((1,1),1)))),1),((((1,((1,(1,(27,5))),((4,2),1))),1),3),1)),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,(2,2))),1),((((1,((1,(2,(37,5))),((2,(2,1)),1))),1),(1,1)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,1),2)))),1),((((1,((1,(1,(23,8))),((3,3),1))),1),(1,2)),1)),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,(1,(1,2)))),1),((((1,((1,((1,1),(26,4))),((2,3),1))),1),3),1)),1),1))),2)");
  v.push_back("((1,(1,((((((1,1),(1,(1,((1,(2,1)),1)))),1),((((1,((1,(1,(13,7))),((2,3),3))),1),(1,2)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(2,((1,1),1)))),1),((((1,((1,(2,(28,5))),((2,1),2))),1),1),2)),1),1))),2)");
  v.push_back("((1,(1,(((((1,(2,((1,1),2))),1),((((1,((1,(1,(23,7))),((3,2),1))),1),(1,1)),1)),1),1))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,(2,((1,(1,1)),1)))),1),((((1,((1,((1,1),(35,7))),((5,1),1))),1),2),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,((2,1),(24,4))),((3,3),1))),1),3),1)),1),1))),2)");
  v.push_back("((1,(1,(((((1,(1,(1,(3,1)))),1),((((1,((1,(1,(34,7))),(1,2))),1),7),(1,1))),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,(1,1)))),1),((((1,((1,(2,(26,8))),((4,3),1))),1),1),1)),2),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,2))),1),((((1,((1,(2,(31,7))),((3,2),1))),1),2),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,(1,(29,9))),((3,(1,1)),1))),1),(1,3)),2)),1),2))),1)");
  v.push_back("((1,(1,(((((2,(1,(2,2))),1),((((1,((1,(1,(13,7))),((3,1),2))),1),1),1)),1),1))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,(2,((1,1),1)))),1),((((1,((1,(1,(35,11))),((3,(1,1)),1))),1),(1,2)),1)),1),1))),2)");
  v.push_back("((1,(1,(((((1,(1,2)),1),((((1,((1,(1,(32,10))),((3,3),1))),1),1),1)),1),1))),((1,2),1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,2),1)))),1),((((1,((1,(1,(31,9))),((1,3),1))),1),3),2)),1),1))),((1,(1,1)),1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,2),1)))),1),((((1,((1,(1,(27,3))),((3,3),1))),1),(1,2)),(1,1))),1),2))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,(2,(2,1)))),1),((((1,((1,(2,(23,4))),((3,2),1))),1),3),1)),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,(1,(1,1)))),1),((((1,((1,(2,(16,3))),((2,2),(1,1)))),1),(2,3)),3)),1),1))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,(2,2))),1),((((1,((1,(1,(19,7))),((2,2),2))),1),(1,1)),1)),1),1))),2)");
  v.push_back("((1,(1,(((((1,(1,(1,((1,(1,1)),1)))),1),((((1,((1,((1,1),(32,5))),((3,6),(1,1)))),1),2),1)),1),1))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,((1,1),((1,(1,1)),1)))),1),((((1,((1,(1,(32,13))),((1,(2,2)),1))),1),(3,2)),1)),1),1))),1)");
  v.push_back("((1,(1,((((((1,1),(1,(2,1))),1),((((1,((1,(1,(23,4))),((3,4),2))),1),2),1)),1),1))),2)");
  v.push_back("((1,(1,(((((((1,1),1),(1,(2,1))),1),((((1,((1,((4,2),(25,2))),((2,1),2))),1),(1,3)),1)),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,((1,1),((1,1),1)))),1),((((1,((1,((4,1),(30,9))),((4,3),1))),1),1),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,2))),1),((((1,((1,(2,19)),((5,2),2))),1),4),(1,1))),1),1))),2)");
  v.push_back("((1,(1,((((((2,1),(1,(1,(2,1)))),1),((((1,((1,(4,(44,6))),((1,(1,1)),3))),1),(1,1)),(1,1))),1),1))),(1,1))");
  v.push_back("((1,(1,(((((2,(1,((1,1),((1,(1,1)),1)))),1),((((1,((1,(1,(31,8))),((6,1),1))),1),1),2)),1),2))),1)");
  v.push_back("((1,(1,(((((1,(1,(1,3))),1),((((1,((1,(2,(23,6))),(4,1))),1),2),1)),1),1))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,(1,1)),2)))),1),((((1,((1,(1,(27,8))),(4,2))),1),5),1)),1),1))),1)");
  v.push_back("((1,(1,(((((((1,2),1),(1,3)),1),((((1,((1,(2,(23,9))),((4,1),1))),1),(1,2)),1)),1),1))),1)");
  v.push_back("((1,(1,((((((1,1),(1,((1,1),(2,1)))),1),((((1,((1,(2,(40,10))),((2,4),1))),1),1),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,(1,(1,1)))),1),((((1,((1,((2,2),(35,8))),((2,2),1))),1),(1,4)),1)),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,(1,((1,2),1)))),1),((((1,((1,((1,2),(27,7))),((2,2),2))),1),(1,1)),1)),1),1))),(2,1))");
  v.push_back("((1,(1,((((((1,1),(1,(1,((1,2),1)))),1),((((1,((1,((2,1),(33,5))),((1,(2,1)),1))),1),(2,6)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((2,(1,((1,1),((1,1),1)))),1),((((1,((1,(1,(38,4))),((2,3),(1,3)))),1),(1,3)),(1,1))),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,((1,2),((1,1),1)))),1),((((1,((1,(2,(22,4))),((2,(3,1)),3))),1),(1,3)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,3))),1),((((1,((1,(2,(21,2))),((4,2),2))),1),3),2)),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,((2,2),(1,1)))),1),((((1,((1,(1,(36,8))),((2,2),1))),1),2),2)),1),1))),(1,1))");
  v.push_back("((1,(1,((((((1,1),(1,(2,((1,2),1)))),1),((((1,((1,(1,(25,9))),((4,1),1))),1),(1,6)),1)),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,(1,((1,(1,1)),1)))),1),((((1,((1,((1,1),(22,9))),((5,3),1))),1),5),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((3,3),1),((((1,((1,(1,(21,8))),((3,1),3))),1),(1,1)),1)),1),1))),2)");
  v.push_back("((1,(1,(((((1,(1,(2,((1,4),1)))),1),((((1,((1,(4,(28,10))),((1,1),1))),1),(1,1)),1)),1),1))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,(2,((1,(1,1)),1)))),1),((((1,((1,((2,1),(46,3))),((1,4),1))),1),(1,4)),1)),1),1))),2)");
  v.push_back("((1,(1,(((((1,(1,(3,(2,1)))),1),((((1,((1,(2,(35,11))),1)),1),(1,2)),(3,1))),1),1))),1)");
  v.push_back("((1,(1,(((((3,(1,(1,((1,1),1)))),1),((((1,((1,(2,(25,4))),((2,1),(2,1)))),1),5),1)),1),2))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,1),1)))),1),((((1,((1,(3,(42,6))),((3,3),1))),1),3),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,((1,1),(37,5))),((7,2),1))),1),(1,3)),(3,1))),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((2,(1,(1,1))),1),((((1,((1,(3,(20,7))),((3,2),1))),1),2),2)),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,((2,1),2))),1),((((1,((1,((3,1),(18,6))),((4,1),2))),1),(2,1)),(1,1))),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,((1,2),((1,1),1)))),1),((((1,((1,((1,4),(30,6))),((3,1),1))),1),(1,5)),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,((1,1),((1,(1,1)),1)))),1),((((1,((1,(2,(26,7))),((5,2),1))),1),7),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((2,(1,(1,((1,2),1)))),1),((((1,((1,((2,1),(31,9))),((2,1),1))),1),(1,2)),2)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,(1,(33,9))),((7,2),2))),1),2),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(2,(1,1)))),1),((((1,((1,(1,(40,12))),((4,1),1))),1),3),1)),1),1))),2)");
  v.push_back("((1,(1,((((((1,1),(1,((1,1),1))),1),((((1,((1,(1,(29,8))),((6,3),1))),1),4),1)),1),1))),1)");
  v.push_back("((1,(2,((((((2,1),(1,((1,1),((1,(1,1)),1)))),1),((((1,((1,((1,1),(34,6))),((3,(1,1)),(1,1)))),1),3),3)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,4),1)))),1),((((1,((1,((1,1),(44,10))),((1,3),1))),1),5),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,((1,1),1))),1),((((1,((1,((3,1),(44,5))),((2,(3,1)),(3,1)))),1),2),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,2))),1),((((1,((1,(1,(34,7))),((4,(1,3)),1))),1),2),1)),1),2))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,2),1)))),1),((((1,((1,(2,(15,5))),((4,3),2))),1),3),1)),1),1))),1)");
  v.push_back("((1,(1,(((((2,(1,(1,2))),1),((((1,((1,(1,(16,4))),((1,(4,1)),(2,2)))),1),5),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,((((((3,1),(1,(1,(3,1)))),1),((((1,((1,(2,(26,5))),((2,2),1))),1),(1,3)),1)),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,((1,1),((1,(1,2)),1)))),1),((((1,((1,(1,(42,9))),((3,2),3))),1),(1,2)),(1,1))),1),1))),((1,1),1))");
  v.push_back("((1,(1,((((((2,1),(1,(1,((1,(1,1)),1)))),1),((((1,((1,((1,2),(15,5))),((5,3),(1,1)))),1),(1,3)),1)),1),1))),((1,2),1))");
  v.push_back("((1,(1,(((((1,(1,(1,(4,1)))),1),((((1,((1,(3,(28,5))),((1,(3,1)),1))),1),2),1)),1),1))),2)");
  v.push_back("((1,(1,(((((1,(1,((2,2),(1,2)))),1),((((1,((1,(1,(29,6))),((4,3),1))),1),1),1)),1),1))),((1,(1,1)),1))");
  v.push_back("((1,(1,(((((2,(1,(2,2))),1),((((1,((1,(3,(20,5))),(4,1))),1),(3,1)),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,((2,2),4))),1),((((1,((1,((1,1),(36,9))),((1,(1,1)),1))),1),3),1)),1),1))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,((1,1),(33,13))),((5,4),1))),1),2),1)),1),1))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,(1,(1,1)))),1),((((1,((1,((2,1),(47,10))),((3,(1,1)),1))),1),(1,5)),2)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,2)),1),((((1,((1,((2,1),(13,3))),((5,2),(1,2)))),1),3),2)),1),2))),(1,1))");
  v.push_back("((1,(1,(((((2,(1,(1,((1,2),1)))),1),((((1,((1,(1,(30,7))),((3,1),(1,2)))),1),4),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,(1,(2,2)))),1),((((1,((1,(2,(23,8))),((3,1),1))),1),(1,2)),1)),1),1))),(3,1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,(2,1)),1)))),1),((((1,((1,((4,1),(42,5))),((4,1),1))),1),(1,4)),1)),1),1))),1)");
  v.push_back("((1,(1,(((((1,(1,(2,((1,2),1)))),1),((((1,((1,(2,(21,6))),((6,2),1))),1),3),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,((2,1),2))),1),((((1,((1,(2,(29,6))),((2,2),1))),1),(1,4)),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((((1,1),1),(1,(1,((1,2),1)))),1),((((1,((1,(3,(47,6))),((4,1),1))),1),(1,5)),1)),1),1))),(1,1))");
  v.push_back("((1,(1,(((((1,(1,1)),1),((((1,((1,(1,(51,10))),((3,2),(1,2)))),1),(2,1)),1)),1),1))),2)");
  v.push_back("((1,(1,(((((1,(1,(2,2))),1),((((1,((1,(2,(22,2))),((2,6),1))),1),5),1)),1),1))),2)");
  v.push_back("((1,(1,((((((1,1),(1,(1,(1,1)))),1),((((1,((1,(1,(46,10))),((2,2),2))),1),(1,4)),1)),1),1))),(2,1))");
  v.push_back("((1,(1,(((((1,(1,(1,((1,3),1)))),1),((((1,((1,((1,1),(18,7))),((6,1),1))),1),(1,3)),1)),1),1))),(3,1))");
  v.push_back("((2,(1,(((((1,(1,((1,1),1))),1),((((1,((1,((3,1),(28,8))),((2,(2,2)),3))),1),(1,1)),1)),1),1))),((1,1),1))");
  v.push_back("((1,(1,(((((1,(1,(3,(1,1)))),1),((((1,((1,((3,1),(23,7))),((3,2),1))),1),(1,2)),1)),1),1))),(2,1))");
  return v;
}

const std::vector<std::string> ribi::TestNewickDialog::GetLightBinaryNewicks()
{
  std::vector<std::string> v;
  v.push_back("((2,2),2)");
  v.push_back("(((2,2),2),2)");
  v.push_back("((((2,2),2),2),2)");
  v.push_back("(((((2,2),2),2),2),2)");
  v.push_back("((((((2,2),2),2),2),2),2)");
  v.push_back("(((((((2,2),2),2),2),2),2),2)");
  v.push_back("((((((((2,2),2),2),2),2),2),2),2)");
  v.push_back("(((((((((2,2),2),2),2),2),2),2),2),2)");
  v.push_back("((((((((((2,2),2),2),2),2),2),2),2),2),2)");
  v.push_back("(((((((((((2,2),2),2),2),2),2),2),2),2),2),2)");
  v.push_back("((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2)");
  v.push_back("(((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2)");
  v.push_back("((((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2),2)");
  v.push_back("(((((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2),2),2)");
  return v;
}

const std::vector<std::string> ribi::TestNewickDialog::GetLightTrinaryNewicks()
{
  std::vector<std::string> v;
  //Trinarity in leaf
  v.push_back("((2,2,2),2)");
  v.push_back("(((2,2,2),2),2)");
  v.push_back("((((2,2,2),2),2),2)");
  v.push_back("(((((2,2,2),2),2),2),2)");
  v.push_back("((((((2,2,2),2),2),2),2),2)");
  v.push_back("(((((((2,2,2),2),2),2),2),2),2)");
  v.push_back("((((((((2,2,2),2),2),2),2),2),2),2)");
  v.push_back("(((((((((2,2,2),2),2),2),2),2),2),2),2)");
  v.push_back("((((((((((2,2,2),2),2),2),2),2),2),2),2),2)");
  v.push_back("(((((((((((2,2,2),2),2),2),2),2),2),2),2),2),2)");
  v.push_back("((((((((((((2,2,2),2),2),2),2),2),2),2),2),2),2),2)");
  v.push_back("(((((((((((((2,2,2),2),2),2),2),2),2),2),2),2),2),2),2)");
  v.push_back("((((((((((((((2,2,2),2),2),2),2),2),2),2),2),2),2),2),2),2)");
  //Trinarity in root
  v.push_back("((2,2),2,2)");
  v.push_back("(((2,2),2),2,2)");
  v.push_back("((((2,2),2),2),2,2)");
  v.push_back("(((((2,2),2),2),2),2,2)");
  v.push_back("((((((2,2),2),2),2),2),2,2)");
  v.push_back("(((((((2,2),2),2),2),2),2),2,2)");
  v.push_back("((((((((2,2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((2,2),2),2),2),2),2),2),2),2,2)");
  v.push_back("((((((((((2,2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((((2,2),2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("((((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2),2),2,2)");
  //Trinarity in root and leaf
  v.push_back("((2,2,2),2,2)");
  v.push_back("(((2,2,2),2),2,2)");
  v.push_back("((((2,2,2),2),2),2,2)");
  v.push_back("(((((2,2,2),2),2),2),2,2)");
  v.push_back("((((((2,2,2),2),2),2),2),2,2)");
  v.push_back("(((((((2,2,2),2),2),2),2),2),2,2)");
  v.push_back("((((((((2,2,2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((2,2,2),2),2),2),2),2),2),2),2,2)");
  v.push_back("((((((((((2,2,2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((((2,2,2),2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("((((((((((((2,2,2),2),2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((((((2,2,2),2),2),2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("((((((((((((((2,2,2),2),2),2),2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((((((((2,2,2),2),2),2),2),2),2),2),2),2),2),2),2),2),2,2)");
  //Trinarity in root, 1st and 2nd leaf
  v.push_back("(((2,2,2),2,2),2,2)");
  v.push_back("((((2,2,2),2,2),2),2,2)");
  v.push_back("(((((2,2,2),2,2),2),2),2,2)");
  v.push_back("((((((2,2,2),2,2),2),2),2),2,2)");
  v.push_back("(((((((2,2,2),2,2),2),2),2),2),2,2)");
  v.push_back("((((((((2,2,2),2,2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((2,2,2),2,2),2),2),2),2),2),2),2,2)");
  v.push_back("((((((((((2,2,2),2,2),2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((((2,2,2),2,2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("((((((((((((2,2,2),2,2),2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((((((2,2,2),2,2),2),2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("((((((((((((((2,2,2),2,2),2),2),2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((((((((2,2,2),2,2),2),2),2),2),2),2),2),2),2),2),2),2),2,2)");
  //Trinarity in root, 1st, 2nd and 3rdleaf
  v.push_back("((((2,2,2),2,2),2,2),2,2)");
  v.push_back("(((((2,2,2),2,2),2,2),2),2,2)");
  v.push_back("((((((2,2,2),2,2),2,2),2),2),2,2)");
  v.push_back("(((((((2,2,2),2,2),2,2),2),2),2),2,2)");
  v.push_back("((((((((2,2,2),2,2),2,2),2),2),2),2),2,2)");
  v.push_back("(((((((((2,2,2),2,2),2,2),2),2),2),2),2),2,2)");
  v.push_back("((((((((((2,2,2),2,2),2,2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((((2,2,2),2,2),2,2),2),2),2),2),2),2),2),2,2)");
  v.push_back("((((((((((((2,2,2),2,2),2,2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((((((2,2,2),2,2),2,2),2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("((((((((((((((2,2,2),2,2),2,2),2),2),2),2),2),2),2),2),2),2),2,2)");
  v.push_back("(((((((((((((((2,2,2),2,2),2,2),2),2),2),2),2),2),2),2),2),2),2),2,2)");
  return v;
}

const std::vector<std::string> ribi::TestNewickDialog::GetManyBinaryNewicks()
{
  std::vector<std::string> v;
  v.push_back("((90,1000),100)");
  v.push_back("((90,100),1000)");
  v.push_back("((90,100),100)");
  v.push_back("((80,1000),100)");
  v.push_back("((80,100),1000)");
  v.push_back("((80,100),100)");
  v.push_back("((70,1000),100)");
  v.push_back("((70,100),1000)");
  v.push_back("((70,100),100)");
  v.push_back("((60,1000),100)");
  v.push_back("((60,100),1000)");
  v.push_back("((60,100),100)");
  v.push_back("((50,1000),100)");
  v.push_back("((50,100),1000)");
  v.push_back("((50,100),100)");
  v.push_back("((5,5),5)");
  v.push_back("((40,1000),100)");
  v.push_back("((40,100),1000)");
  v.push_back("((40,100),100)");
  v.push_back("((30,1000),100)");
  v.push_back("((30,100),1000)");
  v.push_back("((30,100),100)");
  v.push_back("((3,3),3)");
  v.push_back("((20,1000),100)");
  v.push_back("((20,100),1000)");
  v.push_back("((20,100),100)");
  v.push_back("((2,3),3)");
  v.push_back("((2,2),3)");
  v.push_back("((2,2),2)");
  v.push_back("((1000,100),90)");
  v.push_back("((1000,100),80)");
  v.push_back("((1000,100),70)");
  v.push_back("((1000,100),60)");
  v.push_back("((1000,100),50)");
  v.push_back("((1000,100),40)");
  v.push_back("((1000,100),30)");
  v.push_back("((1000,100),20)");
  v.push_back("((1000,100),100)");
  v.push_back("((1000,100),10)");
  v.push_back("((100,100),90)");
  v.push_back("((100,100),80)");
  v.push_back("((100,100),70)");
  v.push_back("((100,100),60)");
  v.push_back("((100,100),50)");
  v.push_back("((100,100),40)");
  v.push_back("((100,100),30)");
  v.push_back("((100,100),20)");
  v.push_back("((100,100),1000)");
  v.push_back("((100,100),100)");
  v.push_back("((100,100),10)");
  v.push_back("((10,1000),100)");
  v.push_back("((10,100),1000)");
  v.push_back("((10,100),100)");
  v.push_back("(((5,5),5),5)");
  v.push_back("(((3,3),3),3)");
  v.push_back("(((2,3),3),3)");
  v.push_back("(((2,2),3),3)");
  v.push_back("(((2,2),2),3)");
  v.push_back("(((2,2),2),2)");
  v.push_back("((((5,5),5),5),5)");
  v.push_back("((((3,3),3),3),3)");
  v.push_back("((((2,3),3),3),3)");
  v.push_back("((((2,2),3),3),3)");
  v.push_back("((((2,2),2),3),3)");
  v.push_back("((((2,2),2),2),3)");
  v.push_back("((((2,2),2),2),2)");
  v.push_back("(((((5,5),5),5),5),5)");
  v.push_back("(((((3,3),3),3),3),3)");
  v.push_back("(((((2,3),3),3),3),3)");
  v.push_back("(((((2,2),3),3),3),3)");
  v.push_back("(((((2,2),2),3),3),3)");
  v.push_back("(((((2,2),2),2),3),3)");
  v.push_back("(((((2,2),2),2),2),3)");
  v.push_back("(((((2,2),2),2),2),2)");
  v.push_back("((((((5,5),5),5),5),5),5)");
  v.push_back("((((((3,3),3),3),3),3),3)");
  v.push_back("((((((2,3),3),3),3),3),3)");
  v.push_back("((((((2,2),3),3),3),3),3)");
  v.push_back("((((((2,2),2),3),3),3),3)");
  v.push_back("((((((2,2),2),2),3),3),3)");
  v.push_back("((((((2,2),2),2),2),3),3)");
  v.push_back("((((((2,2),2),2),2),2),3)");
  v.push_back("((((((2,2),2),2),2),2),2)");
  v.push_back("(((((((5,5),5),5),5),5),5),5)");
  v.push_back("(((((((3,3),3),3),3),3),3),3)");
  v.push_back("(((((((2,3),3),3),3),3),3),3)");
  v.push_back("(((((((2,2),3),3),3),3),3),3)");
  v.push_back("(((((((2,2),2),3),3),3),3),3)");
  v.push_back("(((((((2,2),2),2),3),3),3),3)");
  v.push_back("(((((((2,2),2),2),2),3),3),3)");
  v.push_back("(((((((2,2),2),2),2),2),3),3)");
  v.push_back("(((((((2,2),2),2),2),2),2),3)");
  v.push_back("(((((((2,2),2),2),2),2),2),2)");
  v.push_back("((((((((5,5),5),5),5),5),5),5),5)");
  v.push_back("((((((((3,3),3),3),3),3),3),3),3)");
  v.push_back("((((((((2,3),3),3),3),3),3),3),3)");
  v.push_back("((((((((2,2),3),3),3),3),3),3),3)");
  v.push_back("((((((((2,2),2),3),3),3),3),3),3)");
  v.push_back("((((((((2,2),2),2),3),3),3),3),3)");
  v.push_back("((((((((2,2),2),2),2),3),3),3),3)");
  v.push_back("((((((((2,2),2),2),2),2),3),3),3)");
  v.push_back("((((((((2,2),2),2),2),2),2),3),3)");
  v.push_back("((((((((2,2),2),2),2),2),2),2),3)");
  v.push_back("((((((((2,2),2),2),2),2),2),2),2)");
  v.push_back("(((((((((5,5),5),5),5),5),5),5),5),5)");
  v.push_back("(((((((((2,3),3),3),3),3),3),3),3),3)");
  v.push_back("(((((((((2,2),3),3),3),3),3),3),3),3)");
  v.push_back("(((((((((2,2),2),3),3),3),3),3),3),3)");
  v.push_back("(((((((((2,2),2),2),3),3),3),3),3),3)");
  v.push_back("(((((((((2,2),2),2),2),3),3),3),3),3)");
  v.push_back("(((((((((2,2),2),2),2),2),3),3),3),3)");
  v.push_back("(((((((((2,2),2),2),2),2),2),3),3),3)");
  v.push_back("(((((((((2,2),2),2),2),2),2),2),3),3)");
  v.push_back("(((((((((2,2),2),2),2),2),2),2),2),2)");
  v.push_back("((((((((((2,2),3),3),3),3),3),3),3),3),3)");
  v.push_back("((((((((((2,2),2),3),3),3),3),3),3),3),3)");
  v.push_back("((((((((((2,2),2),2),3),3),3),3),3),3),3)");
  v.push_back("((((((((((2,2),2),2),2),3),3),3),3),3),3)");
  v.push_back("((((((((((2,2),2),2),2),2),3),3),3),3),3)");
  v.push_back("((((((((((2,2),2),2),2),2),2),3),3),3),3)");
  v.push_back("((((((((((2,2),2),2),2),2),2),2),3),3),3)");
  v.push_back("((((((((((2,2),2),2),2),2),2),2),2),2),2)");
  v.push_back("(((((((((((2,2),2),2),2),3),3),3),3),3),3),3)");
  v.push_back("(((((((((((2,2),2),2),2),2),3),3),3),3),3),3)");
  v.push_back("(((((((((((2,2),2),2),2),2),2),3),3),3),3),3)");
  v.push_back("(((((((((((2,2),2),2),2),2),2),2),3),3),3),3)");
  v.push_back("(((((((((((2,2),2),2),2),2),2),2),2),2),2),2)");
  v.push_back("((((((((((((2,2),2),2),2),2),2),2),3),3),3),3),3)");
  v.push_back("((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2)");
  v.push_back("(((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2)");
  v.push_back("((((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2),2)");
  return v;
}

const std::vector<std::string> ribi::TestNewickDialog::GetMediumBinaryNewicks()
{
  std::vector<std::string> v;
  v.push_back("((3,3),3)");
  v.push_back("(((3,3),3),3)");
  v.push_back("((((3,3),3),3),3)");
  v.push_back("(((((3,3),3),3),3),3)");
  v.push_back("((((((3,3),3),3),3),3),3)");
  v.push_back("(((((((3,3),3),3),3),3),3),3)");
  v.push_back("((((((((3,3),3),3),3),3),3),3),3)");
  v.push_back("(((((((((3,3),3),3),3),3),3),3),3),3)");
  v.push_back("((((((((((3,3),3),3),3),3),3),3),3),3),3)");
  v.push_back("(((((((((((3,3),3),3),3),3),3),3),3),3),3),3)");
  v.push_back("((((((((((((3,3),3),3),3),3),3),3),3),3),3),3),3)");
  return v;
}

void ribi::TestNewickDialog::SaveTable(const std::string& filename) const
{
  std::ofstream f(filename);
  for(const auto row: m_table)
  {
    f << row.newick
      << ','
      << row.theta
      << ','
      << row.test_name
      << ','
      << row.probability
      << ','
      << row.time
      << '\n';
  }
}


