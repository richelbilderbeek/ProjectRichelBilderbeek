<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>operator()</title>
  <meta name="description" content="C++ operator()"/>
  <meta name="keywords" content="C++ STL operator() function call operator code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppOperatorFunctionCall.htm">operator()</a></h1>
<p>&nbsp;</p>
<p>
  <a href="CppOperatorFunctionCall.htm">operator()()</a> (pronounciation: 'function call operator') is the <a href="CppOperator.htm">operator</a> 
  typically used by <a href="CppFunctor.htm">functors</a>.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Test<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDefinition.htm">Definition</a> of <b><a href="CppOperatorFunctionCall.htm">operator()</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperatorFunctionCall.htm">operator()</a></b>() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".\n";<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a Test<br/>
&nbsp;&nbsp;Test t;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Call <b><a href="CppOperatorFunctionCall.htm">operator()</a></b><br/>
&nbsp;&nbsp;t();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example: <a href="CppFunctorGreaterThan.htm">GreaterThan</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppFunctor<a href="CppFunctorGreaterThan.htm">GreaterThan</a>.htm<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppFunctorGreaterThan.htm">GreaterThan</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppBinary_function.htm">std::binary_function</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppFunctorGreaterThan.htm">GreaterThan</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> any_x <a href="CppOperatorAssign.htm">=</a> 0) : x(any_x) {}<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <b><a href="CppOperatorFunctionCall.htm">operator()</a></b>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sum, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sum <a href="CppOperatorPlus.htm">+</a> (y <a href="CppOperatorLessEqual.htm">&lt;=</a> x ? 0 : y);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> x;<br/>
};<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppCreateVector.htm">CreateVector</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v;<br/>
&nbsp;&nbsp;v.push_back(-1);<br/>
&nbsp;&nbsp;v.push_back(0);<br/>
&nbsp;&nbsp;v.push_back(1);<br/>
&nbsp;&nbsp;v.push_back(2);<br/>
&nbsp;&nbsp;v.push_back(3);<br/>
&nbsp;&nbsp;v.push_back(4);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppCreateVector.htm">CreateVector</a>();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),0,<a href="CppFunctorGreaterThan.htm">GreaterThan</a>(5))<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),0,<a href="CppFunctorGreaterThan.htm">GreaterThan</a>(4))<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),0,<a href="CppFunctorGreaterThan.htm">GreaterThan</a>(3))<a href="CppOperatorEqual.htm">==</a>4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),0,<a href="CppFunctorGreaterThan.htm">GreaterThan</a>(2))<a href="CppOperatorEqual.htm">==</a>7);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),0,<a href="CppFunctorGreaterThan.htm">GreaterThan</a>(1))<a href="CppOperatorEqual.htm">==</a>9);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),0,<a href="CppFunctorGreaterThan.htm">GreaterThan</a>(0))<a href="CppOperatorEqual.htm">==</a>10);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Use <a href="CppOperatorFunctionCall.htm">operator()()</a> for call semantics, for subscripting, and for selection based on a multiple values [1]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">Reference</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!-- 1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 19.5. Advice. page 576: '[2] Use operator()() for call semantics, for subscripting, and for selection based on a multiple values'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p><p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
