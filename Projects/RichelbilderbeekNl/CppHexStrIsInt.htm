<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>HexStrIsInt</title>
  <meta name="description" content="C++ HexStrIsInt"/>
  <meta name="keywords" content="C++ HexStrIsInt"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppHexStrIsInt.htm">HexStrIsInt</a></h1>
<p>&nbsp;</p>
<p> Check if a hexadecimal std::string can be converted to an integer.</p>
<p>&nbsp;</p>
<p> There are two options:</p>
<ul>
  <li>Option #1: accepts a shorter range, but can also accept negatives</li>
  <li>Option #2: accepts a much larger range, but cannot accept negatives</li>
</ul>
<p>&nbsp;</p>
<p> Code in plain text can be found <a href="CppHexStrIsInt1.txt">here (#1)</a> and <a href="CppHexStrIsInt2.txt">here (#2)</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Option #1</h3>

<p>&nbsp;</p>
<!-- start of code -->
<table summary="s2l0.g.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppHexStr<a href="CppIsInt.htm">IsInt</a>.htm<br/>
<a href="CppComment.htm">//</a>Checks whether a <a href="CppString.htm">std::string</a> containg hexadecimal <br/>
<a href="CppComment.htm">//</a>can be <a href="CppConvert.htm">convert</a>ed to an <b><a href="CppInt.htm">int</a></b>. <br/>
<a href="CppComment.htm">//</a>Returns <b><a href="CppTrue.htm">true</a></b> <b><a href="CppIf.htm">if</a></b> possible, also <b><a href="CppReturn.htm">return</a></b>ing <b><a href="CppThis.htm">this</a></b> <a href="CppInt.htm">integer</a> by referencing.<br/>
<a href="CppComment.htm">//</a>Returns <b><a href="CppFalse.htm">false</a></b> otherwise, setting the referenced <b><a href="CppInt.htm">int</a></b> to zero.<br/>
<b><a href="CppBool.htm">bool</a></b> IsHexInt(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s, <b><a href="CppInt.htm">int</a></b>&amp; rInt)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIstringstream.htm">std::istringstream</a> i(s);<br/>
&nbsp;&nbsp;i <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppHex.htm">std::hex</a>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(i <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> rInt))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rInt <a href="CppOperatorAssign.htm">=</a> 0; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> temp <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsHexInt("0",temp) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsHexInt("9",temp) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsHexInt("A",temp) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsHexInt("F",temp) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsHexInt("-F",temp) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsHexInt("-F85AE",temp) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsHexInt("80000000",temp) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>); <a href="CppComment.htm">//</a>Maximal value<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsHexInt("80000001",temp) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>); <a href="CppComment.htm">//</a>Out of range<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsHexInt("G",temp) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsHexInt("<a href="CppOperatorDecrement.htm">--</a>80000000",temp) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>); <br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsHexInt("-800-00000",temp) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>); <a href="CppComment.htm">//</a>Does not detect ill-formed numbers<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsHexInt("80000-000",temp) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>); <a href="CppComment.htm">//</a>Does not detect ill-formed numbers<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Note that the std::string cannot have a value higher then <b>80000000</b>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Option #2</h3>
<p>&nbsp;</p>
<p>Suggested by <a href="http://www.programmersheaven.com/c/authorpage.asp?AuthorID=12069">AsmGuru62</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="s2l0.h.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">cstring</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppHexStr<a href="CppIsInt.htm">IsInt</a>.htm<br/>
<a href="CppComment.htm">//</a>This solution was inspired by AsmGuru62<br/>
<a href="CppComment.htm">//</a>http://www.programmersheaven.com/c/authorpage.asp?AuthorID=12069<br/>
<a href="CppComment.htm">//</a>Checks <b><a href="CppIf.htm">if</a></b> a C-style string only contains hexadecimal <a href="CppChar.htm">character</a>s<br/>
<b><a href="CppBool.htm">bool</a></b> IsAllHex (<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b>* <b><a href="CppConst.htm">const</a></b> must_be_hex)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> copy_of_param[64];<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStrtok.htm">std::strtok</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStrcpy.htm">std::strcpy</a>(copy_of_param, must_be_hex),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0123456789ABCDEFabcdef") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsAllHex("0")<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsAllHex("9")<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsAllHex("A")<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsAllHex("F")<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsAllHex("-F")<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>); <a href="CppComment.htm">//</a>Does not accept negatives<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsAllHex("-F85AE")<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>); <a href="CppComment.htm">//</a>Does not accept negatives<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsAllHex("FFFFFFFFFFFFFFFFFFFFFFFFFFF")<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsAllHex("G")<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>As option #1 also has defects in detecting negatives, you might want to change<br/>
<a href="CppComment.htm">//</a>the IsAllHex to the one below:<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppHexStr<a href="CppIsInt.htm">IsInt</a>.htm<br/>
<a href="CppComment.htm">//</a>This solution was inspired by AsmGuru62<br/>
<a href="CppComment.htm">//</a>http://www.programmersheaven.com/c/authorpage.asp?AuthorID=12069<br/>
<a href="CppComment.htm">//</a>Checks <b><a href="CppIf.htm">if</a></b> a C-style string only contains hexadecimal <a href="CppChar.htm">character</a>s<br/>
<a href="CppComment.htm">//</a>and minuses<br/>
<b><a href="CppBool.htm">bool</a></b> IsAllHex (<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b>* <b><a href="CppConst.htm">const</a></b> must_be_hex)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> copy_of_param[64];<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStrtok.htm">std::strtok</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStrcpy.htm">std::strcpy</a>(copy_of_param, must_be_hex),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0123456789ABCDEFabcdef-") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p> As option #1 also has defects in detecting negatives, you might want to change the IsAllHex
to the one below:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="s2l0.i.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppHexStr<a href="CppIsInt.htm">IsInt</a>.htm<br/>
<a href="CppComment.htm">//</a>This solution was inspired by AsmGuru62<br/>
<a href="CppComment.htm">//</a>http://www.programmersheaven.com/c/authorpage.asp?AuthorID=12069<br/>
<a href="CppComment.htm">//</a>Checks <b><a href="CppIf.htm">if</a></b> a C-style string only contains hexadecimal <a href="CppChar.htm">character</a>s<br/>
<a href="CppComment.htm">//</a>and minuses<br/>
<b><a href="CppBool.htm">bool</a></b> IsAllHex (<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b>* <b><a href="CppConst.htm">const</a></b> must_be_hex)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> copy_of_param[64];<br/>
 <br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStrtok.htm">std::strtok</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStrcpy.htm">std::strcpy</a>(copy_of_param, must_be_hex),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0123456789ABCDEFabcdef-") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
