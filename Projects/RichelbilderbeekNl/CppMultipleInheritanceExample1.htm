<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MultipleInheritanceExample1</title>
  <meta name="description" content="C++ MultipleInheritanceExample1"/>
  <meta name="keywords" content="C++ MultipleInheritanceExample1 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMultipleInheritanceExample1.htm">MultipleInheritanceExample1</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppMultipleInheritanceExample1-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.10 (utopic)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.1.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.9.1</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.9.1</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppMultipleInheritanceExample1/CppMultipleInheritanceExample1.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMultipleInheritanceExample1/CppMultipleInheritanceExample1.pro" border = "1"><tr><td><code>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= app_bundle<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= qt<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a> <a href="CppWerror.htm">-Werror</a><br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMultipleInheritanceExample1/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMultipleInheritanceExample1/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppAbstractBaseClass.htm">Abstract base class</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>LoggedIn : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "logged_in"; }<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>NotLoggedIn : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "not_logged_in"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppAbstractBaseClass.htm">Abstract base class</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Administrator : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Administrator() {}<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> AdministratorLoggedIn : <b><a href="CppPublic.htm">public</a></b> Administrator, <a href="CppState.htm">State</a>LoggedIn<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>LoggedIn::ToStr(); }<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> AdministratorNotLoggedIn : <b><a href="CppPublic.htm">public</a></b> Administrator, <a href="CppState.htm">State</a>NotLoggedIn<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>NotLoggedIn::ToStr(); }<br/>
};<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppAbstractBaseClass.htm">Abstract base class</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Participant : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Participant() {}<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantLoggedIn : <b><a href="CppPublic.htm">public</a></b> Participant, <a href="CppState.htm">State</a>LoggedIn<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>LoggedIn::ToStr(); }<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantNotLoggedIn : <b><a href="CppPublic.htm">public</a></b> Participant, <a href="CppState.htm">State</a>NotLoggedIn<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>NotLoggedIn::ToStr(); }<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Administrator&gt; a1(<b><a href="CppNew.htm">new</a></b> AdministratorLoggedIn);<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Administrator&gt; a2(<b><a href="CppNew.htm">new</a></b> AdministratorNotLoggedIn);<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Participant&gt; p1(<b><a href="CppNew.htm">new</a></b> ParticipantLoggedIn);<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Participant&gt; p2(<b><a href="CppNew.htm">new</a></b> ParticipantNotLoggedIn);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a1-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> p1-&gt;ToStr());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a2-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> p2-&gt;ToStr());<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a1-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a2-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a> Screen output:<br/>
<br/>
logged_in<br/>
not_logged_in<br/>
Press &lt;RETURN&gt; to close <b><a href="CppThis.htm">this</a></b> window...<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
