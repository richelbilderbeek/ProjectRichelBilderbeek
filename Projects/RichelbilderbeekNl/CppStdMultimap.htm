<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::multimap</title>
  <meta name="description" content="C++ std::multimap"/>
  <meta name="keywords" content="C++ std::multimap code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMultimap.htm">std::multimap</a></h1>
<p>&nbsp;</p>
<p><a href="CppMultimap.htm">std::multimap</a> is an <a href="CppStl.htm">STL</a> <a href="CppContainer.htm">container</a> similar to 
<a href="CppMap.htm">std::map</a>, except that it can hold multiple values for one key.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<br/>
<a href="CppMultimap.htm">std::multimap</a>&lt;<a href="CppString.htm">std::string</a>, <b><a href="CppInt.htm">int</a></b>&gt; phonebook;<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The <a href="CppString.htm">std::string</a> is
the key (in this case a last name) and the <b><a href="CppInt.htm">int</a></b>
is termed the value (in this case the persons telephone numbers).</p>
<p>&nbsp;</p>
<p>One key can only have no, one or many values,
like a person can have no, one or many phone numbers.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<p>To add a key-value-pair, use
std::multimap&lt;T&gt;::insert. To find a range of values, use
std::multimap&lt;T&gt;::equal_range. This <a href="CppMemberFunction.htm">member function</a> <a
href="CppReturn.htm">returns</a> a <a href="CppPair.htm">std::pair</a> of <a
href="CppIterator.htm">iterators</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppMultimap.htm">std::multimap</a>&lt;<a href="CppString.htm">std::string</a>, <a href="CppString.htm">std::string</a>&gt; <a href="CppQuestion.htm">question</a>s;<br/>
 <br/>
&nbsp;&nbsp;<a href="CppQuestion.htm">question</a>s.insert(<a href="CppMake_pair.htm">std::make_pair</a>("A prime number between 10 to 20","11"));<br/>
&nbsp;&nbsp;<a href="CppQuestion.htm">question</a>s.insert(<a href="CppMake_pair.htm">std::make_pair</a>("A prime number between 10 to 20","13"));<br/>
&nbsp;&nbsp;<a href="CppQuestion.htm">question</a>s.insert(<a href="CppMake_pair.htm">std::make_pair</a>("A prime number between 10 to 20","17"));<br/>
&nbsp;&nbsp;<a href="CppQuestion.htm">question</a>s.insert(<a href="CppMake_pair.htm">std::make_pair</a>("A prime number between 10 to 20","19"));<br/>
 <br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppMultimap.htm">std::multimap</a>&lt;<a href="CppString.htm">std::string</a>, <a href="CppString.htm">std::string</a>&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
 <br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPair.htm">std::pair</a>&lt;<a href="CppIterator.htm">Iterator</a>,<a href="CppIterator.htm">Iterator</a>&gt; answers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppQuestion.htm">question</a>s.equal_range("A prime number between 10 to 20");<br/>
 <br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> answers.first; i<a href="CppOperatorNotEqual.htm">!=</a> answers.second; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i-&gt;second <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://en.wikipedia.org/wiki/Multimap_(data_structure)">Wikipedia's page about std::multimap</a></li>
  <li><a href="http://www.sgi.com/tech/stl/Multimap.html">SGI's page about std::multimap</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>







