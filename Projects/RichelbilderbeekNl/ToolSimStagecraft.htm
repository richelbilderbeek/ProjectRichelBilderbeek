<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>SimStagecraft</title>
  <meta name="description" content="C++ SimStagecraft"/>
  <meta name="keywords" content="C++ SimStagecraft "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolSimStagecraft.htm">SimStagecraft</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Tue Aug  5 12:03:54 2014
 -->
<p><a href="ToolSimStagecraft.htm">SimStagecraft</a> is a <a href="Tools.htm">tool</a> that 
simulates the connecting and use of stagecraft equipment. For example, how to connect a microphone to 
a sound table and speaker.</p>
<p>&nbsp;</p>
<p><a href="ToolSimStagecraft.htm"></a> is programmed in <a href="Cpp.htm">C++</a> using the IDE <a
href="CppBuilder.htm">C++ Builder</a> 6.0. It uses the <a href="CppStl.htm">STL</a>,
<a href="CppVcl.htm">VCL</a> and <a href="CppBoost.htm">Boost</a> library.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolSimStagecraft_1_1.png">View a screenshot of 'SimStagecraft' (version 1.1)</a></li>
  <li><a href="ToolSimStagecraftSource_1_1.htm">View the 'SimStagecraft' source code as a web page (version 1.1)(htm)</a></li>
  <li><a href="ToolSimStagecraftSource.zip">Download the 'SimStagecraft' source code (version 1.1)(zip)</a></li>
  <li><a href="ToolSimStagecraftExe.zip">Download the 'SimStagecraft' Windows executable (version 1.1)(zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Version history</h2>
<p>&nbsp;</p>
<ul>
  <li>Version X.Y: DD-MM-YYYY</li>
  <li>Version 1.1: 07-05-2009</li>
  <li>Version 1.0: 10-02-2009</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Older downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolSimStagecraftSource_1_0.zip">Download the 'SimStagecraft' source code v1.0 (zip)</a></li>
  <li><a href="ToolSimStagecraftExe_1_0.zip">Download the 'SimStagecraft' Windows executable v1.0 (zip)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/ProjectSimStagecraft.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/ProjectSimStagecraft.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> Project<a href="ToolSimStagecraft.htm">SimStagecraft</a>H<br/>
<a href="CppDefine.htm">#define</a> Project<a href="ToolSimStagecraft.htm">SimStagecraft</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTitle;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppAbout.htm">About</a>;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageQuit;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageStart;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image5;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image6;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBackground;<br/>
&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rBackground;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBuffer;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rBackground<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormMouseDown(TObject *Sender, TMouseButton Button,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>Background();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TickBackground();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawScreen();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; mImages;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; GetImages() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mBorderSize;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu *Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/ProjectSimStagecraft.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/ProjectSimStagecraft.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitFormCdPlayer<a href="CppImplementationFile.htm">.cpp</a>", FormCdPlayer);<br/>
USEFORM("UnitFormDimblockV3<a href="CppImplementationFile.htm">.cpp</a>", FormDimblockV3);<br/>
USEFORM("UnitFormEasyAmp<a href="CppImplementationFile.htm">.cpp</a>", FormEasyAmp);<br/>
USEFORM("UnitFormMachine<a href="CppImplementationFile.htm">.cpp</a>", FormMachine);<br/>
USEFORM("UnitFormMdPlayer<a href="CppImplementationFile.htm">.cpp</a>", FormMdPlayer);<br/>
USEFORM("UnitFormOctlet<a href="CppImplementationFile.htm">.cpp</a>", FormOctlet);<br/>
USEFORM("UnitFormPar64<a href="CppImplementationFile.htm">.cpp</a>", FormPar64);<br/>
USEFORM("UnitFormRcf322A<a href="CppImplementationFile.htm">.cpp</a>", FormRcf322A);<br/>
USEFORM("UnitFormRcfEvent3000<a href="CppImplementationFile.htm">.cpp</a>", FormRcfEvent3000);<br/>
USEFORM("UnitFormShureSm58<a href="CppImplementationFile.htm">.cpp</a>", FormShureSm58);<br/>
USEFORM("UnitFormSimpleShine1<a href="CppImplementationFile.htm">.cpp</a>", FormSimpleShine1);<br/>
USEFORM("UnitFormSimpleShine2<a href="CppImplementationFile.htm">.cpp</a>", FormSimpleShine2);<br/>
USEFORM("UnitFormSimpleSound1<a href="CppImplementationFile.htm">.cpp</a>", FormSimpleSound1);<br/>
USEFORM("UnitFormSimpleSound2<a href="CppImplementationFile.htm">.cpp</a>", FormSimpleSound2);<br/>
USEFORM("UnitFormSimpleSound3<a href="CppImplementationFile.htm">.cpp</a>", FormSimpleSound3);<br/>
USEFORM("UnitFormSimpleSound4<a href="CppImplementationFile.htm">.cpp</a>", FormSimpleSound4);<br/>
USEFORM("UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a><a href="CppImplementationFile.htm">.cpp</a>", Form<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>);<br/>
USEFORM("UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main<a href="CppImplementationFile.htm">.cpp</a>", Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main);<br/>
USEFORM("UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu<a href="CppImplementationFile.htm">.cpp</a>", Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu);<br/>
USEFORM("UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences<a href="CppImplementationFile.htm">.cpp</a>", Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences);<br/>
USEFORM("UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select<a href="CppImplementationFile.htm">.cpp</a>", Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select);<br/>
USEFORM("UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew<a href="CppImplementationFile.htm">.cpp</a>", Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew);<br/>
USEFORM("UnitFormSprites<a href="CppImplementationFile.htm">.cpp</a>", FormSprites);<br/>
USEFORM("UnitFormTransitionPieceJackMaleTwoCinchFemale<a href="CppImplementationFile.htm">.cpp</a>", FormTransitionPieceJackMaleTwoCinchFemale);<br/>
USEFORM("UnitForm<a href="CppTriple.htm">Triple</a>t<a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppTriple.htm">Triple</a>t);<br/>
USEFORM("UnitFormWallSocket220<a href="CppImplementationFile.htm">.cpp</a>", FormWallSocket220);<br/>
USEFORM("UnitFormWallSocketPower<a href="CppImplementationFile.htm">.cpp</a>", FormWallSocketPower);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "<a href="ToolSimStagecraft.htm">SimStagecraft</a>";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu), &amp;Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormSprites), &amp;FormSprites);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitAmplifier.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitAmplifier.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitAmplifierH<br/>
<a href="CppDefine.htm">#define</a> UnitAmplifierH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppComment.htm">//</a>Use<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> TwoSwitch;<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection;<br/>
<b><a href="CppStruct.htm">struct</a></b> JackXlrFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> SpeakonFemale;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>;<br/>
<a href="CppComment.htm">//</a>Misc<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormEasyAmp;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Amplifier : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Amplifiers <b><a href="CppDo.htm">do</a></b> not use DMX<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dmxChannel) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Amplifier can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Amplifier() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Amplifier *);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Misc<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; &gt; CreateFaders(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n) <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> EasyAmp : <b><a href="CppPublic.htm">public</a></b> Amplifier<br/>
{<br/>
&nbsp;&nbsp;EasyAmp();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Amplifier can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~EasyAmp() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(EasyAmp*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitch&gt; mPowerSwitch;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mGain;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt; mEuroPower;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackXlrFemale&gt; mJackXlrL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackXlrFemale&gt; mJackXlrR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemale&gt; mSpeakonL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemale&gt; mSpeakonR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>Power;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormEasyAmp;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitAmplifier.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitAmplifier.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h" <a href="CppComment.htm">//</a>For Fader, etc..<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplay.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitAmplifier.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EasyAmp::EasyAmp()<br/>
&nbsp;&nbsp;: <a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPowerSwitch(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitch&gt;(<b><a href="CppNew.htm">new</a></b> TwoSwitch)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mGain(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mEuroPower(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt;(<b><a href="CppNew.htm">new</a></b> EuroMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mJackXlrL(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackXlrFemale&gt;(<b><a href="CppNew.htm">new</a></b> JackXlrFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mJackXlrR(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackXlrFemale&gt;(<b><a href="CppNew.htm">new</a></b> JackXlrFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSpeakonL(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemale&gt;(<b><a href="CppNew.htm">new</a></b> SpeakonFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSpeakonR(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemale&gt;(<b><a href="CppNew.htm">new</a></b> SpeakonFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>Power(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>Power.get(),255,0,0));<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> EasyAmp::PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; <a href="CppComment.htm">/*</a> prevConnectors <a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>Power.get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <b><a href="CppThis.htm">this</a></b>-&gt;mPowerSwitch-&gt;IsOn() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> EasyAmp::Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;mPowerSwitch-&gt;IsOn() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only the speakon plugs will supply audio <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorNotEqual.htm">!=</a> mSpeakonL.get() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> connector <a href="CppOperatorNotEqual.htm">!=</a> mSpeakonR.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (connector <a href="CppOperatorEqual.htm">==</a> mSpeakonL.get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppThis.htm">this</a></b>-&gt;mJackXlrL-&gt;GetConnectedTo()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <b><a href="CppThis.htm">this</a></b>-&gt;mJackXlrR-&gt;GetConnectedTo());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnection <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prevent loops of connection<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),prevConnectors.end(),inputConnection)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> prevConnectors.end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Correct connection<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnection-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputConnection,prevConnectors);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> gain <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mGain-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> audioInput * gain;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> EasyAmp::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mEuroPower-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()) &gt; 0.0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitAux.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitAux.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitAuxH<br/>
<a href="CppDefine.htm">#define</a> UnitAuxH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppEnum.htm">enum</a></b> Aux<br/>
{<br/>
&nbsp;&nbsp;aux1, aux2<br/>
};<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitAux.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitAux.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitAux.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitCdPlayer.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitCdPlayer.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitCdPlayerH<br/>
<a href="CppDefine.htm">#define</a> UnitCdPlayerH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitTapButton.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Display;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> Connector;<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection;<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdSymbol;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Plug220;<br/>
<b><a href="CppStruct.htm">struct</a></b> PressButton;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormCdPlayer;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> CdPlayer : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;CdPlayer();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; };<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have power?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressPower();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressRecord();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressStop();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressPlay();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick(); <a href="CppComment.htm">//</a>Must be called every <a href="CppTime.htm">time</a> cycle <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> CdPlayer<a href="CppState.htm">State</a> { cdOff, cdOn, cdPlay };<br/>
&nbsp;&nbsp;CdPlayer<a href="CppState.htm">State</a> m<a href="CppState.htm">State</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mAudioRecordedL;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mAudioRecordedR;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mPlayPos;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mAudioRecordedLength <a href="CppOperatorAssign.htm">=</a> 100;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CreateCdL() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CreateCdR() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;~CdPlayer() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CdPlayer can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(CdPlayer *);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt; TapButton&lt;CdPlayer&gt; &gt; mButtonPower;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt; TapButton&lt;CdPlayer&gt; &gt; mButtonStop;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt; TapButton&lt;CdPlayer&gt; &gt; mButtonPlay;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemale&gt; mCinchFemaleOutL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemale&gt; mCinchFemaleOutR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220&gt; mPlug220Power;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnectionAudio<a href="CppSignal.htm">Signal</a>L;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnectionAudio<a href="CppSignal.htm">Signal</a>R;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnectionLcdSymbolPlay;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt; mAudio<a href="CppSignal.htm">Signal</a>DisplayL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt; mAudio<a href="CppSignal.htm">Signal</a>DisplayR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbol&gt; mLcdSymbolPlay;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>Power;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormCdPlayer;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitCdPlayer.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitCdPlayer.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitCdPlayer.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplay.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
CdPlayer::CdPlayer()<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;mButtonPower(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButton&lt;CdPlayer&gt; &gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButton&lt;CdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,&amp;CdPlayer::PressPower))),<br/>
&nbsp;&nbsp;mButtonStop(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButton&lt;CdPlayer&gt; &gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButton&lt;CdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,&amp;CdPlayer::PressStop))),<br/>
&nbsp;&nbsp;mButtonPlay(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButton&lt;CdPlayer&gt; &gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButton&lt;CdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,&amp;CdPlayer::PressPlay))),<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mCinchFemaleOutL(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemale&gt;(<b><a href="CppNew.htm">new</a></b> CinchWhiteFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mCinchFemaleOutR(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemale&gt;(<b><a href="CppNew.htm">new</a></b> CinchRedFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mPlug220Power(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220&gt;(<b><a href="CppNew.htm">new</a></b> Plug220(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mConnectionAudio<a href="CppSignal.htm">Signal</a>L(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mConnectionAudio<a href="CppSignal.htm">Signal</a>R(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mConnectionLcdSymbolPlay(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>Power(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;m<a href="CppState.htm">State</a>(cdOff),<br/>
&nbsp;&nbsp;mAudioRecordedL(<b><a href="CppThis.htm">this</a></b>-&gt;CreateCdL()),<br/>
&nbsp;&nbsp;mAudioRecordedR(<b><a href="CppThis.htm">this</a></b>-&gt;CreateCdR()),<br/>
&nbsp;&nbsp;mPlayPos(0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayL <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Display(mConnectionAudio<a href="CppSignal.htm">Signal</a>L.get()));<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayR <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Display(mConnectionAudio<a href="CppSignal.htm">Signal</a>R.get()));<br/>
&nbsp;&nbsp;mLcdSymbolPlay <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbol&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> LcdSymbol(mConnectionLcdSymbolPlay.get()));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>Power.get(),0,255,0));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> CdPlayer::PowerSupplyStrength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; <a href="CppComment.htm">/*</a> prevConnectors <a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(connector <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnectionAudio<a href="CppSignal.htm">Signal</a>L.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(mCinchFemaleOutL.get(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnectionAudio<a href="CppSignal.htm">Signal</a>R.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(mCinchFemaleOutR.get(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnectionLcdSymbolPlay.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (m<a href="CppState.htm">State</a> <a href="CppOperatorEqual.htm">==</a> cdPlay ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>Power.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (m<a href="CppState.htm">State</a> <a href="CppOperatorNotEqual.htm">!=</a> cdOff ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> CdPlayer::Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleOutL.get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleOutR.get() );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m<a href="CppState.htm">State</a> <a href="CppOperatorEqual.htm">==</a> cdPlay)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Playing from CD disc, <b><a href="CppReturn.htm">return</a></b> CD disc <a href="CppSignal.htm">signal</a> ONLY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>-&gt; that is, input to CD player is discarded<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleOutL.get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mPlayPos <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mPlayPos &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mAudioRecordedL.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mAudioRecordedL[mPlayPos];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleOutR.get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mPlayPos <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mPlayPos &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mAudioRecordedR.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mAudioRecordedR[mPlayPos];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CdPlayer::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;mPlug220Power.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mPlug220Power-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Power plug (220V) not connected to <a href="CppAny.htm">any</a>thing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> powerSupply <a href="CppOperatorAssign.htm">=</a> otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (powerSupply &gt; 0.0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> CdPlayer::PressPower()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m<a href="CppState.htm">State</a> <a href="CppOperatorNotEqual.htm">!=</a> cdOff) { m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> cdOff; }<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> cdOn;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> CdPlayer::PressStop()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> cdOn;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPlayPos <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> cdOff;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> CdPlayer::PressPlay()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> cdPlay;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPlayPos <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> cdOff;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Must be called every <a href="CppTime.htm">time</a> cycle <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
<b><a href="CppVoid.htm">void</a></b> CdPlayer::Tick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> cdOff;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (m<a href="CppState.htm">State</a> <a href="CppOperatorEqual.htm">==</a> cdPlay)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>mPlayPos;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mAudioRecordedL.size() <a href="CppOperatorEqual.htm">==</a> mAudioRecordedR.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mPlayPos <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mAudioRecordedL.size()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Stop playing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayPos <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> cdOn;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CdPlayer::CreateCdL() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> length <a href="CppOperatorAssign.htm">=</a> CdPlayer::mAudioRecordedLength;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v;<br/>
&nbsp;&nbsp;v.reserve(length);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>length; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(length))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 6.0 * <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.5 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdCos.htm">std::cos</a>(x) * 0.45);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(y);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CdPlayer::CreateCdR() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> length <a href="CppOperatorAssign.htm">=</a> CdPlayer::mAudioRecordedLength;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v;<br/>
&nbsp;&nbsp;v.reserve(length);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>length; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(length))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 8.0 * <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.5 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdSin.htm">std::sin</a>(x) * 0.45);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(y);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitChannel.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitChannel.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitChannelH<br/>
<a href="CppDefine.htm">#define</a> UnitChannelH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppEnum.htm">enum</a></b> Channel<br/>
{<br/>
&nbsp;&nbsp;channel1,<br/>
&nbsp;&nbsp;channel2,<br/>
&nbsp;&nbsp;channel3,<br/>
&nbsp;&nbsp;channel4,<br/>
&nbsp;&nbsp;channel5,<br/>
&nbsp;&nbsp;channel6,<br/>
&nbsp;&nbsp;channel7,<br/>
&nbsp;&nbsp;channel8,<br/>
&nbsp;&nbsp;channel9,<br/>
&nbsp;&nbsp;channel10,<br/>
&nbsp;&nbsp;channel11,<br/>
&nbsp;&nbsp;channel12,<br/>
&nbsp;&nbsp;channelMaster<br/>
};<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitChannel.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitChannel.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitChannel.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitCommand.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitCommand.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitCommandH<br/>
<a href="CppDefine.htm">#define</a> UnitCommandH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl/CppCommand<a href="CppDesignPattern.htm">DesignPattern</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> Command<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppVoid.htm">void</a></b> (*FunctionPointer)(T&amp; target);<br/>
<br/>
&nbsp;&nbsp;Command(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;T&gt; target, <b><a href="CppConst.htm">const</a></b> FunctionPointer functionPointer)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: mTarget(target), m<a href="CppFunction.htm">Function</a>(functionPointer) { }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Execute() { m<a href="CppFunction.htm">Function</a>( *( mTarget.get() ) ); }<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;T&gt; mTarget;<br/>
&nbsp;&nbsp;FunctionPointer m<a href="CppFunction.htm">Function</a>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitCommand.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitCommand.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitCommand.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitConnector.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitConnector.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitConnectorH<br/>
<a href="CppDefine.htm">#define</a> UnitConnectorH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> Every Machine has at least one Connector<br/>
<a href="CppComment.htm">//</a> A Connector belongs to a Machine and is of a certain type<br/>
<b><a href="CppStruct.htm">struct</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;Connector(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Connect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Disconnect();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnectedTo() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> mBelongsTo;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> IsConnected() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> (mConnectedTo<a href="CppOperatorNotEqual.htm">!=</a>0); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connector can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Connector() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Connector *);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * mConnectedTo;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedFemale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;CinchRedFemale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CinchRedFemale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~CinchRedFemale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(CinchRedFemale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedMale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;CinchRedMale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CinchRedMale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~CinchRedMale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(CinchRedMale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteFemale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;CinchWhiteFemale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CinchWhiteFemale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~CinchWhiteFemale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(CinchWhiteFemale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteMale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;CinchWhiteMale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CinchWhiteMale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~CinchWhiteMale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(CinchWhiteMale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> DmxFemale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;DmxFemale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DmxFemale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~DmxFemale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(DmxFemale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> DmxMale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;DmxMale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DmxMale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~DmxMale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(DmxMale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroFemale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;EuroFemale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>EuroFemale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~EuroFemale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(EuroFemale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;EuroMale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>EuroMale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~EuroMale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(EuroMale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> InternalConnection is a soldered connection internal to a machine<br/>
<a href="CppComment.htm">//</a> For example, the connection between a power <a href="CppLed.htm">LED</a> and a triplet<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;InternalConnection(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>InternalConnection can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~InternalConnection() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(InternalConnection *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> JackFemale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;JackFemale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>JackFemale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~JackFemale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(JackFemale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Combo connector of both jack female and XLR female<br/>
<b><a href="CppStruct.htm">struct</a></b> JackXlrFemale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;JackXlrFemale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>JackXlrFemale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~JackXlrFemale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(JackXlrFemale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> JackMale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;JackMale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>JackMale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~JackMale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(JackMale *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Plug220 : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;Plug220(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Plug220 can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~Plug220() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Plug220 *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SpeakonFemale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;SpeakonFemale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SpeakonFemale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~SpeakonFemale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SpeakonFemale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SpeakonMale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;SpeakonMale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SpeakonMale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~SpeakonMale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SpeakonMale *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SocketPowerMale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;SocketPowerMale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SocketPowerMale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~SocketPowerMale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SocketPowerMale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Socket220 : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;Socket220(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Socket220 can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~Socket220() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Socket220 *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SocketPowerFemale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;SocketPowerFemale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SocketPowerFemale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~SocketPowerFemale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SocketPowerFemale *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;XlrFemale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>XlrFemale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~XlrFemale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(XlrFemale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMale : <b><a href="CppPublic.htm">public</a></b> Connector<br/>
{<br/>
&nbsp;&nbsp;XlrMale(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo) : Connector(belongsTo) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>XlrMale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~XlrMale() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(XlrMale *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitConnector.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitConnector.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector::Connector(<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo)<br/>
&nbsp;&nbsp;: mBelongsTo(belongsTo), mConnectedTo(0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Connector::Connect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherConnector <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (mConnectedTo <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> mConnectedTo <a href="CppOperatorEqual.htm">==</a> otherConnector)<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume GUI handles <b><a href="CppThis.htm">this</a></b>");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Two connections will take place, therefore otherConnector is either<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>null or already connected to <b><a href="CppThis.htm">this</a></b> connector<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (otherConnector-&gt;GetConnectedTo() <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> otherConnector-&gt;GetConnectedTo() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume GUI handles <b><a href="CppThis.htm">this</a></b>");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;CanConnect(otherConnector)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnectedTo <a href="CppOperatorAssign.htm">=</a> otherConnector;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Connector::Disconnect()<br/>
{<br/>
&nbsp;&nbsp;mConnectedTo <a href="CppOperatorAssign.htm">=</a> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> Connector::GetConnectedTo() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mConnectedTo;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CinchRedFemale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> CinchRedFemale* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CinchRedMale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> CinchRedFemale* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CinchWhiteFemale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> CinchWhiteFemale* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CinchWhiteMale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> CinchWhiteFemale* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> DmxFemale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> DmxMale* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> DmxMale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> DmxFemale* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> EuroFemale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> EuroMale* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> EuroMale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> EuroFemale * <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Socket220* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> InternalConnection is a soldered connection internal to a machine<br/>
<a href="CppComment.htm">//</a> For example, the connection between a power <a href="CppLed.htm">LED</a> and a triplet<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> InternalConnection::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> InternalConnection* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> JackFemale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> JackMale&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> JackFemale&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> JackXlrFemale * <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> JackXlrFemale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> JackMale&nbsp;&nbsp; * <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> JackFemale * <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> XlrMale&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> XlrFemale&nbsp;&nbsp;* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> JackMale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> JackMale&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> JackFemale&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> JackXlrFemale * <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> Socket220::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Plug220 * <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> EuroMale* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> SocketPowerFemale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> SocketPowerMale* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> Plug220::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Socket220* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> SocketPowerMale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> SocketPowerFemale* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> SpeakonFemale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> SpeakonMale&nbsp;&nbsp; * <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> SpeakonFemale * <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> SpeakonMale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> SpeakonMale&nbsp;&nbsp; * <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> SpeakonFemale * <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> XlrFemale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> XlrMale&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
 <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> JackXlrFemale * <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> XlrMale::CanConnect(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> XlrFemale* <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
 <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> JackXlrFemale * <b><a href="CppConst.htm">const</a></b>&gt;(otherConnector) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitConnectorControl.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitConnectorControl.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitConnectorControlH<br/>
<a href="CppDefine.htm">#define</a> UnitConnectorControlH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> Connector;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormSprites;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormMachine;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> DmxFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> DmxMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> JackFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> JackXlrFemale; <a href="CppComment.htm">//</a>Combo connector of both Jack female and XLR female<br/>
<b><a href="CppStruct.htm">struct</a></b> JackMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> Plug220;<br/>
<b><a href="CppStruct.htm">struct</a></b> Socket220;<br/>
<b><a href="CppStruct.htm">struct</a></b> SocketPowerFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> SocketPowerMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> SpeakonFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> SpeakonMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMale;<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Extctrls { <b><a href="CppStruct.htm">struct</a></b> <a href="CppTImage.htm">TImage</a>; }<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Handles the GUI of a Connector<br/>
<b><a href="CppStruct.htm">struct</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;ConnectorControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageUnselectedUnconnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageSelectedUnconnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageUnselectedConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageSelectedConnected);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Select();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Unselect();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Connect(ConnectorControl * <b><a href="CppConst.htm">const</a></b> otherConnectorControl);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Disconnect();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanConnect(ConnectorControl * <b><a href="CppConst.htm">const</a></b> otherConnectorControl) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> Connector * GetConnector() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> IsConnected() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> IsConnectedTo(<b><a href="CppConst.htm">const</a></b> ConnectorControl * other) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ConnectorControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~ConnectorControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(ConnectorControl*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> mImageUnselectedUnconnected;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> mImageSelectedUnconnected;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> mImageUnselectedConnected;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> mImageSelectedConnected;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> mSelected;<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> mImage;<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> mBelongsTo;<br/>
&nbsp;&nbsp;ConnectorControl * mIsConnectedTo;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateImage();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedFemaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;CinchRedFemaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemale&gt; cinchFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemale&gt; mCinchFemale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CinchRedFemaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~CinchRedFemaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(CinchRedFemaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteFemaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;CinchWhiteFemaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemale&gt; cinchFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemale&gt; mCinchFemale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CinchWhiteFemaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~CinchWhiteFemaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(CinchWhiteFemaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedMaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;CinchRedMaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedMale&gt; cinchMale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedMale&gt; mCinchMale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CinchRedMaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~CinchRedMaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(CinchRedMaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteMaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;CinchWhiteMaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedMale&gt; cinchMale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedMale&gt; mCinchMale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CinchWhiteMaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~CinchWhiteMaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(CinchWhiteMaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> DmxFemaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;DmxFemaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemale&gt; dmxFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemale&gt; mDmxFemale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DmxFemaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~DmxFemaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(DmxFemaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> DmxMaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;DmxMaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxMale&gt; dmxMale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxMale&gt; mDmxMale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DmxMaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~DmxMaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(DmxMaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroFemaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;EuroFemaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroFemale&gt; euroFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroFemale&gt; mEuroFemale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>EuroFemaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~EuroFemaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(EuroFemaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;EuroMaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt; euroMale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt; mEuroMale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>EuroMaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~EuroMaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(EuroMaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> JackFemaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;JackFemaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemale&gt; euroFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemale&gt; mJackFemale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>JackFemaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~JackFemaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(JackFemaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> JackXlrFemaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;JackXlrFemaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackXlrFemale&gt; euroFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackXlrFemale&gt; mJackXlrFemale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>JackXlrFemaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~JackXlrFemaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(JackXlrFemaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> JackMaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;JackMaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackMale&gt; euroFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackMale&gt; mJackMale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>JackMaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~JackMaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(JackMaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Plug220Control : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;Plug220Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220&gt; plug220,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220&gt; mPlug220;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Plug220Control can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~Plug220Control() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Plug220Control*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Socket220Control : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;Socket220Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; socket220,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; mSocket220;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Socket220Control can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~Socket220Control() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Socket220Control*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SocketPowerFemaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;SocketPowerFemaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerFemale&gt; socketPowerFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerFemale&gt; mSocketPowerFemale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SocketPowerFemaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~SocketPowerFemaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SocketPowerFemaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SocketPowerMaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;SocketPowerMaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerMale&gt; socketPowerMale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerMale&gt; mSocketPowerMale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SocketPowerMaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~SocketPowerMaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SocketPowerMaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SpeakonFemaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;SpeakonFemaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemale&gt; euroFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemale&gt; mSpeakonFemale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SpeakonFemaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~SpeakonFemaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SpeakonFemaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SpeakonMaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;SpeakonMaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonMale&gt; euroFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonMale&gt; mSpeakonMale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SpeakonMaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~SpeakonMaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SpeakonMaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;XlrFemaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt; xlrFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt; mXlrFemale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>XlrFemaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~XlrFemaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(XlrFemaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMaleControl : <b><a href="CppPublic.htm">public</a></b> ConnectorControl<br/>
{<br/>
&nbsp;&nbsp;XlrMaleControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt; xlrMale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> GetConnector() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Connector * GetConnector();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt; mXlrMale;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>XlrMaleControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;~XlrMaleControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(XlrMaleControl*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitConnectorControl.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitConnectorControl.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSprites.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
ConnectorControl::ConnectorControl(TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageUnselectedUnconnected,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageSelectedUnconnected,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageUnselectedConnected,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageSelectedConnected)<br/>
&nbsp;&nbsp;: mBelongsTo(belongsTo),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImage(image),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImageUnselectedUnconnected(imageUnselectedUnconnected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImageSelectedUnconnected(imageSelectedUnconnected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImageUnselectedConnected(imageUnselectedConnected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImageSelectedConnected(imageSelectedConnected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSelected(<b><a href="CppFalse.htm">false</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mIsConnectedTo(0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mBelongsTo <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImage <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> ConnectorControl::Select()<br/>
{<br/>
&nbsp;&nbsp;mSelected <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;UpdateImage();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> ConnectorControl::Unselect()<br/>
{<br/>
&nbsp;&nbsp;mSelected <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;UpdateImage();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> ConnectorControl::CanConnect(<br/>
&nbsp;&nbsp;ConnectorControl * <b><a href="CppConst.htm">const</a></b> otherConnectorControl) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherConnectorControl <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Two ConnectorControls can connect <b><a href="CppIf.htm">if</a></b> their Connectors can connect<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> <b><a href="CppThis.htm">this</a></b>Connector <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetConnector();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector <a href="CppOperatorAssign.htm">=</a> otherConnectorControl-&gt;GetConnector();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>Connector&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherConnector <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a> ( <b><a href="CppThis.htm">this</a></b>Connector-&gt;CanConnect(otherConnector)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> otherConnector-&gt;CanConnect(<b><a href="CppThis.htm">this</a></b>Connector)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "If A can (not) connect to B, B can (not) connect to A");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>Connector-&gt;CanConnect(otherConnector);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> ConnectorControl::Connect(ConnectorControl * <b><a href="CppConst.htm">const</a></b> otherConnectorControl)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherConnectorControl <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;CanConnect(otherConnectorControl)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect the two ConnectorControls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;mIsConnectedTo <a href="CppOperatorAssign.htm">=</a> otherConnectorControl;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;otherConnectorControl-&gt;mIsConnectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>; <a href="CppComment.htm">//</a>???Should not <a href="CppCompile.htm">compile</a>???<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsConnected() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherConnectorControl-&gt;IsConnected() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect the two Connectors the ConnectorControls manage<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Connector * <b><a href="CppConst.htm">const</a></b> <b><a href="CppThis.htm">this</a></b>Connector <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetConnector();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>Connector <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Connector * <b><a href="CppConst.htm">const</a></b> otherConnector <a href="CppOperatorAssign.htm">=</a> otherConnectorControl-&gt;GetConnector();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherConnector <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Two connections will take place, therefore otherConnector is either<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>null or already connected to <b><a href="CppThis.htm">this</a></b> connector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (<b><a href="CppThis.htm">this</a></b>Connector-&gt;GetConnectedTo() <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppThis.htm">this</a></b>Connector-&gt;GetConnectedTo() <a href="CppOperatorEqual.htm">==</a> otherConnector)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume not connected and that <b><a href="CppThis.htm">this</a></b> is handled by GUI?");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (otherConnector-&gt;GetConnectedTo() <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> otherConnector-&gt;GetConnectedTo() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>Connector)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume not connected and that <b><a href="CppThis.htm">this</a></b> is handled by GUI?");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>Connector-&gt;Connect(otherConnector);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;otherConnector-&gt;Connect(<b><a href="CppThis.htm">this</a></b>Connector);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>Connector-&gt;IsConnected() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherConnector-&gt;IsConnected() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Choose image<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;UpdateImage();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> ConnectorControl::IsConnected() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;mIsConnectedTo <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> ConnectorControl::IsConnectedTo(<b><a href="CppConst.htm">const</a></b> ConnectorControl * other) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;mIsConnectedTo <a href="CppOperatorEqual.htm">==</a> other);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> ConnectorControl::Disconnect()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Disconnect the ConnectorControl<br/>
&nbsp;&nbsp;mIsConnectedTo <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Disconnect the Connector<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetConnector()-&gt;Disconnect();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;UpdateImage();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> ConnectorControl::UpdateImage()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mSelected <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;IsConnected() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mImage-&gt;Picture <a href="CppOperatorAssign.htm">=</a> mImageSelectedConnected-&gt;Picture;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mImage-&gt;Picture <a href="CppOperatorAssign.htm">=</a> mImageSelectedUnconnected-&gt;Picture;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;IsConnected() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mImage-&gt;Picture <a href="CppOperatorAssign.htm">=</a> mImageUnselectedConnected-&gt;Picture;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mImage-&gt;Picture <a href="CppOperatorAssign.htm">=</a> mImageUnselectedUnconnected-&gt;Picture;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
CinchRedFemaleControl::CinchRedFemaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemale&gt; cinchFemale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageCinchFemaleRed,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageCinchFemaleRedSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageCinchFemaleRedConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageCinchFemaleRedConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mCinchFemale(cinchFemale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> CinchRedFemaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mCinchFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * CinchRedFemaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mCinchFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
CinchWhiteFemaleControl::CinchWhiteFemaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemale&gt; cinchFemale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageCinchFemaleWhite,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageCinchFemaleWhiteSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageCinchFemaleWhiteConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageCinchFemaleWhiteConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mCinchFemale(cinchFemale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> CinchWhiteFemaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mCinchFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * CinchWhiteFemaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mCinchFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
DmxFemaleControl::DmxFemaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemale&gt; dmxFemale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageDmxFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageDmxFemaleSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageDmxFemaleConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageDmxFemaleConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDmxFemale(dmxFemale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> DmxFemaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mDmxFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * DmxFemaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mDmxFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
DmxMaleControl::DmxMaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxMale&gt; euroMale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageDmxMale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageDmxMaleSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageDmxMaleConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageDmxMaleConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDmxMale(euroMale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> DmxMaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mDmxMale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * DmxMaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mDmxMale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EuroMaleControl::EuroMaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt; euroMale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageEuroMale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageEuroMaleSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageEuroMaleConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageEuroMaleConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mEuroMale(euroMale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> EuroMaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mEuroMale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * EuroMaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mEuroMale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EuroFemaleControl::EuroFemaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroFemale&gt; euroMale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;belongsTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageEuroFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageEuroFemaleSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageEuroFemaleConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageEuroFemaleConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mEuroFemale(euroMale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> EuroFemaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mEuroFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * EuroFemaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mEuroFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
JackFemaleControl::JackFemaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemale&gt; xlrFemale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(belongsTo,image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageJackFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageJackFemaleSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageJackFemaleConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageJackFemaleConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mJackFemale(xlrFemale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> JackFemaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mJackFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * JackFemaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mJackFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
JackXlrFemaleControl::JackXlrFemaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackXlrFemale&gt; xlrFemale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(belongsTo,image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageJackXlrFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageJackXlrFemaleSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageJackXlrFemaleConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageJackXlrFemaleConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mJackXlrFemale(xlrFemale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> JackXlrFemaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mJackXlrFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * JackXlrFemaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mJackXlrFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
JackMaleControl::JackMaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackMale&gt; xlrFemale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(belongsTo,image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageJackMale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageJackMaleSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageJackMaleConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageJackMaleConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mJackMale(xlrFemale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> JackMaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mJackMale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * JackMaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mJackMale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Plug220Control::Plug220Control(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220&gt; plug220,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(belongsTo,image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImagePlug220,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImagePlug220Selected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImagePlug220Connected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImagePlug220ConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPlug220(plug220)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> Plug220Control::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mPlug220.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * Plug220Control::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mPlug220.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Socket220Control::Socket220Control(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; socket220,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(belongsTo,image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSocket220,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSocket220Selected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSocket220Connected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSocket220ConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSocket220(socket220)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> Socket220Control::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mSocket220.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * Socket220Control::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mSocket220.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SocketPowerFemaleControl::SocketPowerFemaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerFemale&gt; socketPowerFemale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(belongsTo,image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSocketPowerFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSocketPowerFemaleSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSocketPowerFemaleConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSocketPowerFemaleConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSocketPowerFemale(socketPowerFemale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> SocketPowerFemaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mSocketPowerFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * SocketPowerFemaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mSocketPowerFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SocketPowerMaleControl::SocketPowerMaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerMale&gt; socketPowerMale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(belongsTo,image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSocketPowerMale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSocketPowerMaleSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSocketPowerMaleConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSocketPowerMaleConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSocketPowerMale(socketPowerMale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> SocketPowerMaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mSocketPowerMale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * SocketPowerMaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mSocketPowerMale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SpeakonFemaleControl::SpeakonFemaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemale&gt; xlrFemale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(belongsTo,image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSpeakonFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSpeakonFemaleSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSpeakonFemaleConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSpeakonFemaleConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSpeakonFemale(xlrFemale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> SpeakonFemaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mSpeakonFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * SpeakonFemaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mSpeakonFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SpeakonMaleControl::SpeakonMaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonMale&gt; xlrFemale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(belongsTo,image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSpeakonMale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSpeakonMaleSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSpeakonMaleConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageSpeakonMaleConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSpeakonMale(xlrFemale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> SpeakonMaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mSpeakonMale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * SpeakonMaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mSpeakonMale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
XlrFemaleControl::XlrFemaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt; xlrFemale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(belongsTo,image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageXlrFemale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageXlrFemaleSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageXlrFemaleConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageXlrFemaleConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mXlrFemale(xlrFemale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> XlrFemaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mXlrFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * XlrFemaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mXlrFemale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
XlrMaleControl::XlrMaleControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> belongsTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt; xlrMale,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ConnectorControl(belongsTo,image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageXlrMale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageXlrMaleSelected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageXlrMaleConnected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormSprites-&gt;ImageXlrMaleConnectedSelected),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mXlrMale(xlrMale)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> XlrMaleControl::GetConnector() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mXlrMale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Connector * XlrMaleControl::GetConnector()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mXlrMale.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitConnectorGui.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitConnectorGui.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitConnectorGuiH<br/>
<a href="CppDefine.htm">#define</a> UnitConnectorGuiH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitController.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitController.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitControllerH<br/>
<a href="CppDefine.htm">#define</a> UnitControllerH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Fader;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Controller<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Controller() {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controller can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or descendants<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Controller *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a> : <b><a href="CppPublic.htm">public</a></b> Controller<br/>
{<br/>
&nbsp;&nbsp;<a href="CppDial.htm">Dial</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> position <a href="CppOperatorAssign.htm">=</a> 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetPosition() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mPosition; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetRelPosition() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPosition(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> position);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetMinPosition() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetMaxPosition() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 1.0; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mPosition;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDial.htm">Dial</a> can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppDial.htm">Dial</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(<a href="CppDial.htm">Dial</a> *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Fader : <b><a href="CppPublic.htm">public</a></b> Controller<br/>
{<br/>
&nbsp;&nbsp;Fader(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> position <a href="CppOperatorAssign.htm">=</a> 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetPosition() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mPosition; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPosition(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> position);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetMinPosition() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetMaxPosition() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 1.0; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetRelPosition() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mPosition;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fader can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Fader() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Fader *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> PushButton : <b><a href="CppPublic.htm">public</a></b> Controller<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>PushButton can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~PushButton() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(PushButton *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> PressButton : <b><a href="CppPublic.htm">public</a></b> Controller<br/>
{<br/>
&nbsp;&nbsp;PressButton() : mIn(<b><a href="CppFalse.htm">false</a></b>) {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> IsIn() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mIn; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Press()&nbsp;&nbsp;{ mIn <a href="CppOperatorAssign.htm">=</a> !mIn; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> mIn;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>PressButton can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~PressButton() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(PressButton *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>TapButton has been moved to UnitTabButton.h<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> TwoSwitch : <b><a href="CppPublic.htm">public</a></b> Controller<br/>
{<br/>
&nbsp;&nbsp;TwoSwitch() : mOn(<b><a href="CppFalse.htm">false</a></b>) {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> IsOn() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mOn; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SwitchOn()&nbsp;&nbsp;{ mOn <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SwitchOff() { mOn <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> mOn;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TwoSwitch can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~TwoSwitch() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(TwoSwitch *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitController.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitController.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppDial.htm">Dial</a>::<a href="CppDial.htm">Dial</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> position)<br/>
{<br/>
&nbsp;&nbsp;SetPosition(position);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDial.htm">Dial</a>::SetPosition(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> position)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(mPosition &lt; <b><a href="CppThis.htm">this</a></b>-&gt;GetMinPosition())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPosition <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetMinPosition();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (mPosition &gt; <b><a href="CppThis.htm">this</a></b>-&gt;GetMaxPosition())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPosition <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetMaxPosition();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPosition <a href="CppOperatorAssign.htm">=</a> position;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppDial.htm">Dial</a>::GetRelPosition() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> relPosition <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppThis.htm">this</a></b>-&gt;GetPosition() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetMinPosition())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> (<b><a href="CppThis.htm">this</a></b>-&gt;GetMaxPosition() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetMinPosition());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(relPosition <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(relPosition <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> relPosition;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Fader::Fader(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> position)<br/>
{<br/>
&nbsp;&nbsp;SetPosition(position);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Fader::SetPosition(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> position)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(mPosition &lt; <b><a href="CppThis.htm">this</a></b>-&gt;GetMinPosition())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPosition <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetMinPosition();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (mPosition &gt; <b><a href="CppThis.htm">this</a></b>-&gt;GetMaxPosition())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPosition <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetMaxPosition();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPosition <a href="CppOperatorAssign.htm">=</a> position;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Fader::GetRelPosition() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> relPosition <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppThis.htm">this</a></b>-&gt;GetPosition() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetMinPosition())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> (<b><a href="CppThis.htm">this</a></b>-&gt;GetMaxPosition() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetMinPosition());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(relPosition <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(relPosition <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> relPosition;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitControllerControl.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitControllerControl.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitControllerControlH<br/>
<a href="CppDefine.htm">#define</a> UnitControllerControlH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "UnitEnumControllerType.h"<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> Controller;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormMachine;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Fader;<br/>
<b><a href="CppStruct.htm">struct</a></b> PressButton;<br/>
<b><a href="CppStruct.htm">struct</a></b> PushButton;<br/>
<b><a href="CppStruct.htm">struct</a></b> TwoSwitch;<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Extctrls { <b><a href="CppStruct.htm">struct</a></b> <a href="CppTImage.htm">TImage</a>; }<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Handles the GUI of a Controller<br/>
<a href="CppComment.htm">//</a>An XControl manages the GUI of an X<br/>
<b><a href="CppStruct.htm">struct</a></b> ControllerControl<br/>
{<br/>
&nbsp;&nbsp;ControllerControl(TFormMachine * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The x and y are the coordinats on mImage itself,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>independent of its <a href="CppTImage.htm">TImage</a>::Left and <a href="CppTImage.htm">TImage</a>::Top properties<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> mImage;<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> mFormParent;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ControllerControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~ControllerControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(ControllerControl *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>Control : <b><a href="CppPublic.htm">public</a></b> ControllerControl<br/>
{<br/>
&nbsp;&nbsp;<a href="CppDial.htm">Dial</a>Control(TFormMachine * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; <a href="CppDial.htm">dial</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDial;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDial.htm">Dial</a>Control can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~<a href="CppDial.htm">Dial</a>Control() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(<a href="CppDial.htm">Dial</a>Control *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> FaderControl : <b><a href="CppPublic.htm">public</a></b> ControllerControl<br/>
{<br/>
&nbsp;&nbsp;FaderControl(TFormMachine * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; fader,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFader;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>FaderControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~FaderControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(FaderControl *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> PressButtonControl : <b><a href="CppPublic.htm">public</a></b> ControllerControl<br/>
{<br/>
&nbsp;&nbsp;PressButtonControl(TFormMachine * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt; pressButton,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt; mPressButton;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> mImageIn;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> mImageOut;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>PressButtonControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~PressButtonControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(PressButtonControl *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> TabButtonControl has been moved to UnitTapButtonControl.h<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> TwoSwitchControl : <b><a href="CppPublic.htm">public</a></b> ControllerControl<br/>
{<br/>
&nbsp;&nbsp;TwoSwitchControl(TFormMachine * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitch&gt; twoSwitch,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitch&gt; mTwoSwitch;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> mImageOn;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> mImageOff;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TwoSwitchControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~TwoSwitchControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(TwoSwitchControl *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitControllerControl.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitControllerControl.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSprites.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
ControllerControl::ControllerControl(<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: mFormParent(formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImage(image)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(formParent<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImage<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppDial.htm">Dial</a>Control::<a href="CppDial.htm">Dial</a>Control(TFormMachine * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; <a href="CppDial.htm">dial</a>,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ControllerControl(formParent,image),mDial(<a href="CppDial.htm">dial</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mDial.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDial.htm">Dial</a>Control::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midX <a href="CppOperatorAssign.htm">=</a> mImage-&gt;Width <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midY <a href="CppOperatorAssign.htm">=</a> mImage-&gt;Height <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x <a href="CppOperatorMinus.htm">-</a> midX),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y <a href="CppOperatorMinus.htm">-</a> midY));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdMin.htm">std::min</a>( midX, midY ));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetDistance.htm">GetDistance</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x <a href="CppOperatorMinus.htm">-</a> midX),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y <a href="CppOperatorMinus.htm">-</a> midY) );<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distance &gt; 0.25 * ray <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (angle &lt; 0.75 * <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorLogicalOr.htm">||</a> angle &gt; 1.25 * <a href="CppM_PI.htm">M_PI</a> ) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DrawDial(mImage, x, y, clWhite);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> position <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( angle &lt; 0.75 * <a href="CppM_PI.htm">M_PI</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? 0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * (angle <a href="CppOperatorDivide.htm">/</a> (0.75 * <a href="CppM_PI.htm">M_PI</a>))) <a href="CppComment.htm">//</a>Topright<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 0.5 * (angle <a href="CppOperatorMinus.htm">-</a> (1.25 * <a href="CppM_PI.htm">M_PI</a>)) <a href="CppOperatorDivide.htm">/</a> (0.75 * <a href="CppM_PI.htm">M_PI</a>) <a href="CppComment.htm">//</a>Topleft<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(position <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(position <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDial-&gt;SetPosition(position);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Notify the parent of <b><a href="CppThis.htm">this</a></b> event<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnControllerClick();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
FaderControl::FaderControl(TFormMachine * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; fader,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ControllerControl(formParent,image), mFader(fader)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mFader.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> FaderControl::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;DrawFader(mImage,y);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Top of fader is position 1.0,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Bottom of fader is position 0.0<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> position <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorMinus.htm">-</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(mImage-&gt;Height);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(position <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(position <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;mFader-&gt;SetPosition(position);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Notify the parent of <b><a href="CppThis.htm">this</a></b> event<br/>
&nbsp;&nbsp;mFormParent-&gt;OnControllerClick();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
PressButtonControl::PressButtonControl(TFormMachine * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt; pressButton,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ControllerControl(formParent,image),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPressButton(pressButton),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImageIn(FormSprites-&gt;ImagePressButtonIn),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImageOut(FormSprites-&gt;ImagePressButtonOut)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mPressButton.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImage <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageIn <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageOut <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageIn-&gt;Height <a href="CppOperatorEqual.htm">==</a> mImageOut-&gt;Height);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageIn-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorEqual.htm">==</a> mImageOut-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PressButtonControl::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImage-&gt;Height <a href="CppOperatorEqual.htm">==</a> mImageOut-&gt;Height);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageIn-&gt;Height <a href="CppOperatorEqual.htm">==</a> mImageOut-&gt;Height);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageIn-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorEqual.htm">==</a> mImageOut-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
<br/>
&nbsp;&nbsp;mPressButton-&gt;Press();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mPressButton-&gt;IsIn() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImage-&gt;Picture <a href="CppOperatorAssign.htm">=</a> mImageIn-&gt;Picture;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImage-&gt;Picture <a href="CppOperatorAssign.htm">=</a> mImageOut-&gt;Picture;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Notify the parent of <b><a href="CppThis.htm">this</a></b> event<br/>
&nbsp;&nbsp;mFormParent-&gt;OnControllerClick();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
TwoSwitchControl::TwoSwitchControl(TFormMachine * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitch&gt; twoSwitch,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ControllerControl(formParent,image),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mTwoSwitch(twoSwitch),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImageOn(FormSprites-&gt;ImageTwoSwitchOn),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImageOff(FormSprites-&gt;ImageTwoSwitchOff)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mTwoSwitch.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImage <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageOn <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageOff <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageOn-&gt;Height <a href="CppOperatorEqual.htm">==</a> mImageOff-&gt;Height);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageOn-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorEqual.htm">==</a> mImageOff-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TwoSwitchControl::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImage-&gt;Height <a href="CppOperatorEqual.htm">==</a> mImageOff-&gt;Height);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageOn-&gt;Height <a href="CppOperatorEqual.htm">==</a> mImageOff-&gt;Height);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageOn-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorEqual.htm">==</a> mImageOff-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> mImage-&gt;Height;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Lower half of image, turn two-<b><a href="CppSwitch.htm">switch</a></b> to on<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &gt; height <a href="CppOperatorDivide.htm">/</a> 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImage-&gt;Picture <a href="CppOperatorAssign.htm">=</a> mImageOn-&gt;Picture;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mTwoSwitch-&gt;SwitchOn();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (y &lt; height <a href="CppOperatorDivide.htm">/</a> 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn two-<b><a href="CppSwitch.htm">switch</a></b> to off<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImage-&gt;Picture <a href="CppOperatorAssign.htm">=</a> mImageOff-&gt;Picture;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mTwoSwitch-&gt;SwitchOff();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Notify the parent of <b><a href="CppThis.htm">this</a></b> event<br/>
&nbsp;&nbsp;mFormParent-&gt;OnControllerClick();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitCreateMachines.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitCreateMachines.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitCreateMachinesH<br/>
<a href="CppDefine.htm">#define</a> UnitCreateMachinesH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormMachine;<br/>
<b><a href="CppStruct.htm">struct</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; &gt; CreateMachines(<br/>
&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> level);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitCreateMachines.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitCreateMachines.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormCdPlayer.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormDimblockV3.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormEasyAmp.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMdPlayer.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormOctlet.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormPar64.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormRcf322A.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormRcfEvent3000.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormShureSm58.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSimpleShine1.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSimpleShine2.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSimpleSound1.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSimpleSound2.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSimpleSound3.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSimpleSound4.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormTransitionPieceJackMaleTwoCinchFemale.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppTriple.htm">Triple</a>t.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormWallSocket220.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormWallSocketPower.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitCreateMachines.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; &gt; CreateMachines(<br/>
&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> level)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; &gt; machines;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (level)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; m1(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TFormWallSocket220(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; m2(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TFormPar64(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(m1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(m2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocket220(<b><a href="CppNew.htm">new</a></b> TFormWallSocket220(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; mic(<b><a href="CppNew.htm">new</a></b> TFormShureSm58(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(mic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocket220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocket220(<b><a href="CppNew.htm">new</a></b> TFormWallSocket220(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker1(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker2(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; mic(<b><a href="CppNew.htm">new</a></b> TFormShureSm58(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; triplet(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppTriple.htm">Triple</a>t(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; soundTable(<b><a href="CppNew.htm">new</a></b> TFormSimpleSound1(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(mic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocket220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(soundTable);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(triplet);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; dimmerpack(<b><a href="CppNew.htm">new</a></b> TFormDimblockV3(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; lighttable(<b><a href="CppNew.htm">new</a></b> TFormSimpleShine1(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocketPower(<b><a href="CppNew.htm">new</a></b> TFormWallSocketPower(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocket220(<b><a href="CppNew.htm">new</a></b> TFormWallSocket220(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; par64_1(<b><a href="CppNew.htm">new</a></b> TFormPar64(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; par64_2(<b><a href="CppNew.htm">new</a></b> TFormPar64(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; par64_3(<b><a href="CppNew.htm">new</a></b> TFormPar64(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; par64_4(<b><a href="CppNew.htm">new</a></b> TFormPar64(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; par64_5(<b><a href="CppNew.htm">new</a></b> TFormPar64(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocketPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(dimmerpack);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocket220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(par64_1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(lighttable);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(par64_2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(par64_3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(par64_4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(par64_5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocket220(<b><a href="CppNew.htm">new</a></b> TFormWallSocket220(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker1(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker2(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; mic1(<b><a href="CppNew.htm">new</a></b> TFormShureSm58(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; mic2(<b><a href="CppNew.htm">new</a></b> TFormShureSm58(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; triplet(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppTriple.htm">Triple</a>t(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; soundTable(<b><a href="CppNew.htm">new</a></b> TFormSimpleSound2(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(mic1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(triplet);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(mic2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(soundTable);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocket220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 6:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocket220(<b><a href="CppNew.htm">new</a></b> TFormWallSocket220(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; mic1(<b><a href="CppNew.htm">new</a></b> TFormShureSm58(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker1(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; triplet(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppTriple.htm">Triple</a>t(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; soundTable3(<b><a href="CppNew.htm">new</a></b> TFormSimpleSound3(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(mic1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocket220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(triplet);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(soundTable3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 7:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocket220(<b><a href="CppNew.htm">new</a></b> TFormWallSocket220(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; mic1(<b><a href="CppNew.htm">new</a></b> TFormShureSm58(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; mic2(<b><a href="CppNew.htm">new</a></b> TFormShureSm58(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; mic3(<b><a href="CppNew.htm">new</a></b> TFormShureSm58(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker1(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker2(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker3(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker4(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; octlet(<b><a href="CppNew.htm">new</a></b> TFormOctlet(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; soundTable3(<b><a href="CppNew.htm">new</a></b> TFormSimpleSound3(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(mic1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(mic2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(mic3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(octlet);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocket220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(soundTable3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 8:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put a CD on speakers without <b><a href="CppUsing.htm">using</a></b> a soundtable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocket220(<b><a href="CppNew.htm">new</a></b> TFormWallSocket220(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker1(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; octlet(<b><a href="CppNew.htm">new</a></b> TFormOctlet(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormCdPlayer&gt; cdPlayer(<b><a href="CppNew.htm">new</a></b> TFormCdPlayer(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormTransitionPieceJackMaleTwoCinchFemale&gt; transitionPiece(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TFormTransitionPieceJackMaleTwoCinchFemale(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(octlet);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocket220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(cdPlayer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(transitionPiece);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 9:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put a CD on speakers with <b><a href="CppUsing.htm">using</a></b> a soundtable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocket220(<b><a href="CppNew.htm">new</a></b> TFormWallSocket220(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker1(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; octlet(<b><a href="CppNew.htm">new</a></b> TFormOctlet(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormCdPlayer&gt; cdPlayer(<b><a href="CppNew.htm">new</a></b> TFormCdPlayer(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; soundTable4(<b><a href="CppNew.htm">new</a></b> TFormSimpleSound4(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(octlet);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(cdPlayer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocket220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(soundTable4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 10:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Record a CD on MD play<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocket220(<b><a href="CppNew.htm">new</a></b> TFormWallSocket220(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker1(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; octlet(<b><a href="CppNew.htm">new</a></b> TFormOctlet(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; soundTable4(<b><a href="CppNew.htm">new</a></b> TFormSimpleSound4(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMdPlayer&gt; mdPlayer(<b><a href="CppNew.htm">new</a></b> TFormMdPlayer(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormCdPlayer&gt; cdPlayer(<b><a href="CppNew.htm">new</a></b> TFormCdPlayer(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormTransitionPieceJackMaleTwoCinchFemale&gt; transitionPiece(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TFormTransitionPieceJackMaleTwoCinchFemale(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(octlet);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocket220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>machines.push_back(soundTable4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(mdPlayer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(transitionPiece);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(cdPlayer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 11:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Record a CD and microphone on MD play<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; mic1(<b><a href="CppNew.htm">new</a></b> TFormShureSm58(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocket220(<b><a href="CppNew.htm">new</a></b> TFormWallSocket220(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker1(<b><a href="CppNew.htm">new</a></b> TFormRcf322A(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; octlet(<b><a href="CppNew.htm">new</a></b> TFormOctlet(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; soundTable4(<b><a href="CppNew.htm">new</a></b> TFormSimpleSound4(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMdPlayer&gt; mdPlayer(<b><a href="CppNew.htm">new</a></b> TFormMdPlayer(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormCdPlayer&gt; cdPlayer(<b><a href="CppNew.htm">new</a></b> TFormCdPlayer(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormTransitionPieceJackMaleTwoCinchFemale&gt; transitionPiece(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TFormTransitionPieceJackMaleTwoCinchFemale(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocket220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(octlet);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(mic1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(soundTable4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(transitionPiece);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>machines.push_back(cdPlayer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(mdPlayer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 12:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Level 12: Learn to use the crossfader<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; dimmerpack(<b><a href="CppNew.htm">new</a></b> TFormDimblockV3(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; lighttable(<b><a href="CppNew.htm">new</a></b> TFormSimpleShine2(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocketPower(<b><a href="CppNew.htm">new</a></b> TFormWallSocketPower(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocket220(<b><a href="CppNew.htm">new</a></b> TFormWallSocket220(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; par64_1(<b><a href="CppNew.htm">new</a></b> TFormPar64(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; par64_2(<b><a href="CppNew.htm">new</a></b> TFormPar64(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; par64_3(<b><a href="CppNew.htm">new</a></b> TFormPar64(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; par64_4(<b><a href="CppNew.htm">new</a></b> TFormPar64(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; par64_5(<b><a href="CppNew.htm">new</a></b> TFormPar64(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocketPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(dimmerpack);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocket220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(par64_1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(lighttable);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(par64_2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(par64_3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(par64_4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(par64_5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 13:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; wallSocket220(<b><a href="CppNew.htm">new</a></b> TFormWallSocket220(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; mic(<b><a href="CppNew.htm">new</a></b> TFormShureSm58(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; speaker(<b><a href="CppNew.htm">new</a></b> TFormRcfEvent3000(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; amplifier(<b><a href="CppNew.htm">new</a></b> TFormEasyAmp(0,formParent));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(mic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(speaker);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(wallSocket220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machines.push_back(amplifier);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppComment.htm">//</a>Do nothing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> machines;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitDimmerpack.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitDimmerpack.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitDimmerpackH<br/>
<a href="CppDefine.htm">#define</a> UnitDimmerpackH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormDimblockV3;<br/>
<b><a href="CppStruct.htm">struct</a></b> SocketPowerMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> DmxMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> DmxFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdDisplay;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Dimmerpack : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This depends on the connector, especially on a dimmer pack<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dimmerpacks never supply audio<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dmxChannel) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dimmerpack can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Dimmerpack() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Dimmerpack *);<br/>
<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> DimblockV3 : <b><a href="CppPublic.htm">public</a></b> Dimmerpack<br/>
{<br/>
&nbsp;&nbsp;DimblockV3();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This depends on the connector, especially on a dimmer pack<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dmxChannel) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DimblockV3 can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~DimblockV3() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(DimblockV3*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxMale&gt; mDmxMaleInput;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemale&gt; mDmxFemaleOutput;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerMale&gt; mPowerMale;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; &gt; mSockets;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>MainsPower;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>NondimSet;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>PresetSet;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>DmxPresent;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>Warning;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>MainsPower;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>NondimSet;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>PresetSet;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>DmxPresent;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>Warning;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormDimblockV3;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; &gt; CreateSockets(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSockets);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitDimmerpack.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitDimmerpack.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplay.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDimmerpack.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
DimblockV3::DimblockV3()<br/>
&nbsp;&nbsp;: mDmxMaleInput(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxMale&gt;(<b><a href="CppNew.htm">new</a></b> DmxMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDmxFemaleOutput(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemale&gt;(<b><a href="CppNew.htm">new</a></b> DmxFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPowerMale(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerMale&gt;(<b><a href="CppNew.htm">new</a></b> SocketPowerMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSockets(CreateSockets(<b><a href="CppThis.htm">this</a></b>,12)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>MainsPower(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>NondimSet(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>PresetSet(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>DmxPresent(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>Warning(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mDmxMaleInput.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mDmxFemaleOutput.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mPowerMale.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mSockets.size() <a href="CppOperatorEqual.htm">==</a> 12);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>MainsPower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>MainsPower.get(),255,0,0));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>NondimSet <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>NondimSet.get(),0,255,0));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>PresetSet <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>PresetSet.get(),255,255,0));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>DmxPresent <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>DmxPresent.get(),0,255,0));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Warning <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>Warning.get(),255,0,0));<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>No need of prevConnectors, as <b><a href="CppThis.htm">this</a></b> dimmerpack cannot be cirle-connected<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> DimblockV3::PowerSupplyStrength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; <a href="CppComment.htm">/*</a> prevConnectors <a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check sockets<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSockets <a href="CppOperatorAssign.htm">=</a> mSockets.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nSockets; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mSockets[i].get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is dimmerpack connected to table?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDmxMaleInput-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (otherConnector <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>To which machine?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> otherConnector-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The strength of DMX <a href="CppSignal.htm">signal</a> is linear to the power supplied to <b><a href="CppThis.htm">this</a></b> socket<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>'+1', because DMX <b><a href="CppQtSignals.htm">signals</a></b> start counting at 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> otherMachine-&gt;Dmx<a href="CppSignal.htm">Signal</a>Strength(i+1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check internal connections<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>MainsPower.get() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>NondimSet.get() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Don't know when the indication <a href="CppLed.htm">LED</a> should light<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>PresetSet.get() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Don't know when the indication <a href="CppLed.htm">LED</a> should light<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>DmxPresent.get() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check 512 channels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>512; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;Dmx<a href="CppSignal.htm">Signal</a>Strength(i) &gt; 0.0) <b><a href="CppReturn.htm">return</a></b> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>Warning.get() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Don't know when the indication <a href="CppLed.htm">LED</a> should light<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> DimblockV3::Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dmxChannel) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Forward the DMX <a href="CppSignal.htm">signal</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is dimmerpack connected to table?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDmxMaleInput-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (otherConnector <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>To which machine?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> otherConnector-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The strength of DMX <a href="CppSignal.htm">signal</a> is linear to the power supplied to <b><a href="CppThis.htm">this</a></b> socket<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> otherMachine-&gt;Dmx<a href="CppSignal.htm">Signal</a>Strength(dmxChannel);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> DimblockV3::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is dimmerpack connected to table?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mPowerMale-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (otherConnector <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>To which machine?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> otherConnector-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The strength of DMX <a href="CppSignal.htm">signal</a> is linear to the power supplied to <b><a href="CppThis.htm">this</a></b> socket<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;otherConnector,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; &gt; CreateSockets(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSockets)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; &gt; sockets;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nSockets; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; socket(<b><a href="CppNew.htm">new</a></b> Socket220(belongTo));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sockets.push_back(socket);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sockets;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitDisplay.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitDisplay.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitDisplayH<br/>
<a href="CppDefine.htm">#define</a> UnitDisplayH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection;<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdSymbolControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>Control;<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>A Display is a Machine that does not supply <a href="CppAny.htm">any</a>thing<br/>
<a href="CppComment.htm">//</a>and is connected to another Machine by an InternalConnection<br/>
<b><a href="CppStruct.htm">struct</a></b> Display : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;Display(InternalConnection * <b><a href="CppConst.htm">const</a></b> attachedTo);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This depends on the connector, especially on a dimmer pack<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Lamps never supply power<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Lamps never supply audio<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Lamps never send DMX <b><a href="CppQtSignals.htm">signals</a></b><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the intensity the Display displays something<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>For example, an <a href="CppLed.htm">LED</a> will shine brighter<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>and a BarDisplay (e.g. the PFL bars) wil display more bars <br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetDisplayIntensity() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Display() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Display*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Display : <b><a href="CppPublic.htm">public</a></b> Display<br/>
{<br/>
&nbsp;&nbsp;Audio<a href="CppSignal.htm">Signal</a>Display(InternalConnection * <b><a href="CppConst.htm">const</a></b> attachedTo);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Control;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Audio<a href="CppSignal.htm">Signal</a>Display can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~Audio<a href="CppSignal.htm">Signal</a>Display() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Audio<a href="CppSignal.htm">Signal</a>Display*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdDisplay : <b><a href="CppPublic.htm">public</a></b> Display<br/>
{<br/>
&nbsp;&nbsp;LcdDisplay(InternalConnection * <b><a href="CppConst.htm">const</a></b> attachedTo);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>LcdDisplay can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~LcdDisplay() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(LcdDisplay*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdSymbol : <b><a href="CppPublic.htm">public</a></b> Display<br/>
{<br/>
&nbsp;&nbsp;LcdSymbol(InternalConnection * <b><a href="CppConst.htm">const</a></b> attachedTo);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppStruct.htm">struct</a></b> LcdSymbolControl;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>LcdSymbol can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~LcdSymbol() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(LcdSymbol*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a> : <b><a href="CppPublic.htm">public</a></b> Display<br/>
{<br/>
&nbsp;&nbsp;<a href="CppLed.htm">Led</a>(InternalConnection * <b><a href="CppConst.htm">const</a></b> attachedTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> red, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> green, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> blue);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mRed;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mGreen;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mBlue;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>Control;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppLed.htm">Led</a> can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~<a href="CppLed.htm">Led</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(<a href="CppLed.htm">Led</a>*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitDisplay.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitDisplay.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplay.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>The InternalConnection 'attachedTo' is not <b><a href="CppConst.htm">const</a></b>, because<br/>
<a href="CppComment.htm">//</a>here the soldering takes place: the InternalConnections<br/>
<a href="CppComment.htm">//</a>'attachedTo' and 'mConnection' are mutually connected<br/>
Display::Display(InternalConnection * <b><a href="CppConst.htm">const</a></b> attachedTo)<br/>
&nbsp;&nbsp;: mConnection(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<b><a href="CppNew.htm">new</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InternalConnection(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mConnection.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect the Display and (an InternalConnection of) a Machine<br/>
&nbsp;&nbsp;mConnection-&gt;Connect(attachedTo);<br/>
&nbsp;&nbsp;attachedTo-&gt;Connect(mConnection.get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mConnection-&gt;IsConnected() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(attachedTo-&gt;IsConnected() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> Display::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector <a href="CppOperatorAssign.htm">=</a> mConnection-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherConnector <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Display must be internally connected to a Machine");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> otherConnector-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (otherMachine-&gt;HasPower());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Display::GetDisplayIntensity() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector <a href="CppOperatorAssign.htm">=</a> mConnection-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherConnector <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Display must be internally connected to a Machine");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> otherConnector-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The display intensity is managed by the internal connector<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>in the other machine<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;otherConnector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Audio<a href="CppSignal.htm">Signal</a>Display::Audio<a href="CppSignal.htm">Signal</a>Display(InternalConnection * <b><a href="CppConst.htm">const</a></b> attachedTo)<br/>
&nbsp;&nbsp;: Display(attachedTo)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
LcdDisplay::LcdDisplay(InternalConnection * <b><a href="CppConst.htm">const</a></b> attachedTo)<br/>
&nbsp;&nbsp;: Display(attachedTo)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
LcdSymbol::LcdSymbol(InternalConnection * <b><a href="CppConst.htm">const</a></b> attachedTo)<br/>
&nbsp;&nbsp;: Display(attachedTo)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppLed.htm">Led</a>::<a href="CppLed.htm">Led</a>(InternalConnection * <b><a href="CppConst.htm">const</a></b> attachedTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> red, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> green, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> blue)<br/>
&nbsp;&nbsp;: Display(attachedTo),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mRed(red), mGreen(green), mBlue(blue)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mRed&nbsp;&nbsp; <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0); <a href="CppAssert.htm">assert</a>(mRed&nbsp;&nbsp; &lt; 256);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mGreen <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0); <a href="CppAssert.htm">assert</a>(mGreen &lt; 256);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mBlue&nbsp;&nbsp;<a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0); <a href="CppAssert.htm">assert</a>(mBlue&nbsp;&nbsp;&lt; 256);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitDisplayControl.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitDisplayControl.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitDisplayControlH<br/>
<a href="CppDefine.htm">#define</a> UnitDisplayControlH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Display;<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdSymbol;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>;<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Extctrls { <b><a href="CppStruct.htm">struct</a></b> <a href="CppTImage.htm">TImage</a>; }<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> DisplayControl<br/>
{<br/>
&nbsp;&nbsp;DisplayControl(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Update() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> mImage;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DisplayControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~DisplayControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(DisplayControl *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Control : <b><a href="CppPublic.htm">public</a></b> DisplayControl<br/>
{<br/>
&nbsp;&nbsp;Audio<a href="CppSignal.htm">Signal</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt; audio<a href="CppSignal.htm">Signal</a>Display,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Update();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt; mAudio<a href="CppSignal.htm">Signal</a>Display;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Audio<a href="CppSignal.htm">Signal</a>Control can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~Audio<a href="CppSignal.htm">Signal</a>Control() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Audio<a href="CppSignal.htm">Signal</a>Control*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdSymbolControl : <b><a href="CppPublic.htm">public</a></b> DisplayControl<br/>
{<br/>
&nbsp;&nbsp;LcdSymbolControl(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbol&gt; lcdSymbol,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageLcdSymbol);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Update();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbol&gt; mLcdSymbol;<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> mImageLcdSymbol;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>LcdSymbolControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~LcdSymbolControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(LcdSymbolControl *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdSymbolPlayControl : <b><a href="CppPublic.htm">public</a></b> LcdSymbolControl<br/>
{<br/>
&nbsp;&nbsp;LcdSymbolPlayControl(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbol&gt; lcdSymbol,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>LcdSymbolPlayControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~LcdSymbolPlayControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(LcdSymbolPlayControl *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdSymbolRecControl : <b><a href="CppPublic.htm">public</a></b> LcdSymbolControl<br/>
{<br/>
&nbsp;&nbsp;LcdSymbolRecControl(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbol&gt; lcdSymbol,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>LcdSymbolRecControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~LcdSymbolRecControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(LcdSymbolRecControl *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>Control : <b><a href="CppPublic.htm">public</a></b> DisplayControl<br/>
{<br/>
&nbsp;&nbsp;<a href="CppLed.htm">Led</a>Control(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; <a href="CppLed.htm">led</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Update();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppLed.htm">Led</a>Control can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~<a href="CppLed.htm">Led</a>Control() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(<a href="CppLed.htm">Led</a>Control *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitDisplayControl.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitDisplayControl.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplay.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSprites.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
DisplayControl::DisplayControl(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: mImage(image)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImage<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Audio<a href="CppSignal.htm">Signal</a>Control::Audio<a href="CppSignal.htm">Signal</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt; audio<a href="CppSignal.htm">Signal</a>Display,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: DisplayControl(image), mAudio<a href="CppSignal.htm">Signal</a>Display(audio<a href="CppSignal.htm">Signal</a>Display)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mAudio<a href="CppSignal.htm">Signal</a>Display.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Audio<a href="CppSignal.htm">Signal</a>Control::Update()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> intensity <a href="CppOperatorAssign.htm">=</a> mAudio<a href="CppSignal.htm">Signal</a>Display-&gt;GetDisplayIntensity();<br/>
&nbsp;&nbsp;DrawAudio<a href="CppSignal.htm">Signal</a>(mImage,intensity);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
LcdSymbolControl::LcdSymbolControl(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbol&gt; lcdSymbol,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageLcdSymbol)<br/>
&nbsp;&nbsp;: DisplayControl(image), mLcdSymbol(lcdSymbol), mImageLcdSymbol(imageLcdSymbol)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mLcdSymbol.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageLcdSymbol<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> LcdSymbolControl::Update()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> intensity <a href="CppOperatorAssign.htm">=</a> mLcdSymbol-&gt;GetDisplayIntensity();<br/>
&nbsp;&nbsp;mImage-&gt;Picture <a href="CppOperatorAssign.htm">=</a> mImageLcdSymbol-&gt;Picture;<br/>
&nbsp;&nbsp;Blacken(mImage,1.0-intensity);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
LcdSymbolPlayControl::LcdSymbolPlayControl(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbol&gt; lcdSymbol,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: LcdSymbolControl(lcdSymbol,image,FormSprites-&gt;ImageLcdSymbolPlay)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
LcdSymbolRecControl::LcdSymbolRecControl(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbol&gt; lcdSymbol,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: LcdSymbolControl(lcdSymbol,image,FormSprites-&gt;ImageLcdSymbolRec)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppLed.htm">Led</a>Control::<a href="CppLed.htm">Led</a>Control(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; <a href="CppLed.htm">led</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: DisplayControl(image), m<a href="CppLed.htm">Led</a>(<a href="CppLed.htm">led</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m<a href="CppLed.htm">Led</a>.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppLed.htm">Led</a>Control::Update()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> intensity <a href="CppOperatorAssign.htm">=</a> m<a href="CppLed.htm">Led</a>-&gt;GetDisplayIntensity();<br/>
&nbsp;&nbsp;Draw<a href="CppLed.htm">Led</a>(mImage,intensity,m<a href="CppLed.htm">Led</a>-&gt;mRed,m<a href="CppLed.htm">Led</a>-&gt;mGreen,m<a href="CppLed.htm">Led</a>-&gt;mBlue);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitEnumDisplayMode.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitEnumDisplayMode.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitEnumDisplayModeH<br/>
<a href="CppDefine.htm">#define</a> UnitEnumDisplayModeH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumDisplayMode<br/>
{<br/>
&nbsp;&nbsp;modeView,<br/>
&nbsp;&nbsp;modeUse,<br/>
&nbsp;&nbsp;modeConnect<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitEnumDisplayMode.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitEnumDisplayMode.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumDisplayMode.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormAlesisMultimix8.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormAlesisMultimix8.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormAlesisMultimix8H<br/>
<a href="CppDefine.htm">#define</a> UnitFormAlesisMultimix8H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> SoundTableEasySound;<br/>
<a href="CppComment.htm">//</a>Control<br/>
<b><a href="CppStruct.htm">struct</a></b> FaderControl;<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMaleControl;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormAlesisMultimix8 : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialVolume1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleMasterLeft;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleMic1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleMasterRight;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAudio<a href="CppSignal.htm">Signal</a>;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageUse1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnect1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectMic;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectL;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectR;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image5;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image6;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image7;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image8;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image9;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image10;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image11;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image12;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image13;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image14;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image15;<br/>
&nbsp;&nbsp;TLabel *Label1;<br/>
&nbsp;&nbsp;TLabel *Label2;<br/>
&nbsp;&nbsp;TLabel *Label3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image16;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image17;<br/>
&nbsp;&nbsp;TLabel *Label4;<br/>
&nbsp;&nbsp;TLabel *Label5;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image18;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image19;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image20;<br/>
&nbsp;&nbsp;TLabel *Label6;<br/>
&nbsp;&nbsp;TLabel *Label7;<br/>
&nbsp;&nbsp;TLabel *Label8;<br/>
&nbsp;&nbsp;TLabel *Label9;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image21;<br/>
&nbsp;&nbsp;TLabel *Label10;<br/>
&nbsp;&nbsp;TLabel *Label11;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image22;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SoundTableEasySound&gt; mSoundTable;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControlMaster;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt; mXlrFemaleMic1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMaleMasterLeft;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMaleMasterRight;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt; mEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt; mAudio<a href="CppSignal.htm">Signal</a>Display;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormAlesisMultimix8(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormAlesisMultimix8 *FormAlesisMultimix8;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormAlesisMultimix8.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormAlesisMultimix8.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSoundTable.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormAlesisMultimix8.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormAlesisMultimix8 *FormAlesisMultimix8;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormAlesisMultimix8::TFormAlesisMultimix8(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSoundTable(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SoundTableEasySound&gt;(<b><a href="CppNew.htm">new</a></b> SoundTableEasySound))<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mFaderControl1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFader1,ImageFader1));<br/>
&nbsp;&nbsp;mFaderControlMaster <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFaderMaster,ImageFaderMaster));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mEuroMalePower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> EuroMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPower,ImageEuroMalePower));<br/>
&nbsp;&nbsp;mXlrFemaleMic1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMic1,ImageXlrFemaleMic1));<br/>
&nbsp;&nbsp;mXlrMaleMasterLeft <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMasterL,ImageXlrMaleMasterLeft));<br/>
&nbsp;&nbsp;mXlrMaleMasterRight <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMasterR,ImageXlrMaleMasterRight));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Control(mSoundTable-&gt;mAudio<a href="CppSignal.htm">Signal</a>Display,ImageAudio<a href="CppSignal.htm">Signal</a>));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make some images transparent<br/>
&nbsp;&nbsp;ImageConnectMic-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageConnect1-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageConnectMaster-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageConnectL-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageConnectR-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageConnectPower-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageUse1-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageUseMaster-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageConnectMic-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageConnect1-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageConnectMaster-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageConnectL-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageConnectR-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageConnectPower-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageUse1-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageUseMaster-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;OnResize(0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Manually set the faders<br/>
&nbsp;&nbsp;mFaderControl1-&gt;OnMouseDown(0,ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(0,ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormAlesisMultimix8::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageAudio<a href="CppSignal.htm">Signal</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFaderMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageUse1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageUseMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrFemaleMic1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMaleMasterLeft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMaleMasterRight);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageEuroMalePower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectMic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnect1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectR);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormAlesisMultimix8::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFaderMaster))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrFemaleMic1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrFemaleMic1.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMaleMasterLeft))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrMaleMasterLeft.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMaleMasterRight))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrMaleMasterRight.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageEuroMalePower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mEuroMalePower.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormAlesisMultimix8::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v(GetRectsHorizontal(ClientRect,3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageAudio<a href="CppSignal.htm">Signal</a>,v[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v1(GetRectsVertical(v[0],5));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v2(GetRectsVertical(v[1],5));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> MergeRects(v1[1],v1[3]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader1-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> MergeRects(v2[1],v2[3]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFaderMaster-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageUse1&nbsp;&nbsp;,v1[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader1,MergeRects(v1[1],v1[3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageUseMaster&nbsp;&nbsp;,v2[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFaderMaster,MergeRects(v2[1],v2[3]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v(GetRectsHorizontal(ClientRect,4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v0(GetRectsVertical(v[0],6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v1(GetRectsVertical(v[1],6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v2(GetRectsVertical(v[2],6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v3(GetRectsVertical(v[3],6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectMic&nbsp;&nbsp; ,v0[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnect1&nbsp;&nbsp;&nbsp;&nbsp; ,v0[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectMaster,MergeRects(v1[1],v2[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectL&nbsp;&nbsp;&nbsp;&nbsp; ,v1[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectR&nbsp;&nbsp;&nbsp;&nbsp; ,v2[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectPower ,v3[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrFemaleMic1&nbsp;&nbsp;&nbsp;&nbsp; ,MergeRects(v0[3],v0[4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrMaleMasterLeft ,MergeRects(v1[3],v1[4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrMaleMasterRight,MergeRects(v2[3],v2[4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageEuroMalePower&nbsp;&nbsp;&nbsp;&nbsp; ,MergeRects(v3[3],v3[4]));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormAmplifier.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormAmplifier.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormAmplifier.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitCdPlayer.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormAmplifier *FormAmplifier;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormAmplifier::TFormAmplifier(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mCdPlayer(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CdPlayer&gt;(<b><a href="CppNew.htm">new</a></b> CdPlayer))<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mTapButtonPlay <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;CdPlayer&gt; &gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButtonControl&lt;CdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,mCdPlayer-&gt;mButtonPlay, ImageTapButtonPlay));<br/>
&nbsp;&nbsp;mTapButtonStop <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;CdPlayer&gt; &gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButtonControl&lt;CdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,mCdPlayer-&gt;mButtonStop, ImageTapButtonStop));<br/>
&nbsp;&nbsp;mTapButtonPower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;CdPlayer&gt; &gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButtonControl&lt;CdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,mCdPlayer-&gt;mButtonPower, ImageTapButtonPower));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mCinchFemaleOutL <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> CinchWhiteFemaleControl(<b><a href="CppThis.htm">this</a></b>,mCdPlayer-&gt;mCinchFemaleOutL,ImageCinchFemaleOutL));<br/>
&nbsp;&nbsp;mCinchFemaleOutR <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> CinchRedFemaleControl(<b><a href="CppThis.htm">this</a></b>,mCdPlayer-&gt;mCinchFemaleOutR,ImageCinchFemaleOutR));<br/>
&nbsp;&nbsp;mPlug220Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Plug220Control(<b><a href="CppThis.htm">this</a></b>,mCdPlayer-&gt;mPlug220Power,ImagePlug220Power));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayL <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Control(mCdPlayer-&gt;mAudio<a href="CppSignal.htm">Signal</a>DisplayL,ImageAudio<a href="CppSignal.htm">Signal</a>L));<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayR <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Control(mCdPlayer-&gt;mAudio<a href="CppSignal.htm">Signal</a>DisplayR,ImageAudio<a href="CppSignal.htm">Signal</a>R));<br/>
&nbsp;&nbsp;mLcdSymbolPlay <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbolPlayControl&gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> LcdSymbolPlayControl(mCdPlayer-&gt;mLcdSymbolPlay,ImageLcdSymbolPlay));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(mCdPlayer-&gt;m<a href="CppLed.htm">Led</a>Power,Image<a href="CppLed.htm">Led</a>Power));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormAmplifier::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>mCdPlayer-&gt;Tick(); <a href="CppComment.htm">//</a>Important <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>mCdPlayer-&gt;Tick(); <a href="CppComment.htm">//</a>Important <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayL-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayR-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mLcdSymbolPlay-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>DrawOnBuffer(LabelUse1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageTapButtonPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageTapButtonPlay);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageTapButtonStop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>Power);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageLcdSymbolPlay);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageAudio<a href="CppSignal.htm">Signal</a>L);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageAudio<a href="CppSignal.htm">Signal</a>R);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>mCdPlayer-&gt;Tick(); <a href="CppComment.htm">//</a>Important <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectOut);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCinchFemaleOutL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCinchFemaleOutR);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePlug220Power);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormAmplifier::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageTapButtonPower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mTapButtonPower-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageTapButtonPower-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageTapButtonPower-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageTapButtonPlay))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mTapButtonPlay-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageTapButtonPlay-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageTapButtonPlay-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageTapButtonStop))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mTapButtonStop-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageTapButtonStop-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageTapButtonStop-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCinchFemaleOutL))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mCinchFemaleOutL.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCinchFemaleOutR))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mCinchFemaleOutR.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePlug220Power))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mPlug220Power.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormAmplifier::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,9,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> MergeRects(v[4][2],v[6][2]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ImageFader1-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageTapButtonPower,v[0][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageTapButtonPlay,v[0][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageTapButtonStop,v[0][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Others<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>Power,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageLcdSymbolPlay,v[0][6]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageAudio<a href="CppSignal.htm">Signal</a>L,v[0][7]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageAudio<a href="CppSignal.htm">Signal</a>R,v[0][8]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,5,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectOut,MergeRects(v[0][2],v[0][3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageCinchFemaleOutL,v[1][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageCinchFemaleOutR,v[1][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImagePlug220Power&nbsp;&nbsp; ,v[1][4]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormAmplifier::<a href="CppTime.htm">Time</a>rTick<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;mCdPlayer-&gt;Tick(); <a href="CppComment.htm">//</a>Important <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
&nbsp;&nbsp;mFormParent-&gt;OnControllerClick();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormCdPlayer.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormCdPlayer.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormCdPlayerH<br/>
<a href="CppDefine.htm">#define</a> UnitFormCdPlayerH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitTapButtonControl.h"<br/>
<a href="CppComment.htm">//</a>Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> CdPlayer;<br/>
<a href="CppComment.htm">//</a>Control<br/>
<a href="CppComment.htm">//</a>TapButton has already been <a href="CppInclude.htm">#include</a>d<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> ConnectorControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> Plug220Control;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Control;<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdSymbolPlayControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdSymbolRecControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormCdPlayer : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlug220Power;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAudio<a href="CppSignal.htm">Signal</a>L;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectOut;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTapButtonPlay;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTapButtonStop;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAudio<a href="CppSignal.htm">Signal</a>R;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleOutL;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleOutR;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTapButtonPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageLcdSymbolPlay;<br/>
&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rTick;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rTick<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CdPlayer&gt; mCdPlayer;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;CdPlayer&gt; &gt; mTapButtonPlay;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;CdPlayer&gt; &gt; mTapButtonStop;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;CdPlayer&gt; &gt; mTapButtonPower;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemaleControl&gt; mCinchFemaleOutL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemaleControl&gt; mCinchFemaleOutR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220Control&gt; mPlug220Power;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt; mAudio<a href="CppSignal.htm">Signal</a>DisplayL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt; mAudio<a href="CppSignal.htm">Signal</a>DisplayR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbolPlayControl&gt; mLcdSymbolPlay;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>Power;<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormCdPlayer(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormCdPlayer *FormCdPlayer;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormCdPlayer.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormCdPlayer.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormCdPlayer.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitCdPlayer.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormCdPlayer *FormCdPlayer;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormCdPlayer::TFormCdPlayer(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mCdPlayer(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CdPlayer&gt;(<b><a href="CppNew.htm">new</a></b> CdPlayer))<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mTapButtonPlay <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;CdPlayer&gt; &gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButtonControl&lt;CdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,mCdPlayer-&gt;mButtonPlay, ImageTapButtonPlay));<br/>
&nbsp;&nbsp;mTapButtonStop <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;CdPlayer&gt; &gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButtonControl&lt;CdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,mCdPlayer-&gt;mButtonStop, ImageTapButtonStop));<br/>
&nbsp;&nbsp;mTapButtonPower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;CdPlayer&gt; &gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButtonControl&lt;CdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,mCdPlayer-&gt;mButtonPower, ImageTapButtonPower));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mCinchFemaleOutL <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> CinchWhiteFemaleControl(<b><a href="CppThis.htm">this</a></b>,mCdPlayer-&gt;mCinchFemaleOutL,ImageCinchFemaleOutL));<br/>
&nbsp;&nbsp;mCinchFemaleOutR <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> CinchRedFemaleControl(<b><a href="CppThis.htm">this</a></b>,mCdPlayer-&gt;mCinchFemaleOutR,ImageCinchFemaleOutR));<br/>
&nbsp;&nbsp;mPlug220Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Plug220Control(<b><a href="CppThis.htm">this</a></b>,mCdPlayer-&gt;mPlug220Power,ImagePlug220Power));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayL <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Control(mCdPlayer-&gt;mAudio<a href="CppSignal.htm">Signal</a>DisplayL,ImageAudio<a href="CppSignal.htm">Signal</a>L));<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayR <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Control(mCdPlayer-&gt;mAudio<a href="CppSignal.htm">Signal</a>DisplayR,ImageAudio<a href="CppSignal.htm">Signal</a>R));<br/>
&nbsp;&nbsp;mLcdSymbolPlay <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbolPlayControl&gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> LcdSymbolPlayControl(mCdPlayer-&gt;mLcdSymbolPlay,ImageLcdSymbolPlay));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(mCdPlayer-&gt;m<a href="CppLed.htm">Led</a>Power,Image<a href="CppLed.htm">Led</a>Power));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormCdPlayer::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>mCdPlayer-&gt;Tick(); <a href="CppComment.htm">//</a>Important <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>mCdPlayer-&gt;Tick(); <a href="CppComment.htm">//</a>Important <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayL-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayR-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mLcdSymbolPlay-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>DrawOnBuffer(LabelUse1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageTapButtonPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageTapButtonPlay);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageTapButtonStop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>Power);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageLcdSymbolPlay);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageAudio<a href="CppSignal.htm">Signal</a>L);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageAudio<a href="CppSignal.htm">Signal</a>R);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>mCdPlayer-&gt;Tick(); <a href="CppComment.htm">//</a>Important <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectOut);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCinchFemaleOutL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCinchFemaleOutR);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePlug220Power);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormCdPlayer::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageTapButtonPower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mTapButtonPower-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageTapButtonPower-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageTapButtonPower-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageTapButtonPlay))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mTapButtonPlay-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageTapButtonPlay-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageTapButtonPlay-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageTapButtonStop))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mTapButtonStop-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageTapButtonStop-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageTapButtonStop-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCinchFemaleOutL))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mCinchFemaleOutL.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCinchFemaleOutR))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mCinchFemaleOutR.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePlug220Power))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mPlug220Power.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormCdPlayer::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,9,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> MergeRects(v[4][2],v[6][2]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ImageFader1-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageTapButtonPower,v[0][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageTapButtonPlay,v[0][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageTapButtonStop,v[0][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Others<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>Power,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageLcdSymbolPlay,v[0][6]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageAudio<a href="CppSignal.htm">Signal</a>L,v[0][7]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageAudio<a href="CppSignal.htm">Signal</a>R,v[0][8]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,5,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectOut,MergeRects(v[0][2],v[0][3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageCinchFemaleOutL,v[1][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageCinchFemaleOutR,v[1][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImagePlug220Power&nbsp;&nbsp; ,v[1][4]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCdPlayer::<a href="CppTime.htm">Time</a>rTick<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;mCdPlayer-&gt;Tick(); <a href="CppComment.htm">//</a>Important <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
&nbsp;&nbsp;mFormParent-&gt;OnControllerClick();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormDimblockV3.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormDimblockV3.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormDimblockV3H<br/>
<a href="CppDefine.htm">#define</a> UnitFormDimblockV3H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> DimblockV3;<br/>
<b><a href="CppStruct.htm">struct</a></b> SocketPowerMaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> DmxMaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> DmxFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> Socket220Control;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormDimblockV3 : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDmxMaleInput;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDmxFemaleThrough;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocketPowerMale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket5;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket6;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket7;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket8;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket9;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket10;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket11;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket12;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>MainsPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>Warning;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>NondimSet;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>DmxPresent;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>PresetSet;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectDmxIn;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectDmxThrough;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectMains;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect5;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect6;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image10;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image11;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image12;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image13;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image14;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image15;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect7;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect8;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect9;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect10;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect11;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect12;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseMainsPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseNondimSet;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUsePresetSet;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseDmxPresent;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseWarning;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DimblockV3&gt; mDimblockV3;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxMaleControl&gt; mDmxMaleInput;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemaleControl&gt; mDmxFemaleThrough;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerMaleControl&gt; mSocketPowerMale;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>MainsPower;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>NondimSet;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>PresetSet;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>DmxPresent;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>Warning;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Other<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; &gt; mSockets;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; mImageSockets;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateSocket220Controls();<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormDimblockV3(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormDimblockV3 *FormDimblockV3;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormDimblockV3.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormDimblockV3.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDimmerpack.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormDimblockV3.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSprites.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> <a href="CppLink.htm">link</a> "UnitFormMachine"<br/>
<a href="CppPragma.htm">#pragma</a> <a href="CppLink.htm">link</a> "UnitFormMachine"<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormDimblockV3 *FormDimblockV3;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormDimblockV3::TFormDimblockV3(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDimblockV3(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DimblockV3&gt;(<b><a href="CppNew.htm">new</a></b> DimblockV3))<br/>
{<br/>
&nbsp;&nbsp;mImageSockets.push_back(ImageSocket1);<br/>
&nbsp;&nbsp;mImageSockets.push_back(ImageSocket2);<br/>
&nbsp;&nbsp;mImageSockets.push_back(ImageSocket3);<br/>
&nbsp;&nbsp;mImageSockets.push_back(ImageSocket4);<br/>
&nbsp;&nbsp;mImageSockets.push_back(ImageSocket5);<br/>
&nbsp;&nbsp;mImageSockets.push_back(ImageSocket6);<br/>
&nbsp;&nbsp;mImageSockets.push_back(ImageSocket7);<br/>
&nbsp;&nbsp;mImageSockets.push_back(ImageSocket8);<br/>
&nbsp;&nbsp;mImageSockets.push_back(ImageSocket9);<br/>
&nbsp;&nbsp;mImageSockets.push_back(ImageSocket10);<br/>
&nbsp;&nbsp;mImageSockets.push_back(ImageSocket11);<br/>
&nbsp;&nbsp;mImageSockets.push_back(ImageSocket12);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageSockets.size() <a href="CppOperatorEqual.htm">==</a> 12);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mDmxMaleInput <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxMaleControl&gt;(<b><a href="CppNew.htm">new</a></b> DmxMaleControl(<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDimblockV3-&gt;mDmxMaleInput, ImageDmxMaleInput));<br/>
&nbsp;&nbsp;mDmxFemaleThrough <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemaleControl&gt;(<b><a href="CppNew.htm">new</a></b> DmxFemaleControl(<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDimblockV3-&gt;mDmxFemaleOutput, ImageDmxFemaleThrough));<br/>
&nbsp;&nbsp;mSocketPowerMale <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> SocketPowerMaleControl(<b><a href="CppThis.htm">this</a></b>, mDimblockV3-&gt;mPowerMale, ImageSocketPowerMale));<br/>
&nbsp;&nbsp;mSockets <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;CreateSocket220Controls();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>MainsPower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDimblockV3-&gt;m<a href="CppLed.htm">Led</a>MainsPower,Image<a href="CppLed.htm">Led</a>MainsPower));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>NondimSet <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDimblockV3-&gt;m<a href="CppLed.htm">Led</a>NondimSet,Image<a href="CppLed.htm">Led</a>NondimSet));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>PresetSet <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDimblockV3-&gt;m<a href="CppLed.htm">Led</a>PresetSet,Image<a href="CppLed.htm">Led</a>PresetSet));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>DmxPresent <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDimblockV3-&gt;m<a href="CppLed.htm">Led</a>DmxPresent,Image<a href="CppLed.htm">Led</a>DmxPresent));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Warning <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDimblockV3-&gt;m<a href="CppLed.htm">Led</a>Warning,Image<a href="CppLed.htm">Led</a>Warning));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormDimblockV3::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update all<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>MainsPower-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>NondimSet-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>PresetSet-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>DmxPresent-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Warning-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start drawing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseMainsPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseNondimSet);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUsePresetSet);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseDmxPresent);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseWarning);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>MainsPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>NondimSet);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>PresetSet);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>DmxPresent);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>Warning);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectDmxIn);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectDmxThrough);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectMains);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect12);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDmxMaleInput);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDmxFemaleThrough);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageSocketPowerMale);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSockets <a href="CppOperatorAssign.htm">=</a> mSockets.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nSockets; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(mImageSockets[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormDimblockV3::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDmxMaleInput))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mDmxMaleInput.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDmxFemaleThrough))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mDmxFemaleThrough.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageSocketPowerMale))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mSocketPowerMale.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSockets <a href="CppOperatorAssign.htm">=</a> mSockets.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nSockets; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,mImageSockets[i]))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mSockets[i].get());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; &gt;<br/>
&nbsp;&nbsp;TFormDimblockV3::CreateSocket220Controls()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; &gt; sockets;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSockets <a href="CppOperatorAssign.htm">=</a> mImageSockets.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mDimblockV3-&gt;mSockets.size() <a href="CppOperatorEqual.htm">==</a> mImageSockets.size() );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nSockets; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; socket(<b><a href="CppNew.htm">new</a></b> Socket220Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>, mDimblockV3-&gt;mSockets[i], mImageSockets[i] ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sockets.push_back(socket);<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sockets.size() <a href="CppOperatorEqual.htm">==</a> 12);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sockets;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormDimblockV3::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,4,4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize images<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> MergeRects(v[1][0],v[3][0]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ImageFaderMaster-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseMainsPower,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseNondimSet ,v[0][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUsePresetSet ,v[0][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseDmxPresent,v[0][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseWarning&nbsp;&nbsp; ,v[2][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Diplay<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>MainsPower,v[1][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>NondimSet ,v[1][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>PresetSet ,v[1][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>DmxPresent,v[1][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>Warning&nbsp;&nbsp; ,v[3][3]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,9,5));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectDmxIn,MergeRects(v[0][1],v[0][2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectDmxThrough,MergeRects(v[1][1],v[1][2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectMains,MergeRects(v[2][0],v[4][2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect1,v[1][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect2,v[1][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect3,v[1][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect4,v[1][6]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect5,v[1][7]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect6,v[1][8]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect7,v[2][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect8,v[2][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect9,v[2][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect10,v[2][6]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect11,v[2][7]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect12,v[2][8]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDmxMaleInput,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDmxFemaleThrough,v[1][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSocketPowerMale,v[2][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSocket1,v[0][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSocket2,v[0][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSocket3,v[0][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSocket4,v[0][6]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSocket5,v[0][7]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSocket6,v[0][8]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSocket7,v[3][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSocket8,v[3][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSocket9,v[3][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSocket10,v[3][6]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSocket11,v[3][7]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSocket12,v[3][8]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormEasyAmp.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormEasyAmp.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormEasyAmpH<br/>
<a href="CppDefine.htm">#define</a> UnitFormEasyAmpH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitTapButtonControl.h"<br/>
<a href="CppComment.htm">//</a>Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> EasyAmp;<br/>
<a href="CppComment.htm">//</a>Control<br/>
<b><a href="CppStruct.htm">struct</a></b> TwoSwitchControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>Control;<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> JackXlrFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> SpeakonFemaleControl;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormEasyAmp : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackXlrR;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuro;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackXlrL;<br/>
&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rTick;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePowerSwitch;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageGain;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSpeakonL;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSpeakonR;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EasyAmp&gt; mAmplifier;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitchControl&gt; mPowerSwitch;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mGain;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt; mEuro;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackXlrFemaleControl&gt; mJackXlrL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackXlrFemaleControl&gt; mJackXlrR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemaleControl&gt; mSpeakonL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemaleControl&gt; mSpeakonR;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>Power;<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormEasyAmp(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormEasyAmp *FormEasyAmp;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormEasyAmp.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormEasyAmp.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormEasyAmp.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitAmplifier.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> <a href="CppLink.htm">link</a> "UnitFormMachine"<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormEasyAmp *FormEasyAmp;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormEasyAmp::TFormEasyAmp(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mAmplifier(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EasyAmp&gt;(<b><a href="CppNew.htm">new</a></b> EasyAmp))<br/>
{<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mPowerSwitch <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitchControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TwoSwitchControl(<b><a href="CppThis.htm">this</a></b>,mAmplifier-&gt;mPowerSwitch,ImagePowerSwitch));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mGain;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;mGain <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mAmplifier-&gt;mGain,ImageGain));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;mGain);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mEuro <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> EuroMaleControl(<b><a href="CppThis.htm">this</a></b>,mAmplifier-&gt;mEuroPower,ImageEuro));<br/>
&nbsp;&nbsp;mJackXlrL <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackXlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> JackXlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mAmplifier-&gt;mJackXlrL,ImageJackXlrL));<br/>
&nbsp;&nbsp;mJackXlrR <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackXlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> JackXlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mAmplifier-&gt;mJackXlrR,ImageJackXlrR));<br/>
&nbsp;&nbsp;mSpeakonL <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> SpeakonFemaleControl(<b><a href="CppThis.htm">this</a></b>,mAmplifier-&gt;mSpeakonL,ImageSpeakonL));<br/>
&nbsp;&nbsp;mSpeakonR <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> SpeakonFemaleControl(<b><a href="CppThis.htm">this</a></b>,mAmplifier-&gt;mSpeakonR,ImageSpeakonR));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(mAmplifier-&gt;m<a href="CppLed.htm">Led</a>Power,Image<a href="CppLed.htm">Led</a>));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set controls by clicking <b><a href="CppVirtual.htm">virtual</a></b>ly<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Strange, <b><a href="CppIf.htm">if</a></b> I remove '<b><a href="CppThis.htm">this</a></b>' I get <a href="CppAccessViolation.htm">access violation</a>s,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;because mGain is null (where <b><a href="CppThis.htm">this</a></b>-&gt;mGain is not)<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;mGain-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;1 * ImageGain-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;3 * ImageGain-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorDivide.htm">/</a> 4);<br/>
&nbsp;&nbsp;mPowerSwitch-&gt;OnMouseDown(0,0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormEasyAmp::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePowerSwitch);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageGain);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageEuro);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageJackXlrL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageJackXlrR);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageSpeakonL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageSpeakonR);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormEasyAmp::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePowerSwitch))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPowerSwitch-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImagePowerSwitch-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImagePowerSwitch-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageGain))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;mGain);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;mGain-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageGain-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageGain-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageEuro))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mEuro.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageJackXlrL))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mJackXlrL.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageJackXlrR))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mJackXlrR.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageSpeakonL))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mSpeakonL.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageSpeakonR))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mSpeakonR.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormEasyAmp::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,3,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImagePowerSwitch,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageGain,v[0][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Others<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>,v[0][2]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,3,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageEuro,MergeRects(v[0][0],v[1][0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageJackXlrL,v[0][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageJackXlrR,v[0][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSpeakonL,v[1][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSpeakonR,v[1][2]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormMachine.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormMachine.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormMachineH<br/>
<a href="CppDefine.htm">#define</a> UnitFormMachineH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumDisplayMode.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> Machine;<br/>
<b><a href="CppStruct.htm">struct</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main;<br/>
<b><a href="CppStruct.htm">struct</a></b> ConnectorControl;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> Every FormMachine manages the GUI of one Machine<br/>
<a href="CppComment.htm">//</a> A FormX manages a X<br/>
<b><a href="CppClass.htm">class</a></b> TFormMachine : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBuffer;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;EnumDisplayMode mDisplayMode;<br/>
 <br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormMachine(T<a href="CppComponent.htm">Component</a>* Owner, TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> GetMachine() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Safe, because ~Machine is <b><a href="CppPrivate.htm">private</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDisplayMode(<b><a href="CppConst.htm">const</a></b> EnumDisplayMode mode) { mDisplayMode <a href="CppOperatorAssign.htm">=</a> mode; }<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> UpdateBuffer() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> mFormParent; <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b>, so it be <b><a href="CppPublic.htm">public</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> OnMouseMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> OnMouseUp(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> OnAfterResize() {};&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mBorderSize <a href="CppOperatorAssign.htm">=</a> 8;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnControllerClick();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnConnectorClick(ConnectorControl * <b><a href="CppConst.htm">const</a></b> connectorControl);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawOnBuffer(<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawOnBuffer(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b>&gt;&amp; images);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawOnBuffer(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a> * &gt;&amp; images);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawBorderAroundBuffer();<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormMachine *FormMachine;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormMachine.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormMachine.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormMachine *FormMachine;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormMachine::TFormMachine(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TForm(Owner),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFormParent(formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDisplayMode(modeView)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Owner <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Deletion of TFormMachine is done by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mFormParent <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "TFormMachine must know its parent form");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMachine::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ClientWidth;<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ClientHeight;<br/>
&nbsp;&nbsp;OnAfterResize();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMachine::OnControllerClick()<br/>
{<br/>
&nbsp;&nbsp;mFormParent-&gt;OnControllerClick();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMachine::OnConnectorClick(ConnectorControl * <b><a href="CppConst.htm">const</a></b> connectorControl)<br/>
{<br/>
&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(connectorControl);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMachine::DrawOnBuffer(<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
{<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(image-&gt;Left, image-&gt;Top, image-&gt;Picture-&gt;Graphic);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMachine::DrawOnBuffer(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b>&gt;&amp; images)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b>&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> images.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> images.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw((*i)-&gt;Left, (*i)-&gt;Top, (*i)-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMachine::DrawOnBuffer(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a> *&gt;&amp; images)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a> * &gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> images.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> images.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw((*i)-&gt;Left, (*i)-&gt;Top, (*i)-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMachine::DrawBorderAroundBuffer()<br/>
{<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> mBorderSize;<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color <a href="CppOperatorAssign.htm">=</a> clBlack;<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;MoveTo(0,0);<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;LineTo(0,ClientHeight);<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;LineTo(ClientWidth,ClientHeight);<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;LineTo(ClientWidth,0);<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;LineTo(0,0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormMdPlayer.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormMdPlayer.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormMdPlayerH<br/>
<a href="CppDefine.htm">#define</a> UnitFormMdPlayerH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitTapButtonControl.h"<br/>
<a href="CppComment.htm">//</a>Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> MdPlayer;<br/>
<a href="CppComment.htm">//</a>Control<br/>
<a href="CppComment.htm">//</a>TapButton has already been <a href="CppInclude.htm">#include</a>d<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> Plug220Control;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Control;<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdSymbolPlayControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdSymbolRecControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormMdPlayer : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleInR;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlug220Power;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAudio<a href="CppSignal.htm">Signal</a>L;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectIn;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleInL;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectOut;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTapButtonPlay;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTapButtonStop;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTapButtonRecord;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAudio<a href="CppSignal.htm">Signal</a>R;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleOutL;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleOutR;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTapButtonPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageLcdSymbolPlay;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageLcdSymbolRec;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;MdPlayer&gt; mMdPlayer;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;MdPlayer&gt; &gt; mTapButtonPlay;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;MdPlayer&gt; &gt; mTapButtonRecord;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;MdPlayer&gt; &gt; mTapButtonStop;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;MdPlayer&gt; &gt; mTapButtonPower;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemaleControl&gt; mCinchFemaleInL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemaleControl&gt; mCinchFemaleInR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemaleControl&gt; mCinchFemaleOutL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemaleControl&gt; mCinchFemaleOutR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220Control&gt; mPlug220Power;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt; mAudio<a href="CppSignal.htm">Signal</a>DisplayL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt; mAudio<a href="CppSignal.htm">Signal</a>DisplayR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbolRecControl&gt; mLcdSymbolRec;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbolPlayControl&gt; mLcdSymbolPlay;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>Power;<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormMdPlayer(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormMdPlayer *FormMdPlayer;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormMdPlayer.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormMdPlayer.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMdPlayer.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMdPlayer.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormMdPlayer *FormMdPlayer;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormMdPlayer::TFormMdPlayer(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMdPlayer(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;MdPlayer&gt;(<b><a href="CppNew.htm">new</a></b> MdPlayer))<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mTapButtonPlay <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;MdPlayer&gt; &gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButtonControl&lt;MdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,mMdPlayer-&gt;mButtonPlay, ImageTapButtonPlay));<br/>
&nbsp;&nbsp;mTapButtonRecord <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;MdPlayer&gt; &gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButtonControl&lt;MdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,mMdPlayer-&gt;mButtonRecord, ImageTapButtonRecord));<br/>
&nbsp;&nbsp;mTapButtonStop <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;MdPlayer&gt; &gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButtonControl&lt;MdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,mMdPlayer-&gt;mButtonStop, ImageTapButtonStop));<br/>
&nbsp;&nbsp;mTapButtonPower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButtonControl&lt;MdPlayer&gt; &gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButtonControl&lt;MdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,mMdPlayer-&gt;mButtonPower, ImageTapButtonPower));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mCinchFemaleInL <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> CinchWhiteFemaleControl(<b><a href="CppThis.htm">this</a></b>,mMdPlayer-&gt;mCinchFemaleInL,ImageCinchFemaleInL));<br/>
&nbsp;&nbsp;mCinchFemaleInR <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> CinchRedFemaleControl(<b><a href="CppThis.htm">this</a></b>,mMdPlayer-&gt;mCinchFemaleInR,ImageCinchFemaleInR));<br/>
&nbsp;&nbsp;mCinchFemaleOutL <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> CinchWhiteFemaleControl(<b><a href="CppThis.htm">this</a></b>,mMdPlayer-&gt;mCinchFemaleOutL,ImageCinchFemaleOutL));<br/>
&nbsp;&nbsp;mCinchFemaleOutR <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> CinchRedFemaleControl(<b><a href="CppThis.htm">this</a></b>,mMdPlayer-&gt;mCinchFemaleOutR,ImageCinchFemaleOutR));<br/>
&nbsp;&nbsp;mPlug220Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Plug220Control(<b><a href="CppThis.htm">this</a></b>,mMdPlayer-&gt;mPlug220Power,ImagePlug220Power));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayL <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Control(mMdPlayer-&gt;mAudio<a href="CppSignal.htm">Signal</a>DisplayL,ImageAudio<a href="CppSignal.htm">Signal</a>L));<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayR <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Control(mMdPlayer-&gt;mAudio<a href="CppSignal.htm">Signal</a>DisplayR,ImageAudio<a href="CppSignal.htm">Signal</a>R));<br/>
&nbsp;&nbsp;mLcdSymbolRec <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbolRecControl&gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> LcdSymbolRecControl(mMdPlayer-&gt;mLcdSymbolRecord,ImageLcdSymbolRec));<br/>
&nbsp;&nbsp;mLcdSymbolPlay <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbolPlayControl&gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> LcdSymbolPlayControl(mMdPlayer-&gt;mLcdSymbolPlay,ImageLcdSymbolPlay));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(mMdPlayer-&gt;m<a href="CppLed.htm">Led</a>Power,Image<a href="CppLed.htm">Led</a>Power));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMdPlayer::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMdPlayer-&gt;Tick(); <a href="CppComment.htm">//</a>Important <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMdPlayer-&gt;Tick(); <a href="CppComment.htm">//</a>Important <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayL-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayR-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mLcdSymbolRec-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mLcdSymbolPlay-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>DrawOnBuffer(LabelUse1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageTapButtonPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageTapButtonRecord);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageTapButtonPlay);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageTapButtonStop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>Power);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageLcdSymbolRec);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageLcdSymbolPlay);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageAudio<a href="CppSignal.htm">Signal</a>L);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageAudio<a href="CppSignal.htm">Signal</a>R);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMdPlayer-&gt;Tick(); <a href="CppComment.htm">//</a>Important <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectIn);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectOut);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCinchFemaleInL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCinchFemaleInR);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCinchFemaleOutL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCinchFemaleOutR);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePlug220Power);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMdPlayer::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageTapButtonPower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mTapButtonPower-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageTapButtonPower-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageTapButtonPower-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageTapButtonPlay))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mTapButtonPlay-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageTapButtonPlay-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageTapButtonPlay-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageTapButtonRecord))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mTapButtonRecord-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageTapButtonRecord-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageTapButtonRecord-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageTapButtonStop))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mTapButtonStop-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageTapButtonStop-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageTapButtonStop-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCinchFemaleInL))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mCinchFemaleInL.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCinchFemaleInR))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mCinchFemaleInR.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCinchFemaleOutL))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mCinchFemaleOutL.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCinchFemaleOutR))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mCinchFemaleOutR.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePlug220Power))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mPlug220Power.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMdPlayer::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,9,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> MergeRects(v[4][2],v[6][2]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ImageFader1-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageTapButtonPower,v[0][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageTapButtonRecord,v[0][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageTapButtonPlay,v[0][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageTapButtonStop,v[0][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Others<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>Power,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageLcdSymbolRec,v[0][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageLcdSymbolPlay,v[0][6]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageAudio<a href="CppSignal.htm">Signal</a>L,v[0][7]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageAudio<a href="CppSignal.htm">Signal</a>R,v[0][8]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,5,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectIn ,MergeRects(v[0][0],v[0][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectOut,MergeRects(v[0][2],v[0][3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageCinchFemaleInL ,v[1][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageCinchFemaleInR ,v[1][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageCinchFemaleOutL,v[1][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageCinchFemaleOutR,v[1][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImagePlug220Power&nbsp;&nbsp; ,v[1][4]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormOctlet.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormOctlet.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormOctletH<br/>
<a href="CppDefine.htm">#define</a> UnitFormOctletH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ImgList.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> Octlet;<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> ControllerControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> ConnectorControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> TwoSwitchControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> Socket220Control;<br/>
<b><a href="CppStruct.htm">struct</a></b> Plug220Control;<br/>
<b><a href="CppStruct.htm">struct</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormOctlet : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220_3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTwoSwitchPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220_2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220_1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlug220;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220_4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220_5;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220_6;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220_7;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220_8;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Octlet&gt; mOctlet;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitchControl&gt; mTwoSwitchPower;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; &gt; mSocket220Controls;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220Control&gt; mPlug220;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Misc<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; mImageSockets220;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateSocket220Controls();<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormOctlet(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormOctlet *FormOctlet;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormOctlet.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormOctlet.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitOctlet.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormOctlet.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> <a href="CppLink.htm">link</a> "UnitFormMachine"<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormOctlet *FormOctlet;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormOctlet::TFormOctlet(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mOctlet(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Octlet&gt;(<b><a href="CppNew.htm">new</a></b> Octlet))<br/>
{<br/>
&nbsp;&nbsp;mImageSockets220.push_back(ImageSocket220_1);<br/>
&nbsp;&nbsp;mImageSockets220.push_back(ImageSocket220_2);<br/>
&nbsp;&nbsp;mImageSockets220.push_back(ImageSocket220_3);<br/>
&nbsp;&nbsp;mImageSockets220.push_back(ImageSocket220_4);<br/>
&nbsp;&nbsp;mImageSockets220.push_back(ImageSocket220_5);<br/>
&nbsp;&nbsp;mImageSockets220.push_back(ImageSocket220_6);<br/>
&nbsp;&nbsp;mImageSockets220.push_back(ImageSocket220_7);<br/>
&nbsp;&nbsp;mImageSockets220.push_back(ImageSocket220_8);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImageSockets220.size() <a href="CppOperatorEqual.htm">==</a> 8);<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mTwoSwitchPower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitchControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TwoSwitchControl(<b><a href="CppThis.htm">this</a></b>,mOctlet-&gt;mPowerSwitch,ImageTwoSwitchPower));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mPlug220 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Plug220Control(<b><a href="CppThis.htm">this</a></b>,mOctlet-&gt;mPlug,ImagePlug220));<br/>
&nbsp;&nbsp;mSocket220Controls <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;CreateSocket220Controls();<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn power off by <b><a href="CppDefault.htm">default</a></b><br/>
&nbsp;&nbsp;mTwoSwitchPower-&gt;OnMouseDown(0,0); <a href="CppComment.htm">//</a>Top of power<b><a href="CppSwitch.htm">switch</a></b> turns off<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormOctlet::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageTwoSwitchPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePlug220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSockets <a href="CppOperatorAssign.htm">=</a> mSocket220Controls.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nSockets; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(mImageSockets220[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormOctlet::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageTwoSwitchPower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mTwoSwitchPower-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageTwoSwitchPower-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageTwoSwitchPower-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePlug220)) mFormParent-&gt;OnConnectorClick(mPlug220.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSockets <a href="CppOperatorAssign.htm">=</a> mSocket220Controls.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nSockets; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,mImageSockets220[i]))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mSocket220Controls[i].get());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormOctlet::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v(GetRectsHorizontal(ClientRect,5));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v0(GetRectsVertical(v[0],2));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v1(GetRectsVertical(v[1],2));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v2(GetRectsVertical(v[2],2));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v3(GetRectsVertical(v[3],2));<br/>
&nbsp;&nbsp;PlaceInCenter(mImageSockets220[0],v0[0]);<br/>
&nbsp;&nbsp;PlaceInCenter(mImageSockets220[1],v1[0]);<br/>
&nbsp;&nbsp;PlaceInCenter(mImageSockets220[2],v2[0]);<br/>
&nbsp;&nbsp;PlaceInCenter(mImageSockets220[3],v3[0]);<br/>
&nbsp;&nbsp;PlaceInCenter(mImageSockets220[4],v0[1]);<br/>
&nbsp;&nbsp;PlaceInCenter(mImageSockets220[5],v1[1]);<br/>
&nbsp;&nbsp;PlaceInCenter(mImageSockets220[6],v2[1]);<br/>
&nbsp;&nbsp;PlaceInCenter(mImageSockets220[7],v3[1]);<br/>
&nbsp;&nbsp;PlaceInCenter(ImagePlug220&nbsp;&nbsp;&nbsp;&nbsp;,v[4]);<br/>
<br/>
&nbsp;&nbsp;PlaceInCenter(ImageTwoSwitchPower,ClientRect);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; &gt;<br/>
&nbsp;&nbsp;TFormOctlet::CreateSocket220Controls()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; &gt; sockets;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSockets <a href="CppOperatorAssign.htm">=</a> mImageSockets220.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mOctlet-&gt;mSockets220.size() <a href="CppOperatorEqual.htm">==</a> mImageSockets220.size() );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nSockets; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; socket(<b><a href="CppNew.htm">new</a></b> Socket220Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>, mOctlet-&gt;mSockets220[i], mImageSockets220[i] ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sockets.push_back(socket);<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sockets.size() <a href="CppOperatorEqual.htm">==</a> 8);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sockets;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormPar64.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormPar64.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormPar64H<br/>
<a href="CppDefine.htm">#define</a> UnitFormPar64H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ImgList.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> Par64;<br/>
<b><a href="CppStruct.htm">struct</a></b> Plug220Control;<br/>
<b><a href="CppStruct.htm">struct</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormPar64 : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlug220;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageLamp;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Par64&gt; mPar64;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220Control&gt; mPlug220;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormPar64(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormPar64 *FormPar64;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormPar64.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormPar64.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitLamp.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormPar64.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSprites.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormPar64 *FormPar64;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormPar64::TFormPar64(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPar64(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Par64&gt;(<b><a href="CppNew.htm">new</a></b> Par64))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mPlug220 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Plug220Control(<b><a href="CppThis.htm">this</a></b>,mPar64-&gt;mPlug220,ImagePlug220));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormPar64::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update images<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawLamp(ImageLamp,mPar64-&gt;GetLightIntensity(),255,255,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update buffer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageLamp);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePlug220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Drawing is done by TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormPar64::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePlug220))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mPlug220.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormPar64::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;PlaceInCenter(ImageLamp,ClientRect);<br/>
&nbsp;&nbsp;PlaceInCenter(ImagePlug220,ClientRect);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormRcf322A.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormRcf322A.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormRcf322AH<br/>
<a href="CppDefine.htm">#define</a> UnitFormRcf322AH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> Rcf322A;<br/>
<a href="CppComment.htm">//</a>Control<br/>
<b><a href="CppStruct.htm">struct</a></b> TwoSwitchControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>Control;<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> JackFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMaleControl;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormRcf322A : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageVolumeDial;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>LimProt;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTwoSwitchPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSound;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUsePowerOn;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseVolume;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseLimProt;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectMains;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectBalanced;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackFemale;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Rcf322A&gt; mSpeaker;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitchControl&gt; mPowerSwitch;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mVolumeDial;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt; mEuroMale;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMale;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt; mXlrFemale;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemaleControl&gt; mJackFemale;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>LimProt;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormRcf322A(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormRcf322A *FormRcf322A;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormRcf322A.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormRcf322A.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSpeaker.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormRcf322A.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSprites.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> <a href="CppLink.htm">link</a> "UnitFormMachine"<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormRcf322A *FormRcf322A;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormRcf322A::TFormRcf322A(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSpeaker(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Rcf322A&gt;(<b><a href="CppNew.htm">new</a></b> Rcf322A))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mPowerSwitch <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitchControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TwoSwitchControl(<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSpeaker-&gt;mPowerSwitch,ImageTwoSwitchPower));<br/>
&nbsp;&nbsp;mVolumeDial <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSpeaker-&gt;mVolumeDial,ImageVolumeDial));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mEuroMale <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> EuroMaleControl(<b><a href="CppThis.htm">this</a></b>,mSpeaker-&gt;mEuroMalePower,ImageEuroMale));<br/>
&nbsp;&nbsp;mXlrFemale <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSpeaker-&gt;mXlrInput,ImageXlrFemale));<br/>
&nbsp;&nbsp;mXlrMale <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSpeaker-&gt;mXlrDaisyChain,ImageXlrMale));<br/>
&nbsp;&nbsp;mJackFemale <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> JackFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSpeaker-&gt;mJackInput,ImageJackFemale));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSpeaker-&gt;m<a href="CppLed.htm">Led</a>Power,Image<a href="CppLed.htm">Led</a>Power));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>LimProt <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSpeaker-&gt;m<a href="CppLed.htm">Led</a>LimProt,Image<a href="CppLed.htm">Led</a>LimProt));<br/>
<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;ImageVolumeDial-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 50;<br/>
&nbsp;&nbsp;ImageVolumeDial-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> 50;<br/>
&nbsp;&nbsp;ImageVolumeDial-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set controls by clicking <b><a href="CppVirtual.htm">virtual</a></b>ly<br/>
&nbsp;&nbsp;mVolumeDial-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;1 * ImageVolumeDial-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;3 * ImageVolumeDial-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorDivide.htm">/</a> 4);<br/>
&nbsp;&nbsp;mPowerSwitch-&gt;OnMouseDown(0,0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormRcf322A::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update all<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>LimProt-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawAudio<a href="CppSignal.htm">Signal</a>(ImageSound,mSpeaker-&gt;GetSoundLevel());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start drawing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseVolume);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUsePowerOn);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseLimProt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageVolumeDial);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageTwoSwitchPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageSound);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>Power);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>LimProt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectBalanced);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectMains);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrFemale);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMale);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageEuroMale);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageJackFemale);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormRcf322A::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageVolumeDial))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mVolumeDial-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageVolumeDial-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageVolumeDial-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageTwoSwitchPower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPowerSwitch-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageTwoSwitchPower-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageTwoSwitchPower-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMale&nbsp;&nbsp; )) mFormParent-&gt;OnConnectorClick(mXlrMale.get()&nbsp;&nbsp; );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrFemale )) mFormParent-&gt;OnConnectorClick(mXlrFemale.get() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageEuroMale&nbsp;&nbsp;)) mFormParent-&gt;OnConnectorClick(mEuroMale.get()&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageJackFemale)) mFormParent-&gt;OnConnectorClick(mJackFemale.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormRcf322A::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get y-x-ordered vector of TRects<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,2,6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][2],v[5][2]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ImageFader1-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseVolume,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUsePowerOn,v[2][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseLimProt,v[4][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageVolumeDial,v[1][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageTwoSwitchPower,v[4][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSound,MergeRects(v[0][1],v[1][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>Power,v[3][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>LimProt,v[5][1]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,1,6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectBalanced&nbsp;&nbsp;,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectMains&nbsp;&nbsp;&nbsp;&nbsp; ,v[4][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageJackFemale,v[1][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrFemale ,v[2][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrMale&nbsp;&nbsp; ,v[3][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageEuroMale&nbsp;&nbsp;,v[5][0]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormRcfEvent3000.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormRcfEvent3000.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormRcfEvent3000H<br/>
<a href="CppDefine.htm">#define</a> UnitFormRcfEvent3000H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> RcfEvent3000;<br/>
<a href="CppComment.htm">//</a>Control<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> SpeakonFemaleControl;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormRcfEvent3000 : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSound;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageInput;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLink.htm">Link</a>;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;RcfEvent3000&gt; mSpeaker;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemaleControl&gt; mInput;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemaleControl&gt; m<a href="CppLink.htm">Link</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>RCF Event 3000 does not use the DisplayControl<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>because it is not an actual physical electrical display <br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt; mDisplay;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormRcfEvent3000(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormRcfEvent3000 *FormRcfEvent3000;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormRcfEvent3000.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormRcfEvent3000.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSpeaker.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormRcfEvent3000.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSprites.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> <a href="CppLink.htm">link</a> "UnitFormMachine"<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormRcfEvent3000 *FormRcfEvent3000;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormRcfEvent3000::TFormRcfEvent3000(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSpeaker(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;RcfEvent3000&gt;(<b><a href="CppNew.htm">new</a></b> RcfEvent3000))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mInput <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> SpeakonFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSpeaker-&gt;mInput,ImageInput));<br/>
&nbsp;&nbsp;m<a href="CppLink.htm">Link</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> SpeakonFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSpeaker-&gt;m<a href="CppLink.htm">Link</a>,Image<a href="CppLink.htm">Link</a>));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormRcfEvent3000::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update all<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawAudio<a href="CppSignal.htm">Signal</a>(ImageSound,mSpeaker-&gt;GetSoundLevel());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start drawing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageSound);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageInput);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLink.htm">Link</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormRcfEvent3000::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageInput)) mFormParent-&gt;OnConnectorClick(mInput.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,Image<a href="CppLink.htm">Link</a> )) mFormParent-&gt;OnConnectorClick(m<a href="CppLink.htm">Link</a>.get() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormRcfEvent3000::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get y-x-ordered vector of TRects<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,1,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageSound,v[0][0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,2,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageInput,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLink.htm">Link</a> ,v[0][1]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormShureSm58.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormShureSm58.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormShureSm58H<br/>
<a href="CppDefine.htm">#define</a> UnitFormShureSm58H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> ShureSm58;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMaleControl;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormShureSm58 : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAudio<a href="CppSignal.htm">Signal</a>;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSing;<br/>
&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rSing;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rSing<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ShureSm58&gt; mMicrophone;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMale;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> mSinging;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mSingerAverage;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormShureSm58(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormShureSm58 *FormShureSm58;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormShureSm58.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormShureSm58.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMicrophone.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormShureSm58.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSprites.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormShureSm58 *FormShureSm58;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormShureSm58::TFormShureSm58(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMicrophone(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ShureSm58&gt;(<b><a href="CppNew.htm">new</a></b> ShureSm58)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSinging(<b><a href="CppFalse.htm">false</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSingerAverage( 0.4 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetRandomUniform.htm">GetRandomUniform</a>() * 0.6)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mXlrMale <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mMicrophone-&gt;mXlrInput,ImageXlrMale));<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormShureSm58::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView&nbsp;&nbsp; :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse&nbsp;&nbsp;&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set <b><a href="CppNew.htm">new</a></b> audio <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawAudio<a href="CppSignal.htm">Signal</a>(ImageAudio<a href="CppSignal.htm">Signal</a>,mMicrophone-&gt;GetAudio<a href="CppSignal.htm">Signal</a>Strength());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw 'Use' images<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageSing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageAudio<a href="CppSignal.htm">Signal</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMale);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Drawing is done by TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormShureSm58::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageSing))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mSinging <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSinging <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMicrophone-&gt;SetAudio<a href="CppSignal.htm">Signal</a>Strength(0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageSing-&gt;Picture <a href="CppOperatorAssign.htm">=</a> FormSprites-&gt;ImageSingNo-&gt;Picture;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSinging <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMicrophone-&gt;SetAudio<a href="CppSignal.htm">Signal</a>Strength(1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageSing-&gt;Picture <a href="CppOperatorAssign.htm">=</a> FormSprites-&gt;ImageSingYes-&gt;Picture;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnControllerClick();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMale))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrMale.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormShureSm58::<a href="CppTime.htm">Time</a>rSing<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This singer sings at a strength of mSingerAverage<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> plus or minus 0.5 * mSingerAverage<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audio<a href="CppSignal.htm">Signal</a>Strength <a href="CppOperatorAssign.htm">=</a> (mSinging <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;? (0.5 * mSingerAverage) <a href="CppOperatorPlus.htm">+</a> (<a href="CppGetRandomUniform.htm">GetRandomUniform</a>() * mSingerAverage)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: 0.0);<br/>
&nbsp;&nbsp;mMicrophone-&gt;SetAudio<a href="CppSignal.htm">Signal</a>Strength(audio<a href="CppSignal.htm">Signal</a>Strength);<br/>
&nbsp;&nbsp;DrawAudio<a href="CppSignal.htm">Signal</a>(ImageAudio<a href="CppSignal.htm">Signal</a>,mMicrophone-&gt;GetAudio<a href="CppSignal.htm">Signal</a>Strength());<br/>
&nbsp;&nbsp;mFormParent-&gt;OnControllerClick();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormShureSm58::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v(GetRectsHorizontal(ClientRect,2));<br/>
&nbsp;&nbsp;PlaceInCenter(ImageSing,v[0]);<br/>
&nbsp;&nbsp;PlaceInCenter(ImageAudio<a href="CppSignal.htm">Signal</a>,v[1]);<br/>
&nbsp;&nbsp;PlaceInCenter(ImageXlrMale,ClientRect);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimStagecraftAbout.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimStagecraftAbout.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>H<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a> : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBackground;<br/>
&nbsp;&nbsp;TPanel *Panel1;<br/>
&nbsp;&nbsp;TRichEdit *RichEditLicence;<br/>
&nbsp;&nbsp;TPanel *Panel2;<br/>
&nbsp;&nbsp;TPanel *Panel3;<br/>
&nbsp;&nbsp;TPanel *Panel4;<br/>
&nbsp;&nbsp;TPanel *Panel5;<br/>
&nbsp;&nbsp;TPanel *Panel6;<br/>
&nbsp;&nbsp;TPanel *Panel7;<br/>
&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rMain;<br/>
&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rColor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonWhatsNew;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonOtherLicences;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel8;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rMain<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rColor<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonWhatsNewClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonOtherLicencesClick(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mDr;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mDg;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mDb;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawBackground();<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a> *Form<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimStagecraftAbout.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimStagecraftAbout.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a> *Form<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>::TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner), mDr(1), mDg(1), mDb(1)<br/>
{<br/>
&nbsp;&nbsp;DrawBackground();<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rMain-&gt;On<a href="CppTime.htm">Time</a>r(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>::DrawBackground()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image <a href="CppOperatorAssign.htm">=</a> ImageBackground;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> myLine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> yD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Range z: <a href="CppOperatorMinus.htm">-</a>3 , <a href="CppOperatorPlus.htm">+</a>3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> zD<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdCos.htm">std::cos</a>(xD <a href="CppOperatorDivide.htm">/</a> 3.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdSin.htm">std::sin</a>(yD <a href="CppOperatorDivide.htm">/</a> 4.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppStdSin.htm">std::sin</a>( (xD <a href="CppOperatorPlus.htm">+</a> yD) <a href="CppOperatorDivide.htm">/</a> 5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> grey <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( (zD <a href="CppOperatorPlus.htm">+</a> 3.0) * (256.0 <a href="CppOperatorDivide.htm">/</a> 6.0) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(grey <a href="CppOperatorGreaterEqual.htm">&gt;=</a>&nbsp;&nbsp; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(grey &lt;&nbsp;&nbsp;256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+2] <a href="CppOperatorAssign.htm">=</a> (myLine[x*3+2] <a href="CppOperatorPlus.htm">+</a> grey) <a href="CppOperatorModulus.htm">%</a> 256; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+1] <a href="CppOperatorAssign.htm">=</a> (myLine[x*3+1] <a href="CppOperatorPlus.htm">+</a> grey) <a href="CppOperatorModulus.htm">%</a> 256; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+0] <a href="CppOperatorAssign.htm">=</a> (myLine[x*3+0] <a href="CppOperatorPlus.htm">+</a> grey) <a href="CppOperatorModulus.htm">%</a> 256; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>::<a href="CppTime.htm">Time</a>rColor<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> tick <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>tick;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (tick <a href="CppOperatorModulus.htm">%</a> 15)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;0: mDr <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;3; mDg <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>4; mDb <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;1: mDr <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;4; mDg <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3; mDb <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;2: mDr <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;5; mDg <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2; mDb <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;3: mDr <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;4; mDg <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;1; mDb <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;4: mDr <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;3; mDg <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;2; mDb <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;5: mDr <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;2; mDg <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;3; mDb <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>4; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;6: mDr <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;1; mDg <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;4; mDb <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;7: mDr <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1; mDg <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;5; mDb <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;8: mDr <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2; mDg <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;4; mDb <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;9: mDr <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3; mDg <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;3; mDb <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 10: mDr <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>4; mDg <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;2; mDb <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;3; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 11: mDr <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3; mDg <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;1; mDb <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;4; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 12: mDr <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2; mDg <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1; mDb <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;5; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 13: mDr <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;1; mDg <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2; mDb <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;4; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 14: mDr <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;2; mDg <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3; mDb <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;3; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>::<a href="CppTime.htm">Time</a>rMain<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image <a href="CppOperatorAssign.htm">=</a> ImageBackground;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> myLine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+2]<a href="CppOperatorPlusAssign.htm">+=</a>mDr; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+1]<a href="CppOperatorPlusAssign.htm">+=</a>mDg; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+0]<a href="CppOperatorPlusAssign.htm">+=</a>mDb; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageBackground-&gt;Picture-&gt;Graphic);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>::ButtonWhatsNewClick(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew&gt; f(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>::ButtonOtherLicencesClick(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences&gt; f(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppOperatorAssign.htm">=</a> <a href="CppAbout.htm">About</a> <a href="ToolSimStagecraft.htm">SimStagecraft</a> <a href="CppOperatorAssign.htm">=</a><br/>
<br/>
Some technical information <a href="CppAbout.htm">about</a> <a href="ToolSimStagecraft.htm">SimStagecraft</a><br/>
<br/>
<a href="CppOperatorEqual.htm">==</a> Project <a href="CppOperatorEqual.htm">==</a><br/>
<br/>
In 'Project | Forms | Auto-create Forms' the following Forms<br/>
should appear, in <b><a href="CppThis.htm">this</a></b> order:<br/>
<a href="CppOperatorMinus.htm">-</a> Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu<br/>
<a href="CppOperatorMinus.htm">-</a> FormSprites<br/>
All other Forms must be in the 'Available Forms' collumn<br/>
<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimStagecraftMain.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimStagecraftMain.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>MainH<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>MainH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumDisplayMode.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "UnitConnector<a href="CppState.htm">State</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "UnitCable.h"<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> TFormSoundTable;<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> Connector;<br/>
<b><a href="CppStruct.htm">struct</a></b> ConnectorControl;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBuffer;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBackground;<br/>
&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rMain;<br/>
&nbsp;&nbsp;TPanel *PanelBottom;<br/>
&nbsp;&nbsp;TSpeedButton *ButtonView;<br/>
&nbsp;&nbsp;TSpeedButton *ButtonUse;<br/>
&nbsp;&nbsp;TSpeedButton *ButtonConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageQuit;<br/>
&nbsp;&nbsp;TCheckBox *CheckBoxAutoMove;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rMain<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall OnButtonClick(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageQuitMouseDown(TObject *Sender, TMouseButton Button,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormMouseDown(TObject *Sender, TMouseButton Button,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormMouseMove(TObject *Sender, TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormMouseUp(TObject *Sender, TMouseButton Button,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Variables<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; &gt; mMachines;<br/>
&nbsp;&nbsp;ConnectorControl * mConnector1;<br/>
&nbsp;&nbsp;ConnectorControl * mConnector2;<br/>
&nbsp;&nbsp;EnumDisplayMode mDisplayMode;<br/>
&nbsp;&nbsp;TFormMachine * mDragMachine;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mDragX;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mDragY;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppMemberFunction.htm">Member function</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>Background();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TickBackground();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDisplayModes(<b><a href="CppConst.htm">const</a></b> EnumDisplayMode mode);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffers();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AutoMove();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MoveAway(TRect&amp; r1, TRect&amp; r2);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> GetDrawingSurfaceHeight() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> GetDrawingSurfaceWidth() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> OnFormMachine(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TFormMachine * <b><a href="CppConst.htm">const</a></b> form) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TileMachines();<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main(T<a href="CppComponent.htm">Component</a>* Owner, <b><a href="CppConst.htm">const</a></b> String selectedLevel);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; &gt;::<a href="CppIterator.htm">iterator</a> Machine<a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMachine&gt; &gt;::const_iterator ConstMachine<a href="CppIterator.htm">Iterator</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawScreen();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnConnectorClick(ConnectorControl * <b><a href="CppConst.htm">const</a></b> connector);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnControllerClick();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> InRect(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> TRect&amp; r);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main *Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimStagecraftMain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimStagecraftMain.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitCreateMachines.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main *Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>The <a href="CppConstructor.htm">constructor</a> a TForm-derived <b><a href="CppClass.htm">class</a></b> cannot take a T<a href="CppComponent.htm">Component</a>* and<br/>
<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b>, because <b><a href="CppThis.htm">this</a></b> will result in a Stack Overflow. Instead of passing an<br/>
<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b>, a String is passed.<br/>
__fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String selectedLevel)<br/>
&nbsp;&nbsp;: TForm(Owner),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMachines(CreateMachines(<b><a href="CppThis.htm">this</a></b>,<a href="CppStrToInt.htm">StrToInt</a>(selectedLevel))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector1(0), mConnector2(0), <a href="CppComment.htm">//</a>Human, 1-based counting :-)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDragMachine(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDragX(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDragY(0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the Tag of the three TSpeedButtons<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>These are used in the OnButtonClick <a href="CppMemberFunction.htm">member function</a><br/>
&nbsp;&nbsp;ButtonView-&gt;Tag&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;ButtonConnect-&gt;Tag <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;ButtonUse-&gt;Tag&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 3;<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
<br/>
&nbsp;&nbsp;SetDisplayModes(modeView);<br/>
<br/>
&nbsp;&nbsp;UpdateBuffers();<br/>
<br/>
&nbsp;&nbsp;DrawScreen();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::GetDrawingSurfaceHeight() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Need to remove <b><a href="CppConst.htm">const</a></b> of TFormStagecraftMain,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>because the VCL is not <b><a href="CppConst.htm">const</a></b>-correct. Grumble, grumble...<br/>
&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> form <a href="CppOperatorAssign.htm">=</a> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> form-&gt;ClientHeight <a href="CppOperatorMinus.htm">-</a> form-&gt;PanelBottom-&gt;Height;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::GetDrawingSurfaceWidth() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Need to remove <b><a href="CppConst.htm">const</a></b> of TFormStagecraftMain,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>because the VCL is not <b><a href="CppConst.htm">const</a></b>-correct. Grumble, grumble...<br/>
&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> form <a href="CppOperatorAssign.htm">=</a> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> form-&gt;ClientWidth;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::DrawScreen()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw background on buffer (or clear buffer otherwise)<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageBackground-&gt;Picture-&gt;Graphic);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw all Machines<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ConstMachine<a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> mMachines.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (ConstMachine<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> mMachines.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i<a href="CppOperatorNotEqual.htm">!=</a>j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (*i)-&gt;Left;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (*i)-&gt;Top;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(x,y,(*i)-&gt;ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw wires on buffer<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>??<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw buffer to screen<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::SetDisplayModes(<b><a href="CppConst.htm">const</a></b> EnumDisplayMode mode)<br/>
{<br/>
&nbsp;&nbsp;mDisplayMode <a href="CppOperatorAssign.htm">=</a> mode;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the DisplayMode of all TFormMachines<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine<a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> mMachines.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (Machine<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> mMachines.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*i)-&gt;SetDisplayMode(mode);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;UpdateBuffers(); <a href="CppComment.htm">//</a>Needed <b><a href="CppFor.htm">for</a></b> non-active machines (e.g. Par64 and WallSocket220)<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::UpdateBuffers()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the DisplayMode of all TFormMachines<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine<a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> mMachines.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (Machine<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> mMachines.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*i)-&gt;UpdateBuffer();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::<a href="CppPaint.htm">Paint</a>Background()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image <a href="CppOperatorAssign.htm">=</a> ImageBackground;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> myLine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> yD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Range z: <a href="CppOperatorMinus.htm">-</a>3 , <a href="CppOperatorPlus.htm">+</a>3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> zD<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdCos.htm">std::cos</a>(xD <a href="CppOperatorDivide.htm">/</a> 30.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdSin.htm">std::sin</a>(yD <a href="CppOperatorDivide.htm">/</a> 45.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppStdSin.htm">std::sin</a>( (xD <a href="CppOperatorPlus.htm">+</a> yD) <a href="CppOperatorDivide.htm">/</a> 60.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> grey <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( (zD <a href="CppOperatorPlus.htm">+</a> 3.0) * (256.0 <a href="CppOperatorDivide.htm">/</a> 6.0) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(grey <a href="CppOperatorGreaterEqual.htm">&gt;=</a>&nbsp;&nbsp; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(grey &lt;&nbsp;&nbsp;256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+2] <a href="CppOperatorAssign.htm">=</a> grey; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+1] <a href="CppOperatorAssign.htm">=</a> grey; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+0] <a href="CppOperatorAssign.htm">=</a> grey; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------}<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::TickBackground()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image <a href="CppOperatorAssign.htm">=</a> ImageBackground;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> myLine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>myLine[x*3+2]; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>myLine[x*3+1]; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>myLine[x*3+0]; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::<a href="CppTime.htm">Time</a>rMain<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TickBackground();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CheckBoxAutoMove-&gt;Checked <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) AutoMove();<br/>
<br/>
&nbsp;&nbsp;DrawScreen();<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::OnButtonClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only SpeedButtons are allowed to call <b><a href="CppThis.htm">this</a></b> <a href="CppMemberFunction.htm">member function</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>button is not <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>because the VCL is not <b><a href="CppConst.htm">const</a></b>-correct. Grumble, grumble...<br/>
&nbsp;&nbsp;TSpeedButton * <b><a href="CppConst.htm">const</a></b> button <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;TSpeedButton*&gt;(Sender);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(button<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (button-&gt;Tag)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppThis.htm">this</a></b>-&gt;SetDisplayModes(modeView&nbsp;&nbsp; ); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppThis.htm">this</a></b>-&gt;SetDisplayModes(modeConnect);<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <b><a href="CppThis.htm">this</a></b>-&gt;SetDisplayModes(modeUse&nbsp;&nbsp;&nbsp;&nbsp;); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(<a href="CppIntToStr.htm">IntToStr</a>(button-&gt;Tag).c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here: Unknown TSpeedButton::Tag");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawScreen();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::FormKeyDown(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WORD &amp;Key, TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (Key)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'A': <b><a href="CppCase.htm">case</a></b> 'a':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckBoxAutoMove-&gt;Checked <a href="CppOperatorAssign.htm">=</a> !CheckBoxAutoMove-&gt;Checked; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'V': <b><a href="CppCase.htm">case</a></b> 'v': <b><a href="CppCase.htm">case</a></b> '1': <b><a href="CppCase.htm">case</a></b> VK_F1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ButtonView-&gt;Down <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnButtonClick(ButtonView);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'C': <b><a href="CppCase.htm">case</a></b> 'c': <b><a href="CppCase.htm">case</a></b> '2': <b><a href="CppCase.htm">case</a></b> VK_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ButtonConnect-&gt;Down <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnButtonClick(ButtonConnect);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'U': <b><a href="CppCase.htm">case</a></b> 'u': <b><a href="CppCase.htm">case</a></b> '3': <b><a href="CppCase.htm">case</a></b> VK_F3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ButtonUse-&gt;Down <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnButtonClick(ButtonUse);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'Q': <a href="CppComment.htm">/*</a><b><a href="CppCase.htm">case</a></b> 'q':<a href="CppComment.htm">*/</a> <b><a href="CppCase.htm">case</a></b> '0': <b><a href="CppCase.htm">case</a></b> VK_F10:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Children forms will call <b><a href="CppThis.htm">this</a></b> <a href="CppMemberFunction.htm">member function</a> <b><a href="CppIf.htm">if</a></b> a connector is clicked.<br/>
<a href="CppComment.htm">//</a>This <a href="CppMemberFunction.htm">member function</a> <b><a href="CppReturn.htm">return</a></b> <b><a href="CppIf.htm">if</a></b> the connector is selected or not<br/>
<a href="CppComment.htm">//</a>The child forms know <b><a href="CppIf.htm">if</a></b> the connector is connected or not<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::OnConnectorClick(<br/>
&nbsp;&nbsp;ConnectorControl * <b><a href="CppConst.htm">const</a></b> connector)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(connector <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mConnector1 <a href="CppOperatorEqual.htm">==</a> connector)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Unselect<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector1-&gt;Unselect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector1<a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (mConnector2 <a href="CppOperatorEqual.htm">==</a> connector)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Disconnect<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector2-&gt;Unselect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector2<a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( mConnector1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mConnector2 <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mConnector2 <a href="CppOperatorNotEqual.htm">!=</a> connector); <a href="CppComment.htm">//</a>Assume no self-connection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector1 <a href="CppOperatorAssign.htm">=</a> connector;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector1-&gt;Select();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( mConnector1-&gt;IsConnected() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mConnector2-&gt;IsConnected() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A connection!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> (Note: <b><a href="CppIf.htm">if</a></b> connection is invalid, no actual connection takes place)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector1-&gt;Connect(mConnector2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector2-&gt;Connect(mConnector1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector1-&gt;Unselect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector2-&gt;Unselect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector1<a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector2<a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( mConnector1-&gt;IsConnectedTo(mConnector2) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mConnector2-&gt;IsConnectedTo(mConnector2) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Unconnection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector1-&gt;Disconnect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector2-&gt;Disconnect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector1-&gt;Unselect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector2-&gt;Unselect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector1<a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector2<a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use selected two different things<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Leave both selected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( mConnector1 <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mConnector2 <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mConnector2 <a href="CppOperatorNotEqual.htm">!=</a> connector); <a href="CppComment.htm">//</a>Assume no self-connection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector2 <a href="CppOperatorAssign.htm">=</a> connector;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector2-&gt;Select();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( mConnector1-&gt;IsConnected() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mConnector2-&gt;IsConnected() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( mConnector1-&gt;CanConnect(mConnector2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> mConnector2-&gt;CanConnect(mConnector1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "If A fits (not) in B, B fits (not) into A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mConnector1-&gt;CanConnect(mConnector2)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A connection!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector1-&gt;Connect(mConnector2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mConnector1-&gt;IsConnected()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mConnector2-&gt;IsConnected()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector2-&gt;Connect(mConnector1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mConnector1-&gt;IsConnectedTo(mConnector2)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mConnector2-&gt;IsConnectedTo(mConnector1)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( mConnector1-&gt;IsConnectedTo(mConnector2) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mConnector2-&gt;IsConnectedTo(mConnector1) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Unconnection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector1-&gt;Disconnect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConnector2-&gt;Disconnect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mConnector1-&gt;IsConnected()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mConnector2-&gt;IsConnected()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use selected two different things<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Leave both selected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector1-&gt;Unselect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector2-&gt;Unselect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector1 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector2 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mConnector1 <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mConnector2 <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector1 <a href="CppOperatorAssign.htm">=</a> connector;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnector1-&gt;Select();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update the buffers to show the <b><a href="CppNew.htm">new</a></b> state<br/>
&nbsp;&nbsp;UpdateBuffers();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::OnControllerClick()<br/>
{<br/>
&nbsp;&nbsp;UpdateBuffers(); <a href="CppComment.htm">//</a>Refreshes all TFormMachines<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::ImageQuitMouseDown(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMouseButton Button, TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y)<br/>
{<br/>
&nbsp;&nbsp;Close();&nbsp;&nbsp;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::OnFormMachine(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TFormMachine * <b><a href="CppConst.htm">const</a></b> formReal) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Const_cast because the VCL is not <b><a href="CppConst.htm">const</a></b>-correct. Grumble, grumble...<br/>
&nbsp;&nbsp;TFormMachine * <b><a href="CppConst.htm">const</a></b> form <a href="CppOperatorAssign.htm">=</a> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;TFormMachine*&gt;(formReal);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> form-&gt;Left<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x&nbsp;&nbsp;&lt; form-&gt;Left <a href="CppOperatorPlus.htm">+</a> form-&gt;ClientWidth<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> form-&gt;Top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y&nbsp;&nbsp;&lt; form-&gt;Top <a href="CppOperatorPlus.htm">+</a> form-&gt;ClientHeight);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::FormMouseDown(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMouseButton Button, TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nFormMachines <a href="CppOperatorAssign.htm">=</a> mMachines.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=nFormMachines-1; i<a href="CppOperatorNotEqual.htm">!=</a>-1; <a href="CppOperatorDecrement.htm">--</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnFormMachine(X,Y,mMachines[i].get())<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cursor is on the top window<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> formX <a href="CppOperatorAssign.htm">=</a> X <a href="CppOperatorMinus.htm">-</a> mMachines[i]-&gt;Left;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> formY <a href="CppOperatorAssign.htm">=</a> Y <a href="CppOperatorMinus.htm">-</a> mMachines[i]-&gt;Top;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> borderSize <a href="CppOperatorAssign.htm">=</a> TFormMachine::mBorderSize;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dragging?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( formX &lt; borderSize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> formX &gt; mMachines[i]-&gt;ClientWidth <a href="CppOperatorMinus.htm">-</a> borderSize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> formY &lt; borderSize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> formY &gt; mMachines[i]-&gt;ClientHeight <a href="CppOperatorMinus.htm">-</a> borderSize)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start dragging<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDragMachine <a href="CppOperatorAssign.htm">=</a> mMachines[i].get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDragX <a href="CppOperatorAssign.htm">=</a> X;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDragY <a href="CppOperatorAssign.htm">=</a> Y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make dragged machine appear on top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>by swapping it to the end of the <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>(no lust to use <a href="CppStdVector.htm">std::vector</a>::remove and so...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> i; j <a href="CppOperatorNotEqual.htm">!=</a> nFormMachines <a href="CppOperatorMinus.htm">-</a> 1; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j <a href="CppOperatorPlus.htm">+</a> 1 &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mMachines.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(mMachines[j],mMachines[j+1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> crDrag;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMachines[i]-&gt;OnMouseDown(formX,formY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::FormMouseMove(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mDragMachine <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dX <a href="CppOperatorAssign.htm">=</a> X <a href="CppOperatorMinus.htm">-</a> mDragX;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dY <a href="CppOperatorAssign.htm">=</a> Y <a href="CppOperatorMinus.htm">-</a> mDragY;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDragMachine-&gt;Left <a href="CppOperatorPlusAssign.htm">+=</a> dX;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDragMachine-&gt;Top&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a> dY;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDragX <a href="CppOperatorAssign.htm">=</a> X;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDragY <a href="CppOperatorAssign.htm">=</a> Y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> crDrag;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Can drag?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nFormMachines <a href="CppOperatorAssign.htm">=</a> mMachines.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=nFormMachines-1; i<a href="CppOperatorNotEqual.htm">!=</a>-1; <a href="CppOperatorDecrement.htm">--</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnFormMachine(X,Y,mMachines[i].get())<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>We are on the top windows<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> formX <a href="CppOperatorAssign.htm">=</a> X <a href="CppOperatorMinus.htm">-</a> mMachines[i]-&gt;Left;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> formY <a href="CppOperatorAssign.htm">=</a> Y <a href="CppOperatorMinus.htm">-</a> mMachines[i]-&gt;Top;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> borderSize <a href="CppOperatorAssign.htm">=</a> TFormMachine::mBorderSize;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dragging?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( formX &lt; borderSize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> formX &gt; mMachines[i]-&gt;ClientWidth <a href="CppOperatorMinus.htm">-</a> borderSize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> formY &lt; borderSize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> formY &gt; mMachines[i]-&gt;ClientHeight <a href="CppOperatorMinus.htm">-</a> borderSize)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> crDrag;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> crArrow;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> crArrow;<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::FormMouseUp(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMouseButton Button, TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y)<br/>
{<br/>
&nbsp;&nbsp;mDragMachine <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> crArrow;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetDrawingSurfaceWidth();<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetDrawingSurfaceHeight();<br/>
&nbsp;&nbsp;ImageBackground-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetDrawingSurfaceWidth();<br/>
&nbsp;&nbsp;ImageBackground-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetDrawingSurfaceHeight();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize SpeedButtons<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> spacing <a href="CppOperatorAssign.htm">=</a> 4; <a href="CppComment.htm">//</a>The number of pixels from button to edge of TPanel<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> buttonWidth<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (PanelBottom-&gt;ClientWidth <a href="CppOperatorDivide.htm">/</a> 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> (4 * spacing)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> (ImageQuit-&gt;Width <a href="CppOperatorDivide.htm">/</a> 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> (CheckBoxAutoMove-&gt;Width <a href="CppOperatorDivide.htm">/</a> 3);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> buttonHeight <a href="CppOperatorAssign.htm">=</a> PanelBottom-&gt;ClientHeight&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> ( 2 * spacing);<br/>
&nbsp;&nbsp;CheckBoxAutoMove-&gt;Left <a href="CppOperatorAssign.htm">=</a> (1 * spacing);<br/>
&nbsp;&nbsp;ButtonView-&gt;Left&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> (2 * spacing) <a href="CppOperatorPlus.htm">+</a> (0 * buttonWidth);<br/>
&nbsp;&nbsp;ButtonConnect-&gt;Left&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (3 * spacing) <a href="CppOperatorPlus.htm">+</a> (1 * buttonWidth);<br/>
&nbsp;&nbsp;ButtonUse-&gt;Left&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (4 * spacing) <a href="CppOperatorPlus.htm">+</a> (2 * buttonWidth);<br/>
&nbsp;&nbsp;ButtonView-&gt;Left&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlusAssign.htm">+=</a> (CheckBoxAutoMove-&gt;Left <a href="CppOperatorPlus.htm">+</a> CheckBoxAutoMove-&gt;Width);<br/>
&nbsp;&nbsp;ButtonConnect-&gt;Left&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a> (CheckBoxAutoMove-&gt;Left <a href="CppOperatorPlus.htm">+</a> CheckBoxAutoMove-&gt;Width);<br/>
&nbsp;&nbsp;ButtonUse-&gt;Left&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a> (CheckBoxAutoMove-&gt;Left <a href="CppOperatorPlus.htm">+</a> CheckBoxAutoMove-&gt;Width);<br/>
&nbsp;&nbsp;CheckBoxAutoMove-&gt;Top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (PanelBottom-&gt;ClientHeight <a href="CppOperatorDivide.htm">/</a> 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> (CheckBoxAutoMove-&gt;Height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;ButtonView-&gt;Top&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> spacing;<br/>
&nbsp;&nbsp;ButtonUse-&gt;Top&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> spacing;<br/>
&nbsp;&nbsp;ButtonConnect-&gt;Top&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> spacing;<br/>
&nbsp;&nbsp;ButtonView-&gt;Width&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> buttonWidth;<br/>
&nbsp;&nbsp;ButtonUse-&gt;Width&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> buttonWidth;<br/>
&nbsp;&nbsp;ButtonConnect-&gt;Width <a href="CppOperatorAssign.htm">=</a> buttonWidth;<br/>
&nbsp;&nbsp;ButtonView-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> buttonHeight;<br/>
&nbsp;&nbsp;ButtonUse-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> buttonHeight;<br/>
&nbsp;&nbsp;ButtonConnect-&gt;Height <a href="CppOperatorAssign.htm">=</a> buttonHeight;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Repaint the screen at its <b><a href="CppNew.htm">new</a></b> size<br/>
&nbsp;&nbsp;<a href="CppPaint.htm">Paint</a>Background();<br/>
<br/>
&nbsp;&nbsp;TileMachines();<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::TileMachines()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mMachines.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nMachines <a href="CppOperatorAssign.htm">=</a> mMachines.size();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nCols <a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSqrt.htm">std::sqrt</a>( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nMachines <a href="CppOperatorMinus.htm">-</a> 1) ) );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRows <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStdSqrt.htm">std::sqrt</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nMachines)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdSqrt.htm">std::sqrt</a>( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nMachines) ) ) );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dx <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetDrawingSurfaceWidth()&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> nCols;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetDrawingSurfaceHeight() <a href="CppOperatorDivide.htm">/</a> nRows;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> count <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine<a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> mMachines.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (Machine<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> mMachines.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i<a href="CppOperatorNotEqual.htm">!=</a>j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (count <a href="CppOperatorModulus.htm">%</a> nCols) * dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (count <a href="CppOperatorDivide.htm">/</a> nCols) * dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x <a href="CppOperatorLessEqual.htm">&lt;=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetDrawingSurfaceWidth());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y <a href="CppOperatorLessEqual.htm">&lt;=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetDrawingSurfaceHeight());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRect rect;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rect.Left <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rect.Top&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rect.Right&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> x <a href="CppOperatorPlus.htm">+</a> dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rect.Bottom <a href="CppOperatorAssign.htm">=</a> y&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( (*i).get(), rect);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>count;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::AutoMove()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nForms <a href="CppOperatorAssign.htm">=</a> mMachines.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nForms; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>i; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRect r1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r1.Left&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> mMachines[i]-&gt;Left;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r1.Top&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mMachines[i]-&gt;Top;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r1.Right&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> r1.Left <a href="CppOperatorPlus.htm">+</a> mMachines[i]-&gt;ClientWidth;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r1.Bottom <a href="CppOperatorAssign.htm">=</a> r1.Top&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> mMachines[i]-&gt;ClientHeight;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRect r2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r2.Left&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> mMachines[j]-&gt;Left;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r2.Top&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mMachines[j]-&gt;Top;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r2.Right&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> r2.Left <a href="CppOperatorPlus.htm">+</a> mMachines[j]-&gt;ClientWidth;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r2.Bottom <a href="CppOperatorAssign.htm">=</a> r2.Top&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> mMachines[j]-&gt;ClientHeight;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MoveAway(r1,r2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMachines[i]-&gt;Left <a href="CppOperatorAssign.htm">=</a> r1.Left;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMachines[i]-&gt;Top&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> r1.Top;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMachines[j]-&gt;Left <a href="CppOperatorAssign.htm">=</a> r2.Left;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMachines[j]-&gt;Top&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> r2.Top;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main::MoveAway(TRect&amp; r1, TRect&amp; r2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dx1 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dy1 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dx2 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dy2 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No collision<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r1.Left&nbsp;&nbsp; &lt; 0) <a href="CppOperatorIncrement.htm">++</a>dx1;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r1.Top&nbsp;&nbsp;&nbsp;&nbsp;&lt; 0) <a href="CppOperatorIncrement.htm">++</a>dy1;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r1.Right&nbsp;&nbsp;&gt; <b><a href="CppThis.htm">this</a></b>-&gt;GetDrawingSurfaceWidth() ) <a href="CppOperatorDecrement.htm">--</a>dx1;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r1.Bottom &gt; <b><a href="CppThis.htm">this</a></b>-&gt;GetDrawingSurfaceHeight()) <a href="CppOperatorDecrement.htm">--</a>dy1;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r2.Left&nbsp;&nbsp; &lt; 0) <a href="CppOperatorIncrement.htm">++</a>dx2;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r2.Top&nbsp;&nbsp;&nbsp;&nbsp;&lt; 0) <a href="CppOperatorIncrement.htm">++</a>dy2;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r2.Right&nbsp;&nbsp;&gt; <b><a href="CppThis.htm">this</a></b>-&gt;GetDrawingSurfaceWidth() ) <a href="CppOperatorDecrement.htm">--</a>dx2;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r2.Bottom &gt; <b><a href="CppThis.htm">this</a></b>-&gt;GetDrawingSurfaceHeight()) <a href="CppOperatorDecrement.htm">--</a>dy2;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!( r1.Right&nbsp;&nbsp;&lt; r2.Left <a href="CppOperatorLogicalOr.htm">||</a> r1.Left &gt; r2.Right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> r1.Bottom &lt; r2.Top&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> r1.Top&nbsp;&nbsp;&gt; r2.Bottom))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(r1.Left ,r1.Top&nbsp;&nbsp; ,r2)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorIncrement.htm">++</a>dx1; <a href="CppOperatorIncrement.htm">++</a>dy1; <a href="CppOperatorDecrement.htm">--</a>dx2; <a href="CppOperatorDecrement.htm">--</a>dy2;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(r1.Right,r1.Top&nbsp;&nbsp; ,r2)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorDecrement.htm">--</a>dx1; <a href="CppOperatorIncrement.htm">++</a>dy1; <a href="CppOperatorIncrement.htm">++</a>dx2; <a href="CppOperatorDecrement.htm">--</a>dy2;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(r1.Left ,r1.Bottom,r2)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorIncrement.htm">++</a>dx1; <a href="CppOperatorDecrement.htm">--</a>dy1; <a href="CppOperatorDecrement.htm">--</a>dx2; <a href="CppOperatorIncrement.htm">++</a>dy2;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(r1.Right,r1.Bottom,r2)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorDecrement.htm">--</a>dx1; <a href="CppOperatorDecrement.htm">--</a>dy1; <a href="CppOperatorIncrement.htm">++</a>dx2; <a href="CppOperatorIncrement.htm">++</a>dy2;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If all 4 edges are collision<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dx1 <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dy1 <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>dx1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>dy1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>dx2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>dy2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;r1.Left&nbsp;&nbsp; <a href="CppOperatorPlusAssign.htm">+=</a> dx1;<br/>
&nbsp;&nbsp;r1.Right&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a> dx1;<br/>
&nbsp;&nbsp;r1.Top&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a> dy1;<br/>
&nbsp;&nbsp;r1.Bottom <a href="CppOperatorPlusAssign.htm">+=</a> dy1;<br/>
&nbsp;&nbsp;r2.Left&nbsp;&nbsp; <a href="CppOperatorPlusAssign.htm">+=</a> dx2;<br/>
&nbsp;&nbsp;r2.Right&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a> dx2;<br/>
&nbsp;&nbsp;r2.Top&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a> dy2;<br/>
&nbsp;&nbsp;r2.Bottom <a href="CppOperatorPlusAssign.htm">+=</a> dy2;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> InRect(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> TRect&amp; r)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> r.Left <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x &lt; r.Right <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> r.Top <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y &lt; r.Bottom);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimStagecraftMenu.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimStagecraftMenu.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>MenuH<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>MenuH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTitle;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppAbout.htm">About</a>;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageQuit;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageStart;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image5;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image6;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBackground;<br/>
&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rBackground;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBuffer;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rBackground<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormMouseDown(TObject *Sender, TMouseButton Button,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>Background();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TickBackground();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawScreen();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; mImages;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; GetImages() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mBorderSize;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu *Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimStagecraftMenu.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimStagecraftMenu.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu *Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu::TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner), mImages(<b><a href="CppThis.htm">this</a></b>-&gt;GetImages()), mBorderSize(8)<br/>
{<br/>
&nbsp;&nbsp;OnResize(0);<br/>
&nbsp;&nbsp;DrawScreen();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu::DrawScreen()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw background<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageBackground-&gt;Picture-&gt;Graphic);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw images<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> mImages.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> mImages.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw( (*i)-&gt;Left, (*i)-&gt;Top, (*i)-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put buffer on screen<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(mBorderSize,mBorderSize,ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu::<a href="CppPaint.htm">Paint</a>Background()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image <a href="CppOperatorAssign.htm">=</a> ImageBackground;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> myLine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> yD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Range z: <a href="CppOperatorMinus.htm">-</a>3 , <a href="CppOperatorPlus.htm">+</a>3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> zD<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdCos.htm">std::cos</a>(xD <a href="CppOperatorDivide.htm">/</a> 30.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdSin.htm">std::sin</a>(yD <a href="CppOperatorDivide.htm">/</a> 45.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppStdSin.htm">std::sin</a>( (xD <a href="CppOperatorPlus.htm">+</a> yD) <a href="CppOperatorDivide.htm">/</a> 60.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> grey <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( (zD <a href="CppOperatorPlus.htm">+</a> 3.0) * (256.0 <a href="CppOperatorDivide.htm">/</a> 6.0) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(grey <a href="CppOperatorGreaterEqual.htm">&gt;=</a>&nbsp;&nbsp; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(grey &lt;&nbsp;&nbsp;256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+2] <a href="CppOperatorAssign.htm">=</a> grey; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+1] <a href="CppOperatorAssign.htm">=</a> grey; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+0] <a href="CppOperatorAssign.htm">=</a> grey; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------}<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu::TickBackground()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image <a href="CppOperatorAssign.htm">=</a> ImageBackground;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> myLine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>myLine[x*3+2]; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>myLine[x*3+1]; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>myLine[x*3+0]; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ImageBackground-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ClientWidth <a href="CppOperatorMinus.htm">-</a> (mBorderSize * 2);<br/>
&nbsp;&nbsp;ImageBackground-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ClientHeight <a href="CppOperatorMinus.htm">-</a> (mBorderSize * 2);<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ClientWidth <a href="CppOperatorMinus.htm">-</a> (mBorderSize * 2);<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ClientHeight <a href="CppOperatorMinus.htm">-</a> (mBorderSize * 2);<br/>
&nbsp;&nbsp;<a href="CppPaint.htm">Paint</a>Background();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu::<a href="CppTime.htm">Time</a>rBackground<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;TickBackground();<br/>
&nbsp;&nbsp;DrawScreen();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu::GetImages() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; v;<br/>
&nbsp;&nbsp;v.push_back(ImageStart);<br/>
&nbsp;&nbsp;v.push_back(Image<a href="CppAbout.htm">About</a>);<br/>
&nbsp;&nbsp;v.push_back(ImageQuit);<br/>
&nbsp;&nbsp;v.push_back(ImageTitle);<br/>
&nbsp;&nbsp;v.push_back(Image1);<br/>
&nbsp;&nbsp;v.push_back(Image2);<br/>
&nbsp;&nbsp;v.push_back(Image3);<br/>
&nbsp;&nbsp;v.push_back(Image4);<br/>
&nbsp;&nbsp;v.push_back(Image5);<br/>
&nbsp;&nbsp;v.push_back(Image6);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu::FormMouseDown(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMouseButton Button, TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(X,Y,ImageStart) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> OnImage(X,Y,Image1&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> OnImage(X,Y,Image4&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start game<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rBackground-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select&gt; form(<b><a href="CppNew.htm">new</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select(0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;form-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rBackground-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(X,Y,Image<a href="CppAbout.htm">About</a>) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> OnImage(X,Y,Image2&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> OnImage(X,Y,Image5&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAbout.htm">About</a> screen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rBackground-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>&gt; form(<b><a href="CppNew.htm">new</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a><a href="CppAbout.htm">About</a>(0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;form-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rBackground-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(X,Y,ImageQuit) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> OnImage(X,Y,Image3&nbsp;&nbsp; ) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> OnImage(X,Y,Image6&nbsp;&nbsp; ) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Close();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Menu::FormKeyDown(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WORD &amp;Key, TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (Key)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'S': <b><a href="CppCase.htm">case</a></b> 's': <b><a href="CppCase.htm">case</a></b> '1': <b><a href="CppCase.htm">case</a></b> VK_F1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormMouseDown(0,TMouseButton(),TShift<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageStart-&gt;Left, ImageStart-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'A': <b><a href="CppCase.htm">case</a></b> 'a': <b><a href="CppCase.htm">case</a></b> '2': <b><a href="CppCase.htm">case</a></b> VK_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormMouseDown(0,TMouseButton(),TShift<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Image<a href="CppAbout.htm">About</a>-&gt;Left, Image<a href="CppAbout.htm">About</a>-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'Q':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '3': <b><a href="CppCase.htm">case</a></b> VK_F3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormMouseDown(0,TMouseButton(),TShift<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageQuit-&gt;Left, ImageQuit-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimStagecraftOtherLicences.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimStagecraftOtherLicences.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicencesH<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicencesH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences *Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimStagecraftOtherLicences.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimStagecraftOtherLicences.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences *Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences::TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>OtherLicences(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimStagecraftSelect.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimStagecraftSelect.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>SelectH<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>SelectH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSelectLevel;<br/>
&nbsp;&nbsp;TRichEdit *RichEdit;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image5;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image6;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image7;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image8;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image9;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image0;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageArrowLeft;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageArrowRight;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSelectRight;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSelectLeft;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageStart;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBuffer;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBackground;<br/>
&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rMain;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageQuit;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>3;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormMouseDown(TObject *Sender, TMouseButton Button,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rMain<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mLevel;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mBorderSize;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a> *&gt; mImages;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> OnImage(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImage(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> value) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawScreen();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>Background();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TickBackground();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateText();<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select *Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimStagecraftSelect.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimStagecraftSelect.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select *Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select::TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner), mBorderSize(8), mLevel(1)<br/>
{<br/>
&nbsp;&nbsp;mImages.push_back(ImageSelectLevel);<br/>
&nbsp;&nbsp;mImages.push_back(ImageArrowLeft);<br/>
&nbsp;&nbsp;mImages.push_back(ImageArrowRight);<br/>
&nbsp;&nbsp;mImages.push_back(ImageSelectLeft);<br/>
&nbsp;&nbsp;mImages.push_back(ImageSelectRight);<br/>
&nbsp;&nbsp;mImages.push_back(ImageStart);<br/>
&nbsp;&nbsp;mImages.push_back(ImageQuit);<br/>
&nbsp;&nbsp;mImages.push_back(Image<a href="CppLed.htm">Led</a>1);<br/>
&nbsp;&nbsp;mImages.push_back(Image<a href="CppLed.htm">Led</a>2);<br/>
&nbsp;&nbsp;mImages.push_back(Image<a href="CppLed.htm">Led</a>3);<br/>
&nbsp;&nbsp;mImages.push_back(Image<a href="CppLed.htm">Led</a>4);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
&nbsp;&nbsp;UpdateText();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select::DrawScreen()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw background on buffer<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageBackground-&gt;Picture-&gt;Graphic);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw all sprites on buffer<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt;::<a href="CppIterator.htm">iterator</a> <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> mImages.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> mImages.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i)-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i)-&gt;Top,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i)-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw buffer on screen<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(mBorderSize,mBorderSize,ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select::GetImage(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> value) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (value)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> Image0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> Image1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppReturn.htm">return</a></b> Image2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <b><a href="CppReturn.htm">return</a></b> Image3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: <b><a href="CppReturn.htm">return</a></b> Image4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: <b><a href="CppReturn.htm">return</a></b> Image5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 6: <b><a href="CppReturn.htm">return</a></b> Image6;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 7: <b><a href="CppReturn.htm">return</a></b> Image7;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 8: <b><a href="CppReturn.htm">return</a></b> Image8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 9: <b><a href="CppReturn.htm">return</a></b> Image9;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Unhandled value in TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select::GetImage");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select::OnImage(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ( x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> image-&gt;Left<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x &lt; image-&gt;Left <a href="CppOperatorPlus.htm">+</a> image-&gt;Width<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> image-&gt;Top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y &lt; image-&gt;Top <a href="CppOperatorPlus.htm">+</a> image-&gt;Height);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ImageBackground-&gt;Picture-&gt;Bitmap-&gt;Width<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ClientWidth&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> (mBorderSize * 2);<br/>
&nbsp;&nbsp;ImageBackground-&gt;Picture-&gt;Bitmap-&gt;Height<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> RichEdit-&gt;Top <a href="CppOperatorMinus.htm">-</a> (mBorderSize * 2);<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Width<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ClientWidth&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> (mBorderSize * 2);<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Height<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> RichEdit-&gt;Top <a href="CppOperatorMinus.htm">-</a> (mBorderSize * 2);<br/>
&nbsp;&nbsp;<a href="CppPaint.htm">Paint</a>Background();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select::FormMouseDown(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMouseButton Button, TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(X,Y,ImageStart)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn <a href="CppTime.htm">time</a>r off temporarily<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rMain-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main&gt; form(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main(0,<a href="CppIntToStr.htm">IntToStr</a>(mLevel)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;form-&gt;ShowModal();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>And turn it back on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rMain-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(X,Y,ImageArrowLeft)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mLevel &gt; 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>mLevel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageSelectLeft-&gt;Picture&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetImage(mLevel <a href="CppOperatorDivide.htm">/</a> 10)-&gt;Picture;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageSelectRight-&gt;Picture <a href="CppOperatorAssign.htm">=</a> GetImage(mLevel <a href="CppOperatorModulus.htm">%</a> 10)-&gt;Picture;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;UpdateText();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DrawScreen();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(X,Y,ImageArrowRight)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mLevel &lt; 99)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>mLevel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageSelectLeft-&gt;Picture&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetImage(mLevel <a href="CppOperatorDivide.htm">/</a> 10)-&gt;Picture;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageSelectRight-&gt;Picture <a href="CppOperatorAssign.htm">=</a> GetImage(mLevel <a href="CppOperatorModulus.htm">%</a> 10)-&gt;Picture;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;UpdateText();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DrawScreen();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(X,Y,ImageQuit)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Close();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select::UpdateText()<br/>
{<br/>
&nbsp;&nbsp;RichEdit-&gt;Clear();<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mLevel)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Level 1: Connect a lamp to a socket");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Equipment:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Fresnel");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Level 2: Connect a microphone to an active speaker");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Equipment:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Microphone, ShureSm58");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Active speaker, RCF322A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Level 3: Connect and use a simple sound table");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Equipment:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Microphone, ShureSm58");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Active speaker, RCF322A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Soundtable, SimpleSound1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> <a href="CppTriple.htm">Triple</a>t, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Level 4: Connect and use a simple light table");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Equipment:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Lighttable, SimpleShine");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Dimmerpack, Dimblock V3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> 5x fresnel");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, power current");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Level 5: Connect and use a more advanced sound table");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Equipment:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> 2x microphone, ShureSm58");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> 2x active speaker, RCF322A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Soundtable, SimpleSound2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> <a href="CppTriple.htm">Triple</a>t, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 6:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Level 6: Send sound <b><a href="CppUsing.htm">using</a></b> AUX");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Equipment:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Microphone, ShureSm58");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Active speaker, RCF322A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Soundtable, SimpleSound3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> <a href="CppTriple.htm">Triple</a>t, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 7:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Level 7: Serve three singers, send sound to PA and monitors");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Equipment:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> 3x microphone, ShureSm58");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> 4x active speaker, RCF322A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Soundtable, SimpleSound3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Octet, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 8:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Level 8: Connect a CD player to speakers");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> a transition piece");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Equipment:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Active speaker, RCF322A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> CD player");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Transition piece: jack male to 2x cinch female");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Octet, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 9:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Level 9: Connect a CD player to speakers");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> a sound table");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Equipment:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Active speaker, RCF322A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> CD player");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Soundtable, SimpleSound4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Octet, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 10:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Level 10: Record an MD from CD");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Equipment:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> CD player");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> MD player");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Transition piece: jack male to 2x cinch female");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Active speaker, RCF322A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Octet, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 11:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Level 11: Record an MD from CD and microphone");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Equipment:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Microphone, ShureSm58");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> MD player");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Transition piece: jack male to 2x cinch female");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Soundtable, SimpleSound4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Active speaker, RCF322A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Octet, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 12:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Level 12: Learn to use the crossfader");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Equipment:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Lighttable, SimpleShine2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Dimmerpack, Dimblock V3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> 5x fresnel");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, power current");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 13:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Level 13: Connect a microphone to a passive speaker");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Equipment:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Microphone, ShureSm58");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Passive speaker, RCF Event 3000");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Amplifier, EasyAmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppOperatorMinus.htm">-</a> Wall socket, 220 Volts");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select::<a href="CppPaint.htm">Paint</a>Background()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image <a href="CppOperatorAssign.htm">=</a> ImageBackground;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> myLine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> yD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Range z: <a href="CppOperatorMinus.htm">-</a>3 , <a href="CppOperatorPlus.htm">+</a>3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> zD<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdCos.htm">std::cos</a>(xD <a href="CppOperatorDivide.htm">/</a> 30.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdSin.htm">std::sin</a>(yD <a href="CppOperatorDivide.htm">/</a> 45.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppStdSin.htm">std::sin</a>( (xD <a href="CppOperatorPlus.htm">+</a> yD) <a href="CppOperatorDivide.htm">/</a> 60.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> grey <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( (zD <a href="CppOperatorPlus.htm">+</a> 3.0) * (256.0 <a href="CppOperatorDivide.htm">/</a> 6.0) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(grey <a href="CppOperatorGreaterEqual.htm">&gt;=</a>&nbsp;&nbsp; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(grey &lt;&nbsp;&nbsp;256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+2] <a href="CppOperatorAssign.htm">=</a> grey; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+1] <a href="CppOperatorAssign.htm">=</a> grey; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+0] <a href="CppOperatorAssign.htm">=</a> grey; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------}<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select::TickBackground()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image <a href="CppOperatorAssign.htm">=</a> ImageBackground;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> myLine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>myLine[x*3+2]; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>myLine[x*3+1]; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>myLine[x*3+0]; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------}<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select::<a href="CppTime.htm">Time</a>rMain<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;TickBackground();<br/>
&nbsp;&nbsp;DrawScreen();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Select::FormKeyDown(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WORD &amp;Key, TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (Key)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'S': <b><a href="CppCase.htm">case</a></b> 's': <b><a href="CppCase.htm">case</a></b> '1': <b><a href="CppCase.htm">case</a></b> VK_F1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormMouseDown(0,TMouseButton(),TShift<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageStart-&gt;Left, ImageStart-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '-': <b><a href="CppCase.htm">case</a></b> VK_LEFT:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormMouseDown(0,TMouseButton(),TShift<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageArrowLeft-&gt;Left, ImageArrowLeft-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '+': <b><a href="CppCase.htm">case</a></b> VK_RIGHT:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormMouseDown(0,TMouseButton(),TShift<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageArrowRight-&gt;Left, ImageArrowRight-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'Q': <b><a href="CppCase.htm">case</a></b> '2': <b><a href="CppCase.htm">case</a></b> VK_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FormMouseDown(0,TMouseButton(),TShift<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageQuit-&gt;Left, ImageQuit-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimStagecraftWhatsNew.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimStagecraftWhatsNew.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNewH<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNewH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew *Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimStagecraftWhatsNew.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimStagecraftWhatsNew.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew *Form<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew::TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>WhatsNew(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimpleShine1.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimpleShine1.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormSimpleShine1H<br/>
<a href="CppDefine.htm">#define</a> UnitFormSimpleShine1H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "UnitEnumMachineType.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> FaderControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> SimpleShine1;<br/>
<b><a href="CppStruct.htm">struct</a></b> DmxFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMaleControl;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormSimpleShine1 : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFaderMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDmxFemaleOut;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader5;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader6;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse5;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse6;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader7;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse7;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader8;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse8;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader9;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse9;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse10;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader10;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader11;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse11;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse12;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader12;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectDmxOut;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseSimpleShine1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>Power;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimpleShine1&gt; mSimpleShine1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl4;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl5;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl6;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl7;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl8;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl9;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl10;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl11;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl12;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControlMaster;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemaleControl&gt; mDmxFemaleOut;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt; mEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>ControlPower;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormSimpleShine1(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormSimpleShine1 *FormSimpleShine1;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimpleShine1.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimpleShine1.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitLightTable.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSimpleShine1.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormSimpleShine1 *FormSimpleShine1;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormSimpleShine1::TFormSimpleShine1(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;mSimpleShine1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimpleShine1&gt;(<b><a href="CppNew.htm">new</a></b> SimpleShine1))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mFaderControl1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mFaders[0],ImageFader1));<br/>
&nbsp;&nbsp;mFaderControl2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mFaders[1],ImageFader2));<br/>
&nbsp;&nbsp;mFaderControl3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mFaders[2],ImageFader3));<br/>
&nbsp;&nbsp;mFaderControl4 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mFaders[3],ImageFader4));<br/>
&nbsp;&nbsp;mFaderControl5 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mFaders[4],ImageFader5));<br/>
&nbsp;&nbsp;mFaderControl6 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mFaders[5],ImageFader6));<br/>
&nbsp;&nbsp;mFaderControl7 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mFaders[6],ImageFader7));<br/>
&nbsp;&nbsp;mFaderControl8 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mFaders[7],ImageFader8));<br/>
&nbsp;&nbsp;mFaderControl9 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mFaders[8],ImageFader9));<br/>
&nbsp;&nbsp;mFaderControl10 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mFaders[9],ImageFader10));<br/>
&nbsp;&nbsp;mFaderControl11 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mFaders[10],ImageFader11));<br/>
&nbsp;&nbsp;mFaderControl12 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mFaders[11],ImageFader12));<br/>
&nbsp;&nbsp;mFaderControlMaster <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mFaderMaster,ImageFaderMaster));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mDmxFemaleOut <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> DmxFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mDmxFemaleOut,ImageDmxFemaleOut));<br/>
&nbsp;&nbsp;mEuroMalePower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> EuroMaleControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine1-&gt;mEuroMalePower,ImageEuroMalePower));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>ControlPower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSimpleShine1-&gt;m<a href="CppLed.htm">Led</a>Power,Image<a href="CppLed.htm">Led</a>Power));<br/>
<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
&nbsp;&nbsp;OnResize(0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Manually set the faders<br/>
&nbsp;&nbsp;mFaderControl1-&gt;OnMouseDown(0,ImageFader1-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl2-&gt;OnMouseDown(0,ImageFader2-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl3-&gt;OnMouseDown(0,ImageFader3-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl4-&gt;OnMouseDown(0,ImageFader4-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl5-&gt;OnMouseDown(0,ImageFader5-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl6-&gt;OnMouseDown(0,ImageFader6-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl7-&gt;OnMouseDown(0,ImageFader7-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl8-&gt;OnMouseDown(0,ImageFader8-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl9-&gt;OnMouseDown(0,ImageFader9-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl10-&gt;OnMouseDown(0,ImageFader10-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl11-&gt;OnMouseDown(0,ImageFader11-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl12-&gt;OnMouseDown(0,ImageFader12-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(0,ImageFaderMaster-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleShine1::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>ControlPower-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start drawing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse12);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseSimpleShine1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controllers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader12);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFaderMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>Power);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectDmxOut);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connects<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageEuroMalePower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDmxFemaleOut);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleShine1::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl3-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl4-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader5))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl5-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader6))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl6-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader7))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl7-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader8))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl8-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader9))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl9-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader10))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl10-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader11))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl11-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader12))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl12-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFaderMaster))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageEuroMalePower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mEuroMalePower.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDmxFemaleOut))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mDmxFemaleOut.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleShine1::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,14,7));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][0],v[5][0]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader2-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][1],v[5][1]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader3-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][2],v[5][2]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader4-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][3],v[5][3]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader5-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][4],v[5][4]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader6-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][5],v[5][5]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader7-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][6],v[5][6]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader8-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][7],v[5][7]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader9-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][8],v[5][8]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader10-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][9],v[5][9]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader11-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][10],v[5][10]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader12-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][11],v[5][11]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][12],v[5][13]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader1-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader2-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader3-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader4-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader5-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader6-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader7-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader8-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader9-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader10-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader11-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader12-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse1,v[2][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse2,v[2][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse3,v[2][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse4,v[2][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse5,v[2][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse6,v[2][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse7,v[2][6]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse8,v[2][7]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse9,v[2][8]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse10,v[2][9]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse11,v[2][10]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse12,v[2][11]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseMaster,MergeRects(v[2][12],v[2][13]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseSimpleShine1,MergeRects(v[0][10],v[1][13]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader1,MergeRects(v[3][0],v[5][0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader2,MergeRects(v[3][1],v[5][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader3,MergeRects(v[3][2],v[5][2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader4,MergeRects(v[3][3],v[5][3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader5,MergeRects(v[3][4],v[5][4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader6,MergeRects(v[3][5],v[5][5]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader7,MergeRects(v[3][6],v[5][6]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader8,MergeRects(v[3][7],v[5][7]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader9,MergeRects(v[3][8],v[5][8]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader10,MergeRects(v[3][9],v[5][9]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader11,MergeRects(v[3][10],v[5][10]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader12,MergeRects(v[3][11],v[5][11]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFaderMaster,MergeRects(v[3][12],v[5][13]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>Power,MergeRects(v[0][5],v[1][6]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,2,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectPower ,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectDmxOut,v[0][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageEuroMalePower,v[1][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDmxFemaleOut ,v[1][1]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimpleShine2.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimpleShine2.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormSimpleShine2H<br/>
<a href="CppDefine.htm">#define</a> UnitFormSimpleShine2H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> SimpleShine2;<br/>
<b><a href="CppStruct.htm">struct</a></b> FaderControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> SimpleShine1;<br/>
<b><a href="CppStruct.htm">struct</a></b> DmxFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMaleControl;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormSimpleShine2 : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFaderMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDmxFemaleOut;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader5;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader6;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader7;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader8;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader9;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader10;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader11;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader12;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectDmxOut;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseSimpleShine2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader13;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader14;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader15;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader16;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader17;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader18;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader19;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader20;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader21;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader22;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader23;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader24;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse2_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse1_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse3_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse4_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse5_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse6_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse7_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse8_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse9_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse10_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse11_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse12_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse1_3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse2_3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse3_3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse4_3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse5_3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse6_3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse7_3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse8_3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse9_3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse10_3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse11_3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse12_3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse3_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse1_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse2_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse4_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse5_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse6_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse7_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse8_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse9_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse10_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse11_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse12_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCrossfaderB;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCrossfaderA;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseCrossfader;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>A;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>B;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimpleShine2&gt; mSimpleShine2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; mImageFaders;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; mLabels;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; GetImageFaders() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; GetLabels() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; &gt; mChannelFaders;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mCrossfaderA;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mCrossfaderB;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mMasterFader;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemaleControl&gt; mDmxFemaleOut;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt; mEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>A;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>B;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormSimpleShine2(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormSimpleShine2 *FormSimpleShine2;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimpleShine2.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimpleShine2.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitLightTable.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSimpleShine2.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> <a href="CppLink.htm">link</a> "UnitFormMachine"<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormSimpleShine2 *FormSimpleShine2;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormSimpleShine2::TFormSimpleShine2(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;mImageFaders(<b><a href="CppThis.htm">this</a></b>-&gt;GetImageFaders()),<br/>
&nbsp;&nbsp;mLabels(<b><a href="CppThis.htm">this</a></b>-&gt;GetLabels()),<br/>
&nbsp;&nbsp;mChannelFaders(24),<br/>
&nbsp;&nbsp;mSimpleShine2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimpleShine2&gt;(<b><a href="CppNew.htm">new</a></b> SimpleShine2))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>24; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mChannelFaders[i] <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine2-&gt;mFaders[i],mImageFaders[i]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;mMasterFader <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine2-&gt;mFaderMaster,ImageFaderMaster));<br/>
&nbsp;&nbsp;mCrossfaderA <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine2-&gt;mCrossfaderA,ImageCrossfaderA));<br/>
&nbsp;&nbsp;mCrossfaderB <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine2-&gt;mCrossfaderB,ImageCrossfaderB));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mDmxFemaleOut <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> DmxFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine2-&gt;mDmxFemaleOut,ImageDmxFemaleOut));<br/>
&nbsp;&nbsp;mEuroMalePower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> EuroMaleControl(<b><a href="CppThis.htm">this</a></b>,mSimpleShine2-&gt;mEuroMalePower,ImageEuroMalePower));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSimpleShine2-&gt;m<a href="CppLed.htm">Led</a>Power,Image<a href="CppLed.htm">Led</a>Power));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>A <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSimpleShine2-&gt;m<a href="CppLed.htm">Led</a>A,Image<a href="CppLed.htm">Led</a>A));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>B <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSimpleShine2-&gt;m<a href="CppLed.htm">Led</a>B,Image<a href="CppLed.htm">Led</a>B));<br/>
<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
&nbsp;&nbsp;OnResize(0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Manually set the faders<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nFaders <a href="CppOperatorAssign.htm">=</a> mChannelFaders.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nFaders; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mChannelFaders[i]-&gt;OnMouseDown(0,mImageFaders[i]-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;mMasterFader-&gt;OnMouseDown(0,ImageFaderMaster-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mCrossfaderA-&gt;OnMouseDown(0,ImageCrossfaderA-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mCrossfaderB-&gt;OnMouseDown(0,ImageCrossfaderB-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleShine2::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>A-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>B-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start drawing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer( mLabels);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controllers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(mImageFaders);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCrossfaderA);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCrossfaderB);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFaderMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>Power);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>A);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>B);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectDmxOut);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connects<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageEuroMalePower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDmxFemaleOut);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleShine2::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nFaders <a href="CppOperatorAssign.htm">=</a> mImageFaders.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nFaders; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image <a href="CppOperatorAssign.htm">=</a> mImageFaders[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,image))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mChannelFaders[i]-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> image-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> image-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFaderMaster))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMasterFader-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCrossfaderA))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mCrossfaderA-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageCrossfaderA-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageCrossfaderA-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCrossfaderB))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mCrossfaderB-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageCrossfaderB-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageCrossfaderB-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageEuroMalePower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mEuroMalePower.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDmxFemaleOut))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mDmxFemaleOut.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleShine2::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Note: all indices in <b><a href="CppThis.htm">this</a></b> <a href="CppFunction.htm">function</a> are y-x ordered<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,20,12));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Note: indices are y-x ordered<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader1-&gt;Picture-&gt;Bitmap ,MergeRects(v[2][ 1],v[5][ 1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader2-&gt;Picture-&gt;Bitmap ,MergeRects(v[2][ 2],v[5][ 2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader3-&gt;Picture-&gt;Bitmap ,MergeRects(v[2][ 3],v[5][ 3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader4-&gt;Picture-&gt;Bitmap ,MergeRects(v[2][ 4],v[5][ 4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader5-&gt;Picture-&gt;Bitmap ,MergeRects(v[2][ 5],v[5][ 5]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader6-&gt;Picture-&gt;Bitmap ,MergeRects(v[2][ 6],v[5][ 6]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader7-&gt;Picture-&gt;Bitmap ,MergeRects(v[2][ 8],v[5][ 8]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader8-&gt;Picture-&gt;Bitmap ,MergeRects(v[2][ 9],v[5][ 9]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader9-&gt;Picture-&gt;Bitmap ,MergeRects(v[2][10],v[5][10]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader10-&gt;Picture-&gt;Bitmap,MergeRects(v[2][11],v[5][11]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader11-&gt;Picture-&gt;Bitmap,MergeRects(v[2][12],v[5][12]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader12-&gt;Picture-&gt;Bitmap,MergeRects(v[2][13],v[5][13]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader13-&gt;Picture-&gt;Bitmap,MergeRects(v[7][ 1],v[10][ 1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader14-&gt;Picture-&gt;Bitmap,MergeRects(v[7][ 2],v[10][ 2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader15-&gt;Picture-&gt;Bitmap,MergeRects(v[7][ 3],v[10][ 3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader16-&gt;Picture-&gt;Bitmap,MergeRects(v[7][ 4],v[10][ 4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader17-&gt;Picture-&gt;Bitmap,MergeRects(v[7][ 5],v[10][ 5]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader18-&gt;Picture-&gt;Bitmap,MergeRects(v[7][ 6],v[10][ 6]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader19-&gt;Picture-&gt;Bitmap,MergeRects(v[7][ 8],v[10][ 8]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader20-&gt;Picture-&gt;Bitmap,MergeRects(v[7][ 9],v[10][ 9]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader21-&gt;Picture-&gt;Bitmap,MergeRects(v[7][10],v[10][10]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader22-&gt;Picture-&gt;Bitmap,MergeRects(v[7][11],v[10][11]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader23-&gt;Picture-&gt;Bitmap,MergeRects(v[7][12],v[10][12]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFader24-&gt;Picture-&gt;Bitmap,MergeRects(v[7][13],v[10][13]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageCrossfaderA-&gt;Picture-&gt;Bitmap,MergeRects(v[7][15],v[10][15]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageCrossfaderB-&gt;Picture-&gt;Bitmap,MergeRects(v[7][16],v[10][16]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetSize(ImageFaderMaster-&gt;Picture-&gt;Bitmap,MergeRects(v[7][18],v[10][18]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Refresh all faders<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nFaders <a href="CppOperatorAssign.htm">=</a> mImageFaders.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nFaders; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mImageFaders[i]-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Again y-x ordered indices<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse1_1,v[ 1][ 1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse1_2,v[ 6][ 1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse1_3,v[11][ 1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse2_1,v[ 1][ 2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse2_2,v[ 6][ 2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse2_3,v[11][ 2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse3_1,v[ 1][ 3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse3_2,v[ 6][ 3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse3_3,v[11][ 3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse4_1,v[ 1][ 4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse4_2,v[ 6][ 4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse4_3,v[11][ 4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse5_1,v[ 1][ 5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse5_2,v[ 6][ 5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse5_3,v[11][ 5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse6_1,v[ 1][ 6]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse6_2,v[ 6][ 6]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse6_3,v[11][ 6]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse7_1,v[ 1][ 8]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse7_2,v[ 6][ 8]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse7_3,v[11][ 8]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse8_1,v[ 1][ 9]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse8_2,v[ 6][ 9]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse8_3,v[11][ 9]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse9_1,v[ 1][10]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse9_2,v[ 6][10]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( LabelUse9_3,v[11][10]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse10_1,v[ 1][11]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse10_2,v[ 6][11]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse10_3,v[11][11]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse11_1,v[ 1][12]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse11_2,v[ 6][12]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse11_3,v[11][12]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse12_1,v[ 1][13]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse12_2,v[ 6][13]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse12_3,v[11][13]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseCrossfader,MergeRects(v[6][14],v[6][17]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseMaster,MergeRects(v[6][18],v[6][19]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseSimpleShine2,MergeRects(v[2][14],v[5][18]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( ImageFader1,MergeRects(v[ 2][ 1],v[ 5][ 1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( ImageFader2,MergeRects(v[ 2][ 2],v[ 5][ 2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( ImageFader3,MergeRects(v[ 2][ 3],v[ 5][ 3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( ImageFader4,MergeRects(v[ 2][ 4],v[ 5][ 4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( ImageFader5,MergeRects(v[ 2][ 5],v[ 5][ 5]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( ImageFader6,MergeRects(v[ 2][ 6],v[ 5][ 6]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( ImageFader7,MergeRects(v[ 2][ 8],v[ 5][ 8]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( ImageFader8,MergeRects(v[ 2][ 9],v[ 5][ 9]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter( ImageFader9,MergeRects(v[ 2][10],v[ 5][10]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader10,MergeRects(v[ 2][11],v[ 5][11]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader11,MergeRects(v[ 2][12],v[ 5][12]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader12,MergeRects(v[ 2][13],v[ 5][13]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader13,MergeRects(v[ 7][ 1],v[10][ 1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader14,MergeRects(v[ 7][ 2],v[10][ 2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader15,MergeRects(v[ 7][ 3],v[10][ 3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader16,MergeRects(v[ 7][ 4],v[10][ 4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader17,MergeRects(v[ 7][ 5],v[10][ 5]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader18,MergeRects(v[ 7][ 6],v[10][ 6]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader19,MergeRects(v[ 7][ 8],v[10][ 8]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader20,MergeRects(v[ 7][ 9],v[10][ 9]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader21,MergeRects(v[ 7][10],v[10][10]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader22,MergeRects(v[ 7][11],v[10][11]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader23,MergeRects(v[ 7][12],v[10][12]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader24,MergeRects(v[ 7][13],v[10][13]));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageCrossfaderA,MergeRects(v[7][15],v[10][15]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageCrossfaderB,MergeRects(v[7][16],v[10][16]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFaderMaster,MergeRects(v[7][18],v[10][19]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>A,MergeRects(v[3][7],v[4][7]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>B,MergeRects(v[8][7],v[9][7]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(Image<a href="CppLed.htm">Led</a>Power,v[1][18]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,2,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectPower ,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectDmxOut,v[0][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageEuroMalePower,v[1][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDmxFemaleOut ,v[1][1]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; TFormSimpleShine2::GetImageFaders() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; v(24,0);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; v(24);<br/>
&nbsp;&nbsp;v[ 0] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;ImageFader1;<br/>
&nbsp;&nbsp;v[ 1] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;ImageFader2;<br/>
&nbsp;&nbsp;v[ 2] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;ImageFader3;<br/>
&nbsp;&nbsp;v[ 3] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;ImageFader4;<br/>
&nbsp;&nbsp;v[ 4] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;ImageFader5;<br/>
&nbsp;&nbsp;v[ 5] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;ImageFader6;<br/>
&nbsp;&nbsp;v[ 6] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;ImageFader7;<br/>
&nbsp;&nbsp;v[ 7] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;ImageFader8;<br/>
&nbsp;&nbsp;v[ 8] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;ImageFader9;<br/>
&nbsp;&nbsp;v[ 9] <a href="CppOperatorAssign.htm">=</a> ImageFader10;<br/>
&nbsp;&nbsp;v[10] <a href="CppOperatorAssign.htm">=</a> ImageFader11;<br/>
&nbsp;&nbsp;v[11] <a href="CppOperatorAssign.htm">=</a> ImageFader12;<br/>
&nbsp;&nbsp;v[12] <a href="CppOperatorAssign.htm">=</a> ImageFader13;<br/>
&nbsp;&nbsp;v[13] <a href="CppOperatorAssign.htm">=</a> ImageFader14;<br/>
&nbsp;&nbsp;v[14] <a href="CppOperatorAssign.htm">=</a> ImageFader15;<br/>
&nbsp;&nbsp;v[15] <a href="CppOperatorAssign.htm">=</a> ImageFader16;<br/>
&nbsp;&nbsp;v[16] <a href="CppOperatorAssign.htm">=</a> ImageFader17;<br/>
&nbsp;&nbsp;v[17] <a href="CppOperatorAssign.htm">=</a> ImageFader18;<br/>
&nbsp;&nbsp;v[18] <a href="CppOperatorAssign.htm">=</a> ImageFader19;<br/>
&nbsp;&nbsp;v[19] <a href="CppOperatorAssign.htm">=</a> ImageFader20;<br/>
&nbsp;&nbsp;v[20] <a href="CppOperatorAssign.htm">=</a> ImageFader21;<br/>
&nbsp;&nbsp;v[21] <a href="CppOperatorAssign.htm">=</a> ImageFader22;<br/>
&nbsp;&nbsp;v[22] <a href="CppOperatorAssign.htm">=</a> ImageFader23;<br/>
&nbsp;&nbsp;v[23] <a href="CppOperatorAssign.htm">=</a> ImageFader24;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; TFormSimpleShine2::GetLabels() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; v(39,0);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; v(39);<br/>
&nbsp;&nbsp;v[ 0] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse1_1;<br/>
&nbsp;&nbsp;v[ 1] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse1_2;<br/>
&nbsp;&nbsp;v[ 2] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse1_3;<br/>
&nbsp;&nbsp;v[ 3] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse2_1;<br/>
&nbsp;&nbsp;v[ 4] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse2_2;<br/>
&nbsp;&nbsp;v[ 5] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse2_3;<br/>
&nbsp;&nbsp;v[ 6] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse3_1;<br/>
&nbsp;&nbsp;v[ 7] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse3_2;<br/>
&nbsp;&nbsp;v[ 8] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse3_3;<br/>
&nbsp;&nbsp;v[ 9] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse4_1;<br/>
&nbsp;&nbsp;v[10] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse4_2;<br/>
&nbsp;&nbsp;v[11] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse4_3;<br/>
&nbsp;&nbsp;v[12] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse5_1;<br/>
&nbsp;&nbsp;v[13] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse5_2;<br/>
&nbsp;&nbsp;v[14] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse5_3;<br/>
&nbsp;&nbsp;v[15] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse6_1;<br/>
&nbsp;&nbsp;v[16] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse6_2;<br/>
&nbsp;&nbsp;v[17] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse6_3;<br/>
&nbsp;&nbsp;v[18] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse7_1;<br/>
&nbsp;&nbsp;v[19] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse7_2;<br/>
&nbsp;&nbsp;v[20] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse7_3;<br/>
&nbsp;&nbsp;v[21] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse8_1;<br/>
&nbsp;&nbsp;v[22] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse8_2;<br/>
&nbsp;&nbsp;v[23] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse8_3;<br/>
&nbsp;&nbsp;v[24] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse9_1;<br/>
&nbsp;&nbsp;v[25] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse9_2;<br/>
&nbsp;&nbsp;v[26] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse9_3;<br/>
&nbsp;&nbsp;v[27] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse10_1;<br/>
&nbsp;&nbsp;v[28] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse10_2;<br/>
&nbsp;&nbsp;v[29] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse10_3;<br/>
&nbsp;&nbsp;v[30] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse11_1;<br/>
&nbsp;&nbsp;v[31] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse11_2;<br/>
&nbsp;&nbsp;v[32] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse11_3;<br/>
&nbsp;&nbsp;v[33] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse12_1;<br/>
&nbsp;&nbsp;v[34] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse12_2;<br/>
&nbsp;&nbsp;v[35] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUse12_3;<br/>
&nbsp;&nbsp;v[36] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUseCrossfader;<br/>
&nbsp;&nbsp;v[37] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUseMaster;<br/>
&nbsp;&nbsp;v[38] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;LabelUseSimpleShine2;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimpleSound1.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimpleSound1.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormSimpleSound1H<br/>
<a href="CppDefine.htm">#define</a> UnitFormSimpleSound1H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> SimpleSound1;<br/>
<a href="CppComment.htm">//</a>Control<br/>
<b><a href="CppStruct.htm">struct</a></b> FaderControl;<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMaleControl;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormSimpleSound1 : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFaderMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleMasterLeft;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleMic1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleMasterRight;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAudio<a href="CppSignal.htm">Signal</a>;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnect1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectMic;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectL;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectR;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseSimpleSound1;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimpleSound1&gt; mSoundTable;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControlMaster;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt; mXlrFemaleMic1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMaleMasterLeft;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMaleMasterRight;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt; mEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt; mAudio<a href="CppSignal.htm">Signal</a>Display;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormSimpleSound1(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormSimpleSound1 *FormSimpleSound1;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimpleSound1.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimpleSound1.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimpleSound1.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSimpleSound1.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormSimpleSound1 *FormSimpleSound1;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormSimpleSound1::TFormSimpleSound1(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSoundTable(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimpleSound1&gt;(<b><a href="CppNew.htm">new</a></b> SimpleSound1))<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mFaderControlMaster <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFaderMaster,ImageFaderMaster));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mEuroMalePower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> EuroMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPower,ImageEuroMalePower));<br/>
&nbsp;&nbsp;mXlrFemaleMic1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMic1,ImageXlrFemaleMic1));<br/>
&nbsp;&nbsp;mXlrMaleMasterLeft <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMasterL,ImageXlrMaleMasterLeft));<br/>
&nbsp;&nbsp;mXlrMaleMasterRight <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMasterR,ImageXlrMaleMasterRight));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Control(mSoundTable-&gt;mAudio<a href="CppSignal.htm">Signal</a>Display,ImageAudio<a href="CppSignal.htm">Signal</a>));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make some images transparent<br/>
&nbsp;&nbsp;OnResize(0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Manually set the faders<br/>
&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(0,ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleSound1::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseSimpleSound1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controllers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFaderMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageAudio<a href="CppSignal.htm">Signal</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrFemaleMic1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMaleMasterLeft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMaleMasterRight);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageEuroMalePower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectMic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnect1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectR);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleSound1::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFaderMaster))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrFemaleMic1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrFemaleMic1.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMaleMasterLeft))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrMaleMasterLeft.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMaleMasterRight))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrMaleMasterRight.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageEuroMalePower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mEuroMalePower.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleSound1::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,2,5));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize images<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> MergeRects(v[1][0],v[3][0]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFaderMaster-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Placement<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseMaster,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseSimpleSound1,v[0][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageAudio<a href="CppSignal.htm">Signal</a>,MergeRects(v[1][1],v[3][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFaderMaster,MergeRects(v[1][0],v[3][0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,4,6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectMic&nbsp;&nbsp; ,v[1][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnect1&nbsp;&nbsp;&nbsp;&nbsp; ,v[2][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectMaster,MergeRects(v[1][1],v[1][2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectL&nbsp;&nbsp;&nbsp;&nbsp; ,v[2][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectR&nbsp;&nbsp;&nbsp;&nbsp; ,v[2][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectPower ,v[2][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrFemaleMic1&nbsp;&nbsp;&nbsp;&nbsp; ,MergeRects(v[3][0],v[4][0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrMaleMasterLeft ,MergeRects(v[3][1],v[4][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrMaleMasterRight,MergeRects(v[3][2],v[4][2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageEuroMalePower&nbsp;&nbsp;&nbsp;&nbsp; ,MergeRects(v[3][3],v[4][3]));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimpleSound2.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimpleSound2.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormSimpleSound2H<br/>
<a href="CppDefine.htm">#define</a> UnitFormSimpleSound2H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> SimpleSound2;<br/>
<a href="CppComment.htm">//</a>Control<br/>
<b><a href="CppStruct.htm">struct</a></b> FaderControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>Control;<br/>
<b><a href="CppStruct.htm">struct</a></b> PressButtonControl;<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMaleControl;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormSimpleSound2 : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFaderMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleMasterLeft;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleMic1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleMasterRight;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAudio<a href="CppSignal.htm">Signal</a>;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectMic1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectL;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectR;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleMic2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectMic2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePressButton1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePressButton2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDial1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDial2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseGain;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUsePfl;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseSimpleSound2;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimpleSound2&gt; mSoundTable;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControl1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControl2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt; mPressButtonControl1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt; mPressButtonControl2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControlMaster;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt; mXlrFemaleMic1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt; mXlrFemaleMic2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMaleMasterLeft;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMaleMasterRight;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt; mEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt; mAudio<a href="CppSignal.htm">Signal</a>Display;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormSimpleSound2(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormSimpleSound2 *FormSimpleSound2;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimpleSound2.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimpleSound2.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimpleSound2.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSimpleSound2.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormSimpleSound2 *FormSimpleSound2;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormSimpleSound2::TFormSimpleSound2(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSoundTable(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimpleSound2&gt;(<b><a href="CppNew.htm">new</a></b> SimpleSound2))<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mFaderControl1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFader1,ImageFader1));<br/>
&nbsp;&nbsp;mFaderControl2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFader2,ImageFader2));<br/>
&nbsp;&nbsp;mPressButtonControl1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> PressButtonControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPressButton1,ImagePressButton1));<br/>
&nbsp;&nbsp;mPressButtonControl2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> PressButtonControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPressButton2,ImagePressButton2));<br/>
&nbsp;&nbsp;mDialControl1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDial1,ImageDial1));<br/>
&nbsp;&nbsp;mDialControl2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDial2,ImageDial2));<br/>
&nbsp;&nbsp;mFaderControlMaster <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFaderMaster,ImageFaderMaster));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mEuroMalePower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> EuroMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPower,ImageEuroMalePower));<br/>
&nbsp;&nbsp;mXlrFemaleMic1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMic1,ImageXlrFemaleMic1));<br/>
&nbsp;&nbsp;mXlrFemaleMic2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMic2,ImageXlrFemaleMic2));<br/>
&nbsp;&nbsp;mXlrMaleMasterLeft <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMasterL,ImageXlrMaleMasterLeft));<br/>
&nbsp;&nbsp;mXlrMaleMasterRight <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMasterR,ImageXlrMaleMasterRight));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Control(mSoundTable-&gt;mAudio<a href="CppSignal.htm">Signal</a>Display,ImageAudio<a href="CppSignal.htm">Signal</a>));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Manually set the faders<br/>
&nbsp;&nbsp;mFaderControl1-&gt;OnMouseDown(0,ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl2-&gt;OnMouseDown(0,ImageFader2-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(0,ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Press buttons in and out<br/>
&nbsp;&nbsp;mPressButtonControl1-&gt;OnMouseDown(0,ImagePressButton1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mPressButtonControl2-&gt;OnMouseDown(0,ImagePressButton2-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mPressButtonControl1-&gt;OnMouseDown(0,ImagePressButton1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mPressButtonControl2-&gt;OnMouseDown(0,ImagePressButton2-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the gains to 0.0<br/>
&nbsp;&nbsp;mDialControl1-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControl2-&gt;OnMouseDown(5,17);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleSound2::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseGain);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUsePfl);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseSimpleSound2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFaderMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDial1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDial2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePressButton1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePressButton2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageAudio<a href="CppSignal.htm">Signal</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectMic1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectMic2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectR);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrFemaleMic1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrFemaleMic2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMaleMasterLeft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMaleMasterRight);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageEuroMalePower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleSound2::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader2-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader2-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePressButton1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonControl1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImagePressButton1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImagePressButton1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePressButton2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonControl2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImagePressButton2-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImagePressButton2-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDial1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControl1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDial1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDial1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDial2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControl2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDial2-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDial2-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFaderMaster))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrFemaleMic1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrFemaleMic1.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrFemaleMic2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrFemaleMic2.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMaleMasterLeft))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrMaleMasterLeft.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMaleMasterRight))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrMaleMasterRight.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageEuroMalePower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mEuroMalePower.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleSound2::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,7,7));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][2],v[5][2]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader2-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][3],v[5][3]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> MergeRects(v[3][4],v[5][5]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader1-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader2-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFaderMaster-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse1,v[0][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse2,v[0][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseMaster,MergeRects(v[2][4],v[2][5]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseGain,MergeRects(v[1][0],v[1][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUsePfl,MergeRects(v[2][0],v[2][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseSimpleSound2,MergeRects(v[0][4],v[1][6]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDial1,v[1][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImagePressButton1,v[2][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader1,MergeRects(v[3][2],v[5][2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDial2,v[1][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImagePressButton2,v[2][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader2,MergeRects(v[3][3],v[5][3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFaderMaster,MergeRects(v[3][4],v[5][5]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageAudio<a href="CppSignal.htm">Signal</a>,MergeRects(v[3][6],v[5][6]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,5,3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectMic1&nbsp;&nbsp;,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect1&nbsp;&nbsp;&nbsp;&nbsp; ,v[1][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectMic2&nbsp;&nbsp;,v[0][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect2&nbsp;&nbsp;&nbsp;&nbsp; ,v[1][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectMaster,MergeRects(v[0][2],v[0][3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectL&nbsp;&nbsp;&nbsp;&nbsp; ,v[1][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectR&nbsp;&nbsp;&nbsp;&nbsp; ,v[1][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectPower ,v[1][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrFemaleMic1&nbsp;&nbsp;&nbsp;&nbsp; ,v[2][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrFemaleMic2&nbsp;&nbsp;&nbsp;&nbsp; ,v[2][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrMaleMasterLeft ,v[2][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrMaleMasterRight,v[2][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageEuroMalePower&nbsp;&nbsp;&nbsp;&nbsp; ,v[2][4]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimpleSound3.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimpleSound3.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormSimpleSound3H<br/>
<a href="CppDefine.htm">#define</a> UnitFormSimpleSound3H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> SimpleSound3;<br/>
<a href="CppComment.htm">//</a>Control<br/>
<b><a href="CppStruct.htm">struct</a></b> FaderControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>Control;<br/>
<b><a href="CppStruct.htm">struct</a></b> PressButtonControl;<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> JackFemaleControl;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormSimpleSound3 : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFaderMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleMasterLeft;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleMic1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleMasterRight;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAudio<a href="CppSignal.htm">Signal</a>;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectMic1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectL;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectR;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleMic2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectMic2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePressButtonPfl1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePressButtonPfl2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialGain1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialGain2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseGain;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUsePfl;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseSimpleSound3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseAux1_1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialAux1_1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialAux1_2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseSend;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseAux1_2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialSendAux1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackFemaleAux1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectAux1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePressButtonPfl3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialAux1_3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialGain3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleMic3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectMic3;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimpleSound3&gt; mSoundTable;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlGain1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlGain2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlGain3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlAux1_1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlAux1_2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlAux1_3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlSendAux1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt; mPressButtonControlPfl1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt; mPressButtonControlPfl2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt; mPressButtonControlPfl3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControlMaster;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt; mXlrFemaleMic1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt; mXlrFemaleMic2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt; mXlrFemaleMic3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemaleControl&gt; mJackFemaleAux1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMaleMasterLeft;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMaleMasterRight;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt; mEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt; mAudio<a href="CppSignal.htm">Signal</a>Display;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormSimpleSound3(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormSimpleSound3 *FormSimpleSound3;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimpleSound3.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimpleSound3.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimpleSound3.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSimpleSound3.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormSimpleSound3 *FormSimpleSound3;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormSimpleSound3::TFormSimpleSound3(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSoundTable(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimpleSound3&gt;(<b><a href="CppNew.htm">new</a></b> SimpleSound3))<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mFaderControl1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFader1,ImageFader1));<br/>
&nbsp;&nbsp;mFaderControl2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFader2,ImageFader2));<br/>
&nbsp;&nbsp;mFaderControl3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFader3,ImageFader3));<br/>
&nbsp;&nbsp;mPressButtonControlPfl1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> PressButtonControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPressButtonPfl1,ImagePressButtonPfl1));<br/>
&nbsp;&nbsp;mPressButtonControlPfl2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> PressButtonControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPressButtonPfl2,ImagePressButtonPfl2));<br/>
&nbsp;&nbsp;mPressButtonControlPfl3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> PressButtonControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPressButtonPfl3,ImagePressButtonPfl3));<br/>
&nbsp;&nbsp;mDialControlGain1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialGain1,ImageDialGain1));<br/>
&nbsp;&nbsp;mDialControlGain2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialGain2,ImageDialGain2));<br/>
&nbsp;&nbsp;mDialControlGain3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialGain3,ImageDialGain3));<br/>
&nbsp;&nbsp;mDialControlAux1_1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialAux1_1,ImageDialAux1_1));<br/>
&nbsp;&nbsp;mDialControlAux1_2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialAux1_2,ImageDialAux1_2));<br/>
&nbsp;&nbsp;mDialControlAux1_3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialAux1_3,ImageDialAux1_3));<br/>
&nbsp;&nbsp;mDialControlSendAux1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialSendAux1,ImageDialSendAux1));<br/>
&nbsp;&nbsp;mFaderControlMaster <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFaderMaster,ImageFaderMaster));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mEuroMalePower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> EuroMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPower,ImageEuroMalePower));<br/>
&nbsp;&nbsp;mJackFemaleAux1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> JackFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mAux1,ImageJackFemaleAux1));<br/>
&nbsp;&nbsp;mXlrFemaleMic1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMic1,ImageXlrFemaleMic1));<br/>
&nbsp;&nbsp;mXlrFemaleMic2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMic2,ImageXlrFemaleMic2));<br/>
&nbsp;&nbsp;mXlrFemaleMic3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMic3,ImageXlrFemaleMic3));<br/>
&nbsp;&nbsp;mXlrMaleMasterLeft <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMasterL,ImageXlrMaleMasterLeft));<br/>
&nbsp;&nbsp;mXlrMaleMasterRight <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMasterR,ImageXlrMaleMasterRight));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Control(mSoundTable-&gt;mAudio<a href="CppSignal.htm">Signal</a>Display,ImageAudio<a href="CppSignal.htm">Signal</a>));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Manually set the faders<br/>
&nbsp;&nbsp;mFaderControl1-&gt;OnMouseDown(0,ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl2-&gt;OnMouseDown(0,ImageFader2-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl3-&gt;OnMouseDown(0,ImageFader3-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(0,ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Press buttons in and out<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>In<br/>
&nbsp;&nbsp;mPressButtonControlPfl1-&gt;OnMouseDown(0,ImagePressButtonPfl1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mPressButtonControlPfl2-&gt;OnMouseDown(0,ImagePressButtonPfl2-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mPressButtonControlPfl3-&gt;OnMouseDown(0,ImagePressButtonPfl3-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Out<br/>
&nbsp;&nbsp;mPressButtonControlPfl1-&gt;OnMouseDown(0,ImagePressButtonPfl1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mPressButtonControlPfl2-&gt;OnMouseDown(0,ImagePressButtonPfl2-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mPressButtonControlPfl3-&gt;OnMouseDown(0,ImagePressButtonPfl3-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the gains to 0.0<br/>
&nbsp;&nbsp;mDialControlGain1-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlGain2-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlGain3-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlAux1_1-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlAux1_2-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlAux1_3-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlSendAux1-&gt;OnMouseDown(5,17);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleSound3::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseGain);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUsePfl);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseAux1_1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseAux1_2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseSend);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseSimpleSound3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFaderMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialGain1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialGain2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialGain3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialAux1_1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialAux1_2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialAux1_3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialSendAux1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePressButtonPfl1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePressButtonPfl2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePressButtonPfl3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageAudio<a href="CppSignal.htm">Signal</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectMic1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectMic2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectMic3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectAux1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectR);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageJackFemaleAux1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrFemaleMic1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrFemaleMic2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrFemaleMic3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMaleMasterLeft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMaleMasterRight);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageEuroMalePower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleSound3::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader2-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader2-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl3-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader3-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader3-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePressButtonPfl1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonControlPfl1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePressButtonPfl2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonControlPfl2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl2-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl2-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePressButtonPfl3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonControlPfl3-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl3-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl3-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialGain1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlGain1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialGain1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialGain1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialGain2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlGain2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialGain2-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialGain2-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialGain3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlGain3-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialGain3-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialGain3-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialAux1_1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlAux1_1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialAux1_2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlAux1_2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_2-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_2-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialAux1_3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlAux1_3-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_3-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_3-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialSendAux1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlSendAux1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialSendAux1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialSendAux1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFaderMaster))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageJackFemaleAux1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mJackFemaleAux1.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrFemaleMic1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrFemaleMic1.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrFemaleMic2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrFemaleMic2.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrFemaleMic3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrFemaleMic3.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMaleMasterLeft))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrMaleMasterLeft.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMaleMasterRight))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrMaleMasterRight.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageEuroMalePower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mEuroMalePower.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleSound3::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,10,8));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[4][2],v[6][2]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader2-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[4][3],v[6][3]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader3-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[4][4],v[6][4]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> MergeRects(v[4][5],v[6][5]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader1-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader2-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader3-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFaderMaster-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse1,v[0][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse2,v[0][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse3,v[0][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseGain,MergeRects(v[1][0],v[1][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseAux1_1,MergeRects(v[2][0],v[2][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUsePfl,MergeRects(v[3][0],v[3][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseMaster,MergeRects(v[3][5],v[3][6]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseSend,MergeRects(v[0][5],v[0][6]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseAux1_2,MergeRects(v[1][5],v[1][6]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseSimpleSound3,MergeRects(v[0][7],v[1][9]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>#1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialGain1,v[1][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialAux1_1,v[2][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImagePressButtonPfl1,v[3][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader1,MergeRects(v[4][2],v[6][2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>#2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialGain2,v[1][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialAux1_2,v[2][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImagePressButtonPfl2,v[3][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader2,MergeRects(v[4][3],v[6][3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>#3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialGain3,v[1][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialAux1_3,v[2][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImagePressButtonPfl3,v[3][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader3,MergeRects(v[4][4],v[6][4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Others<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialSendAux1,MergeRects(v[2][5],v[2][6]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFaderMaster,MergeRects(v[4][5],v[6][6]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageAudio<a href="CppSignal.htm">Signal</a>,MergeRects(v[2][7],v[7][9]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,7,5));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectMic1&nbsp;&nbsp;,v[1][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect1&nbsp;&nbsp;&nbsp;&nbsp; ,v[2][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectMic2&nbsp;&nbsp;,v[1][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect2&nbsp;&nbsp;&nbsp;&nbsp; ,v[2][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectMic3&nbsp;&nbsp;,v[1][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect3&nbsp;&nbsp;&nbsp;&nbsp; ,v[2][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectAux1&nbsp;&nbsp;,v[2][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectMaster,MergeRects(v[1][4],v[1][5]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectL&nbsp;&nbsp;&nbsp;&nbsp; ,v[2][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectR&nbsp;&nbsp;&nbsp;&nbsp; ,v[2][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectPower ,v[2][6]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrFemaleMic1&nbsp;&nbsp;&nbsp;&nbsp; ,v[3][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrFemaleMic2&nbsp;&nbsp;&nbsp;&nbsp; ,v[3][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrFemaleMic3&nbsp;&nbsp;&nbsp;&nbsp; ,v[3][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageJackFemaleAux1&nbsp;&nbsp;&nbsp;&nbsp;,v[3][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrMaleMasterLeft ,v[3][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrMaleMasterRight,v[3][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageEuroMalePower&nbsp;&nbsp;&nbsp;&nbsp; ,v[3][6]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimpleSound4.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimpleSound4.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormSimpleSound4H<br/>
<a href="CppDefine.htm">#define</a> UnitFormSimpleSound4H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> SimpleSound4;<br/>
<a href="CppComment.htm">//</a>Control<br/>
<b><a href="CppStruct.htm">struct</a></b> FaderControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>Control;<br/>
<b><a href="CppStruct.htm">struct</a></b> PressButtonControl;<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> JackFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMaleControl;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormSimpleSound4 : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFaderMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleMasterLeft;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleMic1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleMasterRight;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAudio<a href="CppSignal.htm">Signal</a>;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectMic1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectL;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectR;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleMic2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectMic2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePressButtonPfl1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePressButtonPfl2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialGain1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialGain2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseGain;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUsePfl;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseSimpleSound4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseAux1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialAux1_1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialAux1_2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseSend;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialSendAux1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackFemaleAux1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectAux1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePressButtonPfl3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialAux1_3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialGain3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleMic3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectMic3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialAux1_4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePressButtonPfl4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUseAux2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialAux2_1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialAux2_2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialAux2_3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialAux2_4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDialSendAux2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelUse4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackFemaleAux2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnectAux2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *LabelConnect4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleWhite4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleRed4;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimpleSound4&gt; mSoundTable;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl4;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlGain1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlGain2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlGain3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlAux1_1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlAux1_2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlAux1_3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlAux1_4;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlAux2_1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlAux2_2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlAux2_3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlAux2_4;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlSendAux1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mDialControlSendAux2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt; mPressButtonControlPfl1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt; mPressButtonControlPfl2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt; mPressButtonControlPfl3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt; mPressButtonControlPfl4;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControlMaster;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt; mXlrFemaleMic1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt; mXlrFemaleMic2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt; mXlrFemaleMic3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemaleControl&gt; mCinchFemaleL4;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemaleControl&gt; mCinchFemaleR4;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemaleControl&gt; mJackFemaleAux1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemaleControl&gt; mJackFemaleAux2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMaleMasterLeft;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMaleMasterRight;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt; mEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt; mAudio<a href="CppSignal.htm">Signal</a>Display;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormSimpleSound4(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormSimpleSound4 *FormSimpleSound4;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSimpleSound4.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSimpleSound4.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimpleSound4.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSimpleSound4.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormSimpleSound4 *FormSimpleSound4;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormSimpleSound4::TFormSimpleSound4(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSoundTable(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimpleSound4&gt;(<b><a href="CppNew.htm">new</a></b> SimpleSound4))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the <a href="CppInitialize.htm">initialization</a> here, to be sure the mSoundTable is <a href="CppInitialize.htm">initialize</a>d<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mFaderControl1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFader1,ImageFader1));<br/>
&nbsp;&nbsp;mFaderControl2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFader2,ImageFader2));<br/>
&nbsp;&nbsp;mFaderControl3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFader3,ImageFader3));<br/>
&nbsp;&nbsp;mFaderControl4 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFader4,ImageFader4));<br/>
&nbsp;&nbsp;mPressButtonControlPfl1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> PressButtonControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPressButtonPfl1,ImagePressButtonPfl1));<br/>
&nbsp;&nbsp;mPressButtonControlPfl2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> PressButtonControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPressButtonPfl2,ImagePressButtonPfl2));<br/>
&nbsp;&nbsp;mPressButtonControlPfl3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> PressButtonControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPressButtonPfl3,ImagePressButtonPfl3));<br/>
&nbsp;&nbsp;mPressButtonControlPfl4 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButtonControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> PressButtonControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPressButtonPfl4,ImagePressButtonPfl4));<br/>
&nbsp;&nbsp;mDialControlGain1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialGain1,ImageDialGain1));<br/>
&nbsp;&nbsp;mDialControlGain2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialGain2,ImageDialGain2));<br/>
&nbsp;&nbsp;mDialControlGain3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialGain3,ImageDialGain3));<br/>
&nbsp;&nbsp;mDialControlAux1_1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialAux1_1,ImageDialAux1_1));<br/>
&nbsp;&nbsp;mDialControlAux1_2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialAux1_2,ImageDialAux1_2));<br/>
&nbsp;&nbsp;mDialControlAux1_3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialAux1_3,ImageDialAux1_3));<br/>
&nbsp;&nbsp;mDialControlAux1_4 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialAux1_4,ImageDialAux1_4));<br/>
&nbsp;&nbsp;mDialControlAux2_1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialAux2_1,ImageDialAux2_1));<br/>
&nbsp;&nbsp;mDialControlAux2_2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialAux2_2,ImageDialAux2_2));<br/>
&nbsp;&nbsp;mDialControlAux2_3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialAux2_3,ImageDialAux2_3));<br/>
&nbsp;&nbsp;mDialControlAux2_4 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialAux2_4,ImageDialAux2_4));<br/>
&nbsp;&nbsp;mDialControlSendAux1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialSendAux1,ImageDialSendAux1));<br/>
&nbsp;&nbsp;mDialControlSendAux2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mDialSendAux2,ImageDialSendAux2));<br/>
&nbsp;&nbsp;mFaderControlMaster <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFaderMaster,ImageFaderMaster));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mEuroMalePower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> EuroMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPower,ImageEuroMalePower));<br/>
&nbsp;&nbsp;mJackFemaleAux1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> JackFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mAux1,ImageJackFemaleAux1));<br/>
&nbsp;&nbsp;mJackFemaleAux2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> JackFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mAux2,ImageJackFemaleAux2));<br/>
&nbsp;&nbsp;mXlrFemaleMic1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMic1,ImageXlrFemaleMic1));<br/>
&nbsp;&nbsp;mXlrFemaleMic2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMic2,ImageXlrFemaleMic2));<br/>
&nbsp;&nbsp;mXlrFemaleMic3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMic3,ImageXlrFemaleMic3));<br/>
&nbsp;&nbsp;mXlrMaleMasterLeft <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMasterL,ImageXlrMaleMasterLeft));<br/>
&nbsp;&nbsp;mXlrMaleMasterRight <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMasterR,ImageXlrMaleMasterRight));<br/>
&nbsp;&nbsp;mCinchFemaleL4 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> CinchWhiteFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mCinchFemaleL4,ImageCinchFemaleWhite4));<br/>
&nbsp;&nbsp;mCinchFemaleR4 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> CinchRedFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mCinchFemaleR4,ImageCinchFemaleRed4));<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Control(mSoundTable-&gt;mAudio<a href="CppSignal.htm">Signal</a>Display,ImageAudio<a href="CppSignal.htm">Signal</a>));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Manually set the faders<br/>
&nbsp;&nbsp;mFaderControl1-&gt;OnMouseDown(0,ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl2-&gt;OnMouseDown(0,ImageFader2-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl3-&gt;OnMouseDown(0,ImageFader3-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControl4-&gt;OnMouseDown(0,ImageFader4-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(0,ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Press buttons in and out<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>In<br/>
&nbsp;&nbsp;mPressButtonControlPfl1-&gt;OnMouseDown(0,ImagePressButtonPfl1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mPressButtonControlPfl2-&gt;OnMouseDown(0,ImagePressButtonPfl2-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mPressButtonControlPfl3-&gt;OnMouseDown(0,ImagePressButtonPfl3-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mPressButtonControlPfl4-&gt;OnMouseDown(0,ImagePressButtonPfl3-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Out<br/>
&nbsp;&nbsp;mPressButtonControlPfl1-&gt;OnMouseDown(0,ImagePressButtonPfl1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mPressButtonControlPfl2-&gt;OnMouseDown(0,ImagePressButtonPfl2-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mPressButtonControlPfl3-&gt;OnMouseDown(0,ImagePressButtonPfl3-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mPressButtonControlPfl4-&gt;OnMouseDown(0,ImagePressButtonPfl3-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the gains to 0.0<br/>
&nbsp;&nbsp;mDialControlGain1-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlGain2-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlGain3-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlAux1_1-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlAux1_2-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlAux1_3-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlAux1_4-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlAux2_1-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlAux2_2-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlAux2_3-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlAux2_4-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlSendAux1-&gt;OnMouseDown(5,17);<br/>
&nbsp;&nbsp;mDialControlSendAux2-&gt;OnMouseDown(5,17);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleSound4::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUse4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseGain);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUsePfl);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseAux1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseAux2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseSend);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelUseSimpleSound4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFaderMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialGain1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialGain2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialGain3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Channel4 does not have a gain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialAux1_1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialAux1_2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialAux1_3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialAux1_4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialAux2_1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialAux2_2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialAux2_3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialAux2_4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialSendAux1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageDialSendAux2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePressButtonPfl1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePressButtonPfl2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePressButtonPfl3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePressButtonPfl4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageAudio<a href="CppSignal.htm">Signal</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectMic1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectMic2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectMic3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectAux1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectAux2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnect4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectR);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(LabelConnectPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrFemaleMic1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrFemaleMic2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrFemaleMic3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCinchFemaleRed4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCinchFemaleWhite4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageJackFemaleAux1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageJackFemaleAux2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMaleMasterLeft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMaleMasterRight);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageEuroMalePower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleSound4::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader2-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader2-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl3-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader3-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader3-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl4-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader3-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader3-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePressButtonPfl1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonControlPfl1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePressButtonPfl2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonControlPfl2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl2-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl2-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePressButtonPfl3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonControlPfl3-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl3-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl3-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePressButtonPfl4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonControlPfl4-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl4-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImagePressButtonPfl4-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialGain1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlGain1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialGain1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialGain1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialGain2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlGain2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialGain2-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialGain2-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialGain3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlGain3-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialGain3-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialGain3-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialAux1_1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlAux1_1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialAux1_2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlAux1_2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_2-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_2-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialAux1_3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlAux1_3-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_3-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_3-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialAux1_4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlAux1_4-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_4-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialAux1_4-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialAux2_1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlAux2_1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialAux2_1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialAux2_1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialAux2_2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlAux2_2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialAux2_2-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialAux2_2-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialAux2_3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlAux2_3-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialAux2_3-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialAux2_3-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialAux2_4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlAux2_4-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialAux2_4-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialAux2_4-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialSendAux1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlSendAux1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialSendAux1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialSendAux1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageDialSendAux2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDialControlSendAux2-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageDialSendAux2-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageDialSendAux2-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFaderMaster))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrFemaleMic1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrFemaleMic1.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrFemaleMic2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrFemaleMic2.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrFemaleMic3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrFemaleMic3.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCinchFemaleWhite4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mCinchFemaleL4.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCinchFemaleRed4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mCinchFemaleR4.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageJackFemaleAux1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mJackFemaleAux1.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageJackFemaleAux2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mJackFemaleAux2.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMaleMasterLeft))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrMaleMasterLeft.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMaleMasterRight))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrMaleMasterRight.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageEuroMalePower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mEuroMalePower.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSimpleSound4::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,11,9));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[5][2],v[7][2]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader2-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[5][3],v[7][3]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader3-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[5][4],v[7][4]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader4-&gt;Picture-&gt;Bitmap-&gt;Height&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> MergeRects(v[5][5],v[7][5]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> MergeRects(v[5][6],v[7][7]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader1-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader2-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader3-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader4-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFaderMaster-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place bitmaps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse1,v[0][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse2,v[0][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse3,v[0][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUse4,v[0][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseGain,MergeRects(v[1][0],v[1][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseAux1,MergeRects(v[2][0],v[2][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseAux2,MergeRects(v[3][0],v[3][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUsePfl,MergeRects(v[4][0],v[4][1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseMaster,MergeRects(v[4][6],v[4][7]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseSend,MergeRects(v[1][6],v[1][7]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelUseSimpleSound4,MergeRects(v[0][8],v[1][10]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Controls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>#1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialGain1,v[1][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialAux1_1,v[2][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialAux2_1,v[3][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImagePressButtonPfl1,v[4][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader1,MergeRects(v[5][2],v[7][2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>#2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialGain2,v[1][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialAux1_2,v[2][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialAux2_2,v[3][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImagePressButtonPfl2,v[4][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader2,MergeRects(v[5][3],v[7][3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>#3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialGain3,v[1][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialAux1_3,v[2][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialAux2_3,v[3][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImagePressButtonPfl3,v[4][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader3,MergeRects(v[5][4],v[7][4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>#4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Channel 4 has no gain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialAux1_4,v[2][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialAux2_4,v[3][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImagePressButtonPfl4,v[4][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader4,MergeRects(v[5][5],v[7][5]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Others<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialSendAux1,MergeRects(v[2][6],v[2][7]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageDialSendAux2,MergeRects(v[3][6],v[3][7]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFaderMaster,MergeRects(v[5][6],v[7][7]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageAudio<a href="CppSignal.htm">Signal</a>,MergeRects(v[2][8],v[7][10]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,6,5));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Labels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectMic1&nbsp;&nbsp;,v[0][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect1&nbsp;&nbsp;&nbsp;&nbsp; ,v[1][0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectMic2&nbsp;&nbsp;,v[0][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect2&nbsp;&nbsp;&nbsp;&nbsp; ,v[1][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectMic3&nbsp;&nbsp;,v[0][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect3&nbsp;&nbsp;&nbsp;&nbsp; ,v[1][2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnect4&nbsp;&nbsp;&nbsp;&nbsp; ,v[1][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectAux1&nbsp;&nbsp;,v[3][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectAux2&nbsp;&nbsp;,v[3][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectMaster,MergeRects(v[0][4],v[0][5]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectL&nbsp;&nbsp;&nbsp;&nbsp; ,v[1][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectR&nbsp;&nbsp;&nbsp;&nbsp; ,v[1][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(LabelConnectPower ,MergeRects(v[4][1],v[4][2]));;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connectors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrFemaleMic1&nbsp;&nbsp;&nbsp;&nbsp; ,MergeRects(v[2][0],v[3][0]));;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrFemaleMic2&nbsp;&nbsp;&nbsp;&nbsp; ,MergeRects(v[2][1],v[3][1]));;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrFemaleMic3&nbsp;&nbsp;&nbsp;&nbsp; ,MergeRects(v[2][2],v[3][2]));;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageCinchFemaleWhite4 ,v[2][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageCinchFemaleRed4&nbsp;&nbsp; ,v[3][3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageJackFemaleAux1&nbsp;&nbsp;&nbsp;&nbsp;,v[4][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageJackFemaleAux2&nbsp;&nbsp;&nbsp;&nbsp;,v[4][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrMaleMasterLeft ,v[2][4]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrMaleMasterRight,v[2][5]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageEuroMalePower&nbsp;&nbsp;&nbsp;&nbsp; ,v[4][0]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSprites.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSprites.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormSpritesH<br/>
<a href="CppDefine.htm">#define</a> UnitFormSpritesH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>TFormSprites is a global TForm<br/>
<a href="CppComment.htm">//</a>TFormSprites MUST be created before a TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a> is created<br/>
<b><a href="CppClass.htm">class</a></b> TFormSprites : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220Selected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220Connected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220ConnectedSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlug220;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlug220Selected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlug220Connected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlug220ConnectedSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleConnected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleConnectedSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleConnected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleConnectedSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMaleSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMaleConnected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMaleConnectedSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageRed<a href="CppLed.htm">Led</a>Off;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageRed<a href="CppLed.htm">Led</a>On;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTwoSwitchOff;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTwoSwitchOn;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageGreen<a href="CppLed.htm">Led</a>Off;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageGreen<a href="CppLed.htm">Led</a>On;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDmxFemale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDmxFemaleSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDmxFemaleConnected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDmxFemaleConnectedSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocketPowerFemale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocketPowerMale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDmxMale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDmxMaleSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDmxMaleConnected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageDmxMaleConnectedSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocketPowerFemaleSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocketPowerMaleSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocketPowerFemaleConnected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocketPowerFemaleConnectedSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocketPowerMaleConnected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocketPowerMaleConnectedSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageYellow<a href="CppLed.htm">Led</a>Off;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageYellow<a href="CppLed.htm">Led</a>On;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSingYes;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSingNo;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePressButtonOut;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePressButtonIn;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackFemale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackFemaleSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackFemaleConnectedSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackFemaleConnected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleWhite;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleWhiteSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleWhiteConnected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleWhiteConnectedSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleRed;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleRedSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleRedConnected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchFemaleRedConnectedSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageLcdSymbolPlay;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageLcdSymbolRec;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackMale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackMaleSelected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackMaleConnected;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackMaleConnectedSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSpeakonFemale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSpeakonFemaleSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSpeakonFemaleConnected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSpeakonFemaleConnectedSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroFemale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroFemaleSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroFemaleConnected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroFemaleConnectedSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSpeakonMale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSpeakonMaleSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSpeakonMaleConnected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSpeakonMaleConnectedSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchMaleWhite;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchMaleWhiteSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchMaleWhiteConnected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchMaleWhiteConnectedSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchMaleRed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchMaleRedSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchMaleRedConnected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchMaleRedConnectedSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackXlrFemale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackXlrFemaleSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackXlrFemaleConnected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJackXlrFemaleConnectedSelected;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormSprites(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormSprites *FormSprites;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormSprites.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormSprites.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSprites.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormSprites *FormSprites;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormSprites::TFormSprites(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set transparencies of some Images right<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt; images;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;images.push_back(ImagePlug220Connected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;images.push_back(ImagePlug220ConnectedSelected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;images.push_back(ImageJackMaleConnected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;images.push_back(ImageJackMaleConnectedSelected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;images.push_back(ImageEuroFemaleConnected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;images.push_back(ImageEuroFemaleConnectedSelected);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt;::<a href="CppIterator.htm">iterator</a> j <a href="CppOperatorAssign.htm">=</a> images.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppTImage.htm">TImage</a>*&gt;::<a href="CppIterator.htm">iterator</a> i <a href="CppOperatorAssign.htm">=</a> images.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i)-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clLime;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i)-&gt;Picture-&gt;Bitmap-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormTorqueTm200P.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormTorqueTm200P.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormTorqueTm200PH<br/>
<a href="CppDefine.htm">#define</a> UnitFormTorqueTm200PH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> SpeakerRcf322A;<br/>
<a href="CppComment.htm">//</a>Control<br/>
<b><a href="CppStruct.htm">struct</a></b> TwoSwitchControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>Control;<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMaleControl;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormTorqueTm200P : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageVolumeDial;<br/>
&nbsp;&nbsp;TLabel *LabelPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMale;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePowerSwitch;<br/>
&nbsp;&nbsp;TLabel *LabelVolume;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSound;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakerRcf322A&gt; mSpeaker;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitchControl&gt; mPowerSwitch;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt; mVolumeDial;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt; mEuroMale;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMale;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt; mXlrFemale;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt; m<a href="CppLed.htm">Led</a>LimProt;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormTorqueTm200P(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> GetMachine() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormTorqueTm200P *FormTorqueTm200P;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormTorqueTm200P.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormTorqueTm200P.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSpeaker.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormTorqueTm200P.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSprites.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> <a href="CppLink.htm">link</a> "UnitFormMachine"<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormTorqueTm200P *FormTorqueTm200P;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormTorqueTm200P::TFormTorqueTm200P(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSpeaker(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakerRcf322A&gt;(<b><a href="CppNew.htm">new</a></b> SpeakerRcf322A))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mPowerSwitch <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitchControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TwoSwitchControl(<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSpeaker-&gt;mPowerSwitch,ImagePowerSwitch));<br/>
&nbsp;&nbsp;mVolumeDial <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>Control(<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSpeaker-&gt;mVolumeDial,ImageVolumeDial));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mEuroMale <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> EuroMaleControl(<b><a href="CppThis.htm">this</a></b>,mSpeaker-&gt;mEuroMalePower,ImageEuroMale));<br/>
&nbsp;&nbsp;mXlrFemale <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSpeaker-&gt;mXlrInput,ImageXlrFemale));<br/>
&nbsp;&nbsp;mXlrMale <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSpeaker-&gt;mXlrDaisyChain,ImageXlrMale));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSpeaker-&gt;m<a href="CppLed.htm">Led</a>Power,Image<a href="CppLed.htm">Led</a>Power));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>LimProt <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>Control&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>Control(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSpeaker-&gt;m<a href="CppLed.htm">Led</a>LimProt,Image<a href="CppLed.htm">Led</a>LimProt));<br/>
<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;ImageVolumeDial-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 50;<br/>
&nbsp;&nbsp;ImageVolumeDial-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> 50;<br/>
&nbsp;&nbsp;ImageVolumeDial-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set controls by clicking <b><a href="CppVirtual.htm">virtual</a></b>ly<br/>
&nbsp;&nbsp;mVolumeDial-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;1 * ImageVolumeDial-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;3 * ImageVolumeDial-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorDivide.htm">/</a> 4);<br/>
&nbsp;&nbsp;mPowerSwitch-&gt;OnMouseDown(0,0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormTorqueTm200P::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update all<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>LimProt-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawAudio<a href="CppSignal.htm">Signal</a>(ImageSound,mSpeaker-&gt;GetSoundLevel());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start drawing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageVolumeDial);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePowerSwitch);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageSound);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>Power);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(Image<a href="CppLed.htm">Led</a>LimProt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrFemale);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMale);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageEuroMale);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormTorqueTm200P::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageVolumeDial))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mVolumeDial-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageVolumeDial-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageVolumeDial-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePowerSwitch))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPowerSwitch-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImagePowerSwitch-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImagePowerSwitch-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMale)) mFormParent-&gt;OnConnectorClick(mXlrMale.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrFemale)) mFormParent-&gt;OnConnectorClick(mXlrFemale.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageEuroMale)) mFormParent-&gt;OnConnectorClick(mEuroMale.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormTransitionPieceJackMaleTwoCinchFemale.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormTransitionPieceJackMaleTwoCinchFemale.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormTransitionPieceJackMaleTwoCinchFemaleH<br/>
<a href="CppDefine.htm">#define</a> UnitFormTransitionPieceJackMaleTwoCinchFemaleH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ImgList.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> TransitionPieceJackMaleTwoCinchFemale;<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> JackMaleControl;<br/>
<a href="CppComment.htm">//</a>Misc<br/>
<b><a href="CppStruct.htm">struct</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormTransitionPieceJackMaleTwoCinchFemale : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchL;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageCinchR;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageJack;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TransitionPieceJackMaleTwoCinchFemale&gt; mTransitionPiece;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemaleControl&gt; mCinchL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemaleControl&gt; mCinchR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackMaleControl&gt; mJack;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormTransitionPieceJackMaleTwoCinchFemale(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormTransitionPieceJackMaleTwoCinchFemale *FormTransitionPieceJackMaleTwoCinchFemale;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormTransitionPieceJackMaleTwoCinchFemale.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormTransitionPieceJackMaleTwoCinchFemale.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitTransitionPiece.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormTransitionPieceJackMaleTwoCinchFemale.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormTransitionPieceJackMaleTwoCinchFemale *FormTransitionPieceJackMaleTwoCinchFemale;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormTransitionPieceJackMaleTwoCinchFemale::TFormTransitionPieceJackMaleTwoCinchFemale(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mTransitionPiece(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TransitionPieceJackMaleTwoCinchFemale&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TransitionPieceJackMaleTwoCinchFemale))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mJack <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> JackMaleControl(<b><a href="CppThis.htm">this</a></b>,mTransitionPiece-&gt;mJack,ImageJack));<br/>
&nbsp;&nbsp;mCinchL <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> CinchWhiteFemaleControl(<b><a href="CppThis.htm">this</a></b>,mTransitionPiece-&gt;mCinchL,ImageCinchL));<br/>
&nbsp;&nbsp;mCinchR <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> CinchRedFemaleControl(<b><a href="CppThis.htm">this</a></b>,mTransitionPiece-&gt;mCinchR,ImageCinchR));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormTransitionPieceJackMaleTwoCinchFemale::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageJack);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCinchL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageCinchR);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormTransitionPieceJackMaleTwoCinchFemale::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageJack)) mFormParent-&gt;OnConnectorClick(mJack.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCinchL)) mFormParent-&gt;OnConnectorClick(mCinchL.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageCinchR)) mFormParent-&gt;OnConnectorClick(mCinchR.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormTransitionPieceJackMaleTwoCinchFemale::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; v(GetRectsGrid(ClientRect,2,2));<br/>
&nbsp;&nbsp;PlaceInCenter(ImageCinchL,v[0][0]);<br/>
&nbsp;&nbsp;PlaceInCenter(ImageCinchR,v[1][0]);<br/>
&nbsp;&nbsp;PlaceInCenter(ImageJack,&nbsp;&nbsp;MergeRects(v[0][1],v[1][1]));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormTriplet.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormTriplet.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="CppTriple.htm">Triple</a>tH<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="CppTriple.htm">Triple</a>tH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ImgList.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppTriple.htm">Triple</a>t;<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> ControllerControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> ConnectorControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> TwoSwitchControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> Socket220Control;<br/>
<b><a href="CppStruct.htm">struct</a></b> Plug220Control;<br/>
<b><a href="CppStruct.htm">struct</a></b> TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="CppTriple.htm">Triple</a>t : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220_3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220_2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220_1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlug220;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppTriple.htm">Triple</a>t&gt; m<a href="CppTriple.htm">Triple</a>t;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; mSocket220_1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; mSocket220_2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; mSocket220_3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220Control&gt; mPlug220;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TForm<a href="CppTriple.htm">Triple</a>t(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="CppTriple.htm">Triple</a>t *Form<a href="CppTriple.htm">Triple</a>t;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormTriplet.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormTriplet.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppTriple.htm">Triple</a>t.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppTriple.htm">Triple</a>t.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="CppTriple.htm">Triple</a>t *Form<a href="CppTriple.htm">Triple</a>t;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="CppTriple.htm">Triple</a>t::TForm<a href="CppTriple.htm">Triple</a>t(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppTriple.htm">Triple</a>t(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppTriple.htm">Triple</a>t&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppTriple.htm">Triple</a>t))<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mSocket220_1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Socket220Control(<b><a href="CppThis.htm">this</a></b>,m<a href="CppTriple.htm">Triple</a>t-&gt;mSocket220_1,ImageSocket220_1));<br/>
&nbsp;&nbsp;mSocket220_2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Socket220Control(<b><a href="CppThis.htm">this</a></b>,m<a href="CppTriple.htm">Triple</a>t-&gt;mSocket220_2,ImageSocket220_2));<br/>
&nbsp;&nbsp;mSocket220_3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Socket220Control(<b><a href="CppThis.htm">this</a></b>,m<a href="CppTriple.htm">Triple</a>t-&gt;mSocket220_3,ImageSocket220_3));<br/>
&nbsp;&nbsp;mPlug220 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Plug220Control(<b><a href="CppThis.htm">this</a></b>,m<a href="CppTriple.htm">Triple</a>t-&gt;mPlug,ImagePlug220));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="CppTriple.htm">Triple</a>t::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageSocket220_1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageSocket220_2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageSocket220_3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImagePlug220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="CppTriple.htm">Triple</a>t::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageSocket220_1)) mFormParent-&gt;OnConnectorClick(mSocket220_1.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageSocket220_2)) mFormParent-&gt;OnConnectorClick(mSocket220_2.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageSocket220_3)) mFormParent-&gt;OnConnectorClick(mSocket220_3.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImagePlug220)) mFormParent-&gt;OnConnectorClick(mPlug220.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="CppTriple.htm">Triple</a>t::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v(GetRectsHorizontal(ClientRect,4));<br/>
&nbsp;&nbsp;PlaceInCenter(ImageSocket220_1,v[0]);<br/>
&nbsp;&nbsp;PlaceInCenter(ImageSocket220_2,v[1]);<br/>
&nbsp;&nbsp;PlaceInCenter(ImageSocket220_3,v[2]);<br/>
&nbsp;&nbsp;PlaceInCenter(ImagePlug220&nbsp;&nbsp;&nbsp;&nbsp;,v[3]);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormWallSocket220.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormWallSocket220.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormWallSocket220H<br/>
<a href="CppDefine.htm">#define</a> UnitFormWallSocket220H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> WallSocket220;<br/>
<b><a href="CppStruct.htm">struct</a></b> Socket220Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormWallSocket220 : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocket220;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt; mSocket220Control;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WallSocket220&gt; mSocket220;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormWallSocket220(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormWallSocket220 *FormWallSocket220;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormWallSocket220.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormWallSocket220.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitWallSocket220.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormWallSocket220.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormWallSocket220 *FormWallSocket220;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormWallSocket220::TFormWallSocket220(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSocket220(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WallSocket220&gt;(<b><a href="CppNew.htm">new</a></b> WallSocket220))<br/>
{<br/>
&nbsp;&nbsp;mSocket220Control <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Socket220Control( <b><a href="CppThis.htm">this</a></b>,mSocket220-&gt;mSocket220,ImageSocket220));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormWallSocket220::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageSocket220);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormWallSocket220::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageSocket220))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mSocket220Control.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormWallSocket220::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;PlaceInCenter(ImageSocket220,ClientRect);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormWallSocketPower.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormWallSocketPower.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormWallSocketPowerH<br/>
<a href="CppDefine.htm">#define</a> UnitFormWallSocketPowerH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> WallSocketPower;<br/>
<b><a href="CppStruct.htm">struct</a></b> SocketPowerFemaleControl;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormWallSocketPower : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSocketPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerFemaleControl&gt; mSocketPowerControl;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WallSocketPower&gt; mSocketPower;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormWallSocketPower(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormWallSocketPower *FormWallSocketPower;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormWallSocketPower.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormWallSocketPower.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitWallSocketPower.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormWallSocketPower.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormWallSocketPower *FormWallSocketPower;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormWallSocketPower::TFormWallSocketPower(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSocketPower(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WallSocketPower&gt;(<b><a href="CppNew.htm">new</a></b> WallSocketPower))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mSocketPowerControl <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> SocketPowerFemaleControl( <b><a href="CppThis.htm">this</a></b>,mSocketPower-&gt;mSocketPower,ImageSocketPower));<br/>
<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;OnResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormWallSocketPower::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageSocketPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormWallSocketPower::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageSocketPower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mSocketPowerControl.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormWallSocketPower::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;PlaceInCenter(ImageSocketPower,ClientRect);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormYamahaMG16_6Fx.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormYamahaMG16_6Fx.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormYamahaMG16_6FxH<br/>
<a href="CppDefine.htm">#define</a> UnitFormYamahaMG16_6FxH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppComment.htm">//</a>Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> SoundTableEasySound;<br/>
<a href="CppComment.htm">//</a>Control<br/>
<b><a href="CppStruct.htm">struct</a></b> FaderControl;<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemaleControl;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMaleControl;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Control;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormYamahaMg16_6Fx : <b><a href="CppPublic.htm">public</a></b> TFormMachine<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControl;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetView;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetUse;<br/>
&nbsp;&nbsp;TTabSheet *TabSheetConnect;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageView;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFaderMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleMasterLeft;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrFemaleMic1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageXlrMaleMasterRight;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWatermark;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAudio<a href="CppSignal.htm">Signal</a>;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageUse1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageUseMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnect1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectMaster;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectMic;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectL;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectR;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageConnectPower;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader5;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFader6;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image6;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image7;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image8;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image9;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image10;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image11;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image12;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image13;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFaderGroup12;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFaderGroup34;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image1;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image2;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image3;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image4;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image5;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image14;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image15;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image16;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image17;<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image18;<br/>
&nbsp;&nbsp;TLabel *Label1;<br/>
&nbsp;&nbsp;TLabel *Label2;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SoundTableEasySound&gt; mSoundTable;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControl1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt; mFaderControlMaster;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt; mXlrFemaleMic1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMaleMasterLeft;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt; mXlrMaleMasterRight;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt; mEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt; mAudio<a href="CppSignal.htm">Signal</a>Display;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormYamahaMg16_6Fx(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAfterResize();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetImageBuffer() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBuffer();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormYamahaMg16_6Fx *FormYamahaMg16_6Fx;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFormYamahaMG16_6Fx.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFormYamahaMG16_6Fx.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnectorControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayControl.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSoundTable.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormYamahaMG16_6Fx.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormYamahaMg16_6Fx *FormYamahaMg16_6Fx;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormYamahaMg16_6Fx::TFormYamahaMg16_6Fx(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TForm<a href="ToolSimStagecraft.htm">SimStagecraft</a>Main * <b><a href="CppConst.htm">const</a></b> formParent)<br/>
&nbsp;&nbsp;: TFormMachine(Owner,formParent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSoundTable(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SoundTableEasySound&gt;(<b><a href="CppNew.htm">new</a></b> SoundTableEasySound))<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;mFaderControl1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFader1,ImageFader1));<br/>
&nbsp;&nbsp;mFaderControlMaster <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FaderControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FaderControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mFaderMaster,ImageFaderMaster));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mEuroMalePower <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> EuroMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mPower,ImageEuroMalePower));<br/>
&nbsp;&nbsp;mXlrFemaleMic1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrFemaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMic1,ImageXlrFemaleMic1));<br/>
&nbsp;&nbsp;mXlrMaleMasterLeft <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMasterL,ImageXlrMaleMasterLeft));<br/>
&nbsp;&nbsp;mXlrMaleMasterRight <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMaleControl&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> XlrMaleControl(<b><a href="CppThis.htm">this</a></b>,mSoundTable-&gt;mMasterR,ImageXlrMaleMasterRight));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Control&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Control(mSoundTable-&gt;mAudio<a href="CppSignal.htm">Signal</a>Display,ImageAudio<a href="CppSignal.htm">Signal</a>));<br/>
<br/>
&nbsp;&nbsp;CreateWatermark(ImageView,ImageWatermark);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make some images transparent<br/>
&nbsp;&nbsp;ImageConnectMic-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageConnect1-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageConnectMaster-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageConnectL-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageConnectR-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageConnectPower-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageUse1-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageUseMaster-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clWhite;<br/>
&nbsp;&nbsp;ImageConnectMic-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageConnect1-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageConnectMaster-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageConnectL-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageConnectR-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageConnectPower-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageUse1-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageUseMaster-&gt;Transparent <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;OnResize(0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Manually set the faders<br/>
&nbsp;&nbsp;mFaderControl1-&gt;OnMouseDown(0,ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(0,ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormYamahaMg16_6Fx::UpdateBuffer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageView-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update displays<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFader1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageAudio<a href="CppSignal.htm">Signal</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageFaderMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageUse1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageUseMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageWatermark-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrFemaleMic1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMaleMasterLeft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageXlrMaleMasterRight);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageEuroMalePower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectMic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnect1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectR);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawOnBuffer(ImageConnectPower);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawBorderAroundBuffer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormYamahaMg16_6Fx::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDisplayMode)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeView:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeUse:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFader1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControl1-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFader1-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageFaderMaster))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFaderControlMaster-&gt;OnMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorMinus.htm">-</a> ImageFaderMaster-&gt;Top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> modeConnect:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrFemaleMic1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrFemaleMic1.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMaleMasterLeft))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrMaleMasterLeft.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageXlrMaleMasterRight))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mXlrMaleMasterRight.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OnImage(x,y,ImageEuroMalePower))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnConnectorClick(mEuroMalePower.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormYamahaMg16_6Fx::OnAfterResize()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v(GetRectsHorizontal(ClientRect,3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageAudio<a href="CppSignal.htm">Signal</a>,v[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v1(GetRectsVertical(v[0],5));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v2(GetRectsVertical(v[1],5));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> MergeRects(v1[1],v1[3]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFader1-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFaderMaster-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> MergeRects(v2[1],v2[3]).Height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageFaderMaster-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageUse1&nbsp;&nbsp;,v1[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFader1,MergeRects(v1[1],v1[3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageUseMaster&nbsp;&nbsp;,v2[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageFaderMaster,MergeRects(v2[1],v2[3]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v(GetRectsHorizontal(ClientRect,4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v0(GetRectsVertical(v[0],6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v1(GetRectsVertical(v[1],6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v2(GetRectsVertical(v[2],6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; v3(GetRectsVertical(v[3],6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectMic&nbsp;&nbsp; ,v0[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnect1&nbsp;&nbsp;&nbsp;&nbsp; ,v0[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectMaster,MergeRects(v1[1],v2[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectL&nbsp;&nbsp;&nbsp;&nbsp; ,v1[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectR&nbsp;&nbsp;&nbsp;&nbsp; ,v2[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageConnectPower ,v3[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrFemaleMic1&nbsp;&nbsp;&nbsp;&nbsp; ,MergeRects(v0[3],v0[4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrMaleMasterLeft ,MergeRects(v1[3],v1[4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageXlrMaleMasterRight,MergeRects(v2[3],v2[4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaceInCenter(ImageEuroMalePower&nbsp;&nbsp;&nbsp;&nbsp; ,MergeRects(v3[3],v3[4]));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFunctions.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFunctions.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> Unit<a href="CppFunction.htm">Function</a>sH<br/>
<a href="CppDefine.htm">#define</a> Unit<a href="CppFunction.htm">Function</a>sH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetAngle.htm">GetAngle</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppGetAngle.htm">GetAngle</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppGetDistance.htm">GetDistance</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From htpp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/Cpp<a href="CppGetRandomUniform.htm">GetRandomUniform</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppGetRandomUniform.htm">GetRandomUniform</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitFunctions.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitFunctions.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppFunction.htm">Function</a>s.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetAngle.htm">GetAngle</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppGetAngle.htm">GetAngle</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>In which quadrant are we?<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dX &gt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dY &gt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &gt; 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Quadrant IV<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &gt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (1.0 * <a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> <a href="CppStdAtan.htm">std::atan</a>(dX <a href="CppOperatorDivide.htm">/</a> dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(angle &gt; 0.5 * <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> angle &lt; 1.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (dY &lt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorLessEqual.htm">&lt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Quadrant I<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &gt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &lt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (0.0 * <a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> <a href="CppStdAtan.htm">std::atan</a>(dX <a href="CppOperatorDivide.htm">/</a> dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(angle &gt; 0.0 * <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> angle &lt; 0.5 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX &gt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorEqual.htm">==</a> 0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>On Y-axis, right side<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &gt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (0.5 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (dX &lt; 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dY &gt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX &lt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &gt; 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Quadrant III<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &lt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (1.0 * <a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> <a href="CppStdAtan.htm">std::atan</a>(dX <a href="CppOperatorDivide.htm">/</a> dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(angle &gt; 1.0 * <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> angle &lt; 1.5 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (dY &lt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX &lt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &lt; 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Quadrant II<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &lt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &lt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (2.0 * <a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorMinus.htm">-</a> <a href="CppStdAtan.htm">std::atan</a>(dX <a href="CppOperatorDivide.htm">/</a> dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(angle &gt; 1.5 * <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> angle &lt; 2.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX &lt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>On X-axis<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &lt; 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (1.5 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dY &gt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &gt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>On Y-axis, right side of origin<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX<a href="CppOperatorEqual.htm">==</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (1.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (dY &lt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &lt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>On Y-axis, left side of origin<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX<a href="CppOperatorEqual.htm">==</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY &lt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (0.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>dX <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>On origin<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX<a href="CppOperatorEqual.htm">==</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dY <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (0.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppGetDistance.htm">GetDistance</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdSqrt.htm">std::sqrt</a>((dX * dX) <a href="CppOperatorPlus.htm">+</a> (dY * dY));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From htpp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/Cpp<a href="CppGetRandomUniform.htm">GetRandomUniform</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppGetRandomUniform.htm">GetRandomUniform</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdRand.htm">std::rand</a>())/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRAND_MAX.htm">RAND_MAX</a>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitLamp.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitLamp.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitLampH<br/>
<a href="CppDefine.htm">#define</a> UnitLampH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormPar64;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>A Lamp is a Machine that does not supply <a href="CppAny.htm">any</a>thing<br/>
<b><a href="CppStruct.htm">struct</a></b> Lamp : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> EnumMachineType GetType() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This depends on the connector, especially on a dimmer pack<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Lamps never supply power<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Lamps never supply audio<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Lamps never send DMX <b><a href="CppQtSignals.htm">signals</a></b><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Lamp can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Lamp() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Lamp*);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Par64 : <b><a href="CppPublic.htm">public</a></b> Lamp<br/>
{<br/>
&nbsp;&nbsp;Par64();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetLightIntensity() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220&gt; mPlug220;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormPar64;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Par64 can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~Par64() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Par64*);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitLamp.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitLamp.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitLamp.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Par64::Par64()<br/>
&nbsp;&nbsp;: mPlug220(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220&gt;(<b><a href="CppNew.htm">new</a></b> Plug220(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mPlug220.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> Par64::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector <a href="CppOperatorAssign.htm">=</a> mPlug220-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (otherConnector <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> otherConnector-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;otherConnector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()) &gt; 0.0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Par64::GetLightIntensity() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> otherConnector <a href="CppOperatorAssign.htm">=</a> mPlug220-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (otherConnector <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> otherConnector-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;otherConnector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitLightTable.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitLightTable.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitLightTableH<br/>
<a href="CppDefine.htm">#define</a> UnitLightTableH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppComment.htm">//</a>Use<br/>
<b><a href="CppStruct.htm">struct</a></b> Fader;<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> Connector;<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection;<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> DmxFemale;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>;<br/>
<a href="CppComment.htm">//</a>Misc<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormSimpleShine1;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormSimpleShine2;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> LightTable : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Light tables NEVER supply audio<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dmxChannel) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>LightTable can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~LightTable() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(LightTable *);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Misc<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; &gt; CreateFaders(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n) <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SimpleShine1 : <b><a href="CppPublic.htm">public</a></b> LightTable<br/>
{<br/>
&nbsp;&nbsp;SimpleShine1();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dmxChannel) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>LightTable can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~SimpleShine1() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SimpleShine1*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; &gt; mFaders;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFaderMaster;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt; mEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemale&gt; mDmxFemaleOut;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>Power;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormSimpleShine1;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SimpleShine2 : <b><a href="CppPublic.htm">public</a></b> LightTable<br/>
{<br/>
&nbsp;&nbsp;SimpleShine2();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dmxChannel) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>LightTable can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~SimpleShine2() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SimpleShine2*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; &gt; mFaders;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFaderMaster;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mCrossfaderA;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mCrossfaderB;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt; mEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemale&gt; mDmxFemaleOut;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>A;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>B;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>A;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>B;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormSimpleShine2;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitLightTable.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitLightTable.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h" <a href="CppComment.htm">//</a>For Fader, etc..<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplay.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitLightTable.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SimpleShine1::SimpleShine1()<br/>
&nbsp;&nbsp;: mFaders(<b><a href="CppThis.htm">this</a></b>-&gt;CreateFaders(12)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFaderMaster(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mEuroMalePower(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt;(<b><a href="CppNew.htm">new</a></b> EuroMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDmxFemaleOut(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemale&gt;(<b><a href="CppNew.htm">new</a></b> DmxFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>Power(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>)))<br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>Power.get(),255,0,0));<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleShine1::Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dmxChannel) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dmxChannel <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dmxChannel <a href="CppOperatorLessEqual.htm">&lt;=</a> 12) <a href="CppComment.htm">//</a>Human based counting<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;mFaderMaster-&gt;GetRelPosition()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppThis.htm">this</a></b>-&gt;mFaders[dmxChannel-1]-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.001; <a href="CppComment.htm">//</a>Small leaking current <b><a href="CppFor.htm">for</a></b> DMX detection<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleShine1::PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; <a href="CppComment.htm">/*</a> prevConnectors <a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>Power.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> SimpleShine1::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mEuroMalePower-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()) &gt; 0.0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SimpleShine2::SimpleShine2()<br/>
&nbsp;&nbsp;: mFaders(<b><a href="CppThis.htm">this</a></b>-&gt;CreateFaders(24)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mCrossfaderA(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mCrossfaderB(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFaderMaster(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mEuroMalePower(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt;(<b><a href="CppNew.htm">new</a></b> EuroMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDmxFemaleOut(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DmxFemale&gt;(<b><a href="CppNew.htm">new</a></b> DmxFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>Power(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>A(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>B(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>Power.get(),255,0,0));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>A <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>A.get(),255,0,0));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>B <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>B.get(),255,0,0));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleShine2::Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dmxChannel) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dmxChannel <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dmxChannel <a href="CppOperatorLessEqual.htm">&lt;=</a> 12) <a href="CppComment.htm">//</a>Human based counting<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> master <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mFaderMaster-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> crossfaderA <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mCrossfaderA-&gt;GetRelPosition()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppThis.htm">this</a></b>-&gt;mFaders[dmxChannel-1]-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> crossfaderB <a href="CppOperatorAssign.htm">=</a> (1.0 <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;mCrossfaderB-&gt;GetRelPosition())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppThis.htm">this</a></b>-&gt;mFaders[12+dmxChannel-1]-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> master * <a href="CppStdMax.htm">std::max</a>(crossfaderA,crossfaderB);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.001; <a href="CppComment.htm">//</a>Small leaking current <b><a href="CppFor.htm">for</a></b> DMX detection<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleShine2::PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; <a href="CppComment.htm">/*</a> prevConnectors <a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>Power.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>A.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;mCrossfaderA-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>B.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (1.0 <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;mCrossfaderB-&gt;GetRelPosition());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> SimpleShine2::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mEuroMalePower-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()) &gt; 0.0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; &gt;<br/>
&nbsp;&nbsp;LightTable::CreateFaders(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nFaders) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; &gt; faders;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nFaders; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; fader(<b><a href="CppNew.htm">new</a></b> Fader);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;faders.push_back(fader);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> faders;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitMachine.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitMachine.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitMachineH<br/>
<a href="CppDefine.htm">#define</a> UnitMachineH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Connector;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;Machine() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This depends on the connector, especially on a dimmer pack<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dmxChannel) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Machine can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Machine() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Machine *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitMachine.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitMachine.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitMdPlayer.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitMdPlayer.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitMdPlayerH<br/>
<a href="CppDefine.htm">#define</a> UnitMdPlayerH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitTapButton.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Display;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> Connector;<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection;<br/>
<b><a href="CppStruct.htm">struct</a></b> LcdSymbol;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Plug220;<br/>
<b><a href="CppStruct.htm">struct</a></b> PressButton;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormMdPlayer;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> MdPlayer : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;MdPlayer();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; };<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have power?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressPower();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressRecord();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressStop();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressPlay();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick(); <a href="CppComment.htm">//</a>Must be called every <a href="CppTime.htm">time</a> cycle <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> MdPlayer<a href="CppState.htm">State</a> { mdOff, mdOn, mdPlay, mdRec };<br/>
&nbsp;&nbsp;MdPlayer<a href="CppState.htm">State</a> m<a href="CppState.htm">State</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mAudioRecordedL;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mAudioRecordedR;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mPlayPos;<br/>
<br/>
<br/>
&nbsp;&nbsp;~MdPlayer() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>MdPlayer can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(MdPlayer *);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt; TapButton&lt;MdPlayer&gt; &gt; mButtonPower;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt; TapButton&lt;MdPlayer&gt; &gt; mButtonRecord;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt; TapButton&lt;MdPlayer&gt; &gt; mButtonStop;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt; TapButton&lt;MdPlayer&gt; &gt; mButtonPlay;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemale&gt; mCinchFemaleInL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemale&gt; mCinchFemaleInR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemale&gt; mCinchFemaleOutL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemale&gt; mCinchFemaleOutR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220&gt; mPlug220Power;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnectionAudio<a href="CppSignal.htm">Signal</a>L;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnectionAudio<a href="CppSignal.htm">Signal</a>R;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnectionLcdSymbolRecord;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnectionLcdSymbolPlay;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt; mAudio<a href="CppSignal.htm">Signal</a>DisplayL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt; mAudio<a href="CppSignal.htm">Signal</a>DisplayR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbol&gt; mLcdSymbolRecord;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbol&gt; mLcdSymbolPlay;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>Power;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormMdPlayer;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitMdPlayer.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitMdPlayer.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitMdPlayer.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplay.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
MdPlayer::MdPlayer()<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;mButtonPower(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButton&lt;MdPlayer&gt; &gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButton&lt;MdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,&amp;MdPlayer::PressPower))),<br/>
&nbsp;&nbsp;mButtonRecord(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButton&lt;MdPlayer&gt; &gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButton&lt;MdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,&amp;MdPlayer::PressRecord))),<br/>
&nbsp;&nbsp;mButtonStop(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButton&lt;MdPlayer&gt; &gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButton&lt;MdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,&amp;MdPlayer::PressStop))),<br/>
&nbsp;&nbsp;mButtonPlay(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButton&lt;MdPlayer&gt; &gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TapButton&lt;MdPlayer&gt;(<b><a href="CppThis.htm">this</a></b>,&amp;MdPlayer::PressPlay))),<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;mCinchFemaleInL(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemale&gt;(<b><a href="CppNew.htm">new</a></b> CinchWhiteFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mCinchFemaleInR(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemale&gt;(<b><a href="CppNew.htm">new</a></b> CinchRedFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mCinchFemaleOutL(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemale&gt;(<b><a href="CppNew.htm">new</a></b> CinchWhiteFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mCinchFemaleOutR(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemale&gt;(<b><a href="CppNew.htm">new</a></b> CinchRedFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mPlug220Power(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220&gt;(<b><a href="CppNew.htm">new</a></b> Plug220(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mConnectionAudio<a href="CppSignal.htm">Signal</a>L(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mConnectionAudio<a href="CppSignal.htm">Signal</a>R(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mConnectionLcdSymbolRecord(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mConnectionLcdSymbolPlay(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>Power(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;m<a href="CppState.htm">State</a>(mdOff),<br/>
&nbsp;&nbsp;mAudioRecordedL(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(100,0.0)),<br/>
&nbsp;&nbsp;mAudioRecordedR(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(100,0.0)),<br/>
&nbsp;&nbsp;mPlayPos(0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayL <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Display(mConnectionAudio<a href="CppSignal.htm">Signal</a>L.get()));<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>DisplayR <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Display(mConnectionAudio<a href="CppSignal.htm">Signal</a>R.get()));<br/>
&nbsp;&nbsp;mLcdSymbolRecord <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbol&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> LcdSymbol(mConnectionLcdSymbolRecord.get()));<br/>
&nbsp;&nbsp;mLcdSymbolPlay <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LcdSymbol&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> LcdSymbol(mConnectionLcdSymbolPlay.get()));<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>Power.get(),0,255,0));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mLcdSymbolRecord.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> MdPlayer::PowerSupplyStrength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; <a href="CppComment.htm">/*</a> prevConnectors <a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(connector <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnectionAudio<a href="CppSignal.htm">Signal</a>L.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(mCinchFemaleInL.get(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnectionAudio<a href="CppSignal.htm">Signal</a>R.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(mCinchFemaleInR.get(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnectionLcdSymbolRecord.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (m<a href="CppState.htm">State</a> <a href="CppOperatorEqual.htm">==</a> mdRec ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnectionLcdSymbolPlay.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (m<a href="CppState.htm">State</a> <a href="CppOperatorEqual.htm">==</a> mdPlay ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>Power.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (m<a href="CppState.htm">State</a> <a href="CppOperatorNotEqual.htm">!=</a> mdOff ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> MdPlayer::Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleInL.get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleInR.get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleOutL.get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleOutR.get() );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m<a href="CppState.htm">State</a> <a href="CppOperatorEqual.htm">==</a> mdPlay)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Playing from MD disc, <b><a href="CppReturn.htm">return</a></b> MD disc <a href="CppSignal.htm">signal</a> ONLY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>-&gt; that is, input to MD player is discarded<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleOutL.get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mPlayPos <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mPlayPos &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mAudioRecordedL.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mAudioRecordedL[mPlayPos];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleOutR.get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mPlayPos <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mPlayPos &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mAudioRecordedR.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mAudioRecordedR[mPlayPos];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Not playing from MD disc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m<a href="CppState.htm">State</a> <a href="CppOperatorNotEqual.htm">!=</a> mdPlay);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>mCinchFemaleInL is asked <b><a href="CppFor.htm">for</a></b> recording<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>mCinchFemaleOutL is asked <b><a href="CppFor.htm">for</a></b> input by other machines<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleInL.get() <a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleOutL.get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnection <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mCinchFemaleInL-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnection <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prevent loops of connection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),prevConnectors.end(),inputConnection)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> prevConnectors.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Correct connection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnection-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputConnection,prevConnectors);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> audioInput;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>mCinchFemaleInR is asked <b><a href="CppFor.htm">for</a></b> recording<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>mCinchFemaleOutR is asked <b><a href="CppFor.htm">for</a></b> input by other machines<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleInR.get() <a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mCinchFemaleOutR.get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnection <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mCinchFemaleInR-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnection <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prevent loops of connection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),prevConnectors.end(),inputConnection)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> prevConnectors.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Correct connection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnection-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputConnection,prevConnectors);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> audioInput;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> MdPlayer::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;mPlug220Power.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mPlug220Power-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Power plug (220V) not connected to <a href="CppAny.htm">any</a>thing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> powerSupply <a href="CppOperatorAssign.htm">=</a> otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (powerSupply &gt; 0.0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MdPlayer::PressPower()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m<a href="CppState.htm">State</a> <a href="CppOperatorNotEqual.htm">!=</a> mdOff) { m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> mdOff; }<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> mdOn;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MdPlayer::PressRecord()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> mdRec;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPlayPos <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> mdOff;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MdPlayer::PressStop()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> mdOn;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPlayPos <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> mdOff;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MdPlayer::PressPlay()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> mdPlay;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPlayPos <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> mdOff;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Must be called every <a href="CppTime.htm">time</a> cycle <b><a href="CppFor.htm">for</a></b> recording and playing<br/>
<b><a href="CppVoid.htm">void</a></b> MdPlayer::Tick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> mdOff;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (m<a href="CppState.htm">State</a> <a href="CppOperatorEqual.htm">==</a> mdRec <a href="CppOperatorLogicalOr.htm">||</a> m<a href="CppState.htm">State</a> <a href="CppOperatorEqual.htm">==</a> mdPlay)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>mPlayPos;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mAudioRecordedL.size() <a href="CppOperatorEqual.htm">==</a> mAudioRecordedR.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mPlayPos <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mAudioRecordedL.size()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Stop recording<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayPos <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> mdOn;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m<a href="CppState.htm">State</a> <a href="CppOperatorEqual.htm">==</a> mdRec)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audio<a href="CppSignal.htm">Signal</a>InL <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mCinchFemaleInL.get(), <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudioRecordedL[mPlayPos] <a href="CppOperatorAssign.htm">=</a> audio<a href="CppSignal.htm">Signal</a>InL;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audio<a href="CppSignal.htm">Signal</a>InR <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mCinchFemaleInR.get(), <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAudioRecordedR[mPlayPos] <a href="CppOperatorAssign.htm">=</a> audio<a href="CppSignal.htm">Signal</a>InR;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitMemFunCommand.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitMemFunCommand.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitMemFunCommandH<br/>
<a href="CppDefine.htm">#define</a> UnitMemFunCommandH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl/CppCommand<a href="CppDesignPattern.htm">DesignPattern</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> MemFunCommand<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppVoid.htm">void</a></b> (T::* MemFunPtr)();<br/>
<br/>
&nbsp;&nbsp;MemFunCommand(T * <b><a href="CppConst.htm">const</a></b> target, <b><a href="CppConst.htm">const</a></b> MemFunPtr memFun)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: mTarget(target), m<a href="CppFunction.htm">Function</a>(memFun) { }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Execute() { (mTarget-&gt;*m<a href="CppFunction.htm">Function</a>)(); }<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;T * mTarget;<br/>
&nbsp;&nbsp;MemFunPtr m<a href="CppFunction.htm">Function</a>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitMemFunCommand.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitMemFunCommand.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitMemFunCommand.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitMicrophone.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitMicrophone.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitMicrophoneH<br/>
<a href="CppDefine.htm">#define</a> UnitMicrophoneH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormShureSm58;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMale;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Microphone : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This depends on the connector, especially on a dimmer pack<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Microphone can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Microphone() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Microphone *);<br/>
<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> ShureSm58 : <b><a href="CppPublic.htm">public</a></b> Microphone<br/>
{<br/>
&nbsp;&nbsp;ShureSm58();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormShureSm58;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mAudio<a href="CppSignal.htm">Signal</a>Strength;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetAudio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audio<a href="CppSignal.htm">Signal</a>Strength);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetAudio<a href="CppSignal.htm">Signal</a>Strength() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mAudio<a href="CppSignal.htm">Signal</a>Strength; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Shure SM-58 does not have a power <b><a href="CppSwitch.htm">switch</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt; mXlrInput;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ShureSm58 can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~ShureSm58() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(ShureSm58 *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitMicrophone.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitMicrophone.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMicrophone.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
ShureSm58::ShureSm58()<br/>
&nbsp;&nbsp;: mXlrInput(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt;(<b><a href="CppNew.htm">new</a></b> XlrMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Strength(0.0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mXlrInput.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ShureSm58::Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; <a href="CppComment.htm">/*</a> prevConnectors <a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(connector <a href="CppOperatorEqual.htm">==</a> mXlrInput.get() );<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mAudio<a href="CppSignal.htm">Signal</a>Strength;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> ShureSm58::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>("This is not a very important <a href="CppMemberFunction.htm">member function</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> ShureSm58::SetAudio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audio<a href="CppSignal.htm">Signal</a>Strength)<br/>
{<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Strength <a href="CppOperatorAssign.htm">=</a> audio<a href="CppSignal.htm">Signal</a>Strength;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitOctlet.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitOctlet.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitOctletH<br/>
<a href="CppDefine.htm">#define</a> UnitOctletH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> TwoSwitch;<br/>
<b><a href="CppStruct.htm">struct</a></b> Connector;<br/>
<b><a href="CppStruct.htm">struct</a></b> Plug220;<br/>
<b><a href="CppStruct.htm">struct</a></b> Socket220;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormOctlet;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Octlet : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;Octlet();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This depends on the connector, especially on a dimmer pack<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dmxChannel) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitch&gt; mPowerSwitch;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220&gt; mPlug;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; &gt; mSockets220;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormOctlet;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; &gt; CreateSockets220() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Octlet can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~Octlet() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Octlet *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitOctlet.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitOctlet.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitOctlet.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Octlet::Octlet()<br/>
&nbsp;&nbsp;: mPowerSwitch(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitch&gt;(<b><a href="CppNew.htm">new</a></b> TwoSwitch)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPlug(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220&gt;(<b><a href="CppNew.htm">new</a></b> Plug220(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSockets220(CreateSockets220())<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Octlet::PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mPowerSwitch-&gt;IsOn() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power of the Machine the plug is connected to<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnection <a href="CppOperatorAssign.htm">=</a> mPlug-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connected to something?<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnection <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prevent loops of connection<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),prevConnectors.end(),inputConnection)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> prevConnectors.end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnection-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Everything okay...<br/>
&nbsp;&nbsp;prevConnectors.push_back(inputConnection);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> inputMachine-&gt;PowerSupplyStrength(inputConnection,prevConnectors);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> Octlet::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power of the Machine the plug is connected to<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> mPlug-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (otherMachine <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0; <a href="CppComment.htm">//</a>Octlet is connected to itself<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (otherMachine-&gt;PowerSupplyStrength(connectedTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()) &gt; 0.0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; &gt; Octlet::CreateSockets220() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; &gt; sockets;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSockets <a href="CppOperatorAssign.htm">=</a> 8; <a href="CppComment.htm">//</a>An octlet has 8 sockets per <a href="CppDefinition.htm">definition</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nSockets; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; socket(<b><a href="CppNew.htm">new</a></b> Socket220(<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sockets.push_back(socket);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sockets;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitSimpleSound1.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitSimpleSound1.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSimpleSound1H<br/>
<a href="CppDefine.htm">#define</a> UnitSimpleSound1H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitSoundTable.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> Fader;<br/>
<b><a href="CppStruct.htm">struct</a></b> PressButton;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Connector;<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection;<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Display;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormSimpleSound1;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SimpleSound1 : <b><a href="CppPublic.htm">public</a></b> SoundTable<br/>
{<br/>
&nbsp;&nbsp;SimpleSound1();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have power?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;~SimpleSound1() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SimpleSound1 can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SimpleSound1 *);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFaderMaster;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt; mMic1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt; mMasterL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt; mMasterR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt; mPower;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnectionAudio<a href="CppSignal.htm">Signal</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt; mAudio<a href="CppSignal.htm">Signal</a>Display;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormSimpleSound1;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitSimpleSound1.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitSimpleSound1.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitSimpleSound1.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplay.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SimpleSound1::SimpleSound1()<br/>
&nbsp;&nbsp;: mFaderMaster(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMic1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt;(<b><a href="CppNew.htm">new</a></b> XlrFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMasterL(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt;(<b><a href="CppNew.htm">new</a></b> XlrMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMasterR(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt;(<b><a href="CppNew.htm">new</a></b> XlrMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPower(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt;(<b><a href="CppNew.htm">new</a></b> EuroMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnectionAudio<a href="CppSignal.htm">Signal</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Display(mConnectionAudio<a href="CppSignal.htm">Signal</a>.get()));<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound1::PowerSupplyStrength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; <a href="CppComment.htm">/*</a> prevConnectors <a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(connector <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnectionAudio<a href="CppSignal.htm">Signal</a>.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic1-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput <a href="CppOperatorAssign.htm">=</a> otherMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> audioInput;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound1::Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a> (connector <a href="CppOperatorEqual.htm">==</a> mMasterL.get() <a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mMasterR.get() );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sound levels <b><a href="CppFor.htm">for</a></b> L and R channel are equal <b><a href="CppFor.htm">for</a></b> the SimpleSound<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mic1 connected to something?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnection <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic1-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnection <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prevent loops of connection<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),prevConnectors.end(),inputConnection)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> prevConnectors.end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Correct connection<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnection-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputConnection,prevConnectors);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> masterThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mFaderMaster-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> audioInput * masterThroughput;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> SimpleSound1::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;mPower.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mPower-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Power socket (euro male) not connected to <a href="CppAny.htm">any</a>thing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> powerSupply <a href="CppOperatorAssign.htm">=</a> otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (powerSupply &gt; 0.0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitSimpleSound2.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitSimpleSound2.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSimpleSound2H<br/>
<a href="CppDefine.htm">#define</a> UnitSimpleSound2H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitSoundTable.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> Fader;<br/>
<b><a href="CppStruct.htm">struct</a></b> PressButton;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Connector;<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection;<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Display;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormSimpleSound2;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SimpleSound2 : <b><a href="CppPublic.htm">public</a></b> SoundTable<br/>
{<br/>
&nbsp;&nbsp;SimpleSound2();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have power?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;~SimpleSound2() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SimpleSound2 can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SimpleSound2 *);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFader1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFader2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDial1; <a href="CppComment.htm">//</a>Gain <a href="CppDial.htm">dial</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDial2; <a href="CppComment.htm">//</a>Gain <a href="CppDial.htm">dial</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt; mPressButton1; <a href="CppComment.htm">//</a>PFL button<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt; mPressButton2; <a href="CppComment.htm">//</a>PFL button<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFaderMaster;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt; mMic1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt; mMic2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt; mMasterL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt; mMasterR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt; mPower;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnectionAudio<a href="CppSignal.htm">Signal</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt; mAudio<a href="CppSignal.htm">Signal</a>Display;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Misc<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormSimpleSound2;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitSimpleSound2.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitSimpleSound2.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitSimpleSound2.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplay.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SimpleSound2::SimpleSound2()<br/>
&nbsp;&nbsp;: <a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFader1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFader2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDial1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDial2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPressButton1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt;(<b><a href="CppNew.htm">new</a></b> PressButton)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPressButton2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt;(<b><a href="CppNew.htm">new</a></b> PressButton)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFaderMaster(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMic1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt;(<b><a href="CppNew.htm">new</a></b> XlrFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMic2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt;(<b><a href="CppNew.htm">new</a></b> XlrFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMasterL(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt;(<b><a href="CppNew.htm">new</a></b> XlrMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMasterR(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt;(<b><a href="CppNew.htm">new</a></b> XlrMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPower(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt;(<b><a href="CppNew.htm">new</a></b> EuroMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnectionAudio<a href="CppSignal.htm">Signal</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Display(mConnectionAudio<a href="CppSignal.htm">Signal</a>.get()));<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound2::PowerSupplyStrength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; <a href="CppComment.htm">/*</a> prevConnectors <a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(connector <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnectionAudio<a href="CppSignal.htm">Signal</a>.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display the audio strength of mic1 and/or mic2 input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mic1Input <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic1-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mPressButton1-&gt;IsIn()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set mic1Input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mic1Input <a href="CppOperatorAssign.htm">=</a> otherMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()) <a href="CppComment.htm">//</a>Input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (mDial1-&gt;GetRelPosition() * 2.0); <a href="CppComment.htm">//</a>Gain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mic2Input <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic2-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mPressButton2-&gt;IsIn()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set mic2Input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mic2Input <a href="CppOperatorAssign.htm">=</a> otherMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()) <a href="CppComment.htm">//</a>Input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (mDial2-&gt;GetRelPosition() * 2.0); <a href="CppComment.htm">//</a>Gain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMax.htm">std::max</a>(mic1Input,mic2Input);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound2::Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a> (connector <a href="CppOperatorEqual.htm">==</a> mMasterL.get() <a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mMasterR.get() );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check mic1<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mic1Audio<a href="CppSignal.htm">Signal</a>Strength <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sound levels <b><a href="CppFor.htm">for</a></b> L and R channel are equal <b><a href="CppFor.htm">for</a></b> the SimpleSound<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mic1 connected to something?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnection <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic1-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnection <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppComment.htm">//</a>Must be connected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.end(),inputConnection) <a href="CppOperatorEqual.htm">==</a> prevConnectors.end())) <a href="CppComment.htm">//</a>No loops<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnection-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputConnection,prevConnectors);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.pop_back(); <a href="CppComment.htm">//</a>Undo the push_back <b><a href="CppFor.htm">for</a></b> mic2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> masterThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mFaderMaster-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> micThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mFader1-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> gain <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mDial1-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mic1Audio<a href="CppSignal.htm">Signal</a>Strength <a href="CppOperatorAssign.htm">=</a> gain * audioInput * masterThroughput * micThroughput;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check mic2<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mic2Audio<a href="CppSignal.htm">Signal</a>Strength <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sound levels <b><a href="CppFor.htm">for</a></b> L and R channel are equal <b><a href="CppFor.htm">for</a></b> the SimpleSound<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mic1 connected to something?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnection <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic2-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnection <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppComment.htm">//</a>Must be connected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.end(),inputConnection) <a href="CppOperatorEqual.htm">==</a> prevConnectors.end())) <a href="CppComment.htm">//</a>No loops<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnection-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputConnection,prevConnectors);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.pop_back(); <a href="CppComment.htm">//</a>Undo the push_back <b><a href="CppFor.htm">for</a></b> mic1??<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> masterThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mFaderMaster-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> micThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mFader2-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> gain <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mDial2-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mic2Audio<a href="CppSignal.htm">Signal</a>Strength <a href="CppOperatorAssign.htm">=</a> gain * audioInput * masterThroughput * micThroughput;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMax.htm">std::max</a>(mic1Audio<a href="CppSignal.htm">Signal</a>Strength,mic2Audio<a href="CppSignal.htm">Signal</a>Strength);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> SimpleSound2::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;mPower.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mPower-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Power socket (euro male) not connected to <a href="CppAny.htm">any</a>thing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> powerSupply <a href="CppOperatorAssign.htm">=</a> otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (powerSupply &gt; 0.0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitSimpleSound3.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitSimpleSound3.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSimpleSound3H<br/>
<a href="CppDefine.htm">#define</a> UnitSimpleSound3H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitSoundTable.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> Fader;<br/>
<b><a href="CppStruct.htm">struct</a></b> PressButton;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Connector;<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> JackFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection;<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Display;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormSimpleSound3;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SimpleSound3 : <b><a href="CppPublic.htm">public</a></b> SoundTable<br/>
{<br/>
&nbsp;&nbsp;SimpleSound3();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have power?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;~SimpleSound3() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SimpleSound3 can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SimpleSound3 *);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFader1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFader2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFader3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialGain1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialGain2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialGain3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialAux1_1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialAux1_2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialAux1_3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt; mPressButtonPfl1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt; mPressButtonPfl2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt; mPressButtonPfl3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialSendAux1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFaderMaster;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt; mMic1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt; mMic2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt; mMic3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemale&gt; mAux1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt; mMasterL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt; mMasterR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt; mPower;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnectionAudio<a href="CppSignal.htm">Signal</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt; mAudio<a href="CppSignal.htm">Signal</a>Display;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Misc<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>InputStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> channel) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>MasterOutputStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> channel) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>AuxOutputStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> channel) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormSimpleSound3;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitSimpleSound3.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitSimpleSound3.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitSimpleSound3.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplay.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SimpleSound3::SimpleSound3()<br/>
&nbsp;&nbsp;: <a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFader1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFader2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFader3(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialGain1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialGain2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialGain3(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialAux1_1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialAux1_2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialAux1_3(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonPfl1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt;(<b><a href="CppNew.htm">new</a></b> PressButton)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonPfl2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt;(<b><a href="CppNew.htm">new</a></b> PressButton)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonPfl3(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt;(<b><a href="CppNew.htm">new</a></b> PressButton)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialSendAux1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFaderMaster(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMic1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt;(<b><a href="CppNew.htm">new</a></b> XlrFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMic2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt;(<b><a href="CppNew.htm">new</a></b> XlrFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMic3(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt;(<b><a href="CppNew.htm">new</a></b> XlrFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mAux1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemale&gt;(<b><a href="CppNew.htm">new</a></b> JackFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMasterL(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt;(<b><a href="CppNew.htm">new</a></b> XlrMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMasterR(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt;(<b><a href="CppNew.htm">new</a></b> XlrMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPower(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt;(<b><a href="CppNew.htm">new</a></b> EuroMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnectionAudio<a href="CppSignal.htm">Signal</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Display(mConnectionAudio<a href="CppSignal.htm">Signal</a>.get()));<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound3::PowerSupplyStrength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(connector <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnectionAudio<a href="CppSignal.htm">Signal</a>.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nInputs <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; inputs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nInputs; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputs.push_back(<b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>InputStrength(connector,prevConnectors,i+1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputs[0] <a href="CppOperatorMultiplyAssign.htm">*=</a> (<b><a href="CppThis.htm">this</a></b>-&gt;mPressButtonPfl1-&gt;IsIn() ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputs[1] <a href="CppOperatorMultiplyAssign.htm">*=</a> (<b><a href="CppThis.htm">this</a></b>-&gt;mPressButtonPfl2-&gt;IsIn() ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputs[2] <a href="CppOperatorMultiplyAssign.htm">*=</a> (<b><a href="CppThis.htm">this</a></b>-&gt;mPressButtonPfl3-&gt;IsIn() ? 1.0 : 0.0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *(<a href="CppStdMax_element.htm">std::max_element</a>(inputs.begin(),inputs.end()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display the audio strength of mic1 and/or mic2 input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mic1Input <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic1-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mPressButtonPfl1-&gt;IsIn()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set mic1Input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mic1Input <a href="CppOperatorAssign.htm">=</a> otherMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()) <a href="CppComment.htm">//</a>Input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (mDialGain1-&gt;GetRelPosition() * 2.0); <a href="CppComment.htm">//</a>Gain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mic2Input <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic2-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mPressButtonPfl2-&gt;IsIn()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set mic2Input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mic2Input <a href="CppOperatorAssign.htm">=</a> otherMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()) <a href="CppComment.htm">//</a>Input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (mDialGain2-&gt;GetRelPosition() * 2.0); <a href="CppComment.htm">//</a>Gain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMax.htm">std::max</a>(mic1Input,mic2Input);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound3::Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a> (connector <a href="CppOperatorEqual.htm">==</a> mMasterL.get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mMasterR.get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mAux1.get());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mMasterL.get() <a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mMasterR.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nInputs <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; outputs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nInputs; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputs.push_back(<b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>MasterOutputStrength(connector,prevConnectors,i+1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *(<a href="CppStdMax_element.htm">std::max_element</a>(outputs.begin(),outputs.end()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mAux1.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nInputs <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; outputs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nInputs; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputs.push_back(<b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>AuxOutputStrength(connector,prevConnectors,i+1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *(<a href="CppStdMax_element.htm">std::max_element</a>(outputs.begin(),outputs.end()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check mic1<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mic1Audio<a href="CppSignal.htm">Signal</a>Strength <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sound levels <b><a href="CppFor.htm">for</a></b> L and R channel are equal <b><a href="CppFor.htm">for</a></b> the SimpleSound<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mic1 connected to something?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnection <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic1-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnection <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppComment.htm">//</a>Must be connected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.end(),inputConnection) <a href="CppOperatorEqual.htm">==</a> prevConnectors.end())) <a href="CppComment.htm">//</a>No loops<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnection-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputConnection,prevConnectors);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.pop_back(); <a href="CppComment.htm">//</a>Undo the push_back <b><a href="CppFor.htm">for</a></b> mic2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> masterThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mFaderMaster-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> micThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mFader1-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> gain <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mDialGain1-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mic1Audio<a href="CppSignal.htm">Signal</a>Strength <a href="CppOperatorAssign.htm">=</a> gain * audioInput * masterThroughput * micThroughput;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check mic2<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mic2Audio<a href="CppSignal.htm">Signal</a>Strength <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sound levels <b><a href="CppFor.htm">for</a></b> L and R channel are equal <b><a href="CppFor.htm">for</a></b> the SimpleSound<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mic1 connected to something?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnection <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic2-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnection <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppComment.htm">//</a>Must be connected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.end(),inputConnection) <a href="CppOperatorEqual.htm">==</a> prevConnectors.end())) <a href="CppComment.htm">//</a>No loops<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnection-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputConnection,prevConnectors);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.pop_back(); <a href="CppComment.htm">//</a>Undo the push_back <b><a href="CppFor.htm">for</a></b> mic1??<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> masterThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mFaderMaster-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> micThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mFader2-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> gain <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mDialGain2-&gt;GetRelPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mic2Audio<a href="CppSignal.htm">Signal</a>Strength <a href="CppOperatorAssign.htm">=</a> gain * audioInput * masterThroughput * micThroughput;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMax.htm">std::max</a>(mic1Audio<a href="CppSignal.htm">Signal</a>Strength,mic2Audio<a href="CppSignal.htm">Signal</a>Strength);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Unknown output connector in SimpleSound3::Audio<a href="CppSignal.htm">Signal</a>Strength");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>What is the input strength of a certain channel after GAIN?<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound3::Audio<a href="CppSignal.htm">Signal</a>InputStrength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> channel) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Connector&gt; channelConnector;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (channel)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: channelConnector <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: channelConnector <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: channelConnector <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic3; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sound levels <b><a href="CppFor.htm">for</a></b> L and R channel are equal <b><a href="CppFor.htm">for</a></b> the SimpleSound<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mic1 connected to something?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnection <a href="CppOperatorAssign.htm">=</a> channelConnector-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnection <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Not connected to <a href="CppAny.htm">any</a>thing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.end(),inputConnection) <a href="CppOperatorNotEqual.htm">!=</a> prevConnectors.end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Loop!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnection-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputConnection,prevConnectors);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; <a href="CppDial.htm">dial</a>Gain;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (channel)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppDial.htm">dial</a>Gain <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialGain1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <a href="CppDial.htm">dial</a>Gain <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialGain2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <a href="CppDial.htm">dial</a>Gain <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialGain3; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> gain <a href="CppOperatorAssign.htm">=</a> 2.0 * <a href="CppDial.htm">dial</a>Gain-&gt;GetRelPosition();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> gain * audioInput;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>What is the output strength to MASTER of a certain channel?<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound3::Audio<a href="CppSignal.htm">Signal</a>MasterOutputStrength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> channel) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Audio<a href="CppSignal.htm">Signal</a>InputStrength(connector,prevConnectors,channel);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> masterThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mFaderMaster-&gt;GetRelPosition();<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; fader;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (channel)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: fader <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mFader1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: fader <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mFader2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: fader <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mFader3; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> micThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * fader-&gt;GetRelPosition();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioOut <a href="CppOperatorAssign.htm">=</a> audioInput * masterThroughput * micThroughput;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> audioOut;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>What is the output strength to AUX of a certain channel?<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound3::Audio<a href="CppSignal.htm">Signal</a>AuxOutputStrength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> channel) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Audio<a href="CppSignal.htm">Signal</a>InputStrength(connector,prevConnectors,channel);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sendAux1throughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mDialSendAux1-&gt;GetRelPosition();<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; <a href="CppDial.htm">dial</a>;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (channel)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppDial.htm">dial</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialAux1_1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <a href="CppDial.htm">dial</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialAux1_2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <a href="CppDial.htm">dial</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialAux1_3; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppDial.htm">dial</a>Throughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <a href="CppDial.htm">dial</a>-&gt;GetRelPosition();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioOut <a href="CppOperatorAssign.htm">=</a> audioInput * sendAux1throughput * <a href="CppDial.htm">dial</a>Throughput;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> audioOut;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> SimpleSound3::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;mPower.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mPower-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Power socket (euro male) not connected to <a href="CppAny.htm">any</a>thing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> powerSupply <a href="CppOperatorAssign.htm">=</a> otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (powerSupply &gt; 0.0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitSimpleSound4.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitSimpleSound4.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSimpleSound4H<br/>
<a href="CppDefine.htm">#define</a> UnitSimpleSound4H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitAux.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitChannel.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSoundTable.h"<br/>
<a href="CppComment.htm">//</a>Control<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Fader;<br/>
<b><a href="CppStruct.htm">struct</a></b> PressButton;<br/>
<a href="CppComment.htm">//</a>Connect<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> Connector;<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection;<br/>
<b><a href="CppStruct.htm">struct</a></b> JackFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMale;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Display;<br/>
<a href="CppComment.htm">//</a>GUI <b><a href="CppFriend.htm">friend</a></b><br/>
<b><a href="CppStruct.htm">struct</a></b> TFormSimpleSound4;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SimpleSound4 : <b><a href="CppPublic.htm">public</a></b> SoundTable<br/>
{<br/>
&nbsp;&nbsp;SimpleSound4();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have power?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;~SimpleSound4() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SimpleSound4 can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SimpleSound4 *);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFader1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFader2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFader3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFader4;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialGain1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialGain2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialGain3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialAux1_1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialAux1_2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialAux1_3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialAux1_4;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialAux2_1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialAux2_2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialAux2_3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialAux2_4;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt; mPressButtonPfl1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt; mPressButtonPfl2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt; mPressButtonPfl3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt; mPressButtonPfl4;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialSendAux1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mDialSendAux2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; mFaderMaster;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt; mMic1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt; mMic2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt; mMic3;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemale&gt; mCinchFemaleL4;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemale&gt; mCinchFemaleR4;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemale&gt; mAux1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemale&gt; mAux2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt; mMasterL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt; mMasterR;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt; mPower;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnectionAudio<a href="CppSignal.htm">Signal</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt; mAudio<a href="CppSignal.htm">Signal</a>Display;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Misc<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>InputStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Channel channel) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>MasterOutputStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Channel channel) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>AuxOutputStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Channel channel, <b><a href="CppConst.htm">const</a></b> Aux aux) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormSimpleSound4;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitSimpleSound4.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitSimpleSound4.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitSimpleSound4.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplay.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SimpleSound4::SimpleSound4()<br/>
&nbsp;&nbsp;: <a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFader1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFader2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFader3(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFader4(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialGain1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialGain2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialGain3(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialAux1_1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialAux1_2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialAux1_3(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialAux1_4(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialAux2_1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialAux2_2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialAux2_3(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialAux2_4(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonPfl1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt;(<b><a href="CppNew.htm">new</a></b> PressButton)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonPfl2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt;(<b><a href="CppNew.htm">new</a></b> PressButton)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonPfl3(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt;(<b><a href="CppNew.htm">new</a></b> PressButton)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPressButtonPfl4(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PressButton&gt;(<b><a href="CppNew.htm">new</a></b> PressButton)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialSendAux1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDialSendAux2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFaderMaster(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt;(<b><a href="CppNew.htm">new</a></b> Fader)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMic1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt;(<b><a href="CppNew.htm">new</a></b> XlrFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMic2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt;(<b><a href="CppNew.htm">new</a></b> XlrFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMic3(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt;(<b><a href="CppNew.htm">new</a></b> XlrFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mCinchFemaleL4(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemale&gt;(<b><a href="CppNew.htm">new</a></b> CinchWhiteFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mCinchFemaleR4(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemale&gt;(<b><a href="CppNew.htm">new</a></b> CinchRedFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mAux1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemale&gt;(<b><a href="CppNew.htm">new</a></b> JackFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mAux2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemale&gt;(<b><a href="CppNew.htm">new</a></b> JackFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMasterL(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt;(<b><a href="CppNew.htm">new</a></b> XlrMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMasterR(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt;(<b><a href="CppNew.htm">new</a></b> XlrMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPower(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt;(<b><a href="CppNew.htm">new</a></b> EuroMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnectionAudio<a href="CppSignal.htm">Signal</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
&nbsp;&nbsp;mAudio<a href="CppSignal.htm">Signal</a>Display <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Audio<a href="CppSignal.htm">Signal</a>Display&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Audio<a href="CppSignal.htm">Signal</a>Display(mConnectionAudio<a href="CppSignal.htm">Signal</a>.get()));<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound4::PowerSupplyStrength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(connector <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnectionAudio<a href="CppSignal.htm">Signal</a>.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;Channel&gt;(0) <a href="CppOperatorEqual.htm">==</a> channel1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nInputs <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; inputs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nInputs; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputs.push_back(<b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>InputStrength(connector,prevConnectors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;Channel&gt;(i)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputs[0] <a href="CppOperatorMultiplyAssign.htm">*=</a> (<b><a href="CppThis.htm">this</a></b>-&gt;mPressButtonPfl1-&gt;IsIn() ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputs[1] <a href="CppOperatorMultiplyAssign.htm">*=</a> (<b><a href="CppThis.htm">this</a></b>-&gt;mPressButtonPfl2-&gt;IsIn() ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputs[2] <a href="CppOperatorMultiplyAssign.htm">*=</a> (<b><a href="CppThis.htm">this</a></b>-&gt;mPressButtonPfl3-&gt;IsIn() ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputs[3] <a href="CppOperatorMultiplyAssign.htm">*=</a> (<b><a href="CppThis.htm">this</a></b>-&gt;mPressButtonPfl4-&gt;IsIn() ? 1.0 : 0.0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *(<a href="CppStdMax_element.htm">std::max_element</a>(inputs.begin(),inputs.end()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound4::Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a> (connector <a href="CppOperatorEqual.htm">==</a> mMasterL.get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mMasterR.get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mAux1.get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mAux2.get());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mMasterL.get() <a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mMasterR.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;Channel&gt;(0) <a href="CppOperatorEqual.htm">==</a> channel1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nInputs <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; outputs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nInputs; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputs.push_back(<b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>MasterOutputStrength(connector,prevConnectors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;Channel&gt;(i)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *(<a href="CppStdMax_element.htm">std::max_element</a>(outputs.begin(),outputs.end()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mAux1.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;Channel&gt;(0) <a href="CppOperatorEqual.htm">==</a> channel1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nInputs <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; outputs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nInputs; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputs.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>AuxOutputStrength(connector,prevConnectors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;Channel&gt;(i),aux1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *(<a href="CppStdMax_element.htm">std::max_element</a>(outputs.begin(),outputs.end()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mAux2.get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;Channel&gt;(0) <a href="CppOperatorEqual.htm">==</a> channel1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nInputs <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; outputs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nInputs; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputs.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>AuxOutputStrength(connector,prevConnectors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;Channel&gt;(i),aux2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *(<a href="CppStdMax_element.htm">std::max_element</a>(outputs.begin(),outputs.end()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Unknown output connector in SimpleSound4::Audio<a href="CppSignal.htm">Signal</a>Strength");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>What is the input strength of a certain channel after GAIN?<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound4::Audio<a href="CppSignal.htm">Signal</a>InputStrength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Channel channel) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(channel <a href="CppOperatorEqual.htm">==</a> channel1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> channel <a href="CppOperatorEqual.htm">==</a> channel2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> channel <a href="CppOperatorEqual.htm">==</a> channel3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> channel <a href="CppOperatorEqual.htm">==</a> channel4);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> audioInput <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate the audio input<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (channel <a href="CppOperatorEqual.htm">==</a> channel1 <a href="CppOperatorLogicalOr.htm">||</a> channel <a href="CppOperatorEqual.htm">==</a> channel2 <a href="CppOperatorLogicalOr.htm">||</a> channel <a href="CppOperatorEqual.htm">==</a> channel3)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate the audio input of the single input channels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Connector&gt; channelConnector;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (channel)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel1: channelConnector <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel2: channelConnector <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel3: channelConnector <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mMic3; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sound levels <b><a href="CppFor.htm">for</a></b> L and R channel are equal <b><a href="CppFor.htm">for</a></b> the SimpleSound<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mic1 connected to something?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnection <a href="CppOperatorAssign.htm">=</a> channelConnector-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnection <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Not connected to <a href="CppAny.htm">any</a>thing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.end(),inputConnection) <a href="CppOperatorNotEqual.htm">!=</a> prevConnectors.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Loop!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnection-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b><a href="CppComment.htm">*/</a> audioInput <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputConnection,prevConnectors);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate the audio input of the dual input channels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(channel <a href="CppOperatorEqual.htm">==</a> channel4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Connector&gt; channelConnectorL;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Connector&gt; channelConnectorR;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (channel)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel4:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channelConnectorL <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mCinchFemaleL4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channelConnectorR <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mCinchFemaleR4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sound levels <b><a href="CppFor.htm">for</a></b> L and R channel are equal <b><a href="CppFor.htm">for</a></b> the SimpleSound<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connected to something?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnectionL <a href="CppOperatorAssign.htm">=</a> channelConnectorL-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnectionR <a href="CppOperatorAssign.htm">=</a> channelConnectorR-&gt;GetConnectedTo();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> audioInputL <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> audioInputR <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(&nbsp;&nbsp; inputConnectionL <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppComment.htm">//</a>Connected to something<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),prevConnectors.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputConnectionL) <a href="CppOperatorEqual.htm">==</a> prevConnectors.end()) <a href="CppComment.htm">//</a>Not in loop<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnectionL-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audioInputL <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputConnectionL,prevConnectors);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(&nbsp;&nbsp; inputConnectionR <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppComment.htm">//</a>Connected to something<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),prevConnectors.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputConnectionR) <a href="CppOperatorEqual.htm">==</a> prevConnectors.end()) <a href="CppComment.htm">//</a>Not in loop<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnectionR-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audioInputL <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputConnectionR,prevConnectors);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;audioInput <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax.htm">std::max</a>(audioInputL, audioInputR);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; <a href="CppDial.htm">dial</a>Gain;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (channel)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel1: <a href="CppDial.htm">dial</a>Gain <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialGain1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel2: <a href="CppDial.htm">dial</a>Gain <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialGain2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel3: <a href="CppDial.htm">dial</a>Gain <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialGain3; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel4: <b><a href="CppBreak.htm">break</a></b>; <a href="CppComment.htm">//</a>Channel 4 does not have a gain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> gain <a href="CppOperatorAssign.htm">=</a> 2.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* (<a href="CppDial.htm">dial</a>Gain.get() <a href="CppOperatorNotEqual.htm">!=</a> 0 ? <a href="CppDial.htm">dial</a>Gain-&gt;GetRelPosition() : 1.0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> gain * audioInput;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>What is the output strength to MASTER of a certain channel?<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound4::Audio<a href="CppSignal.htm">Signal</a>MasterOutputStrength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Channel channel) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(channel <a href="CppOperatorEqual.htm">==</a> channel1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> channel <a href="CppOperatorEqual.htm">==</a> channel2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> channel <a href="CppOperatorEqual.htm">==</a> channel3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> channel <a href="CppOperatorEqual.htm">==</a> channel4);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Audio<a href="CppSignal.htm">Signal</a>InputStrength(connector,prevConnectors,channel);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> masterThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mFaderMaster-&gt;GetRelPosition();<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Fader&gt; fader;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (channel)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel1: fader <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mFader1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel2: fader <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mFader2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel3: fader <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mFader3; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel4: fader <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mFader4; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> micThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * fader-&gt;GetRelPosition();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioOut <a href="CppOperatorAssign.htm">=</a> audioInput * masterThroughput * micThroughput;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> audioOut;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>What is the output strength to AUX of a certain channel?<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> SimpleSound4::Audio<a href="CppSignal.htm">Signal</a>AuxOutputStrength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Channel channel,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Aux aux) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(channel <a href="CppOperatorEqual.htm">==</a> channel1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> channel <a href="CppOperatorEqual.htm">==</a> channel2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> channel <a href="CppOperatorEqual.htm">==</a> channel3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> channel <a href="CppOperatorEqual.htm">==</a> channel4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(aux <a href="CppOperatorEqual.htm">==</a> aux1 <a href="CppOperatorLogicalOr.htm">||</a> aux <a href="CppOperatorEqual.htm">==</a> aux2);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; <a href="CppDial.htm">dial</a>SendAux;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(aux)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> aux1 : <a href="CppDial.htm">dial</a>SendAux <a href="CppOperatorAssign.htm">=</a> mDialSendAux1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> aux2 : <a href="CppDial.htm">dial</a>SendAux <a href="CppOperatorAssign.htm">=</a> mDialSendAux2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppDial.htm">dial</a>SendAux.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Audio<a href="CppSignal.htm">Signal</a>InputStrength(connector,prevConnectors,channel);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sendAuxThroughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <a href="CppDial.htm">dial</a>SendAux-&gt;GetRelPosition();<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; <a href="CppDial.htm">dial</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (aux)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> aux1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (channel)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel1: <a href="CppDial.htm">dial</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialAux1_1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel2: <a href="CppDial.htm">dial</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialAux1_2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel3: <a href="CppDial.htm">dial</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialAux1_3; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel4: <a href="CppDial.htm">dial</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialAux1_4; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> aux2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (channel)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel1: <a href="CppDial.htm">dial</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialAux2_1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel2: <a href="CppDial.htm">dial</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialAux2_2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel3: <a href="CppDial.htm">dial</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialAux2_3; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> channel4: <a href="CppDial.htm">dial</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mDialAux2_4; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppDial.htm">dial</a>Throughput <a href="CppOperatorAssign.htm">=</a> 2.0 * <a href="CppDial.htm">dial</a>-&gt;GetRelPosition();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioOut <a href="CppOperatorAssign.htm">=</a> audioInput * sendAuxThroughput * <a href="CppDial.htm">dial</a>Throughput;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> audioOut;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> SimpleSound4::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;mPower.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mPower-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Power socket (euro male) not connected to <a href="CppAny.htm">any</a>thing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> powerSupply <a href="CppOperatorAssign.htm">=</a> otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (powerSupply &gt; 0.0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitSoundTable.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitSoundTable.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSoundTableH<br/>
<a href="CppDefine.htm">#define</a> UnitSoundTableH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "UnitEnumMachineType.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> Fader;<br/>
<b><a href="CppStruct.htm">struct</a></b> PressButton;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>;<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> Connector;<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection;<br/>
<b><a href="CppStruct.htm">struct</a></b> Audio<a href="CppSignal.htm">Signal</a>Display;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormSimpleSound1;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormSimpleSound2;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> SoundTable : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sound tables supply power to their displays<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; };<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have power?<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SoundTable can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~SoundTable() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(SoundTable *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitSoundTable.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitSoundTable.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitSoundTable.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitSpeaker.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitSpeaker.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSpeakerH<br/>
<a href="CppDefine.htm">#define</a> UnitSpeakerH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppComment.htm">//</a>View<br/>
<a href="CppComment.htm">//</a>Use<br/>
<b><a href="CppStruct.htm">struct</a></b> TwoSwitch;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDial.htm">Dial</a>;<br/>
<a href="CppComment.htm">//</a>Connectors<br/>
<b><a href="CppStruct.htm">struct</a></b> EuroMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> InternalConnection;<br/>
<b><a href="CppStruct.htm">struct</a></b> JackFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> SpeakonFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> XlrMale;<br/>
<a href="CppComment.htm">//</a>Display<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLed.htm">Led</a>;<br/>
<a href="CppComment.htm">//</a>Forms<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormRcf322A;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormRcfEvent3000;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Speaker : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Speakers supply power to <b><a href="CppFor.htm">for</a></b> example a power indication <a href="CppLed.htm">LED</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Speakers can be daisy-chained, so a speaker can supply an audio <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Speakers never send out DMX <b><a href="CppQtSignals.htm">signals</a></b><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> ) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have power?<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Speaker can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Speaker() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Speaker *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> PassiveSpeaker : <b><a href="CppPublic.htm">public</a></b> Speaker<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Speakers supply power to <b><a href="CppFor.htm">for</a></b> example a power indication <a href="CppLed.htm">LED</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Speakers can be daisy-chained, so a speaker can supply an audio <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Speaker can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or its descendants<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~PassiveSpeaker() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(PassiveSpeaker *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Rcf322A : <b><a href="CppPublic.htm">public</a></b> Speaker<br/>
{<br/>
&nbsp;&nbsp;Rcf322A();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have power?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>What is the sound output (with the limiter acting)?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetSoundLevel() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The maximal sound level before the limiter protection kicks in<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mMaxSoundLevel;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The sound level without the limiter acting<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetUnlimitedSoundLevel() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Rcf322A can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~Rcf322A() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(Rcf322A*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitch&gt; mPowerSwitch;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; mVolumeDial;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemale&gt; mJackInput;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt; mXlrDaisyChain;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt; mXlrInput;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt; mEuroMalePower;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt; mConnection<a href="CppLed.htm">Led</a>LimProt;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>Power;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt; m<a href="CppLed.htm">Led</a>LimProt;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormRcf322A;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> RcfEvent3000 : <b><a href="CppPublic.htm">public</a></b> PassiveSpeaker<br/>
{<br/>
&nbsp;&nbsp;RcfEvent3000();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>What is the sound output?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetSoundLevel() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The sound level without the limiter acting<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetUnlimitedSoundLevel() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>RcfEvent3000 can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~RcfEvent3000() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(RcfEvent3000*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemale&gt; mInput;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemale&gt; m<a href="CppLink.htm">Link</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormRcfEvent3000;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitSpeaker.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitSpeaker.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSpeaker.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplay.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Rcf322A::Rcf322A()<br/>
&nbsp;&nbsp;: mPowerSwitch(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TwoSwitch&gt;(<b><a href="CppNew.htm">new</a></b> TwoSwitch)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mVolumeDial(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mJackInput(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackFemale&gt;(<b><a href="CppNew.htm">new</a></b> JackFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mXlrDaisyChain(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrMale&gt;(<b><a href="CppNew.htm">new</a></b> XlrMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mXlrInput(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;XlrFemale&gt;(<b><a href="CppNew.htm">new</a></b> XlrFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mEuroMalePower(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;EuroMale&gt;(<b><a href="CppNew.htm">new</a></b> EuroMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>Power(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mConnection<a href="CppLed.htm">Led</a>LimProt(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InternalConnection&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InternalConnection(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMaxSoundLevel(1.5)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m<a href="CppLed.htm">Led</a>Power is green<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>Power <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>Power.get(),0,255,0));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m<a href="CppLed.htm">Led</a>LimProt is red<br/>
&nbsp;&nbsp;m<a href="CppLed.htm">Led</a>LimProt <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppLed.htm">Led</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLed.htm">Led</a>(mConnection<a href="CppLed.htm">Led</a>LimProt.get(),255,0,0));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> Rcf322A::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mEuroMalePower-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (belongsTo-&gt;PowerSupplyStrength(connectedTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()) &gt; 0.0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Rcf322A::PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; <a href="CppComment.htm">/*</a> prevConnectors <a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>Power.get() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The <a href="CppLed.htm">LED</a> has power <b><a href="CppIf.htm">if</a></b> the speaker is connected to something that can<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>supply power<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>AND its power is on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( <b><a href="CppThis.htm">this</a></b>-&gt;mPowerSwitch-&gt;IsOn() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mEuroMalePower-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0; <a href="CppComment.htm">//</a>Connected to nothing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> belongsTo <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(belongsTo <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (belongsTo-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()) &gt; 0.0) <b><a href="CppReturn.htm">return</a></b> 1.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mConnection<a href="CppLed.htm">Led</a>LimProt.get() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The Limiter protection <a href="CppLed.htm">LED</a> indicates <b><a href="CppIf.htm">if</a></b> unlimited sound level is above 1.5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;GetUnlimitedSoundLevel() &gt; mMaxSoundLevel) <b><a href="CppReturn.htm">return</a></b> 1.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>The sound level without the limiter acting<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Rcf322A::GetUnlimitedSoundLevel() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> soundLevel <a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppThis.htm">this</a></b>-&gt;mVolumeDial-&gt;GetRelPosition()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* <a href="CppStdMax.htm">std::max</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(mJackInput.get(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(mXlrInput.get(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()) );<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> soundLevel;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>The sound level with the limiter acting<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Rcf322A::GetSoundLevel() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> soundLevel <a href="CppOperatorAssign.htm">=</a> GetUnlimitedSoundLevel();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMin.htm">std::min</a>(soundLevel,mMaxSoundLevel);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Rcf322A::Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(connector <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must have power<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;HasPower() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must have power <b><a href="CppSwitch.htm">switch</a></b> on<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;mPowerSwitch-&gt;IsOn() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>'Forward' the audio <a href="CppSignal.htm">signal</a> received<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No enhancement by volume <a href="CppDial.htm">dial</a>!<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnectionXlr&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mXlrInput-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnectionJack <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mJackInput-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnectionXlr <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> inputConnectionJack <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prevent loops of connection<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( (<a href="CppStdFind.htm">std::find</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prevConnectors.begin(),prevConnectors.end(),inputConnectionXlr)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorNotEqual.htm">!=</a> prevConnectors.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),prevConnectors.end(),inputConnectionJack)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorNotEqual.htm">!=</a> prevConnectors.end()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputConnectionXlr&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> inputConnectionXlr-&gt;mBelongsTo&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputConnectionJack <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> inputConnectionJack-&gt;mBelongsTo <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audio<a href="CppSignal.htm">Signal</a>StrengthXlr&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (inputConnectionXlr&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? inputConnectionXlr-&gt;mBelongsTo-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(inputConnectionXlr,prevConnectors)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audio<a href="CppSignal.htm">Signal</a>StrengthJack <a href="CppOperatorAssign.htm">=</a> (inputConnectionJack <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? inputConnectionJack-&gt;mBelongsTo-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(inputConnectionJack,prevConnectors)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMax.htm">std::max</a>(audio<a href="CppSignal.htm">Signal</a>StrengthJack,audio<a href="CppSignal.htm">Signal</a>StrengthXlr);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
RcfEvent3000::RcfEvent3000()<br/>
&nbsp;&nbsp;: mInput(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemale&gt;(<b><a href="CppNew.htm">new</a></b> SpeakonFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppLink.htm">Link</a>(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpeakonFemale&gt;(<b><a href="CppNew.htm">new</a></b> SpeakonFemale(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> RcfEvent3000::GetSoundLevel() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(m<a href="CppLink.htm">Link</a>.get(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> RcfEvent3000::Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(connector <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only the <a href="CppLink.htm">Link</a> speakon female will supply audio<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorNotEqual.htm">!=</a> m<a href="CppLink.htm">Link</a>.get() ) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>'Forward' the audio <a href="CppSignal.htm">signal</a> received<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No enhancement by volume <a href="CppDial.htm">dial</a>!<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnection&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mInput-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnection <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prevent loops of connection<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( <a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),prevConnectors.end(),inputConnection)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorNotEqual.htm">!=</a> prevConnectors.end() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audio<a href="CppSignal.htm">Signal</a>Strength<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> inputConnection-&gt;mBelongsTo-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputConnection,prevConnectors);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> audio<a href="CppSignal.htm">Signal</a>Strength;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitTapButton.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitTapButton.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitTapButtonH<br/>
<a href="CppDefine.htm">#define</a> UnitTapButtonH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMemFunCommand.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExport.htm">export</a></b> <b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> TapButton : <b><a href="CppPublic.htm">public</a></b> Controller<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppVoid.htm">void</a></b> (T::* MemFunPtr)();<br/>
<br/>
&nbsp;&nbsp;TapButton(T * <b><a href="CppConst.htm">const</a></b> target, <b><a href="CppConst.htm">const</a></b> MemFunPtr command)<br/>
&nbsp;&nbsp;: mCommand(target,command)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tap()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mCommand.Execute();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MemFunCommand&lt;T&gt; mCommand;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TapButton can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~TapButton() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(TapButton *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitTapButton.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitTapButton.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitTapButton.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppExport.htm">export</a></b> <b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
TapButton&lt;T&gt;::TapButton(T * <b><a href="CppConst.htm">const</a></b> target, <b><a href="CppConst.htm">const</a></b> MemFunPtr command)<br/>
&nbsp;&nbsp;: mCommand(target,command)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExport.htm">export</a></b> <b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppVoid.htm">void</a></b> TapButton&lt;T&gt;::Tap()<br/>
{<br/>
&nbsp;&nbsp;mCommand.Execute();<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitTapButtonControl.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitTapButtonControl.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitTapButtonControlH<br/>
<a href="CppDefine.htm">#define</a> UnitTapButtonControlH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitControllerControl.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitTapButton.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExport.htm">export</a></b> <b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> TapButtonControl : <b><a href="CppPublic.htm">public</a></b> ControllerControl<br/>
{<br/>
&nbsp;&nbsp;TapButtonControl(TFormMachine * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButton&lt;T&gt; &gt; tapButton,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: ControllerControl(formParent,image),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mTapButton(tapButton),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mImage(image)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mTapButton.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImage <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midX <a href="CppOperatorAssign.htm">=</a> mImage-&gt;Width <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midY <a href="CppOperatorAssign.htm">=</a> mImage-&gt;Height <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x <a href="CppOperatorMinus.htm">-</a> midX),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y <a href="CppOperatorMinus.htm">-</a> midY));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdMin.htm">std::min</a>( midX, midY ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetDistance.htm">GetDistance</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x <a href="CppOperatorMinus.htm">-</a> midX),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y <a href="CppOperatorMinus.htm">-</a> midY) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distance &lt; ray )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mTapButton-&gt;Tap();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Notify the parent of <b><a href="CppThis.htm">this</a></b> event<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnControllerClick();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButton&lt;T&gt; &gt; mTapButton;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> mImage;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TapButtonControl can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~TapButtonControl() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(TapButtonControl *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitTapButtonControl.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitTapButtonControl.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitTapButtonControl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppExport.htm">export</a></b> <b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
TapButtonControl&lt;T&gt;::TapButtonControl(TFormMachine * <b><a href="CppConst.htm">const</a></b> formParent,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TapButton&lt;T&gt; &gt; tapButton,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;: ControllerControl(formParent,image),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mTapButton(tapButton),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mImage(image)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mTapButton.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mImage <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExport.htm">export</a></b> <b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> TapButtonControl&lt;T&gt;::OnMouseDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midX <a href="CppOperatorAssign.htm">=</a> mImage-&gt;Width <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midY <a href="CppOperatorAssign.htm">=</a> mImage-&gt;Height <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x <a href="CppOperatorMinus.htm">-</a> midX),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y <a href="CppOperatorMinus.htm">-</a> midY));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdMin.htm">std::min</a>( midX, midY ));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetDistance.htm">GetDistance</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x <a href="CppOperatorMinus.htm">-</a> midX),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y <a href="CppOperatorMinus.htm">-</a> midY) );<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distance &gt; 0.25 * ray <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (angle &lt; 0.75 * <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorLogicalOr.htm">||</a> angle &gt; 1.25 * <a href="CppM_PI.htm">M_PI</a> ) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mTapButton-&gt;Tap();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Notify the parent of <b><a href="CppThis.htm">this</a></b> event<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFormParent-&gt;OnControllerClick();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitTransitionPiece.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitTransitionPiece.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitTransitionPieceH<br/>
<a href="CppDefine.htm">#define</a> UnitTransitionPieceH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> JackMale;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchRedFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> CinchWhiteFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormTransitionPieceJackMaleTwoCinchFemale;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> TransitionPiece : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;TransitionPiece() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dmxChannel) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~TransitionPiece() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TransitionPiece can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>or descandants<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(TransitionPiece *);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> TransitionPieceJackMaleTwoCinchFemale : <b><a href="CppPublic.htm">public</a></b> TransitionPiece<br/>
{<br/>
&nbsp;&nbsp;TransitionPieceJackMaleTwoCinchFemale();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;~TransitionPieceJackMaleTwoCinchFemale() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TransitionPieceJackMaleTwoCinchFemale can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(TransitionPieceJackMaleTwoCinchFemale *);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackMale&gt; mJack;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemale&gt; mCinchL;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemale&gt; mCinchR;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormTransitionPieceJackMaleTwoCinchFemale;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitTransitionPiece.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitTransitionPiece.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitTransitionPiece.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplay.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
TransitionPieceJackMaleTwoCinchFemale::TransitionPieceJackMaleTwoCinchFemale()<br/>
&nbsp;&nbsp;: mJack(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;JackMale&gt;(<b><a href="CppNew.htm">new</a></b> JackMale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mCinchL(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchWhiteFemale&gt;(<b><a href="CppNew.htm">new</a></b> CinchWhiteFemale(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mCinchR(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CinchRedFemale&gt;(<b><a href="CppNew.htm">new</a></b> CinchRedFemale(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> TransitionPieceJackMaleTwoCinchFemale::Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connector <a href="CppOperatorEqual.htm">==</a> mJack.get() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputL <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mCinchL-&gt;GetConnectedTo();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> audioInputL <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputL <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),prevConnectors.end(),inputL)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> prevConnectors.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Correct connection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputL-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audioInputL <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(inputL,prevConnectors);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputR <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mCinchR-&gt;GetConnectedTo();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> audioInputR <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputR <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),prevConnectors.end(),inputR)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> prevConnectors.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Correct connection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputR-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audioInputL <a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(inputR,prevConnectors);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMax.htm">std::max</a>(audioInputL,audioInputR);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(connector <a href="CppOperatorEqual.htm">==</a> mCinchL.get() <a href="CppOperatorLogicalOr.htm">||</a> connector <a href="CppOperatorEqual.htm">==</a> mCinchR.get());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> input <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;mJack-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (input <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),prevConnectors.end(),input)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> prevConnectors.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Correct connection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> input-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> audioInput<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> inputMachine-&gt;Audio<a href="CppSignal.htm">Signal</a>Strength(input,prevConnectors);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> audioInput;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitTriplet.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitTriplet.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> Unit<a href="CppTriple.htm">Triple</a>tH<br/>
<a href="CppDefine.htm">#define</a> Unit<a href="CppTriple.htm">Triple</a>tH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> TwoSwitch;<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> Connector;<br/>
<b><a href="CppStruct.htm">struct</a></b> Plug220;<br/>
<b><a href="CppStruct.htm">struct</a></b> Socket220;<br/>
<b><a href="CppStruct.htm">struct</a></b> TForm<a href="CppTriple.htm">Triple</a>t;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppTriple.htm">Triple</a>t : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTriple.htm">Triple</a>t();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This depends on the connector, especially on a dimmer pack<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dmxChannel) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220&gt; mPlug;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; mSocket220_1;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; mSocket220_2;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; mSocket220_3;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TForm<a href="CppTriple.htm">Triple</a>t;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTriple.htm">Triple</a>t can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~<a href="CppTriple.htm">Triple</a>t() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(<a href="CppTriple.htm">Triple</a>t *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitTriplet.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitTriplet.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitController.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppTriple.htm">Triple</a>t.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppTriple.htm">Triple</a>t::<a href="CppTriple.htm">Triple</a>t()<br/>
&nbsp;&nbsp;: mPlug(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Plug220&gt;(<b><a href="CppNew.htm">new</a></b> Plug220(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSocket220_1(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt;(<b><a href="CppNew.htm">new</a></b> Socket220(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSocket220_2(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt;(<b><a href="CppNew.htm">new</a></b> Socket220(<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSocket220_3(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt;(<b><a href="CppNew.htm">new</a></b> Socket220(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppTriple.htm">Triple</a>t::PowerSupplyStrength(<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connector,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt; prevConnectors) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power of the Machine the plug is connected to<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> inputConnection <a href="CppOperatorAssign.htm">=</a> mPlug-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connected to something?<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (inputConnection <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prevent loops of connection<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdFind.htm">std::find</a>(prevConnectors.begin(),prevConnectors.end(),inputConnection)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> prevConnectors.end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> inputMachine <a href="CppOperatorAssign.htm">=</a> inputConnection-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(inputMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Everything okay...<br/>
&nbsp;&nbsp;prevConnectors.push_back(connector); <a href="CppComment.htm">//</a>We just checked connector...<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> inputMachine-&gt;PowerSupplyStrength(inputConnection,prevConnectors);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppTriple.htm">Triple</a>t::HasPower() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power of the Machine the plug is connected to<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b> connectedTo <a href="CppOperatorAssign.htm">=</a> mPlug-&gt;GetConnectedTo();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connectedTo <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Machine * <b><a href="CppConst.htm">const</a></b> otherMachine <a href="CppOperatorAssign.htm">=</a> connectedTo-&gt;mBelongsTo;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(otherMachine <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (otherMachine <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>) <b><a href="CppReturn.htm">return</a></b> 0.0; <a href="CppComment.htm">//</a><a href="CppTriple.htm">Triple</a>t is connected to itself<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (otherMachine-&gt;PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;connectedTo,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;()) &gt; 0.0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitVcl.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitVcl.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitVclH<br/>
<a href="CppDefine.htm">#define</a> UnitVclH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt; <a href="CppComment.htm">//</a>For TColor<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Extctrls { <b><a href="CppStruct.htm">struct</a></b> <a href="CppTImage.htm">TImage</a>; }<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Forms { <b><a href="CppStruct.htm">struct</a></b> TForm; }<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Makes all red pixels even, except when there's a message pixel<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppAdd.htm">Add</a>MessageRed.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>MessageRed(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> original,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> message,<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> result);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Blacken(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> intensity);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> CreateWatermark(<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> original,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DrawAudio<a href="CppSignal.htm">Signal</a>(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> intensity);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DrawDial(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Graphics::TColor color <a href="CppOperatorAssign.htm">=</a> clGray);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DrawFader(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> faderY);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DrawLamp(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> brightness,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> red, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> green, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> blue);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Draw<a href="CppLed.htm">Led</a>(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppLed.htm">led</a>Brightness,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> red, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> green, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> blue);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Get a pixel's RGB values<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPixel.htm">GetPixel</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGetPixel.htm">GetPixel</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>&amp; red,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>&amp; green,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>&amp; blue);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; GetRectsHorizontal(<b><a href="CppConst.htm">const</a></b> TRect&amp; rect, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRects);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; GetRectsVertical(<b><a href="CppConst.htm">const</a></b> TRect&amp; rect, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRects);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Y-X-ordered<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; GetRectsGrid(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TRect&amp; rect, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nCols, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRows);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> IsWhite(<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> OnImage(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppPaint.htm">Paint</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>Vcl(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue&nbsp;&nbsp;);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppPaint.htm">Paint</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>Vcl(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> Graphics::TColor color);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlaceInCenter(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> TRect&amp; rect);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlaceInCenter(Forms::TForm * <b><a href="CppConst.htm">const</a></b> form, <b><a href="CppConst.htm">const</a></b> TRect&amp; rect);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> TRect MergeRects(<b><a href="CppConst.htm">const</a></b> TRect&amp; r1, <b><a href="CppConst.htm">const</a></b> TRect&amp; r2);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Set a pixel's RGB values<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppSetPixel.htm<br/>
<b><a href="CppVoid.htm">void</a></b> SetPixel(<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SetSize(Graphics::TBitmap * <b><a href="CppConst.htm">const</a></b> bitmap, <b><a href="CppConst.htm">const</a></b> TRect&amp; rect);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitVcl.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitVcl.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppFunction.htm">Function</a>s.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitVcl.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Makes all red pixels even, except when there's a message pixel<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppAdd.htm">Add</a>MessageRed.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>MessageRed(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> original,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> message,<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> result)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(original<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Image is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(message<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Image is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(result<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Image is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(original-&gt;Picture-&gt;Bitmap<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(message-&gt;Picture-&gt;Bitmap<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(result-&gt;Picture-&gt;Bitmap<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(original-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap must be 24 bit");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(message-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap must be 24 bit");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(result-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap must be 24 bit");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get sizes and set size<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> widthOriginal <a href="CppOperatorAssign.htm">=</a> original-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> widthMessage&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> message-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(widthOriginal, widthMessage);<br/>
&nbsp;&nbsp;result-&gt;Picture-&gt;Bitmap-&gt;Width <a href="CppOperatorAssign.htm">=</a> width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> heightOriginal <a href="CppOperatorAssign.htm">=</a> original-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> heightMessage&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> message-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(heightOriginal, heightMessage);<br/>
&nbsp;&nbsp;result-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> height;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the pixel offsets<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dx1 <a href="CppOperatorAssign.htm">=</a> (widthOriginal&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> width ) <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dx2 <a href="CppOperatorAssign.htm">=</a> (widthMessage&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> width ) <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dy1 <a href="CppOperatorAssign.htm">=</a> (heightOriginal <a href="CppOperatorMinus.htm">-</a> height) <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dy2 <a href="CppOperatorAssign.htm">=</a> (heightMessage&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> height) <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dx1 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dx2 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dy1 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dy2 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1 <a href="CppOperatorAssign.htm">=</a> dx1 <a href="CppOperatorPlus.htm">+</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2 <a href="CppOperatorAssign.htm">=</a> dx2 <a href="CppOperatorPlus.htm">+</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x3 <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x1 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x2 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x3 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x1 &lt; original-&gt;Picture-&gt;Width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x2 &lt; message-&gt;Picture-&gt;Width );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x3 &lt; result-&gt;Picture-&gt;Width&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1 <a href="CppOperatorAssign.htm">=</a> dy1 <a href="CppOperatorPlus.htm">+</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y2 <a href="CppOperatorAssign.htm">=</a> dy2 <a href="CppOperatorPlus.htm">+</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y3 <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y1 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y2 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y3 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y1 &lt; original-&gt;Picture-&gt;Height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y2 &lt; message-&gt;Picture-&gt;Height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y3 &lt; result-&gt;Picture-&gt;Height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get original's pixel<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGetPixel.htm">GetPixel</a>(original,x1,y1,r,g,b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make colors even by increment, watch out <b><a href="CppFor.htm">for</a></b> 256<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r%2 <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r <a href="CppOperatorEqual.htm">==</a> 255) {<a href="CppOperatorDecrement.htm">--</a>r;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> { <a href="CppOperatorIncrement.htm">++</a>r; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r%2 <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r <a href="CppOperatorLessEqual.htm">&lt;=</a> 254);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> message<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> isWhite <a href="CppOperatorAssign.htm">=</a> IsWhite(message,x2,y2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (isWhite <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) <a href="CppOperatorIncrement.htm">++</a>r;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write to result image<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetPixel(result,x3,y3,r,g,b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Blacken(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> intensity)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> r <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[(x*3)+2] ) * (1.0 <a href="CppOperatorMinus.htm">-</a> intensity) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> g <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[(x*3)+1] ) * (1.0 <a href="CppOperatorMinus.htm">-</a> intensity) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[(x*3)+0] ) * (1.0 <a href="CppOperatorMinus.htm">-</a> intensity) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0); <a href="CppAssert.htm">assert</a>( r &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0); <a href="CppAssert.htm">assert</a>( g &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0); <a href="CppAssert.htm">assert</a>( b &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[(x*3)+2] <a href="CppOperatorAssign.htm">=</a> r; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[(x*3)+1] <a href="CppOperatorAssign.htm">=</a> g; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[(x*3)+0] <a href="CppOperatorAssign.htm">=</a> b; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> CreateWatermark(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> original,<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(original <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(original-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(original-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> original-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> original-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> maxx;<br/>
&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> maxy;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> lineRead<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(original-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> lineWrite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> grey <a href="CppOperatorAssign.htm">=</a> ( lineRead[(x*3)+0] <a href="CppOperatorPlus.htm">+</a> lineRead[(x*3)+2]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> lineRead[(x*3)+2] ) <a href="CppOperatorDivide.htm">/</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineWrite[(x*3)+2] <a href="CppOperatorAssign.htm">=</a> (grey <a href="CppOperatorPlus.htm">+</a> 256) <a href="CppOperatorDivide.htm">/</a> 2 ; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineWrite[(x*3)+1] <a href="CppOperatorAssign.htm">=</a> (grey <a href="CppOperatorPlus.htm">+</a> 256) <a href="CppOperatorDivide.htm">/</a> 2; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineWrite[(x*3)+0] <a href="CppOperatorAssign.htm">=</a> (grey <a href="CppOperatorPlus.htm">+</a> 256) <a href="CppOperatorDivide.htm">/</a> 2; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DrawAudio<a href="CppSignal.htm">Signal</a>(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> intensity)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dy <a href="CppOperatorAssign.htm">=</a> height <a href="CppOperatorDivide.htm">/</a> 10;<br/>
<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color <a href="CppOperatorAssign.htm">=</a> clBlack;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> 1;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>1x red on top<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> (intensity &gt; 1.500 ? clRed : clWhite);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;<a href="CppRectangle.htm">Rectangle</a>(0,0*dy,width, 1*dy);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>3x orange<br/>
&nbsp;&nbsp;TColor clOrange <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TColor&gt;(RGB(255,127,0));<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> (intensity &gt; 1.333 ? clOrange : clWhite);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;<a href="CppRectangle.htm">Rectangle</a>(0,1*dy,width, 2*dy);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> (intensity &gt; 1.167 ? clOrange : clWhite);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;<a href="CppRectangle.htm">Rectangle</a>(0,2*dy,width, 3*dy);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> (intensity &gt; 1.000 ? clOrange : clWhite);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;<a href="CppRectangle.htm">Rectangle</a>(0,3*dy,width, 4*dy);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>6x green<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> (intensity &gt; 0.833 ? clLime : clWhite);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;<a href="CppRectangle.htm">Rectangle</a>(0,4*dy,width, 5*dy);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> (intensity &gt; 0.667 ? clLime : clWhite);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;<a href="CppRectangle.htm">Rectangle</a>(0,5*dy,width, 6*dy);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> (intensity &gt; 0.500 ? clLime : clWhite);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;<a href="CppRectangle.htm">Rectangle</a>(0,6*dy,width, 7*dy);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> (intensity &gt; 0.333 ? clLime : clWhite);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;<a href="CppRectangle.htm">Rectangle</a>(0,7*dy,width, 8*dy);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> (intensity &gt; 0.167 ? clLime : clWhite);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;<a href="CppRectangle.htm">Rectangle</a>(0,8*dy,width, 9*dy);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> (intensity &gt; 0.000 ? clLime : clWhite);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;<a href="CppRectangle.htm">Rectangle</a>(0,9*dy,width,10*dy);<br/>
<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DrawDial(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Graphics::TColor color)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clear image<br/>
&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clLime;<br/>
&nbsp;&nbsp;<a href="CppPaint.htm">Paint</a>Vcl(image,clLime);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw knob<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color <a href="CppOperatorAssign.htm">=</a> clBlack;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> color;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Ellipse(0,0,width,height);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midX <a href="CppOperatorAssign.htm">=</a> width <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midY <a href="CppOperatorAssign.htm">=</a> height <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdMin.htm">std::min</a>( midX, midY ));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x <a href="CppOperatorMinus.htm">-</a> midX),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y <a href="CppOperatorMinus.htm">-</a> midY));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">pointer</a>X<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(midX) <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdSin.htm">std::sin</a>(angle) * ray) );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">pointer</a>Y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(midY) <a href="CppOperatorMinus.htm">-</a> (<a href="CppStdCos.htm">std::cos</a>(angle) * ray) );<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;MoveTo(midX,midY);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;LineTo(<a href="CppPointer.htm">pointer</a>X,<a href="CppPointer.htm">pointer</a>Y);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DrawFader(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> faderY)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faderY <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faderY &lt; height);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> trenchWidth <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> trenchMidX <a href="CppOperatorAssign.htm">=</a> width <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> faderHeight <a href="CppOperatorAssign.htm">=</a> width <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> faderMidY <a href="CppOperatorAssign.htm">=</a> (faderY &lt; (faderHeight <a href="CppOperatorDivide.htm">/</a> 2) ? (faderHeight <a href="CppOperatorDivide.htm">/</a> 2) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(faderY <a href="CppOperatorPlus.htm">+</a> (faderHeight <a href="CppOperatorDivide.htm">/</a> 2) &gt; height ? height <a href="CppOperatorMinus.htm">-</a> (faderHeight <a href="CppOperatorDivide.htm">/</a> 2)&nbsp;&nbsp; :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;faderY));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clear image<br/>
&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;TransparentColor <a href="CppOperatorAssign.htm">=</a> clLime;<br/>
&nbsp;&nbsp;<a href="CppPaint.htm">Paint</a>Vcl(image,clLime);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw vertical trench<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> trenchWidth;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color <a href="CppOperatorAssign.htm">=</a> clBlack;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> clGray;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;MoveTo(trenchMidX, 0);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;LineTo(trenchMidX, height);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw fader<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;<a href="CppRectangle.htm">Rectangle</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;faderMidY&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> (faderHeight <a href="CppOperatorDivide.htm">/</a> 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;width <a href="CppOperatorMinus.htm">-</a> 1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;faderMidY&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (faderHeight <a href="CppOperatorDivide.htm">/</a> 2));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DrawLamp(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> brightness,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> red, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> green, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> blue)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(brightness <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(brightness <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create transparent background with inverted color<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (red <a href="CppOperatorEqual.htm">==</a> 255 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> green <a href="CppOperatorEqual.htm">==</a> 255 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> blue <a href="CppOperatorEqual.htm">==</a> 255)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPaint.htm">Paint</a>Vcl(image,0,255,0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPaint.htm">Paint</a>Vcl(image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;255 <a href="CppOperatorMinus.htm">-</a> red,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;255 <a href="CppOperatorMinus.htm">-</a> green,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;255 <a href="CppOperatorMinus.htm">-</a> blue);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fraction red/green/blue<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fR <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(red&nbsp;&nbsp;) <a href="CppOperatorDivide.htm">/</a> 255.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fG <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(green) <a href="CppOperatorDivide.htm">/</a> 255.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fB <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(blue ) <a href="CppOperatorDivide.htm">/</a> 255.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw circle<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxBrightness <a href="CppOperatorAssign.htm">=</a> 1.00* 255.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> minBrightness <a href="CppOperatorAssign.htm">=</a> 0.00 * maxBrightness;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdMin.htm">std::min</a>(width,height) <a href="CppOperatorDivide.htm">/</a> 25);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color <a href="CppOperatorAssign.htm">=</a> clBlack;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> r <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;minBrightness <a href="CppOperatorPlus.htm">+</a> (fR * brightness * (maxBrightness <a href="CppOperatorMinus.htm">-</a> minBrightness) ) );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> g <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;minBrightness <a href="CppOperatorPlus.htm">+</a> (fG * brightness * (maxBrightness <a href="CppOperatorMinus.htm">-</a> minBrightness) ) );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;minBrightness <a href="CppOperatorPlus.htm">+</a> (fB * brightness * (maxBrightness <a href="CppOperatorMinus.htm">-</a> minBrightness) ) );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 ); <a href="CppAssert.htm">assert</a>( r &lt; 256);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 ); <a href="CppAssert.htm">assert</a>( g &lt; 256);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 ); <a href="CppAssert.htm">assert</a>( b &lt; 256);<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TColor&gt;(RGB(r,g,b));<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Ellipse(0,0,width,height);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Draw<a href="CppLed.htm">Led</a>(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppLed.htm">led</a>Brightness,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> red, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> green, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> blue)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppLed.htm">led</a>Brightness <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppLed.htm">led</a>Brightness <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create transparent background with inverted color<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (red <a href="CppOperatorEqual.htm">==</a> 255 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> green <a href="CppOperatorEqual.htm">==</a> 255 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> blue <a href="CppOperatorEqual.htm">==</a> 255)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPaint.htm">Paint</a>Vcl(image,0,255,0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPaint.htm">Paint</a>Vcl(image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;255 <a href="CppOperatorMinus.htm">-</a> red,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;255 <a href="CppOperatorMinus.htm">-</a> green,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;255 <a href="CppOperatorMinus.htm">-</a> blue);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fraction red/green/blue<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fR <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(red&nbsp;&nbsp;) <a href="CppOperatorDivide.htm">/</a> 255.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fG <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(green) <a href="CppOperatorDivide.htm">/</a> 255.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fB <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(blue ) <a href="CppOperatorDivide.htm">/</a> 255.0;<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw circle and major surface<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxBrightness <a href="CppOperatorAssign.htm">=</a> 0.66 * 255.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> minBrightness <a href="CppOperatorAssign.htm">=</a> 0.25 * maxBrightness;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdMin.htm">std::min</a>(width,height) <a href="CppOperatorDivide.htm">/</a> 25);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color <a href="CppOperatorAssign.htm">=</a> clBlack;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> r <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minBrightness <a href="CppOperatorPlus.htm">+</a> (fR * <a href="CppLed.htm">led</a>Brightness * (maxBrightness <a href="CppOperatorMinus.htm">-</a> minBrightness) ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> g <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minBrightness <a href="CppOperatorPlus.htm">+</a> (fG * <a href="CppLed.htm">led</a>Brightness * (maxBrightness <a href="CppOperatorMinus.htm">-</a> minBrightness) ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minBrightness <a href="CppOperatorPlus.htm">+</a> (fB * <a href="CppLed.htm">led</a>Brightness * (maxBrightness <a href="CppOperatorMinus.htm">-</a> minBrightness) ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 ); <a href="CppAssert.htm">assert</a>( r &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 ); <a href="CppAssert.htm">assert</a>( g &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 ); <a href="CppAssert.htm">assert</a>( b &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TColor&gt;(RGB(r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Ellipse(0,0,width,height);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw topleft smaller lighter surface<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxBrightness <a href="CppOperatorAssign.htm">=</a> 1.00 * 255.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> minBrightness <a href="CppOperatorAssign.htm">=</a> 0.25 * maxBrightness;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> r <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minBrightness <a href="CppOperatorPlus.htm">+</a> (fR * <a href="CppLed.htm">led</a>Brightness * (maxBrightness <a href="CppOperatorMinus.htm">-</a> minBrightness) ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> g <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minBrightness <a href="CppOperatorPlus.htm">+</a> (fG * <a href="CppLed.htm">led</a>Brightness * (maxBrightness <a href="CppOperatorMinus.htm">-</a> minBrightness) ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minBrightness <a href="CppOperatorPlus.htm">+</a> (fB * <a href="CppLed.htm">led</a>Brightness * (maxBrightness <a href="CppOperatorMinus.htm">-</a> minBrightness) ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 ); <a href="CppAssert.htm">assert</a>( r &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 ); <a href="CppAssert.htm">assert</a>( g &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 ); <a href="CppAssert.htm">assert</a>( b &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TColor&gt;(RGB(r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TColor&gt;(RGB(r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1 <a href="CppOperatorAssign.htm">=</a> (width&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> (0.707 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width ) * 0.5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1 <a href="CppOperatorAssign.htm">=</a> (height <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> (0.707 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(height) * 0.5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2 <a href="CppOperatorAssign.htm">=</a> width <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y2 <a href="CppOperatorAssign.htm">=</a> height <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Ellipse(x1,y1,x2,y2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw bottomright smaller lighter surface<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxBrightness <a href="CppOperatorAssign.htm">=</a> 0.33 * 255.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> minBrightness <a href="CppOperatorAssign.htm">=</a> 0.25 * maxBrightness;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> r <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minBrightness <a href="CppOperatorPlus.htm">+</a> (fR * <a href="CppLed.htm">led</a>Brightness * (maxBrightness <a href="CppOperatorMinus.htm">-</a> minBrightness) ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> g <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minBrightness <a href="CppOperatorPlus.htm">+</a> (fG * <a href="CppLed.htm">led</a>Brightness * (maxBrightness <a href="CppOperatorMinus.htm">-</a> minBrightness) ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minBrightness <a href="CppOperatorPlus.htm">+</a> (fB * <a href="CppLed.htm">led</a>Brightness * (maxBrightness <a href="CppOperatorMinus.htm">-</a> minBrightness) ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 ); <a href="CppAssert.htm">assert</a>( r &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 ); <a href="CppAssert.htm">assert</a>( g &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 ); <a href="CppAssert.htm">assert</a>( b &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TColor&gt;(RGB(r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TColor&gt;(RGB(r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1 <a href="CppOperatorAssign.htm">=</a> (width&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1 <a href="CppOperatorAssign.htm">=</a> (height <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2 <a href="CppOperatorAssign.htm">=</a> (width&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorPlus.htm">+</a> (0.707 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width ) * 0.5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y2 <a href="CppOperatorAssign.htm">=</a> (height <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorPlus.htm">+</a> (0.707 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(height) * 0.5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Ellipse(x1,y1,x2,y2);<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Get a pixel's RGB values<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPixel.htm">GetPixel</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGetPixel.htm">GetPixel</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>&amp; red,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>&amp; green,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>&amp; blue)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Image is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap must be 24 bit");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "x coordinat is below zero");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "y coordinat is below zero");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x &lt; image-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "x coordinat is beyond image width");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y &lt; image-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "y coordinat is beyond image height");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
<br/>
&nbsp;&nbsp;red&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> line[x*3+2];<br/>
&nbsp;&nbsp;green <a href="CppOperatorAssign.htm">=</a> line[x*3+1];<br/>
&nbsp;&nbsp;blue&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> line[x*3+0];<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; GetRectsHorizontal(<b><a href="CppConst.htm">const</a></b> TRect&amp; rect, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRects)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nRects &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; rects;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dx <a href="CppOperatorAssign.htm">=</a> rect.Width() <a href="CppOperatorDivide.htm">/</a> nRects;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nRects; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRect r;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;r.Left <a href="CppOperatorAssign.htm">=</a> rect.Left <a href="CppOperatorPlus.htm">+</a> (i * dx);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;r.Right <a href="CppOperatorAssign.htm">=</a> r.left <a href="CppOperatorPlus.htm">+</a> dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;r.Top <a href="CppOperatorAssign.htm">=</a> rect.Top;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;r.Bottom <a href="CppOperatorAssign.htm">=</a> rect.Bottom;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rects.push_back(r);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rects;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; GetRectsVertical(<b><a href="CppConst.htm">const</a></b> TRect&amp; rect, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRects)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nRects &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; rects;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dy <a href="CppOperatorAssign.htm">=</a> rect.Height() <a href="CppOperatorDivide.htm">/</a> nRects;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nRects; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRect r;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;r.Left <a href="CppOperatorAssign.htm">=</a> rect.Left;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;r.Right <a href="CppOperatorAssign.htm">=</a> rect.Right;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;r.Top <a href="CppOperatorAssign.htm">=</a> rect.Top <a href="CppOperatorPlus.htm">+</a> (i * dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;r.Bottom <a href="CppOperatorAssign.htm">=</a> r.Top <a href="CppOperatorPlus.htm">+</a> dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rects.push_back(r);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rects;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Y-X-ordered<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; GetRectsGrid(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TRect&amp; rect, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nCols, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRows)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nCols &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nRows &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; rowRects <a href="CppOperatorAssign.htm">=</a> GetRectsVertical(rect,nRows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nRows <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rowRects.size()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; &gt; rects(nRows,<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt;(nCols));<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nRows; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TRect&gt; row(GetRectsHorizontal(rowRects[i],nCols));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rects[i] <a href="CppOperatorAssign.htm">=</a> row;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nRows <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rects.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nCols <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rects[0].size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rects;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> IsWhite(<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppGetPixel.htm">GetPixel</a>(image,x,y,r,g,b);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sum <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(r)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(g)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(b);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (sum <a href="CppOperatorDivide.htm">/</a> 3 &gt; 127);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> OnImage(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ( x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> image-&gt;Left<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x &lt; image-&gt;Left <a href="CppOperatorPlus.htm">+</a> image-&gt;Width<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> image-&gt;Top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y &lt; image-&gt;Top <a href="CppOperatorPlus.htm">+</a> image-&gt;Height);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppPaint.htm">Paint</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>Vcl(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> myLine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+2] <a href="CppOperatorAssign.htm">=</a> red&nbsp;&nbsp;; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+1] <a href="CppOperatorAssign.htm">=</a> green; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+0] <a href="CppOperatorAssign.htm">=</a> blue ; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppPaint.htm">Paint</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>Vcl(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> Graphics::TColor color)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> GetRValue(color);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green <a href="CppOperatorAssign.htm">=</a> GetGValue(color);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetBValue(color);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> myLine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+2] <a href="CppOperatorAssign.htm">=</a> red&nbsp;&nbsp;; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+1] <a href="CppOperatorAssign.htm">=</a> green; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+0] <a href="CppOperatorAssign.htm">=</a> blue ; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlaceInCenter(Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image, <b><a href="CppConst.htm">const</a></b> TRect&amp; rect)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;image-&gt;Left <a href="CppOperatorAssign.htm">=</a> rect.Left <a href="CppOperatorPlus.htm">+</a> (rect.Width()&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> (image-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;image-&gt;Top&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> rect.Top&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (rect.Height() <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> (image-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlaceInCenter(Forms::TForm * <b><a href="CppConst.htm">const</a></b> form, <b><a href="CppConst.htm">const</a></b> TRect&amp; rect)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(form<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;form-&gt;Left <a href="CppOperatorAssign.htm">=</a> rect.Left <a href="CppOperatorPlus.htm">+</a> (rect.Width()&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> (form-&gt;ClientWidth&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;form-&gt;Top&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> rect.Top&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (rect.Height() <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> (form-&gt;ClientHeight <a href="CppOperatorDivide.htm">/</a> 2);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> TRect MergeRects(<b><a href="CppConst.htm">const</a></b> TRect&amp; r1, <b><a href="CppConst.htm">const</a></b> TRect&amp; r2)<br/>
{<br/>
&nbsp;&nbsp;TRect r;<br/>
&nbsp;&nbsp;r.Left&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(r1.Left&nbsp;&nbsp;,r2.Left&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;r.Top&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(r1.Top&nbsp;&nbsp; ,r2.Top&nbsp;&nbsp; );<br/>
&nbsp;&nbsp;r.Right&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax.htm">std::max</a>(r1.Right ,r2.Right );<br/>
&nbsp;&nbsp;r.Bottom <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax.htm">std::max</a>(r1.Bottom,r2.Bottom);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> r;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Set a pixel's RGB values<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppSetPixel.htm<br/>
<b><a href="CppVoid.htm">void</a></b> SetPixel(<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Image is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap must be 24 bit");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "x coordinat is below zero");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "y coordinat is below zero");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x &lt; image-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "x coordinat is beyond image width");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y &lt; image-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "y coordinat is beyond image height");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
<br/>
&nbsp;&nbsp;line[x*3+2] <a href="CppOperatorAssign.htm">=</a> red;<br/>
&nbsp;&nbsp;line[x*3+1] <a href="CppOperatorAssign.htm">=</a> green;<br/>
&nbsp;&nbsp;line[x*3+0] <a href="CppOperatorAssign.htm">=</a> blue;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SetSize(Graphics::TBitmap * <b><a href="CppConst.htm">const</a></b> bitmap, <b><a href="CppConst.htm">const</a></b> TRect&amp; rect)<br/>
{<br/>
&nbsp;&nbsp;bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> rect.Width();<br/>
&nbsp;&nbsp;bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> rect.Height();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitWallSocket220.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitWallSocket220.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitWallSocket220H<br/>
<a href="CppDefine.htm">#define</a> UnitWallSocket220H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> Socket220;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormWallSocket220;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> WallSocket220 : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;WallSocket220();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This depends on the connector, especially on a dimmer pack<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 1.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt; mSocket220;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormWallSocket220;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>WallSocket220 can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~WallSocket220() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(WallSocket220 *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitWallSocket220.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitWallSocket220.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitWallSocket220.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WallSocket220::WallSocket220()<br/>
&nbsp;&nbsp;: mSocket220(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Socket220&gt;(<b><a href="CppNew.htm">new</a></b> Socket220(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mSocket220.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitWallSocketPower.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitWallSocketPower.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitWallSocketPowerH<br/>
<a href="CppDefine.htm">#define</a> UnitWallSocketPowerH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMachine.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> SocketPowerFemale;<br/>
<b><a href="CppStruct.htm">struct</a></b> TFormWallSocketPower;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> WallSocketPower : <b><a href="CppPublic.htm">public</a></b> Machine<br/>
{<br/>
&nbsp;&nbsp;WallSocketPower();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The power <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> all needed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This depends on the connector, especially on a dimmer pack<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> PowerSupplyStrength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 1.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The audio <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> perfect gain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> depends on the connector (<b><a href="CppFor.htm">for</a></b> example the MasterL connector supplies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>different audio <b><a href="CppQtSignals.htm">signals</a></b> then Aux1<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Audio<a href="CppSignal.htm">Signal</a>Strength(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Connector * <b><a href="CppConst.htm">const</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Connector*&gt;) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The DMX <a href="CppSignal.htm">signal</a> <b><a href="CppThis.htm">this</a></b> machine can supply <b><a href="CppFor.htm">for</a></b> a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DMX channel. 0.0 <a href="CppOperatorAssign.htm">=</a> none, 1.0 <a href="CppOperatorAssign.htm">=</a> 100<a href="CppOperatorModulus.htm">%</a> (or FF).<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Dmx<a href="CppSignal.htm">Signal</a>Strength(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0.0; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the machine have access to power? Does NOT mean the machine is ON!<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasPower() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Control<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerFemale&gt; mSocketPower;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TFormWallSocketPower;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>WallSocketPower can only be deleted by <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;~WallSocketPower() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(WallSocketPower *);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSimStagecraft/UnitWallSocketPower.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSimStagecraft/UnitWallSocketPower.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt; <a href="CppComment.htm">//</a>For pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitConnector.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitWallSocketPower.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WallSocketPower::WallSocketPower()<br/>
&nbsp;&nbsp;: mSocketPower(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SocketPowerFemale&gt;(<b><a href="CppNew.htm">new</a></b> SocketPowerFemale(<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mSocketPower.get() <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
