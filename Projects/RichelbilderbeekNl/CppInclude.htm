<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>#include</title>
  <meta name="description" content="C++ #include"/>
  <meta name="keywords" content="C++ #include code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppInclude.htm">#include</a></h1>
<p>&nbsp;</p>
<p><a href="CppInclude.htm">#include</a> is a <a href="CppPreprocessor.htm">preprocessor</a> directive to add a 
<a href="CppHeaderFile.htm">header file</a> (.h or .hpp) or other files to your program.</p>
<p>&nbsp;</p>
<p>There are multiple forms of a <a href="CppHeaderFile.htm">header file</a> #includes:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt; <a href="CppComment.htm">//</a> 1: <a href="CppStl.htm">STL</a><br/>
<a href="CppInclude.htm">#include</a> &lt;my<a href="CppAssert.htm">assert</a>.hpp&gt; <a href="CppComment.htm">//</a> 2: The standard <a href="CppHeaderFile.htm">header file</a> directory<br/>
<a href="CppInclude.htm">#include</a> "MyUnit.h" <a href="CppComment.htm">//</a> 3: Local<br/>
</code></td></tr></table>
<!-- end of the code --><p>&nbsp;</p>
<p>&nbsp;</p>
<p>
  The first, without the .h extension, means that this <a href="CppHeaderFile.htm">header
  file</a> is from the <a href="CppStl.htm">Standard Template Library</a>. The
  second <a href="CppInclude.htm">#include</a> means that the <a href="CppHeaderFile.htm">header</a> 
  is not from the <a href="CppStl.htm">STL</a>
  but in the standard <a href="CppHeaderFile.htm">header file</a> directory. The
  third <a href="CppInclude.htm">#include</a> means that the file is local, that
  is in the same directory as the program. If the local <a href="CppInclude.htm">#include</a>
  fails, the standard header file directory is checked for this <a href="CppHeaderFile.htm">header file</a>.
</p>
<p>&nbsp;</p>
<p>
  Use <a href="CppInclude.htm">#include</a> only at <a href="CppGlobal.htm">global</a> <a href="CppScope.htm">scope</a> and in <a href="CppNamespace.htm">namespaces</a> [9].
  <a href="CppInclude.htm">#include</a> only complete <a href="CppDeclaration.htm">declarations</a> [10]
  Never <a href="CppInclude.htm">#include</a> unnecessary header files [1]. 
  Prefer to <a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt; when a <a href="CppForwardDeclaration.htm">forward declaration</a> 
  of a <a href="CppStream.htm">stream</a> will suffice [2]. 
  Never <a href="CppInclude.htm">#include</a> a header when a <a href="CppForwardDeclaration.htm">forward declaration</a> will suffice [3].
  The <a href="CppImplementationFile.htm">implementation (.cpp) file</a> of every component should <a href="CppInclude.htm">#include</a> its 
  own <a href="CppHeaderFile.htm">header (.h) file</a> as the first substantive line of code [7].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>The C style include on <a href="CppStl.htm">STL</a> headers</h2>
<p>&nbsp;</p>
<p>For backwards compatibility with C one can <a href="CppInclude.htm">#include</a>
C++ header files with the .h extension. Do not do this: call the correct C++ 
<a href="CppHeaderFile.htm">header file</a>. For a list of all C++ standard 
<a href="CppHeaderFile.htm">header files</a>, <a href="CppHeaderFile.htm">go to the header file page</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdioH.htm">stdio.h</a>&gt; <a href="CppComment.htm">//</a>C-stle <a href="CppInclude.htm">#include</a>, avoid to <b><a href="CppDo.htm">do</a></b> <b><a href="CppThis.htm">this</a></b><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The <a href="CppHeaderFile.htm">header file</a> 'stdio.h' is a wrapper: all it does
is call the C++ <a href="CppHeaderFile.htm">header file</a> <a href="CppCstdioH.htm">cstdio</a> and then adds a '<a href="CppUsing.htm">using</a>
<a href="CppNamespace.htm">namespace</a> <a href="CppStd.htm">std</a>', as C does not have <a href="CppNamespace.htm">namespaces</a>.</p>
<p>&nbsp;</p>
<p>This has the unfortunate side-effect that after calling such a 
<a href="CppHeaderFile.htm">header file</a> all functions and classes in 
<a href="CppNamespace.htm">namespace</a> <a href="CppStd.htm">std</a> will be in
the global <a href="CppNamespace.htm">namespace</a>.</p>
<p>&nbsp;</p>
<p>As it pollutes the global <a href="CppNamespace.htm">namespace</a>, avoid <a href="CppUsing.htm">using</a> <a href="CppNamespace.htm">namespace</a> 
<a href="CppStd.htm">std</a> [4-5].</p>
<p>&nbsp;</p>
<p>An example from [6]:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt; <a href="CppComment.htm">//</a>Carefully avoids polluting the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
 <br/>
vector v1; <a href="CppComment.htm">//</a>Error: no 'vector' in global <b><a href="CppNamespace.htm">namespace</a></b><br/>
 <br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdioH.htm">stdio.h</a>&gt; <a href="CppComment.htm">//</a>Contains a '<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppStd.htm">std</a>'.<br/>
 <br/>
vector v2; <a href="CppComment.htm">//</a>Oops: <b><a href="CppThis.htm">this</a></b> now works<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppInclude.htm">#including</a> <a href="CppImplementationFile.htm">implementation (.c or .cpp) files</a></h2>
<p>&nbsp;</p>
<p>Conside not <a href="CppInclude.htm">#including</a> these [8], but add these to your project instead. For
example, in <a href="CppBuilder.htm">C++ Builder</a>, select 'Project | Add to Project'.</p>
<p>&nbsp;</p>
<p>Forgetting to add an implementation file to you project results in a <a href="CppLinkError.htm">link error</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReference.htm"> References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --> <a href="CppHerbSutter.htm">Herb Sutter</a>. Exceptional C++. 2000. ISBN: 0-201-61562-2. Item 26: 'Never #include unnecessary header files'.</li>
  <li><!--  2 --> <a href="CppHerbSutter.htm">Herb Sutter</a>. Exceptional C++. 2000. ISBN: 0-201-61562-2. Item 26: 'Prefer to #include &lt;iosfwd&gt; when a forward declaration of a stream will suffice'.</li>
  <li><!--  3 --> <a href="CppHerbSutter.htm">Herb Sutter</a>. Exceptional C++. 2000. ISBN: 0-201-61562-2. Item 26: 'Never #include a header when a forward declaration will suffice'.</li>
  <li><!--  4 --> C++ FAQ Lite: <a href="http://www.parashift.com/c++-faq-lite/coding-standards.html#faq-27.5">http://www.parashift.com/c++-faq-lite/coding-standards.html#faq-27.5</a>. Item 27.5: 'Should I use using namespace std in my code? Probably not.'</li>
  <li><!--  5 --> <a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Chapter C.14.15: 'Don't pollute the global namespace'</li>
  <li><!--  6 --> <a href="CppBjarneStroustrup.htm">Bjarne Stroustrup </a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Chapter 8.2.9.1: 'Namespaces and C'.</li>
  <li><!--  7 --> <a href="CppJohnLakos.htm">John Lakos</a>. Large-Scale C++ Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110: 'The .c file of every component should include its own .h file as the first substantive line of code'</li>
  <li><!--  8 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. AV Rule 32: 'The #include pre-processor directive will only be used to include header (*.h) files.'</li>
  <li><!--  9 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 15.5. Advice. page 444: '[5] Use #include only at global scope and in namespaces'</li>
  <li><!-- 10 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 15.5. Advice. page 444: '[6] #include only complete declarations'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
