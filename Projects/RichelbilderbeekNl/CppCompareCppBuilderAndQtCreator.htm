<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Comparison of C++ Builder and Qt Creator</title>
  <meta name="description" content="C++ Comparison of C++ Builder and Qt Creator"/>
  <meta name="keywords" content="C++ compare comparison of C++ Builder and Qt Creator IDE Integrated Development Environment"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCompareCppBuilderAndQtCreator.htm">Comparison of C++ Builder and Qt Creator</a></h1>
<p>&nbsp;</p>
<p>This <a href="CppArticle.htm">article</a> is about comparing <a href="CppBuilder.htm">C++ Builder</a> 
and <a href="CppQtCreator.htm">Qt Creator</a>. After nine years experience with <a href="CppBuilder.htm">C++ Builder</a> 
and working with <a href="CppQtCreator.htm">Qt Creator</a> for about a year, it is time to make a personal comparison.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Quick facts chart</h2>
<p>&nbsp;</p>
<table border="1">
  <tr>
    <td><p><b>Criterium</b></p></td>
    <td><p><b><a href="CppBuilder.htm">C++ Builder</a> 6.0 Enterprise edition</b></p></td>
    <td><p><b><a href="CppQtCreator.htm">Qt Creator</a> 1.3.1</b></p></td>
  </tr>
  <tr>
    <td><p><b>Owner</b></p></td>
    <td><p><a href="http://www.embarcadero.com">Embarcadero Technologies</a></p></td>
    <td><p><a href="http://qt.nokia.com">Qt Development Frameworks</a></p></td>
  </tr>
  <tr>
    <td><p><b>Year of release</b></p></td>
    <td><p>2002</p></td>
    <td><p>2010</p></td>
  </tr>
  <tr>
    <td><p><b><a href="CppLicence.htm">Licence</a></b></p></td>
    <td><p>Proprietary</p></td>
    <td><p>GPL and commercial</p></td>
  </tr>
  <tr>
    <td><p><b>Supported operating systems </b></p></td>
    <td><p>Windows</p></td>
    <td><p>Linux, Mac, Windows</p></td>
  </tr>
  <tr>
    <td><p><b>How to deploy on other platform</b></p></td>
    <td><p>Use emulator on Windows executable</p></td>
    <td><p>Compile code on other platform</p></td>
  </tr>
  <tr>
    <td><p><b>Default supplied <a href="CppCompiler.htm">compiler</a></b></p></td>
    <td><p>Borland BCC32.EXE version 6.0.10.157</p></td>
    <td><p><a href="CppGpp.htm">G++</a> version 4.4.1</p></td>
  </tr>
  <tr>
    <td><p><b><a href="CppBoost.htm">Boost</a> <a href="CppCompiler.htm">compiler</a> support</b></p></td>
    <td><p>About 20-60%: <a href="CppBcc32Exe.htm">BCC32.EXE</a> is an unsupported <a href="CppCompiler.htm">compiler</a></p></td>
    <td><p>100% (can this be true?): <a href="CppGpp.htm">G++</a> is a supported <a href="CppCompiler.htm">compiler</a></p></td>
  </tr>
  <tr>
    <td><p><b>Supplied with <a href="CppLibrary.htm">libraries</a></b></p></td>
    <td><p><a href="CppClx.htm">CLX</a>, <a href="CppOpenGl.htm">OpenGL</a>, <a href="CppStl.htm">STL</a>, <a href="CppVcl.htm">VCL</a></p></td>
    <td><p><a href="CppOpenGl.htm">OpenGL</a>, <a href="CppStl.htm">STL</a>, <a href="CppQt.htm">Qt4</a></p></td>
  </tr>
  <tr>
    <td><p><b><a href="Cpp0x.htm">Cpp0x</a> adoption</b></p></td>
    <td><p>Pre-standard adoption (in RAD Studio)</p></td>
    <td><p>Adoption after publication of official <a href="Cpp0x.htm">Cpp0x</a> standard</p></td>
  </tr>
</table> 
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Discussion</h2>
<p>&nbsp;</p>
<p>Below, I discuss the three items I encountered most in detail: writing console applications, writing GUI applications and documentation needed to learn both <a href="CppIde.htm">IDEs</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Console applications</h3>
<p>&nbsp;</p>
<p>For console applications, the switch from <a href="CppBuilder.htm">C++ Builder</a> to <a href="CppQtCreator.htm">Qt Creator</a> is easy, as there are few differences between the <a href="CppIde.htm">IDE</a>s. The main advantage of <a href="CppQtCreator.htm">Qt Creator</a> is its superior <a href="CppCompiler.htm">compiler</a> with 100% (can this be true?) <a href="CppBoost.htm">Boost</a> support.</p>
<p>&nbsp;</p>
<p>When a console application is started, both <a href="CppBuilder.htm">C++ Builder</a> and <a href="CppQtCreator.htm">Qt Creator</a> show a non-minimal <a href="CppMain.htm">main</a> function. In both <a href="CppIde.htm">IDE</a>s, this initial code can be ruthlessly removed.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><a href="CppGui.htm">GUI</a> applications</h3>
<p>&nbsp;</p>
<p>For <a href="CppGui.htm">GUI</a> applications, the switch from <a href="CppBuilder.htm">C++ Builder</a> to <a href="CppQtCreator.htm">Qt Creator</a> is hard. <a href="CppBuilder.htm">C++ Builder</a> uses the <a href="CppVcl.htm">VCL</a> <a href="CppLibrary.htm">libary</a>, where <a href="CppQtCreator.htm">Qt Creator</a> uses the very different <a href="CppQt.htm">Qt4</a> <a href="CppLibrary.htm">libary</a>.</p>
<p>&nbsp;</p>
<p>I have been using the <a href="CppGui.htm">GUI</a> designer on a 1024x768 resolution for <a href="CppQtCreator.htm">Qt Creator</a> and 800x600 for <a href="CppBuilder.htm">C++ Builder</a>. Although the screen resolution I used for <a href="CppBuilder.htm">C++ Builder</a> was lower, the screen felt less full: in <a href="CppBuilder.htm">C++ Builder</a> you can hide all windows by clicking the X on top-right of eacht window. In <a href="CppQtCreator.htm">Qt Creator</a> some, but not all, windows can be hidden by clicking on different positions, so it is easier to clean up the designer screen in <a href="CppBuilder.htm">C++ Builder</a>.</p>
<p>&nbsp;</p>
<p>Personally, the main difference between these graphical libraries is the ease of self-learning: there are about 800 <a href="CppQt.htm">Qt</a> <a href="CppClass.htm">classes</a> [1] and about 1000 <a href="CppVcl.htm">VCL</a> <a href="CppClass.htm">classes</a> (estimation from <a href="CppVcl.htm">VCL</a> hierarchy chart). For me, it felt easier to discover the <a href="CppVcl.htm">VCL</a> <a href="CppClass.htm">classes</a>' working: all visual components can be explored with the Object Inspector and there is a one-to-one transition to do the same adaptations in code. In my humble opinion, <a href="CppVcl.htm">VCL</a> <a href="CppClass.htm">classes</a> are easier to learn by experimenting with them.</p>
<p>&nbsp;</p>
<p>Both <a href="CppBuilder.htm">C++ Builder</a> and <a href="CppQtCreator.htm">Qt Creator</a> come with some default visual components/widgets (a <a href="CppBuilder.htm">C++ Builder</a> Component equals a <a href="CppQtCreator.htm">Qt Creator</a> Widget). What I do not understand of <a href="CppQtCreator.htm">Qt Creator</a> (yet), is that one needs a QLabel to display an image, where in <a href="CppBuilder.htm">C++ Builder</a> one can use a TLabel for text and <a href="CppTImage.htm">TImage</a> for images. I would find it appropriate that a QLabel/TLabel displays text only.</p>
<p>&nbsp;</p>
<p>A <a href="CppGui.htm">GUI</a> designer does not only enable a programmer to design a dialog, but also to add <a href="CppMemberFunction.htm">member functions</a> to it. In <a href="CppBuilder.htm">C++ Builder</a> this is done very transparently: in the Object Inspector one can select each Component's Events and by double-clicking generate a custom-named <a href="CppMemberFunction.htm">member function</a>. In <a href="CppQtCreator.htm">Qt Creator</a> one must implement <a href="CppVirtual.htm">virtual</a> <a href="CppMemberFunction.htm">member functions</a> with pre-defined names that are not known to the beginning programmer.</p>
<p>&nbsp;</p>
<p>The layout managent of the visual components for me was easier in <a href="CppBuilder.htm">C++ Builder</a>, where one needs to use TPanels as workhorses and set their alignments. The layout managers of <a href="CppQtCreator.htm">Qt Creator</a> work fine, but I have not lost my preferences for the <a href="CppBuilder.htm">C++ Builder</a> way.</p>
<p>&nbsp;</p>
<p>The architecture of using <a href="CppVcl.htm">VCL</a> or <a href="CppQt.htm">Qt</a> <a href="CppClass.htm">classes</a> differs. Using a <a href="CppVcl.htm">VCL</a> <a href="CppClass.htm">class</a> is basic by default: one <a href="CppInstance.htm">instanciates</a> it and let it be managed by itself or something else using its <a href="CppInterface.htm">interface</a> only. In <a href="CppQt.htm">Qt</a> <a href="CppClass.htm">classes</a> it is often the case that a <a href="CppVirtual.htm">virtual</a> <a href="CppMemberFunction.htm">member function</a> needs to be implemented. For a beginning programmer, these <a href="CppMemberFunction.htm">member function</a> names are nearly magical ('How could I know that method's name?') as well as their working ('How can I know what a paintEvent does?'). In <a href="CppVcl.htm">VCL</a> <a href="CppClass.htm">classes</a>, <a href="CppMemberFunction.htm">member functions</a> can be redefined as well, but need not to by default. So in my humble opinion, I think that for a beginning programmer the <a href="CppQt.htm">Qt</a> <a href="CppClass.htm">classes</a> appear less straightforward.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Documentation</h3>
<p>&nbsp;</p>
<p>For both <a href="CppBuilder.htm">C++ Builder</a> and <a href="CppQtCreator.htm">Qt Creator</a> one needs books or online documentation to find the way. All the Qt classes' methods, properties, ancestors and derived classes can all be found online, where the VCL classes this is not the case: these are found in the context-sensitive help of <a href="CppBuilder.htm">C++ Builder</a> where these are described briefly. Unexpectly, when I started working with <a href="CppBuilder.htm">C++ Builder</a>, I did not need this high-detail information, as I could find out how it worked myself. When I need to get something done with Qt, I find myself having my (two) Qt books opened and about eight Firefox tabs open, often without finding the answer to my question. So I would say that <a href="CppQtCreator.htm">Qt Creator</a> is well-documented but not in a way that a beginner needs, where with <a href="CppBuilder.htm">C++ Builder</a> the brief documentation suffices.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Summary</h2>
<p>&nbsp;</p>
<table border="1">
  <tr>
    <td><p><b>Criterium</b></p></td>
    <td><p><b><a href="CppBuilder.htm">C++ Builder</a> 6.0 Enterprise edition</b></p></td>
    <td><p><b><a href="CppQtCreator.htm">Qt Creator</a> 1.3.1</b></p></td>
  </tr>
  <tr>
    <td><p><b>Development of console applications</b></p></td>
    <td><p>Similar, low <a href="CppBoost.htm">Boost</a> support</p></td>
    <td><p>Similar, high <a href="CppBoost.htm">Boost</a> support</p></td>
  </tr>
  <tr>
    <td><p><b>Initial <a href="CppMain.htm">main</a> <a href="CppFunction.htm">function</a> in console application</b></p></td>
    <td><p>Non-minimal, can be removed ruthlessly</p></td>
    <td><p>Non-minimal, can be removed ruthlessly</p></td>
  </tr>
  <tr>
    <td><p><b><a href="CppGui.htm">GUI</a> designer</b></p></td>
    <td><p>Plenty of screen space, all windows can be hidden in the same way, all windows have a shortcut key</p></td>
    <td><p>Screen cluttered with windows, different ways to hide and show most windows</p></td>
  </tr>
  <tr>
    <td><p><b>Ease of learning graphical <a href="CppLibrary.htm">library</a> used by <a href="CppGui.htm">GUI</a> designer</b></p></td>
    <td><p><a href="CppVcl.htm">VCL</a> has one-to-one transition from GUI design and code.</p></td>
    <td><p><a href="CppQt.htm">Qt</a> has slight differences between GUI design and code</p></td>
  </tr>
  <tr>
    <td><p><b>Component/widget architecture</b></p></td>
    <td><p>TLabel for labels, <a href="CppTImage.htm">TImage</a> for images</p></td>
    <td><p>QLabel for both labels and images</p></td>
  </tr>
  <tr>
    <td><p><b>Adding methods to dialogs</b></p></td>
    <td><p>Transparent, by double-clicking an Event in the Object Inspector, possible to redefine <a href="CppMemberFunction.htm">member function</a> names</p></td>
    <td><p>Less transparent, by redefining <a href="CppVirtual.htm">virtual</a> <a href="CppMemberFunction.htm">member functions</a> with names not known to the beginning programmer</p></td>
  </tr>
  <tr>
    <td><p><b>Component/widget use/re-use and extension</b></p></td>
    <td><p>Basic by default, but also possible to reimplement <a href="CppVirtual.htm">virtual</a> <a href="CppMemberFunction.htm">member functions</a></p></td>
    <td><p>Reimplementation of <a href="CppVirtual.htm">virtual</a> <a href="CppMemberFunction.htm">member functions</a> with magic names and unknown functioning</p></td>
  </tr>
  <tr>
    <td><p><b>Layout management</b></p></td>
    <td><p>All Component have an Alignment property, use of TPanel as workhorses</p></td>
    <td><p>Layout managers</p></td>
  </tr>
  <tr>
    <td><p><b>Documentation</b></p></td>
    <td><p>Brief and sufficient</p></td>
    <td><p>Extensive, but not suited for beginners' needs</p></td>
  </tr>
</table> 
<p>&nbsp;</p>
<p>My personal conclusion is that I have found it easier to learn to use <a href="CppBuilder.htm">C++ Builder</a> than <a href="CppQtCreator.htm">Qt Creator</a>. <a href="CppQtCreator.htm">Qt Creator</a> is still young and will hopefully make my critique redundant in the future. That <a href="CppQtCreator.htm">Qt Creator</a> is free, cross-platform and is supplied with a great <a href="CppCompiler.htm">compiler</a> makes the transition from <a href="CppBuilder.htm">C++ Builder</a> to <a href="CppQtCreator.htm">Qt Creator</a> worth it. I hope my website will help others to take the same step.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Post your feedback</h2>
<p>&nbsp;</p>
<p>Feel free to post your feedback about this article at <a href="http://www.programmersheaven.com/article/105573-Comparison+of+C%2b%2b+Builder+and+Qt+Creator/info.aspx">Programmer's Heaven</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://doc.qt.nokia.com/4.6/classes.html">Nokia overview of all Qt classes</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
