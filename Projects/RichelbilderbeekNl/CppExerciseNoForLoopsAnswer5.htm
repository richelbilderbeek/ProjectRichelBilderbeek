<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Answer of exercise #9: No for-loops #5</title>
  <meta name="description" content="C++ Answer of exercise #9: No for-loops #5"/>
  <meta name="keywords" content="C++ Answer of exercise #9: No for-loops #5 code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExerciseNoForLoopsAnswer5.htm">Answer of exercise #9: No for-loops #5</a></h1>
<p>&nbsp;</p>
<p>This is the answer of <a href="CppExerciseNoForLoops.htm">Exercise #9: No for-loops</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Question #5: Widget::DoItOften on Widget</h2>
<p>&nbsp;</p>
<p>Replace the <b><a href="CppFor.htm">for</a></b>-loop. You will need:</p>
<ul>
  <li><a href="CppBind2nd.htm">std::bind2nd</a> (or <a href="CppBind.htm">boost::bind</a>)</li>
  <li><a href="CppFor_each.htm">std::for_each</a></li>
  <li><a href="CppMem_fun.htm">std::mem_fun_ref</a> (or <a href="CppMem_fn.htm">boost::mem_fn</a>)</li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
&nbsp;<br/>
<b><a href="CppStruct.htm">struct</a></b> Widget<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoItOften(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n) <b><a href="CppConst.htm">const</a></b> { /* <b><a href="CppDo.htm">do</a></b> it n times */ }<br/>
};<br/>
&nbsp;<br/>
<b><a href="CppVoid.htm">void</a></b> DoItOften(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Widget&gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz = v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i].DoItOften(n);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicStl.png" alt="STL"/> Answer using <a href="CppStl.htm">STL</a> only</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Widget<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoItOften(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n) <b><a href="CppConst.htm">const</a></b> { <a href="CppComment.htm">/*</a> <b><a href="CppDo.htm">do</a></b> it n times <a href="CppComment.htm">*/</a> }<br/>
};<br/>
 <br/>
<b><a href="CppVoid.htm">void</a></b> DoItOften(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Widget&gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind2nd.htm">std::bind2nd</a>(<a href="CppMem_fun.htm">std::mem_fun_ref</a>(&amp;Widget::DoItOften),n));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicBoost.png" alt="Boost"/> Answer using <a href="CppBoost.htm">Boost</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> Widget<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoItOften(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n) <b><a href="CppConst.htm">const</a></b> { <a href="CppComment.htm">/*</a> <b><a href="CppDo.htm">do</a></b> it n times <a href="CppComment.htm">*/</a> }<br/>
};<br/>
 <br/>
<b><a href="CppVoid.htm">void</a></b> DoItOften(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Widget&gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>(&amp;Widget::DoItOften, _1, n));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Note that you do not need <a href="CppMem_fn.htm">boost::mem_fn</a>, because it is
added for you. If this is done by hand, like in the code below, the solution is
still correct.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppVoid.htm">void</a></b> DoItOften(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Widget&gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>(<a href="CppMem_fn.htm">boost::mem_fn</a>(&amp;Widget::DoItOften), _1, n));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Note that _1 is a placeholder of type boost::arg&lt;1&gt; and can be found in boost/bind/placeholders.hpp.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
