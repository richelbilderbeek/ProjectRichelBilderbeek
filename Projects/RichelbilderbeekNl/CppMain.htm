<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>main</title>
  <meta name="description" content="C++ main"/>
  <meta name="keywords" content="C++ main code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMain.htm">main</a></h1>
<p>&nbsp;</p>
<p>
  The <a href="CppMain.htm">main</a> <a href="CppFunction.htm">function</a> is the entry point of your program. 
  Have <a href="CppMain.htm">main</a> <a href="CppCatch.htm">catch</a> and report every exception [7].
</p>
<p>&nbsp;</p>
<p>
  The C++ Standard [1] states that it has one of the following syntaxes:
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main function without arguments" border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>() { <a href="CppComment.htm">/*</a> Your code <a href="CppComment.htm">*/</a> }<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>and</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main function with arguments" border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b>* <a href="CppArgc.htm">argv</a>[]) { <a href="CppComment.htm">/*</a> Your code <a href="CppComment.htm">*/</a> }<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>What does this all mean?</p>
<p>&nbsp;</p>
<ol>
  <li>
    '<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>': means that <a href="CppMain.htm">main</a> 
    is a <a href="CppFunction.htm">function</a> <a href="CppReturn.htm">returning</a> an 
    <a href="CppInt.htm">integer</a>. This <a href="CppInt.htm">integer</a> is an error code given back to 
    the <a href="CppOs.htm">operating system</a> the program has run on.
  </li>
  <li>
    '(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <a href="CppChar.htm">char</a>* 
    <a href="CppArgv.htm">argv</a>[])' means that the <a href="CppFunction.htm">function</a> takes 
    two <a href="CppArgument.htm">arguments</a>:
      <ol>
        <li>
          '<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>': <a href="CppArgc.htm">argc</a> is 
          an abbreviation of 'argument count'. It is a (positive) <a href="CppInt.htm">integer</a>. This give you 
          the number of parameters the user entered when starting the program, which equals 1 if he didn't enter
          parameters.
        </li>
        <li>
          '<a href="CppChar.htm">char</a>* <a href="CppArgv.htm">argv</a>[]': an <a href="CppArray.htm">array</a> of 
          <a href="CppPointer.htm">pointers</a> to type <a href="CppChar.htm">char</a> (say: 
          '<a href="CppChar.htm">character</a> <a href="CppPointer.htm">pointer</a>'). In <a href="CppArgv.htm">argv</a>, 
          all the arguments are stored that the user entered when starting the program. At index 0, the program's 
          name is stored.
        </li>
      </ol>
  </li>
</ol>
<p>&nbsp;</p>
<p>
  When <a href="CppMain.htm">main</a>'s closing bracket is reached, the effect is equivalent 
  to [6,8]:
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppReturn.htm">return</a></b> 0;<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>You could leave out the arguments of <a href="CppMain.htm">main</a>. Then the correct syntax depends on 
whether you program in C or C++.</p>
<p>&nbsp;</p>
<p>Correct C syntax is:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a> Correct C syntax, not correct <a href="Cpp.htm">C++</a> syntax <a href="CppComment.htm">*/</a><br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppVoid.htm">void</a></b>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Your C code <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Unlike C, where one writes <a href="CppVoid.htm">void</a> when a 
<a href="CppFunction.htm">function</a> does not have arguments, in C++, when
a <a href="CppFunction.htm">function</a> has no arguments, nothing is written between the brackets. See the
<a href="CppVoid.htm">void</a> for more detailed discussion and references.</p>
<p>&nbsp;</p>
<p>Correct C++ syntax of a <a href="CppMain.htm">main</a>() that does not use its arguments, is [1]:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>Correct <a href="Cpp.htm">C++</a> syntax<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Your <a href="Cpp.htm">C++</a> code<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>
  Note that the standard states that the closing bracket of <a href="CppMain.htm">main</a>() must have the same
  effect of returning zero [6,8]. Therefore, return zero can be omitted, but many people like to keep it in.
</p>
<p>&nbsp;</p>
<p>
  Incorrect/non-standard is [1-5] (although with some <a href="CppCompiler.htm">compilers</a> it might <a href="CppCompile.htm">compile</a>):
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMain.htm">main</a>() <a href="CppComment.htm">//</a>INCORRECT!!!<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Your code<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Below is an example showing all parameters a user entered.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
 <br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b>* <a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a><a href="CppArgc.htm">argc</a>; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppArgc.htm">argv</a>[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This means if you start the program with e.g.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
testMain <a href="CppHelloWorld.htm">Hello World</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Your output will be something like:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
0 : testMain<br/>
1 : Hello<br/>
2 : World<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Should I use void main() or int main()?</h2>
<p>&nbsp;</p>
<p><a href="CppInt.htm">int</a> <a href="CppMain.htm">main</a>() [1-5].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Should I use int main() or int main(void)?</h2>
<p>&nbsp;</p>
<ul>
  <li>C: <a href="CppInt.htm">int</a> <a href="CppMain.htm">main</a>(<a href="CppVoid.htm">void</a>)</li>
  <li>C++: <a href="CppInt.htm">int</a> <a href="CppMain.htm">main</a>()</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 -->C++. International Standard. ISO/IEC 14882. Second edition. Paragraph 3.6.1.2</li>
  <li>
    <!--  2 -->From http://www.parashift.com/c++-faq-lite/newbie.html#faq-29.3:<br/>&nbsp;<br/>
    <!-- start of code -->
    <table border = "1"><tr><td><code>
    <a href="CppMain.htm">main</a>() must <b><a href="CppReturn.htm">return</a></b> <b><a href="CppInt.htm">int</a></b>. Not <b><a href="CppVoid.htm">void</a></b>, not <b><a href="CppBool.htm">bool</a></b>, not <b><a href="CppFloat.htm">float</a></b>. <b><a href="CppInt.htm">int</a></b>. Just <b><a href="CppInt.htm">int</a></b>, nothing but <b><a href="CppInt.htm">int</a></b>, only<br/>
    <b><a href="CppInt.htm">int</a></b>. Some <a href="CppCompiler.htm">compiler</a>s accept <b><a href="CppVoid.htm">void</a></b> <a href="CppMain.htm">main</a>(), but that is non-standard and shouldn't<br/>
    be used. Instead use <b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>().<br/>
    </code></td></tr></table>
    <!-- end of the code -->
    &nbsp;
  </li>
  <li>
    <!--  3 -->
    <a href="CppHerbSutter.htm">Herb Sutter</a>. Exceptional C++. ISBN:0-201-61562-2. Item 21: void main() is nonstandard and nonportable.
  </li>
  <li>
    <!--  4 -->
    From <a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>'s homepage (http://www.research.att.com/~bs/bs_faq2.html#void-main):<br/>&nbsp;<br/>
    <!-- start of code -->
    <table border = "1"><tr><td><code>
    The <a href="CppDefinition.htm">definition</a><br/>
    <br/>
    <b><a href="CppVoid.htm">void</a></b> <a href="CppMain.htm">main</a>() { <a href="CppComment.htm">/*</a> ... <a href="CppComment.htm">*/</a> }<br/>
    <br/>
    is not and never has been <a href="Cpp.htm">C++</a>, nor has it even been C.<br/>
    </code></td></tr></table>
    <!-- end of the code -->
    &nbsp;
  </li>
  <li>
    <!--  5 -->
    From the The alt.comp.lang.learn.c-c++ FAQ: http://ma.rtij.nl/acllc-c++.FAQ.html#q3.4: 3.4: Why does everyone make so much fuss about &quot;void main()&quot;?<br/>&nbsp;<br/>
    <!-- start of code -->
    <table border = "1"><tr><td><code>
    Because the <a href="CppReturnType.htm">return type</a> of the <a href="CppMain.htm">main</a>() <a href="CppFunction.htm">function</a> must be <b><a href="CppInt.htm">int</a></b> in both C and <a href="Cpp.htm">C++</a>. Anything <b><a href="CppElse.htm">else</a></b> is undefined. Bottom line - don't <b><a href="CppTry.htm">try</a></b> to start a thread about <b><a href="CppThis.htm">this</a></b> in alt.comp.lang.learn.c-c++ as it has already been discussed many, many times and generates more flamage than any other topic.<br/>
    </code></td></tr></table>
    <!-- end of the code -->
    &nbsp;
  </li>
  <li><!--  6 -->C++. International Standard. ISO/IEC 14882. Second edition. Paragraph 3.6.1.5</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[27] 'Have main() catch and report every exception'</li>
  <li><!--  8 -->Working Draft, Standard for Programming Language C++. International Standard. ISO/IEC document number N3936. 2014-08-22. Paragraph 3.6.1.5</li>
  </ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
