<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MultiApproximator</title>
  <meta name="description" content="C++ MultiApproximator"/>
  <meta name="keywords" content="C++ MultiApproximator "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMultiApproximator.htm">MultiApproximator</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.647 at Fri Jun  6 17:13:18 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/><img src="PicWindows.png" alt="Windows"/></p>
<p>&nbsp;</p>
<p>
  <a href="CppMultiApproximator.htm">MultiApproximator</a> is a
  <a href="CppClass.htm">class</a> to perform an interpolation
  on data. For example, when the supplied data consists of the coordinats
  (1,1) and (2,2), it will estimate (the x value of) 1,5 to be (the value y value of) 1,5.
</p>
<p>&nbsp;</p>
<p>
  <a href="CppMultiApproximator.htm">MultiApproximator</a> supports multiple
  identical keys (for example the coordinats (1.0,2.0) and (1.0,3.0)),
  similar to a <a href="CppMulti_map.htm">std::multi_map</a>.
  <a href="CppApproximator.htm">Approximator</a> does not
  allow this.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMultiApproximator/CppMultiApproximator.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMultiApproximator/CppMultiApproximator.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultiApproximator.htm">CppMultiApproximator</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultiApproximator.htm">CppMultiApproximator</a>/multiapproximator.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultiApproximator.htm">CppMultiApproximator</a>/multiapproximator.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultiApproximator.htm">CppMultiApproximator</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMultiApproximator/multiapproximator.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMultiApproximator/multiapproximator.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MULTIAPPROXIMATOR_H<br/>
<a href="CppDefine.htm">#define</a> MULTIAPPROXIMATOR_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppContainer.htm">container</a>/flat_map.hpp&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "approximator.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppException.htm">exception</a>noextrapolation.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Multi<a href="CppApproximator.htm">Approximator</a> can estimate a value between (non-unique) keys.<br/>
<a href="CppComment.htm">///</a>For example, supply <a href="CppApproximator.htm">Approximator</a>&lt;X,Y&gt; with (1.0,10) and (2.0,20)<br/>
<a href="CppComment.htm">///</a>and it will estimate an X <b><a href="CppIf.htm">if</a></b> 1.5 to have a Y of 15.<br/>
<a href="CppComment.htm">///</a>If the data used has unique keys only, use <a href="CppApproximator.htm">Approximator</a><br/>
<a href="CppComment.htm">///</a><b><a href="CppFor.htm">for</a></b> an increase in <a href="CppRunTime.htm">run-time</a> speed.<br/>
<a href="CppComment.htm">///</a>If all keys are added to Multi<a href="CppApproximator.htm">Approximator</a>, it is possible to spawn<br/>
<a href="CppComment.htm">///</a>an <a href="CppApproximator.htm">Approximator</a> from it.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Key: a type that has <b><a href="CppOperatorLess.htm">operator&lt;</a></b><br/>
<a href="CppComment.htm">///</a>Value: a type that has <b><a href="CppOperatorDivide.htm">operator/</a></b>(<b><a href="CppDouble.htm">double</a></b>)<br/>
<a href="CppComment.htm">///</a><a href="CppContainer.htm">Container</a>: how to store the <a href="CppStdPair.htm">std::pair</a>&lt;Key,Value&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppBoost.htm">boost</a>::<a href="CppContainer.htm">container</a>::flat_multimap&lt;Key,Value&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;: faster <b><a href="CppFor.htm">for</a></b> lookup, data adding is slower<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppStdMultimap.htm">std::multimap</a>&lt;Key,Value&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;: faster adding of data, lookup is slower<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Key <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDouble.htm">double</a></b>, <b><a href="CppClass.htm">class</a></b> Value <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDouble.htm">double</a></b>, <b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMultimap.htm">std::multimap</a>&lt;Key,Value&gt; &gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> Multi<a href="CppApproximator.htm">Approximator</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> Key key_type;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> Value value_type;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppIterator.htm">Iterator</a>,<a href="CppIterator.htm">Iterator</a>&gt; Range;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Multi<a href="CppApproximator.htm">Approximator</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; <a href="CppContainer.htm">container</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppContainer.htm">Container</a>()) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a> a (key,value) pair. Because keys <b><a href="CppDo.htm">do</a></b> not need to be unique,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppThis.htm">this</a></b> will always succeed<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>(<b><a href="CppConst.htm">const</a></b> Key&amp; key, <b><a href="CppConst.htm">const</a></b> Value&amp; value) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Approximates a value from a key<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> a <a href="CppStdLogic_error.htm">std::logic_error</a> <b><a href="CppIf.htm">if</a></b> there is no data in the Multi<a href="CppApproximator.htm">Approximator</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>NoExtrapolation <b><a href="CppIf.htm">if</a></b> the key is beyond the range<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/of the keys stored in MultiApproxitor<br/>
&nbsp;&nbsp;Value Approximate(<b><a href="CppConst.htm">const</a></b> Key&amp; key) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppContainer.htm">container</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; Get<a href="CppContainer.htm">Container</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>{ <b><a href="CppReturn.htm">return</a></b> m_m; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the heighest key value<br/>
&nbsp;&nbsp;Key GetMax() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the lowest key value<br/>
&nbsp;&nbsp;Key GetMin() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <b><a href="CppTrue.htm">true</a></b> or averaged value at the key when the key is present<br/>
&nbsp;&nbsp;Value GetValue(<b><a href="CppConst.htm">const</a></b> Key&amp; key) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppContainer.htm">container</a> to store the <a href="CppStdPair.htm">std::pair</a>&lt;Key,Value&gt; in<br/>
&nbsp;&nbsp;<a href="CppContainer.htm">Container</a> m_m;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> AnyKey, <b><a href="CppClass.htm">class</a></b> AnyValue, <b><a href="CppClass.htm">class</a></b> Any<a href="CppContainer.htm">Container</a>&gt;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> Multi<a href="CppApproximator.htm">Approximator</a>&lt;AnyKey,AnyValue,Any<a href="CppContainer.htm">Container</a>&gt;::Test();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> Multi<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt;::Test();<br/>
<br/>
<br/>
};<br/>
<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a <a href="CppStdMultimap.htm">std::multimap</a> to a <a href="CppStdMap.htm">std::map</a><br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Key, <b><a href="CppClass.htm">class</a></b> Value&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;Key,Value&gt; MultimapToMap(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMultimap.htm">std::multimap</a>&lt;Key,Value&gt; m) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> to a (non-multi)<a href="CppApproximator.htm">Approximator</a><br/>
<a href="CppComment.htm">///</a>This probably gain run<a href="CppTime.htm">time</a> speed, when will no data added <a href="CppAny.htm">any</a>more<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Key,<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Value,<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Multi<a href="CppContainer.htm">Container</a>,<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a><br/>
&nbsp;&nbsp;&gt;<br/>
<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt; To<a href="CppApproximator.htm">Approximator</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Multi<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,Multi<a href="CppContainer.htm">Container</a>&gt;&amp; m) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Key, <b><a href="CppClass.htm">class</a></b> Value, <b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
Multi<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt;::Multi<a href="CppApproximator.htm">Approximator</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; <a href="CppContainer.htm">container</a>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: m_m { <a href="CppContainer.htm">container</a> }<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic_assert.htm">static_assert</a></b>(!<a href="CppStd.htm">std</a>::is_integral&lt;Key&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Multi<a href="CppApproximator.htm">Approximator</a> will not work on <a href="CppInt.htm">integer</a> keys");<br/>
&nbsp;&nbsp;<b><a href="CppStatic_assert.htm">static_assert</a></b>(!<a href="CppStd.htm">std</a>::is_integral&lt;Value&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Multi<a href="CppApproximator.htm">Approximator</a> will not work on <a href="CppInt.htm">integer</a> values");<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Key, <b><a href="CppClass.htm">class</a></b> Value, <b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Multi<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt;::<a href="CppAdd.htm">Add</a>(<b><a href="CppConst.htm">const</a></b> Key&amp; key, <b><a href="CppConst.htm">const</a></b> Value&amp; value) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_m.insert(<a href="CppStdMake_pair.htm">std::make_pair</a>(key,value));<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Key, <b><a href="CppClass.htm">class</a></b> Value, <b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
Value Multi<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt;::Approximate(<b><a href="CppConst.htm">const</a></b> Key&amp; key) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_m.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Multi<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt;::Approximate: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"cannot approximate without data");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must the average be calculated?<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_m.find(key) <a href="CppOperatorNotEqual.htm">!=</a> m_m.end()) <b><a href="CppReturn.htm">return</a></b> GetValue(key);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> high { m_m.lower_bound(key) };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (high <a href="CppOperatorEqual.htm">==</a> m_m.begin() <a href="CppOperatorLogicalOr.htm">||</a> high <a href="CppOperatorEqual.htm">==</a> m_m.end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_m.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Key lowest&nbsp;&nbsp;{ (*m_m.begin()).first&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Key highest { (*m_m.rbegin()).first };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>NoExtrapolation&lt;Key&gt;(key, lowest, highest);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> low { <a href="CppOperatorDecrement.htm">--</a><a href="CppIterator.htm">Iterator</a>(high) };<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(low <a href="CppOperatorNotEqual.htm">!=</a> m_m.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(high <a href="CppOperatorNotEqual.htm">!=</a> m_m.end());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Key d_low&nbsp;&nbsp;{ (*low).first&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Key d_high { (*high).first };<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d_low &lt; key);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d_high &gt; key);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fraction { (key <a href="CppOperatorMinus.htm">-</a> d_low) <a href="CppOperatorDivide.htm">/</a> (d_high <a href="CppOperatorMinus.htm">-</a> d_low) };<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fraction <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fraction <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_m.find(d_low)&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> m_m.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_m.find(d_high) <a href="CppOperatorNotEqual.htm">!=</a> m_m.end());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Value h_low&nbsp;&nbsp;{ GetValue(d_low)&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Value h_high { GetValue(d_high) };<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ((1.0 <a href="CppOperatorMinus.htm">-</a> fraction)) * h_low <a href="CppOperatorPlus.htm">+</a> ((0.0 <a href="CppOperatorPlus.htm">+</a> fraction) * h_high);<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Key, <b><a href="CppClass.htm">class</a></b> Value, <b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
Key Multi<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt;::GetMax() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_m.empty());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (*m_m.rbegin()).first;<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Key, <b><a href="CppClass.htm">class</a></b> Value, <b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
Key Multi<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt;::GetMin() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_m.empty());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (*m_m.begin()).first;<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Key, <b><a href="CppClass.htm">class</a></b> Value, <b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
Value Multi<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt;::GetValue(<b><a href="CppConst.htm">const</a></b> Key&amp; key) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_m.find(key) <a href="CppOperatorNotEqual.htm">!=</a> m_m.end());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must the average be calculated?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Range r { m_m.equal_range(key) };<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.first <a href="CppOperatorNotEqual.htm">!=</a> m_m.end());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r.first <a href="CppOperatorNotEqual.htm">!=</a> r.second )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> Value result <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAccumulate.htm">std::accumulate</a>(r.first,r.second,Value(0.0), [] )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;( <a href="CppStdDistance.htm">std::distance</a>(r.first,r.second) );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Value sum { 0.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> cnt { 0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i { r.first }; i<a href="CppOperatorNotEqual.htm">!=</a>r.second; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum <a href="CppOperatorPlusAssign.htm">+=</a> (*i).second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>cnt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Value result { sum <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(cnt) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Value result { (*r.first).second };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Key, <b><a href="CppClass.htm">class</a></b> Value, <b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<a href="CppStdString.htm">std::string</a> Multi<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt;::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Key, <b><a href="CppClass.htm">class</a></b> Value, <b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Multi<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt;::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-08-23: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-08-23: <a href="CppVersion.htm">version</a> 1.1: add conversion to an <a href="CppApproximator.htm">Approximator</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Key, <b><a href="CppClass.htm">class</a></b> Value&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;Key,Value&gt; MultimapToMap(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMultimap.htm">std::multimap</a>&lt;Key,Value&gt; m) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;Key,Value&gt; n;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m.empty()) <b><a href="CppReturn.htm">return</a></b> n;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> end <a href="CppOperatorAssign.htm">=</a> m.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> begin <a href="CppOperatorAssign.htm">=</a> m.begin(); begin <a href="CppOperatorNotEqual.htm">!=</a> end; )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(begin <a href="CppOperatorNotEqual.htm">!=</a> m.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> key <a href="CppOperatorAssign.htm">=</a> (*begin).first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.find(key) <a href="CppOperatorNotEqual.htm">!=</a> m.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must the average be calculated?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> r <a href="CppOperatorAssign.htm">=</a> m.equal_range(key);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.first <a href="CppOperatorNotEqual.htm">!=</a> m.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r.first <a href="CppOperatorNotEqual.htm">!=</a> r.second )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Value sum(0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> cnt <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> r.first; i<a href="CppOperatorNotEqual.htm">!=</a>r.second; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum <a href="CppOperatorPlusAssign.htm">+=</a> (*i).second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>cnt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Value result( sum <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(cnt));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n[ key ] <a href="CppOperatorAssign.htm">=</a> result;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Value result((*r.first).second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n[ key ] <a href="CppOperatorAssign.htm">=</a> result;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;begin <a href="CppOperatorAssign.htm">=</a> r.second;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Key, <b><a href="CppClass.htm">class</a></b> Value, <b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Multi<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt;::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting Multi<a href="CppApproximator.htm">Approximator</a>::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GetMin and GetMax<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Multi<a href="CppApproximator.htm">Approximator</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<a href="CppStdMultimap.htm">std::multimap</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(1.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetMin() <a href="CppOperatorEqual.htm">==</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetMax() <a href="CppOperatorEqual.htm">==</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(2.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetMin() <a href="CppOperatorEqual.htm">==</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetMax() <a href="CppOperatorEqual.htm">==</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetMin() <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetMax() <a href="CppOperatorEqual.htm">==</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(0.5,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetMin() <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetMax() <a href="CppOperatorEqual.htm">==</a> 2.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GetValue<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Multi<a href="CppApproximator.htm">Approximator</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<a href="CppStdMultimap.htm">std::multimap</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> key <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value1 <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(key,value1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetValue(key) <a href="CppOperatorEqual.htm">==</a> value1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value2 <a href="CppOperatorAssign.htm">=</a> 2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(key,value2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetValue(key) <a href="CppOperatorEqual.htm">==</a> (value1 <a href="CppOperatorPlus.htm">+</a> value2) <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value3 <a href="CppOperatorAssign.htm">=</a> 4.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(key,value3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetValue(key) <a href="CppOperatorEqual.htm">==</a> (value1 <a href="CppOperatorPlus.htm">+</a> value2 <a href="CppOperatorPlus.htm">+</a> value3) <a href="CppOperatorDivide.htm">/</a> 3.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>MultimapToMap<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMultimap.htm">std::multimap</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; m ( { { 1, 1.0} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; n(MultimapToMap(m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMultimap.htm">std::multimap</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; m ( { { 1, 1.0}, { 1, 1.0} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; n(MultimapToMap(m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; e( { { 1, 1.0 } } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n <a href="CppOperatorEqual.htm">==</a> e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMultimap.htm">std::multimap</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; m ( { { 1, 1.0}, { 1, 2.0} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; n(MultimapToMap(m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; e( { { 1, 1.5 } } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n <a href="CppOperatorEqual.htm">==</a> e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMultimap.htm">std::multimap</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; m ( { {0, 0.0}, { 1, 1.0}, { 1, 1.0}, {2, 2.0} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; n(MultimapToMap(m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; e( { {0, 0.0}, { 1, 1.0 }, {2, 2.0} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n <a href="CppOperatorEqual.htm">==</a> e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMultimap.htm">std::multimap</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; m ( { {0, 0.0}, { 1, 1.0}, { 1, 2.0}, {2, 2.0} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; n(MultimapToMap(m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; e( { {0, 0.0}, { 1, 1.5 }, {2, 2.0} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n <a href="CppOperatorEqual.htm">==</a> e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test approximation<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Multi<a href="CppApproximator.htm">Approximator</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<a href="CppStdMultimap.htm">std::multimap</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(1.0,10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(2.0,20);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.Approximate(1.5) <a href="CppOperatorEqual.htm">==</a> 15);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(4.0,40);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(4.0,40);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.Approximate(3.0) <a href="CppOperatorEqual.htm">==</a> 30);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(3.0,35);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.Approximate(3.0) <a href="CppOperatorEqual.htm">==</a> 35);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(3.0,45);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.Approximate(3.0) <a href="CppOperatorEqual.htm">==</a> 40);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Completed Multi<a href="CppApproximator.htm">Approximator</a>::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Key,<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Value,<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Multi<a href="CppContainer.htm">Container</a>,<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a><br/>
&nbsp;&nbsp;&gt;<br/>
<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt; To<a href="CppApproximator.htm">Approximator</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Multi<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,Multi<a href="CppContainer.htm">Container</a>&gt;&amp; multi_approximator) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Multi<a href="CppContainer.htm">Container</a> m <a href="CppOperatorAssign.htm">=</a> multi_approximator.Get<a href="CppContainer.htm">Container</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a> n <a href="CppOperatorAssign.htm">=</a> MultimapToMap(m);<br/>
&nbsp;&nbsp;<a href="CppApproximator.htm">Approximator</a>&lt;Key,Value,<a href="CppContainer.htm">Container</a>&gt; a(n);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MULTIAPPROXIMATOR_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMultiApproximator/multiapproximator.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMultiApproximator/multiapproximator.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "multiapproximator.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
