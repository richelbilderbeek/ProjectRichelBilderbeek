<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::auto_ptr</title>
  <meta name="description" content="C++ std::auto_ptr"/>
  <meta name="keywords" content="C++ std::auto_ptr code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppAuto_ptr.htm">std::auto_ptr</a></h1>
<p>&nbsp;</p>
<p>
  The <a href="CppClassTemplate.htm">class template</a> <a href="CppAuto_ptr.htm">std::auto_ptr</a> is deprecated [5]. 
  The <a href="CppClassTemplate.htm">class template</a> <a href="CppUnique_ptr.htm">std::unique_ptr</a> provides a better solution [5].
</p>
<p>&nbsp;</p>
<p>
  <a href="CppAuto_ptr.htm">std::auto_ptr</a> is a <a href="CppSmartPointer.htm">smart pointer</a> that 
  <a href="CppDelete.htm">deletes</a> the <a href="CppInstance.htm">instance</a> it points to when going out 
  of <a href="CppScope.htm">scope</a>. It is supplied in the <a href="CppStl.htm">STL</a> 
  <a href="CppHeaderFile.htm">header file</a> <a href="CppMemoryH.htm">memory.h</a>.
 </p>
<p>&nbsp;</p>
<p><a href="CppAuto_ptr.htm">std::auto_ptr</a> helps to:</p>
<p>&nbsp;</p>
<ul>
  <li>Manage <a href="CppPointer.htm">pointers</a> and preventing <a href="CppMemoryLeak.htm">memory leaks</a></li> 
  <li>Clarifies the <a href="CppPointer.htm">pointer</a> management/ownership in <a href="CppClass.htm">classes</a></li>
  <li>Make code <a href="CppExceptionSafe.htm">exception safe</a></li>
</ul>
<p>&nbsp;</p>
<p>Note: when you use a lot of <a href="CppForwardDeclaration.htm">forward declarations</a>, you might want to prefer 
<a href="CppScoped_ptr.htm">boost::scoped_ptr</a> as it uses <a href="CppChecked_delete.htm">boost::checked_delete</a>. 
Also, <a href="CppScoped_ptr.htm">boost::scoped_ptr</a> cannot be copied, so you will nearly ever be amazed by 'strange' behaviour.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Managing pointers and preventing memory leaks</h2>
<p>&nbsp;</p>
<p>Standard pointer:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> MyClass {};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MyClass <b><a href="CppConst.htm">const</a></b> * p <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> MyClass;<br/>
&nbsp;&nbsp;p-&gt;<b><a href="CppDo.htm">do</a></b>Stuff();<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> p;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Using an auto_ptr:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MyClass {};<br/>
 <br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;MyClass&gt; p(<b><a href="CppNew.htm">new</a></b> MyClass);<br/>
&nbsp;&nbsp;p-&gt;<b><a href="CppDo.htm">do</a></b>Stuff(); <a href="CppComment.htm">//</a>Hey, the same way of accessing the <a href="CppPointer.htm">point</a>ed <a href="CppInstance.htm">instance</a>!<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Done, <a href="CppAuto_ptr.htm">std::auto_ptr</a> deletes itself when going out of <a href="CppScope.htm">scope</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Use objects to manage resources (like dynamically allocated memory)[2]
and store newed objects in smart pointers in standalone statements [3].</p>
<p>&nbsp;</p>
<p><a href="CppAuto_ptr.htm">std::auto_ptr</a>'s does more then saving you
a <a href="CppDelete.htm">delete</a> statement. It ensures that the instance
pointed to is only pointed to once. This is done by a non-symettric copy: when
you pass a pointer from <a href="CppAuto_ptr.htm">std::auto_ptr</a> to 
<a href="CppAuto_ptr.htm">std::auto_ptr</a>, the original possessor gets zero.
This is demonstrated below:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MyClass {};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;MyClass&gt; p1(<b><a href="CppNew.htm">new</a></b> MyClass);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;MyClass&gt; p2;<br/>
 <br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1 <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p2 <a href="CppOperatorEqual.htm">==</a> 0);<br/>
 <br/>
&nbsp;&nbsp;p2 <a href="CppOperatorAssign.htm">=</a> p1; <a href="CppComment.htm">//</a>Copies the MyClass*<br/>
 <br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1 <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p2 <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>To get a copy to the pointed instance use the std::auto_ptr&lt;T&gt;::get
<a href="CppMemberFunction.htm">member function</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MyClass {};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;MyClass&gt; p1(<b><a href="CppNew.htm">new</a></b> MyClass);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MyClass * <b><a href="CppConst.htm">const</a></b> p2 <a href="CppOperatorAssign.htm">=</a> pClass.get();<br/>
 <br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1 <a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p2 <a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Pointer management</h2>
<p>&nbsp;</p>
<p>Also, using a <a href="CppAuto_ptr.htm">std::auto_ptr</a>, it gets clear
which <a href="CppClass.htm">class</a> manages the <a href="CppDelete.htm">deletion</a>
of the pointed <a href="CppInstance.htm">instance</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppClass.htm">class</a></b> Something{};<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> MyClass<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Ownership remains at MyClass (*)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Something * <b><a href="CppConst.htm">const</a></b> GetSomethingCopy() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mpSomething.get();<br/>
&nbsp;&nbsp;}<br/>
 <br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Ownership transferred to caller<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;Something&gt; GetSomething() <a href="CppComment.htm">//</a>Cannot be a <b><a href="CppConst.htm">const</a></b>-method!<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mpSomething;<br/>
&nbsp;&nbsp;}<br/>
 <br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;Something&gt; mpSomething;<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a> (*) Note that despite the constness, the <a href="CppPointer.htm">pointer</a> can be deleted by the caller,<br/>
<a href="CppComment.htm">//</a> without taking proper precautions (See <a href="CppExerciseFoolproofFunction.htm">Exercise #1: a foolproof function</a>)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p> 
<p>If the <a href="CppInstance.htm">instance</a> pointed to needs to be give to another <a href="CppClass.htm">class</a>, then MyClass::GetSomething is
left with an empty (that is: <b>0</b>) pSomething.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Make code <a href="CppExceptionSafe.htm">exception safe</a></h2>
<p>&nbsp;</p>
<p>When you create a new <a href="CppInstance.htm">instance</a> dynamically
in a certain function using a plain pointer, in the end of this function you
call <a href="CppDelete.htm">delete</a>. But when in the middle an 
<a href="CppException.htm">exception</a> is <a href="CppThrow.htm">thrown</a>,
this <a href="CppDelete.htm">delete</a> is not called anymore! When using an 
<a href="CppAuto_ptr.htm">auto_ptr</a>, the instance DOES get deleted. This is
because <a href="CppAuto_ptr.htm">auto_ptr</a>'s <a href="CppDelete.htm">delete</a>
their <a href="CppInstance.htm">instances</a> when they go out of <a
href="CppScope.htm">scope</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Note, warnings, curiosities</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Do not create an <a href="CppArray.htm">array</a> dynamically using a std::auto_ptr</h3>
<p>&nbsp;</p>
<p>This will give you a <a href="CppMemoryLeak.htm">memory leak</a>, as a
std::auto_ptr calls <a href="CppDelete.htm">delete</a>, instead of 
<a href="CppDeleteArray.htm">delete[]</a>. As advised by [1], you should prefer a 
<a href="CppVector.htm">std::vector</a> over an array. But if you really want to
use a <a href="CppSmartPointer.htm">smart pointer</a>, use a 
<a href="CppScoped_array.htm">boost::scoped_array</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Do not put <a href="CppAuto_ptr.htm">std::auto_ptr</a>'s in a <a href="CppVector.htm">std::vector</a> [4]</h3>
<p>&nbsp;</p>
<p>A copy of a <a href="CppAuto_ptr.htm">std::auto_ptr</a> does not copy
the memory address pointed to. Therefore, when using e.g. a sorting algorithm,
some pointed <a href="CppInstance.htm">instances</a> might get <a
href="CppDelete.htm">deleted</a>! Instead, use a <a href="CppShared_ptr.htm">boost::shared_ptr</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Resetting a<a href="CppAuto_ptr.htm">std::auto_ptr</a></h3>
<p>&nbsp;</p>
<p>Resetting a <a href="CppAuto_ptr.htm">std::auto_ptr</a> first constructs a new 
<a href="CppInstance.htm">instance</a> of the <a href="CppClass.htm">class</a> before <a href="CppDelete.htm">deleting</a> 
the old <a href="CppInstance.htm">instance</a>. This is demonstrated by the code below:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> Resetter<br/>
{<br/>
&nbsp;&nbsp;Resetter() { <a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppConstructor.htm">Constructor</a>" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>; }<br/>
&nbsp;&nbsp;~Resetter() { <a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppDestructor.htm">Destructor</a>" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>; }<br/>
};<br/>
 <br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;Resetter&gt; pReset(<b><a href="CppNew.htm">new</a></b> Resetter);<br/>
&nbsp;&nbsp;pReset.reset(<b><a href="CppNew.htm">new</a></b> Resetter);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This gives the following output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppConstructor.htm">Constructor</a><br/>
<a href="CppConstructor.htm">Constructor</a><br/>
<a href="CppDestructor.htm">Destructor</a><br/>
<a href="CppDestructor.htm">Destructor</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>
  The reason for this behavior is  I guess- exception safety: if the
  allocation of the new resources fail, then the old resources are not yet
  released.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li>Herb Sutter and Andrei Alexandrescu. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. 2004. Chapter 77: 'Use vector and string instead of arrays'</li>
  <li>Scott Meyers. Effective C++ (3rd edition). ISBN:0-321-33487-6. 2005. Item 13: 'Use objects to manage resources'</li>
  <li>Scott Meyers. Effective C++ (3rd edition). ISBN:0-321-33487-6. 2005. Item 17: 'Store newed objects in smart pointers in standalone statements'</li>
  <li>Scott Meyers. Effective STL. ISBN:0-201-74962-9. 2001. Item 8: 'Never create containers of auto_ptr's'</li>
  <li><!--  5 --><!-- C++14 -->Working Draft, Standard for Programming Language C++. 2014-08-22. N3936. Paragraph D.10. 'The class template auto_ptr is deprecated [Note: the class template unique_ptr provides a better solution -end note]'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
