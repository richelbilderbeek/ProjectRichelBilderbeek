<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Thinking Wt 1: general</title>
  <meta name="description" content="C++ Thinking Wt 1: general"/>
  <meta name="keywords" content="C++ Thinking Wt 1 general code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <img src="PicWt.png" alt="Wt"/> <a href="CppThinkingWt1.htm">Thinking Wt 1: general</a></h1>
<p>&nbsp;</p>
<p>This <a href="CppArticle.htm">article</a> shows one way to think about program architecture when using the 
<a href="CppWt.htm">Wt</a> <a href="CppLibrary.htm">library</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppThinkingWt1.png">View a screenshot of the application developed in this article (png)</a></li>
  <li><a href="CppThinkingWt1.zip">Download the Qt Creator source code of 'CppThinkingWt1' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Overview</h2>
<p>&nbsp;</p>
<p>In the first two paragraph I will explain the rationale behind the architecture proposed. The following paragraphs
describes the steps in implementing this architecture in a top-down way, followed by a conclusion.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Why these guidelines?</h2>
<p>&nbsp;</p>
<p><a href="CppWt.htm">Wt</a> is 'a widget-centric API' [1] for, primarily, dynamic web applications. I see many 
resemblances in its architecture with the <a href="CppQt.htm">Qt</a> <a href="CppLibrary.htm">library</a>,
suitable for, among others, desktop applications. Due to their different running environments, <a href="CppWt.htm">Wt</a>
(web) and <a href="CppQt.htm">Qt</a> (desktop) are mutually exclusive. Because I enjoy porting applications to as
much platforms as possible, I have developed some applications that use both (but not simultaneously) a 
<a href="CppWt.htm">Wt</a> and a <a href="CppQt.htm">Qt</a> front-end. To be able to do this easily, I follow the
guidelines presented in this <a href="CppArticle.htm">article</a>. Additionally, I like to reuse my own widgets and
dialogs in multiple applications, which is only possible with a proper architecture.</p>
<p>&nbsp;</p>
<p>Note that I follow the same guidelines for <a href="CppQt.htm">Qt</a> front-ends.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Architecture</h2>
<p>&nbsp;</p>
<p>The architecture, from biggest to smallest, is: <a href="CppMain.htm">main</a>, 
<a href="CppWApplication.htm">Wt::WApplication</a>, dialog, widget:</p>
<p>&nbsp;</p>
<ul>
  <li>
    Every C++ program has a single <a href="CppMain.htm">main</a> <a href="CppFunction.htm">function</a>. The purpose
    of this <a href="CppMain.htm">main</a> <a href="CppFunction.htm">function</a> is to create a 
    <a href="CppWApplication.htm">Wt::WApplication</a>. Optionally, <a href="CppMain.htm">main</a> can 
    parse the command-line arguments
  </li>
  <li>
    The purpose of the <a href="CppWApplication.htm">Wt::WApplication</a> is to manage dialogs. Optionally, 
    <a href="CppWApplication.htm">Wt::WApplication</a> can respond to the 
    <a href="CppWEnvironment.htm">Wt::WEnvironment</a> parameters given at 
    <a href="CppConstructor.htm">construction</a>
  </li>
  <li>
    A dialog is a collection of at least one widget. The purpose of a dialog is to respond to its widgets or
    creating other dialogs. A menu is an example of a dialog that creates other dialogs. A TicTacToe dialog
    would display a TicTacToe widget, but additionally shows the score, responding to a player winning
    and allowing the user to close it
  </li>
  <li>
    A widget is a single visual element. The purpose of a widget is to repond to interaction and emitting 
    signals when needed. For example, a TicTacToe widget responds to the clicking of the user and emits
    a signal when the game is finished. The signal might (or might not) be used by the dialog it is in
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Implementing <a href="CppMain.htm">main</a></h2>
<p>&nbsp;</p>
<p>In this example, <a href="CppMain.htm">main</a> creates a single
<a href="CppWApplication.htm">Wt::WApplication</a>, and does not respond to command-line arguments.</p>
<p>&nbsp;</p>
<p>The most basic <a href="CppMain.htm">main</a> <a href="CppFunction.htm">function</a> would only call WRun
with a createApplication <a href="CppFunction.htm">function</a> that only <a href="CppReturn.htm">returns</a>
a <a href="CppNew.htm">newly</a> created <a href="CppWApplication.htm">Wt::WApplication</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WApplication&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WEnvironment&gt;<br/>
<br/>
<a href="CppWApplication.htm">Wt::WApplication</a> *createApplication(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">Wt::WEnvironment</a>&amp; env)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a>Application(env);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> WRun(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>, &amp;createApplication);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This way of creating a <a href="CppWApplication.htm">Wt::WApplication</a> is identical to [2][3].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Implementing the <a href="CppWApplication.htm">Wt::WApplication</a></h2>
<p>&nbsp;</p>
<p>The purpose of the <a href="CppWApplication.htm">Wt::WApplication</a> is to create a dialog. In this example,
WtApplication manages a single to pointer to a single dialog, called WtDialog. 
WtApplication does not respond to the 
<a href="CppWEnvironment.htm">Wt::WEnvironment</a> parameters given at 
<a href="CppConstructor.htm">construction</a>, but sets the WtDialog as its widget. Additionaly,
it sets the browser title to 'My title'.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WApplication&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WEnvironment&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWt.htm">Wt</a>Application : <b><a href="CppPublic.htm">public</a></b> <a href="CppWApplication.htm">Wt::WApplication</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a>Application(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">Wt::WEnvironment</a>&amp; env)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppWApplication.htm">Wt::WApplication</a>(env),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog(<b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a>Dialog)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setTitle("My title");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;root()-&gt;addWidget(m_dialog);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a>Dialog * <b><a href="CppConst.htm">const</a></b> m_dialog;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Because the <a href="CppPointer.htm">pointer</a> m_dialog is set to be managed by <a href="CppWt.htm">Wt</a> in 
the 'addWidget' method, it should not be <a href="CppDelete.htm">deleted</a> (doing so results in a double 
<a href="CppDelete.htm">deletion</a> warning.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Implementing the dialog</h2>
<p>&nbsp;</p>
<p>Because a dialog is a collection of at least one widget, WtDialog is a <a href="CppDerivedClass.htm">derived class</a> 
from <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>. WtDialog manages two widgets, but does not respond
to their signals.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWContainerWidget.htm">WContainerWidget</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWt.htm">Wt</a>Dialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a>Dialog()<br/>
&nbsp;&nbsp;: m_widget1(<b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a>Widget),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_widget2(<b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a>Widget)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(m_widget1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(m_widget2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a>Widget * <b><a href="CppConst.htm">const</a></b> m_widget1;<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a>Widget * <b><a href="CppConst.htm">const</a></b> m_widget2;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Because the <a href="CppPointer.htm">pointers</a> m_widget1 and m_wiget2 are set to be managed by 
<a href="CppWt.htm">Wt</a> in the 'addWidget' method, these should not be <a href="CppDelete.htm">deleted</a> 
(doing so results in a double <a href="CppDelete.htm">deletion</a> warning.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Implementing the widget</h2>
<p>&nbsp;</p>
<p>A widget is a single visual element. In this example, WtWidget is a button (and thus a 
<a href="CppDerivedClass.htm">derived class</a> of <a href="CppWPushButton.htm">Wt::WPushButton</a>), 
that displays how often it is clicked.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WString&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPushButton.htm">WPushButton</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>/<a href="CppIntToWString.htm">IntToWString</a> <a href="CppConvert.htm">converts</a> <a href="CppInt.htm">integer</a> to <a href="CppWString.htm">Wt::WString</a><br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppIntToWString.htm">IntToWString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppWString.htm">Wt::WString</a> <a href="CppIntToWString.htm">IntToWString</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppOstringstream.htm">std::ostringstream</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i)) <b><a href="CppThrow.htm">throw</a></b> <a href="CppLogic_error.htm">std::logic_error</a>("<a href="CppIntToWString.htm">IntToWString</a> failed");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppWString.htm">Wt::WString</a>(s.str());<br/>
}<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWt.htm">Wt</a>Widget : <b><a href="CppPublic.htm">public</a></b> <a href="CppWPushButton.htm">Wt::WPushButton</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a>Widget()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_clicks(0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setText(<a href="CppIntToWString.htm">IntToWString</a>(m_clicks));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;clicked().connect(<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppWt.htm">Wt</a>Widget::OnClick);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnClick()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_clicks;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setText(<a href="CppIntToWString.htm">IntToWString</a>(m_clicks));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_clicks;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>WtWidget responds to its own 'clicked'-signal only.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Running the Wt application</h2>
<p>&nbsp;</p>
<p>
  Add the following line to your <a href="CppQtProjectFile.htm">Qt project file</a> (to prevent 
  <a href="CppLinkError.htm">link errors</a> like 
  <a href="CppLinkErrorUndefinedReferenceToWtWrun.htm">undefined reference to 'Wt::WRun(int, char**, Wt::WApplication* (*)(Wt::WEnvironment const&))'</a>):
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="How to link the Wt library" border = "1"><tr><td><code>
LIBS += -lwt -lwthttp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>
  Additionally, add the following line to your <a href="CppQtProjectFile.htm">Qt project file</a>, 
  as <a href="CppWt.htm">Wt</a> uses the <a href="CppBoostSignals.htm">Boost.Signals</a>
  <a href="CppLibrary.htm">library</a>, that needs to be <a href="CppLink.htm">linked</a> to as well:
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="How to link the Boost.Signals library" border = "1"><tr><td><code>
LIBS += -lboost_signals<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Add the following arguments to the <a href="CppQtCreatorRunSettings.png">Run Settings</a> (to
prevent the <a href="CppMiscError.htm">misc error</a>
<a href="CppMiscErrorStatNoSuchFileOrDirectoryDocumentRootNotValid.htm">stat: No such file or directory. Document root ("") not valid.</a></p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
--docroot . --http-address 0.0.0.0 --http-port 8080<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Start the program and your favorite webbrowser. Take the webbrowser to the following address:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
http://127.0.0.1:8080/<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Conclusion</h2>
<p>&nbsp;</p>
<p>In this <a href="CppArticle.htm">article</a> I have shown one of many <a href="CppWt.htm">Wt</a>
program architectures you can use, for a very basic application. 
In my humble opinion, this architecture makes sense, but I am
open to discussion on this subject.</p>
<p>&nbsp;</p>
<p>My next article, <a href="CppThinkingWt2.htm">Thinking Wt 2: TicTacToe widget</a> describes how I implement the
<a href="CppWt.htm">Wt</a> widget of a Tic-tac-toe game.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppThinkingWt1.png">View a screenshot of the application developed in this article (png)</a></li>
  <li><a href="CppThinkingWt1.zip">Download the Qt Creator source code of 'CppThinkingWt1' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://www.webtoolkit.eu/wt">Wt homepage</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://www.webtoolkit.eu/wt">Wt homepage</a></li>
  <li><a href="http://www.codeguru.com/cpp/i-n/internet/browsercontrol/article.php/c15275__2/Wt-C-Web-Toolkit-Library-Lets-You-Write-Scripting-Independent-Web-Apps.htm">Victor Volkman. Wt: C++ Web Toolkit Library Lets You Write Scripting-Independent Web Apps. www.codeguru.com</a></li>
  <li><a href="http://www.webtoolkit.eu/wt#/src/hello">Wt homepage, source code of the 'Hello world' example</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Acknowledgements</h2>
<p>&nbsp;</p>
<p>
  Thanks Tor Arne Fallingen for notifying me that I omitted linking to Boost.Signals.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
