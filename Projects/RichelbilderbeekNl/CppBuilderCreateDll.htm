<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Create a DLL in C++ Builder</title>
  <meta name="description" content="C++ Create a DLL in C++ Builder"/>
  <meta name="keywords" content="C++ Create a DLL in C++ Builder code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBuilderCreateDll.htm">Create a DLL in C++ Builder</a></h1>
<p>&nbsp;</p>
<p>Before being able to   <a href="CppBuilderCallDll.htm">call a DLL</a>, one has to <a href="CppBuilderCreateDll.htm">create a DLL</a> first.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppBuilderCreateDll.zip">Download all files created in this page (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>To create a <a href="CppBuilderDll.htm">DLL</a> in C++ Builder, do the following steps:</p>
<ul>
  <li>'File | Close All'</li>
  <li>'File | New | Other | DLL Wizard'</li>
  <li>Select 'C++' as the 'Source Type'. Uncheck all checkboxes, unless you need them</li>
</ul>
<p>&nbsp;</p>
<p>The following code is produced, in the default-named Unit1.cpp:</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Unit1.cpp, created after   'File | New | Other | DLL Wizard'</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileQe0YBV.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;windows.h&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; Important note <a href="CppAbout.htm">about</a> DLL <a href="CppMemory.htm">memory</a> management when your DLL uses the<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; <b><a href="CppStatic.htm">static</a></b> <a href="CppVersion.htm">version</a> of the Run<a href="CppTime.htm">Time</a> <a href="CppLibrary.htm">Library</a>:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; If your DLL <b><a href="CppExport.htm">export</a></b>s <a href="CppAny.htm">any</a> <a href="CppFunction.htm">function</a>s that pass String objects (or structs/<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; <b><a href="CppClass.htm">classes</a></b> containing nested Strings) as parameter or <a href="CppFunction.htm">function</a> results,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; you will need to add the <a href="CppLibrary.htm">library</a> MEMMGR.LIB to both the DLL project and<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; <a href="CppAny.htm">any</a> other projects that use the DLL.&nbsp;&nbsp;You will also need to use MEMMGR.LIB<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; <b><a href="CppIf.htm">if</a></b> <a href="CppAny.htm">any</a> other projects which use the DLL will be performing <b><a href="CppNew.htm">new</a></b> or <b><a href="CppDelete.htm">delete</a></b><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; operations on <a href="CppAny.htm">any</a> non-TObject-derived <b><a href="CppClass.htm">classes</a></b> which are <b><a href="CppExport.htm">export</a></b>ed from the<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; DLL. <a href="CppAdd.htm">Add</a>ing MEMMGR.LIB to your project will change the DLL and its calling<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; EXE's to use the BORLNDMM.DLL as their <a href="CppMemory.htm">memory</a> manager.&nbsp;&nbsp;In these <b><a href="CppCase.htm">case</a></b>s,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; the file BORLNDMM.DLL should be deployed along with your DLL.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; To avoid <b><a href="CppUsing.htm">using</a></b> BORLNDMM.DLL, pass string information <b><a href="CppUsing.htm">using</a></b> "<b><a href="CppChar.htm">char</a></b> *" or<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; ShortString parameters.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; If your DLL uses the dynamic <a href="CppVersion.htm">version</a> of the RTL, you <b><a href="CppDo.htm">do</a></b> not need to<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; <b><a href="CppExplicit.htm">explicit</a></b>ly add MEMMGR.LIB as <b><a href="CppThis.htm">this</a></b> will be done implicitly <b><a href="CppFor.htm">for</a></b> you<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> argsused<br/>
<b><a href="CppInt.htm">int</a></b> WINAPI DllEntry<a href="CppPoint.htm">Point</a>(HINSTANCE hinst, <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b> reason, <b><a href="CppVoid.htm">void</a></b>* lpReserved)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code --><p>&nbsp;</p>
<p>&nbsp;</p>
<p>You might want to 'File | Save All' and save this unit as 'UnitEntryPoint.cpp' and the project as 'ProjectDll.bpr'.</p>
<p>&nbsp;</p>
<p>Now it's time to add a function. Do 'File | New | Unit'. Save the newly created unit as 'UnitFunctions.cpp'.</p>
<p>&nbsp;</p>
<p>View UnitFunctions.h first.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitFunctions.h before adding our function</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="file4Tmgln.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> Unit<a href="CppFunction.htm">Function</a>sH<br/>
<a href="CppDefine.htm">#define</a> Unit<a href="CppFunction.htm">Function</a>sH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
 <br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>There is nothing in UnitFunctions.h yet, except for an <a href="CppIncludeGuard.htm">#include
guard</a>. Below 'UnitFunctions.h' has one function added.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitFunctions.h after adding our function</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileYsMNZp.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> Unit<a href="CppFunction.htm">Function</a>sH<br/>
<a href="CppDefine.htm">#define</a> Unit<a href="CppFunction.htm">Function</a>sH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> __cplusplus<br/>
<b><a href="CppExtern.htm">extern</a></b> "C"<br/>
{<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
__declspec (dll<b><a href="CppExport.htm">export</a></b>) <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> GetAnswerOfLife();<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> __cplusplus<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The function put in the DLL is called GetAnswerOfLife and will return the value of
42. Note the <a href="CppIfdef.htm">#ifdef</a>'s before and after the function.
These are obligatory!</p>
<p>&nbsp;</p>
<p>Now the function GetAnswerOfLife must be defined in UnitFunctions.cpp. Upon viewing
it, the code looks like below</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitFunctions.cpp, before adding own code</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filemGXSZp.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
 <br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
 <br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code --><p>&nbsp;</p>
<p>Now add the code of GetAnswerOfLife in the regular way, as shown below</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitFunctions.cpp, after adding own code</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileImsLAG.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> GetAnswerOfLife()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 42;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Press F9 and you have just created your first DLL! After it is created an error will
appear 'One cannot debug project unless a host application is defined.'. No
problem, as, again, you have just created your first DLL. Time to <a
href="CppBuilderCallDll.htm">call a function from your DLL</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Adding some diagnostic features (optional)</h2>
<p>&nbsp;</p>
<p>If you are new to using DLL's, you might want to add some diagnostic features to
UnitEntryPoint.cpp. If not, perhaps you want to <a href="CppBuilderCallDll.htm">call
a DLL</a>.</p>
<p>&nbsp;</p>
<h2>UnitEntryPoint.cpp with diagnostic features added</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filea5oAUW.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;windows.h&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> Important note <a href="CppAbout.htm">about</a> DLL <a href="CppMemory.htm">memory</a> management when your DLL uses the<br/>
<a href="CppComment.htm">//</a> <b><a href="CppStatic.htm">static</a></b> <a href="CppVersion.htm">version</a> of the Run<a href="CppTime.htm">Time</a> <a href="CppLibrary.htm">Library</a>:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> If your DLL <b><a href="CppExport.htm">export</a></b>s <a href="CppAny.htm">any</a> <a href="CppFunction.htm">function</a>s that pass String objects (or structs/<br/>
<a href="CppComment.htm">//</a> <b><a href="CppClass.htm">classes</a></b> containing nested Strings) as parameter or <a href="CppFunction.htm">function</a> results,<br/>
<a href="CppComment.htm">//</a> you will need to add the <a href="CppLibrary.htm">library</a> MEMMGR.LIB to both the DLL project and<br/>
<a href="CppComment.htm">//</a> <a href="CppAny.htm">any</a> other projects that use the DLL. You will also need to use MEMMGR.LIB<br/>
<a href="CppComment.htm">//</a> <b><a href="CppIf.htm">if</a></b> <a href="CppAny.htm">any</a> other projects which use the DLL will be performing <b><a href="CppNew.htm">new</a></b> or <b><a href="CppDelete.htm">delete</a></b><br/>
<a href="CppComment.htm">//</a> operations on <a href="CppAny.htm">any</a> non-TObject-derived <b><a href="CppClass.htm">classes</a></b> which are <b><a href="CppExport.htm">export</a></b>ed from the<br/>
<a href="CppComment.htm">//</a> DLL. <a href="CppAdd.htm">Add</a>ing MEMMGR.LIB to your project will change the DLL and its calling<br/>
<a href="CppComment.htm">//</a> EXE's to use the BORLNDMM.DLL as their <a href="CppMemory.htm">memory</a> manager. In these <b><a href="CppCase.htm">case</a></b>s,<br/>
<a href="CppComment.htm">//</a> the file BORLNDMM.DLL should be deployed along with your DLL.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> To avoid <b><a href="CppUsing.htm">using</a></b> BORLNDMM.DLL, pass string information <b><a href="CppUsing.htm">using</a></b> "<b><a href="CppChar.htm">char</a></b> *" or<br/>
<a href="CppComment.htm">//</a> ShortString parameters.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> If your DLL uses the dynamic <a href="CppVersion.htm">version</a> of the RTL, you <b><a href="CppDo.htm">do</a></b> not need to<br/>
<a href="CppComment.htm">//</a> <b><a href="CppExplicit.htm">explicit</a></b>ly add MEMMGR.LIB as <b><a href="CppThis.htm">this</a></b> will be done implicitly <b><a href="CppFor.htm">for</a></b> you<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
 <br/>
<a href="CppPragma.htm">#pragma</a> argsused<br/>
<b><a href="CppInt.htm">int</a></b> WINAPI DllEntry<a href="CppPoint.htm">Point</a>(HINSTANCE hinst, <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b> reason, <b><a href="CppVoid.htm">void</a></b>* lpReserved)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (reason)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> DLL_PROCESS_ATTACH:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lpReserved)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox(0,"Process has attached to DLL by <b><a href="CppStatic.htm">static</a></b> loading",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"UnitEntry<a href="CppPoint.htm">Point</a>.cpp",MB_OK);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox (0,"Process has attached to DLL by dynamic loadinging",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"UnitEntry<a href="CppPoint.htm">Point</a>.cpp",MB_OK);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> DLL_THREAD_ATTACH:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox (0,"<a href="CppThread.htm">Thread</a> has attached to DLL",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"UnitEntry<a href="CppPoint.htm">Point</a>.cpp",MB_OK);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> DLL_THREAD_DETACH:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox (0,"<a href="CppThread.htm">Thread</a> has detached from DLL",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"UnitEntry<a href="CppPoint.htm">Point</a>.cpp",MB_OK);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> DLL_PROCESS_DETACH:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox (0,"Process has detached from DLL",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"UnitEntry<a href="CppPoint.htm">Point</a>.cpp",MB_OK);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
 <br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Note the use MessageBox instead of <a href="CppVclShowMessage.htm">ShowMessage</a>, as MessageBox is a Win32 API function (so it can be found in windows.h), 
where <a href="CppVclShowMessage.htm">ShowMessage</a> is a <a href="CppVcl.htm">VCL</a> function.</p>
<p>&nbsp;</p>
<p>Perhaps you now want to <a href="CppBuilderCallDll.htm">go to the calling a DLL page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
