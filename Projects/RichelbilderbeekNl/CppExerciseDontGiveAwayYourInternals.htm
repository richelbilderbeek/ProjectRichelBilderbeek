<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Exercise #3: Don't give away your internals</title>
  <meta name="description" content="C++ Exercise #3: Don't give away your internals"/>
  <meta name="keywords" content="C++ Exercise #3: Don't give away your internals code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExerciseDontGiveAwayYourInternals.htm">Exercise #3: Don't give away your internals</a></h1>
<p>&nbsp;</p>
<p>Difficulty: 3/10</p>
<p>Date added: 16th of June 2008</p>
<p>&nbsp;</p>
<p>In this <a href="CppExercise.htm">exercise</a>, you must follow the following
advice: 'Don't give away your internals' [1]. You will learn something about method design and a
'loophole' in constness.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Part #0: checking your <a href="CppMemberFunctionDesign.htm">member function design</a></h2>
<p>&nbsp;</p>
<p>You are programming on a Zoo class, containing a <a href="CppVector.htm">std::vector</a>
of Animal. An Animal is an ordinary <a href="CppStruct.htm">struct</a> containg
member variables only (also called a plain old data type). Your code so far is
shown below.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> Animal {}; <a href="CppComment.htm">//</a>A plain old data type<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> Zoo<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Animal&gt; mAnimals;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Write a <a href="CppMemberFunction.htm">member function</a> called 'GetAnimals' to read, and only read, the <a href="CppVector.htm">std::vector</a> of Animal.</p>
<p>&nbsp;</p>
<p><a href="CppExerciseDontGiveAwayYourInternalsAnswer0.htm">View the answer of this exercise</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Part #1: checking you checking</h2>
<p>&nbsp;</p>
<p>You still work on the same Zoo and Animal class. But you redesigned Animal to be an
<a href="CppAbstractBaseClass.htm">abstract base class</a>. You have decided to
store <a href="CppPointer.htm">pointers</a> to Animal in a <a
href="CppShared_ptr.htm">boost::shared_ptr</a>. Your redesigned code is shown
below.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/shared_ptr.hpp&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Animal { }; <a href="CppComment.htm">//</a>An <a href="CppAbstractBaseClass.htm">abstract base class</a><br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> Zoo<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Animal&gt; &gt; mAnimals;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Write a <a href="CppMemberFunction.htm">member function</a> called 'GetAnimals' to read, and only
read, the <a href="CppVector.htm">std::vector</a> of <a href="CppShared_ptr.htm">boost::shared_ptr</a>
of Animal. Check this method.</p>
<p>&nbsp;</p>
<p><a href="CppExerciseDontGiveAwayYourInternalsAnswer1.htm">View the answer of this exercise</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Post your feedback</h2>
<p>&nbsp;</p>
<p><a href="http://www.programmersheaven.com/article/100053-C%2b%2b+exercise%3a+don%27t+give+away+your+internals/info.aspx">Feedback can be posted at the Programmer's Heaven page about this article</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 28: 'Don't give away your internals'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
