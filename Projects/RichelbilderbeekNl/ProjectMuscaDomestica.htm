<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MuscaDomestica</title>
  <meta name="description" content="C++ MuscaDomestica"/>
  <meta name="keywords" content="C++ MuscaDomestica "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ProjectMuscaDomestica.htm">MuscaDomestica</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.637 at Thu May  1 21:05:31 2014
 -->
<p><img src="PicVcl.png" alt="VCL"/><img src="PicCppBuilder.png" alt="C++ Builder"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="ProjectMuscaDomestica.htm">Project Musca Domestica</a> is a simulation that investigates the relationship between sexual determining systems for different dispersal scenarios.</p>
<p>&nbsp;</p>
<p><a href="ProjectMuscaDomestica.htm">Project Musca Domestica</a> has been developed in a course from the group of <a href="http://www.rug.nl/biologie/onderzoek/onderzoekgroepen/theoreticalbiology/index">Theoretical Biology</a>.</p>
<p>&nbsp;</p>
<p><a href="ProjectMuscaDomestica.htm">Project Musca Domestica</a> has been developed by (sorted alphabetically on first name):</p>
<p>&nbsp;</p>
<ul>
  <li><a href="http://www.rug.nl/biologie/onderzoek/onderzoekgroepen/theoreticalbiology/peoplePages/idoPage?lang=en">Ido Pen</a>: expert knowledge</li>
  <li><a href="http://www.rug.nl/farmacie/onderzoek/basiseenheden/farmacokinetiekendrugdelivery/medewerkers/magdalena_kozielska?lang=en">Magdalena Kozielska</a>: research</li>
  <li>Marlies Westerhof: programming, testing</li>
  <li><a href="http://www.richelbilderbeek.nl/">Richel Bilderbeek</a>: programming, testing</li>
</ul>
<p>&nbsp;</p>
<p><a href="ProjectMuscaDomestica.htm">Project Musca Domestica</a> was developed from about the 2nd to the 18th of December of 2003.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ProjectMuscaDomestica_1_0.png">View a screenshot of 'Project Musca Domestica' (png)</a></li>
  <li><a href="ProjectMuscaDomesticaExe_1_0.zip">Download the 'Project Musca Domestica' Windows executable (zip)</a></li>
  <li><a href="ProjectMuscaDomesticaSource_1_0.zip">Download the 'Project Musca Domestica' source code (zip)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
  <li><img src="PicWeb.png" alt="Web"/> <a href="CppWebApplication.htm">Web application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicGui.png" alt="GUI"/> <a href="CppGuiApplication.htm">GUI application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoost.htm">Boost</a>: version 1.54</li>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 5.2.1 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
  <li><img src="PicWt.png" alt="Wt"/> <a href="CppWt.htm">Wt</a>: version 3.3.0</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ProjectMuscaDomestica/ProjectMuscaDomestica.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/ProjectMuscaDomestica.pro" border = "1"><tr><td><code>
#-------------------------------------------------<br/>
#<br/>
# Project created by <a href="CppQtCreator.htm">QtCreator</a> 2010-12-14T12:41:04<br/>
#<br/>
#-------------------------------------------------<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core gui<br/>
<br/>
<a href="CppQmakeLibs.htm">LIBS</a> += <a href="CppWt.htm">-lwt</a> <a href="CppWt.htm">-lwt</a>http <a href="CppSystem.htm">-lboost_system</a> <a href="CppFilesystem.htm">-lboost_filesystem</a><br/>
<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += \<br/>
&nbsp;&nbsp;-DNDEBUG \<br/>
&nbsp;&nbsp;-std=<a href="Cpp0x.htm">c++0x</a><br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<br/>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAboutDialog.htm">CppWtAboutDialog</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAutoConfig.htm">CppWtAutoConfig</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += wt<a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;projectmuscadomestica<a href="CppMain.htm">main</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">about</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAboutDialog.htm">CppWtAboutDialog</a>/<a href="CppWtAboutDialog.htm">wtaboutdialog</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAutoConfig.htm">CppWtAutoConfig</a>/<a href="CppWtAutoConfig.htm">wtautoconfig</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fly.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mating.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;random.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newgeneration.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nextgeneration.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;richel.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;simulation.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;projectmuscadomestica<a href="CppMain.htm">main</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">about</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAboutDialog.htm">CppWtAboutDialog</a>/<a href="CppWtAboutDialog.htm">wtaboutdialog</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAutoConfig.htm">CppWtAutoConfig</a>/<a href="CppWtAutoConfig.htm">wtautoconfig</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;layout.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fly.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mating.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;random.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newgeneration.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nextgeneration.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;richel.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;simulation.h<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/ProjectMuscaDomestica.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/ProjectMuscaDomestica.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitFormMain<a href="CppImplementationFile.htm">.cpp</a>", Form1);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "Project Musca Domestica";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TForm1), &amp;Form1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/fly.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/fly.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> FLY_H<br/>
<a href="CppDefine.htm">#define</a> FLY_H<br/>
<br/>
<a href="CppComment.htm">//</a>whole set of chromosomes<br/>
<b><a href="CppEnum.htm">enum</a></b> SEX {male, female};<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Fly<br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SEX sex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> SLocus[2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowFly();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> Mated;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> IndexPartner;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> FLY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/fly.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/fly.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Project Musca Domestica, simulation in which sex-ratio can evolve<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "fly.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> InitFPop(<b><a href="CppVoid.htm">void</a></b>)<br/>
{<br/>
<a href="CppComment.htm">//</a>Assumes both FPop and NFFlyOnIsland are both empty<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> Female;<br/>
<a href="CppComment.htm">//</a>Fly fly;<br/>
<b><a href="CppFor.htm">for</a></b>(Female=0;Female&lt;NIslands*MaxFPopSize;Female<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a nice <a href="CppOperatorMinus.htm">-</a>in genetico<a href="CppOperatorMinus.htm">-</a> female fly<br/>
&nbsp;&nbsp;FPop[Female].sex=female;<br/>
&nbsp;&nbsp;FPop[Female].SLocus[0]=0.0001+(Uniform()*0.9998);<br/>
&nbsp;&nbsp;FPop[Female].SLocus[1]=0.0001+(Uniform()*0.9998);<br/>
&nbsp;&nbsp;FPop[Female].Mated=<b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next Female<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> InitMPop(<b><a href="CppVoid.htm">void</a></b>)<br/>
{<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> Male;<br/>
<b><a href="CppFor.htm">for</a></b>(Male=0;Male&lt;NIslands*MaxMPopSize;Male<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a nice <a href="CppOperatorMinus.htm">-</a>in genetico<a href="CppOperatorMinus.htm">-</a> male fly<br/>
&nbsp;&nbsp;MPop[Male].sex=male;<br/>
&nbsp;&nbsp;MPop[Male].SLocus[0]=0.0001+(Uniform()*0.9998);<br/>
&nbsp;&nbsp;MPop[Male].SLocus[1]=0.0001+(Uniform()*0.9998);<br/>
&nbsp;&nbsp;}&nbsp;&nbsp; <a href="CppComment.htm">//</a>next Male<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> CountGenome(<b><a href="CppConst.htm">const</a></b> Fly &amp; AnyFly)<br/>
{<br/>
SLocus<a href="CppCounter.htm">Counter</a><a href="CppOperatorPlusAssign.htm">+=</a>((AnyFly.SLocus[0]+AnyFly.SLocus[1])/2.0);<br/>
}<br/>
<br/>
<br/>
<br/>
Fly CreateOffspringFather(<b><a href="CppConst.htm">const</a></b> Fly &amp; Mother,<b><a href="CppConst.htm">const</a></b> Fly &amp; Father)<br/>
{ <a href="CppComment.htm">//</a>Father in control<br/>
<a href="CppAssert.htm">assert</a>(Mother.sex<a href="CppOperatorEqual.htm">==</a>female);<br/>
<a href="CppAssert.htm">assert</a>(Father.sex<a href="CppOperatorEqual.htm">==</a>male);<br/>
Fly FlyKiddo;<br/>
FlyKiddo.SLocus[0]=Mother.SLocus[RandomNumber(2)];<br/>
FlyKiddo.SLocus[1]=Father.SLocus[RandomNumber(2)];<br/>
<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (Coin()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) swap(FlyKiddo.SLocus[0],FlyKiddo.SLocus[1]);<br/>
<b><a href="CppDouble.htm">double</a></b> ChanceOffspringIsMale <a href="CppOperatorAssign.htm">=</a> (Father.SLocus[0]+Father.SLocus[1])/2.0;<br/>
<b><a href="CppIf.htm">if</a></b> (Uniform() &lt; ChanceOffspringIsMale)<br/>
 { FlyKiddo.sex=male; }<br/>
<b><a href="CppElse.htm">else</a></b><br/>
 {<br/>
 FlyKiddo.sex=female;<br/>
 FlyKiddo.Mated=<b><a href="CppFalse.htm">false</a></b>;<br/>
 }<br/>
<br/>
<b><a href="CppReturn.htm">return</a></b>(FlyKiddo);<br/>
<br/>
}<br/>
<br/>
Fly CreateOffspringMother(<b><a href="CppConst.htm">const</a></b> Fly &amp; Mother,<b><a href="CppConst.htm">const</a></b> Fly &amp; Father)<br/>
{<br/>
<a href="CppAssert.htm">assert</a>(Mother.sex<a href="CppOperatorEqual.htm">==</a>female);<br/>
<a href="CppAssert.htm">assert</a>(Father.sex<a href="CppOperatorEqual.htm">==</a>male);<br/>
Fly FlyKiddo;<br/>
FlyKiddo.SLocus[0]=Mother.SLocus[RandomNumber(2)];<br/>
FlyKiddo.SLocus[1]=Father.SLocus[RandomNumber(2)];<br/>
<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (Coin()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) swap(FlyKiddo.SLocus[0],FlyKiddo.SLocus[1]);<br/>
<b><a href="CppDouble.htm">double</a></b> ChanceOffspringIsMale <a href="CppOperatorAssign.htm">=</a> (Mother.SLocus[0]+Mother.SLocus[1])/2.0;<br/>
<b><a href="CppIf.htm">if</a></b> (Uniform() &lt; ChanceOffspringIsMale)<br/>
 { FlyKiddo.sex=male; }<br/>
<b><a href="CppElse.htm">else</a></b><br/>
 {<br/>
 FlyKiddo.sex=female;<br/>
 FlyKiddo.Mated=<b><a href="CppFalse.htm">false</a></b>;<br/>
 }<br/>
<br/>
<b><a href="CppReturn.htm">return</a></b>(FlyKiddo);<br/>
<br/>
}<br/>
<br/>
Fly CreateOffspringBoth(<b><a href="CppConst.htm">const</a></b> Fly &amp; Mother,<b><a href="CppConst.htm">const</a></b> Fly &amp; Father)<br/>
{<br/>
<a href="CppAssert.htm">assert</a>(Mother.sex<a href="CppOperatorEqual.htm">==</a>female);<br/>
<a href="CppAssert.htm">assert</a>(Father.sex<a href="CppOperatorEqual.htm">==</a>male);<br/>
Fly FlyKiddo;<br/>
FlyKiddo.SLocus[0]=Mother.SLocus[RandomNumber(2)];<br/>
FlyKiddo.SLocus[1]=Father.SLocus[RandomNumber(2)];<br/>
<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (Coin()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) swap(FlyKiddo.SLocus[0],FlyKiddo.SLocus[1]);<br/>
<b><a href="CppDouble.htm">double</a></b> ChanceOffspringIsMale <a href="CppOperatorAssign.htm">=</a> (Mother.SLocus[0]+Mother.SLocus[1]+Father.SLocus[0]+Father.SLocus[1])/4.0;<br/>
<b><a href="CppIf.htm">if</a></b> (Uniform() &lt; ChanceOffspringIsMale)<br/>
 { FlyKiddo.sex=male; }<br/>
<b><a href="CppElse.htm">else</a></b><br/>
 {<br/>
 FlyKiddo.sex=female;<br/>
 FlyKiddo.Mated=<b><a href="CppFalse.htm">false</a></b>;<br/>
 }<br/>
<br/>
<b><a href="CppReturn.htm">return</a></b>(FlyKiddo);<br/>
<br/>
}<br/>
<br/>
Fly CreateOffspringZygote(<b><a href="CppConst.htm">const</a></b> Fly &amp; Mother,<b><a href="CppConst.htm">const</a></b> Fly &amp; Father)<br/>
{<br/>
<a href="CppAssert.htm">assert</a>(Mother.sex<a href="CppOperatorEqual.htm">==</a>female);<br/>
<a href="CppAssert.htm">assert</a>(Father.sex<a href="CppOperatorEqual.htm">==</a>male);<br/>
Fly FlyKiddo;<br/>
FlyKiddo.SLocus[0]=Mother.SLocus[RandomNumber(2)];<br/>
FlyKiddo.SLocus[1]=Father.SLocus[RandomNumber(2)];<br/>
<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (Coin()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) swap(FlyKiddo.SLocus[0],FlyKiddo.SLocus[1]);<br/>
<b><a href="CppDouble.htm">double</a></b> ChanceOffspringIsMale <a href="CppOperatorAssign.htm">=</a> (FlyKiddo.SLocus[0]+FlyKiddo.SLocus[1])/2.0;<br/>
<b><a href="CppIf.htm">if</a></b> (Uniform() &lt; ChanceOffspringIsMale)<br/>
 { FlyKiddo.sex=male; }<br/>
<b><a href="CppElse.htm">else</a></b><br/>
 {<br/>
 FlyKiddo.sex=female;<br/>
 FlyKiddo.Mated=<b><a href="CppFalse.htm">false</a></b>;<br/>
 }<br/>
<br/>
<b><a href="CppReturn.htm">return</a></b>(FlyKiddo);<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/layout.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/layout.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>Layout.h<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppFunction.htm">function</a> showing proportions in every generation on RichEdit<br/>
<b><a href="CppVoid.htm">void</a></b> ShowOnRichEdit(TRichEdit *output, <b><a href="CppInt.htm">int</a></b> i, <b><a href="CppInt.htm">int</a></b> r, TChart * Chart1)&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>i-generation, r-run<br/>
{<br/>
<a href="CppComment.htm">//</a>NIKS<br/>
}<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInitialize.htm">Initialize</a>Parameters(ValueListEditor1,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RadioGroupDispersingSex-&gt;ItemIndex,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RadioGroupWhoIsInControl-&gt;ItemIndex<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RichEditOutput, Chart1);<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppInitialize.htm">Initialize</a>Parameters(TValueListEditor * ValueListEditor1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> WhoDisperses,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> WhoIsInControl,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit * RichEditOutput,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TChart * Chart1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;NIslands=ValueListEditor1-&gt;Cells[1][1].<a href="CppToInt.htm">ToInt</a>Def(0);<br/>
&nbsp;&nbsp;MaxFPopSize=ValueListEditor1-&gt;Cells[1][2].<a href="CppToInt.htm">ToInt</a>Def(0);<br/>
&nbsp;&nbsp;MaxMPopSize=ValueListEditor1-&gt;Cells[1][3].<a href="CppToInt.htm">ToInt</a>Def(0);<br/>
&nbsp;&nbsp;NGenerations=ValueListEditor1-&gt;Cells[1][4].<a href="CppToInt.htm">ToInt</a>Def(0);<br/>
&nbsp;&nbsp;NRuns=ValueListEditor1-&gt;Cells[1][5].<a href="CppToInt.htm">ToInt</a>Def(0);<br/>
&nbsp;&nbsp;PMut=ValueListEditor1-&gt;Cells[1][6].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;CalculateStdDev<a href="CppTime.htm">Time</a>=ValueListEditor1-&gt;Cells[1][7].<a href="CppToInt.htm">ToInt</a>Def(0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CalculateStdDev<a href="CppTime.htm">Time</a>&lt;NGenerations) CalculateStdDev<a href="CppTime.htm">Time</a>=NGenerations/10;<br/>
&nbsp;&nbsp;ValueListEditor1-&gt;Cells[1][7]=CalculateStdDev<a href="CppTime.htm">Time</a>;<br/>
&nbsp;&nbsp;String info="Number of islands: ";<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(NIslands);<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a>"\nNumber of females on island: ";<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(MaxFPopSize);<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a>"\nNumber of males on island: ";<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(MaxMPopSize);<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a>"\nNumber of generations: ";<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(NGenerations);<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a>"\nPMut: ";<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a>(String)PMut;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (WhoDisperses)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0 : <a href="CppComment.htm">//</a>Males disperse<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NextGeneration=NextGenerationMales;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; info<a href="CppOperatorPlusAssign.htm">+=</a>"\nDispersing sex: males";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1 : <a href="CppComment.htm">//</a>Females disperse<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NextGeneration=NextGenerationFemales;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; info<a href="CppOperatorPlusAssign.htm">+=</a>"\nDispersing sex: females";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2 : <a href="CppComment.htm">//</a>Both disperse<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NextGeneration=NextGenerationBoth;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; info<a href="CppOperatorPlusAssign.htm">+=</a>"\nDispersing sex: both";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b> : ShowMessage("Option not possible!"); exit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (WhoIsInControl)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0 : <a href="CppComment.htm">//</a>Father<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CreateOffspring=CreateOffspringFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; info<a href="CppOperatorPlusAssign.htm">+=</a>"\nfather is in control";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1 : <a href="CppComment.htm">//</a>Mother<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CreateOffspring=CreateOffspringMother;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; info<a href="CppOperatorPlusAssign.htm">+=</a>"\nmother is in control";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2 : <a href="CppComment.htm">//</a>Both<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CreateOffspring=CreateOffspringBoth;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; info<a href="CppOperatorPlusAssign.htm">+=</a>"\nboth are in control";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3 : <a href="CppComment.htm">//</a>Zygote<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CreateOffspring=CreateOffspringBoth;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; info<a href="CppOperatorPlusAssign.htm">+=</a>"\nzygote is in control";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b> : ShowMessage("Option not possible!"); exit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> FIRSTDISPERSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a>"\nDispersing first";<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> FIRSTMATE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a>"\nMating first";<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a>"\nCalculateStdDev<a href="CppTime.htm">Time</a>: ";<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(CalculateStdDev<a href="CppTime.htm">Time</a>);<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;Clear();<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>(info);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Run \t Generation \t Male <a href="CppOperatorModulus.htm">%</a> \t X <a href="CppOperatorModulus.htm">%</a> \t Y <a href="CppOperatorModulus.htm">%</a> \t Xm <a href="CppOperatorModulus.htm">%</a> \t FD <a href="CppOperatorModulus.htm">%</a> \t M1 <a href="CppOperatorModulus.htm">%</a> \t M2 <a href="CppOperatorModulus.htm">%</a> \t M3 <a href="CppOperatorModulus.htm">%</a> \t M5 <a href="CppOperatorModulus.htm">%</a> \n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Run \t Generation \t Male <a href="CppOperatorModulus.htm">%</a> \t X <a href="CppOperatorModulus.htm">%</a> \t Y <a href="CppOperatorModulus.htm">%</a> \t Xm <a href="CppOperatorModulus.htm">%</a> \t FD <a href="CppOperatorModulus.htm">%</a> \t M1 <a href="CppOperatorModulus.htm">%</a> \t M2 <a href="CppOperatorModulus.htm">%</a> \t M3 <a href="CppOperatorModulus.htm">%</a> \t M5 <a href="CppOperatorModulus.htm">%</a> \n");<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> ShowOnChart (TChart * Chart1,<b><a href="CppInt.htm">int</a></b> Generation, <a href="CppTImage.htm">TImage</a> * ImageMale, <a href="CppTImage.htm">TImage</a> * ImageFemale, <a href="CppTImage.htm">TImage</a> * ImageResult)<br/>
{<br/>
<a href="CppAssert.htm">assert</a>(FPop.size()+MPop.size()<a href="CppOperatorEqual.htm">==</a>(NIslands*(MaxMPopSize+MaxFPopSize)));<br/>
<b><a href="CppDouble.htm">double</a></b> ResultValue=0.5*SLocus<a href="CppCounter.htm">Counter</a><a href="CppOperatorDivide.htm">/</a> (<b><a href="CppDouble.htm">double</a></b>)(NIslands*(MaxMPopSize+MaxFPopSize));<br/>
Morpher(ImageMale,ImageFemale,ImageResult,ResultValue);<br/>
Chart1-&gt;BackImage-&gt;Graphic=ImageResult-&gt;Picture-&gt;Graphic;<br/>
Chart1-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>Y(ResultValue,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"",Chart1-&gt;Series[0]-&gt;SeriesColor);<br/>
OurDataSet[Generation]=ResultValue;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> EmptyTotalChart(TChart * Chart1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0; <a href="CppCounter.htm">counter</a> &lt; Chart1-&gt;SeriesCount(); <a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Chart1-&gt;Series[<a href="CppCounter.htm">counter</a>]-&gt;Clear();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next <a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: EmptyTotalChart<br/>
<br/>
<a href="CppComment.htm">//</a>saves results from chosen RichEdit<br/>
<b><a href="CppVoid.htm">void</a></b> SeveResults (TRichEdit *Edit, TRadioGroup * RadioGroupDispersingSex)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;String name="results_";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> MALESDISPERSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name<a href="CppOperatorPlusAssign.htm">+=</a>"m_";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> FEMALESDISPERSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name<a href="CppOperatorPlusAssign.htm">+=</a>"f_";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;name<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;name<a href="CppOperatorPlusAssign.htm">+=</a>"i_";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;name<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(MaxMPopSize);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;name<a href="CppOperatorPlusAssign.htm">+=</a>"m_";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;name<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(MaxFPopSize);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;name<a href="CppOperatorPlusAssign.htm">+=</a>"f_";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;name<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(NGenerations);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;name<a href="CppOperatorPlusAssign.htm">+=</a>"g.doc";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Form1-&gt;Save1-&gt;FileName=name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Form1-&gt;Save1-&gt;Execute();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(Form1-&gt;Save1-&gt;FileName<a href="CppOperatorNotEqual.htm">!=</a>"")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Edit-&gt;Lines-&gt;SaveToFile(Form1-&gt;Save1-&gt;FileName);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><b><a href="CppVoid.htm">void</a></b> UpStartScreenLayout(TRichEdit * output,TRichEdit * runsOutput,TRadioGroup * DispersingSex, TChart * Chart1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put info <a href="CppAbout.htm">about</a> simulation into RichEdit objects<br/>
&nbsp;&nbsp;String info;<br/>
&nbsp;&nbsp;info <a href="CppOperatorAssign.htm">=</a>"Number of islands: "+<a href="CppIntToStr.htm">IntToStr</a>(NIslands);<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a>"\nNumber of females on island: "+<a href="CppIntToStr.htm">IntToStr</a>(MaxFPopSize);<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a>"\nNumber of males on island: "+<a href="CppIntToStr.htm">IntToStr</a>(MaxMPopSize);<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a>"\nNumber of generations: "+<a href="CppIntToStr.htm">IntToStr</a>(NGenerations);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(DispersingSex-&gt;ItemIndex<a href="CppOperatorEqual.htm">==</a>0) { info<a href="CppOperatorPlusAssign.htm">+=</a>"\nDispersing sex: males"; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> { info<a href="CppOperatorPlusAssign.htm">+=</a>"\nDispersing sex: females"; }<br/>
&nbsp;&nbsp;info<a href="CppOperatorPlusAssign.htm">+=</a>"\n";<br/>
&nbsp;&nbsp;output-&gt;Lines-&gt;Clear();<br/>
&nbsp;&nbsp;output-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>(info);<br/>
&nbsp;&nbsp;output-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Run \t Generation \t Male <a href="CppOperatorModulus.htm">%</a> \t X <a href="CppOperatorModulus.htm">%</a> \t Y <a href="CppOperatorModulus.htm">%</a> \t Xm <a href="CppOperatorModulus.htm">%</a> \t FD <a href="CppOperatorModulus.htm">%</a> \t M1 <a href="CppOperatorModulus.htm">%</a> \t M2 <a href="CppOperatorModulus.htm">%</a> \t M3 <a href="CppOperatorModulus.htm">%</a> \t M5 <a href="CppOperatorModulus.htm">%</a> \n");<br/>
&nbsp;&nbsp;runsOutput-&gt;Lines-&gt;Clear();<br/>
&nbsp;&nbsp;runsOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>(info);<br/>
&nbsp;&nbsp;runsOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Run \t Generation \t Male <a href="CppOperatorModulus.htm">%</a> \t X <a href="CppOperatorModulus.htm">%</a> \t Y <a href="CppOperatorModulus.htm">%</a> \t Xm <a href="CppOperatorModulus.htm">%</a> \t FD <a href="CppOperatorModulus.htm">%</a> \t M1 <a href="CppOperatorModulus.htm">%</a> \t M2 <a href="CppOperatorModulus.htm">%</a> \t M3 <a href="CppOperatorModulus.htm">%</a> \t M5 <a href="CppOperatorModulus.htm">%</a> \n");<br/>
&nbsp;&nbsp;Chart1-&gt;BottomAxis-&gt;Maximum=NGenerations;<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">*/</a><br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/mating.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/mating.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MATING_H<br/>
<a href="CppDefine.htm">#define</a> MATING_H<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Mating();<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MATING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/mating.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/mating.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "mating.h"<br/>
<br/>
<a href="CppComment.htm">//</a>Matingfirst.h<br/>
<a href="CppComment.htm">//</a>Works correctly<br/>
<b><a href="CppVoid.htm">void</a></b> Mating ()<br/>
{<br/>
<b><a href="CppInt.htm">int</a></b> FemaleFly,Kid,OurIsland, mate, offNum;<br/>
Fly tempFly;<br/>
<b><a href="CppInt.htm">int</a></b> FfliesBefore=0;<br/>
<b><a href="CppInt.htm">int</a></b> MfliesBefore=0;<br/>
<b><a href="CppInt.htm">int</a></b> FOffFliesBefore=0;<br/>
<b><a href="CppInt.htm">int</a></b> MOffFliesBefore=0;<br/>
<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> evey island<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OurIsland&gt;0) <a href="CppComment.htm">//</a>Is it NOT the first island, then...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>counts how many flies and offspring in sum are on island with lower numbers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FfliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>NFFlyOnIsland[OurIsland-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MfliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>NMFlyOnIsland[OurIsland-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FOffFliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>NFOffFlyOnIsland[OurIsland-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MOffFliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>NMOffFlyOnIsland[OurIsland-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NFOffFlyOnIsland.push_back(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NMOffFlyOnIsland.push_back(0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(FemaleFly=0;FemaleFly&lt;NFFlyOnIsland[OurIsland];FemaleFly<a href="CppOperatorIncrement.htm">++</a>)&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every female on island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Select a random mate-&gt; mate='male number'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mate=RandomNumber(NMFlyOnIsland[OurIsland]); <a href="CppComment.htm">//</a>number of male partner<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;NKids;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Putting offspring on right island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.Island=OurIsland;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the kid inherit its parents genes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> AlleleMother, AlleleFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2); <a href="CppComment.htm">//</a> and which allele of parent will be taken<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2); <a href="CppComment.htm">//</a> <b><a href="CppThis.htm">this</a></b> is done <b><a href="CppFor.htm">for</a></b> every "chromosome"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.SexChrom[0]=FPop[FfliesBefore+FemaleFly].SexChrom[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[0]<a href="CppOperatorEqual.htm">==</a>X) {X<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>X,Y,Xm counting<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[0]<a href="CppOperatorEqual.htm">==</a>Y) {Y<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppElse.htm">else</a></b> {Xm<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.SexChrom[1]=MPop[MfliesBefore+mate].SexChrom[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[1]<a href="CppOperatorEqual.htm">==</a>X) {X<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>X,Y,Xm counting<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[1]<a href="CppOperatorEqual.htm">==</a>Y) {Y<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {Xm<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>F <b><a href="CppAuto.htm">auto</a></b>some 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.F<b><a href="CppAuto.htm">auto</a></b>some1[0]=FPop[FfliesBefore+FemaleFly].F<b><a href="CppAuto.htm">auto</a></b>some1[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some1[0]<a href="CppOperatorEqual.htm">==</a>F) {F<a href="CppCounter.htm">counter</a>1<a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {FD<a href="CppCounter.htm">counter</a>1<a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.F<b><a href="CppAuto.htm">auto</a></b>some1[1]=MPop[MfliesBefore+mate].F<b><a href="CppAuto.htm">auto</a></b>some1[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some1[1]<a href="CppOperatorEqual.htm">==</a>F) {F<a href="CppCounter.htm">counter</a>1<a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {FD<a href="CppCounter.htm">counter</a>1<a href="CppOperatorIncrement.htm">++</a>;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>F <b><a href="CppAuto.htm">auto</a></b>some 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.F<b><a href="CppAuto.htm">auto</a></b>some2[0]=FPop[FfliesBefore+FemaleFly].F<b><a href="CppAuto.htm">auto</a></b>some2[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some2[0]<a href="CppOperatorEqual.htm">==</a>F) {F<a href="CppCounter.htm">counter</a>2<a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {FD<a href="CppCounter.htm">counter</a>2<a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.F<b><a href="CppAuto.htm">auto</a></b>some2[1]=MPop[MfliesBefore+mate].F<b><a href="CppAuto.htm">auto</a></b>some2[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some2[1]<a href="CppOperatorEqual.htm">==</a>F) {F<a href="CppCounter.htm">counter</a>2<a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {FD<a href="CppCounter.htm">counter</a>2<a href="CppOperatorIncrement.htm">++</a>;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>F <b><a href="CppAuto.htm">auto</a></b>some 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.F<b><a href="CppAuto.htm">auto</a></b>some3[0]=FPop[FfliesBefore+FemaleFly].F<b><a href="CppAuto.htm">auto</a></b>some3[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some3[0]<a href="CppOperatorEqual.htm">==</a>F) {F<a href="CppCounter.htm">counter</a>3<a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {FD<a href="CppCounter.htm">counter</a>3<a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.F<b><a href="CppAuto.htm">auto</a></b>some3[1]=MPop[MfliesBefore+mate].F<b><a href="CppAuto.htm">auto</a></b>some3[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some3[1]<a href="CppOperatorEqual.htm">==</a>F) {F<a href="CppCounter.htm">counter</a>3<a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {FD<a href="CppCounter.htm">counter</a>3<a href="CppOperatorIncrement.htm">++</a>;}<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]=FPop[FfliesBefore+FemaleFly].M<b><a href="CppAuto.htm">auto</a></b>some1[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]<a href="CppOperatorEqual.htm">==</a>O) {mO1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]=MPop[MfliesBefore+mate].M<b><a href="CppAuto.htm">auto</a></b>some1[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]<a href="CppOperatorEqual.htm">==</a>O) {mO1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]=FPop[FfliesBefore+FemaleFly].M<b><a href="CppAuto.htm">auto</a></b>some2[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]<a href="CppOperatorEqual.htm">==</a>O) {mO2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]=MPop[MfliesBefore+mate].M<b><a href="CppAuto.htm">auto</a></b>some2[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]<a href="CppOperatorEqual.htm">==</a>O) {mO2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[0]=FPop[FfliesBefore+FemaleFly].M<b><a href="CppAuto.htm">auto</a></b>some3[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[0]<a href="CppOperatorEqual.htm">==</a>O) {mO3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[1]=MPop[MfliesBefore+mate].M<b><a href="CppAuto.htm">auto</a></b>some3[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[1]<a href="CppOperatorEqual.htm">==</a>O) {mO3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[0]=FPop[FfliesBefore+FemaleFly].M<b><a href="CppAuto.htm">auto</a></b>some5[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[0]<a href="CppOperatorEqual.htm">==</a>O) {mO5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[1]=MPop[MfliesBefore+mate].M<b><a href="CppAuto.htm">auto</a></b>some5[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[1]<a href="CppOperatorEqual.htm">==</a>O) {mO5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Putting fly on right island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.Island=OurIsland;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mutation in kid...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><b><a href="CppIf.htm">if</a></b>(Uniform()&lt;PMut)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> the mutation occure<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> locus=RandomNumber(12);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> which locus it will occure<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> all=0;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(locus)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(3);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((SEXCHROM) all<a href="CppOperatorEqual.htm">==</a>tempFly.SexChrom[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[0]<a href="CppOperatorEqual.htm">==</a>X) X<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[0]<a href="CppOperatorEqual.htm">==</a>Y) Y<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> Xm<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.SexChrom[0]=SEXCHROM(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[0]<a href="CppOperatorEqual.htm">==</a>X) X<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[0]<a href="CppOperatorEqual.htm">==</a>Y) Y<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> Xm<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(3);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((SEXCHROM) all<a href="CppOperatorEqual.htm">==</a>tempFly.SexChrom[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[1]<a href="CppOperatorEqual.htm">==</a>X) X<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[1]<a href="CppOperatorEqual.htm">==</a>Y) Y<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> Xm<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.SexChrom[1]=SEXCHROM(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[1]<a href="CppOperatorEqual.htm">==</a>X) X<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[1]<a href="CppOperatorEqual.htm">==</a>Y) Y<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> Xm<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((FAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[0]<a href="CppOperatorEqual.htm">==</a>F) F<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> FD<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[0]=FAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[0]<a href="CppOperatorEqual.htm">==</a>F) F<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> FD<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((FAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[1]<a href="CppOperatorEqual.htm">==</a>F) F<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> FD<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[1]=FAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[1]<a href="CppOperatorEqual.htm">==</a>F) F<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> FD<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]<a href="CppOperatorEqual.htm">==</a>O) mO1<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M1<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]<a href="CppOperatorEqual.htm">==</a>O) mO1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]<a href="CppOperatorEqual.htm">==</a>O) mO1<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M1<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]<a href="CppOperatorEqual.htm">==</a>O) mO1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 6: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]<a href="CppOperatorEqual.htm">==</a>O) mO2<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M2<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]<a href="CppOperatorEqual.htm">==</a>O) mO2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 7: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]<a href="CppOperatorEqual.htm">==</a>O) mO2<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M2<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]<a href="CppOperatorEqual.htm">==</a>O) mO2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 8: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[0]<a href="CppOperatorEqual.htm">==</a>O) mO3<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M3<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[0]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[0]<a href="CppOperatorEqual.htm">==</a>O) mO3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 9: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[1]<a href="CppOperatorEqual.htm">==</a>O) mO3<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M3<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[1]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[1]<a href="CppOperatorEqual.htm">==</a>O) mO3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 10: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[0]<a href="CppOperatorEqual.htm">==</a>O) mO5<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M5<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[0]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[0]<a href="CppOperatorEqual.htm">==</a>O) mO5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 11: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[1]<a href="CppOperatorEqual.htm">==</a>O) mO5<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M5<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[1]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[1]<a href="CppOperatorEqual.htm">==</a>O) mO5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppSwitch.htm">switch</a></b>(locus)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>((tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]<a href="CppOperatorEqual.htm">==</a>O <a href="CppOperatorLogicalOr.htm">||</a> tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]<a href="CppOperatorEqual.htm">==</a>O) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]<a href="CppOperatorEqual.htm">==</a>O <a href="CppOperatorLogicalOr.htm">||</a> tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]<a href="CppOperatorEqual.htm">==</a>O))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a> MM homozygosity on 1st and 2nd <b><a href="CppAuto.htm">auto</a></b>some is lethal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.CheckSex()<a href="CppOperatorEqual.htm">==</a>female)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffFPop.push_back(tempFly);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>puts <b><a href="CppNew.htm">new</a></b> fly on the end of the female offspring vector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NFOffFlyOnIsland[OurIsland]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;female<a href="CppCounter.htm">Counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffMPop.push_back(tempFly);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NMOffFlyOnIsland[OurIsland]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;male<a href="CppCounter.htm">Counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a>OLD CODE. STILL NEEDED YES/NO?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppIf.htm">if</a></b> (tempFly.GetSex()<a href="CppOperatorEqual.htm">==</a>male) <a href="CppComment.htm">//</a>A male is born<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempFly.sex=male;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OffMPop.push_back(tempFly);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NMOffFlyOnIsland[OurIsland]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; male<a href="CppCounter.htm">Counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempFly.sex=female;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OffFPop.push_back(tempFly);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>puts <b><a href="CppNew.htm">new</a></b> fly on the end of the female offspring vector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NFOffFlyOnIsland[OurIsland]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; female<a href="CppCounter.htm">Counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next Kid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a>next FemaleFly<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>next OurIsland<br/>
<b><a href="CppIf.htm">if</a></b> (male<a href="CppCounter.htm">Counter</a><a href="CppOperatorEqual.htm">==</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> female<a href="CppCounter.htm">Counter</a><a href="CppOperatorEqual.htm">==</a>0) { PopulationDied=<b><a href="CppTrue.htm">true</a></b>; }<br/>
<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;NFFlyOnIsland[OurIsland]=0;<br/>
&nbsp;&nbsp;NMFlyOnIsland[OurIsland]=0;<br/>
&nbsp;&nbsp;}<br/>
FPop.resize(0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>paternal populations deleted<br/>
MPop.resize(0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
}<br/>
<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> NewGeneration (vector &lt;Fly&gt; &amp;dispersingSex, vector &lt;Fly&gt; &amp;nondispersingSex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;Fly&gt; &amp;OffdispersingSex, vector &lt;Fly&gt; &amp;OffnondispersingSex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;dSexOnIsland, vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;ndSexOnIsland,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;OffdSexOnIsland, vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;Off<a href="CppNds.htm">NDS</a>exOnIsland,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> MaxDsex, <b><a href="CppInt.htm">int</a></b> MaxNDsex)<br/>
{<br/>
<b><a href="CppInt.htm">int</a></b> Kid, LuckyFly, OurIsland, fliesBefore=0, OffFliesBefore=0;<br/>
vector&lt;Fly&gt;::<a href="CppIterator.htm">iterator</a> iBiginning=dispersingSex.begin();<br/>
<br/>
<a href="CppComment.htm">//</a>non-dispersing sex stays on the some island as mothers<br/>
<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every island<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(OurIsland&gt;0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>check how many offspring flies are on previous islands<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>OffFliesBefore are Non-dispers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OffFliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>Off<a href="CppNds.htm">NDS</a>exOnIsland[OurIsland-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b>(OurIsland&gt;0)<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Offspring of the non-dispersing sex<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ShowMessage(Off<a href="CppNds.htm">NDS</a>exOnIsland.<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(Off<a href="CppNds.htm">NDS</a>exOnIsland[OurIsland]<a href="CppOperatorLessEqual.htm">&lt;=</a>MaxNDsex) <a href="CppComment.htm">//</a>Als het eiland nog niet vol is, dan...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are less or the same numer of offspring as the carrying capacity of the island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;Off<a href="CppNds.htm">NDS</a>exOnIsland[OurIsland];Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every offspring fly moves then to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>********************************** Shouldn't the nondispersingSex vector be emptied first"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nondispersingSex.push_back(OffnondispersingSex[OffFliesBefore+Kid]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ndSexOnIsland[OurIsland]=Off<a href="CppNds.htm">NDS</a>exOnIsland[OurIsland]; <a href="CppComment.htm">//</a>number of flies in the <b><a href="CppNew.htm">new</a></b> generation equals number of offspring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b>(Off<a href="CppNds.htm">NDS</a>exOnIsland[OurIsland]<a href="CppOperatorLessEqual.htm">&lt;=</a>MaxNDsex)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are more offspring than carrying capacity of the island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;MaxNDsex;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every place on the island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>takes random fly from offspring on that island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LuckyFly=RandomNumber(Off<a href="CppNds.htm">NDS</a>exOnIsland[OurIsland]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>and moves it to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nondispersingSex.push_back(OffnondispersingSex[OffFliesBefore+LuckyFly]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>moves last fly from the island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffnondispersingSex[OffFliesBefore+LuckyFly]=OffnondispersingSex[OffFliesBefore+Off<a href="CppNds.htm">NDS</a>exOnIsland[OurIsland]-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Off<a href="CppNds.htm">NDS</a>exOnIsland[OurIsland]<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>counts original number of offspring flies on island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Off<a href="CppNds.htm">NDS</a>exOnIsland[OurIsland]<a href="CppOperatorPlusAssign.htm">+=</a>MaxNDsex; <a href="CppComment.htm">//</a>?????<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>number of flies in <b><a href="CppNew.htm">new</a></b> generatin equals carrying capacity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ndSexOnIsland[OurIsland]=MaxNDsex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next OurIslands<br/>
<br/>
<a href="CppComment.htm">//</a>dispersing sex<br/>
<b><a href="CppInt.htm">int</a></b> island=0;<br/>
OffFliesBefore=0;<br/>
<b><a href="CppInt.htm">int</a></b> OffdSex<a href="CppCounter.htm">Counter</a>=OffdispersingSex.size();<br/>
<b><a href="CppIf.htm">if</a></b>((<b><a href="CppInt.htm">int</a></b>)OffdispersingSex.size()<a href="CppOperatorGreaterEqual.htm">&gt;=</a>MaxDsex*NIslands)<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are in sum more offspring that total carrying capacity of population<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;MaxDsex;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every place on island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>take by random one dispersing offspring fly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LuckyFly=RandomNumber(OffdSex<a href="CppCounter.htm">Counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(OffdispersingSex[LuckyFly].Island<a href="CppOperatorEqual.htm">==</a>OurIsland <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> LuckyFly<a href="CppOperatorNotEqual.htm">!=</a>0); <a href="CppComment.htm">//</a>but not from the same island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffdispersingSex[LuckyFly].Island=OurIsland;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>adds that fly to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispersingSex.push_back(OffdispersingSex[LuckyFly]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>puts last fly from offspring population in place of moved fly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffdispersingSex[LuckyFly]=OffdispersingSex[OffdSex<a href="CppCounter.htm">Counter</a>-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>size of offspring population decreases by one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffdSex<a href="CppCounter.htm">Counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dSexOnIsland[OurIsland]=MaxDsex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next OurIsland<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b><br/>
<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are in sum less offspring that total carrying capacity of population <a href="CppOperatorMinus.htm">-</a>&gt; No flies die<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;OffdSex<a href="CppCounter.htm">Counter</a>;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every offspring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>chose island different thet the one on which the offspring is and not full<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;island=RandomNumber(NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((dSexOnIsland[island]<a href="CppOperatorGreaterEqual.htm">&gt;=</a>MaxDsex <a href="CppOperatorLogicalOr.htm">||</a> dispersingSex[Kid].Island<a href="CppOperatorEqual.htm">==</a>island) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n&lt;OffdSex<a href="CppCounter.htm">Counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>CAUTION!! An island might get overcrowded!!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dispersingSex[Kid].Island<a href="CppOperatorEqual.htm">==</a>island) ShowMessage("Overcrowding!"); <a href="CppComment.htm">//</a>But it nearly ever happens!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fliesBefore=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> AlsoAnIsland; <b><a href="CppFor.htm">for</a></b>(AlsoAnIsland=0;AlsoAnIsland&lt;island;AlsoAnIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>checks how many <b><a href="CppNew.htm">new</a></b> generation flies are already on all islands with smaller number<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>dSexOnIsland[AlsoAnIsland];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next AlsoAnIsland<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OffdispersingSex[Kid].Island=island;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>adds fly to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispersingSex.insert(iBiginning+fliesBefore,OffdispersingSex[Kid]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dSexOnIsland[island]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppComment.htm">//</a>setting sizes of offspring subpopulations to 0<br/>
<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;Off<a href="CppNds.htm">NDS</a>exOnIsland[OurIsland]=0;<br/>
&nbsp;&nbsp;OffdSexOnIsland[OurIsland]=0;<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next OurIsland<br/>
<a href="CppComment.htm">//</a>offspring populations resized to zero<br/>
OffnondispersingSex.resize(0);<br/>
OffdispersingSex.resize(0);<br/>
}<a href="CppComment.htm">//</a>End of: NewGeneration<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> NewGenerationBoth(vector &lt;Fly&gt; &amp;dispersingSex, vector &lt;Fly&gt; &amp;dispersingSex2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vector &lt;Fly&gt; &amp;OffdispersingSex, vector &lt;Fly&gt; &amp;OffdispersingSex2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;dSexOnIsland, vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;dSexOnIsland2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;OffdSexOnIsland, vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;OffdSexOnIsland2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppInt.htm">int</a></b> MaxDsex, <b><a href="CppInt.htm">int</a></b> MaxDsex2)<br/>
{<br/>
<b><a href="CppInt.htm">int</a></b> Kid, LuckyFly, OurIsland, fliesBefore=0;<br/>
<b><a href="CppInt.htm">int</a></b> fliesBefore2=0;<br/>
vector&lt;Fly&gt;::<a href="CppIterator.htm">iterator</a> iBiginning=dispersingSex.begin();<br/>
vector&lt;Fly&gt;::<a href="CppIterator.htm">iterator</a> iBiginning2=dispersingSex2.begin();<br/>
<br/>
<a href="CppComment.htm">//</a>dispersing sex 1<br/>
<b><a href="CppInt.htm">int</a></b> island=0;<br/>
<b><a href="CppInt.htm">int</a></b> OffdSex<a href="CppCounter.htm">Counter</a>=OffdispersingSex.size();<br/>
<b><a href="CppIf.htm">if</a></b>((<b><a href="CppInt.htm">int</a></b>)OffdispersingSex.size()<a href="CppOperatorGreaterEqual.htm">&gt;=</a>MaxDsex*NIslands)<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are in sum more offspring that total carrying capacity of population<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;MaxDsex;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every place on island<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>take by random one dispersing offspring fly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LuckyFly=RandomNumber(OffdSex<a href="CppCounter.htm">Counter</a>);<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(OffdispersingSex[LuckyFly].Island<a href="CppOperatorEqual.htm">==</a>OurIsland <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> LuckyFly<a href="CppOperatorNotEqual.htm">!=</a>0); <a href="CppComment.htm">//</a>but not from the same island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffdispersingSex[LuckyFly].Island=OurIsland;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>adds that fly to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispersingSex.push_back(OffdispersingSex[LuckyFly]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>puts last fly from offspring population in place of moved fly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffdispersingSex[LuckyFly]=OffdispersingSex[OffdSex<a href="CppCounter.htm">Counter</a>-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>size of offspring population decreases by one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffdSex<a href="CppCounter.htm">Counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dSexOnIsland[OurIsland]=MaxDsex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next OurIsland<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b><br/>
<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are in sum less offspring that total carrying capacity of population <a href="CppOperatorMinus.htm">-</a>&gt; No flies die<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;OffdSex<a href="CppCounter.htm">Counter</a>;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every offspring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>chose island different thet the one on which the offspring is and not full<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;island=RandomNumber(NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((dSexOnIsland[island]<a href="CppOperatorGreaterEqual.htm">&gt;=</a>MaxDsex <a href="CppOperatorLogicalOr.htm">||</a> dispersingSex[Kid].Island<a href="CppOperatorEqual.htm">==</a>island) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n&lt;OffdSex<a href="CppCounter.htm">Counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>CAUTION!! An island might get overcrowded!!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dispersingSex[Kid].Island<a href="CppOperatorEqual.htm">==</a>island) ShowMessage("Overcrowding!"); <a href="CppComment.htm">//</a>But it nearly ever happens!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fliesBefore=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> AlsoAnIsland; <b><a href="CppFor.htm">for</a></b>(AlsoAnIsland=0;AlsoAnIsland&lt;island;AlsoAnIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>checks how many <b><a href="CppNew.htm">new</a></b> generation flies are already on all islands with smaller number<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>dSexOnIsland[AlsoAnIsland];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next AlsoAnIsland<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OffdispersingSex[Kid].Island=island;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>adds fly to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispersingSex.insert(iBiginning+fliesBefore,OffdispersingSex[Kid]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dSexOnIsland[island]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppComment.htm">//</a>THE OTHER SEX ALSO DISPERSES HERE<br/>
<b><a href="CppInt.htm">int</a></b> OffdSex<a href="CppCounter.htm">Counter</a>2=OffdispersingSex2.size();<br/>
<b><a href="CppIf.htm">if</a></b>((<b><a href="CppInt.htm">int</a></b>)OffdispersingSex2.size()<a href="CppOperatorGreaterEqual.htm">&gt;=</a>MaxDsex2*NIslands)<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are in sum more offspring that total carrying capacity of population<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;MaxDsex2;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every place on island<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>take by random one dispersing offspring fly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LuckyFly=RandomNumber(OffdSex<a href="CppCounter.htm">Counter</a>2);<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(OffdispersingSex2[LuckyFly].Island<a href="CppOperatorEqual.htm">==</a>OurIsland <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> LuckyFly<a href="CppOperatorNotEqual.htm">!=</a>0); <a href="CppComment.htm">//</a>but not from the same island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffdispersingSex2[LuckyFly].Island=OurIsland;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>adds that fly to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispersingSex2.push_back(OffdispersingSex2[LuckyFly]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>puts last fly from offspring population in place of moved fly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffdispersingSex2[LuckyFly]=OffdispersingSex2[OffdSex<a href="CppCounter.htm">Counter</a>2-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>size of offspring population decreases by one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffdSex<a href="CppCounter.htm">Counter</a>2<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dSexOnIsland2[OurIsland]=MaxDsex2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next OurIsland<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b><br/>
<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are in sum less offspring that total carrying capacity of population <a href="CppOperatorMinus.htm">-</a>&gt; No flies die<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;OffdSex<a href="CppCounter.htm">Counter</a>2;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every offspring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>chose island different thet the one on which the offspring is and not full<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;island=RandomNumber(NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((dSexOnIsland2[island]<a href="CppOperatorGreaterEqual.htm">&gt;=</a>MaxDsex2 <a href="CppOperatorLogicalOr.htm">||</a> dispersingSex2[Kid].Island<a href="CppOperatorEqual.htm">==</a>island) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n&lt;OffdSex<a href="CppCounter.htm">Counter</a>2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>CAUTION!! An island might get overcrowded!!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dispersingSex2[Kid].Island<a href="CppOperatorEqual.htm">==</a>island) ShowMessage("Overcrowding!"); <a href="CppComment.htm">//</a>But it nearly ever happens!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fliesBefore2=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> AlsoAnIsland; <b><a href="CppFor.htm">for</a></b>(AlsoAnIsland=0;AlsoAnIsland&lt;island;AlsoAnIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>checks how many <b><a href="CppNew.htm">new</a></b> generation flies are already on all islands with smaller number<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fliesBefore2<a href="CppOperatorPlusAssign.htm">+=</a>dSexOnIsland2[AlsoAnIsland];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next AlsoAnIsland<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OffdispersingSex2[Kid].Island=island;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>adds fly to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispersingSex2.insert(iBiginning2+fliesBefore2,OffdispersingSex2[Kid]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dSexOnIsland2[island]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppComment.htm">//</a>setting sizes of offspring subpopulations to 0<br/>
<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;OffdSexOnIsland2[OurIsland]=0;<br/>
&nbsp;&nbsp;OffdSexOnIsland[OurIsland]=0;<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next OurIsland<br/>
<a href="CppComment.htm">//</a>offspring populations resized to zero<br/>
OffdispersingSex.resize(0);<br/>
OffdispersingSex2.resize(0);<br/>
}<a href="CppComment.htm">//</a>End of: NewGenerationBoth<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/newgeneration.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/newgeneration.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> NEWGENERATION_H<br/>
<a href="CppDefine.htm">#define</a> NEWGENERATION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "fly.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> NewGeneration3 (vector &lt;Fly&gt; &amp;MPop, vector &lt;Fly&gt; &amp;FPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;Fly&gt; &amp;OffMPop, vector &lt;Fly&gt; &amp;OffFPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;NMPop, vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;NFPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;NOffMPop, vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;NOffFPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> MaxMFlies, <b><a href="CppInt.htm">int</a></b> MaxFFlies)<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> NEWGENERATION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/newgeneration.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/newgeneration.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "newgeneration.h"<br/>
<br/>
<a href="CppComment.htm">//</a>Dispersingfirst.h<br/>
<b><a href="CppVoid.htm">void</a></b> NewGeneration1 (vector &lt;Fly&gt; &amp;OffdispersingSex, vector &lt;Fly&gt; &amp;OffnondispersingSex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;Fly&gt; &amp;dispersingSex, vector &lt;Fly&gt; &amp;nondispersingSex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;dSexOnIsland, vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;ndSexOnIsland,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;OffdSexOnIsland, vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;OffndSexOnIsland,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> MaxDsex, <b><a href="CppInt.htm">int</a></b> MaxNDsex)<br/>
<br/>
{<br/>
<b><a href="CppInt.htm">int</a></b> Kid, LuckyFly, OurIsland, fliesBefore=0, OffFliesBefore=0;<br/>
vector&lt;Fly&gt;::<a href="CppIterator.htm">iterator</a> iBiginning=OffdispersingSex.begin();<br/>
<br/>
<a href="CppComment.htm">//</a>non-dispersing sex stays on the some island as mothers<br/>
<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every island<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(OurIsland&gt;0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>check how many offspring flies are on previous islands<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>OffFliesBefore are Non-dispers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>ndSexOnIsland[OurIsland-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b>(OurIsland&gt;0)<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Offspring of the non-dispersing sex<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ShowMessage(ndSexOnIsland.<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(OffndSexOnIsland[OurIsland]<a href="CppOperatorLessEqual.htm">&lt;=</a>MaxNDsex) <a href="CppComment.htm">//</a>Als het eiland nog niet vol is, dan...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are less or the same numer of offspring as the carrying capacity of the island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;ndSexOnIsland[OurIsland];Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every offspring fly moves then to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>********************************** Shouldn't the OffnondispersingSex vector be emptied first"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffnondispersingSex.push_back(nondispersingSex[fliesBefore+Kid]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ShowMessage(OffndSexOnIsland.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OffndSexOnIsland[OurIsland]=ndSexOnIsland[OurIsland]; <a href="CppComment.htm">//</a>number of flies in the <b><a href="CppNew.htm">new</a></b> generation equals number of offspring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b>(ndSexOnIsland[OurIsland]<a href="CppOperatorLessEqual.htm">&lt;=</a>MaxNDsex)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are more offspring than carrying capacity of the island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;MaxNDsex;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every place on the island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>takes random fly from offspring on that island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LuckyFly=RandomNumber(ndSexOnIsland[OurIsland]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>and moves it to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffnondispersingSex.push_back(nondispersingSex[fliesBefore+LuckyFly]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>moves last fly from the island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nondispersingSex[fliesBefore+LuckyFly]=nondispersingSex[fliesBefore+ndSexOnIsland[OurIsland]-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ndSexOnIsland[OurIsland]<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>counts original number of offspring flies on island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ndSexOnIsland[OurIsland]<a href="CppOperatorPlusAssign.htm">+=</a>MaxNDsex; <a href="CppComment.htm">//</a>?????<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>number of flies in <b><a href="CppNew.htm">new</a></b> generatin equals carrying capacity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OffndSexOnIsland[OurIsland]=MaxNDsex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next OurIslands<br/>
<br/>
<a href="CppComment.htm">//</a>dispersing sex<br/>
<b><a href="CppInt.htm">int</a></b> island=0;<br/>
fliesBefore=0;<br/>
<b><a href="CppInt.htm">int</a></b> dSex<a href="CppCounter.htm">Counter</a>=dispersingSex.size();<br/>
<b><a href="CppIf.htm">if</a></b>((<b><a href="CppInt.htm">int</a></b>)dispersingSex.size()<a href="CppOperatorGreaterEqual.htm">&gt;=</a>MaxDsex*NIslands)<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are in sum more offspring that total carrying capacity of population<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;MaxDsex;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every place on island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>take by random one dispersing offspring fly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LuckyFly=RandomNumber(dSex<a href="CppCounter.htm">Counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(dispersingSex[LuckyFly].Island<a href="CppOperatorEqual.htm">==</a>OurIsland <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> LuckyFly<a href="CppOperatorNotEqual.htm">!=</a>0); <a href="CppComment.htm">//</a>but not from the same island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispersingSex[LuckyFly].Island=OurIsland;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>adds that fly to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffdispersingSex.push_back(dispersingSex[LuckyFly]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>puts last fly from offspring population in place of moved fly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispersingSex[LuckyFly]=dispersingSex[dSex<a href="CppCounter.htm">Counter</a>-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>size of offspring population decreases by one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dSex<a href="CppCounter.htm">Counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OffdSexOnIsland[OurIsland]=MaxDsex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next OurIsland<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b><br/>
<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are in sum less offspring that total carrying capacity of population <a href="CppOperatorMinus.htm">-</a>&gt; No flies die<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;dSex<a href="CppCounter.htm">Counter</a>;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every offspring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>chose island different thet the one on which the offspring is and not full<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;island=RandomNumber(NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((OffdSexOnIsland[island]<a href="CppOperatorGreaterEqual.htm">&gt;=</a>MaxDsex <a href="CppOperatorLogicalOr.htm">||</a> OffdispersingSex[Kid].Island<a href="CppOperatorEqual.htm">==</a>island) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n&lt;dSex<a href="CppCounter.htm">Counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>CAUTION!! An island might get overcrowded!!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OffdispersingSex[Kid].Island<a href="CppOperatorEqual.htm">==</a>island) ShowMessage("Overcrowding!"); <a href="CppComment.htm">//</a>But it nearly ever happens!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fliesBefore=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> AlsoAnIsland; <b><a href="CppFor.htm">for</a></b>(AlsoAnIsland=0;AlsoAnIsland&lt;island;AlsoAnIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>checks how many <b><a href="CppNew.htm">new</a></b> generation flies are already on all islands with smaller number<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>OffdSexOnIsland[AlsoAnIsland];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next AlsoAnIsland<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispersingSex[Kid].Island=island;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>adds fly to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OffdispersingSex.insert(iBiginning+fliesBefore,dispersingSex[Kid]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OffdSexOnIsland[island]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppComment.htm">//</a>setting sizes of offspring subpopulations to 0<br/>
<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;ndSexOnIsland[OurIsland]=0;<br/>
&nbsp;&nbsp;dSexOnIsland[OurIsland]=0;<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next OurIsland<br/>
<a href="CppComment.htm">//</a>offspring populations resized to zero<br/>
nondispersingSex.resize(0);<br/>
dispersingSex.resize(0);<br/>
}<a href="CppComment.htm">//</a>End of: NewGeneration<br/>
<br/>
<a href="CppComment.htm">//</a>Every female mates with one randomly chosen male from her island and gives offspring<br/>
<a href="CppComment.htm">//</a>males can be chosen several <a href="CppTime.htm">time</a>s<br/>
<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>Every female mates with one randomly chosen male from her island and gives offspring<br/>
<a href="CppComment.htm">//</a>males can be chosen several <a href="CppTime.htm">time</a>s<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Mating2 (TRadioGroup * RadioGroup1)<br/>
{<br/>
<b><a href="CppInt.htm">int</a></b> FemaleFly,Kid,OurIsland, mate, offNum;<br/>
Fly tempFly;<br/>
<b><a href="CppInt.htm">int</a></b> FfliesBefore=0;<br/>
<b><a href="CppInt.htm">int</a></b> MfliesBefore=0;<br/>
<b><a href="CppInt.htm">int</a></b> FOffFliesBefore=0;<br/>
<b><a href="CppInt.htm">int</a></b> MOffFliesBefore=0;<br/>
<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> evey island<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (OurIsland&gt;0) <a href="CppComment.htm">//</a>Is it NOT the first island, then...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>counts how many flies and offspring in sum are on island with lower numbers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FfliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>NFOffFlyOnIsland[OurIsland-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MfliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>NMOffFlyOnIsland[OurIsland-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FOffFliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>NFFlyOnIsland[OurIsland-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MOffFliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>NMFlyOnIsland[OurIsland-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NFFlyOnIsland.push_back(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NMFlyOnIsland.push_back(0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(FemaleFly=0;FemaleFly&lt;NFOffFlyOnIsland[OurIsland];FemaleFly<a href="CppOperatorIncrement.htm">++</a>)&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every female on island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Select a random mate-&gt; mate='male number'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mate=RandomNumber(NMFlyOnIsland[OurIsland]); <a href="CppComment.htm">//</a>number of male partner<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;10*(MaxFPopSize+MaxMPopSize)/NFFlyOnIsland[OurIsland];Kid<a href="CppOperatorIncrement.htm">++</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>creation of 10 offspring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Inheriting SLocus of parents<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> AlleleMother, AlleleFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2); <a href="CppComment.htm">//</a> and which allele of parent will be taken<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2); <a href="CppComment.htm">//</a> <b><a href="CppThis.htm">this</a></b> is done <b><a href="CppFor.htm">for</a></b> every "chromosome"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.SLocus[0] <a href="CppOperatorAssign.htm">=</a> FPop[FfliesBefore+FemaleFly].SLocus[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.SLocus[1] <a href="CppOperatorAssign.htm">=</a> MPop[MfliesBefore+mate].SLocus[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b>(Uniform()&lt;PMut) <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> the mutation occure<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> OneSLocus=RandomNumber(2);&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> which locus it will occure<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.SLocus[OneSLocus] <a href="CppOperatorPlusAssign.htm">+=</a> ((Uniform()*PMut)-(0.5*PMut));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Keep track of S in the population<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumS<a href="CppOperatorPlusAssign.htm">+=</a> ((tempFly.SLocus[0]+tempFly.SLocus[1])/2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FliesCheckedForS<a href="CppOperatorIncrement.htm">++</a>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Putting offspring on right island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.Island=OurIsland;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Determining offspring's sex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> ChanceOffspringIsMale=-1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroup1-&gt;ItemIndex)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <a href="CppComment.htm">//</a>If mother is in control....<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChanceOffspringIsMale <a href="CppOperatorAssign.htm">=</a> (FPop[FfliesBefore+FemaleFly].SLocus[0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>FPop[FfliesBefore+FemaleFly].SLocus[1])/2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppComment.htm">//</a>If father is in control...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChanceOffspringIsMale <a href="CppOperatorAssign.htm">=</a> (MPop[MfliesBefore+mate].SLocus[0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>MPop[MfliesBefore+mate].SLocus[1])/2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <a href="CppComment.htm">//</a>If both are in control...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChanceOffspringIsMale <a href="CppOperatorAssign.htm">=</a> (FPop[FfliesBefore+FemaleFly].SLocus[0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>FPop[FfliesBefore+FemaleFly].SLocus[1]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>MPop[MfliesBefore+mate].SLocus[0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>MPop[MfliesBefore+mate].SLocus[1])/4.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <a href="CppComment.htm">//</a>If genotype offspring is in control...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChanceOffspringIsMale <a href="CppOperatorAssign.htm">=</a> (tempFly.SLocus[0]+tempFly.SLocus[1])/2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppSwitch.htm">switch</a></b> (RadioGroup1-&gt;Index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppIf.htm">if</a></b> (Uniform() &lt; ChanceOffspringIsMale) <a href="CppComment.htm">//</a>A male is born<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempFly.sex=male;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MPop.push_back(tempFly);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NMFlyOnIsland[OurIsland]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; male<a href="CppCounter.htm">Counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempFly.sex=female;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FPop.push_back(tempFly);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>puts <b><a href="CppNew.htm">new</a></b> fly on the end of the female offspring vector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NFFlyOnIsland[OurIsland]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; female<a href="CppCounter.htm">Counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.SexChrom[0]=FPop[FfliesBefore+FemaleFly].SexChrom[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[0]<a href="CppOperatorEqual.htm">==</a>X) {X<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>X,Y,Xm counting<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[0]<a href="CppOperatorEqual.htm">==</a>Y) {Y<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {Xm<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.SexChrom[1]=MPop[MfliesBefore+mate].SexChrom[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[1]<a href="CppOperatorEqual.htm">==</a>X) {X<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>X,Y,Xm counting<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[1]<a href="CppOperatorEqual.htm">==</a>Y) {Y<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {Xm<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[0]=FPop[FfliesBefore+FemaleFly].F<b><a href="CppAuto.htm">auto</a></b>some[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[0]<a href="CppOperatorEqual.htm">==</a>F) {F<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {FD<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[1]=MPop[MfliesBefore+mate].F<b><a href="CppAuto.htm">auto</a></b>some[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[1]<a href="CppOperatorEqual.htm">==</a>F) {F<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {FD<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]=FPop[FfliesBefore+FemaleFly].M<b><a href="CppAuto.htm">auto</a></b>some1[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]<a href="CppOperatorEqual.htm">==</a>O) {mO1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]=MPop[MfliesBefore+mate].M<b><a href="CppAuto.htm">auto</a></b>some1[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]<a href="CppOperatorEqual.htm">==</a>O) {mO1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]=FPop[FfliesBefore+FemaleFly].M<b><a href="CppAuto.htm">auto</a></b>some2[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]<a href="CppOperatorEqual.htm">==</a>O) {mO2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]=MPop[MfliesBefore+mate].M<b><a href="CppAuto.htm">auto</a></b>some2[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]<a href="CppOperatorEqual.htm">==</a>O) {mO2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[0]=FPop[FfliesBefore+FemaleFly].M<b><a href="CppAuto.htm">auto</a></b>some3[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[0]<a href="CppOperatorEqual.htm">==</a>O) {mO3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[1]=MPop[MfliesBefore+mate].M<b><a href="CppAuto.htm">auto</a></b>some3[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[1]<a href="CppOperatorEqual.htm">==</a>O) {mO3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleMother=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlleleFather=RandomNumber(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[0]=FPop[FfliesBefore+FemaleFly].M<b><a href="CppAuto.htm">auto</a></b>some5[AlleleMother];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[0]<a href="CppOperatorEqual.htm">==</a>O) {mO5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[1]=MPop[MfliesBefore+mate].M<b><a href="CppAuto.htm">auto</a></b>some5[AlleleFather];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[1]<a href="CppOperatorEqual.htm">==</a>O) {mO5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {M5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;} <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>tempFly.Island=OurIsland;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(Uniform()&lt;PMut)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> the mutation occure<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> locus=RandomNumber(12);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> which locus it will occure<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> all=0;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(locus)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(3);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((SEXCHROM) all<a href="CppOperatorEqual.htm">==</a>tempFly.SexChrom[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[0]<a href="CppOperatorEqual.htm">==</a>X) X<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[0]<a href="CppOperatorEqual.htm">==</a>Y) Y<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> Xm<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.SexChrom[0]=SEXCHROM(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[0]<a href="CppOperatorEqual.htm">==</a>X) X<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[0]<a href="CppOperatorEqual.htm">==</a>Y) Y<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> Xm<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(3);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((SEXCHROM) all<a href="CppOperatorEqual.htm">==</a>tempFly.SexChrom[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[1]<a href="CppOperatorEqual.htm">==</a>X) X<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[1]<a href="CppOperatorEqual.htm">==</a>Y) Y<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> Xm<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.SexChrom[1]=SEXCHROM(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[1]<a href="CppOperatorEqual.htm">==</a>X) X<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<b><a href="CppIf.htm">if</a></b>(tempFly.SexChrom[1]<a href="CppOperatorEqual.htm">==</a>Y) Y<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> Xm<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((FAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[0]<a href="CppOperatorEqual.htm">==</a>F) F<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> FD<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[0]=FAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[0]<a href="CppOperatorEqual.htm">==</a>F) F<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> FD<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((FAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[1]<a href="CppOperatorEqual.htm">==</a>F) F<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> FD<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[1]=FAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.F<b><a href="CppAuto.htm">auto</a></b>some[1]<a href="CppOperatorEqual.htm">==</a>F) F<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> FD<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]<a href="CppOperatorEqual.htm">==</a>O) mO1<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M1<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]<a href="CppOperatorEqual.htm">==</a>O) mO1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]<a href="CppOperatorEqual.htm">==</a>O) mO1<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M1<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]<a href="CppOperatorEqual.htm">==</a>O) mO1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M1<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 6: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]<a href="CppOperatorEqual.htm">==</a>O) mO2<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M2<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]<a href="CppOperatorEqual.htm">==</a>O) mO2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 7: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]<a href="CppOperatorEqual.htm">==</a>O) mO2<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M2<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]<a href="CppOperatorEqual.htm">==</a>O) mO2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M2<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 8: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[0]<a href="CppOperatorEqual.htm">==</a>O) mO3<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M3<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[0]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[0]<a href="CppOperatorEqual.htm">==</a>O) mO3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 9: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[1]<a href="CppOperatorEqual.htm">==</a>O) mO3<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M3<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[1]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some3[1]<a href="CppOperatorEqual.htm">==</a>O) mO3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M3<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 10: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[0]<a href="CppOperatorEqual.htm">==</a>O) mO5<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M5<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[0]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[0]<a href="CppOperatorEqual.htm">==</a>O) mO5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 11: <b><a href="CppDo.htm">do</a></b> {all=RandomNumber(2);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>((MAUTOSOME) all<a href="CppOperatorEqual.htm">==</a>tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[1]<a href="CppOperatorEqual.htm">==</a>O) mO5<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M5<a href="CppCounter.htm">counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[1]=MAUTOSOME(all);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.M<b><a href="CppAuto.htm">auto</a></b>some5[1]<a href="CppOperatorEqual.htm">==</a>O) mO5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> M5<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppSwitch.htm">switch</a></b>(locus)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><b><a href="CppIf.htm">if</a></b>((tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[0]<a href="CppOperatorEqual.htm">==</a>O <a href="CppOperatorLogicalOr.htm">||</a> tempFly.M<b><a href="CppAuto.htm">auto</a></b>some1[1]<a href="CppOperatorEqual.htm">==</a>O) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[0]<a href="CppOperatorEqual.htm">==</a>O <a href="CppOperatorLogicalOr.htm">||</a> tempFly.M<b><a href="CppAuto.htm">auto</a></b>some2[1]<a href="CppOperatorEqual.htm">==</a>O))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> MM homozygosity on 1st and 2nd <b><a href="CppAuto.htm">auto</a></b>some is lethal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(tempFly.CheckSex()<a href="CppOperatorEqual.htm">==</a>female)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffFPop.push_back(tempFly);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>puts <b><a href="CppNew.htm">new</a></b> fly on the end of the female offspring vector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NFOffFlyOnIsland[OurIsland]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;female<a href="CppCounter.htm">Counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffMPop.push_back(tempFly);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NMOffFlyOnIsland[OurIsland]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;male<a href="CppCounter.htm">Counter</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next Kid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a>next FemaleFly<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>next OurIsland<br/>
<a href="CppComment.htm">//</a>setting sizes of subpopulations to 0<br/>
<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;NFOffFlyOnIsland[OurIsland]=0;<br/>
&nbsp;&nbsp;NMOffFlyOnIsland[OurIsland]=0;<br/>
&nbsp;&nbsp;}<br/>
OffFPop.resize(0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>paternal populations deleted<br/>
OffMPop.resize(0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
}<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> NewGeneration3 (vector &lt;Fly&gt; &amp;MPop, vector &lt;Fly&gt; &amp;FPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;Fly&gt; &amp;OffMPop, vector &lt;Fly&gt; &amp;OffFPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;NMPop, vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;NFPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;NOffMPop, vector &lt;<b><a href="CppInt.htm">int</a></b>&gt; &amp;NOffFPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> MaxMFlies, <b><a href="CppInt.htm">int</a></b> MaxFFlies)<br/>
{<br/>
<b><a href="CppInt.htm">int</a></b> Kid, LuckyFly, OurIsland, fliesBefore=0, OffFliesBefore=0;<br/>
vector&lt;Fly&gt;::<a href="CppIterator.htm">iterator</a> iMaleBeginning=MPop.begin();<br/>
vector&lt;Fly&gt;::<a href="CppIterator.htm">iterator</a> iFemaleBeginning=FPop.begin();<br/>
<br/>
<a href="CppComment.htm">//</a>males<br/>
<b><a href="CppInt.htm">int</a></b> island=0;<br/>
OffFliesBefore=0;<br/>
<b><a href="CppInt.htm">int</a></b> OffMale<a href="CppCounter.htm">Counter</a>=OffMPop.size();<br/>
<b><a href="CppIf.htm">if</a></b>((<b><a href="CppInt.htm">int</a></b>)OffMPop.size()<a href="CppOperatorGreaterEqual.htm">&gt;=</a>MaxMFlies*NIslands)<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are in sum more offspring that total carrying capacity of population<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;MaxMFlies;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every place on island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>take by random one dispersing offspring fly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LuckyFly=RandomNumber(OffMale<a href="CppCounter.htm">Counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(OffMPop[LuckyFly].Island<a href="CppOperatorEqual.htm">==</a>OurIsland <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> LuckyFly<a href="CppOperatorNotEqual.htm">!=</a>0); <a href="CppComment.htm">//</a>but not from the same island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffMPop[LuckyFly].Island=OurIsland;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>adds that fly to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MPop.push_back(OffMPop[LuckyFly]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>puts last fly from offspring population in place of moved fly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffMPop[LuckyFly]=OffMPop[OffMale<a href="CppCounter.htm">Counter</a>-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>size of offspring population decreases by one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffMale<a href="CppCounter.htm">Counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NMPop[OurIsland]=MaxMFlies;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next OurIsland<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b><br/>
<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are in sum less offspring that total carrying capacity of population <a href="CppOperatorMinus.htm">-</a>&gt; No flies die<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;OffMale<a href="CppCounter.htm">Counter</a>;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every offspring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>chose island different thet the one on which the offspring is and not full<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;island=RandomNumber(NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((NMPop[island]<a href="CppOperatorGreaterEqual.htm">&gt;=</a>MaxMFlies <a href="CppOperatorLogicalOr.htm">||</a> MPop[Kid].Island<a href="CppOperatorEqual.htm">==</a>island) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n&lt;OffMale<a href="CppCounter.htm">Counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>CAUTION!! An island might get overcrowded!!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (MPop[Kid].Island<a href="CppOperatorEqual.htm">==</a>island) ShowMessage("Overcrowding!"); <a href="CppComment.htm">//</a>But it nearly ever happens!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fliesBefore=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> AlsoAnIsland; <b><a href="CppFor.htm">for</a></b>(AlsoAnIsland=0;AlsoAnIsland&lt;island;AlsoAnIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>checks how many <b><a href="CppNew.htm">new</a></b> generation flies are already on all islands with smaller number<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>NMPop[AlsoAnIsland];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next AlsoAnIsland<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OffMPop[Kid].Island=island;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>adds fly to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MPop.insert(iMaleBeginning+fliesBefore,OffMPop[Kid]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NMPop[island]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>females<br/>
fliesBefore=0, OffFliesBefore=0;<br/>
island=0;<br/>
OffFliesBefore=0;<br/>
<b><a href="CppInt.htm">int</a></b> OffFemale<a href="CppCounter.htm">Counter</a>=OffMPop.size();<br/>
<b><a href="CppIf.htm">if</a></b>((<b><a href="CppInt.htm">int</a></b>)OffFPop.size()<a href="CppOperatorGreaterEqual.htm">&gt;=</a>MaxFFlies*NIslands)<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are in sum more offspring that total carrying capacity of population<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;MaxFFlies;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every place on island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>take by random one dispersing offspring fly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LuckyFly=RandomNumber(OffFemale<a href="CppCounter.htm">Counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(OffFPop[LuckyFly].Island<a href="CppOperatorEqual.htm">==</a>OurIsland <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> LuckyFly<a href="CppOperatorNotEqual.htm">!=</a>0); <a href="CppComment.htm">//</a>but not from the same island<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffFPop[LuckyFly].Island=OurIsland;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>adds that fly to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FPop.push_back(OffFPop[LuckyFly]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>puts last fly from offspring population in place of moved fly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffFPop[LuckyFly]=OffFPop[OffFemale<a href="CppCounter.htm">Counter</a>-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>size of offspring population decreases by one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OffFemale<a href="CppCounter.htm">Counter</a><a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NFPop[OurIsland]=MaxFFlies;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next OurIsland<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b><br/>
<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> there are in sum less offspring that total carrying capacity of population <a href="CppOperatorMinus.htm">-</a>&gt; No flies die<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Kid=0;Kid&lt;OffFemale<a href="CppCounter.htm">Counter</a>;Kid<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every offspring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>chose island different thet the one on which the offspring is and not full<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;island=RandomNumber(NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((NFPop[island]<a href="CppOperatorGreaterEqual.htm">&gt;=</a>MaxFFlies <a href="CppOperatorLogicalOr.htm">||</a> FPop[Kid].Island<a href="CppOperatorEqual.htm">==</a>island) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n&lt;OffFemale<a href="CppCounter.htm">Counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>CAUTION!! An island might get overcrowded!!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (FPop[Kid].Island<a href="CppOperatorEqual.htm">==</a>island) ShowMessage("Overcrowding!"); <a href="CppComment.htm">//</a>But it nearly ever happens!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fliesBefore=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> AlsoAnIsland; <b><a href="CppFor.htm">for</a></b>(AlsoAnIsland=0;AlsoAnIsland&lt;island;AlsoAnIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>checks how many <b><a href="CppNew.htm">new</a></b> generation flies are already on all islands with smaller number<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fliesBefore<a href="CppOperatorPlusAssign.htm">+=</a>NFPop[AlsoAnIsland];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next AlsoAnIsland<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OffFPop[Kid].Island=island;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>adds fly to the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FPop.insert(iFemaleBeginning+fliesBefore,OffFPop[Kid]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NFPop[island]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next Kid<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>setting sizes of offspring subpopulations to 0<br/>
<b><a href="CppFor.htm">for</a></b>(OurIsland=0;OurIsland&lt;NIslands;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;NOffFPop[OurIsland]=0;<br/>
&nbsp;&nbsp;NOffMPop[OurIsland]=0;<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next OurIsland<br/>
<a href="CppComment.htm">//</a>offspring populations resized to zero<br/>
OffFPop.resize(0);<br/>
OffMPop.resize(0);<br/>
}<a href="CppComment.htm">//</a>End of: NewGeneration<br/>
<br/>
<a href="CppComment.htm">//</a>Every female mates with one randomly chosen male from her island and gives offspring<br/>
<a href="CppComment.htm">//</a>males can be chosen several <a href="CppTime.htm">time</a>s<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/nextgeneration.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/nextgeneration.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> NEXTGENERATION_H<br/>
<a href="CppDefine.htm">#define</a> NEXTGENERATION_H<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> NextGeneration<br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NextGeneration();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> NEXTGENERATION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/nextgeneration.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/nextgeneration.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "nextgeneration.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Project Musca Domestica, simulation in which sex-ratio can evolve<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> NextGenerationFemales(vector &lt;Fly&gt; &amp; MPop, vector &lt;Fly&gt; &amp; FPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;Fly&gt; &amp; MOffPop, vector &lt;Fly&gt; &amp; FOffPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> MaxMales, <b><a href="CppInt.htm">int</a></b> MaxFemales)<br/>
{<br/>
<a href="CppComment.htm">//</a>We know that on all islands, there are MaxDsex and MaxNDsex<br/>
<a href="CppComment.htm">//</a>Also in the offspring, there will be MaxDsex and MaxNDsex flies on each island<br/>
<a href="CppComment.htm">//</a>If we assume large family size, we can go off all spots on all islands <b><a href="CppFor.htm">for</a></b> both sexes<br/>
<a href="CppComment.htm">//</a>The nondispers' parents are from the same island, the dispersers' sex parents are from<br/>
<a href="CppComment.htm">//</a>another island. This is the trick we gonna use...<br/>
<a href="CppComment.htm">//</a>The vectors of the offspring are size 0, so we only use pushback commands...<br/>
<a href="CppAssert.htm">assert</a>(FPop.size()<a href="CppOperatorEqual.htm">==</a>MaxFemales*NIslands);<br/>
<a href="CppAssert.htm">assert</a>(MPop.size()<a href="CppOperatorEqual.htm">==</a>MaxMales*NIslands);<br/>
<a href="CppAssert.htm">assert</a>(FOffPop.size()<a href="CppOperatorEqual.htm">==</a>MaxFemales*NIslands);<br/>
<a href="CppAssert.htm">assert</a>(MOffPop.size()<a href="CppOperatorEqual.htm">==</a>MaxMales*NIslands);<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> OurIsland;<br/>
<b><a href="CppInt.htm">int</a></b> FemaleSpot, MaleSpot, RandomIsland, RandomMother, RandomFather;<br/>
<b><a href="CppInt.htm">int</a></b> IndexMother, IndexFather;<br/>
Fly FlyKiddo;<br/>
<br/>
<b><a href="CppFor.htm">for</a></b> (OurIsland=0; OurIsland&lt;NIslands ;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dispersing sex-&gt;females, take parents from random island<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (FemaleSpot=0; FemaleSpot&lt;MaxFemales ;FemaleSpot<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Throw away all offspring of non dispersing sex-&gt;males<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomIsland=RandomNumber(NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomMother=RandomNumber(MaxFemales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexMother=(RandomIsland*MaxFemales)+RandomMother;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (FPop[IndexMother].Mated<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<a href="CppComment.htm">//</a>She is a virgin<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomFather=RandomNumber(MaxMales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexFather=(RandomIsland*MaxMales)+RandomFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FPop[IndexMother].Mated=<b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FPop[IndexMother].IndexPartner=IndexFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<a href="CppComment.htm">//</a>She mates again with the prince on the white horse<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexFather=FPop[IndexMother].IndexPartner;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FlyKiddo=CreateOffspring(FPop[IndexMother],MPop[IndexFather]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp; (FlyKiddo.sex<a href="CppOperatorEqual.htm">==</a>male);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>OK, the female kiddo is born, put her in the vector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CountGenome(FlyKiddo);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FOffPop[(OurIsland*MaxFemales)+FemaleSpot]=FlyKiddo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next FemaleSpot<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Non-dispersing sex-&gt;males, take parents from same island<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (MaleSpot=0; MaleSpot&lt;MaxMales ;MaleSpot<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Throw away all offspring of dispersing sex-&gt;females<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomMother=RandomNumber(MaxFemales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexMother=(OurIsland*MaxFemales)+RandomMother;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (FPop[IndexMother].Mated<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<a href="CppComment.htm">//</a>She is a virgin<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomFather=RandomNumber(MaxMales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexFather=(OurIsland*MaxMales)+RandomFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FPop[IndexMother].Mated=<b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FPop[IndexMother].IndexPartner=IndexFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<a href="CppComment.htm">//</a>She mates again with the prince on the white horse<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexFather=FPop[IndexMother].IndexPartner;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FlyKiddo=CreateOffspring(FPop[IndexMother],MPop[IndexFather]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp; (FlyKiddo.sex<a href="CppOperatorEqual.htm">==</a>female);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>OK, the male kiddo is born, give him its spot in the vector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CountGenome(FlyKiddo);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MOffPop[(OurIsland*MaxMales)+MaleSpot]=FlyKiddo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next MaleSpot<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next OurIsland<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> MALES DISPERSE<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">//</a><br/>
<b><a href="CppVoid.htm">void</a></b> NextGenerationMales(vector &lt;Fly&gt; &amp; MPop, vector &lt;Fly&gt; &amp; FPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;Fly&gt; &amp; MOffPop, vector &lt;Fly&gt; &amp; FOffPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> MaxMales, <b><a href="CppInt.htm">int</a></b> MaxFemales)<br/>
{<br/>
<a href="CppComment.htm">//</a>We know that on all islands, there are MaxDsex and MaxNDsex<br/>
<a href="CppComment.htm">//</a>Also in the offspring, there will be MaxDsex and MaxNDsex flies on each island<br/>
<a href="CppComment.htm">//</a>If we assume large family size, we can go off all spots on all islands <b><a href="CppFor.htm">for</a></b> both sexes<br/>
<a href="CppComment.htm">//</a>The nondispers' parents are from the same island, the dispersers' sex parents are from<br/>
<a href="CppComment.htm">//</a>another island. This is the trick we gonna use...<br/>
<a href="CppComment.htm">//</a>The vectors of the offspring are size 0, so we only use pushback commands...<br/>
<a href="CppAssert.htm">assert</a>(MPop.size()<a href="CppOperatorEqual.htm">==</a>MaxMales*NIslands);<br/>
<a href="CppAssert.htm">assert</a>(FPop.size()<a href="CppOperatorEqual.htm">==</a>MaxMales*NIslands);<br/>
<a href="CppAssert.htm">assert</a>(MOffPop.size()<a href="CppOperatorEqual.htm">==</a>MaxMales*NIslands);<br/>
<a href="CppAssert.htm">assert</a>(FOffPop.size()<a href="CppOperatorEqual.htm">==</a>MaxMales*NIslands);<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> OurIsland;<br/>
<b><a href="CppInt.htm">int</a></b> MaleSpot, FemaleSpot, RandomIsland, RandomFather, RandomMother;<br/>
<b><a href="CppInt.htm">int</a></b> IndexFather, IndexMother;<br/>
Fly FlyKiddo;<br/>
<br/>
<b><a href="CppFor.htm">for</a></b> (OurIsland=0; OurIsland&lt;NIslands ;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dispersing sex, take parents from random island<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (MaleSpot=0; MaleSpot&lt;MaxMales ;MaleSpot<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Throw away all offspring of non dispersing sex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomIsland=RandomNumber(NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomMother=RandomNumber(MaxFemales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexMother=(RandomIsland*MaxFemales)+RandomMother;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (FPop[IndexMother].Mated<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<a href="CppComment.htm">//</a>She is a virgin<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomFather=RandomNumber(MaxMales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexFather=(RandomIsland*MaxMales)+RandomFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FPop[IndexMother].Mated=<b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FPop[IndexMother].IndexPartner=IndexFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<a href="CppComment.htm">//</a>She mates again with the prince on the white horse<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexFather=FPop[IndexMother].IndexPartner;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FlyKiddo=CreateOffspring(FPop[IndexMother],MPop[IndexFather]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp; (FlyKiddo.sex<a href="CppOperatorEqual.htm">==</a>female);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>OK, the male kiddo is born, give him its spot in the vector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CountGenome(FlyKiddo);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MOffPop[(OurIsland*MaxMales)+MaleSpot]=FlyKiddo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next MaleSpot<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Non-dispersing sex, take parents from same island<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (FemaleSpot=0; FemaleSpot&lt;MaxFemales ;FemaleSpot<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Throw away all offspring of dispersing sex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomMother=RandomNumber(MaxFemales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexMother=(OurIsland*MaxFemales)+RandomMother;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (FPop[IndexMother].Mated<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<a href="CppComment.htm">//</a>She is a virgin<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomFather=RandomNumber(MaxMales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexFather=(OurIsland*MaxMales)+RandomFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FPop[IndexMother].Mated=<b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FPop[IndexMother].IndexPartner=IndexFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexFather=FPop[IndexMother].IndexPartner;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FlyKiddo=CreateOffspring(FPop[IndexMother],MPop[IndexFather]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp; (FlyKiddo.sex<a href="CppOperatorEqual.htm">==</a>male);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>OK, the female kiddo is born, give her a spot in the vector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CountGenome(FlyKiddo);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FOffPop[(OurIsland*MaxFemales)+FemaleSpot]=FlyKiddo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next FemaleSpot<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next OurIsland<br/>
}<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> BOTH SEXES DISPERSE<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">//</a><br/>
<b><a href="CppVoid.htm">void</a></b> NextGenerationBoth(vector &lt;Fly&gt; &amp; MPop, vector &lt;Fly&gt; &amp; FPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector &lt;Fly&gt; &amp; MOffPop, vector &lt;Fly&gt; &amp; FOffPop,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> MaxMales, <b><a href="CppInt.htm">int</a></b> MaxFemales)<br/>
{<br/>
<a href="CppAssert.htm">assert</a>(MPop.size()<a href="CppOperatorEqual.htm">==</a>MaxMales*NIslands);<br/>
<a href="CppAssert.htm">assert</a>(FPop.size()<a href="CppOperatorEqual.htm">==</a>MaxFemales*NIslands);<br/>
<a href="CppAssert.htm">assert</a>(MOffPop.size()<a href="CppOperatorEqual.htm">==</a>MaxMales*NIslands);<br/>
<a href="CppAssert.htm">assert</a>(FOffPop.size()<a href="CppOperatorEqual.htm">==</a>MaxFemales*NIslands);<br/>
<a href="CppComment.htm">//</a>We know that on all islands, there are MaxDsex and MaxNDsex<br/>
<a href="CppComment.htm">//</a>Also in the offspring, there will be MaxDsex and MaxNDsex flies on each island<br/>
<a href="CppComment.htm">//</a>If we assume large family size, we can go off all spots on all islands <b><a href="CppFor.htm">for</a></b> both sexes<br/>
<a href="CppComment.htm">//</a>The nondispers' parents are from the same island, the dispersers' sex parents are from<br/>
<a href="CppComment.htm">//</a>another island. This is the trick we gonna use...<br/>
<a href="CppComment.htm">//</a>The vectors of the offspring are size 0, so we only use pushback commands...<br/>
<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> OurIsland;<br/>
<b><a href="CppInt.htm">int</a></b> MaleSpot, FemaleSpot, RandomIsland, RandomFather, RandomMother;<br/>
<b><a href="CppInt.htm">int</a></b> IndexFather, IndexMother;<br/>
Fly FlyKiddo;<br/>
<br/>
<b><a href="CppFor.htm">for</a></b> (OurIsland=0; OurIsland&lt;NIslands ;OurIsland<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Males, take parents from random island<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (MaleSpot=0; MaleSpot&lt;MaxMales ;MaleSpot<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Throw away all offspring of non dispersing sex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomIsland=RandomNumber(NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomMother=RandomNumber(MaxFemales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexMother=(RandomIsland*MaxFemales)+RandomMother;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IndexMother&lt;MaxFemales*NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (FPop[IndexMother].Mated<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<a href="CppComment.htm">//</a>She is a virgin<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomFather=RandomNumber(MaxMales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexFather=(RandomIsland*MaxMales)+RandomFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IndexFather&lt;MaxMales*NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FPop[IndexMother].Mated=<b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FPop[IndexMother].IndexPartner=IndexFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<a href="CppComment.htm">//</a>She mates again with the prince on the white horse<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexFather=FPop[IndexMother].IndexPartner;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IndexFather&lt;MaxMales*NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FlyKiddo=CreateOffspring(FPop[IndexMother],MPop[IndexFather]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp; (FlyKiddo.sex<a href="CppOperatorEqual.htm">==</a>female);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>OK, the kiddo is born, give him its spot in the vector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CountGenome(FlyKiddo);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(FlyKiddo.sex<a href="CppOperatorEqual.htm">==</a>male);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MOffPop[(OurIsland*MaxMales)+MaleSpot]=FlyKiddo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next MaleSpot<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Females, take parents from random island<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (FemaleSpot=0; FemaleSpot&lt;MaxFemales ;FemaleSpot<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Throw away all offspring of non dispersing sex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomIsland=RandomNumber(NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomMother=RandomNumber(MaxFemales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexMother=(RandomIsland*MaxFemales)+RandomMother;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IndexMother&lt;MaxFemales*NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (FPop[IndexMother].Mated<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<a href="CppComment.htm">//</a>She is a virgin<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomFather=RandomNumber(MaxMales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexFather=(RandomIsland*MaxMales)+RandomFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IndexFather&lt;MaxMales*NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FPop[IndexMother].Mated=<b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FPop[IndexMother].IndexPartner=IndexFather;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<a href="CppComment.htm">//</a>She mates again with the prince on the white horse<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexFather=FPop[IndexMother].IndexPartner;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IndexFather&lt;MaxMales*NIslands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FlyKiddo=CreateOffspring(FPop[IndexMother],MPop[IndexFather]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp; (FlyKiddo.sex<a href="CppOperatorEqual.htm">==</a>male);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>OK, the kiddo is born, give him its spot in the vector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CountGenome(FlyKiddo);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(FlyKiddo.sex<a href="CppOperatorEqual.htm">==</a>female);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FOffPop[(OurIsland*MaxFemales)+FemaleSpot]=FlyKiddo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next FemaleSpot<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next OurIsland<br/>
}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> NextGeneration<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/projectmuscadomesticamaindialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/projectmuscadomesticamaindialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> WTWEBSITEMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> WTWEBSITEMENUDIALOG_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWContainerWidget.htm">WContainerWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPushButton.htm">WPushButton</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppWt.htm">Wt</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> Orientation;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppWMenu.htm">WMenu</a>;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppWStackedWidget.htm">WStackedWidget</a>;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppWWidget.htm">WWidget</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog is the visual menu.<br/>
<a href="CppComment.htm">///</a>All it does is <b><a href="CppEmit.htm">emit</a></b> <b><a href="CppQtSignals.htm">signals</a></b> when a button is clicked.<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppWWidget.htm">Wt::WWidget</a> * CreateNew<a href="CppAbout.htm">About</a>Dialog() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppWWidget.htm">Wt::WWidget</a> * CreateNew<a href="CppConnectThree.htm">ConnectThree</a>MenuDialog() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppWWidget.htm">Wt::WWidget</a> * CreateNew<a href="CppRandomCode.htm">RandomCode</a>Dialog() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppWWidget.htm">Wt::WWidget</a> * CreateNew<a href="ToolTestAsciiArter.htm">TestAsciiArter</a>Dialog() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppWWidget.htm">Wt::WWidget</a> * CreateNewTest<a href="CppEncranger.htm">Encranger</a>Dialog() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppWWidget.htm">Wt::WWidget</a> * CreateNew<a href="ToolTestNewickVector.htm">TestNewickVector</a>Dialog() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppWWidget.htm">Wt::WWidget</a> * CreateNew<a href="CppTicTacToe.htm">TicTacToe</a>Dialog() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppWWidget.htm">Wt::WWidget</a> * CreateNew<a href="ToolTimePoll.htm">TimePoll</a>Dialog() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppWWidget.htm">Wt::WWidget</a> * CreateNewWelcomeDialog() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppWMenu.htm">Wt::WMenu</a> * CreateNewMenu(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWStackedWidget.htm">Wt::WStackedWidget</a> * <b><a href="CppConst.htm">const</a></b> contents,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppWt.htm">Wt</a>::Orientation&amp; orientation) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CheckResources();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowMenuBorder();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowMenuHorizontal();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowMenuVertical();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History();<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WTWEBSITEMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/projectmuscadomesticamaindialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/projectmuscadomesticamaindialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Project Musca Domestica, simulation in which sex-ratio can evolve<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBOOST_FOREACH.htm">foreach</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/filesystem.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWHBoxLayout.htm">WHBoxLayout</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWImage.htm">WImage</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWMenu.htm">WMenu</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWStackedWidget.htm">WStackedWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTextArea.htm">WTextArea</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWVBoxLayout.htm">WVBoxLayout</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBorderLayout.htm">WBorderLayout</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Must be <a href="CppInclude.htm">#include</a>d after <a href="CppWt.htm">Wt</a> <a href="CppHeaderFile.htm">header file</a>s<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::<a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog()<br/>
{<br/>
&nbsp;&nbsp;CheckResources();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ShowMenuBorder(); <a href="CppComment.htm">//</a>Not pretty<br/>
&nbsp;&nbsp;ShowMenuHorizontal();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ShowMenuVertical(); <a href="CppComment.htm">//</a>Not pretty<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::CheckResources()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; files<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> { "Bep.png" };<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s, files)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppBoostFilesystem.htm">boost::filesystem</a>::exists(s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> ":/images/" <a href="CppOperatorPlus.htm">+</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.copy(s.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppBoostFilesystem.htm">boost::filesystem</a>::exists(s)) { <a href="CppTRACE.htm">TRACE</a>(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostFilesystem.htm">boost::filesystem</a>::exists(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppBoostFilesystem.htm">boost::filesystem</a>::exists(s)) { <a href="CppTRACE.htm">TRACE</a>(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostFilesystem.htm">boost::filesystem</a>::exists(s));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::ShowMenuBorder()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;<a href="CppWBorderLayout.htm">Wt::WBorderLayout</a> * <b><a href="CppConst.htm">const</a></b> layout <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWBorderLayout.htm">Wt::WBorderLayout</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * <b><a href="CppConst.htm">const</a></b> title <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("<a href="ProjectWtWebsite.htm">WtWebsite</a> (<b><a href="CppUsing.htm">using</a></b> ShowMenuBorder)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;title-&gt;setStyleClass("title");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;layout-&gt;addWidget(title,<a href="CppWBorderLayout.htm">Wt::WBorderLayout</a>::North);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>layout-&gt;setContentsMargins(0,0,0,0);<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Menu<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWStackedWidget.htm">Wt::WStackedWidget</a> * <b><a href="CppConst.htm">const</a></b> contents <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWStackedWidget.htm">Wt::WStackedWidget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenu.htm">Wt::WMenu</a> * <b><a href="CppConst.htm">const</a></b> menu <a href="CppOperatorAssign.htm">=</a> CreateNewMenu(contents,<a href="CppWt.htm">Wt</a>::Vertical);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display menu on top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>menu-&gt;setLineHeight(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>menu-&gt;setOffsets(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>menu-&gt;setRenderAsList(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>menu-&gt;setVerticalAlignment(<a href="CppWt.htm">Wt</a>::AlignTop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>menu-&gt;setPositionScheme(<a href="CppWt.htm">Wt</a>::Relative);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>menu-&gt;setPositionScheme(<a href="CppWt.htm">Wt</a>::Absolute);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>menu-&gt;setPositionScheme(<a href="CppWt.htm">Wt</a>::Static);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>menu-&gt;setPositionScheme(<a href="CppWt.htm">Wt</a>::Fixed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>menu-&gt;setMaximumSize(<a href="CppWLength.htm">Wt::WLength</a>::Auto,200);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>contents-&gt;setMinimumSize(<a href="CppWLength.htm">Wt::WLength</a>::Auto,800);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;layout-&gt;addWidget(menu,<a href="CppWBorderLayout.htm">Wt::WBorderLayout</a>::West);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display contents below menu<br/>
&nbsp;&nbsp;&nbsp;&nbsp;layout-&gt;addWidget(contents,<a href="CppWBorderLayout.htm">Wt::WBorderLayout</a>::Center);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::ShowMenuHorizontal()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * <b><a href="CppConst.htm">const</a></b> title <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("<a href="ProjectWtWebsite.htm">WtWebsite</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;title-&gt;setStyleClass("title");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(title);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Menu<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWStackedWidget.htm">Wt::WStackedWidget</a> * <b><a href="CppConst.htm">const</a></b> contents <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWStackedWidget.htm">Wt::WStackedWidget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenu.htm">Wt::WMenu</a> * <b><a href="CppConst.htm">const</a></b> menu <a href="CppOperatorAssign.htm">=</a> CreateNewMenu(contents,<a href="CppWt.htm">Wt</a>::Horizontal);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display menu on top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(menu);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display contents below menu<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(contents);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::ShowMenuVertical()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
<br/>
&nbsp;&nbsp;<a href="CppWVBoxLayout.htm">Wt::WVBoxLayout</a> * <b><a href="CppConst.htm">const</a></b> layout_vertical <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWVBoxLayout.htm">Wt::WVBoxLayout</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * <b><a href="CppConst.htm">const</a></b> title <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("<a href="ProjectWtWebsite.htm">WtWebsite</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;title-&gt;setStyleClass("title");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;layout_vertical-&gt;addWidget(title,0);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppWHBoxLayout.htm">Wt::WHBoxLayout</a> * <b><a href="CppConst.htm">const</a></b> layout_horizontal <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWHBoxLayout.htm">Wt::WHBoxLayout</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>layout_horizontal-&gt;setSpacing(0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>layout_horizontal-&gt;setContentsMargins(0,0,0,0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Menu<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWStackedWidget.htm">Wt::WStackedWidget</a> * <b><a href="CppConst.htm">const</a></b> contents <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWStackedWidget.htm">Wt::WStackedWidget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>contents-&gt;setStyleClass("<a href="ProjectWtWebsite.htm">wtwebsite</a>menu");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenu.htm">Wt::WMenu</a> * <b><a href="CppConst.htm">const</a></b> menu <a href="CppOperatorAssign.htm">=</a> CreateNewMenu(contents,<a href="CppWt.htm">Wt</a>::Vertical);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display menu on top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;layout_horizontal-&gt;addWidget(menu,0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display contents below menu<br/>
&nbsp;&nbsp;&nbsp;&nbsp;layout_horizontal-&gt;addWidget(contents,1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>layout_vertical-&gt;setSpacing(0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>layout_vertical-&gt;setContentsMargins(0,0,0,0);<br/>
&nbsp;&nbsp;layout_vertical-&gt;addLayout(layout_horizontal,1);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::Get<a href="CppVersion.htm">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "0.17";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::Get<a href="CppVersion.htm">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2010-12-20: <a href="CppVersion.htm">Version</a> 0.1: initial setup with <a href="GameBeerWanter.htm">BeerWanter</a> and Loose");<br/>
&nbsp;&nbsp;v.push_back("2010-12-21: <a href="CppVersion.htm">Version</a> 0.2: added System button");<br/>
&nbsp;&nbsp;v.push_back("2010-12-22: <a href="CppVersion.htm">Version</a> 0.3: added <a href="CppAbout.htm">About</a> button");<br/>
&nbsp;&nbsp;v.push_back("2010-12-22: <a href="CppVersion.htm">Version</a> 0.4: added What's New button. Got <a href="GameBeerWanter.htm">BeerWanter</a> to work minimally");<br/>
&nbsp;&nbsp;v.push_back("2010-12-24: <a href="CppVersion.htm">Version</a> 0.5: added <a href="CppRandomCode.htm">RandomCode</a>");<br/>
&nbsp;&nbsp;v.push_back("2011-01-07: <a href="CppVersion.htm">Version</a> 0.6: major architecture adjustment, added <a href="CppTicTacToe.htm">TicTacToe</a>, temporarily removed <a href="GameBeerWanter.htm">BeerWanter</a>, Loose and System");<br/>
&nbsp;&nbsp;v.push_back("2011-01-09: <a href="CppVersion.htm">Version</a> 0.7: added title structure, added response of <a href="ProjectWtWebsite.htm">WtWebsite</a>'s Close button, added <a href="CppConnectThree.htm">ConnectThree</a> beta");<br/>
&nbsp;&nbsp;v.push_back("2011-01-10: <a href="CppVersion.htm">Version</a> 0.8: <a href="CppConnectThree.htm">ConnectThree</a> to alpha");<br/>
&nbsp;&nbsp;v.push_back("2011-01-11: <a href="CppVersion.htm">Version</a> 0.9: <a href="CppConnectThree.htm">ConnectThree</a> to full <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;v.push_back("2011-03-06: <a href="CppVersion.htm">Version</a> 0.10: <a href="CppAdd.htm">Add</a>ed <a href="ToolTestTwoDigitNewick.htm">TestTwoDigitNewick</a>");<br/>
&nbsp;&nbsp;v.push_back("2011-03-09: <a href="CppVersion.htm">Version</a> 0.11: Replaced <a href="ToolTestTwoDigitNewick.htm">TestTwoDigitNewick</a> by <a href="ToolTestNewick.htm">TestNewick</a>");<br/>
&nbsp;&nbsp;v.push_back("2011-03-22: <a href="CppVersion.htm">Version</a> 0.12: <a href="CppAdd.htm">Add</a>ed Test<a href="CppEncranger.htm">Encranger</a>");<br/>
&nbsp;&nbsp;v.push_back("2011-03-26: <a href="CppVersion.htm">Version</a> 0.13: Replaced <a href="ToolTestNewick.htm">TestNewick</a> by <a href="ToolTestNewickVector.htm">TestNewickVector</a>");<br/>
&nbsp;&nbsp;v.push_back("2011-03-27: <a href="CppVersion.htm">Version</a> 0.14: <a href="CppAdd.htm">Add</a>ed <a href="ToolTestAsciiArter.htm">TestAsciiArter</a>");<br/>
&nbsp;&nbsp;v.push_back("2011-04-13: <a href="CppVersion.htm">Version</a> 0.15: <a href="CppAdd.htm">Add</a>ed <a href="ToolTimePoll.htm">TimePoll</a>");<br/>
&nbsp;&nbsp;v.push_back("2011-04-16: <a href="CppVersion.htm">Version</a> 0.16: Major architectural change: use of <a href="CppWMenu.htm">Wt::WMenu</a> and <a href="CppWtAutoConfig.htm">WtAutoConfig</a>");<br/>
&nbsp;&nbsp;v.push_back("2011-04-23: <a href="CppVersion.htm">Version</a> 0.17: New <a href="CppVersion.htm">version</a> of <a href="CppConnectThree.htm">ConnectThree</a>, added Bep to welcome page");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppWWidget.htm">Wt::WWidget</a> * <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::CreateNew<a href="CppAbout.htm">About</a>Dialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="ProjectWtWebsite.htm">WtWebsite</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek's C<a href="CppOperatorIncrement.htm">++</a> <a href="CppWt.htm">Wt</a> website",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"the 23rd of April 2011",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-2011",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="ProjectWtWebsite.htm">ProjectWtWebsite</a>.htm",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>History());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppConnectThree.htm">ConnectThree</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppConnectThree.htm">ConnectThree</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppEncranger.htm">Encranger</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppEncranger.htm">Encranger</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppLoopReader.htm">LoopReader</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppLoopReader.htm">LoopReader</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppRandomCode.htm">RandomCode</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppRandomCode.htm">RandomCode</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="ToolTestAsciiArter.htm">TestAsciiArter</a>Dialog <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="ToolTestAsciiArter.htm">TestAsciiArter</a>Dialog::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="ToolTestNewickVector.htm">TestNewickVector</a>Dialog <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="ToolTestNewickVector.htm">TestNewickVector</a>Dialog::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppTicTacToe.htm">TicTacToe</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppTicTacToe.htm">TicTacToe</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWt.htm">Wt</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(WT_VERSION_STR));<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtAboutDialog.htm">WtAboutDialog</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtAboutDialog.htm">WtAboutDialog</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtAutoConfig.htm">WtAutoConfig</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtAutoConfig.htm">WtAutoConfig</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtConnectThreeWidget.htm">WtConnectThreeWidget</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtConnectThreeWidget.htm">WtConnectThreeWidget</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtTicTacToeWidget.htm">WtTicTacToeWidget</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtTicTacToeWidget.htm">WtTicTacToeWidget</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWt.htm">Wt</a><a href="ToolTimePoll.htm">TimePoll</a>Dialog <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWt.htm">Wt</a><a href="ToolTimePoll.htm">TimePoll</a>Dialog::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<a href="CppWtAboutDialog.htm">WtAboutDialog</a> * <b><a href="CppConst.htm">const</a></b> d <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWtAboutDialog.htm">WtAboutDialog</a>(a);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppWWidget.htm">Wt::WWidget</a> * <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::CreateNew<a href="CppConnectThree.htm">ConnectThree</a>MenuDialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="CppConnectThree.htm">ConnectThree</a>MenuDialog * <b><a href="CppConst.htm">const</a></b> d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a><a href="CppConnectThree.htm">ConnectThree</a>MenuDialog;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppWMenu.htm">Wt::WMenu</a> * <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::CreateNewMenu(<br/>
&nbsp;&nbsp;<a href="CppWStackedWidget.htm">Wt::WStackedWidget</a> * <b><a href="CppConst.htm">const</a></b> contents,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppWt.htm">Wt</a>::Orientation&amp; orientation) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppWMenu.htm">Wt::WMenu</a> * <b><a href="CppConst.htm">const</a></b> menu <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenu.htm">Wt::WMenu</a>(contents,orientation);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>menu-&gt;setRenderAsList(<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Using CSS style<b><a href="CppClass.htm">class</a></b> is the best (only?) way to display the menu well<br/>
&nbsp;&nbsp;menu-&gt;setStyleClass("<a href="ProjectWtWebsite.htm">wtwebsite</a>menu");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Welcome",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNewWelcomeDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppConnectThree.htm">ConnectThree</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNew<a href="CppConnectThree.htm">ConnectThree</a>MenuDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppRandomCode.htm">RandomCode</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNew<a href="CppRandomCode.htm">RandomCode</a>Dialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<a href="ToolTestAsciiArter.htm">TestAsciiArter</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNew<a href="ToolTestAsciiArter.htm">TestAsciiArter</a>Dialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Test<a href="CppEncranger.htm">Encranger</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNewTest<a href="CppEncranger.htm">Encranger</a>Dialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<a href="ToolTestNewickVector.htm">TestNewickVector</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNew<a href="ToolTestNewickVector.htm">TestNewickVector</a>Dialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppTicTacToe.htm">TicTacToe</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNew<a href="CppTicTacToe.htm">TicTacToe</a>Dialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<a href="ToolTimePoll.htm">TimePoll</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNew<a href="ToolTimePoll.htm">TimePoll</a>Dialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppAbout.htm">About</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNew<a href="CppAbout.htm">About</a>Dialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> menu;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppWWidget.htm">Wt::WWidget</a> * <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::CreateNew<a href="CppRandomCode.htm">RandomCode</a>Dialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="CppRandomCode.htm">RandomCode</a>Dialog * <b><a href="CppConst.htm">const</a></b> d <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a><a href="CppRandomCode.htm">RandomCode</a>Dialog;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppWWidget.htm">Wt::WWidget</a> * <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::CreateNew<a href="ToolTestAsciiArter.htm">TestAsciiArter</a>Dialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="ToolTestAsciiArter.htm">TestAsciiArter</a>Dialog * <b><a href="CppConst.htm">const</a></b> d <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a><a href="ToolTestAsciiArter.htm">TestAsciiArter</a>Dialog;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppWWidget.htm">Wt::WWidget</a> * <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::CreateNewTest<a href="CppEncranger.htm">Encranger</a>Dialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;WtTest<a href="CppEncranger.htm">Encranger</a>Dialog * <b><a href="CppConst.htm">const</a></b> d <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> WtTest<a href="CppEncranger.htm">Encranger</a>Dialog;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppWWidget.htm">Wt::WWidget</a> * <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::CreateNew<a href="ToolTestNewickVector.htm">TestNewickVector</a>Dialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="ToolTestNewickVector.htm">TestNewickVector</a>Dialog * <b><a href="CppConst.htm">const</a></b> d <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a><a href="ToolTestNewickVector.htm">TestNewickVector</a>Dialog;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppWWidget.htm">Wt::WWidget</a> * <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::CreateNew<a href="CppTicTacToe.htm">TicTacToe</a>Dialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>MenuDialog * <b><a href="CppConst.htm">const</a></b> d <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>MenuDialog;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppWWidget.htm">Wt::WWidget</a> * <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::CreateNew<a href="ToolTimePoll.htm">TimePoll</a>Dialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="ToolTimePoll.htm">TimePoll</a>Dialog * <b><a href="CppConst.htm">const</a></b> d <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a><a href="ToolTimePoll.htm">TimePoll</a>Dialog;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppWWidget.htm">Wt::WWidget</a> * <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog::CreateNewWelcomeDialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>;<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * <b><a href="CppConst.htm">const</a></b> title <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Welcome");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;title-&gt;setStyleClass("title");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(title);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Welcome to my <a href="CppWt.htm">Wt</a> homepage!",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("My <a href="CppWt.htm">Wt</a> homepage collects all my <a href="CppWebApplication.htm">web application</a> as one single <a href="CppApplication.htm">application</a>.",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Also it tests whether users (you) can <b><a href="CppBreak.htm">break</a></b> my <a href="CppApplication.htm">application</a>s",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("and as a test <b><a href="CppFor.htm">for</a></b> my web server, Bep:",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>("Bep.png",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Picture of Bep (*)",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("All code can be found at http://www.richelbilderbeek.nl, which is my <b><a href="CppStatic.htm">static</a></b> website.",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("This page is still in its beta.",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("(*) Bep's name is enhanced in Kolour<a href="CppPaint.htm">Paint</a>,",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("picture taken by Jean-Marc Bilderbeek.",dialog);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dialog;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppComment.htm">//</a>In <b><a href="CppThis.htm">this</a></b> <a href="CppVersion.htm">version</a>:<br/>
<a href="CppComment.htm">//</a>S system back again<br/>
<br/>
<a href="CppComment.htm">//</a>Fly with the whole set of <b><a href="CppAuto.htm">auto</a></b>somes<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>dispersal before mating, monoandry<br/>
<a href="CppComment.htm">//</a>---<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppInclude.htm">#include</a> &lt;math.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;mmsystem.h&gt;<br/>
<a href="CppInclude.htm">#include</a> "Random.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;vector.h&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMain.h"<br/>
<a href="CppInclude.htm">#include</a> "richel001.h"<br/>
<a href="CppInclude.htm">#include</a> "Fly2<a href="CppImplementationFile.htm">.cpp</a>"<br/>
<br/>
<a href="CppComment.htm">//</a>define <a href="CppNDEBUG.htm">NDEBUG</a> to enquicken your code<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppComment.htm">//</a>The <a href="CppAssert.htm">assert</a>ion macro<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>.h&gt;<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> TCursor crFly <a href="CppOperatorAssign.htm">=</a> 1;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm1 *Form1;<br/>
<br/>
<a href="CppComment.htm">//</a>CHOOSE ONE OF THREE TO DEFINE<br/>
<a href="CppDefine.htm">#define</a> MALESDISPERSE<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> FEMALESDISPERSE<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> BOTHDISPERSE<br/>
<br/>
<a href="CppComment.htm">//</a>CHOOSE ONE OF BOTH TO DEFINE<br/>
<a href="CppDefine.htm">#define</a> FIRSTDISPERSE<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> FIRSTMATING<br/>
<br/>
<a href="CppComment.htm">//</a>CHOOSE ONE OF FOUR TO DEFINE<br/>
<a href="CppDefine.htm">#define</a> FATHERCONTROL<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> MOTHERCONTROL<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> BOTHCONTROL<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> ZYGOTECONTROL<br/>
<br/>
<a href="CppComment.htm">//</a>NEEDED TO RUN THE PROGRAM<br/>
<a href="CppDefine.htm">#define</a> IDOISEENLEIPO<br/>
<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> CalculateStdDev<a href="CppTime.htm">Time</a>;<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> NIslands;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Number of islands-subpopulations<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> MaxFPopSize;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>carrying capacity of one island&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> females<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> MaxMPopSize;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>carrying capacity of one island&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> males<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> NGenerations;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>number of generations<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> NRuns;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>number of runs<br/>
<b><a href="CppDouble.htm">double</a></b> PMut;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Maximal mutation <a href="CppOperatorLogicalOr.htm">||</a> chance of mutation<br/>
vector &lt;Fly&gt; FPop;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>vector containing all females within the whole population<br/>
vector &lt;Fly&gt; MPop;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>vector containing all males within the whole population<br/>
vector &lt;Fly&gt; OffFPop;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>female offspring from every female of FPop<br/>
vector &lt;Fly&gt; OffMPop;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>male offspring from every female of FPop<br/>
vector &lt;<b><a href="CppDouble.htm">double</a></b>&gt; OurDataSet;<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> male<a href="CppCounter.htm">Counter</a>=0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>number of males offspring from all females<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> female<a href="CppCounter.htm">Counter</a>=0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>number of females offspring from all females<br/>
<b><a href="CppDouble.htm">double</a></b> SLocus<a href="CppCounter.htm">Counter</a>=0;<br/>
<b><a href="CppVoid.htm">void</a></b> (*NextGeneration) (vector&lt;Fly&gt;&amp;,vector&lt;Fly&gt;&amp;,vector&lt;Fly&gt;&amp;,vector&lt;Fly&gt;&amp;,<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>);<br/>
Fly (*CreateOffspring) (<b><a href="CppConst.htm">const</a></b> Fly &amp;,<b><a href="CppConst.htm">const</a></b> Fly &amp;);<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Reset<a href="CppCounter.htm">Counter</a>s(<b><a href="CppVoid.htm">void</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;male<a href="CppCounter.htm">Counter</a>=0; female<a href="CppCounter.htm">Counter</a>=0;<br/>
&nbsp;&nbsp;SLocus<a href="CppCounter.htm">Counter</a>=0.0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> ClearTotalChart(TChart * Chart1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0; <a href="CppCounter.htm">counter</a> &lt; Chart1-&gt;SeriesCount(); <a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Chart1-&gt;Series[<a href="CppCounter.htm">counter</a>]-&gt;Clear();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next <a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Fly<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "quick.h"<br/>
<a href="CppInclude.htm">#include</a> "nextgeneration.h"<br/>
<a href="CppInclude.htm">#include</a> "layout.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm1::TForm1(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::MenuItemStartSimulationClick(TObject *Sender)<br/>
{<br/>
ButtonStart-&gt;Click();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::MenuItemSaveThisRunResultsClick(TObject *Sender)<br/>
{<br/>
SeveResults(RichEditOutput,RadioGroupDispersingSex);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::MenuItemSaveRunsResultsClick(TObject *Sender)<br/>
{<br/>
SeveResults(RichEditOutput,RadioGroupDispersingSex);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::ButtonStartClick(TObject *Sender)<br/>
{<br/>
<a href="CppApplication.htm">Application</a>-&gt;Icon-&gt;LoadFromFile("musca.ico");<br/>
Form1-&gt;Icon-&gt;LoadFromFile("musca.ico");<br/>
<a href="CppInitialize.htm">Initialize</a>Parameters(ValueListEditor1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RadioGroupDispersingSex-&gt;ItemIndex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RadioGroupWhoIsInControl-&gt;ItemIndex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RichEditOutput,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Chart1);<br/>
<a href="CppComment.htm">//</a><a href="CppInitialize.htm">Initialize</a> the three <a href="CppCounter.htm">counter</a>s<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> Generation, SimRun;<br/>
FPop.resize(NIslands*MaxFPopSize);<br/>
MPop.resize(NIslands*MaxMPopSize);<br/>
OffFPop.resize(NIslands*MaxFPopSize);<br/>
OffMPop.resize(NIslands*MaxMPopSize);<br/>
OurDataSet.resize(NGenerations);<br/>
<br/>
<b><a href="CppFor.htm">for</a></b>(SimRun=0;SimRun&lt;NRuns;SimRun<a href="CppOperatorIncrement.htm">++</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every run<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;InitFPop();<br/>
&nbsp;&nbsp;InitMPop();<br/>
&nbsp;&nbsp;ClearTotalChart(Chart1);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Generation=0;Generation&lt;NGenerations;Generation<a href="CppOperatorIncrement.htm">++</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every population<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NextGeneration(MPop, FPop, OffMPop, OffFPop, MaxMPopSize, MaxFPopSize);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NextGeneration(OffMPop, OffFPop, MPop, FPop, MaxMPopSize, MaxFPopSize);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ShowOnChart(Chart1,Generation,ImageI<b><a href="CppDo.htm">do</a></b>,ImageMagda,ImageFly);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Chart1-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Chart1-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Reset<a href="CppCounter.htm">Counter</a>s();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next generation<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> OurMean, OurStdDev;<br/>
&nbsp;&nbsp;SafeMeanAndStdDev(&amp;OurDataSet[OurDataSet.size()-CalculateStdDev<a href="CppTime.htm">Time</a>-1],CalculateStdDev<a href="CppTime.htm">Time</a>, OurMean, OurStdDev);<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>( (String) OurMean <a href="CppOperatorPlus.htm">+</a> "\t" <a href="CppOperatorPlus.htm">+</a> (String) OurStdDev );<br/>
&nbsp;&nbsp;Chart1-&gt;Title-&gt;Text-&gt;SetText(("Run number: "+<a href="CppIntToStr.htm">IntToStr</a>(SimRun)).c_str());<br/>
&nbsp;&nbsp;Chart1-&gt;Update();<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next run<br/>
<br/>
<a href="CppComment.htm">//</a>Saving results to file<br/>
<a href="CppComment.htm">//</a>RichEditOutput-&gt;Lines-&gt;SaveToFile(<a href="CppIntToStr.htm">IntToStr</a>(random(1000000))+".dat");<br/>
<a href="CppComment.htm">//</a>Changing icons <b><a href="CppFor.htm">for</a></b> visual <a href="CppSignal.htm">signal</a><br/>
Form1-&gt;Icon-&gt;LoadFromFile("smiley.ico");<br/>
<a href="CppApplication.htm">Application</a>-&gt;Icon-&gt;LoadFromFile("smiley.ico");<br/>
<a href="CppComment.htm">//</a>Playing sound <b><a href="CppFor.htm">for</a></b> audio <a href="CppSignal.htm">signal</a><br/>
PlaySound("richelslaatlaag.wav",<a href="CppNULL.htm">NULL</a>, SND_<a href="CppCfile.htm">FILE</a>NAME | SND_ASYNC);<br/>
<a href="CppComment.htm">//</a>Sending an E-mail with results<br/>
<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (NMSMTP1-&gt;Connected<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>) NMSMTP1-&gt;Connect();<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;NMSMTP1-&gt;PostMessageA-&gt;Body-&gt;<a href="CppAdd.htm">Add</a>(RichEditOutput-&gt;Text);<br/>
<a href="CppComment.htm">//</a>NMSMTP1-&gt;SendMail();<br/>
<a href="CppComment.htm">//</a>exit(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::FormCreate(TObject *Sender)<br/>
{<br/>
TCursor FlyCursor <a href="CppOperatorAssign.htm">=</a> (TCursor) 22;<br/>
Screen-&gt;Cursors[FlyCursor]=LoadCursorFromFile("fly.cur");<br/>
Cursor=FlyCursor;<br/>
ButtonStart-&gt;Cursor=FlyCursor;<br/>
RadioGroupDispersingSex-&gt;Cursor=FlyCursor;<br/>
RadioGroupWhoIsInControl-&gt;Cursor=FlyCursor;<br/>
RadioGroupOrderOfEvents-&gt;Cursor=FlyCursor;<br/>
BitBtn1-&gt;Cursor=FlyCursor;<br/>
ValueListEditor1-&gt;Cursor=FlyCursor;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> FIRSTDISPERSE<br/>
&nbsp;&nbsp;RadioGroupOrderOfEvents-&gt;Caption="First dispersal";<br/>
&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String("First dispersal");<br/>
<a href="CppEndif.htm">#endif</a><br/>
<a href="CppIfdef.htm">#ifdef</a> FIRSTMATING<br/>
&nbsp;&nbsp;RadioGroupOrderOfEvents-&gt;Caption="First mating";<br/>
&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String("First mating");<br/>
<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::FormMouseMove(TObject *Sender, TShift<a href="CppState.htm">State</a> Shift,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y)<br/>
{<br/>
PlaySound("FlySound.wav",<a href="CppNULL.htm">NULL</a>, SND_<a href="CppCfile.htm">FILE</a>NAME | SND_ASYNC);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::BitBtn1Click(TObject *Sender)<br/>
{<br/>
ShowMessage(<br/>
&nbsp;&nbsp;"Project Musca Domestica, simulation in which sex-ratio can evolve&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"Copyright (C) 2009&nbsp;&nbsp;Richl Bilderbeek&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"This program is free software: you can redistribute it and/or modify&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"it under the terms of the GNU General Public License as published by&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"the Free Software Foundation, either version 3 of the License, or&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"(at your option) any later version.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"This program is distributed in the hope that it will be useful,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"but WITHOUT ANY WARRANTY; without even the implied warranty of&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"GNU General Public License for more details.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"You should have received a copy of the GNU General Public License&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;. "<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/random.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/random.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PROJECTMUSCADOMESTICA_RANDOM_H<br/>
<a href="CppDefine.htm">#define</a> PROJECTMUSCADOMESTICA_RANDOM_H<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PROJECTMUSCADOMESTICA_RANDOM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/random.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/random.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Project Musca Domestica, simulation in which sex-ratio can evolve<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "random.h"<br/>
<a href="CppComment.htm">//</a> RANDOM.CPP<br/>
<a href="CppComment.htm">//</a> Truly <a href="CppRandomNumber.htm">random number</a> generator<br/>
<a href="CppComment.htm">//</a> Obtained from Sander van Doorn<br/>
<a href="CppComment.htm">//</a> <a href="CppAdd.htm">Add</a>ed <b><a href="CppThis.htm">this</a></b> text at 12-06-2003<br/>
<br/>
<b><a href="CppLong.htm">long</a></b> <b><a href="CppInt.htm">int</a></b> idum;<br/>
<a href="CppDefine.htm">#define</a> MBIG 1000000000<br/>
<a href="CppDefine.htm">#define</a> MSEED 161803398<br/>
<a href="CppDefine.htm">#define</a> MZ 0<br/>
<a href="CppDefine.htm">#define</a> FAC (1.0/MBIG)<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> Uniform()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> inext,inextp;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppLong.htm">long</a></b> ma[56];<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> iff=0;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> mj,mk;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i,ii,k;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (idum &lt; 0 <a href="CppOperatorLogicalOr.htm">||</a> iff <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;iff=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mj=MSEED-(idum &lt; 0 ? <a href="CppOperatorMinus.htm">-</a>idum : idum);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mj <a href="CppOperatorModulusAssign.htm">%=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ma[55]=mj;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mk=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=1;i<a href="CppOperatorLessEqual.htm">&lt;=</a>54;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ii=(21*i) <a href="CppOperatorModulus.htm">%</a> 55;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ma[ii]=mk;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mk=mj-mk;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mk &lt; MZ) mk <a href="CppOperatorPlusAssign.htm">+=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mj=ma[ii];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (k=1;k<a href="CppOperatorLessEqual.htm">&lt;=</a>4;k<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=1;i<a href="CppOperatorLessEqual.htm">&lt;=</a>55;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ma[i] <a href="CppOperatorMinusAssign.htm">-=</a> ma[1+(i+30) <a href="CppOperatorModulus.htm">%</a> 55];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ma[i] &lt; MZ) ma[i] <a href="CppOperatorPlusAssign.htm">+=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inext=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inextp=31;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;idum=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppOperatorIncrement.htm">++</a>inext <a href="CppOperatorEqual.htm">==</a> 56) inext=1;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppOperatorIncrement.htm">++</a>inextp <a href="CppOperatorEqual.htm">==</a> 56) inextp=1;<br/>
&nbsp;&nbsp;mj=ma[inext]-ma[inextp];<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mj &lt; MZ) mj <a href="CppOperatorPlusAssign.htm">+=</a> MBIG;<br/>
&nbsp;&nbsp;ma[inext]=mj;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mj*FAC;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>End of: <b><a href="CppDouble.htm">double</a></b> Uniform(<b><a href="CppVoid.htm">void</a></b>)<br/>
<br/>
<a href="CppUndef.htm">#undef</a> MBIG<br/>
<a href="CppUndef.htm">#undef</a> MSEED<br/>
<a href="CppUndef.htm">#undef</a> MZ<br/>
<a href="CppUndef.htm">#undef</a> FAC<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> gasdev()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> iset=0;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> gset;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> fac,r,v1,v2;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> Uniform();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp;(iset <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v1=2.0*Uniform()-1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v2=2.0*Uniform()-1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r=v1*v1+v2*v2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (r <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1.0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fac=sqrt(-2.0*log(r)/r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;gset=v1*fac;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;iset=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v2*fac;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b> (iset <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;iset=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> gset;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b> (iset <a href="CppOperatorEqual.htm">==</a> 0) ELSE-part<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>End of: <b><a href="CppDouble.htm">double</a></b> gasdev(<b><a href="CppVoid.htm">void</a></b>)<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> SetSeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;idum <a href="CppOperatorAssign.htm">=</a> <b><a href="CppLong.htm">long</a></b>(-abs(seed));<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=0; i&lt;100; i<a href="CppOperatorIncrement.htm">++</a>) Uniform();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> SetSeed(<b><a href="CppInt.htm">int</a></b> seed)<br/>
<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> Normal(<b><a href="CppDouble.htm">double</a></b> mean,<b><a href="CppDouble.htm">double</a></b> <a href="CppStd.htm">std</a>ev)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> gasdev()*<a href="CppStd.htm">std</a>ev <a href="CppOperatorPlus.htm">+</a> mean;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>End of: <b><a href="CppDouble.htm">double</a></b> Normal(<b><a href="CppDouble.htm">double</a></b> mean,<b><a href="CppDouble.htm">double</a></b> <a href="CppStd.htm">std</a>ev)<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> RandomNumber(<b><a href="CppInt.htm">int</a></b> N)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> out;<br/>
&nbsp;&nbsp;x=floor(Uniform()*N);<br/>
&nbsp;&nbsp;out=<b><a href="CppInt.htm">int</a></b> (x);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> out;<br/>
&nbsp;&nbsp;}&nbsp;&nbsp;<a href="CppComment.htm">//</a>End of: <b><a href="CppInt.htm">int</a></b> RandomNumber(<b><a href="CppInt.htm">int</a></b> N)<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> rando(<b><a href="CppInt.htm">int</a></b> N)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> out;<br/>
&nbsp;&nbsp;x=floor(Uniform()*N);<br/>
&nbsp;&nbsp;out=<b><a href="CppInt.htm">int</a></b> (x);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> out;<br/>
&nbsp;&nbsp;}&nbsp;&nbsp;<a href="CppComment.htm">//</a>End of: <b><a href="CppInt.htm">int</a></b> RandomNumber(<b><a href="CppInt.htm">int</a></b> N)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/richel.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/richel.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RICHEL_H<br/>
<a href="CppDefine.htm">#define</a> RICHEL_H<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Richel<br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Richel();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RICHEL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/richel.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/richel.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "richel.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Project Musca Domestica, simulation in which sex-ratio can evolve<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> <a href="CppHeaderFile.htm">header file</a> not already is included<br/>
<a href="CppIfndef.htm">#ifndef</a> RICHELISCOOL<br/>
<a href="CppDefine.htm">#define</a> RICHELISCOOL<br/>
<br/>
<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> math.h needs to be included<br/>
<a href="CppIfndef.htm">#ifndef</a> __MATH_H<br/>
<a href="CppInclude.htm">#include</a> &lt;math.h&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> Richl's <a href="CppHeaderFile.htm">header file</a><br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.023<br/>
<a href="CppComment.htm">//</a> Date of last <a href="CppVersion.htm">version</a>: 30-11-2003<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.001 comment: 27-05-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.002 comment: 16-06-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.003 comment: 17-06-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.004 comment: 18-06-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.005 comment: 19-06-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.006 comment: 20-06-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.007 comment: 23-06-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.008 comment: 11-07-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.009 comment: 24-07-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.010 comment: 25-07-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.011 comment: 26-07-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.012 comment: 28-07-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.013 comment: 29-07-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.014 comment: 22-09-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.015 comment: 27-09-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.016 comment: 02-10-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.017 comment: 03-10-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.018 comment: 06-10-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.019 comment: 13-10-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.020 comment: 21-10-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.021 comment: 22-10-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.022 comment: 09-11-2003<br/>
<a href="CppComment.htm">//</a> <a href="CppVersion.htm">Version</a> 1.023 comment: 30-11-2003<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> Date of creation of <a href="CppFunction.htm">function</a>s now in use:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> 27-05-2003: asc (<b><a href="CppChar.htm">char</a></b>)<br/>
<a href="CppComment.htm">//</a> 27-05-2003: Mobius<br/>
<a href="CppComment.htm">//</a> 27-05-2003: angle<br/>
<a href="CppComment.htm">//</a> 27-05-2003: nullen<br/>
<a href="CppComment.htm">//</a> 27-05-2003: <a href="CppDouble.htm">Double</a>ToString<br/>
<a href="CppComment.htm">//</a> 27-05-2003: Bool<a href="CppToInt.htm">ToInt</a><br/>
<a href="CppComment.htm">//</a> 27-05-2003: BoolToText<br/>
<a href="CppComment.htm">//</a> 27-05-2003: Rmutate<br/>
<a href="CppComment.htm">//</a> 27-05-2003: mutate<br/>
<a href="CppComment.htm">//</a> 14-06-2003: (T) SafeMeanAndStdDev<br/>
<a href="CppComment.htm">//</a> 14-06-2003: (T) Empty<a href="CppArray.htm">Array</a><br/>
<a href="CppComment.htm">//</a> 14-06-2003: (T) Fill<a href="CppArray.htm">Array</a><br/>
<a href="CppComment.htm">//</a> 16-06-2003: (T) TotalSum<br/>
<a href="CppComment.htm">//</a> 16-06-2003: Int<a href="CppArray.htm">Array</a>ToString<br/>
<a href="CppComment.htm">//</a> 16-06-2003: <a href="CppDouble.htm">Double</a><a href="CppArray.htm">Array</a>ToString<br/>
<a href="CppComment.htm">//</a> 16-06-2003: (T) Fill<a href="CppArray.htm">Array</a>Random<br/>
<a href="CppComment.htm">//</a> 16-06-2003: (T) HistogramCategory<br/>
<a href="CppComment.htm">//</a> 16-06-2003: (T) HistogramTransfer<br/>
<a href="CppComment.htm">//</a> 16-06-2003: (T) Histogram<br/>
<a href="CppComment.htm">//</a> 17-06-2003: RandomBool<br/>
<a href="CppComment.htm">//</a> 17-06-2003: (T) swap<br/>
<a href="CppComment.htm">//</a> 17-06-2003: (T) swapsort<br/>
<a href="CppComment.htm">//</a> 17-06-2003: Int<a href="CppPointer.htm">Pointer</a><a href="CppArray.htm">Array</a>ToString (<a href="CppInt.htm">integer</a>s only)<br/>
<a href="CppComment.htm">//</a> 17-06-2003: Make<a href="CppArray.htm">Array</a><a href="CppPointer.htm">Pointer</a>s (<a href="CppInt.htm">integer</a>s only)<br/>
<a href="CppComment.htm">//</a> 17-06-2003: Sort<a href="CppAddress.htm">Address</a>es (<a href="CppInt.htm">integer</a>s only)<br/>
<a href="CppComment.htm">//</a> 17-06-2003: IntAdressesToString (<a href="CppInt.htm">integer</a>s only)<br/>
<a href="CppComment.htm">//</a> 17-06-2003: Fill<a href="CppAddress.htm">Address</a>essRandom (<a href="CppInt.htm">integer</a>s only)<br/>
<a href="CppComment.htm">//</a> 18-06-2003: Make<a href="CppArray.htm">Array</a>LogisticGrowth<br/>
<a href="CppComment.htm">//</a> 18-06-2003: <a href="CppAdd.htm">Add</a>Noise<a href="CppDouble.htm">Double</a><br/>
<a href="CppComment.htm">//</a> 18-06-2003: (T) Diff<a href="CppArray.htm">Array</a><br/>
<a href="CppComment.htm">//</a> 19-06-2003: (T) abs<br/>
<a href="CppComment.htm">//</a> 19-06-2003: (T) IsPositive<br/>
<a href="CppComment.htm">//</a> 19-06-2003: (T) IsNegative<br/>
<a href="CppComment.htm">//</a> 20-06-2003: (T) FindStart (replaces FindStart<a href="CppPoint.htm">Point</a>) (<a href="CppVersion.htm">version</a> 2)<br/>
<a href="CppComment.htm">//</a> 23-06-2003: (T) SafeMeanAndStdDev<a href="CppOperatorIncrement.htm">++</a><br/>
<a href="CppComment.htm">//</a> 23-06-2003: (T) FindExtremes<br/>
<a href="CppComment.htm">//</a> 11-07-2003: Show<a href="CppArray.htm">Array</a> (<b><a href="CppDouble.htm">double</a></b> AND <a href="CppInt.htm">integer</a>s)<br/>
<a href="CppComment.htm">//</a> 24-07-2003: asc (String)<br/>
<a href="CppComment.htm">//</a> 25-07-2003: ExtractRGB<br/>
<a href="CppComment.htm">//</a> 25-07-2003: <a href="CppRainbow.htm">Rainbow</a><br/>
<a href="CppComment.htm">//</a> 26-07-2003: (T) CutOff<br/>
<a href="CppComment.htm">//</a> 26-07-2003: PlusMinus<br/>
<a href="CppComment.htm">//</a> 26-07-2003: (T) Mobius<br/>
<a href="CppComment.htm">//</a> 28-07-2003:&nbsp;&nbsp;Adjecent4<br/>
<a href="CppComment.htm">//</a> 29-07-2003: (T) Distance<br/>
<a href="CppComment.htm">//</a> 22-09-2003: Show<a href="CppArray.htm">Array</a>(<b><a href="CppChar.htm">char</a></b>)<br/>
<a href="CppComment.htm">//</a> 22-09-2003: Char<a href="CppArray.htm">Array</a>ToString<br/>
<a href="CppComment.htm">//</a> 22-09-2003: Show<a href="CppArray.htm">Array</a>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>)<br/>
<a href="CppComment.htm">//</a> 22-09-2003: <a href="CppUnsigned.htm">Unsigned</a>Char<a href="CppArray.htm">Array</a>ToString<br/>
<a href="CppComment.htm">//</a> 27-09-2003: EulerIntegrate<br/>
<a href="CppComment.htm">//</a> 02-10-2003: Coin<br/>
<a href="CppComment.htm">//</a> 03-10-2003: Fill<a href="CppArray.htm">Array</a><a href="CppOperatorIncrement.htm">++</a><br/>
<a href="CppComment.htm">//</a> 03-10-2003: (T)Fill2D<a href="CppArray.htm">Array</a><br/>
<a href="CppComment.htm">//</a> 03-10-2003: Show2D<a href="CppArray.htm">Array</a><br/>
<a href="CppComment.htm">//</a> 06-10-2003: RelDistance<br/>
<a href="CppComment.htm">//</a> 06-10-2003: EmptyBitmap<br/>
<a href="CppComment.htm">//</a> 06-10-2003: EulerIntegrate<a href="CppOperatorIncrement.htm">++</a><br/>
<a href="CppComment.htm">//</a> 13-10-2003: added multi-platform compatibility<br/>
<a href="CppComment.htm">//</a> 13-10-2003: (T,C) Show<a href="CppArray.htm">Array</a><br/>
<a href="CppComment.htm">//</a> 17-10-2003: Dot<br/>
<a href="CppComment.htm">//</a> 19-10-2003: Morpher<br/>
<a href="CppComment.htm">//</a> 19-10-2003: AutoMorpher<br/>
<a href="CppComment.htm">//</a> 20-10-2003: (C) Dot<br/>
<a href="CppComment.htm">//</a> 21-10-2003: the <a href="CppDefinition.htm">definition</a> RICHELISCOOL added<br/>
<a href="CppComment.htm">//</a> 21-10-2003: only includes math.h when not already included<br/>
<a href="CppComment.htm">//</a> 21-10-2003: FillBitmap<br/>
<a href="CppComment.htm">//</a> 09-11-2003: Find<a href="CppArray.htm">Array</a>Max(T)<br/>
<a href="CppComment.htm">//</a> 09-11-2003: Find<a href="CppArray.htm">Array</a>Min(T)<br/>
<a href="CppComment.htm">//</a> 30-11-2003: EmptyChart<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> (T) denotes <a href="CppTemplateFunction.htm">Template function</a><br/>
<a href="CppComment.htm">//</a> (C) denotes Console <a href="CppFunction.htm">function</a><br/>
<a href="CppComment.htm">//</a> <a href="CppOperatorIncrement.htm">++</a> denotes an improvement of the <a href="CppFunction.htm">function</a><br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> Life of replaced <a href="CppFunction.htm">function</a>s, from birth to replacement:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> 27-05-2003 to 14-06-2003: SafeMeanAndStdDev<a href="CppDouble.htm">Double</a><br/>
<a href="CppComment.htm">//</a> 27-05-2003 to 14-06-2003: SafeMeanAndStdDevInt<br/>
<a href="CppComment.htm">//</a> 17-06-2003 to 17-06-2003: swapsortInt<br/>
<a href="CppComment.htm">//</a> 19-06-2003 to 20-06-2003: (T) FindStart<a href="CppPoint.htm">Point</a><br/>
<a href="CppComment.htm">//</a> 14-06-2003 to 23-06-2004: (T) SafeMeanAndStdDev (didn't check <b><a href="CppIf.htm">if</a></b> <a href="CppArray.htm">array</a>size was bigger then one<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> FAQ's:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> Q: What are <a href="CppTemplateFunction.htm">template function</a>s?<br/>
<a href="CppComment.htm">//</a> A: These are <a href="CppFunction.htm">function</a>s in which you can use more then one nametype as <a href="CppFunction.htm">function</a> arguments.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;This means, that at first I had the <a href="CppFunction.htm">function</a>s SafeMeanAndStdDevInt and SafeMeanAndStdDev<a href="CppDouble.htm">Double</a>,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> each type of <a href="CppArray.htm">array</a> one <a href="CppFunction.htm">function</a>. Now, there is the <a href="CppFunction.htm">function</a> SafeMeanAndStdDev in which<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;you can find the StdDev and Mean of each type of <a href="CppArray.htm">array</a>! The T in the <a href="CppFunction.htm">function</a> means Template,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;which can be seen as a joker <b><a href="CppFor.htm">for</a></b> <b><a href="CppInt.htm">int</a></b>, <b><a href="CppDouble.htm">double</a></b>, etc.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> Q: How <b><a href="CppDo.htm">do</a></b> I use SortAdresses? One of the <a href="CppFunction.htm">function</a> arguments is called<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;'<b><a href="CppInt.htm">int</a></b> * * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppPointer.htm">pointer</a>', what does that mean?<br/>
<a href="CppComment.htm">//</a> A: It means that you have to give the first <a href="CppAddress.htm">address</a> of an <a href="CppArray.htm">array</a> of <a href="CppPointer.htm">pointer</a>s. This <a href="CppArray.htm">array</a> of<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;of <a href="CppPointer.htm">pointer</a>s have to <a href="CppPointer.htm">point</a> to the values you want to sort. This is necessary <b><a href="CppFor.htm">for</a></b> sorting<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;an <a href="CppArray.htm">array</a> of a <b><a href="CppClass.htm">class</a></b>.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> Q: How <b><a href="CppDo.htm">do</a></b> I use EulerIntegrate?<br/>
<a href="CppComment.htm">//</a> A: first declare a <a href="CppFunction.htm">function</a> like:<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> My<a href="CppFunction.htm">Function</a>(<b><a href="CppDouble.htm">double</a></b> x) { <b><a href="CppReturn.htm">return</a></b> (sin(x));}<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;Put the <a href="CppAddress.htm">address</a> of the <a href="CppFunction.htm">function</a> in EulerIntegrate (by just typing its name)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;EulerIntegrate(resolution,min,max,My<a href="CppFunction.htm">Function</a>)<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> Q: what is the difference between '<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;' and '<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;'?<br/>
<a href="CppComment.htm">//</a> A: the latter probably has higher <a href="CppFunction.htm">function</a>ality, but the first also gets the job<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;properly done. In my oldes <a href="CppFunction.htm">function</a>s I used the first and later on the second<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;way more often.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Q: What is the difference between <a href="CppAnsiString.htm">AnsiString</a> and String?<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;A: None. String is <b><a href="CppTypedef.htm">typedef</a></b>-ed as an <a href="CppAnsiString.htm">AnsiString</a>. In the beginning, I only knew <a href="CppAnsiString.htm">AnsiString</a>.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">//</a><br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
T abs(T value)<br/>
 {<br/>
 T solution=value;<br/>
 <b><a href="CppIf.htm">if</a></b> (solution&lt;0.0) solution<a href="CppOperatorMinusAssign.htm">-=</a>(solution+solution);<br/>
 <b><a href="CppReturn.htm">return</a></b> (solution);<br/>
 }<a href="CppComment.htm">//</a>End of: T abs<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Noise<a href="CppDouble.htm">Double</a>(<b><a href="CppDouble.htm">double</a></b> * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size, <b><a href="CppDouble.htm">double</a></b> amplitude)<br/>
 {<br/>
 <b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp; {<br/>
&nbsp;&nbsp; (*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>)<a href="CppOperatorPlusAssign.htm">+=</a> ( ((random(10000)/10000.0)*(2*amplitude))-amplitude );<br/>
&nbsp;&nbsp; <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp; }<br/>
 }<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Noise<a href="CppDouble.htm">Double</a><br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Adjecent4(<b><a href="CppInt.htm">int</a></b> x1, <b><a href="CppInt.htm">int</a></b> y1, <b><a href="CppInt.htm">int</a></b> &amp;x2, <b><a href="CppInt.htm">int</a></b>&amp; y2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Finds an adjecent square (x2,y2) next to (x1,y1) in 4 directions<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(random(4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0 : y2=y1-1; x2=x1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1 : x2=x1-1; y2=y1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2 : y2=y1+1; x2=x1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3 : x2=x1-1; y2=y1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppSwitch.htm">switch</a></b> (random(4))<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> Adjecent4<br/>
<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> angle(<b><a href="CppDouble.htm">double</a></b> deltaX, <b><a href="CppDouble.htm">double</a></b> deltaY)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> solution;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((deltaX<a href="CppOperatorEqual.htm">==</a>0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (deltaY<a href="CppOperatorEqual.htm">==</a>0)) {solution=0.0;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((deltaX<a href="CppOperatorEqual.htm">==</a>0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (deltaY&lt;0)) {solution=0.0;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((deltaX<a href="CppOperatorEqual.htm">==</a>0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (deltaY&gt;0)) {solution=<a href="CppM_PI.htm">M_PI</a>;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((deltaX&gt;0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (deltaY<a href="CppOperatorEqual.htm">==</a>0)) {solution=<a href="CppM_PI.htm">M_PI</a>_2;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((deltaX&lt;0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (deltaY<a href="CppOperatorEqual.htm">==</a>0)) {solution=(3.0*<a href="CppM_PI.htm">M_PI</a>_2);}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((deltaX&gt;0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (deltaY&lt;0)) {solution=(0.0-atan(deltaX/deltaY));}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((deltaX&gt;0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (deltaY&gt;0)) {solution=(<a href="CppM_PI.htm">M_PI</a>-atan(deltaX/deltaY));}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((deltaX&lt;0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (deltaY&gt;0)) {solution=(<a href="CppM_PI.htm">M_PI</a>-atan(deltaX/deltaY));}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((deltaX&lt;0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (deltaY&lt;0)) {solution=((2*<a href="CppM_PI.htm">M_PI</a>)-atan(deltaX/deltaY));}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(solution);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppDouble.htm">double</a></b> angle<br/>
<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> asc(<b><a href="CppChar.htm">char</a></b> letter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(letter);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppInt.htm">int</a></b> asc<br/>
<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> Bool<a href="CppToInt.htm">ToInt</a>(<b><a href="CppBool.htm">bool</a></b> getal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppConvert.htm">Converts</a> TRUE to 1 and FALSE to 0<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> uitkomst=0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (getal<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) {uitkomst=1;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (uitkomst);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: Bool<a href="CppToInt.htm">ToInt</a><br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> CutOff(T&amp; value, T min, T max)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value&gt;max) {value=max;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value&lt;min) {value=min;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> CutOff<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> CutOff(T&amp; value1, T&amp; value2, T min, T max)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value1&gt;max) {value1=max;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value1&lt;min) {value1=min;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value2&gt;max) {value2=max;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value2&lt;min) {value2=min;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> CutOff<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> CutOff(T&amp; value1, T&amp; value2, T&amp; value3, T min, T max)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value1&gt;max) {value1=max;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value1&lt;min) {value1=min;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value2&gt;max) {value2=max;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value2&lt;min) {value2=min;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value3&gt;max) {value3=max;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value3&lt;min) {value3=min;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> CutOff<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Diff<a href="CppArray.htm">Array</a>(T * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size, T * other<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, T * difference<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>)<br/>
 {<br/>
 <b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0; <a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size; <a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp; {<br/>
&nbsp;&nbsp; (*difference<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>)=(*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>)-(*other<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>);<br/>
&nbsp;&nbsp; difference<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp; <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp; other<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp; }<br/>
 }<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> Diff<a href="CppArray.htm">Array</a><br/>
<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppDouble.htm">double</a></b> Distance(T x1, T y1, T x2, T y2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>&nbsp;&nbsp;(sqrt(((x2-x1)*(x2-x1))+((y2-y1)*(y2-y1))));<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: Distance<br/>
<br/>
<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Empty<a href="CppArray.htm">Array</a>(T *<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of <b><a href="CppVoid.htm">void</a></b> Empty<a href="CppArray.htm">Array</a><br/>
<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> EulerIntegrate(<b><a href="CppDouble.htm">double</a></b> resolution,<b><a href="CppDouble.htm">double</a></b> minimum, <b><a href="CppDouble.htm">double</a></b> maximum,<b><a href="CppDouble.htm">double</a></b> <a href="CppFunction.htm">Function</a>(<b><a href="CppDouble.htm">double</a></b> nothing))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> surface=0.0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=minimum; <a href="CppCounter.htm">counter</a>&lt;maximum ;<a href="CppCounter.htm">counter</a><a href="CppOperatorPlusAssign.htm">+=</a>((maximum-minimum)/resolution))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;surface<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppFunction.htm">Function</a>(<a href="CppCounter.htm">counter</a>)*((maximum-minimum)/resolution);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next <a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(surface);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppDouble.htm">double</a></b> EulerIntegrate<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Fill<a href="CppAddress.htm">Address</a>essRandom(<b><a href="CppInt.htm">int</a></b> * * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>s<a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>size)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>s<a href="CppPointer.htm">pointer</a>=random(100);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>s<a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: FillAdressessRandom<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Fill<a href="CppArray.htm">Array</a>(T *<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size, T filling)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>=filling;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> Fill<a href="CppArray.htm">Array</a><br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T, <b><a href="CppClass.htm">class</a></b> X&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Fill<a href="CppArray.htm">Array</a>(T *<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size, T Any<a href="CppFunction.htm">Function</a>(X))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>=Any<a href="CppFunction.htm">Function</a>(<a href="CppCounter.htm">counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>[<a href="CppCounter.htm">counter</a>]=Any<a href="CppFunction.htm">Function</a>(<a href="CppCounter.htm">counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> Fill<a href="CppArray.htm">Array</a><br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
T Find<a href="CppArray.htm">Array</a>Max(T * <a href="CppArray.htm">array</a>,<b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;T maximum=<a href="CppArray.htm">array</a>[0];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=1; <a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size ;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArray.htm">array</a>[<a href="CppCounter.htm">counter</a>]&gt;maximum) maximum=<a href="CppArray.htm">array</a>[<a href="CppCounter.htm">counter</a>];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next <a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (maximum);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
T Find<a href="CppArray.htm">Array</a>Min(T * <a href="CppArray.htm">array</a>,<b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;T minimum=<a href="CppArray.htm">array</a>[0];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=1; <a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size ;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArray.htm">array</a>[<a href="CppCounter.htm">counter</a>]&lt;minimum) minimum=<a href="CppArray.htm">array</a>[<a href="CppCounter.htm">counter</a>];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next <a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (maximum);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Fill<a href="CppArray.htm">Array</a>Random(T * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size, T maxrandomnumber, T resolution)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resultion equals 1 <b><a href="CppFor.htm">for</a></b> <a href="CppInt.htm">integer</a>s!<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;N;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>=(random(maxrandomnumber*resolution)/resolution);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: Fill<a href="CppArray.htm">Array</a>Random<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppInt.htm">int</a></b> FindExtremes(T * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size, T &amp;minimum, T &amp;maximum)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;minimum=(*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>);<br/>
&nbsp;&nbsp;maximum=(*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>);<br/>
&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=1;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( (*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>)&gt;maximum) {maximum=(*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( (*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>)&lt;minimum) {minimum=(*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>);}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (1);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppInt.htm">int</a></b> FindExtremes<br/>
<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppInt.htm">int</a></b> FindStart(T * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size, T threshold)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> solution=-1;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> signfirst, signother;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>)-threshold)<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0) {signfirst=<b><a href="CppTrue.htm">true</a></b>;} <b><a href="CppElse.htm">else</a></b> {signfirst=<b><a href="CppFalse.htm">false</a></b>;}<br/>
&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=1;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>)-threshold)<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0) {signother=<b><a href="CppTrue.htm">true</a></b>;} <b><a href="CppElse.htm">else</a></b> {signother=<b><a href="CppFalse.htm">false</a></b>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (signother<a href="CppOperatorNotEqual.htm">!=</a>signfirst) {solution=<a href="CppCounter.htm">counter</a>; <b><a href="CppBreak.htm">break</a></b>;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> solution;<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppInt.htm">int</a></b> FindStart<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Histogram(T *dataset<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> dataset<a href="CppArray.htm">array</a>size, <b><a href="CppInt.htm">int</a></b> *results<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> results<a href="CppArray.htm">array</a>size, T maxnumber)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;Empty<a href="CppArray.htm">Array</a>(results<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>,results<a href="CppArray.htm">array</a>size);<br/>
&nbsp;&nbsp;HistogramTransfer(dataset<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>,dataset<a href="CppArray.htm">array</a>size,results<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>,results<a href="CppArray.htm">array</a>size, maxnumber);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> Histogram<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppInt.htm">int</a></b> HistogramCategory(T number, <b><a href="CppInt.htm">int</a></b> categories, T maxnumber)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (number*categories/maxnumber);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> HistogramCategory<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> HistogramTransfer(T * dataset<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> datasetsize, <b><a href="CppInt.htm">int</a></b> * results<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>,<b><a href="CppInt.htm">int</a></b> results<a href="CppArray.htm">array</a>size, T maxnumber)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;datasetsize;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*(results<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>+(HistogramCategory( (*dataset<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>) ,results<a href="CppArray.htm">array</a>size ,maxnumber)&nbsp;&nbsp; )))<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dataset<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> HistogramTransfer<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> IsNegative(T value)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> solution=<b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value&gt;0.0) {solution=<b><a href="CppFalse.htm">false</a></b>;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (solution);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppBool.htm">bool</a></b> IsNegative<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> IsPositive(T value)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> solution=<b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value&lt;0.0) {solution=<b><a href="CppFalse.htm">false</a></b>;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (solution);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppBool.htm">bool</a></b> IsPositive<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Make<a href="CppArray.htm">Array</a>LogisticGrowth(<b><a href="CppDouble.htm">double</a></b> * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppDouble.htm">double</a></b> populationsize,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppDouble.htm">double</a></b> intrinsic_growth_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppDouble.htm">double</a></b> carrying_capacity)<br/>
 {<br/>
 <a href="CppComment.htm">//</a>Population size <a href="CppOperatorAssign.htm">=</a> initial population size<br/>
 (*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>)=populationsize;<br/>
 <b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp; {<br/>
&nbsp;&nbsp; *<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>=populationsize;<br/>
&nbsp;&nbsp; <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp; populationsize<a href="CppOperatorPlusAssign.htm">+=</a>((intrinsic_growth_rate*populationsize)*(1-(populationsize/carrying_capacity)));<br/>
&nbsp;&nbsp; }<br/>
 *<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>=populationsize;<br/>
 }<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> Make<a href="CppArray.htm">Array</a>LogisticGrowth<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Make<a href="CppArray.htm">Array</a><a href="CppPointer.htm">Pointer</a>s(<b><a href="CppInt.htm">int</a></b> * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size, <b><a href="CppInt.htm">int</a></b> * * <a href="CppPointer.htm">pointer</a><a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*<a href="CppPointer.htm">pointer</a><a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>) <a href="CppOperatorAssign.htm">=</a>&amp; (*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">pointer</a><a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> Make<a href="CppArray.htm">Array</a><a href="CppPointer.htm">Pointer</a>s<br/>
<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Mobius(T &amp;number,T min, T max)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (number&gt;max) {number<a href="CppOperatorMinusAssign.htm">-=</a>(max+min);}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (number&lt;min) {number<a href="CppOperatorPlusAssign.htm">+=</a>(max-min);}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> Mobius<br/>
<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> mutate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> getal,<b><a href="CppDouble.htm">double</a></b> delta,<b><a href="CppDouble.htm">double</a></b> minimum, <b><a href="CppDouble.htm">double</a></b> maximum)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <b><a href="CppDouble.htm">double</a></b> getal e [0,1], <b><a href="CppDouble.htm">double</a></b> delta e [0, small value <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>1 ]<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> solution=getal;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> randomnumber=((random(2000001)/1000000.0)-1.0); <a href="CppComment.htm">//</a> e [-1,1]<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mutation=(randomnumber*delta); <a href="CppComment.htm">//</a> e [-delta,delta]<br/>
&nbsp;&nbsp;solution<a href="CppOperatorPlusAssign.htm">+=</a>mutation;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (solution&lt;minimum) {solution=minimum;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (solution&gt;maximum) {solution=maximum;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(solution);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppDouble.htm">double</a></b> mutate<br/>
<br/>
<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppVoid.htm">void</a></b> PlusMinus(T &amp; value)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;value<a href="CppOperatorPlusAssign.htm">+=</a>(random(3)-1);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> PlusMinus<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> PlusMinus(T&amp; value1, T&amp; value2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;value1<a href="CppOperatorPlusAssign.htm">+=</a>(<a href="CppStdRand.htm">std::rand</a>om(3)-1);<br/>
&nbsp;&nbsp;value2<a href="CppOperatorPlusAssign.htm">+=</a>(<a href="CppStdRand.htm">std::rand</a>om(3)-1);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> PlusMinus<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> PlusMinus(T&amp; value1, T&amp; value2, T&amp; value3)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;value1<a href="CppOperatorPlusAssign.htm">+=</a>(random(3)-1);<br/>
&nbsp;&nbsp;value2<a href="CppOperatorPlusAssign.htm">+=</a>(random(3)-1);<br/>
&nbsp;&nbsp;value3<a href="CppOperatorPlusAssign.htm">+=</a>(random(3)-1);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> PlusMinus<br/>
<br/>
<br/>
<a href="CppComment.htm">/*</a><b><a href="CppInt.htm">int</a></b> <a href="CppRainbow.htm">Rainbow</a>(<b><a href="CppDouble.htm">double</a></b> value)<br/>
 {<br/>
 <a href="CppComment.htm">//</a>input value e [0,1] <b><a href="CppFor.htm">for</a></b> <a href="CppRainbow.htm">rainbow</a> from red to violet<br/>
 <a href="CppComment.htm">//</a>use values e [1.0,1.2] to <a href="CppMake.htm">make</a> <a href="CppRainbow.htm">rainbow</a> cyclic (from violet to red)<br/>
 <b><a href="CppInt.htm">int</a></b> R=0,G=0,B=0, solution=-1;<br/>
 <b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value<a href="CppOperatorLessEqual.htm">&lt;=</a>0.2) {R=255; G=((value/0.2)*255);}<br/>
 <b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value<a href="CppOperatorLessEqual.htm">&lt;=</a>0.4) {G=255; R=(((0.4-value)/0.2)*255);}<br/>
 <b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.4 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value<a href="CppOperatorLessEqual.htm">&lt;=</a>0.6) {G=255; B=(((value-0.4)/0.2)*255);}<br/>
 <b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.6 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value<a href="CppOperatorLessEqual.htm">&lt;=</a>0.8) {B=255; G=(((0.8-value)/0.2)*255);}<br/>
 <b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0) {B=255; R=(((value-0.8)/0.2)*255);}<br/>
 <b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorGreaterEqual.htm">&gt;=</a>1.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value<a href="CppOperatorLessEqual.htm">&lt;=</a>1.2) {R=255; B=(((1.2-value)/0.2)*255);}<br/>
 solution=(B*65536)+(G*256)+R;<br/>
 <b><a href="CppReturn.htm">return</a></b>(solution);<br/>
 }<a href="CppComment.htm">//</a>End of: <b><a href="CppInt.htm">int</a></b> <a href="CppRainbow.htm">Rainbow</a><a href="CppComment.htm">*/</a><br/>
<br/>
TColor <a href="CppRainbow.htm">Rainbow</a>(<b><a href="CppDouble.htm">double</a></b> value)<br/>
 {<br/>
 <a href="CppComment.htm">//</a>input value e [0,1] <b><a href="CppFor.htm">for</a></b> <a href="CppRainbow.htm">rainbow</a> from red to violet<br/>
 <a href="CppComment.htm">//</a>use values e [1.0,1.2] to <a href="CppMake.htm">make</a> <a href="CppRainbow.htm">rainbow</a> cyclic (from violet to red)<br/>
 <b><a href="CppInt.htm">int</a></b> R=0,G=0,B=0;<br/>
 <b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value<a href="CppOperatorLessEqual.htm">&lt;=</a>0.2) {R=255; G=((value/0.2)*255);}<br/>
 <b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value<a href="CppOperatorLessEqual.htm">&lt;=</a>0.4) {G=255; R=(((0.4-value)/0.2)*255);}<br/>
 <b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.4 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value<a href="CppOperatorLessEqual.htm">&lt;=</a>0.6) {G=255; B=(((value-0.4)/0.2)*255);}<br/>
 <b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.6 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value<a href="CppOperatorLessEqual.htm">&lt;=</a>0.8) {B=255; G=(((0.8-value)/0.2)*255);}<br/>
 <b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0) {B=255; R=(((value-0.8)/0.2)*255);}<br/>
 <b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorGreaterEqual.htm">&gt;=</a>1.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value<a href="CppOperatorLessEqual.htm">&lt;=</a>1.2) {R=255; B=(((1.2-value)/0.2)*255);}<br/>
 TColor solution=(TColor)RGB(R,G,B);<br/>
 <b><a href="CppReturn.htm">return</a></b>(solution);<br/>
 }<a href="CppComment.htm">//</a>End of: <b><a href="CppInt.htm">int</a></b> <a href="CppRainbow.htm">Rainbow</a><br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> RandomBool(<b><a href="CppVoid.htm">void</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> solution=<b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (random(2)<a href="CppOperatorEqual.htm">==</a>1) solution=<b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (solution);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppBool.htm">bool</a></b> RandomBool<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Rmutate(<b><a href="CppDouble.htm">double</a></b> &amp;getal,<b><a href="CppDouble.htm">double</a></b> delta,<b><a href="CppDouble.htm">double</a></b> minimum, <b><a href="CppDouble.htm">double</a></b> maximum)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Uses referencing<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <b><a href="CppDouble.htm">double</a></b> getal e [0,1], <b><a href="CppDouble.htm">double</a></b> delta e [0, small value <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>1 ]<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> randomnumber=((random(2000001)/1000000.0)-1.0); <a href="CppComment.htm">//</a> e [-1,1]<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mutation=(randomnumber*delta); <a href="CppComment.htm">//</a> e [-delta,delta]<br/>
&nbsp;&nbsp;getal<a href="CppOperatorPlusAssign.htm">+=</a>mutation;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (getal&lt;minimum) {getal=minimum;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (getal&gt;maximum) {getal=maximum;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> Rmutate<br/>
<br/>
<a href="CppComment.htm">//</a>Replaced at 24 June 2003<br/>
<a href="CppComment.htm">//</a><b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SafeMeanAndStdDev(T *<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size, <b><a href="CppDouble.htm">double</a></b> &amp;Mean, <b><a href="CppDouble.htm">double</a></b> &amp;StdDev)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;{<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> X=0.0, XSquared=0.0;<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;X<a href="CppOperatorPlusAssign.htm">+=</a>*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>;<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;XSquared<a href="CppOperatorPlusAssign.htm">+=</a>((*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>)*(*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>));<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next <a href="CppCounter.htm">counter</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Mean=(X/<a href="CppArray.htm">array</a>size);<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppComment.htm">//</a>Safe part:<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> numerator=((<a href="CppArray.htm">array</a>size*XSquared)-(X*X));<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (numerator&lt;0) {numerator=0;}<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;StdDev=sqrt(numerator/(<a href="CppArray.htm">array</a>size*(<a href="CppArray.htm">array</a>size-1)));<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> SafeMeanAndStdDev<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppInt.htm">int</a></b> SafeMeanAndStdDev(T *<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size, <b><a href="CppDouble.htm">double</a></b> &amp;Mean, <b><a href="CppDouble.htm">double</a></b> &amp;StdDev)<br/>
 {<br/>
 <b><a href="CppIf.htm">if</a></b> (<a href="CppArray.htm">array</a>size&gt;1)<br/>
&nbsp;&nbsp; {<br/>
&nbsp;&nbsp; <b><a href="CppDouble.htm">double</a></b> X=0.0, XSquared=0.0;<br/>
&nbsp;&nbsp; <b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp; X<a href="CppOperatorPlusAssign.htm">+=</a>*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp; XSquared<a href="CppOperatorPlusAssign.htm">+=</a>((*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>)*(*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp; }<a href="CppComment.htm">//</a>Next <a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp; Mean=(X/<a href="CppArray.htm">array</a>size);<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a>Safe part:<br/>
&nbsp;&nbsp; <b><a href="CppDouble.htm">double</a></b> numerator=((<a href="CppArray.htm">array</a>size*XSquared)-(X*X));<br/>
&nbsp;&nbsp; <b><a href="CppIf.htm">if</a></b> (numerator&lt;0) {numerator=0;}<br/>
&nbsp;&nbsp; StdDev=sqrt(numerator/(<a href="CppArray.htm">array</a>size*(<a href="CppArray.htm">array</a>size-1)));<br/>
&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b>(1);<br/>
&nbsp;&nbsp; }<br/>
 <b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp; {<br/>
&nbsp;&nbsp; ShowMessage("<a href="CppArray.htm">Array</a>size must be larger then 1!");<br/>
&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> (0);<br/>
&nbsp;&nbsp; }<br/>
 }<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> SafeMeanAndStdDev<br/>
<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> swap(T &amp;number1, T &amp;number2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;T temp=number1;<br/>
&nbsp;&nbsp;number1=number2;<br/>
&nbsp;&nbsp;number2=temp;<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> swap<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Sort<a href="CppAddress.htm">Address</a>es(<b><a href="CppInt.htm">int</a></b> * * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i,j;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(i=0;i&lt;<a href="CppArray.htm">array</a>size-1;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> * * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppPointer.htm">pointer</a>2=<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppPointer.htm">pointer</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(j=i;j&lt;<a href="CppArray.htm">array</a>size;j<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(&nbsp;&nbsp; * * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppPointer.htm">pointer</a> &gt; * * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppPointer.htm">pointer</a>2 ) swap( * * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppPointer.htm">pointer</a> , * * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppPointer.htm">pointer</a>2 );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppPointer.htm">pointer</a>2<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: Sort<a href="CppAddress.htm">Address</a>ess<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> swapsort(T * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i,j;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(i=0;i&lt;<a href="CppArray.htm">array</a>size-1;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;T * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>2=<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(j=i;j&lt;<a href="CppArray.htm">array</a>size;j<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( (*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>) &gt; (*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>2) ) swap( (*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>),(*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>2) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>2<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> swapsort<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
T TotalSum(T * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;T solution=0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size; <a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;solution<a href="CppOperatorPlusAssign.htm">+=</a>*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(solution);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: TotalSum<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> Coin(<b><a href="CppVoid.htm">void</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (random(2)<a href="CppOperatorEqual.htm">==</a>1) {<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppFalse.htm">false</a></b>);}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> {<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppTrue.htm">true</a></b>);}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppBool.htm">bool</a></b> Coin(<b><a href="CppVoid.htm">void</a></b>)<br/>
<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Fill2D<a href="CppArray.htm">Array</a>(T * * <a href="CppArray.htm">array</a>, <b><a href="CppInt.htm">int</a></b> maxx, <b><a href="CppInt.htm">int</a></b> maxy, T My<a href="CppFunction.htm">Function</a>(<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> x, y,<a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (y=0; y&lt;maxy; y<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (x=0; x&lt;maxx; x<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a>[x][y]=My<a href="CppFunction.htm">Function</a>(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next y<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;THE FUNCTIONS USING COUT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> __STD_IOSTREAM__<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Show2D<a href="CppArray.htm">Array</a>(<b><a href="CppInt.htm">int</a></b> * * <a href="CppArray.htm">array</a>, <b><a href="CppInt.htm">int</a></b> maxx, <b><a href="CppInt.htm">int</a></b> maxy)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> x,y;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (y=0; y&lt;maxy; y<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (x=0; x&lt;maxx; x<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " , " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppArray.htm">array</a>[x][y] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> endl;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next y<br/>
&nbsp;&nbsp;}<br/>
<br/>
string BoolToText(<b><a href="CppBool.htm">bool</a></b> getal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppConvert.htm">Converts</a> TRUE to 1 and FALSE to 0<br/>
&nbsp;&nbsp;string uitkomst="FALSE";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (getal<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) {uitkomst="TRUE";}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (uitkomst);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of BoolToText<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Show<a href="CppArray.htm">Array</a>(T * <a href="CppArray.htm">array</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size, <b><a href="CppInt.htm">int</a></b> collumns)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cout <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppCounter.htm">counter</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppArray.htm">array</a>[<a href="CppCounter.htm">counter</a>];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>%collumns<a href="CppOperatorEqual.htm">==</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppCounter.htm">counter</a><a href="CppOperatorNotEqual.htm">!=</a>0) {cout <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";} <b><a href="CppElse.htm">else</a></b> { cout <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\t";}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: string Int<a href="CppArray.htm">Array</a>ToString<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Dot(<b><a href="CppInt.htm">int</a></b> messag<b><a href="CppEnum.htm">enum</a></b>ber, <b><a href="CppBool.htm">bool</a></b> wait)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;cout <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "DOT : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> messag<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> endl;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (wait<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) get<b><a href="CppChar.htm">char</a></b>();<br/>
&nbsp;&nbsp;}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Dot(<b><a href="CppVoid.htm">void</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;cout <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> endl;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Dot(<b><a href="CppBool.htm">bool</a></b> wait)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;cout <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> endl;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (wait<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) get<b><a href="CppChar.htm">char</a></b>();<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppComment.htm">//</a>End of: <a href="CppIfdef.htm">#ifdef</a> __STD_IOSTREAM__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;THE FUNCTIONS USING THE VCL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> VCL_H<br/>
<b><a href="CppInt.htm">int</a></b> asc(String letter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt; (letter[1]) );<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppInt.htm">int</a></b> asc<br/>
<br/>
<a href="CppAnsiString.htm">AnsiString</a> BoolToText(<b><a href="CppBool.htm">bool</a></b> getal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppConvert.htm">Converts</a> TRUE to 1 and FALSE to 0<br/>
&nbsp;&nbsp;<a href="CppAnsiString.htm">AnsiString</a> uitkomst="FALSE";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (getal<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) {uitkomst="TRUE";}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (uitkomst);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of BoolToText<br/>
<br/>
String Char<a href="CppArray.htm">Array</a>ToString(<b><a href="CppChar.htm">char</a></b> * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppAnsiString.htm">AnsiString</a> solution="";<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;solution<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(<a href="CppCounter.htm">counter</a>)+":"+(*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>%20<a href="CppOperatorEqual.htm">==</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppCounter.htm">counter</a><a href="CppOperatorNotEqual.htm">!=</a>0) {solution<a href="CppOperatorPlusAssign.htm">+=</a>"\n";} <b><a href="CppElse.htm">else</a></b> {solution<a href="CppOperatorPlusAssign.htm">+=</a>"&nbsp;&nbsp;&nbsp;&nbsp;";}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(solution);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: String Char<a href="CppArray.htm">Array</a>ToString<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppInt.htm">Integer</a>Length(<b><a href="CppInt.htm">int</a></b> getal) {<b><a href="CppReturn.htm">return</a></b> (<a href="CppIntToStr.htm">IntToStr</a>(getal).Length()); }<br/>
<br/>
<a href="CppAnsiString.htm">AnsiString</a> <a href="CppDouble.htm">Double</a>ToString(<b><a href="CppDouble.htm">double</a></b> value)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> You can also typecast! E.g. ShowMessage("Hello"+(String)value);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ANY <b><a href="CppDouble.htm">double</a></b> can be put into <b><a href="CppThis.htm">this</a></b> <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>For &lt;-1,0&gt; the maximum length of the string is 11 (a minus, a number, a comma, eight decimals)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>For [0,1&gt; the maximum length of the string is 10 (a zero, a comma, eight decimals)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>For [1,10] the maximum length of the string is 10 (a first decimal, a comma, eight decimals)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>For [10,-&gt; the maximum length of the string is 19 (ten decimal, a comma, eight decimals)<br/>
&nbsp;&nbsp;<a href="CppAnsiString.htm">AnsiString</a> solution="";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value&lt;0) {solution="-"; value<a href="CppOperatorMultiplyAssign.htm">*=</a>(-1);}<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> shitbeforethecomma=value;<br/>
&nbsp;&nbsp;solution<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(shitbeforethecomma);<br/>
&nbsp;&nbsp;solution<a href="CppOperatorPlusAssign.htm">+=</a>".";<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> shitbehindthecomma=value-shitbeforethecomma;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> intshitbehindthecomma=(shitbehindthecomma*100000000); <a href="CppComment.htm">//</a><a href="CppIntPower.htm">IntPower</a>(10,8)<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (<a href="CppInt.htm">Integer</a>Length(intshitbehindthecomma))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 8 : <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 7 : solution<a href="CppOperatorPlusAssign.htm">+=</a>"0"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 6 : solution<a href="CppOperatorPlusAssign.htm">+=</a>"00"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5 : solution<a href="CppOperatorPlusAssign.htm">+=</a>"000"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4 : solution<a href="CppOperatorPlusAssign.htm">+=</a>"0000"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3 : solution<a href="CppOperatorPlusAssign.htm">+=</a>"00000"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2 : solution<a href="CppOperatorPlusAssign.htm">+=</a>"000000"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1 : solution<a href="CppOperatorPlusAssign.htm">+=</a>"0000000"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0 : solution<a href="CppOperatorPlusAssign.htm">+=</a>"00000000"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a>End of Switch statement<br/>
&nbsp;&nbsp;solution<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(intshitbehindthecomma);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (solution);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: String <a href="CppDouble.htm">Double</a>ToString<br/>
<br/>
<br/>
<a href="CppAnsiString.htm">AnsiString</a> <a href="CppDouble.htm">Double</a><a href="CppArray.htm">Array</a>ToString(<b><a href="CppDouble.htm">double</a></b> * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppAnsiString.htm">AnsiString</a> solution="";<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;solution<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(<a href="CppCounter.htm">counter</a>)+":"+<a href="CppDouble.htm">Double</a>ToString(*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>%5<a href="CppOperatorEqual.htm">==</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppCounter.htm">counter</a><a href="CppOperatorNotEqual.htm">!=</a>0) {solution<a href="CppOperatorPlusAssign.htm">+=</a>"\n";} <b><a href="CppElse.htm">else</a></b> {solution<a href="CppOperatorPlusAssign.htm">+=</a>"&nbsp;&nbsp;&nbsp;&nbsp;";}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(solution);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <a href="CppAnsiString.htm">AnsiString</a> <a href="CppDouble.htm">Double</a><a href="CppArray.htm">Array</a>ToString<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> ExtractRGB(<b><a href="CppInt.htm">int</a></b> colorvalue, <b><a href="CppInt.htm">int</a></b> &amp;R, <b><a href="CppInt.htm">int</a></b> &amp;G, <b><a href="CppInt.htm">int</a></b> &amp;B)<br/>
&nbsp;&nbsp; {<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; <b><a href="CppInt.htm">int</a></b> getal1=colorvalue%(256*256);<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; R=getal1%256;<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; G=(getal1-R)/256;<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; B=(colorvalue-R-G)/65536;<br/>
&nbsp;&nbsp; R=GetRValue(colorvalue);<br/>
&nbsp;&nbsp; G=GetGValue(colorvalue);<br/>
&nbsp;&nbsp; B=GetBValue(colorvalue);<br/>
&nbsp;&nbsp; }<a href="CppComment.htm">//</a>End of:<br/>
<br/>
<a href="CppAnsiString.htm">AnsiString</a> IntAdressesToString(<b><a href="CppInt.htm">int</a></b> * * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>s<a href="CppPointer.htm">pointer</a> , <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>size)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show indi.age with <a href="CppPointer.htm">pointer</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b> * * <a href="CppPointer.htm">pointer</a><a href="CppPointer.htm">pointer</a> <a href="CppOperatorAssign.htm">=</a> &amp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>s[0];<br/>
&nbsp;&nbsp;<a href="CppAnsiString.htm">AnsiString</a> solution="";<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;solution<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(<a href="CppCounter.htm">counter</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>":"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><a href="CppIntToStr.htm">IntToStr</a>(* * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>s<a href="CppPointer.htm">pointer</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>%10<a href="CppOperatorEqual.htm">==</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppCounter.htm">counter</a><a href="CppOperatorNotEqual.htm">!=</a>0) {solution<a href="CppOperatorPlusAssign.htm">+=</a>"\n";} <b><a href="CppElse.htm">else</a></b> {solution<a href="CppOperatorPlusAssign.htm">+=</a>"&nbsp;&nbsp;&nbsp;&nbsp;";}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>s<a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (solution);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <a href="CppAnsiString.htm">AnsiString</a> IntAdressesToString<br/>
<br/>
<br/>
<br/>
<a href="CppAnsiString.htm">AnsiString</a> Int<a href="CppPointer.htm">Pointer</a><a href="CppArray.htm">Array</a>ToString(<b><a href="CppInt.htm">int</a></b> ** <a href="CppPointer.htm">pointer</a><a href="CppArray.htm">array</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">pointer</a><a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppAnsiString.htm">AnsiString</a> solution="";<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0; <a href="CppCounter.htm">counter</a>&lt;<a href="CppPointer.htm">pointer</a><a href="CppArray.htm">array</a>size; <a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;solution<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(**<a href="CppPointer.htm">pointer</a><a href="CppArray.htm">array</a>)+" ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppPointer.htm">pointer</a><a href="CppArray.htm">array</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (solution);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: Int<a href="CppPointer.htm">Pointer</a>ArratToString<br/>
<br/>
<a href="CppAnsiString.htm">AnsiString</a> Int<a href="CppArray.htm">Array</a>ToString(<b><a href="CppInt.htm">int</a></b> * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppAnsiString.htm">AnsiString</a> solution="";<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;solution<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(<a href="CppCounter.htm">counter</a>)+":"+<a href="CppIntToStr.htm">IntToStr</a>(*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>%10<a href="CppOperatorEqual.htm">==</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppCounter.htm">counter</a><a href="CppOperatorNotEqual.htm">!=</a>0) {solution<a href="CppOperatorPlusAssign.htm">+=</a>"\n";} <b><a href="CppElse.htm">else</a></b> {solution<a href="CppOperatorPlusAssign.htm">+=</a>"&nbsp;&nbsp;&nbsp;&nbsp;";}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(solution);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <a href="CppAnsiString.htm">AnsiString</a> Int<a href="CppArray.htm">Array</a>ToString<br/>
<br/>
<a href="CppAnsiString.htm">AnsiString</a> nullen (<b><a href="CppInt.htm">int</a></b> aantal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Returns an <a href="CppAnsiString.htm">AnsiString</a> containg [aantal] zeroes<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> aantal e [0,-<a href="CppOperatorStreamIn.htm">&gt;&gt;</a><br/>
&nbsp;&nbsp;<a href="CppAnsiString.htm">AnsiString</a> uitkomst="";<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;aantal;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{&nbsp;&nbsp;uitkomst<a href="CppOperatorPlusAssign.htm">+=</a>"0";&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (uitkomst);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <a href="CppAnsiString.htm">AnsiString</a> nullen<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Show<a href="CppArray.htm">Array</a>(<b><a href="CppDouble.htm">double</a></b> * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{ ShowMessage(<a href="CppDouble.htm">Double</a><a href="CppArray.htm">Array</a>ToString(<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>,<a href="CppArray.htm">array</a>size));}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> Show<a href="CppArray.htm">Array</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Show<a href="CppArray.htm">Array</a>(<b><a href="CppInt.htm">int</a></b> * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{ ShowMessage(Int<a href="CppArray.htm">Array</a>ToString(<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>,<a href="CppArray.htm">array</a>size));}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> Show<a href="CppArray.htm">Array</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Show<a href="CppArray.htm">Array</a>(<b><a href="CppChar.htm">char</a></b> * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{ ShowMessage(Char<a href="CppArray.htm">Array</a>ToString(<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>,<a href="CppArray.htm">array</a>size));}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> Show<a href="CppArray.htm">Array</a><br/>
<br/>
String <a href="CppUnsigned.htm">Unsigned</a>Char<a href="CppArray.htm">Array</a>ToString(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppAnsiString.htm">AnsiString</a> solution="";<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;solution<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppIntToStr.htm">IntToStr</a>(<a href="CppCounter.htm">counter</a>)+":"+(*<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a><a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>%20<a href="CppOperatorEqual.htm">==</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppCounter.htm">counter</a><a href="CppOperatorNotEqual.htm">!=</a>0) {solution<a href="CppOperatorPlusAssign.htm">+=</a>"\n";} <b><a href="CppElse.htm">else</a></b> {solution<a href="CppOperatorPlusAssign.htm">+=</a>"&nbsp;&nbsp;&nbsp;&nbsp;";}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(solution);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: String <a href="CppUnsigned.htm">Unsigned</a>Char<a href="CppArray.htm">Array</a>ToString<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Show<a href="CppArray.htm">Array</a>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
&nbsp;&nbsp;{ ShowMessage(<a href="CppUnsigned.htm">Unsigned</a>Char<a href="CppArray.htm">Array</a>ToString(<a href="CppArray.htm">array</a><a href="CppPointer.htm">pointer</a>,<a href="CppArray.htm">array</a>size));}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> Show<a href="CppArray.htm">Array</a><br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> EmptyBitmap(<a href="CppTImage.htm">TImage</a> * MyImage)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> y,x;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * MyLine;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (y=0; y&lt;MyImage-&gt;Height; y<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MyLine=(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *) MyImage-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (x=0; x&lt;MyImage-&gt;Width; x<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyLine[x*3]=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyLine[x*3+1]=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyLine[x*3+2]=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next y<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> EmptyBitmap<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> FillBitmap(<a href="CppTImage.htm">TImage</a> * MyImage, <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red, <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green, <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> y,x;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * MyLine;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (y=0; y&lt;MyImage-&gt;Height; y<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MyLine=(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *) MyImage-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (x=0; x&lt;MyImage-&gt;Width; x<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyLine[x*3]=blue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyLine[x*3+1]=green;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyLine[x*3+2]=red;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next y<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: <b><a href="CppVoid.htm">void</a></b> FillBitmap<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Dot(<b><a href="CppInt.htm">int</a></b> messag<b><a href="CppEnum.htm">enum</a></b>ber)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String((<a href="CppIntToStr.htm">IntToStr</a>(messag<b><a href="CppEnum.htm">enum</a></b>ber)).c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Dot(String MyMessage)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(MyMessage.c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Morpher(<a href="CppTImage.htm">TImage</a> * Image1, <a href="CppTImage.htm">TImage</a> * Image2, <a href="CppTImage.htm">TImage</a> * ImageResult, <b><a href="CppDouble.htm">double</a></b> morph)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> y,x;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * MyLine1;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * MyLine2;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * MyLineResult;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (y=0; y&lt;ImageResult-&gt;Height; y<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MyLine1=(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *) Image1-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MyLine2=(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *) Image2-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MyLineResult=(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *) ImageResult-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (x=0; x&lt;ImageResult-&gt;Width; x<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyLineResult[x*3]<a href="CppOperatorAssign.htm">=</a> morph*(<b><a href="CppDouble.htm">double</a></b>)MyLine1[x*3]<a href="CppOperatorPlus.htm">+</a> (1.0-morph)*(<b><a href="CppDouble.htm">double</a></b>)MyLine2[x*3];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyLineResult[x*3+1]<a href="CppOperatorAssign.htm">=</a> morph*(<b><a href="CppDouble.htm">double</a></b>)MyLine1[x*3+1]<a href="CppOperatorPlus.htm">+</a> (1.0-morph)*(<b><a href="CppDouble.htm">double</a></b>)MyLine2[x*3+1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyLineResult[x*3+2]<a href="CppOperatorAssign.htm">=</a> morph*(<b><a href="CppDouble.htm">double</a></b>)MyLine1[x*3+2]<a href="CppOperatorPlus.htm">+</a> (1.0-morph)*(<b><a href="CppDouble.htm">double</a></b>)MyLine2[x*3+2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next y<br/>
&nbsp;&nbsp;}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> AutoMorpher(<a href="CppTImage.htm">TImage</a> * Image1,<a href="CppTImage.htm">TImage</a> * Image2,<a href="CppTImage.htm">TImage</a> * ImageResult)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Image1-&gt;Tag <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Image2-&gt;Tag <a href="CppOperatorAssign.htm">=</a> max<a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ImageResult-&gt;Tag <a href="CppOperatorAssign.htm">=</a> morphstep<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> morph=(<b><a href="CppDouble.htm">double</a></b>)Image1-&gt;Tag/(<b><a href="CppDouble.htm">double</a></b>)Image2-&gt;Tag;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ImageResult-&gt;Tag<a href="CppOperatorEqual.htm">==</a>0) Image1-&gt;Tag<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ImageResult-&gt;Tag<a href="CppOperatorEqual.htm">==</a>1) Image1-&gt;Tag<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Image1-&gt;Tag<a href="CppOperatorEqual.htm">==</a>Image2-&gt;Tag+1) ImageResult-&gt;Tag=1;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Image1-&gt;Tag<a href="CppOperatorEqual.htm">==</a>-1) ImageResult-&gt;Tag=0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> y,x;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * MyLine1;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * MyLine2;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * MyLineResult;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (y=0; y&lt;ImageResult-&gt;Height; y<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MyLine1=(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *) Image1-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MyLine2=(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *) Image2-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MyLineResult=(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *) ImageResult-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (x=0; x&lt;ImageResult-&gt;Width; x<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyLineResult[x*3]<a href="CppOperatorAssign.htm">=</a> morph*(<b><a href="CppDouble.htm">double</a></b>)MyLine1[x*3]<a href="CppOperatorPlus.htm">+</a> (1.0-morph)*(<b><a href="CppDouble.htm">double</a></b>)MyLine2[x*3];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyLineResult[x*3+1]<a href="CppOperatorAssign.htm">=</a> morph*(<b><a href="CppDouble.htm">double</a></b>)MyLine1[x*3+1]<a href="CppOperatorPlus.htm">+</a> (1.0-morph)*(<b><a href="CppDouble.htm">double</a></b>)MyLine2[x*3+1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyLineResult[x*3+2]<a href="CppOperatorAssign.htm">=</a> morph*(<b><a href="CppDouble.htm">double</a></b>)MyLine1[x*3+2]<a href="CppOperatorPlus.htm">+</a> (1.0-morph)*(<b><a href="CppDouble.htm">double</a></b>)MyLine2[x*3+2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>next y<br/>
&nbsp;&nbsp;}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppDouble.htm">double</a></b> RelDistance(T x1, T y1, T x2, T y2, <b><a href="CppDouble.htm">double</a></b> MaxDistance)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>&nbsp;&nbsp;( sqrt(((x2-x1)*(x2-x1))+((y2-y1)*(y2-y1)))/MaxDistance);<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>End of: Distance<br/>
<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ChartHPP<br/>
<b><a href="CppVoid.htm">void</a></b> EmptyChart(TChart * AnyChart)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0; <a href="CppCounter.htm">counter</a>&lt;AnyChart-&gt;SeriesCount() ;<a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AnyChart-&gt;Series[<a href="CppCounter.htm">counter</a>]-&gt;Clear();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next <a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;}<br/>
<a href="CppComment.htm">//</a>End of: <a href="CppIfdef.htm">#ifdef</a> ChartHPP<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a>End of: <a href="CppIfdef.htm">#ifdef</a> VCL_H<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a>End of: <a href="CppIfndef.htm">#ifndef</a> RICHELISCOOL<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/simulation.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/simulation.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PROJECTMUSCADOMESTICA_SIMULATION_H<br/>
<a href="CppDefine.htm">#define</a> PROJECTMUSCADOMESTICA_SIMULATION_H<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Simulation<br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Simulation();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PROJECTMUSCADOMESTICA_SIMULATION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/simulation.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/simulation.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Project Musca Domestica, simulation in which sex-ratio can evolve<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> "simulation.h"<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppComment.htm">//</a>In <b><a href="CppThis.htm">this</a></b> <a href="CppVersion.htm">version</a>:<br/>
<a href="CppComment.htm">//</a>S system back again<br/>
<br/>
<a href="CppComment.htm">//</a>Fly with the whole set of <b><a href="CppAuto.htm">auto</a></b>somes<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>dispersal before mating, monoandry<br/>
<a href="CppComment.htm">//</a>---<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppInclude.htm">#include</a> &lt;math.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;mmsystem.h&gt;<br/>
<a href="CppInclude.htm">#include</a> "Random.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;vector.h&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMain.h"<br/>
<a href="CppInclude.htm">#include</a> "richel001.h"<br/>
<a href="CppInclude.htm">#include</a> "Fly2<a href="CppImplementationFile.htm">.cpp</a>"<br/>
<br/>
<a href="CppComment.htm">//</a>define <a href="CppNDEBUG.htm">NDEBUG</a> to enquicken your code<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppComment.htm">//</a>The <a href="CppAssert.htm">assert</a>ion macro<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>.h&gt;<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> TCursor crFly <a href="CppOperatorAssign.htm">=</a> 1;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm1 *Form1;<br/>
<br/>
<a href="CppComment.htm">//</a>CHOOSE ONE OF THREE TO DEFINE<br/>
<a href="CppDefine.htm">#define</a> MALESDISPERSE<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> FEMALESDISPERSE<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> BOTHDISPERSE<br/>
<br/>
<a href="CppComment.htm">//</a>CHOOSE ONE OF BOTH TO DEFINE<br/>
<a href="CppDefine.htm">#define</a> FIRSTDISPERSE<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> FIRSTMATING<br/>
<br/>
<a href="CppComment.htm">//</a>CHOOSE ONE OF FOUR TO DEFINE<br/>
<a href="CppDefine.htm">#define</a> FATHERCONTROL<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> MOTHERCONTROL<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> BOTHCONTROL<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> ZYGOTECONTROL<br/>
<br/>
<a href="CppComment.htm">//</a>NEEDED TO RUN THE PROGRAM<br/>
<a href="CppDefine.htm">#define</a> IDOISEENLEIPO<br/>
<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> CalculateStdDev<a href="CppTime.htm">Time</a>;<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> NIslands;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Number of islands-subpopulations<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> MaxFPopSize;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>carrying capacity of one island&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> females<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> MaxMPopSize;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>carrying capacity of one island&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> males<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> NGenerations;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>number of generations<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> NRuns;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>number of runs<br/>
<b><a href="CppDouble.htm">double</a></b> PMut;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Maximal mutation <a href="CppOperatorLogicalOr.htm">||</a> chance of mutation<br/>
vector &lt;Fly&gt; FPop;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>vector containing all females within the whole population<br/>
vector &lt;Fly&gt; MPop;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>vector containing all males within the whole population<br/>
vector &lt;Fly&gt; OffFPop;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>female offspring from every female of FPop<br/>
vector &lt;Fly&gt; OffMPop;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>male offspring from every female of FPop<br/>
vector &lt;<b><a href="CppDouble.htm">double</a></b>&gt; OurDataSet;<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> male<a href="CppCounter.htm">Counter</a>=0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>number of males offspring from all females<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> female<a href="CppCounter.htm">Counter</a>=0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>number of females offspring from all females<br/>
<b><a href="CppDouble.htm">double</a></b> SLocus<a href="CppCounter.htm">Counter</a>=0;<br/>
<b><a href="CppVoid.htm">void</a></b> (*NextGeneration) (vector&lt;Fly&gt;&amp;,vector&lt;Fly&gt;&amp;,vector&lt;Fly&gt;&amp;,vector&lt;Fly&gt;&amp;,<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>);<br/>
Fly (*CreateOffspring) (<b><a href="CppConst.htm">const</a></b> Fly &amp;,<b><a href="CppConst.htm">const</a></b> Fly &amp;);<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Reset<a href="CppCounter.htm">Counter</a>s(<b><a href="CppVoid.htm">void</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;male<a href="CppCounter.htm">Counter</a>=0; female<a href="CppCounter.htm">Counter</a>=0;<br/>
&nbsp;&nbsp;SLocus<a href="CppCounter.htm">Counter</a>=0.0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> ClearTotalChart(TChart * Chart1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>; <b><a href="CppFor.htm">for</a></b> (<a href="CppCounter.htm">counter</a>=0; <a href="CppCounter.htm">counter</a> &lt; Chart1-&gt;SeriesCount(); <a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Chart1-&gt;Series[<a href="CppCounter.htm">counter</a>]-&gt;Clear();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next <a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Fly<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "quick.h"<br/>
<a href="CppInclude.htm">#include</a> "nextgeneration.h"<br/>
<a href="CppInclude.htm">#include</a> "layout.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm1::TForm1(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::MenuItemStartSimulationClick(TObject *Sender)<br/>
{<br/>
ButtonStart-&gt;Click();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::MenuItemSaveThisRunResultsClick(TObject *Sender)<br/>
{<br/>
SeveResults(RichEditOutput,RadioGroupDispersingSex);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::MenuItemSaveRunsResultsClick(TObject *Sender)<br/>
{<br/>
SeveResults(RichEditOutput,RadioGroupDispersingSex);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::ButtonStartClick(TObject *Sender)<br/>
{<br/>
<a href="CppApplication.htm">Application</a>-&gt;Icon-&gt;LoadFromFile("musca.ico");<br/>
Form1-&gt;Icon-&gt;LoadFromFile("musca.ico");<br/>
<a href="CppInitialize.htm">Initialize</a>Parameters(ValueListEditor1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RadioGroupDispersingSex-&gt;ItemIndex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RadioGroupWhoIsInControl-&gt;ItemIndex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RichEditOutput,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Chart1);<br/>
<a href="CppComment.htm">//</a><a href="CppInitialize.htm">Initialize</a> the three <a href="CppCounter.htm">counter</a>s<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> Generation, SimRun;<br/>
FPop.resize(NIslands*MaxFPopSize);<br/>
MPop.resize(NIslands*MaxMPopSize);<br/>
OffFPop.resize(NIslands*MaxFPopSize);<br/>
OffMPop.resize(NIslands*MaxMPopSize);<br/>
OurDataSet.resize(NGenerations);<br/>
<br/>
<b><a href="CppFor.htm">for</a></b>(SimRun=0;SimRun&lt;NRuns;SimRun<a href="CppOperatorIncrement.htm">++</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every run<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;InitFPop();<br/>
&nbsp;&nbsp;InitMPop();<br/>
&nbsp;&nbsp;ClearTotalChart(Chart1);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(Generation=0;Generation&lt;NGenerations;Generation<a href="CppOperatorIncrement.htm">++</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> every population<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NextGeneration(MPop, FPop, OffMPop, OffFPop, MaxMPopSize, MaxFPopSize);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NextGeneration(OffMPop, OffFPop, MPop, FPop, MaxMPopSize, MaxFPopSize);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ShowOnChart(Chart1,Generation,ImageI<b><a href="CppDo.htm">do</a></b>,ImageMagda,ImageFly);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Chart1-&gt;Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Chart1-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Reset<a href="CppCounter.htm">Counter</a>s();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next generation<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> OurMean, OurStdDev;<br/>
&nbsp;&nbsp;SafeMeanAndStdDev(&amp;OurDataSet[OurDataSet.size()-CalculateStdDev<a href="CppTime.htm">Time</a>-1],CalculateStdDev<a href="CppTime.htm">Time</a>, OurMean, OurStdDev);<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>( (String) OurMean <a href="CppOperatorPlus.htm">+</a> "\t" <a href="CppOperatorPlus.htm">+</a> (String) OurStdDev );<br/>
&nbsp;&nbsp;Chart1-&gt;Title-&gt;Text-&gt;SetText(("Run number: "+<a href="CppIntToStr.htm">IntToStr</a>(SimRun)).c_str());<br/>
&nbsp;&nbsp;Chart1-&gt;Update();<br/>
&nbsp;&nbsp;}<a href="CppComment.htm">//</a>Next run<br/>
<br/>
<a href="CppComment.htm">//</a>Saving results to file<br/>
<a href="CppComment.htm">//</a>RichEditOutput-&gt;Lines-&gt;SaveToFile(<a href="CppIntToStr.htm">IntToStr</a>(random(1000000))+".dat");<br/>
<a href="CppComment.htm">//</a>Changing icons <b><a href="CppFor.htm">for</a></b> visual <a href="CppSignal.htm">signal</a><br/>
Form1-&gt;Icon-&gt;LoadFromFile("smiley.ico");<br/>
<a href="CppApplication.htm">Application</a>-&gt;Icon-&gt;LoadFromFile("smiley.ico");<br/>
<a href="CppComment.htm">//</a>Playing sound <b><a href="CppFor.htm">for</a></b> audio <a href="CppSignal.htm">signal</a><br/>
PlaySound("richelslaatlaag.wav",<a href="CppNULL.htm">NULL</a>, SND_<a href="CppCfile.htm">FILE</a>NAME | SND_ASYNC);<br/>
<a href="CppComment.htm">//</a>Sending an E-mail with results<br/>
<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (NMSMTP1-&gt;Connected<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>) NMSMTP1-&gt;Connect();<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;NMSMTP1-&gt;PostMessageA-&gt;Body-&gt;<a href="CppAdd.htm">Add</a>(RichEditOutput-&gt;Text);<br/>
<a href="CppComment.htm">//</a>NMSMTP1-&gt;SendMail();<br/>
<a href="CppComment.htm">//</a>exit(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::FormCreate(TObject *Sender)<br/>
{<br/>
TCursor FlyCursor <a href="CppOperatorAssign.htm">=</a> (TCursor) 22;<br/>
Screen-&gt;Cursors[FlyCursor]=LoadCursorFromFile("fly.cur");<br/>
Cursor=FlyCursor;<br/>
ButtonStart-&gt;Cursor=FlyCursor;<br/>
RadioGroupDispersingSex-&gt;Cursor=FlyCursor;<br/>
RadioGroupWhoIsInControl-&gt;Cursor=FlyCursor;<br/>
RadioGroupOrderOfEvents-&gt;Cursor=FlyCursor;<br/>
BitBtn1-&gt;Cursor=FlyCursor;<br/>
ValueListEditor1-&gt;Cursor=FlyCursor;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> FIRSTDISPERSE<br/>
&nbsp;&nbsp;RadioGroupOrderOfEvents-&gt;Caption="First dispersal";<br/>
&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String("First dispersal");<br/>
<a href="CppEndif.htm">#endif</a><br/>
<a href="CppIfdef.htm">#ifdef</a> FIRSTMATING<br/>
&nbsp;&nbsp;RadioGroupOrderOfEvents-&gt;Caption="First mating";<br/>
&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String("First mating");<br/>
<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::FormMouseMove(TObject *Sender, TShift<a href="CppState.htm">State</a> Shift,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y)<br/>
{<br/>
PlaySound("FlySound.wav",<a href="CppNULL.htm">NULL</a>, SND_<a href="CppCfile.htm">FILE</a>NAME | SND_ASYNC);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::BitBtn1Click(TObject *Sender)<br/>
{<br/>
ShowMessage(<br/>
&nbsp;&nbsp;"Project Musca Domestica, simulation in which sex-ratio can evolve&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"Copyright (C) 2009&nbsp;&nbsp;Richl Bilderbeek&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"This program is free software: you can redistribute it and/or modify&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"it under the terms of the GNU General Public License as published by&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"the Free Software Foundation, either version 3 of the License, or&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"(at your option) any later version.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"This program is distributed in the hope that it will be useful,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"but WITHOUT ANY WARRANTY; without even the implied warranty of&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"GNU General Public License for more details.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n"<br/>
&nbsp;&nbsp;"You should have received a copy of the GNU General Public License&nbsp;&nbsp;&nbsp;&nbsp; \n"<br/>
&nbsp;&nbsp;"along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;. "<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectMuscaDomestica/wtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectMuscaDomestica/wtmain.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectWtWebsite.htm">WtWebsite</a>, Richel Bilderbeek's <a href="CppWt.htm">Wt</a> website<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectWtWebsite.htm">ProjectWtWebsite</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppProgram_options.htm">boost/program_options.hpp</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWApplication.htm">WApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWEnvironment.htm">WEnvironment</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtAutoConfig.htm">wtautoconfig</a>.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="ProjectWtWebsite.htm">wtwebsite</a>menudialog.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWt.htm">Wt</a><a href="CppApplication.htm">Application</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppWApplication.htm">Wt::WApplication</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="CppApplication.htm">Application</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">Wt::WEnvironment</a>&amp; env)<br/>
&nbsp;&nbsp;: <a href="CppWApplication.htm">Wt::WApplication</a>(env)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setTitle("Richel Bilderbeek's <a href="CppWt.htm">Wt</a> website");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;useStyleSheet("wt.css");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;root()-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="ProjectWtWebsite.htm">WtWebsite</a>MenuDialog);<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppWApplication.htm">Wt::WApplication</a> *create<a href="CppApplication.htm">Application</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">Wt::WEnvironment</a>&amp; env)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a><a href="CppApplication.htm">Application</a>(env);<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>START_<a href="CppTRACE.htm">TRACE</a>();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppWtAutoConfig.htm">WtAutoConfig</a>::SaveDefaultStylesheet();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppWtAutoConfig.htm">WtAutoConfig</a> a(<a href="CppArgc.htm">argc</a>,<a href="CppArgc.htm">argv</a>,create<a href="CppApplication.htm">Application</a>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> a.Run();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
