<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>ToDouble</title>
  <meta name="description" content="C++ ToDouble"/>
  <meta name="keywords" content="C++ ToDouble string std::string to double convert code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppToDouble.htm">ToDouble</a></h1>
<p>&nbsp;</p>
<p><a href="CppToDouble.htm">ToDouble</a> is a <a href="CppConvert.htm">conversion</a> <a href="CppCodeSnippets.htm">code snippet</a> to <a href="CppConvert.htm">convert</a> a <a href="CppString.htm">std::string</a> to <a href="CppDouble.htm">double</a>.</p>
<p>&nbsp;</p>
<p><a href="CppToDouble.htm">ToDouble</a> can be implemented in multiple equivalent ways (incomplete list):</p>
<ol>
  <li><a href="CppToDouble.htm">ToDouble</a> using <a href="CppAtof.htm">std::atof</a></li>
  <li><a href="CppToDouble.htm">ToDouble</a> using <a href="CppStrtod.htm">std::strtod</a></li>
  <li><a href="CppToDouble.htm">ToDouble</a> using <a href="CppIstringstream.htm">std::istringstream</a></li>
</ol>
<p>&nbsp;</p>
<p>To <a href="CppConvert.htm">conversion</a> a <a href="CppString.htm">std::string</a> to any <a href="CppDataType.htm">data type</a> one can use <a href="CppLexicalCast.htm">LexicalCast</a> and <a href="CppLexical_cast.htm">boost::lexical_cast</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppToDouble.htm">ToDouble</a> using <a href="CppAtof.htm">std::atof</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppToDouble.htm">ToDouble</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppToDouble.htm">ToDouble</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppAtof.htm">std::atof</a>(s.c_str());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppToDouble.htm">ToDouble</a> using <a href="CppIstringstream.htm">std::istringstream</a></h2>
<p>&nbsp;</p>
<p>The implementation below is similar to <a href="http://www.parashift.com/c++-faq-lite/misc-technical-issues.html#faq-39.2">the C++ FAQ Lite's convertToDouble code snippet</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppToDouble.htm">ToDouble</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppToDouble.htm">ToDouble</a>(<a href="CppString.htm">std::string</a> <b><a href="CppConst.htm">const</a></b>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIstringstream.htm">std::istringstream</a> i(s);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(i <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> x))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppLogic_error.htm">std::logic_error</a>("<a href="CppString.htm">std::string</a> cannot be converted to <b><a href="CppDouble.htm">double</a></b>");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> x;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppToDouble.htm">ToDouble</a> using <a href="CppStrtod.htm">std::strtod</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppToDouble.htm">ToDouble</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppToDouble.htm">ToDouble</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStrtod.htm">std::strtod</a>(s.c_str(),0);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppToDouble.htm">ToDouble</a> tests</h2>
<p>&nbsp;</p>
<p>In the code below, all <a href="CppToDouble.htm">ToDouble</a> flavors are compared and found out equivalent.</p> 
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppToDouble.htm">ToDouble</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppToDouble.htm">ToDouble</a>UsingAtof(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppAtof.htm">std::atof</a>(s.c_str());<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppToDouble.htm">ToDouble</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppToDouble.htm">ToDouble</a>UsingStrtod(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStrtod.htm">std::strtod</a>(s.c_str(),0);<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppToDouble.htm">ToDouble</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppToDouble.htm">ToDouble</a>UsingStream(<a href="CppString.htm">std::string</a> <b><a href="CppConst.htm">const</a></b>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIstringstream.htm">std::istringstream</a> i(s);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(i <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> x))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppLogic_error.htm">std::logic_error</a>("<a href="CppString.htm">std::string</a> cannot be converted to <b><a href="CppDouble.htm">double</a></b>");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> x;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> GetRandomDigit()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (<a href="CppRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 10)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> '0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> '1';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppReturn.htm">return</a></b> '2';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <b><a href="CppReturn.htm">return</a></b> '3';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: <b><a href="CppReturn.htm">return</a></b> '4';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: <b><a href="CppReturn.htm">return</a></b> '5';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 6: <b><a href="CppReturn.htm">return</a></b> '6';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 7: <b><a href="CppReturn.htm">return</a></b> '7';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 8: <b><a href="CppReturn.htm">return</a></b> '8';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 9: <b><a href="CppReturn.htm">return</a></b> '9';<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> GetRandomDouble()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> sign <a href="CppOperatorAssign.htm">=</a> ((<a href="CppRand.htm">std::rand</a>() <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 4) <a href="CppOperatorModulus.htm">%</a> 2 ? "+" : "-");<br/>
<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> s1;<br/>
&nbsp;&nbsp;s1.resize(1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 3));<br/>
&nbsp;&nbsp;<a href="CppGenerate.htm">std::generate</a>(s1.begin(),s1.end(),GetRandomDigit);<br/>
<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> s2;<br/>
&nbsp;&nbsp;s2.resize(1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 5));<br/>
&nbsp;&nbsp;<a href="CppGenerate.htm">std::generate</a>(s2.begin(),s2.end(),GetRandomDigit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> sign <a href="CppOperatorPlus.htm">+</a> s1 <a href="CppOperatorPlus.htm">+</a> "." <a href="CppOperatorPlus.htm">+</a> s2;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>20; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> GetRandomDouble();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ":\t" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppToDouble.htm">ToDouble</a>UsingAtof(s) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppToDouble.htm">ToDouble</a>UsingAtof(s)<a href="CppOperatorEqual.htm">==</a><a href="CppToDouble.htm">ToDouble</a>UsingStrtod(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppToDouble.htm">ToDouble</a>UsingAtof(s)<a href="CppOperatorEqual.htm">==</a><a href="CppToDouble.htm">ToDouble</a>UsingStream(s));<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
+67.3:	67.3<br/>
+29.27:	29.27<br/>
+36.6:	36.6<br/>
-18.920:	-18.92<br/>
+75.22897:	75.229<br/>
+12.31947:	12.3195<br/>
+503.10:	503.1<br/>
-2.6:	-2.6<br/>
-5.76569:	-5.76569<br/>
+452.4:	452.4<br/>
-430.868:	-430.868<br/>
+3.49:	3.49<br/>
+6.9266:	6.9266<br/>
-504.7172:	-504.717<br/>
+2.10:	2.1<br/>
+59.90917:	59.9092<br/>
-159.767:	-159.767<br/>
+5.39:	5.39<br/>
+12.39088:	12.3909<br/>
+96.8561:	96.8561<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
