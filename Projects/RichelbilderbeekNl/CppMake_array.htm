<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Make_array</title>
  <meta name="description" content="C++ Make_array"/>
  <meta name="keywords" content="C++ Make_array "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMake_array.htm">Make_array</a></h1>
<p>&nbsp;</p>
<h2>./CppMake_array/CppMake_array.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMake_array/CppMake_array.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppMake_array<br/>
<br/>
SOURCES +=<br/>
<br/>
HEADERS&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppMake_array/make_array.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppMake_array/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMake_array/make_array.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMake_array/make_array.h" border = "1"><tr><td><code>
//Original from https://gist.github.com/lichray/6034753<br/>
<br/>
#include &lt;array&gt;<br/>
//#include &lt;functional&gt;<br/>
<br/>
template &lt;typename... T&gt;<br/>
using common_type_t = typename std::common_type&lt;T...&gt;::type;<br/>
<br/>
template &lt;typename T&gt;<br/>
using remove_cv_t = typename std::remove_cv&lt;T&gt;::type;<br/>
<br/>
template &lt;bool, typename T, typename... U&gt;<br/>
struct lazy_conditional_c;<br/>
<br/>
template &lt;typename T&gt;<br/>
struct lazy_conditional_c&lt;true, T&gt;<br/>
{<br/>
	using type = typename T::type;<br/>
};<br/>
<br/>
template &lt;typename T, typename U&gt;<br/>
struct lazy_conditional_c&lt;true, T, U&gt;<br/>
{<br/>
	using type = typename T::type;<br/>
};<br/>
<br/>
template &lt;typename T, typename U&gt;<br/>
struct lazy_conditional_c&lt;false, T, U&gt;<br/>
{<br/>
	using type = typename U::type;<br/>
};<br/>
<br/>
template &lt;typename V, typename T, typename... U&gt;<br/>
using If = lazy_conditional_c&lt;V::value, T, U...&gt;;<br/>
<br/>
template &lt;typename V, typename T, typename... U&gt;<br/>
using If_t = typename If&lt;V, T, U...&gt;::type;<br/>
<br/>
template &lt;typename T&gt;<br/>
struct identity_of<br/>
{<br/>
	using type = T;<br/>
};<br/>
<br/>
template &lt;template &lt;typename&gt; class F, typename... T&gt;<br/>
struct no_type : std::true_type {};<br/>
<br/>
template &lt;template &lt;typename&gt; class F, typename T1, typename... T2&gt;<br/>
struct no_type&lt;F, T1, T2...&gt; :<br/>
	std::integral_constant<br/>
	&lt;<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;bool,<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;not F&lt;T1&gt;::value and no_type&lt;F, T2...&gt;::value<br/>
	&gt;<br/>
{};<br/>
<br/>
template &lt;template &lt;typename&gt; class F, template &lt;typename&gt; class G&gt;<br/>
struct composed<br/>
{<br/>
	template &lt;typename T&gt;<br/>
	using call = F&lt;typename G&lt;T&gt;::type&gt;;<br/>
};<br/>
<br/>
template &lt;typename T&gt;<br/>
struct _is_reference_wrapper : std::false_type {};<br/>
<br/>
template &lt;typename T&gt;<br/>
struct _is_reference_wrapper&lt;std::reference_wrapper&lt;T&gt;&gt; : std::true_type {};<br/>
<br/>
template &lt;typename T&gt;<br/>
using is_reference_wrapper =<br/>
	composed&lt;_is_reference_wrapper, std::remove_cv&gt;::call&lt;T&gt;;<br/>
<br/>
template &lt;typename... T&gt;<br/>
constexpr auto make_array(T&amp;&amp;... t)<br/>
	-&gt; std::array<br/>
	&lt;<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;If_t<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&lt;<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;no_type<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;&lt;<br/>
			composed<br/>
			&lt;<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;is_reference_wrapper,<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;std::remove_reference<br/>
			&gt;<br/>
			::call,<br/>
			T...<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;&gt;,<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;std::common_type&lt;T...&gt;<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&gt;,<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;sizeof...(T)<br/>
	&gt;<br/>
{<br/>
	return {{ std::forward&lt;T&gt;(t)... }};<br/>
}<br/>
<br/>
template &lt;typename V, typename... T&gt;<br/>
constexpr auto make_array(T&amp;&amp;... t)<br/>
	-&gt; std::array<br/>
	&lt;<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;V,<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;sizeof...(T)<br/>
	&gt;<br/>
{<br/>
	return {{ std::forward&lt;T&gt;(t)... }};<br/>
}<br/>
<br/>
template &lt;size_t... I&gt;<br/>
struct _indices {};<br/>
<br/>
template &lt;size_t N, size_t... I&gt;<br/>
struct _build_indices : _build_indices&lt;N - 1, N - 1, I...&gt; {};<br/>
 <br/>
template &lt;size_t... I&gt;<br/>
struct _build_indices&lt;0, I...&gt; : _indices&lt;I...&gt; {};<br/>
<br/>
template &lt;typename T, size_t N, size_t... I&gt;<br/>
constexpr auto _to_array(T (&amp;arr)[N], _indices&lt;I...&gt;)<br/>
	-&gt; std::array&lt;remove_cv_t&lt;T&gt;, N&gt;<br/>
{<br/>
	return {{ arr[I]... }};<br/>
}<br/>
<br/>
template &lt;typename T, size_t N&gt;<br/>
constexpr auto to_array(T (&amp;arr)[N])<br/>
	-&gt; std::array&lt;remove_cv_t&lt;T&gt;, N&gt;<br/>
{<br/>
	return _to_array(arr, _build_indices&lt;N&gt;());<br/>
}<br/>
<br/>
/*<br/>
#include &lt;iostream&gt;<br/>
<br/>
int main()<br/>
{<br/>
	auto ch = 'a';<br/>
	auto const d = 65l;<br/>
	auto a1 = make_array(ch, d, 0);<br/>
	static_assert(std::is_same&lt;decltype(a1)::value_type, long&gt;(), "");<br/>
	std::cout &lt;&lt; a1[0] &lt;&lt; std::endl;<br/>
<br/>
	constexpr auto a2 = to_array("abc");<br/>
	static_assert(std::is_same&lt;decltype(a2)::value_type, char&gt;(), "");<br/>
	std::cout &lt;&lt; a2.data() &lt;&lt; std::endl;<br/>
<br/>
	auto a3 = make_array("aa", "bb");<br/>
	static_assert(std::is_same&lt;decltype(a3)::value_type, char const*&gt;(),<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;"fix your library");<br/>
	std::cout &lt;&lt; a3[0] &lt;&lt; std::endl;<br/>
<br/>
	auto a4 = make_array&lt;long&gt;(2, 3U);<br/>
	static_assert(std::is_same&lt;decltype(a4)::value_type, long&gt;(), "");<br/>
	std::cout &lt;&lt; a4[0] &lt;&lt; std::endl;<br/>
<br/>
	auto a5 = make_array&lt;short&gt;();<br/>
	static_assert(std::is_same&lt;decltype(a5)::value_type, short&gt;(), "");<br/>
	std::cout &lt;&lt; a5.size() &lt;&lt; std::endl;<br/>
<br/>
	int a, b;<br/>
	auto a6 = make_array&lt;std::reference_wrapper&lt;int&gt;&gt;(a, b);<br/>
	std::cout &lt;&lt; a6.size() &lt;&lt; std::endl;<br/>
<br/>
	// ** do not compile **<br/>
	//auto a4 = make_array(std::cref(""));<br/>
<br/>
	// ** hard error **<br/>
	//char s[2][6] = { "nice", "thing" };<br/>
	//auto a3 = to_array(s);<br/>
}<br/>
*/<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
