<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>destructor</title>
  <meta name="description" content="C++ Destructor"/>
  <meta name="keywords" content="C++ Destructor code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppDestructor.htm">Destructor</a></h1>
<p>&nbsp;</p>
<p>
  A <a href="CppDestructor.htm">destructor</a> is a <a
  href="CppClass.htm">class</a> element that is called when a <a
  href="CppClass.htm">class</a> goes out of <a href="CppScope.htm">scope</a>. The
  <a href="CppClass.htm">class</a> element that is called when a <a
  href="CppClass.htm">class</a> is created is called the <a
  href="CppConstructor.htm">constructor</a>.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppExample.htm">Examples</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppDestructorExample1.htm">destructor example 1: basics</a></h2>
  <li><a href="CppDestructorExample2.htm">destructor example 2: detruction sequence</a></h2>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Design <a href="CppContructor.htm">constructors</a>, assignments, and the <a href="CppDestructor.htm">destructor</a> as a matched set of operations [5]
  </li>
  <li>
    All <a href="CppBaseClass.htm">base classes</a> must have a (<a href="CppPublic.htm">public</a>) <a href="CppVirtual.htm">virtual</a> <a href="CppDestructor.htm">destructor</a> [1,3]
  </li>
  <li>
    A non-<a href="CppBaseClass.htm">base class</a> should have a (non-<a href="CppPublic.htm">public</a>) 
    non-<a href="CppVirtual.htm">virtual</a> <a href="CppDestructor.htm">destructor</a> [1,3]
  </li>
  <li>
    Avoid calling <a href="CppVirtual.htm">virtual</a> <a href="CppMemberFunction.htm">member functions</a> 
    in <a href="CppConstructor.htm">constructors</a> and <a href="CppDestructor.htm">destructors</a> [2]
  </li>
  <li>
    Don't call <a href="CppVirtual.htm">virtual</a> <a href="CppMemberFunction.htm">member functions</a> in <a href="CppConstructor.htm">constructors</a> and <a href="CppDestructor.htm">destructors</a> [9]
  </li>
  <li>
    Never let an <a href="CppException.htm">exception</a> escape from a <a href="CppDestructor.htm">destructor</a> [4]
  </li>
  <li>
    If a <a href="CppConstructor.htm">constructor</a> acquires a resource, its class needs a <a href="CppDestructor.htm">destructor</a> to release the resource [6]
  </li>
  <li>
    If a <a href="CppClass.htm">class</a> has a <a href="CppVirtual.htm">virtual</a> <a href="CppMemberFunction.htm">member functions</a>, 
    it needs a <a href="CppVirtual.htm">virtual</a> <a href="CppDestructor.htm">destructor</a> [7,8]
  </li>
  <li>
    Generated <a href="CppDestructor.htm">destructors</a> are implicitly <a href="CppNoexcept.htm">noexcept</a> [10,11]. 
    Declaring a <a href="CppDestructor.htm">destructors</a> <a href="CppNoexcept.htm">noexcept</a> explicitly is harmless and unconventional [11].
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 50: 'Make base class destructors public and virtual, or protected and nonvirtual'.</li>
  <li><!--  2 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Item 49: 'Avoid calling virtual functions in constructors and destructors'</li>
  <li><!--  3 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. AV Rule 78: 'All base classes with a virtual function shall define a virtual destructor.'</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[30] Never let an exception escape from a destructor'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[1] Design constructors, assignments, and the destructor as a matched set of operations'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[3] If a constructor acquires a resource, its class needs a destructor to release the resource'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[4] If a class has a virtual function, it needs a virtual destructor'</li>
  <li><!--  8 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 20.7. Advice. page 611: '[8] A class with a virtual function should have a virtual destructor'</li>
  <li><!--  9 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 22.7. Advice. page 663: '[7] Don't call virtual functions during construction and destruction'</li>
  <li><!-- 10 --><a href="http://www.stroustrup.com/C++11FAQ.html#noexcept">Bjarne Stroustrup's C++11 FAQ</a>: 'A destructor shouldn't throw; a generated destructor is implicitly noexcept (independently of what code is in its body) if all of the members of its class have noexcept destructors.'</li>
  <li><!-- 11 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective Modern C++ (1st Edition). 2014. ISBN: 978-1-491-90399-5. Item 14, page 94: 'By default, all memory deallocation functions and all destructors -both user-defined and compiler-generated- are implicitly noexcept. There is thus no need to declare them noexcept. (Doing so doesn't hurt anything, it's just unconventional.)'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
