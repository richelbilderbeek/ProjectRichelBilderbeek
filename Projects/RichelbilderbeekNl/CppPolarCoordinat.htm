<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>PolarCoordinat</title>
  <meta name="description" content="C++ PolarCoordinat"/>
  <meta name="keywords" content="C++ PolarCoordinat "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppPolarCoordinat.htm">PolarCoordinat</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppPolarCoordinat-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPolarCoordinat/CppPolarCoordinat.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPolarCoordinat/CppPolarCoordinat.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPolarCoordinat.htm">CppPolarCoordinat</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPolarCoordinat.htm">CppPolarCoordinat</a>/polarcoordinat.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPolarCoordinat.htm">CppPolarCoordinat</a>/polarcoordinat.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPolarCoordinat.htm">CppPolarCoordinat</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPolarCoordinat/polarcoordinat.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPolarCoordinat/polarcoordinat.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> POLARCOORDINAT_H<br/>
<a href="CppDefine.htm">#define</a> POLARCOORDINAT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "coordinat.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/<a href="CppPointer.htm">point</a>_xy.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/base_units/angle/radian.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/quantity.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/area.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/length.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/prefixes.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Angle, <b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> PolarCoordinat<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;Length&gt; Coordinat;<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> PolarCoordinat(<b><a href="CppConst.htm">const</a></b> Angle&amp; angle, <b><a href="CppConst.htm">const</a></b> Length&amp; length);<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> PolarCoordinat(<b><a href="CppConst.htm">const</a></b> Length&amp; x, <b><a href="CppConst.htm">const</a></b> Length&amp; y);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a> a polar coordinat by putting the second's tail on the<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/head of <b><a href="CppThis.htm">this</a></b> PolarCoordinat<br/>
&nbsp;&nbsp;PolarCoordinat&amp; <b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> PolarCoordinat&amp; pc);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> Angle CalcAngle(<b><a href="CppConst.htm">const</a></b> Length&amp; dx, <b><a href="CppConst.htm">const</a></b> Length&amp; dy);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> Length CalcLength(<b><a href="CppConst.htm">const</a></b> Length&amp; dx, <b><a href="CppConst.htm">const</a></b> Length&amp; dy);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the angle of <b><a href="CppThis.htm">this</a></b> polar coordinat<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/0.0 pi rad <a href="CppOperatorAssign.htm">=</a> 12 o'clock<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/0.5 pi rad <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;3 o'clock<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/1.0 pi rad <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;6 o'clock<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/1.5 pi rad <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;9 o'clock<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Angle&amp; <a href="CppGetAngle.htm">GetAngle</a>() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_angle; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the length of <b><a href="CppThis.htm">this</a></b> coordinat, which equals its distance to the origin<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Length&amp; GetLength() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_length; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetAngle(<b><a href="CppConst.htm">const</a></b> Angle&amp; angle) { m_angle <a href="CppOperatorAssign.htm">=</a> angle; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Translate with a coordinat<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Translate(<b><a href="CppConst.htm">const</a></b> Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The angle<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/0.0 pi rad <a href="CppOperatorAssign.htm">=</a> 12 o'clock<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/0.5 pi rad <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;3 o'clock<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/1.0 pi rad <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;6 o'clock<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/1.5 pi rad <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;9 o'clock<br/>
&nbsp;&nbsp;Angle m_angle;<br/>
<br/>
&nbsp;&nbsp;Length m_length;<br/>
<br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T, <b><a href="CppClass.htm">class</a></b> U&gt;<br/>
T CalculateSqrt(<b><a href="CppConst.htm">const</a></b> U&amp; x);<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Angle,<b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;Length&gt; ToCoordinat(<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt;&amp; c)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;Length&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppStdSin.htm">std::sin</a>(c.<a href="CppGetAngle.htm">GetAngle</a>().value()) * c.GetLength(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(c.<a href="CppGetAngle.htm">GetAngle</a>().value()) * c.GetLength()<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Angle, <b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
PolarCoordinat&lt;Angle,Length&gt;::PolarCoordinat(<b><a href="CppConst.htm">const</a></b> Angle&amp; angle, <b><a href="CppConst.htm">const</a></b> Length&amp; length)<br/>
&nbsp;&nbsp;: m_angle(angle), m_length(length)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Angle, <b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
PolarCoordinat&lt;Angle,Length&gt;::PolarCoordinat(<b><a href="CppConst.htm">const</a></b> Length&amp; x, <b><a href="CppConst.htm">const</a></b> Length&amp; y)<br/>
&nbsp;&nbsp;: m_angle(CalcAngle(x,y)), m_length(CalcLength(x,y))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Angle, <b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
<b><a href="CppConst.htm">const</a></b> Angle PolarCoordinat&lt;Angle,Length&gt;::CalcAngle(<b><a href="CppConst.htm">const</a></b> Length&amp; dx, <b><a href="CppConst.htm">const</a></b> Length&amp; dy)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> half_pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::half_pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Angle(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(half_pi <a href="CppOperatorPlus.htm">+</a> <a href="CppStdAtan.htm">std::atan</a>2(dy.value(),dx.value()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* <a href="CppBoostUnits.htm">boost::units</a>::si::radians);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Angle, <b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
<b><a href="CppConst.htm">const</a></b> Length PolarCoordinat&lt;Angle,Length&gt;::CalcLength(<b><a href="CppConst.htm">const</a></b> Length&amp; dx, <b><a href="CppConst.htm">const</a></b> Length&amp; dy)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a { dx.value() };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b { dy.value() };<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdSqrt.htm">std::sqrt</a>((a*a)+(b*b)) * <a href="CppBoostUnits.htm">boost::units</a>::si::meter;<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> Is<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;T&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;T&gt;&amp; rhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;T&gt;&amp; max_error)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs &lt; rhs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? lhs <a href="CppOperatorPlus.htm">+</a> max_error &gt; rhs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: rhs <a href="CppOperatorPlus.htm">+</a> max_error &gt; lhs;<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Angle,<b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
PolarCoordinat&lt;Angle,Length&gt; <b><a href="CppOperatorPlus.htm">operator+</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt;&amp; b<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> PolarCoordinat&lt;Angle,Length&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(ToCoordinat(a)) <a href="CppOperatorPlus.htm">+</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(ToCoordinat(b)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(ToCoordinat(a)) <a href="CppOperatorPlus.htm">+</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(ToCoordinat(b))<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Angle, <b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> PolarCoordinat&lt;Angle,Length&gt;::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested { <b><a href="CppFalse.htm">false</a></b> };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> SHOW_CALCANGLE_SERIES<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(CalcAngle(Length( 1.0 * meter),Length(-1.0 * meter)) <a href="CppOperatorDivide.htm">/</a> Angle(<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian));<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(CalcAngle(Length( 1.0 * meter),Length( 0.0 * meter)) <a href="CppOperatorDivide.htm">/</a> Angle(<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian));<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(CalcAngle(Length( 1.0 * meter),Length( 1.0 * meter)) <a href="CppOperatorDivide.htm">/</a> Angle(<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian));<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(CalcAngle(Length( 0.0 * meter),Length( 1.0 * meter)) <a href="CppOperatorDivide.htm">/</a> Angle(<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian));<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(CalcAngle(Length(-1.0 * meter),Length( 1.0 * meter)) <a href="CppOperatorDivide.htm">/</a> Angle(<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian));<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(CalcAngle(Length(-1.0 * meter),Length( 0.0 * meter)) <a href="CppOperatorDivide.htm">/</a> Angle(<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian));<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(CalcAngle(Length(-1.0 * meter),Length(-1.0 * meter)) <a href="CppOperatorDivide.htm">/</a> Angle(<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian));<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(CalcAngle(Length( 0.0 * meter),Length(-1.0 * meter)) <a href="CppOperatorDivide.htm">/</a> Angle(<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian));<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::micro;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::nano;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::radian;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(CalcAngle(Length( 1.0 * meter),Length(-1.0 * meter)),Angle( 0.25 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian),Angle(1.0 * nano * radian)));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(CalcAngle(Length( 1.0 * meter),Length( 0.0 * meter)),Angle( 0.50 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian),Angle(1.0 * nano * radian)));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(CalcAngle(Length( 1.0 * meter),Length( 1.0 * meter)),Angle( 0.75 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian),Angle(1.0 * nano * radian)));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(CalcAngle(Length( 0.0 * meter),Length( 1.0 * meter)),Angle( 1.00 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian),Angle(1.0 * nano * radian)));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(CalcAngle(Length(-1.0 * meter),Length( 1.0 * meter)),Angle( 1.25 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian),Angle(1.0 * nano * radian)));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(CalcAngle(Length(-1.0 * meter),Length( 0.0 * meter)),Angle( 1.50 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian),Angle(1.0 * nano * radian)));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(CalcAngle(Length(-1.0 * meter),Length(-1.0 * meter)),Angle(-0.25 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian),Angle(1.0 * nano * radian)));<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PolarCoordinat c(Length(1.0 * nano * meter),Length(-1.0 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(c.<a href="CppGetAngle.htm">GetAngle</a>(),Angle(1.0 * nano * radian),Angle(1.0 * nano * radian)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(c.GetLength(),Length(1.0 * meter),Length(1.0 * nano * meter)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PolarCoordinat c(Length(1.0 * meter),Length(1.0 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(c.<a href="CppGetAngle.htm">GetAngle</a>(),Angle(0.75 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian),Angle(1.0 * nano * radian)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(c.GetLength(),Length(<a href="CppStdSqrt.htm">std::sqrt</a>(2.0) * meter),Length(1.0 * nano * meter)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Con<a href="CppVersion.htm">version</a> to Coordinat<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Angle(0.0 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Length(1.0 * meter)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat c(ToCoordinat(p));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;0&gt;(c) &gt; Length(-1.0 * micro * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;0&gt;(c) &lt; Length( 1.0 * micro * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;1&gt;(c) &gt; Length(-1.00001 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;1&gt;(c) &lt; Length(-0.99999 * meter));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt; p(Angle(0.5 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian),Length(1.0 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat c(ToCoordinat(p));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;1&gt;(c) &gt; Length(-1.0 * micro * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;1&gt;(c) &lt; Length( 1.0 * micro * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;0&gt;(c) &gt; Length(0.99999 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;0&gt;(c) &lt; Length(1.00001 * meter));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt; p(Angle(1.0 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian),Length(1.0 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat c(ToCoordinat(p));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;0&gt;(c) &gt; Length(-1.0 * micro * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;0&gt;(c) &lt; Length( 1.0 * micro * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;1&gt;(c) &gt; Length(0.99999 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;1&gt;(c) &lt; Length(1.00001 * meter));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt; p(Angle(1.5 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian),Length(1.0 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat c(ToCoordinat(p));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;1&gt;(c) &gt; Length(-1.0 * micro * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;1&gt;(c) &lt; Length( 1.0 * micro * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;0&gt;(c) &gt; Length(-1.00001 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;0&gt;(c) &lt; Length(-0.99999 * meter));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt; p(Angle(2.0 * <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() * radian),Length(1.0 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat c(ToCoordinat(p));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;0&gt;(c) &gt; Length(-1.0 * micro * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;0&gt;(c) &lt; Length( 1.0 * micro * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;1&gt;(c) &gt; Length(-1.00001 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(get&lt;1&gt;(c) &lt; Length(-0.99999 * meter));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Translate<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt; c(Length(1.0 * meter),Length(1.0 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PolarCoordinat&lt;Angle,Length&gt; d(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.Translate(Coordinat(Length(2.0 * meter),Length(2.0 * meter)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(c.<a href="CppGetAngle.htm">GetAngle</a>(),d.<a href="CppGetAngle.htm">GetAngle</a>(),Angle(1.0 * nano * radian)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt; c(Length(-1.0 * meter),Length(1.0 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PolarCoordinat&lt;Angle,Length&gt; d(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.Translate(Coordinat(Length(-2.0 * meter),Length(2.0 * meter)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(c.<a href="CppGetAngle.htm">GetAngle</a>(),d.<a href="CppGetAngle.htm">GetAngle</a>(),Angle(1.0 * nano * radian)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt; c(Length( 3.0 * meter),Length( 4.0 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt; d(Length(-3.0 * meter),Length(-4.0 * meter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PolarCoordinat&lt;Angle,Length&gt; e(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e.Translate(Coordinat(Length(6.0 * meter),Length(8.0 * meter)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(c.<a href="CppGetAngle.htm">GetAngle</a>(),e.<a href="CppGetAngle.htm">GetAngle</a>(),Angle(1.0 * nano * radian)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(c.GetLength(),e.GetLength(),Length(1.0 * nano * meter)));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Angle, <b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> PolarCoordinat&lt;Angle,Length&gt;::Translate(<b><a href="CppConst.htm">const</a></b> Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat <b><a href="CppThis.htm">this</a></b>_coordinat(ToCoordinat(*<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat delta_coordinat(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;get&lt;0&gt;(<b><a href="CppThis.htm">this</a></b>_coordinat) <a href="CppOperatorPlus.htm">+</a> get&lt;0&gt;(c),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;get&lt;1&gt;(<b><a href="CppThis.htm">this</a></b>_coordinat) <a href="CppOperatorPlus.htm">+</a> get&lt;1&gt;(c)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt; new_coordinat(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;get&lt;0&gt;(delta_coordinat),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;get&lt;1&gt;(delta_coordinat)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;m_angle <a href="CppOperatorAssign.htm">=</a> new_coordinat.<a href="CppGetAngle.htm">GetAngle</a>();<br/>
&nbsp;&nbsp;m_length <a href="CppOperatorAssign.htm">=</a> new_coordinat.GetLength();<br/>
}<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> POLARCOORDINAT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPolarCoordinat/polarcoordinat.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPolarCoordinat/polarcoordinat.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "polarcoordinat.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppTemplate.htm">template</a></b>&lt;&gt;<br/>
<b><a href="CppDouble.htm">double</a></b> CalculateSqrt&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic_assert.htm">static_assert</a></b>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;!<a href="CppStdIs_same.htm">std::is_same</a>&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>,<a href="CppBoost.htm">boost</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::units::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(),"");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdSqrt.htm">std::sqrt</a>(x);<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b>&lt;&gt;<br/>
<a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt;<br/>
&nbsp;&nbsp;CalculateSqrt&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::area&gt;<br/>
&nbsp;&nbsp;&gt;(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::area&gt;&amp; x)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdSqrt.htm">std::sqrt</a>(x.value()) * <a href="CppBoostUnits.htm">boost::units</a>::si::meter;<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
