<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Gtst</title>
  <meta name="description" content="C++ Gtst"/>
  <meta name="keywords" content="C++ Gtst "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ProjectGtst.htm">Gtst</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.647 at Fri Jun  6 17:15:24 2014
 -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Introduction</h2>
<p>&nbsp;</p>
<p><a href="ProjectGtst.htm">GTST</a> ('Game Theory ServerT') is an open source program for performing game theory experiments. 
When <a href="ProjectGtst.htm">GTST</a>
is started on a server, both administrators and participants can log in and do game theory experiments.</p>
<p>&nbsp;</p>
<p><a href="ProjectGtst.htm">GTST</a> has been developed by (sorted alphabetically on first name):</p>
<ul>
  <li><a href="http://www.rug.nl/biologie/onderzoek/onderzoekgroepen/theoreticalbiology/peoplePages/molleman">Lucas Molleman</a>: researcher</li>
  <li><a href="http://www.rug.nl/biologie/onderzoek/onderzoekgroepen/theoreticalbiology/peoplePages/vdBerg">Piet van den Berg</a>: researcher</li>
  <li><a href="http://www.richelbilderbeek.nl">Richel Bilderbeek</a>: programming</li>
</ul>
<p>&nbsp;</p>
<p><a href="ProjectGtst.htm">GTST</a> started on the 9th of May 2011 and formally ended at the 27th of May 2011.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>The name GTST explained</h2>
<p>&nbsp;</p>
<p>The name GTST developed from the following steps:</p>
<ul>
  <li>The project is about game theorey and has 'ProjectGameTheory' as a working title, so a name with 'Game Theory' in it would be nice</li>
  <li>The project is about setting up a server, so a name with 'Server' in it would be nice</li>
  <li>A short name would be nice, so 'GTS' was a possibility</li>
  <li>GTST is also an abbreviation of 
    <a href="http://en.wikipedia.org/wiki/Goede_Tijden,_Slechte_Tijden">Goede Tijden, Slechte Tijden</a>
    ('Good Times, Bad Times), which is a Dutch soap series. In soap series, people often struggle with non-contributors.
    Problem was: what would the 'T' mean?
  </li>
  <li>Appending a noun with a 'T' is a certain Dutch slang, resulting in 'Game Theory ServerT'</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ProjectGtst_1_2.png">View a screenshot of GTST (version 1.2)(png)</a></li>
  <li><a href="ProjectGtstSource_1_2.zip">Download the GTST source code (version 1.2)(zip)</a></li>
  <li><a href="ProjectGtstArchitectureMenuDialog.png">View the GTST MenuDialog architecture (version 1.2)(png)</a></li>
  <li><a href="ProjectGtstArchitectureMenuDialog.dia">View the GTST MenuDialog architecture (version 1.2)(dia)</a></li>
  <li><a href="ProjectGtstArchitectureServer.png">View the GTST Server architecture (version 1.2)(png)</a></li>
  <li><a href="ProjectGtstArchitectureServer.dia">View the GTST Server architecture (version 1.2)(dia)</a></li>
  <li><a href="ProjectGtstSloccount.txt">View the GTST project details generated using David A. Wheeler's 'SLOCCount' (version 1.2)(txt)</a></li>
  <li><a href="ProjectGtst.ppt">Download a presentation given to the participants of the experiment (version 0.1)(ppt)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Older downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ProjectGtstSource_1_1.zip">Download the GTST source code (version 1.1)(zip)</a></li>
  <li><a href="ProjectGtstSource_1_0.zip">Download the GTST source code (version 1.0)(zip)</a></li>
  <li><a href="ProjectGtstSource_0_59.zip">Download the GTST source code (version 0.58)(zip)</a></li>
  <li><a href="ProjectGtstSource_0_58.zip">Download the GTST source code (version 0.58)(zip)</a></li>
  <li><a href="ProjectGtstSource_0_57.zip">Download the GTST source code (version 0.57)(zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Similar software</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://www.iew.uzh.ch/ztree/index.php">z-Tree</a>: closed source</li>
<!--  <li><a href="http://en.wikipedia.org/wiki/Amazon_Mechanical_Turk">Amazon Mechanical Turk</a>:</li> -->
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
  <li><img src="PicWeb.png" alt="Web"/> <a href="CppWebApplication.htm">Web application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
  <li><img src="PicGui.png" alt="GUI"/> <a href="CppGuiApplication.htm">GUI application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 5.2.1 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
  <li><img src="PicWt.png" alt="Wt"/> <a href="CppWt.htm">Wt</a>: version 3.3.0</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ProjectGtst/ProjectGtstTestConcurrency.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/ProjectGtstTestConcurrency.pro" border = "1"><tr><td><code>
#-------------------------------------------------<br/>
#<br/>
# Project created by <a href="CppQtCreator.htm">QtCreator</a> 2010-07-24T16:04:35<br/>
#<br/>
#-------------------------------------------------<br/>
QT += core gui<br/>
<a href="CppQmakeLibs.htm">LIBS</a> += <a href="CppWt.htm">-lwt</a> <a href="CppWt.htm">-lwt</a>http<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp0x.htm">c++0x</a><br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<br/>
#Detect dead code<br/>
#<a href="CppQmakeLibs.htm">LIBS</a> += -lgcov<br/>
#<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += --coverage<br/>
<br/>
#Use of <a href="CppGprof.htm">gprof</a><br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a>_DEBUG += -pg<br/>
QMAKE_LFLAGS_DEBUG += -pg<br/>
<br/>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCounter.htm">CppCounter</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppFuzzy_equal_to.htm">CppFuzzy_equal_to</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppIpAddress.htm">CppIpAddress</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultipleChoiceQuestion.htm">CppMultipleChoiceQuestion</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultipleChoiceQuestionDialog.htm">CppMultipleChoiceQuestionDialog</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenQuestion.htm">CppOpenQuestion</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenQuestionDialog.htm">CppOpenQuestionDialog</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQuestion.htm">CppQuestion</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuestionDialog.htm">CppQtQuestionDialog</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppRectangle.htm">CppRectangle</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppShape.htm">CppShape</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppShapeWidget.htm">CppShapeWidget</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStopwatch.htm">CppStopwatch</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWidget.htm">CppWidget</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAboutDialog.htm">CppWtAboutDialog</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAutoConfig.htm">CppWtAutoConfig</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtBroadcastServer.htm">CppWtBroadcastServer</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtGroupWidget.htm">CppWtGroupWidget</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtMultipleChoiceQuestionDialog.htm">CppWtMultipleChoiceQuestionDialog</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtQuestionDialog.htm">CppWtQuestionDialog</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtSelectFileDialog.htm">CppWtSelectFileDialog</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtShapeWidget.htm">CppWtShapeWidget</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.4.3<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">about</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppIpAddress.htm">CppIpAddress</a>/<a href="CppIpaddress.htm">ipaddress</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultipleChoiceQuestion.htm">CppMultipleChoiceQuestion</a>/<a href="CppMultipleChoiceQuestion.htm">multiplechoicequestion</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultipleChoiceQuestionDialog.htm">CppMultipleChoiceQuestionDialog</a>/<a href="CppMultipleChoiceQuestionDialog.htm">multiplechoicequestiondialog</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQuestion.htm">CppQuestion</a>/<a href="CppQuestion.htm">question</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuestionDialog.htm">CppQtQuestionDialog</a>/<a href="CppQuestionDialog.htm">questiondialog</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppRectangle.htm">CppRectangle</a>/<a href="CppRectangle.htm">rectangle</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppShape.htm">CppShape</a>/<a href="CppShape.htm">shape</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppShapeWidget.htm">CppShapeWidget</a>/<a href="CppShapeWidget.htm">shapewidget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWidget.htm">CppWidget</a>/<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAboutDialog.htm">CppWtAboutDialog</a>/<a href="CppWtAboutDialog.htm">wtaboutdialog</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAutoConfig.htm">CppWtAutoConfig</a>/<a href="CppWtAutoConfig.htm">wtautoconfig</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtBroadcastServer.htm">CppWtBroadcastServer</a>/<a href="CppWtBroadcastServer.htm">wtbroadcastserver</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtBroadcastServer.htm">CppWtBroadcastServer</a>/<a href="CppWtBroadcastServerClient.htm">wtbroadcastserverclient</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtGroupWidget.htm">CppWtGroupWidget</a>/<a href="CppWtGroupWidget.htm">wtgroupwidget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtMultipleChoiceQuestionDialog.htm">CppWtMultipleChoiceQuestionDialog</a>/<a href="CppWtMultipleChoiceQuestionDialog.htm">wtmultiplechoicequestiondialog</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtQuestionDialog.htm">CppWtQuestionDialog</a>/<a href="CppWtQuestionDialog.htm">wtquestiondialog</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtSelectFileDialog.htm">CppWtSelectFileDialog</a>/<a href="CppWtSelectFileDialog.htm">wtselectfiledialog</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtShapeWidget.htm">CppWtShapeWidget</a>/<a href="CppWtShapeWidget.htm">wtshapewidget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.4.3/fparser.cc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;administrator.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;administratordialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;administratordialogstate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;administratordialogstateloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;administratordialogstatenotloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;chatmessage.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;chat<a href="CppShape.htm">shape</a>factory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;chooseactionoption.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;debugdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;experimentstate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;group.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;groupassigner.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;groupfinished.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grouploggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;groupnotloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;groupparticipating.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;groups.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;logfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMain.htm">main</a>_test_concurrency.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersassignpayoff.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameterschat.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameterschooseaction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersfinished.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersgroupassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersgroupreassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersquiz.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersviewresultsgroup.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersviewresultsvoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersvoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participant.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstateassignpayoff.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstatechat.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstatechooseaction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstatefinished.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstategroupassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstategroupreassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstateloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstatenotloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstatequiz.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstateviewresultsgroup.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstateviewresultsvoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstatevoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstateassignpayoff.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstatechat.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstatechooseaction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstatefinished.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstategroupassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstategroupreassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstateloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstatenotloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstatequiz.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstateviewresultsall.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstateviewresultsgroup.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstateviewresultsvoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstatevoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;projectgtstmenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repeatassigner.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repeatassignerfixed.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repeatassignerrandomgeometric.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repeatassignerrandomuniform.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;resources.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;server.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstateassignpayoff.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstatechat.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstatechooseaction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstatefinished.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstategroupassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstategroupreassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstatequiz.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstateviewresultsgroup.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstateviewresultsvoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstatevoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstatewaiting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;testparameterparsing.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;testparameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;testparticipant.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;teststate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vote.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;votingoption.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMain.htm">main</a>timer.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">about</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppFuzzy_equal_to.htm">CppFuzzy_equal_to</a>/<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppIpAddress.htm">CppIpAddress</a>/<a href="CppIpaddress.htm">ipaddress</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultipleChoiceQuestion.htm">CppMultipleChoiceQuestion</a>/<a href="CppMultipleChoiceQuestion.htm">multiplechoicequestion</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultipleChoiceQuestionDialog.htm">CppMultipleChoiceQuestionDialog</a>/<a href="CppMultipleChoiceQuestionDialog.htm">multiplechoicequestiondialog</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQuestion.htm">CppQuestion</a>/<a href="CppQuestion.htm">question</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuestionDialog.htm">CppQtQuestionDialog</a>/<a href="CppQuestionDialog.htm">questiondialog</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppRectangle.htm">CppRectangle</a>/<a href="CppRectangle.htm">rectangle</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppShape.htm">CppShape</a>/<a href="CppShape.htm">shape</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppShapeWidget.htm">CppShapeWidget</a>/<a href="CppShapeWidget.htm">shapewidget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStopwatch.htm">CppStopwatch</a>/<a href="CppStopwatch.htm">stopwatch</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a>/<a href="CppTrace.htm">trace</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWidget.htm">CppWidget</a>/<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAboutDialog.htm">CppWtAboutDialog</a>/<a href="CppWtAboutDialog.htm">wtaboutdialog</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAutoConfig.htm">CppWtAutoConfig</a>/<a href="CppWtAutoConfig.htm">wtautoconfig</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtBroadcastServer.htm">CppWtBroadcastServer</a>/<a href="CppWtBroadcastServer.htm">wtbroadcastserver</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtBroadcastServer.htm">CppWtBroadcastServer</a>/<a href="CppWtBroadcastServerClient.htm">wtbroadcastserverclient</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtGroupWidget.htm">CppWtGroupWidget</a>/<a href="CppWtGroupWidget.htm">wtgroupwidget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtMultipleChoiceQuestionDialog.htm">CppWtMultipleChoiceQuestionDialog</a>/<a href="CppWtMultipleChoiceQuestionDialog.htm">wtmultiplechoicequestiondialog</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtQuestionDialog.htm">CppWtQuestionDialog</a>/<a href="CppWtQuestionDialog.htm">wtquestiondialog</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtSelectFileDialog.htm">CppWtSelectFileDialog</a>/<a href="CppWtSelectFileDialog.htm">wtselectfiledialog</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtShapeWidget.htm">CppWtShapeWidget</a>/<a href="CppWtShapeWidget.htm">wtshapewidget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.4.3/fparser.hh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;administrator.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;administratordialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;administratordialogstate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;administratordialogstateloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;administratordialogstatenotloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;chatmessage.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;chat<a href="CppShape.htm">shape</a>factory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;chooseactionoption.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;debugdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;forward_declarations.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;group.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;groupassigner.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;groupfinished.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grouploggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;groupnotloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;groupparticipating.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;groups.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;logfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersassignpayoff.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameterschat.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameterschooseaction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersfinished.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersgroupassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersgroupreassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersquiz.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersviewresultsall.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersviewresultsgroup.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersviewresultsvoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parametersvoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participant.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstateassignpayoff.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstatechat.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstatechooseaction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstatefinished.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstategroupassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstategroupreassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstateloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstatenotloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstatequiz.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstateviewresultsall.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstateviewresultsgroup.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstateviewresultsvoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantdialogstatevoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstateassignpayoff.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstatechat.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstatechooseaction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstatefinished.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstategroupassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstategroupreassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstateloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstatenotloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstatequiz.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstateviewresultsall.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstateviewresultsgroup.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstateviewresultsvoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;participantstatevoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;projectgtstmenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repeatassigner.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repeatassignerfixed.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repeatassignerrandomgeometric.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repeatassignerrandomuniform.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;resources.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;server.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstateassignpayoff.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstatechat.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstatechooseaction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstatefinished.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstategroupassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstategroupreassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstatequiz.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstateviewresultsall.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstateviewresultsgroup.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstateviewresultsvoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstatevoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;serverstatewaiting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;test.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vote.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;votingoption.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMain.htm">main</a>timer.h<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="ProjectGtst.htm">ProjectGtst</a>.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ProjectGtst/ProjectGtstWebsite.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/ProjectGtstWebsite.pro" border = "1"><tr><td><code>
include(../../WebApplication.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBigInt.htm">BigInteger</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/BoostAll.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Fparser.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Wt.pri)<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralWeb.pri)<br/>
<br/>
#Detect dead code<br/>
#<a href="CppQmakeLibs.htm">LIBS</a> += -lgcov<br/>
#<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += --coverage<br/>
<br/>
#Use of <a href="CppGprof.htm">gprof</a><br/>
#<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a>_DEBUG += -pg<br/>
#QMAKE_LFLAGS_DEBUG += -pg<br/>
<br/>
#Console<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppCanvas.htm">CppCanvas</a>/<a href="CppCanvas.htm">CppCanvas</a>.pri)<br/>
#include(../../<a href="CppCopy_if.htm">CppCopy_if</a>/<a href="CppCopy_if.htm">CppCopy_if</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppCounter.htm">CppCounter</a>/<a href="CppCounter.htm">CppCounter</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppDotMatrix.htm">CppDotMatrix</a>/<a href="CppDotMatrix.htm">CppDotMatrix</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppFuzzy_equal_to.htm">CppFuzzy_equal_to</a>/<a href="CppFuzzy_equal_to.htm">CppFuzzy_equal_to</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/CppGeometry/CppGeometry.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/CppImageCanvas/CppImageCanvas.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppIpAddress.htm">CppIpAddress</a>/<a href="CppIpAddress.htm">CppIpAddress</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppLed.htm">CppLed</a>/<a href="CppLed.htm">CppLed</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppLedWidget.htm">CppLedWidget</a>/<a href="CppLedWidget.htm">CppLedWidget</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppMultipleChoiceQuestion.htm">CppMultipleChoiceQuestion</a>/<a href="CppMultipleChoiceQuestion.htm">CppMultipleChoiceQuestion</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppMultipleChoiceQuestionDialog.htm">CppMultipleChoiceQuestionDialog</a>/<a href="CppMultipleChoiceQuestionDialog.htm">CppMultipleChoiceQuestionDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenQuestion.htm">CppOpenQuestion</a>/<a href="CppOpenQuestion.htm">CppOpenQuestion</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenQuestionDialog.htm">CppOpenQuestionDialog</a>/<a href="CppOpenQuestionDialog.htm">CppOpenQuestionDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/CppPlane/CppPlane.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppQuestion.htm">CppQuestion</a>/<a href="CppQuestion.htm">CppQuestion</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuestionDialog.htm">CppQtQuestionDialog</a>/<a href="CppQtQuestionDialog.htm">CppQtQuestionDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppRainbow.htm">CppRainbow</a>/<a href="CppRainbow.htm">CppRainbow</a>.pri)<br/>
#include(../../<a href="CppClass.htm">Classes</a>/CppSafeIpAddress/CppSafeIpAddress.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppShape.htm">CppShape</a>/<a href="CppShape.htm">CppShape</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppShapeWidget.htm">CppShapeWidget</a>/<a href="CppShapeWidget.htm">CppShapeWidget</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppStopwatch.htm">CppStopwatch</a>/<a href="CppStopwatch.htm">CppStopwatch</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/CppTextCanvas/CppTextCanvas.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppWidget.htm">CppWidget</a>/<a href="CppWidget.htm">CppWidget</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppXml.htm">CppXml</a>/<a href="CppXml.htm">CppXml</a>.pri)<br/>
<br/>
#Web<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppWtGroupWidget.htm">CppWtGroupWidget</a>/<a href="CppWtGroupWidget.htm">CppWtGroupWidget</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppWtLedWidget.htm">CppWtLedWidget</a>/<a href="CppWtLedWidget.htm">CppWtLedWidget</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppWtMultipleChoiceQuestionDialog.htm">CppWtMultipleChoiceQuestionDialog</a>/<a href="CppWtMultipleChoiceQuestionDialog.htm">CppWtMultipleChoiceQuestionDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppWtQuestionDialog.htm">CppWtQuestionDialog</a>/<a href="CppWtQuestionDialog.htm">CppWtQuestionDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppWtSelectFileDialog.htm">CppWtSelectFileDialog</a>/<a href="CppWtSelectFileDialog.htm">CppWtSelectFileDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppWtServerPusher.htm">CppWtServerPusher</a>/<a href="CppWtServerPusher.htm">CppWtServerPusher</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppWtShapeGroupWidget.htm">CppWtShapeGroupWidget</a>/<a href="CppWtShapeGroupWidget.htm">CppWtShapeGroupWidget</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppWtShapeWidget.htm">CppWtShapeWidget</a>/<a href="CppWtShapeWidget.htm">CppWtShapeWidget</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppWtTimedServerPusher.htm">CppWtTimedServerPusher</a>/<a href="CppWtTimedServerPusher.htm">CppWtTimedServerPusher</a>.pri)<br/>
<br/>
include(<a href="ProjectGtst.htm">ProjectGtst</a>Website.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += wt<a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/ProjectGtstConsole.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/ProjectGtstConsole.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += ../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstadministrator.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstadministratordialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstadministratordialogstate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstadministratordialogstateloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstadministratordialogstatenotloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstadministrators.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstchatmessage.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstchat<a href="CppShape.htm">shape</a>factory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstchooseactionoption.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstdebugdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgroup.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgroupassigner.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgroupfinished.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgrouploggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgroupnotloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgroupparticipating.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgroups.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstlogfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersassignpayoff.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparameterschat.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparameterschooseaction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersfinished.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersgroupassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersgroupreassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersquiz.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersviewresultsgroup.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersviewresultsvoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersvoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipant.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstateassignpayoff.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstatechat.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstatechooseaction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstatefinished.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstategroupassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstategroupreassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstateloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstatenotloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstatequiz.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstates.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstateviewresultsgroup.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstateviewresultsvoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstatevoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstateassignpayoff.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstatechat.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstatechooseaction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstatefinished.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstategroupassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstategroupreassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstateloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstatenotloggedin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstatequiz.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstateviewresultsgroup.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstateviewresultsvoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstatevoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstpayoff.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstpayoffs.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstmenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstrepeatassigner.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstrepeatassignerfixed.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstrepeatassignerrandomgeometric.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstrepeatassignerrandomuniform.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstresources.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserver.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstateassignpayoff.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstatechat.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstatechooseaction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstatefinished.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstategroupassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstategroupreassign.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstatequiz.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstates.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstateviewresultsgroup.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstateviewresultsvoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstatevoting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstatewaiting.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtststate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtsttest.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtsttestparameterparsing.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtsttestparameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtsttestparticipant.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstteststate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstvote.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstvotingoption.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstadministrator.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstadministratordialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstadministratordialogstate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstadministratordialogstateloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstadministratordialogstatenotloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstadministrators.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstall_groups.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstall_parameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstall_participantdialogstates.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstall_participantstates.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstall_serverstates.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstchatmessage.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstchat<a href="CppShape.htm">shape</a>factory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstchooseactionoption.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstdebugdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstforward_declarations.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgroup.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgroupassigner.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgroupfinished.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgrouploggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgroupnotloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgroupparticipating.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstgroups.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstlogfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersassignpayoff.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparameterschat.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparameterschooseaction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersfinished.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersgroupassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersgroupreassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersquiz.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersviewresultsall.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersviewresultsgroup.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersviewresultsvoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparametersvoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipant.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstateassignpayoff.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstatechat.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstatechooseaction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstatefinished.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstategroupassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstategroupreassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstateloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstatenotloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstatequiz.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstates.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstateviewresultsgroup.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstateviewresultsvoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantdialogstatevoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstateassignpayoff.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstatechat.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstatechooseaction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstatefinished.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstategroupassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstategroupreassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstateloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstatenotloggedin.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstatequiz.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstateviewresultsgroup.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstateviewresultsvoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstparticipantstatevoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstpayoff.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstpayoffs.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstmenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstrepeatassigner.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstrepeatassignerfixed.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstrepeatassignerrandomgeometric.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstrepeatassignerrandomuniform.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstresources.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserver.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstateassignpayoff.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstatechat.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstatechooseaction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstatefinished.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstategroupassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstategroupreassign.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstatequiz.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstates.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstateviewresultsgroup.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstateviewresultsvoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstatevoting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstserverstatewaiting.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtststate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtsttest.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstvote.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/gtstvotingoption.h<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/<a href="ProjectGtst.htm">ProjectGtst</a>.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/ProjectGtstWebsite.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/ProjectGtstWebsite.pri" border = "1"><tr><td><code>
include(../../<a href="Projects.htm">Projects</a>/<a href="ProjectGtst.htm">ProjectGtst</a>/<a href="ProjectGtst.htm">ProjectGtst</a>Console.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> +=<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> +=<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstadministrator.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstadministrator.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATOR_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATOR_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Administrator is a user with all (administrator) rights.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Administrator is an administrator. There are <a href="CppAny.htm">any</a> number of Administrator<br/>
<a href="CppComment.htm">///</a><a href="CppInstance.htm">instances</a> possible during a single session.<br/>
<b><a href="CppStruct.htm">struct</a></b> Administrator<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Each Administrator has a unique ID<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Administrator(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id);<br/>
&nbsp;&nbsp;Administrator(<b><a href="CppConst.htm">const</a></b> Administrator&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Administrator&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Administrator&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Administrator his/her ID<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetId() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Administrator() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Administrator*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Every administrator has a unique ID.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This ID is uncorrelated with Participant::m_id<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_id;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Administrator&amp; administrator);<br/>
<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATOR_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstadministrator.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstadministrator.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administrator.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Administrator::Administrator(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id)<br/>
&nbsp;&nbsp;: m_id(id)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_id &gt; 0);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Administrator::GetId() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_id &gt; 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_id;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Administrator&amp; administrator)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;administrator&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> administrator.GetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/administrator&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstadministratordialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstadministratordialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATORDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATORDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/weak_ptr.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWContainerWidget.htm">WContainerWidget</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusherClient.htm">wtserverpusherclient</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>WtAdministratorDialog contains the user <a href="CppInterface.htm">interface</a> of the administrator's dialog.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>The logic of it is in the Administrator <b><a href="CppClass.htm">class</a></b><br/>
<b><a href="CppStruct.htm">struct</a></b> AdministratorDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>, <a href="CppWtServerPusherClient.htm">WtServerPusherClient</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The GUI of an Administrator<br/>
&nbsp;&nbsp;AdministratorDialog(Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;AdministratorDialog(<b><a href="CppConst.htm">const</a></b> AdministratorDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;AdministratorDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> AdministratorDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> there is a logged-in Administrator<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGetAdministrator() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a logged-in Administrator<br/>
&nbsp;&nbsp;<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Administrator&gt; GetAdministrator() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set a logged-in Administrator<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetAdministrator(<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Administrator&gt; administrator);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the AdministratorDialog<a href="CppState.htm">State</a>LoggedIn<br/>
&nbsp;&nbsp;AdministratorDialog<a href="CppState.htm">State</a>LoggedIn * Get<a href="CppState.htm">State</a>LoggedIn() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn<br/>
&nbsp;&nbsp;AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn * Get<a href="CppState.htm">State</a>NotLoggedIn() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set <b><a href="CppThis.htm">this</a></b> AdministratorDialog its AdministratorDialog<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>(AdministratorDialog<a href="CppState.htm">State</a> * <b><a href="CppConst.htm">const</a></b> state);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~AdministratorDialog();<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(AdministratorDialog*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_administrator contains either nothing or one logged in Administrator<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Administrator&gt; &gt; m_administrator;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The current AdministratorDialog<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;AdministratorDialog<a href="CppState.htm">State</a> * m_state;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The AdministratorDialog<a href="CppState.htm">State</a>LoggedIn state<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;AdministratorDialog<a href="CppState.htm">State</a>LoggedIn&gt; m_state_logged_in;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn state<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn&gt; m_state_not_logged_in;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the start/heading/beginning of all AdministratorDialog <a href="CppInstance.htm">instances</a><br/>
&nbsp;&nbsp;AdministratorDialog * CreateDialogHeading();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/OnServerPush is called by <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_led(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWtLedWidget.htm">WtLedWidget</a> * m_led;<br/>
&nbsp;&nbsp;} ui;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATORDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstadministratordialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstadministratordialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialog.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWGroupBox.htm">WGroupBox</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialogstateloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialogstatenotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppLed.htm">led</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppLedWidget.htm">ledwidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtLedWidget.htm">wtledwidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtSelectFileDialog.htm">wtselectfiledialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog::AdministratorDialog(Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: m_administrator{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_logged_in(<b><a href="CppNew.htm">new</a></b> AdministratorDialog<a href="CppState.htm">State</a>LoggedIn(server,<b><a href="CppThis.htm">this</a></b>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_not_logged_in(<b><a href="CppNew.htm">new</a></b> AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn(server,<b><a href="CppThis.htm">this</a></b>))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;,ui{}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_state);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_logged_in);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_not_logged_in);<br/>
&nbsp;&nbsp;Set<a href="CppState.htm">State</a>(Get<a href="CppState.htm">State</a>NotLoggedIn());<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog::~AdministratorDialog()<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog::CanGetAdministrator() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_administrator.empty() <a href="CppOperatorLogicalOr.htm">||</a> m_administrator.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !m_administrator.empty();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog::CreateDialogHeading()<br/>
{<br/>
&nbsp;&nbsp;AdministratorDialog * <b><a href="CppConst.htm">const</a></b> dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_state-&gt;GetDialog();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;clear();<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;ui.m_led <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWtLedWidget.htm">WtLedWidget</a>(1.0);<br/>
&nbsp;&nbsp;ui.m_led-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;SetGeometry(0,0,24,24);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_led);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dialog;<br/>
}<br/>
<br/>
<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Administrator&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog::GetAdministrator() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanGetAdministrator());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_administrator.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_administrator[0];<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog::Get<a href="CppState.htm">State</a>LoggedIn() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_logged_in);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_logged_in.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog::Get<a href="CppState.htm">State</a>NotLoggedIn() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_not_logged_in);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_not_logged_in.get();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog::Set<a href="CppState.htm">State</a>(AdministratorDialog<a href="CppState.htm">State</a> * <b><a href="CppConst.htm">const</a></b> state)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state);<br/>
&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> state;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state);<br/>
&nbsp;&nbsp;m_state-&gt;ShowPage(CreateDialogHeading());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog::OnServerPush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>OnServer<a href="CppTime.htm">Time</a>r();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_state-&gt;On<a href="CppTime.htm">Time</a>r();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog::SetAdministrator(<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Administrator&gt; administrator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_administrator.empty());<br/>
&nbsp;&nbsp;m_administrator.push_back(administrator);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstadministratordialogstate.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstadministratordialogstate.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATORDIALOGSTATE_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATORDIALOGSTATE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWObject.htm">WObject</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The WtAdministratorDialog its state.<br/>
<b><a href="CppStruct.htm">struct</a></b> AdministratorDialog<a href="CppState.htm">State</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppWObject.htm">Wt::WObject</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/An AdministratorDialog<a href="CppState.htm">State</a> needs its AdministratorDialog<br/>
&nbsp;&nbsp;AdministratorDialog<a href="CppState.htm">State</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AdministratorDialog * <b><a href="CppConst.htm">const</a></b> dialog<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;AdministratorDialog<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> AdministratorDialog<a href="CppState.htm">State</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;AdministratorDialog<a href="CppState.htm">State</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> AdministratorDialog<a href="CppState.htm">State</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppIf.htm">if</a></b> the Administrator is logged in<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsLoggedIn() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to a <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show the web page<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> ShowPage(AdministratorDialog * <b><a href="CppConst.htm">const</a></b> base_dialog) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the AdministratorDialog<a href="CppState.htm">State</a> its AdministratorDialog<br/>
&nbsp;&nbsp;AdministratorDialog * GetDialog() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_dialog; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~AdministratorDialog<a href="CppState.htm">State</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(AdministratorDialog<a href="CppState.htm">State</a>*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The dialog <b><a href="CppThis.htm">this</a></b> state works on<br/>
&nbsp;&nbsp;AdministratorDialog * <b><a href="CppConst.htm">const</a></b> m_dialog;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Server <a href="CppInstance.htm">instance</a><br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> m_server;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get all .txt files in a folder<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppGetTextFilesInFolder.htm">GetTextFilesInFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATORDIALOGSTATE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstadministratordialogstate.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstadministratordialogstate.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppRegex.htm">regex</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administrator.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstatechooseaction.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstatefinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstateviewresultsgroup.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstatewaiting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h" <a href="CppComment.htm">//</a>In the pre<a href="CppCompile.htm">compile</a>d header<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialogstate.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>::AdministratorDialog<a href="CppState.htm">State</a>(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;AdministratorDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
&nbsp;&nbsp;: m_dialog(dialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_server(server)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server);<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetTextFilesInFolder.htm">GetTextFilesInFolder</a>.htm<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>::<a href="CppGetTextFilesInFolder.htm">GetTextFilesInFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get all filenames<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(folder);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the <a href="CppRegex.htm">regex</a> <b><a href="CppFor.htm">for</a></b> a text file<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostRegex.htm">boost::regex</a> txt_file_<a href="CppRegex.htm">regex</a>(".*\\.txt\\z");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the resulting <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy all filenames matching the <a href="CppRegex.htm">regex</a> in the resulting <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppStdCopy_if.htm">std::copy_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[txt_file_<a href="CppRegex.htm">regex</a>](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostRegex_match.htm">boost::regex_match</a>(s,txt_file_<a href="CppRegex.htm">regex</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>::IsLoggedIn() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume the parent can be read");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetDialog()-&gt;CanGetAdministrator();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstadministratordialogstateloggedin.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstadministratordialogstateloggedin.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATORDIALOGSTATELOGGEDIN_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATORDIALOGSTATELOGGEDIN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialogstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The WtAdministratorDialog its state <b><a href="CppFor.htm">for</a></b> a logged in Administrator<br/>
<b><a href="CppStruct.htm">struct</a></b> AdministratorDialog<a href="CppState.htm">State</a>LoggedIn : <b><a href="CppPublic.htm">public</a></b> AdministratorDialog<a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This AdministratorDialog<a href="CppState.htm">State</a> its AdministratorDialog<br/>
&nbsp;&nbsp;AdministratorDialog<a href="CppState.htm">State</a>LoggedIn(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AdministratorDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> AdministratorDialog<a href="CppState.htm">State</a> its page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(AdministratorDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~AdministratorDialog<a href="CppState.htm">State</a>LoggedIn() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(AdministratorDialog<a href="CppState.htm">State</a>LoggedIn* x);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Safe<a href="CppCompile.htm">Compile</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Safe<a href="CppCompile.htm">Compile</a>(<a href="CppWtSelectFileDialog.htm">WtSelectFileDialog</a> * <b><a href="CppConst.htm">const</a></b> p) : m_select_file_dialog(p) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppWtSelectFileDialog.htm">WtSelectFileDialog</a>&gt; m_select_file_dialog;<br/>
&nbsp;&nbsp;} m_safe_<a href="CppCompile.htm">compile</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_button_group_set_phase(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_group_<a href="CppWidget.htm">widget</a>(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_fileupload(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_label_state_server(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_label_state_upload(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_server_anchor(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_server_select_file_dialog{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_text_groups(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_text_parameter_file(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_text_participants(0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWButtonGroup.htm">Wt::WButtonGroup</a> * m_button_group_set_phase;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWtShapeGroupWidget.htm">WtShapeGroupWidget</a> * m_group_<a href="CppWidget.htm">widget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWFileUpload.htm">Wt::WFileUpload</a> * m_fileupload;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_state_server;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_state_upload;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWAnchor.htm">Wt::WAnchor</a> * m_server_anchor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWtSelectFileDialog.htm">WtSelectFileDialog</a> * m_server_select_file_dialog;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWTextArea.htm">Wt::WTextArea</a> * m_text_groups;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWTextArea.htm">Wt::WTextArea</a> * m_text_parameter_file;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWTextArea.htm">Wt::WTextArea</a> * m_text_participants;<br/>
&nbsp;&nbsp;} m_ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * CreateStartExperimentDialog();<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * CreateViewGroupsDialog();<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * CreateViewParametersDialog();<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * CreateViewParticipantsDialog();<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * CreateViewServerDialog();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShape.htm">Shape</a>*&gt; &gt; Extract<a href="CppShape.htm">Shape</a>s() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppVoid.htm">void</a></b> OnDeleteParticipants();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to a change in Groups<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnGroupsChanged();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Stops the server<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnStopServer();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to the parameter file upload<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnUploadDone();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/View a log file<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnViewLogFile();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns the extension of a filename<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assumes that the filename has an extension<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppGetExtension.htm">GetExtension</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetExtension.htm">GetExtension</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ADMINISTRATORDIALOGSTATELOGGEDIN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstadministratordialogstateloggedin.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstadministratordialogstateloggedin.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdioH.htm">cstdio</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wcomment"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/filesystem.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WAnchor&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWApplication.htm">WApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWButtonGroup.htm">WButtonGroup</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WCheckBox&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWFileResource.htm">WFileResource</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWFileUpload.htm">WFileUpload</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWGroupBox.htm">WGroupBox</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWImage.htm">WImage</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLineEdit.htm">WLineEdit</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWMenu.htm">WMenu</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPushButton.htm">WPushButton</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWRadioButton.htm">WRadioButton</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWStackedWidget.htm">WStackedWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTextArea.htm">WTextArea</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administrator.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialogstateloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialogstateloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>resources.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShape.htm">shape</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShapeWidget.htm">shapewidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtSelectFileDialog.htm">wtselectfiledialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtShapeGroupWidget.htm">wtshapegroupwidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtShapeWidget.htm">wtshapewidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "xml.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;AdministratorDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
&nbsp;&nbsp;: AdministratorDialog<a href="CppState.htm">State</a>(server,dialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_safe_<a href="CppCompile.htm">compile</a>{<b><a href="CppNullptr.htm">nullptr</a></b>},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui{}<br/>
<br/>
{<br/>
&nbsp;&nbsp;m_safe_<a href="CppCompile.htm">compile</a>.m_select_file_dialog.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppWtSelectFileDialog.htm">WtSelectFileDialog</a>);<br/>
}<br/>
<br/>
<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::CreateStartExperimentDialog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <b><a href="CppConst.htm">const</a></b> dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;m_ui.m_fileupload <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWFileUpload.htm">Wt::WFileUpload</a>;<br/>
&nbsp;&nbsp;m_ui.m_label_state_upload <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_fileupload);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_label_state_upload);<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_label_state_upload);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_fileupload);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;m_ui.m_label_state_upload-&gt;setText("Please select a file to upload or press the button");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Upload automatically when the user entered a file<br/>
&nbsp;&nbsp;m_ui.m_fileupload-&gt;changed().connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_fileupload,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppWFileUpload.htm">Wt::WFileUpload</a>::upload);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Call WtTextUploadDialog::on_upload_done when file is uploaded<br/>
&nbsp;&nbsp;m_ui.m_fileupload-&gt;uploaded().connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::OnUploadDone);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dialog;<br/>
}<br/>
<br/>
<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::CreateViewGroupsDialog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <b><a href="CppConst.htm">const</a></b> dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;m_ui.m_text_groups <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWTextArea.htm">Wt::WTextArea</a>;<br/>
&nbsp;&nbsp;m_ui.m_group_<a href="CppWidget.htm">widget</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWtShapeGroupWidget.htm">WtShapeGroupWidget</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_text_groups);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_group_<a href="CppWidget.htm">widget</a>);<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_group_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_text_groups);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>("Groups.png",dialog);<br/>
&nbsp;&nbsp;m_ui.m_text_groups-&gt;setReadOnly(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;m_ui.m_text_groups-&gt;setMinimumSize(600,200);<br/>
&nbsp;&nbsp;m_ui.m_group_<a href="CppWidget.htm">widget</a>-&gt;resize(400,400);<br/>
<br/>
&nbsp;&nbsp;m_server-&gt;GetGroups()-&gt;m_signal_groups_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::OnGroupsChanged,<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;m_ui.m_group_<a href="CppWidget.htm">widget</a>-&gt;Set<a href="CppShape.htm">Shape</a>s(Extract<a href="CppShape.htm">Shape</a>s());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dialog;<br/>
}<br/>
<br/>
<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::CreateViewParametersDialog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <b><a href="CppConst.htm">const</a></b> dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;m_ui.m_text_parameter_file <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWTextArea.htm">Wt::WTextArea</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_text_parameter_file);<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;m_ui.m_text_parameter_file-&gt;setReadOnly(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;m_ui.m_text_parameter_file-&gt;setMinimumSize(600,300);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_text_parameter_file);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dialog;<br/>
}<br/>
<br/>
<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::CreateViewParticipantsDialog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <b><a href="CppConst.htm">const</a></b> dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;m_ui.m_text_participants <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWTextArea.htm">Wt::WTextArea</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_text_participants);<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_text_participants);<br/>
&nbsp;&nbsp;m_ui.m_text_participants-&gt;setReadOnly(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;m_ui.m_text_participants-&gt;setMinimumSize(600,300);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dialog;<br/>
}<br/>
<br/>
<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::CreateViewServerDialog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <b><a href="CppConst.htm">const</a></b> dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;m_ui.m_server_anchor <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWAnchor.htm">Wt::WAnchor</a>;<br/>
&nbsp;&nbsp;m_ui.m_label_state_server <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>;<br/>
&nbsp;&nbsp;m_ui.m_server_select_file_dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWtSelectFileDialog.htm">WtSelectFileDialog</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_label_state_server);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_server_select_file_dialog);<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_label_state_server);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_server_select_file_dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_server_anchor);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWPushButton.htm">Wt::WPushButton</a> * <b><a href="CppConst.htm">const</a></b> button <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWPushButton.htm">Wt::WPushButton</a>("Stop and update server");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(button);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;button-&gt;clicked().connect(<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::OnStopServer);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_ui.m_label_state_server-&gt;setText("Server state: ... (updated automatically)");<br/>
&nbsp;&nbsp;m_ui.m_server_select_file_dialog-&gt;setMinimumSize(600,300);<br/>
&nbsp;&nbsp;m_ui.m_server_select_file_dialog-&gt;SetFilter(".*(\\.xml|\\.txt|\\.sh)");<br/>
&nbsp;&nbsp;m_ui.m_server_select_file_dialog-&gt;SetFilterReadOnly(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;m_ui.m_server_select_file_dialog-&gt;m_signal_selected.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::OnViewLogFile,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dialog;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppShape.htm">Shape</a>*&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::Extract<a href="CppShape.htm">Shape</a>s() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShape.htm">Shape</a>*&gt; &gt; v;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Instead of collecting the GroupUnassigned, just add an empty group to v<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShape.htm">Shape</a>*&gt;());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> groups <a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetGroups()-&gt;CollectGroups(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(groups.begin(),groups.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;v](<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShape.htm">Shape</a>*&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; p<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> group-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.begin(), p.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> i-&gt;GetChat<a href="CppShape.htm">Shape</a>()-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;Get<a href="CppShape.htm">Shape</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w.size() <a href="CppOperatorEqual.htm">==</a> p.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::<a href="CppGetExtension.htm">GetExtension</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppSize_t.htm">size_t</a></b> i <a href="CppOperatorAssign.htm">=</a> filename.rfind('.');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Filename must contain a dot");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> filename.size() <a href="CppOperatorMinus.htm">-</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Filename must not end with a dot");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename[i+1] <a href="CppOperatorNotEqual.htm">!=</a> '\\' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Filename must have an extension");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename[i+1] <a href="CppOperatorNotEqual.htm">!=</a> '/' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Filename must have an extension");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> filename.substr(i+1,filename.size());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::OnGroupsChanged()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;m_ui.m_group_<a href="CppWidget.htm">widget</a>-&gt;Set<a href="CppShape.htm">Shape</a>s(Extract<a href="CppShape.htm">Shape</a>s());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display textual info<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>First display the Group its Participants<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> groups <a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetGroups()-&gt;CollectGroups();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(groups.begin(),groups.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;text](<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppStdString.htm">std::string</a>("Group #")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(group-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" (")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> group-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("):\n<a href="CppOperatorMinus.htm">-</a> Participants: ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> participants <a href="CppOperatorAssign.htm">=</a> group-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(participants.begin(),participants.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;text](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a> (participant-&gt;CanGetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppStdString.htm">std::string</a>("no ID"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(", ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (group-&gt;CollectParticipants().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<a href="CppOperatorPlusAssign.htm">+=</a> "no participants";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(text.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Pop trailing ', '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text.resize(text.size() <a href="CppOperatorMinus.htm">-</a>2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<a href="CppOperatorPlusAssign.htm">+=</a>"\n<a href="CppOperatorMinus.htm">-</a> Payoffs: ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!group-&gt;GetAveragePayoffs().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppStdString.htm">std::string</a>(" (")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group-&gt;GetAveragePayoffs().size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("): ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> payoffs <a href="CppOperatorAssign.htm">=</a> group-&gt;GetAveragePayoffs();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(payoffs.begin(),payoffs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;text](<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; payoff)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a> <a href="CppStdTo_string.htm">std::to_string</a>(payoff)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(", ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text.resize(text.size() <a href="CppOperatorMinus.htm">-</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<a href="CppOperatorPlusAssign.htm">+=</a> "no payoffs as<b><a href="CppSigned.htm">signed</a></b>";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<a href="CppOperatorPlusAssign.htm">+=</a>"\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!text.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_text_groups-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Stops the server<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::OnStopServer()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppWApplication.htm">Wt::WApplication</a>::<a href="CppInstance.htm">instance</a>()-&gt;quit();<br/>
&nbsp;&nbsp;<a href="CppStdExit.htm">std::exit</a>(0);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Show all automatically<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp; <br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>server-&gt;Save("server.xml");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update server state<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("Current server state: \'")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("\' (updated automatically)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_label_state_server);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_label_state_server-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display Parameters<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*m_server-&gt;GetParameters());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> xml::<a href="CppXmlToPretty.htm">XmlToPretty</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;text](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorPlusAssign.htm">+=</a> t <a href="CppOperatorPlus.htm">+</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!text.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;text.resize(text.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_text_parameter_file-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display Participants<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "Number of participants: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_server-&gt;GetGroups()-&gt;CollectParticipants().size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> participants <a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetGroups()-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(participants.begin(),participants.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;text](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<a href="CppOperatorPlusAssign.htm">+=</a>participant-&gt;ToAdminStr()+'\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (text.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorAssign.htm">=</a> "[No participants]";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Pop trailing newline<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text.resize(text.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp; m_ui.m_text_participants-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::ShowPage(AdministratorDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsLoggedIn() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume a logged in administrator");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Welcome administrator",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Menu<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWStackedWidget.htm">Wt::WStackedWidget</a> * <b><a href="CppConst.htm">const</a></b> contents <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWStackedWidget.htm">Wt::WStackedWidget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenu.htm">Wt::WMenu</a> * <b><a href="CppConst.htm">const</a></b> menu <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenu.htm">Wt::WMenu</a>(contents,<a href="CppWt.htm">Wt</a>::Horizontal,dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Using CSS style<b><a href="CppClass.htm">class</a></b> is the best (only?) way to display the menu well<br/>
&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;setStyleClass("menu");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Start",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateStartExperimentDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Groups",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateViewGroupsDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Parameters",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateViewParametersDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Participants",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateViewParticipantsDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Server",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateViewServerDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(contents);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::OnUploadDone()<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(m_ui.m_fileupload-&gt;spoolFileName()));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display parameter file<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppFileToVector.htm">FileToVector</a>(m_ui.m_fileupload-&gt;spoolFileName());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),[&amp;text](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) { text<a href="CppOperatorPlusAssign.htm">+=</a>(s+'\n'); } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Pop trailing newline<br/>
&nbsp;&nbsp;&nbsp;&nbsp;text.resize(text.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_text_parameter_file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_text_parameter_file-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters(<b><a href="CppNew.htm">new</a></b> Parameters(m_server));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(m_ui.m_fileupload-&gt;spoolFileName()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;ReadFromFile(m_ui.m_fileupload-&gt;spoolFileName());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdRuntime_error.htm">std::runtime_error</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_label_state_upload-&gt;setText(e.what());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_ui.m_label_state_upload-&gt;setText("OK: parameter file loaded");<br/>
&nbsp;&nbsp;m_server-&gt;SetParameters(parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppWtServerPusher.htm">WtServerPusher</a>::GetInstance()-&gt;Post();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>LoggedIn::OnViewLogFile()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> m_ui.m_server_select_file_dialog-&gt;GetSelectedFile();<br/>
<br/>
&nbsp;&nbsp;m_ui.m_server_anchor-&gt;setText((<a href="CppStdString.htm">std::string</a>("Download ") <a href="CppOperatorPlus.htm">+</a> m_ui.m_server_select_file_dialog-&gt;GetSelectedFile()).c_str() );<br/>
&nbsp;&nbsp;m_ui.m_server_anchor-&gt;setResource(<b><a href="CppNew.htm">new</a></b> <a href="CppWFileResource.htm">Wt::WFileResource</a>(m_ui.m_server_select_file_dialog-&gt;GetSelectedFile(),m_ui.m_server_select_file_dialog-&gt;GetSelectedFile()));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstadministratordialogstatenotloggedin.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstadministratordialogstatenotloggedin.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATORDIALOGSTATENOTLOGGEDIN_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATORDIALOGSTATENOTLOGGEDIN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialogstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The WtAdministratorDialog its state <b><a href="CppFor.htm">for</a></b> a not-(yet-)logged in Administrator<br/>
<b><a href="CppStruct.htm">struct</a></b> AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn : <b><a href="CppPublic.htm">public</a></b> AdministratorDialog<a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn is a AdministratorDialog<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AdministratorDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
&nbsp;&nbsp;AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn(<b><a href="CppConst.htm">const</a></b> AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> AdministratorDialog<a href="CppState.htm">State</a> its page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(AdministratorDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn* x);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/LineEdit <b><a href="CppFor.htm">for</a></b> password<br/>
&nbsp;&nbsp;<a href="CppWLineEdit.htm">Wt::WLineEdit</a> * m_edit_password;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Label <b><a href="CppFor.htm">for</a></b> password<br/>
&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_password;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to entering a password<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnPassword();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ADMINISTRATORDIALOGSTATENOTLOGGEDIN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstadministratordialogstatenotloggedin.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstadministratordialogstatenotloggedin.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLineEdit.htm">WLineEdit</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialogstateloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialogstatenotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtSelectFileDialog.htm">wtselectfiledialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn::AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;AdministratorDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
&nbsp;&nbsp;: AdministratorDialog<a href="CppState.htm">State</a>(server,dialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_edit_password(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_label_password(0)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn::OnPassword()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!GetDialog()-&gt;CanGetAdministrator() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume no administrator yet");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Theoretical Biology beats COCON<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>at a Pub Quiz 4 ever<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> password <a href="CppOperatorAssign.htm">=</a> "TBbCaaPQ4e";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_edit_password-&gt;text().toUTF8() <a href="CppOperatorEqual.htm">==</a> password)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the Administrator<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetDialog()-&gt;SetAdministrator(m_server-&gt;LoginAdministrator());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetAdministrator() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume one administrator");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetDialog()-&gt;Set<a href="CppState.htm">State</a>(GetDialog()-&gt;Get<a href="CppState.htm">State</a>LoggedIn());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWtServerPusher.htm">WtServerPusher</a>::GetInstance()-&gt;Post();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do exactly nothing...<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn::ShowPage(AdministratorDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;m_edit_password <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLineEdit.htm">Wt::WLineEdit</a>;<br/>
&nbsp;&nbsp;m_label_password <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Password");<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Welcome potential administrator",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_label_password);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_edit_password);<br/>
<br/>
&nbsp;&nbsp;m_edit_password-&gt;setMinimumSize(300,<a href="CppWLength.htm">Wt::WLength</a>::Auto);<br/>
&nbsp;&nbsp;m_edit_password-&gt;setEchoMode(<a href="CppWLineEdit.htm">Wt::WLineEdit</a>::Password);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;m_edit_password-&gt;setText("TBbCaaPQ4e");<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;m_edit_password-&gt;enterPressed().connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn::OnPassword);<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstadministrators.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstadministrators.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATORS_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ADMINISTRATORS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/weak_ptr.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Facade <b><a href="CppFor.htm">for</a></b> the multiple <a href="CppInstance.htm">instances</a> of Administrator<br/>
<b><a href="CppStruct.htm">struct</a></b> Administrators<br/>
{<br/>
&nbsp;&nbsp;Administrators();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <b><a href="CppNew.htm">new</a></b> Administrator<br/>
&nbsp;&nbsp;<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Administrator&gt; CreateNewAdministrator();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Administrators() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Administrators*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Administrator&gt; &gt; m_administrators;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppCounter.htm">Counter</a>&gt; m_last_id_administrator;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ADMINISTRATORS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstadministrators.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstadministrators.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administrator.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administrators.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppCounter.htm">counter</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Administrators::Administrators()<br/>
&nbsp;&nbsp;: m_administrators{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_last_id_administrator(<b><a href="CppNew.htm">new</a></b> <a href="CppCounter.htm">Counter</a>(1))<br/>
{<br/>
}<br/>
<br/>
<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Administrator&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Administrators::CreateNewAdministrator()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_administrators_old <a href="CppOperatorAssign.htm">=</a> m_administrators.size();<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_administrators.begin(),m_administrators.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Administrator&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume all Administrators are valid");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_id <a href="CppOperatorAssign.htm">=</a> m_last_id_administrator-&gt;Count();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(new_id &gt; 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_administrators.begin(),m_administrators.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[new_id](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Administrator&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetId() <a href="CppOperatorNotEqual.htm">!=</a> new_id <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume <b><a href="CppNew.htm">new</a></b> ID is really a unique ID");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Administrator&gt; new_administrator(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Administrator(new_id));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(new_administrator);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Keep one copy of the administrator<br/>
&nbsp;&nbsp;m_administrators.insert(new_administrator);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_administrators_new <a href="CppOperatorAssign.htm">=</a> m_administrators.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_administrators_new <a href="CppOperatorEqual.htm">==</a> n_administrators_old <a href="CppOperatorPlus.htm">+</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume the <b><a href="CppNew.htm">new</a></b> administrator has really been added to m_administrators");<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> new_administrator;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstall_groups.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstall_groups.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ALL_GROUPS_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ALL_GROUPS_H<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ALL_GROUPS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstall_parameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstall_parameters.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ALL_PARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ALL_PARAMETERS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersassignpayoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parameters<a href="CppChat.htm">chat</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parameterschooseaction.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersgroupassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersgroupreassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersquiz.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersviewresultsall.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersviewresultsgroup.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersviewresultsvoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersvoting.h"<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ALL_PARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstall_participantdialogstates.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstall_participantdialogstates.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ALL_PARTICIPANTDIALOGSTATES_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ALL_PARTICIPANTDIALOGSTATES_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstateassignpayoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate<a href="CppChat.htm">chat</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatechooseaction.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatefinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstategroupassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstategroupreassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstateloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatenotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatequiz.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstateviewresultsgroup.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstateviewresultsvoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatevoting.h"<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ALL_PARTICIPANTDIALOGSTATES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstall_participantstates.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstall_participantstates.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ALL_PARTICIPANTSTATES_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ALL_PARTICIPANTSTATES_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateassignpayoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate<a href="CppChat.htm">chat</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatechooseaction.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatefinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstategroupassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstategroupreassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatenotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatequiz.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateviewresultsgroup.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateviewresultsvoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatevoting.h"<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ALL_PARTICIPANTSTATES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstall_serverstates.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstall_serverstates.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ALL_SERVERSTATES_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>ALL_SERVERSTATES_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstateassignpayoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate<a href="CppChat.htm">chat</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstatechooseaction.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstatefinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstategroupassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstategroupreassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstatequiz.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstateviewresultsgroup.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstateviewresultsvoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstatevoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstatewaiting.h"<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ALL_SERVERSTATES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstchatmessage.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstchatmessage.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>CHATMESSAGE_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>CHATMESSAGE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ChatMessage<br/>
{<br/>
&nbsp;&nbsp;ChatMessage(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-only <a href="CppPointer.htm">pointer</a> to the sender<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; GetSender() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_sender; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppChat.htm">chat</a> message its text<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetText() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_text; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ChatMessage() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ChatMessage*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppShapeWidget.htm">ShapeWidget</a> of the sender<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; m_sender;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; m_sender;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppChat.htm">chat</a> message its text<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_text;<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppForwardDeclaration.htm">Forward declaration</a>s.<br/>
<a href="CppComment.htm">//</a><a href="CppHerbSutter.htm">Herb Sutter</a>. <a href="CppException.htm">Exception</a>al <a href="Cpp.htm">C++</a>. ISBN: 0-201-61562-2. Item 26: 'Never <a href="CppInclude.htm">#include</a> a header when a <a href="CppForwardDeclaration.htm">forward declaration</a> will suffice'<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ChatMessage&amp; p);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> CHATMESSAGE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstchatmessage.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstchatmessage.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a><a href="CppChat.htm">chat</a>message.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ChatMessage::ChatMessage(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; sender,<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> message)<br/>
&nbsp;&nbsp;: m_sender(sender), m_text(message)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_sender);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ChatMessage&amp; p)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;chat_message&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;text&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.GetText()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/text&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*(p.GetSender()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/chat_message&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstchatshapefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstchatshapefactory.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>CHATSHAPEFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>CHATSHAPEFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>/brief<br/>
<a href="CppComment.htm">///</a>Chat<a href="CppShape.htm">Shape</a>Factory creates <a href="CppWtShapeWidget.htm">WtShapeWidget</a>s used as <a href="CppChat.htm">chat</a> <a href="CppShape.htm">shape</a>s<br/>
<b><a href="CppStruct.htm">struct</a></b> Chat<a href="CppShape.htm">Shape</a>Factory<br/>
{<br/>
&nbsp;&nbsp;Chat<a href="CppShape.htm">Shape</a>Factory(<b><a href="CppConst.htm">const</a></b> Chat<a href="CppShape.htm">Shape</a>Factory&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Chat<a href="CppShape.htm">Shape</a>Factory&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Chat<a href="CppShape.htm">Shape</a>Factory&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppInstance.htm">instance</a> of the Chat<a href="CppShape.htm">Shape</a>Factory<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Chat<a href="CppShape.htm">Shape</a>Factory * Get();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the next <a href="CppShapeWidget.htm">ShapeWidget</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppShapeWidget.htm">ShapeWidget</a>&gt; GetNext<a href="CppWidget.htm">Widget</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let the Factory produce the first <a href="CppShape.htm">shape</a> again<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Reset();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A <a href="CppDesignPatternSingleton.htm">Singleton</a> has a <b><a href="CppPrivate.htm">private</a></b> <a href="CppConstructor.htm">constructor</a><br/>
&nbsp;&nbsp;Chat<a href="CppShape.htm">Shape</a>Factory();<br/>
&nbsp;&nbsp;~Chat<a href="CppShape.htm">Shape</a>Factory() {}<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Chat<a href="CppShape.htm">Shape</a>Factory*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppInstance.htm">instance</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Chat<a href="CppShape.htm">Shape</a>Factory&gt; <a href="CppInstance.htm">m_instance</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/All the <a href="CppShapeWidget.htm">ShapeWidget</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppShapeWidget.htm">ShapeWidget</a>&gt; &gt; m_<a href="CppWidget.htm">widget</a>s;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The index in m_<a href="CppWidget.htm">widget</a>s<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_i;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppShapeWidget.htm">ShapeWidget</a>&gt; &gt; Create<a href="CppWidget.htm">Widget</a>s(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> CHATSHAPEFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstchatshapefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstchatshapefactory.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a><a href="CppChat.htm">chat</a><a href="CppShape.htm">shape</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRainbow.htm">rainbow</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShape.htm">shape</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShapeWidget.htm">shapewidget</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Chat<a href="CppShape.htm">Shape</a>Factory&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Chat<a href="CppShape.htm">Shape</a>Factory::<a href="CppInstance.htm">m_instance</a>;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Chat<a href="CppShape.htm">Shape</a>Factory::Chat<a href="CppShape.htm">Shape</a>Factory()<br/>
&nbsp;&nbsp;: m_<a href="CppWidget.htm">widget</a>s(Create<a href="CppWidget.htm">Widget</a>s(56)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_i(0)<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain a nice series of <a href="CppShapeWidget.htm">ShapeWidget</a>s<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppShapeWidget.htm">ShapeWidget</a>&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Chat<a href="CppShape.htm">Shape</a>Factory::Create<a href="CppWidget.htm">Widget</a>s(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 24;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> 24;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; n_corners <a href="CppOperatorAssign.htm">=</a> {&nbsp;&nbsp; 0 <a href="CppComment.htm">/*</a>,&nbsp;&nbsp;3,&nbsp;&nbsp;4,&nbsp;&nbsp;5,&nbsp;&nbsp; 3,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4,&nbsp;&nbsp;6,&nbsp;&nbsp;7 <a href="CppComment.htm">*/</a> };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; angles <a href="CppOperatorAssign.htm">=</a> { 0.0 <a href="CppComment.htm">/*</a>,0.0,0.0,0.0,<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),0.25*<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),0.0,0.0 <a href="CppComment.htm">*/</a> };<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_corners.size() <a href="CppOperatorEqual.htm">==</a> angles.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_colors_per_<a href="CppShape.htm">shape</a> <a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorPlus.htm">+</a> (n <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(n_corners.size()));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppShape.htm">shape</a>_types <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(n_corners.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppShapeWidget.htm">ShapeWidget</a>&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> <a href="CppShape.htm">shape</a>_type <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppShape.htm">shape</a>_type<a href="CppOperatorNotEqual.htm">!=</a> n_<a href="CppShape.htm">shape</a>_types; <a href="CppOperatorIncrement.htm">++</a><a href="CppShape.htm">shape</a>_type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> color <a href="CppOperatorAssign.htm">=</a> 0; color<a href="CppOperatorNotEqual.htm">!=</a>n_colors_per_<a href="CppShape.htm">shape</a>; <a href="CppOperatorIncrement.htm">++</a>color)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> f_color <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(color) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_colors_per_<a href="CppShape.htm">shape</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> r,g,b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRainbow.htm">Rainbow</a>::GetRgb(f_color,r,g,b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppShapeWidget.htm">ShapeWidget</a>&gt; <a href="CppShape.htm">shape</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppShapeWidget.htm">ShapeWidget</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_corners[<a href="CppShape.htm">shape</a>_type],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angles[<a href="CppShape.htm">shape</a>_type],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,0,width,height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>&gt;(r * 255.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>&gt;(g * 255.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>&gt;(b * 255.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<a href="CppShape.htm">shape</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Chat<a href="CppShape.htm">Shape</a>Factory * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Chat<a href="CppShape.htm">Shape</a>Factory::Get()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppInstance.htm">m_instance</a>) <a href="CppInstance.htm">m_instance</a>.reset(<b><a href="CppNew.htm">new</a></b> Chat<a href="CppShape.htm">Shape</a>Factory);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppInstance.htm">m_instance</a>.get();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the next <a href="CppShapeWidget.htm">ShapeWidget</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppShapeWidget.htm">ShapeWidget</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Chat<a href="CppShape.htm">Shape</a>Factory::GetNext<a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_<a href="CppWidget.htm">widget</a>s.size()));<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppShapeWidget.htm">ShapeWidget</a>&gt; <a href="CppWidget.htm">widget</a> <a href="CppOperatorAssign.htm">=</a> m_<a href="CppWidget.htm">widget</a>s[m_i];<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_i;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_i <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_<a href="CppWidget.htm">widget</a>s.size()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppWidget.htm">widget</a>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Chat<a href="CppShape.htm">Shape</a>Factory::Reset()<br/>
{<br/>
&nbsp;&nbsp;m_i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstchooseactionoption.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstchooseactionoption.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>CHOOSEACTIONOPTION_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>CHOOSEACTIONOPTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>An option of an action that can be chosen <b><a href="CppFor.htm">for</a></b><br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>A ChooseActionOption has a description and <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> description denotes<br/>
<a href="CppComment.htm">///</a>a contribution or not<br/>
<b><a href="CppStruct.htm">struct</a></b> ChooseActionOption<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A ChooseActionOption has a description and a chance of getting caught<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/by a supervisor.<br/>
&nbsp;&nbsp;ChooseActionOption(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> contribution,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> cost,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; description,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; message);<br/>
&nbsp;&nbsp;ChooseActionOption(<b><a href="CppConst.htm">const</a></b> ChooseActionOption&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;ChooseActionOption&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> ChooseActionOption&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participant his/her contribution to the group by <b><a href="CppThis.htm">this</a></b> option<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetContribution() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the cost the individual <a href="CppMake.htm">make</a>s by <b><a href="CppThis.htm">this</a></b> action<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetCost() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the description of <b><a href="CppThis.htm">this</a></b> choose action option<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example: Do not contribute, Contribute<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetDescription() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the message given from <b><a href="CppThis.htm">this</a></b> choice<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Examples:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> You have chosen to contribute in <b><a href="CppThis.htm">this</a></b> round<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> You have chosen not to contribute in <b><a href="CppThis.htm">this</a></b> round<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetMessageChoice() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the Participant his/her contribution to the group by <b><a href="CppThis.htm">this</a></b> option<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetContribution(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> contribution);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the cost the individual <a href="CppMake.htm">make</a>s by <b><a href="CppThis.htm">this</a></b> action<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetCost(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> cost);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the description of <b><a href="CppThis.htm">this</a></b> choose action option<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDescription(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; description);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the message given from <b><a href="CppThis.htm">this</a></b> choice<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Examples:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> You have chosen to contribute in <b><a href="CppThis.htm">this</a></b> round<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> You have chosen not to contribute in <b><a href="CppThis.htm">this</a></b> round<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMessageChoice(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; message);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ChooseActionOption() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ChooseActionOption*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant his/her contribution to the group by <b><a href="CppThis.htm">this</a></b> option<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_contribution;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The individual cost the Participant <a href="CppMake.htm">make</a>s by <b><a href="CppThis.htm">this</a></b> option<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_cost;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The description of <b><a href="CppThis.htm">this</a></b> option<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example: Do not contribute, Contribute<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_description;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The message given from <b><a href="CppThis.htm">this</a></b> choice<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Examples:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> You have chosen to contribute in <b><a href="CppThis.htm">this</a></b> round<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> You have chosen not to contribute in <b><a href="CppThis.htm">this</a></b> round<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_message_choice;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ChooseActionOption&amp; v);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> CHOOSEACTIONOPTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstchooseactionoption.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstchooseactionoption.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>chooseactionoption.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ChooseActionOption::ChooseActionOption(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> contribution,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> cost,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; description,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; message)<br/>
&nbsp;&nbsp;: m_contribution{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cost{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_description{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_message_choice{}<br/>
{<br/>
&nbsp;&nbsp;SetContribution(contribution);<br/>
&nbsp;&nbsp;SetCost(cost);<br/>
&nbsp;&nbsp;SetDescription(description);<br/>
&nbsp;&nbsp;SetMessageChoice(message);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get the chance of getting caught by a supervisor when not contributing<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ChooseActionOption::GetContribution() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_contribution;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get the cost of <b><a href="CppThis.htm">this</a></b> supervisor/option<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ChooseActionOption::GetCost() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_cost;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ChooseActionOption::GetDescription() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_description;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ChooseActionOption::GetMessageChoice() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_message_choice;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ChooseActionOption::SetContribution(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> contribution)<br/>
{<br/>
&nbsp;&nbsp;m_contribution <a href="CppOperatorAssign.htm">=</a> contribution;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set the cost of <b><a href="CppThis.htm">this</a></b> supervisor/option<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ChooseActionOption::SetCost(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> cost)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cost <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Costs typically are positive values");<br/>
&nbsp;&nbsp;m_cost <a href="CppOperatorAssign.htm">=</a> cost;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ChooseActionOption::SetDescription(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; description)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!description.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A description must contain text");<br/>
&nbsp;&nbsp;m_description <a href="CppOperatorAssign.htm">=</a> description;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ChooseActionOption::SetMessageChoice(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; message_choice)<br/>
{<br/>
&nbsp;&nbsp;m_message_choice <a href="CppOperatorAssign.htm">=</a> message_choice;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ChooseActionOption&amp; v)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;contribution&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v.GetContribution()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/contribution&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;cost&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v.GetCost()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/cost&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;description&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v.GetDescription()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/description&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstdebugdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstdebugdialog.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>DEBUGDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>DEBUGDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWContainerWidget.htm">WContainerWidget</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtTimedServerPusherClient.htm">wttimedserverpusherclient</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a><a href="CppDebug.htm">Debug</a>Dialog simulates an experiment visually from loading<br/>
<a href="CppComment.htm">///</a>a parameter file<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDebug.htm">Debug</a>Dialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>, <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Construct</a> a <a href="CppDebug.htm">Debug</a>Dialog and use its <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;<a href="CppDebug.htm">Debug</a>Dialog(Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;<a href="CppDebug.htm">Debug</a>Dialog(<b><a href="CppConst.htm">const</a></b> <a href="CppDebug.htm">Debug</a>Dialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppDebug.htm">Debug</a>Dialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppDebug.htm">Debug</a>Dialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~<a href="CppDebug.htm">Debug</a>Dialog();<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppDebug.htm">Debug</a>Dialog*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The collection of ParticipantDialogs<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;ParticipantDialog*&gt; m_dialogs;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The file-upload <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;<a href="CppWFileUpload.htm">Wt::WFileUpload</a> * m_fileupload;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A status label<br/>
&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_state_upload;<br/>
<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> m_server;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to upload of parameter file<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnUploadDone();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show the <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Show();<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> DEBUGDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstdebugdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstdebugdialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wcomment"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWFileUpload.htm">WFileUpload</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWGroupBox.htm">WGroupBox</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a><a href="CppDebug.htm">debug</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppIpaddress.htm">ipaddress</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppIpaddress.htm">ipaddress</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtTimedServerPusher.htm">wttimedserverpusher</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<a href="CppDebug.htm">Debug</a>Dialog::<a href="CppDebug.htm">Debug</a>Dialog(Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: m_dialogs{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_fileupload{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_label_state_upload{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_server(server)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server);<br/>
&nbsp;&nbsp;Show();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<a href="CppDebug.htm">Debug</a>Dialog::~<a href="CppDebug.htm">Debug</a>Dialog()<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Do something random to the dialog<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<a href="CppDebug.htm">Debug</a>Dialog::On<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_dialogs.begin(),m_dialogs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](ParticipantDialog* dialog) { dialog-&gt;DoSomethingRandom(); }<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<a href="CppDebug.htm">Debug</a>Dialog::OnUploadDone()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters(<b><a href="CppNew.htm">new</a></b> Parameters(m_server));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;ReadFromFile(m_fileupload-&gt;spoolFileName());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdRuntime_error.htm">std::runtime_error</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_label_state_upload-&gt;setText(e.what());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_label_state_upload-&gt;setText("OK: parameter file loaded");<br/>
&nbsp;&nbsp;m_server-&gt;Reset();<br/>
&nbsp;&nbsp;m_server-&gt;SetParameters(parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the Participant dialogs<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Remove all ParticipantDialogs from <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> and <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;clear();<br/>
&nbsp;&nbsp;m_dialogs.resize(0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_participants <a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetGroups()-&gt;CollectParticipants().size();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display the dialogs in a random order<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; indices(n_participants);<br/>
&nbsp;&nbsp;<a href="CppStdIota.htm">std::iota</a>(indices.begin(),indices.end(),0);<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(indices.begin(),indices.end());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> dialog_index=0; dialog_index<a href="CppOperatorNotEqual.htm">!=</a>n_participants; <a href="CppOperatorIncrement.htm">++</a>dialog_index)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> indices[dialog_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ip_address_str<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "000.000.000."<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Safe<a href="CppIpAddress.htm">IpAddress</a>&gt; ip_address(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>(ip_address_str));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog* <b><a href="CppConst.htm">const</a></b> dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> ParticipantDialog(m_server,ip_address.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialogs.push_back(dialog);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> box <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;box-&gt;addWidget(dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;addWidget(box);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<a href="CppDebug.htm">Debug</a>Dialog::Show()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;clear();<br/>
<br/>
&nbsp;&nbsp;m_fileupload <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWFileUpload.htm">Wt::WFileUpload</a>;<br/>
&nbsp;&nbsp;m_label_state_upload <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_fileupload);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_label_state_upload);<br/>
<br/>
&nbsp;&nbsp;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;addWidget(m_label_state_upload);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;addWidget(m_fileupload);<br/>
<br/>
&nbsp;&nbsp;m_label_state_upload-&gt;setText("Please select a file to upload or press the button");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Upload automatically when the user entered a file<br/>
&nbsp;&nbsp;m_fileupload-&gt;changed().connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_fileupload,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppWFileUpload.htm">Wt::WFileUpload</a>::upload);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Call OnUploadDone when file is uploaded<br/>
&nbsp;&nbsp;m_fileupload-&gt;uploaded().connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<a href="CppDebug.htm">Debug</a>Dialog::OnUploadDone);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstforward_declarations.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstforward_declarations.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>FORWARD_DECLARATIONS_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>FORWARD_DECLARATIONS_H<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Forward decalarations, <b><a href="CppFor.htm">for</a></b> faster compiling<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Reference: <a href="CppHerbSutter.htm">Herb Sutter</a>. <a href="CppException.htm">Exception</a>al <a href="Cpp.htm">C++</a>. ISBN: 0-201-61562-2.<br/>
<a href="CppComment.htm">///</a>Item 26: 'Never <a href="CppInclude.htm">#include</a> a header when a <a href="CppForwardDeclaration.htm">forward declaration</a> will suffice'<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppWt.htm">Wt</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> WAnchor;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppWApplication.htm">WApplication</a>;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppWButtonGroup.htm">WButtonGroup</a>;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppWFileUpload.htm">WFileUpload</a>;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppWLabel.htm">WLabel</a>;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppWLineEdit.htm">WLineEdit</a>;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppWText.htm">WText</a>;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppWTextArea.htm">WTextArea</a>;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Administrator;<br/>
<b><a href="CppStruct.htm">struct</a></b> AdministratorDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> AdministratorDialog<a href="CppState.htm">State</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> AdministratorDialog<a href="CppState.htm">State</a>LoggedIn;<br/>
<b><a href="CppStruct.htm">struct</a></b> AdministratorDialog<a href="CppState.htm">State</a>NotLoggedIn;<br/>
<b><a href="CppStruct.htm">struct</a></b> Administrators;<br/>
<b><a href="CppStruct.htm">struct</a></b> ChatMessage;<br/>
<b><a href="CppStruct.htm">struct</a></b> ChooseActionOption;<br/>
<b><a href="CppStruct.htm">struct</a></b> Group;<br/>
<b><a href="CppStruct.htm">struct</a></b> GroupAssigner;<br/>
<b><a href="CppStruct.htm">struct</a></b> GroupFinished;<br/>
<b><a href="CppStruct.htm">struct</a></b> GroupLoggedIn;<br/>
<b><a href="CppStruct.htm">struct</a></b> GroupNotLoggedIn;<br/>
<b><a href="CppStruct.htm">struct</a></b> GroupParticipating;<br/>
<b><a href="CppStruct.htm">struct</a></b> Groups;<br/>
<b><a href="CppStruct.htm">struct</a></b> LogFile;<br/>
<b><a href="CppStruct.htm">struct</a></b> MenuDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> Parameters;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersAssignPayoff;<br/>
<b><a href="CppStruct.htm">struct</a></b> Parameters<a href="CppChat.htm">Chat</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersChooseAction;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersFinished;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersGroupAssign;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersGroupReAssign;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersQuiz;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersViewResultsGroup;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersViewResultsVoting;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersVoting;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>ChooseAction;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>Finished;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>GroupAssign;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>LoggedIn;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>Quiz;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>s;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting;<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>Voting;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>AssignPayoff;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>ChooseAction;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>Finished;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>GroupAssign;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>GroupReAssign;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>LoggedIn;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>NotLoggedIn;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>Quiz;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>ViewResultsGroup;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>ViewResultsVoting;<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>Voting;<br/>
<b><a href="CppStruct.htm">struct</a></b> Payoff;<br/>
<b><a href="CppStruct.htm">struct</a></b> Payoffs;<br/>
<b><a href="CppStruct.htm">struct</a></b> RepeatAssigner;<br/>
<b><a href="CppStruct.htm">struct</a></b> RepeatAssignerFixed;<br/>
<b><a href="CppStruct.htm">struct</a></b> RepeatAssignerRandomUniform;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>AssignPayoff;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>ChooseAction;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>Finished;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>GroupAssign;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>GroupReAssign;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>Quiz;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>s;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>ViewResultsGroup;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>ViewResultsVoting;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>Voting;<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>Waiting;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Vote;<br/>
<b><a href="CppStruct.htm">struct</a></b> VotingOption;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppCounter.htm">Counter</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppShape.htm">Shape</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppShapeWidget.htm">ShapeWidget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppStopwatch.htm">Stopwatch</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWtAboutDialog.htm">WtAboutDialog</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWtMultipleChoiceQuestionDialog.htm">WtMultipleChoiceQuestionDialog</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWtSelectFileDialog.htm">WtSelectFileDialog</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWtShapeGroupWidget.htm">WtShapeGroupWidget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWtShapeWidget.htm">WtShapeWidget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWtLedWidget.htm">WtLedWidget</a>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> FORWARD_DECLARATIONS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgroup.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgroup.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUP_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUP_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Group is a Participant group<br/>
<b><a href="CppStruct.htm">struct</a></b> Group<br/>
{<br/>
&nbsp;&nbsp;Group(Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;Group(<b><a href="CppConst.htm">const</a></b> Group&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Group&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Group&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a> a Participant to the Group<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Participant(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAppend.htm">Append</a> the last IPGG's cycle(s) average payoff to m_payoffs<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAppend.htm">Append</a>AveragePayoff(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assign the payoffs to <b><a href="CppThis.htm">this</a></b> group<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This is a non-<b><a href="CppConst.htm">const</a></b> <a href="CppMemberFunction.htm">member function</a>, because it changes every Participant<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AssignPayoff(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> round,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> VotingOption * <b><a href="CppConst.htm">const</a></b> option);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> there is a last average payoff<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> CanGetLastAveragePayoff() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Clear all Participants<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Clear();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Collects all Participants in <b><a href="CppThis.htm">this</a></b> Group as read-only <a href="CppPointer.htm">pointer</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; CollectParticipants() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the average payoffs as<b><a href="CppSigned.htm">signed</a></b> after completing the IPGG periods<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetAveragePayoffs() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b>&nbsp;&nbsp;m_average_payoffs; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Group its ID<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppInt.htm">int</a></b> GetId() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the last average payoff as<b><a href="CppSigned.htm">signed</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDouble.htm">double</a></b> GetLastAveragePayoff() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Group its size<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetSize() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get all Participants<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; &gt;&amp; GetParticipants() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_participants; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; GetParticipants() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_participants; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> a Participant is present in <b><a href="CppThis.htm">this</a></b> Group<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsMember(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Remove a Participant from a Group<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; RemoveParticipant(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Reset the m_group_last_id to zero<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Reset();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Group type as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Group() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Group*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Allow <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b> access to prevent recursion<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Group&amp; group);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The average payoffs as<b><a href="CppSigned.htm">signed</a></b> after completing the IPGG periods<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_average_payoffs;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant collection in <b><a href="CppThis.htm">this</a></b> Group<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; &gt; m_participants;<br/>
<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> m_server;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a random <b><a href="CppDouble.htm">double</a></b> in the range [0.0,1.0&gt;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppGetRandomUniform.htm">GetRandomUniform</a>();<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Group&amp; group);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> GROUP_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgroup.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgroup.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppTribool.htm">boost/logic/tribool.hpp</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/weak_ptr.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>chooseactionoption.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoffs.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>votingoption.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group::Group(Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: m_average_payoffs{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_participants{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_server{server}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppAdd.htm">Add</a> a Participant to the Group<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group::<a href="CppAdd.htm">Add</a>Participant(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_participants.push_back(participant);<br/>
<br/>
&nbsp;&nbsp;m_server-&gt;GetLog()-&gt;LogAssignGroup(<b><a href="CppThis.htm">this</a></b>,participant);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppAppend.htm">Append</a> the last IPGG's cycle(s) average payoff to m_payoffs<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group::<a href="CppAppend.htm">Append</a>AveragePayoff(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff)<br/>
{<br/>
&nbsp;&nbsp;m_average_payoffs.push_back(payoff);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Assign the payoffs to <b><a href="CppThis.htm">this</a></b> group<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>\note<br/>
<a href="CppComment.htm">///</a>If option is null, no concensus is reached in voting<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group::AssignPayoff(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> round,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> VotingOption * <b><a href="CppConst.htm">const</a></b> option)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((option <a href="CppOperatorLogicalOr.htm">||</a> !option)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "If option is null, no concensus is reached in voting within <b><a href="CppThis.htm">this</a></b> group");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the payoff contributed to the group<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> total_group_payoff<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdAccumulate.htm">std::accumulate</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_participants.begin(),m_participants.end(),0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppDouble.htm">double</a></b>&amp; sum,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!participant-&gt;GetActions().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sum <a href="CppOperatorPlus.htm">+</a> participant-&gt;GetActions().back()-&gt;GetContribution();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetSize();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(size<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;,<a href="CppStdTuple.htm">std::tuple</a>&lt;<b><a href="CppBool.htm">bool</a></b>,<a href="CppBoostTribool.htm">boost::logic::tribool</a>&gt; &gt; s;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Collect the benefactors<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_participants.begin(),m_participants.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;s,<b><a href="CppThis.htm">this</a></b>,option](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!participant-&gt;GetActions().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> contribution <a href="CppOperatorAssign.htm">=</a> participant-&gt;GetActions().back()-&gt;GetContribution();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> did_contribute <a href="CppOperatorAssign.htm">=</a> (contribution <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (did_contribute)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s[participant] <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(did_contribute, <a href="CppBoostTribool.htm">boost::logic::tribool</a>::<a href="CppIndeterminate.htm">indeterminate</a>_value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> did_get_caught <a href="CppOperatorAssign.htm">=</a> (option <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Without a concensus there is no police force<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>With a concensus, non-contributor only benefits when not detected by the supervisor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppGetRandomUniform.htm">GetRandomUniform</a>() &lt; option-&gt;GetChance());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s[participant] <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(did_contribute, did_get_caught);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_benefactors <a href="CppOperatorAssign.htm">=</a> <a href="CppStdCount_if.htm">std::count_if</a>(s.begin(),s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;,<a href="CppStdTuple.htm">std::tuple</a>&lt;<b><a href="CppBool.htm">bool</a></b>,<a href="CppBoostTribool.htm">boost::logic::tribool</a>&gt; &gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdGet.htm">std::get</a>&lt;0&gt;(p.second) <a href="CppOperatorLogicalOr.htm">||</a> <a href="CppStdGet.htm">std::get</a>&lt;1&gt;(p.second) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> benefactors_share<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> total_group_payoff<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> (n_benefactors ? <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_benefactors) : 1.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assign each participants' payoff<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(s.begin(),s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,period,round,benefactors_share](<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;,<a href="CppStdTuple.htm">std::tuple</a>&lt;<b><a href="CppBool.htm">bool</a></b>,<a href="CppBoostTribool.htm">boost::logic::tribool</a>&gt; &gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> did_contribute <a href="CppOperatorAssign.htm">=</a> <a href="CppStdGet.htm">std::get</a>&lt;0&gt;(p.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostTribool.htm">boost::logic::tribool</a> did_get_caught <a href="CppOperatorAssign.htm">=</a> <a href="CppStdGet.htm">std::get</a>&lt;1&gt;(p.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> individual_payoff<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>p.first-&gt;GetActions().back()-&gt;GetCost()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (did_contribute <a href="CppOperatorLogicalOr.htm">||</a> !did_get_caught<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? benefactors_share<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Payoff&gt; payoff(<b><a href="CppNew.htm">new</a></b> PayoffIpgg(period,round,individual_payoff,did_contribute,did_get_caught));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.first-&gt;GetPayoffs()-&gt;<a href="CppAdd.htm">Add</a>(payoff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_server-&gt;GetLog()-&gt;LogAssignPayoff(p.first);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Clear all Participants<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group::Clear()<br/>
{<br/>
&nbsp;&nbsp;m_participants.resize(0);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Collects all Participants in <b><a href="CppThis.htm">this</a></b> Group as read-only <a href="CppPointer.htm">pointer</a>s<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group::CollectParticipants() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; v;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(m_participants.begin(),m_participants.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p;} );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> m_participants.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorLogicalOr.htm">||</a> v[0] <a href="CppOperatorEqual.htm">==</a> m_participants[0]);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain a random <b><a href="CppDouble.htm">double</a></b> in the range [0.0,1.0&gt;<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetRandomUniform.htm">GetRandomUniform</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group::<a href="CppGetRandomUniform.htm">GetRandomUniform</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdRand.htm">std::rand</a>())/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRAND_MAX.htm">RAND_MAX</a>);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get the Group its size<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group::GetSize() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_participants.size());<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Checks <b><a href="CppIf.htm">if</a></b> a Participant is present in <b><a href="CppThis.htm">this</a></b> Group<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group::IsMember(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdFind_if.htm">std::find_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_participants.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_participants.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[participant](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; i) { <b><a href="CppReturn.htm">return</a></b> i <a href="CppOperatorEqual.htm">==</a> participant; }<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> m_participants.end();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Remove a Participant from a Group<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group::RemoveParticipant(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsMember(participant));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAny_of.htm">std::any_of</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_participants.begin(),m_participants.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,participant](<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> participant <a href="CppOperatorEqual.htm">==</a> p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;));<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; q <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppStdFind_if.htm">std::find_if</a>(m_participants.begin(),m_participants.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,participant](<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> participant <a href="CppOperatorEqual.htm">==</a> p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;m_participants.erase(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove_if.htm">std::remove_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_participants.begin(),m_participants.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,participant](<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> participant <a href="CppOperatorEqual.htm">==</a> p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_participants.begin(),m_participants.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,participant](<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (participant <a href="CppOperatorEqual.htm">==</a> p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; q <a href="CppOperatorAssign.htm">=</a> p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(p,m_participants.back());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_participants.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m_server-&gt;GetLog()-&gt;LogRemoveParticipant(<b><a href="CppThis.htm">this</a></b>,q);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> q;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Group&amp; group)<br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> group.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;\n";<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(group.m_participants.begin(),group.m_participants.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;os](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *p <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;payoffs&gt;\n";<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(group.m_average_payoffs.begin(),group.m_average_payoffs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;os](<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; d)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/payoffs&gt;\n";<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> group.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgroupassigner.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgroupassigner.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUPASSIGNER_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUPASSIGNER_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>GroupAssigner is the (abstract) <a href="CppBaseClass.htm">base class</a> to assign a group<br/>
<a href="CppComment.htm">///</a>number to a Participant when the client logs in.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>GroupAssigner is a Strategy.<br/>
<b><a href="CppStruct.htm">struct</a></b> GroupAssigner<br/>
{<br/>
&nbsp;&nbsp;GroupAssigner() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C<a href="CppOperatorIncrement.htm">++</a> coding standards: 101 rules,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>guidelines, and best practices. ISBN: 0-32-111358-6. Item 50: 'Make base<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppClass.htm">class</a></b> <a href="CppDestructor.htm">destructor</a>s <b><a href="CppPublic.htm">public</a></b> and <b><a href="CppVirtual.htm">virtual</a></b>, or <b><a href="CppProtected.htm">protected</a></b> and non<b><a href="CppVirtual.htm">virtual</a></b>'.<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~GroupAssigner() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief Assign or unassign a Participant to a group.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If Assign <b><a href="CppReturn.htm">return</a></b> <a href="CppOperatorMinus.htm">-</a>1, the Participant is removed from a group<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppInt.htm">int</a></b> Assign(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupAssigner&gt; CreateAssigner(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>A GroupAssigner that lets a Participant be as<b><a href="CppSigned.htm">signed</a></b> to always the same group<br/>
<b><a href="CppStruct.htm">struct</a></b> GroupAssignerPredetermined : <b><a href="CppPublic.htm">public</a></b> GroupAssigner<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GroupAssignerPredetermined needs the predetermined group index<br/>
&nbsp;&nbsp;GroupAssignerPredetermined(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> group) : m_group(group) {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get <b><a href="CppThis.htm">this</a></b> GroupAssigner its group index, which is predetermined<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetGroup() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_group; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief Assign or unassign a Participant to a group.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If Assign <b><a href="CppReturn.htm">return</a></b> <a href="CppOperatorMinus.htm">-</a>1, the Participant is removed from a group<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b> Assign(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppComment.htm">/*</a> id <a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_group; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~GroupAssignerPredetermined() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(GroupAssignerPredetermined*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_group;<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>A GroupAssigner that lets a Participant be as<b><a href="CppSigned.htm">signed</a></b> to always the same group<br/>
<b><a href="CppStruct.htm">struct</a></b> GroupAssignerDeterminedByServer: <b><a href="CppPublic.htm">public</a></b> GroupAssigner<br/>
{<br/>
&nbsp;&nbsp;GroupAssignerDeterminedByServer(<a href="CppComment.htm">/*</a><b><a href="CppConst.htm">const</a></b> Server * <b><a href="CppConst.htm">const</a></b> server<a href="CppComment.htm">*/</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief Assign or unassign a Participant to a group.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If Assign <b><a href="CppReturn.htm">return</a></b> <a href="CppOperatorMinus.htm">-</a>1, the Participant is removed from a group<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b> Assign(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~GroupAssignerDeterminedByServer() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(GroupAssignerDeterminedByServer*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read-only <a href="CppPointer.htm">pointer</a> to server<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> Server * <b><a href="CppConst.htm">const</a></b> m_server;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read-only <a href="CppPointer.htm">pointer</a> to the Participant<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppConst.htm">const</a></b> Participant * m_participant;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> GROUPASSIGNER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgroupassigner.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgroupassigner.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/weak_ptr.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupAssigner&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupAssigner::CreateAssigner(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "?")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupAssigner&gt; a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> GroupAssignerDeterminedByServer(<a href="CppComment.htm">/*</a>m_server<a href="CppComment.htm">*/</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStoi.htm">std::stoi</a>(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b>(<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Invalid group assigner: must be either a number or a <a href="CppQuestion.htm">question</a> mark");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupAssigner&gt; a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> GroupAssignerPredetermined(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStoi.htm">std::stoi</a>(s)));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupAssignerDeterminedByServer::GroupAssignerDeterminedByServer()<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>: m_server(server)<br/>
{<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgroupfinished.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgroupfinished.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUPFINISHED_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUPFINISHED_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>GroupFinished is a Participant Group that is finished<br/>
<b><a href="CppStruct.htm">struct</a></b> GroupFinished : <b><a href="CppPublic.htm">public</a></b> Group, <a href="CppState.htm">State</a>Finished<br/>
{<br/>
&nbsp;&nbsp;GroupFinished(Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a> a Participant to <b><a href="CppThis.htm">this</a></b> Group and set its <a href="CppState.htm">State</a> to Finished<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>FinishedParticipant(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GroupFinished its ID is the highest maximum <b><a href="CppInt.htm">int</a></b><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetId() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Group type as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>Finished::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~GroupFinished() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(GroupFinished*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> GROUPFINISHED_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgroupfinished.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgroupfinished.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/bounds.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupFinished::GroupFinished(Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Group(server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupFinished::<a href="CppAdd.htm">Add</a>FinishedParticipant(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; participant)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppAdd.htm">Add</a>Participant(participant);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; state(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>Finished);<br/>
&nbsp;&nbsp;participant-&gt;Set<a href="CppState.htm">State</a>(state.get());<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>GroupFinished its ID is the highest maximum <b><a href="CppInt.htm">int</a></b><br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupFinished::GetId() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::numeric::bounds&lt;<b><a href="CppInt.htm">int</a></b>&gt;::highest();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgrouploggedin.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgrouploggedin.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUPLOGGEDIN_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUPLOGGEDIN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>GroupLoggedIn is a Participant Group that is logged in<br/>
<b><a href="CppStruct.htm">struct</a></b> GroupLoggedIn : <b><a href="CppPublic.htm">public</a></b> Group<br/>
{<br/>
&nbsp;&nbsp;GroupLoggedIn(Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GroupLoggedIn its ID is the highest maximum <b><a href="CppInt.htm">int</a></b> minus one<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetId() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Group type as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "Logged in"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> a Participant can log in with his/her <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppBool.htm">bool</a></b> CanLoginParticipant(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; ip_address) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~GroupLoggedIn() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(GroupLoggedIn*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> GROUPLOGGEDIN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgrouploggedin.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgrouploggedin.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/bounds.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupLoggedIn::GroupLoggedIn(Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Group(server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>GroupLoggedIn its ID is the highest maximum <b><a href="CppInt.htm">int</a></b> minus one<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupLoggedIn::GetId() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::numeric::bounds&lt;<b><a href="CppInt.htm">int</a></b>&gt;::highest() <a href="CppOperatorMinus.htm">-</a> 1;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgroupnotloggedin.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgroupnotloggedin.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUPNOTLOGGEDIN_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUPNOTLOGGEDIN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>GroupNotLoggedIn is a Participant Group that is not logged in<br/>
<b><a href="CppStruct.htm">struct</a></b> GroupNotLoggedIn : <b><a href="CppPublic.htm">public</a></b> Group<br/>
{<br/>
&nbsp;&nbsp;GroupNotLoggedIn(Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GroupNotLoggedIn its ID is the highest maximum <b><a href="CppInt.htm">int</a></b> minus two<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetId() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Group type as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "Not logged in"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> a Participant can log in with his/her <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> CanLoginParticipant(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; ip_address) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~GroupNotLoggedIn() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(GroupNotLoggedIn*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> GROUPNOTLOGGEDIN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgroupnotloggedin.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgroupnotloggedin.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/bounds.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupNotLoggedIn::GroupNotLoggedIn(Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Group(server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>GroupNotLoggedIn its ID is the highest maximum <b><a href="CppInt.htm">int</a></b> minus two<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupNotLoggedIn::GetId() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::numeric::bounds&lt;<b><a href="CppInt.htm">int</a></b>&gt;::highest() <a href="CppOperatorMinus.htm">-</a> 2;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgroupparticipating.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgroupparticipating.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUPPARTICIPATING_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUPPARTICIPATING_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>GroupParticipating is a Participant Group that is participating<br/>
<b><a href="CppStruct.htm">struct</a></b> GroupParticipating : <b><a href="CppPublic.htm">public</a></b> Group<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Constructor</a> that assigns an ID<br/>
&nbsp;&nbsp;GroupParticipating(Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Group its ID<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetId() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_id; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Reset();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Group type as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "Participating"; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~GroupParticipating() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(GroupParticipating*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Group its unique ID<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_id;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_group_last_index contains the index given to the last group<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> m_group_last_id;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> GROUPPARTICIPATING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgroupparticipating.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgroupparticipating.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<br/>
<a href="CppComment.htm">///</a>m_group_last_index contains the index given to the last group<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupParticipating::m_group_last_id <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConstructor.htm">Constructor</a> that assigns an ID<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupParticipating::GroupParticipating(Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Group(server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_id(<a href="CppOperatorIncrement.htm">++</a>m_group_last_id)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_id &gt; 0);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Reset the m_group_last_id to zero<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupParticipating::Reset()<br/>
{<br/>
&nbsp;&nbsp;m_group_last_id <a href="CppOperatorAssign.htm">=</a> 0;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgroups.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgroups.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUPS_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>GROUPS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMutexH.htm">regex</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Groups is a Facade for managing all Group <a href="CppInstance.htm">instances</a><br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Groups is <a href="CppFriend.htm">befriend</a>ed to Server<a href="CppState.htm">State</a>GroupDynamics <b><a href="CppFor.htm">for</a></b> modifying<br/>
<a href="CppComment.htm">///</a>the Participant Group distribution<br/>
<b><a href="CppStruct.htm">struct</a></b> Groups<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Groups <a href="CppConstructor.htm">constructor</a><br/>
&nbsp;&nbsp;Groups(Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;Groups(<b><a href="CppConst.htm">const</a></b> Groups&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Groups&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Groups&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> a Participant can be from his/her non-wildcard <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanFind(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Search the Group <b><a href="CppFor.htm">for</a></b> a Participant with a certain <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGetParticipantWith<a href="CppIpAddress.htm">IpAddress</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A Participant can log in, <b><a href="CppIf.htm">if</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> he/she reloaded the page by pressing F5, recovery of all actions<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> he/she started viewing the page, start of <b><a href="CppNew.htm">new</a></b> actions<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanLetLogin(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Collect all desired Groups as a read-only <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *&gt; CollectGroups(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> not_logged_in <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> logged_in <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> participating <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> finished <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Collect all Participants as a read-only <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; CollectParticipants(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> not_logged_in <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> logged_in <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> participating <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> finished <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find a Participant from his/her non-wildcard <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; Find(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Finds the Group the Participant is in<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * FindMyGroup(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the GroupLoggedIn as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> GroupFinished * GetGroupFinished() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the GroupLoggedIn as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> GroupLoggedIn * GetGroupLoggedIn() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the GroupNotLoggedIn as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> GroupNotLoggedIn * GetGroupNotLoggedIn() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find the Group <b><a href="CppFor.htm">for</a></b> the Participant with a certain <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; GetParticipantWith<a href="CppIpAddress.htm">IpAddress</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Move a Participant from the passive to the active Group<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; LetLogin(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Moves all Participants to the GroupFinished<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MoveAllToFinished();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Moves all logged in Participants to the GroupPartipating<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MoveLoggedInToParticipating();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the Participants <b><a href="CppFor.htm">for</a></b> the coming experiment<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParticipants(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; &gt; participants);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppSignal.htm">Signal</a> that is <a href="CppEmit.htm">emitted</a> when Groups changes.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppSignal.htm">signal</a> is <b><a href="CppStatic.htm">static</a></b>, because the Groups <a href="CppPointer.htm">pointer</a> is reset some<a href="CppTime.htm">time</a>s,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/and the <a href="CppSignal.htm">signal</a> should not be lost<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; m_signal_groups_changed;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Groups() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Groups*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a> can modify<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the Group distribution<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> Server<a href="CppState.htm">State</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a>GroupNotParticipatingGroupDynamics can modify<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the Participant Group distribution<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> Server<a href="CppState.htm">State</a>GroupReAssign;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Groups&amp; groups);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a>Finished can modify<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the Participant Group distribution<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> Server<a href="CppState.htm">State</a>Finished;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The group with Participants that are finished<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;GroupFinished&gt; m_finished;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ID given to the last Participant<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_last_id_participant;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The group with Participants that are logged in,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/but not as<b><a href="CppSigned.htm">signed</a></b> to a group<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;GroupLoggedIn&gt; m_logged_in;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppMutex.htm">mutex</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a> m_mutex;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The group with Participants that are not logged in<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;GroupNotLoggedIn&gt; m_not_logged_in;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participants as<b><a href="CppSigned.htm">signed</a></b> to a group<br/>
&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupParticipating&gt; &gt; m_participating;<br/>
<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> m_server;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find a read/write Group from a read-only Group<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Just checks <b><a href="CppIf.htm">if</a></b> the Group really exists<br/>
&nbsp;&nbsp;Group * FindGroup(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find a read/write Participant from a read-only Participant<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Just checks <b><a href="CppIf.htm">if</a></b> the Participant really exists<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; FindParticipant(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let a Group grow from 3 to 5 Participants<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> GrowGroup(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Remove a Group<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> KillGroup(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Split a Group of 6 Participants to 2 groups of 3<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SplitGroup(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Remove all Participants<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Reset();<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Groups&amp; groups);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> GROUPS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstgroups.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstgroups.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMutexH.htm">regex</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppThreadH.htm">thread</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/weak_ptr.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppIpaddress.htm">ipaddress</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::m_mutex;<br/>
<br/>
<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::m_signal_groups_changed;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::Groups(Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: m_finished{<b><a href="CppNew.htm">new</a></b> GroupFinished(server)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_last_id_participant{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_logged_in{<b><a href="CppNew.htm">new</a></b> GroupLoggedIn(server)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_not_logged_in{<b><a href="CppNew.htm">new</a></b> GroupNotLoggedIn(server)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_participating{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_server{server}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server);<br/>
&nbsp;&nbsp;m_signal_groups_changed();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Check <b><a href="CppIf.htm">if</a></b> a Participant can be from his/her non-wildcard <a href="CppIpAddress.htm">IP address</a><br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::CanFind(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ip_address);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> CollectParticipants();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdNone_of.htm">std::none_of</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ));<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ip_address](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> participant-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> participant-&gt;<a href="CppGetIpAddress.htm">GetIpAddress</a>().get() <a href="CppOperatorEqual.htm">==</a> ip_address.get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> i<a href="CppOperatorNotEqual.htm">!=</a>v.end();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Search the Group <b><a href="CppFor.htm">for</a></b> a Participant with a certain <a href="CppIpAddress.htm">IP address</a><br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::CanGetParticipantWith<a href="CppIpAddress.htm">IpAddress</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ip_address);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain all Participants<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> ps <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;CollectParticipants();<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdFind_if.htm">std::find_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ps.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ps.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ip_address](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> p-&gt;<a href="CppGetIpAddress.htm">GetIpAddress</a>() <a href="CppOperatorEqual.htm">==</a> ip_address;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorNotEqual.htm">!=</a> ps.end();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>A Participant can log in, <b><a href="CppIf.htm">if</a></b><br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> he/she reloaded the page by pressing F5, recovery of all actions<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> he/she started viewing the page, start of <b><a href="CppNew.htm">new</a></b> actions<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::CanLetLogin(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ip_address);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain all Participants<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> ps <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;CollectParticipants();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdFind_if.htm">std::find_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ps.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ps.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ip_address](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !p-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>() <a href="CppOperatorLogicalOr.htm">||</a> p-&gt;<a href="CppGetIpAddress.htm">GetIpAddress</a>() <a href="CppOperatorEqual.htm">==</a> ip_address;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorNotEqual.htm">!=</a> ps.end();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Collect all Groups as a read-only <a href="CppStdVector.htm">std::vector</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group *&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::CollectGroups(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> not_logged_in,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> logged_in,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> participating,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> finished) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (not_logged_in)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m_not_logged_in.get());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (logged_in)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m_logged_in.get());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (participating)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(m_participating.begin(),m_participating.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupParticipating&gt;&amp; g) { <b><a href="CppReturn.htm">return</a></b> g.get(); } );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (finished)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m_finished.get());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Collect all Participants as a read-only <a href="CppStdVector.htm">std::vector</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::CollectParticipants(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> not_logged_in,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> logged_in,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> participating,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> finished) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let <b><a href="CppThis.htm">this</a></b> <a href="CppThread.htm">thread</a> sleep, to give the other <a href="CppThread.htm">thread</a> a chance<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdThis_thread.htm">std::this_thread</a>::sleep_for(<a href="CppStdChrono.htm">std::chrono</a>::milliseconds(1));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdMutex.htm">std::mutex</a>&gt; lock(Server::m_mutex);<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> groups <a href="CppOperatorAssign.htm">=</a> CollectGroups(not_logged_in,logged_in,participating,finished);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(groups.begin(),groups.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;v](<b><a href="CppConst.htm">const</a></b> Group * group)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; w <a href="CppOperatorAssign.htm">=</a> group-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(w.begin(),w.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;} );<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Find a Participant from his/her non-wildcard <a href="CppIpAddress.htm">IP address</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::Find(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ip_address);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanFind(ip_address));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> CollectParticipants();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdNone_of.htm">std::none_of</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ));<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Search <b><a href="CppFor.htm">for</a></b> a Participant with <b><a href="CppThis.htm">this</a></b> <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt;::const_iterator i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ip_address](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> participant-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> participant-&gt;<a href="CppGetIpAddress.htm">GetIpAddress</a>().get() <a href="CppOperatorEqual.htm">==</a> ip_address.get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A Participant with a known <a href="CppIpAddress.htm">IP address</a> is found<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i<a href="CppOperatorNotEqual.htm">!=</a>v.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((*i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((*i)-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((*i)-&gt;<a href="CppGetIpAddress.htm">GetIpAddress</a>()-&gt;Get() <a href="CppOperatorEqual.htm">==</a> ip_address-&gt;Get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Should not get here");<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Find a read/write Group from a read-only Group<br/>
<a href="CppComment.htm">///</a>Just checks <b><a href="CppIf.htm">if</a></b> the Group really exists<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>\note <b><a href="CppConst_cast.htm">const_cast</a></b>!<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::FindGroup(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(group);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *&gt; groups <a href="CppOperatorAssign.htm">=</a> CollectGroups();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAny_of.htm">std::any_of</a>(groups.begin(),groups.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[group](<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> other_group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> other_group <a href="CppOperatorEqual.htm">==</a> group;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} ));<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;Group*&gt;(group);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Finds the Group the Participant is in<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::FindMyGroup(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> groups <a href="CppOperatorAssign.htm">=</a> CollectGroups();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> my_group<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(groups.begin(),groups.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[participant](<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> group-&gt;IsMember(participant);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (my_group <a href="CppOperatorNotEqual.htm">!=</a> groups.end()) <b><a href="CppReturn.htm">return</a></b> *my_group;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"All Participants must be in a Group");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Find a read/write Participant from a read-only Participant<br/>
<a href="CppComment.htm">///</a>Just checks <b><a href="CppIf.htm">if</a></b> the Participant really exists<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>\note <b><a href="CppConst_cast.htm">const_cast</a></b>!<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::FindParticipant(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(FindMyGroup(participant)<a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Every Participant must be in a Group");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::const_<a href="CppPointer.htm">pointer</a>_cast&lt;Participant&gt;(participant);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupFinished * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::GetGroupFinished() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_finished);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_finished.get();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupLoggedIn * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::GetGroupLoggedIn() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_logged_in);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_logged_in.get();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::GroupNotLoggedIn * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::GetGroupNotLoggedIn() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_not_logged_in);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_not_logged_in.get();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Find the Group <b><a href="CppFor.htm">for</a></b> the Participant with a certain <a href="CppIpAddress.htm">IP address</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::GetParticipantWith<a href="CppIpAddress.htm">IpAddress</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanGetParticipantWith<a href="CppIpAddress.htm">IpAddress</a>(ip_address));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; p <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;CollectParticipants();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<a href="CppStdFind_if.htm">std::find_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.begin(),p.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[ip_address](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> participant-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> participant-&gt;<a href="CppGetIpAddress.htm">GetIpAddress</a>().get() <a href="CppOperatorEqual.htm">==</a> ip_address.get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Let a Group grow from 3 to 5 Participants<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::GrowGroup(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group)<br/>
{<br/>
&nbsp;&nbsp;GroupLoggedIn * <b><a href="CppConst.htm">const</a></b> from_group <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_logged_in.get();<br/>
&nbsp;&nbsp;Group * <b><a href="CppConst.htm">const</a></b> to_group <a href="CppOperatorAssign.htm">=</a> FindGroup(group);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(to_group-&gt;GetSize() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (from_group-&gt;GetSize() <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;to_group-&gt;<a href="CppAdd.htm">Add</a>Participant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from_group-&gt;RemoveParticipant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from_group-&gt;CollectParticipants().back()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (from_group-&gt;GetSize() <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;to_group-&gt;<a href="CppAdd.htm">Add</a>Participant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from_group-&gt;RemoveParticipant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from_group-&gt;CollectParticipants().back()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_signal_groups_changed();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Relocate a GroupParticipating to GroupFinished<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::KillGroup(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group_to_move)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_participating.begin(),m_participating.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,group_to_move](<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupParticipating&gt; group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (group.get() <a href="CppOperatorEqual.htm">==</a> group_to_move)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> ps <a href="CppOperatorAssign.htm">=</a> group-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(ps.begin(),ps.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,group](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move the Participant from its current group<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>to the GroupFinished<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_finished-&gt;<a href="CppAdd.htm">Add</a>Participant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group-&gt;RemoveParticipant(p));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the Participant his/her <b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a> * state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a> *&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_finished.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;FindParticipant(p)-&gt;Set<a href="CppState.htm">State</a>(state);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove the (empty) group<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_participating.erase(group);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Should get here!<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calling <b><a href="CppReturn.htm">return</a></b> in a <a href="CppLambdaExpression.htm">lambda expression</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/just quits the <a href="CppLambdaExpression.htm">lambda expression</a><br/>
&nbsp;&nbsp;m_signal_groups_changed();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Move a Participant from the <a href="CppAny.htm">any</a> Group to the GroupLoggedIn<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::LetLogin(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanLetLogin(ip_address));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assign <b><a href="CppThis.htm">this</a></b> <a href="CppIpAddress.htm">IP address</a> to a Participant<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanFind(ip_address))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(ip_address)-&gt;CanGetId());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(ip_address)-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Find(ip_address);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> CollectParticipants();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let a random unassigned participant be as<b><a href="CppSigned.htm">signed</a></b><br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; w;<br/>
&nbsp;&nbsp;<a href="CppStdCopy_if.htm">std::copy_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !participant-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; participant<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> w[ <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(w.size()) ];<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let a non-random unassigned participant be as<b><a href="CppSigned.htm">signed</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; participant<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> *<a href="CppStdFind_if.htm">std::find_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !participant-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!participant-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assign the ID<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note <b><a href="CppConst_cast.htm">const_cast</a></b><br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::const_<a href="CppPointer.htm">pointer</a>_cast&lt;Participant&gt;(participant)-&gt;AssignId(<a href="CppOperatorIncrement.htm">++</a>m_last_id_participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant-&gt;CanGetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume that the <b><a href="CppNew.htm">new</a></b> Participant now has his/her ID as<b><a href="CppSigned.htm">signed</a></b>");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assign the <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note <b><a href="CppConst_cast.htm">const_cast</a></b><br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::const_<a href="CppPointer.htm">pointer</a>_cast&lt;Participant&gt;(participant)-&gt;Set<a href="CppIpAddress.htm">IpAddress</a>(ip_address);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Every participant must have a valid <a href="CppIpAddress.htm">IP address</a> after logging in");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move the Participant<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(FindMyGroup(participant) <a href="CppOperatorEqual.htm">==</a> m_not_logged_in.get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetGroupNotLoggedIn()-&gt;IsMember(participant));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!GetGroupLoggedIn()-&gt;IsMember(participant));<br/>
<br/>
&nbsp;&nbsp;m_logged_in-&gt;<a href="CppAdd.htm">Add</a>Participant(m_not_logged_in-&gt;RemoveParticipant(participant));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!GetGroupNotLoggedIn()-&gt;IsMember(participant));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetGroupLoggedIn()-&gt;IsMember(participant));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the <b><a href="CppNew.htm">new</a></b> state<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note <b><a href="CppConst_cast.htm">const_cast</a></b><br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::const_<a href="CppPointer.htm">pointer</a>_cast&lt;Participant&gt;(participant)-&gt;Set<a href="CppState.htm">State</a>(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>LoggedIn);<br/>
<br/>
&nbsp;&nbsp;m_signal_groups_changed();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> participant;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Split a Group of 5 Participants to 2 groups of 3<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::SplitGroup(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(group-&gt;GetSize() <a href="CppOperatorEqual.htm">==</a> 5);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_logged_in-&gt;GetSize());<br/>
&nbsp;&nbsp;Group * group1 <a href="CppOperatorAssign.htm">=</a> FindGroup(group);<br/>
&nbsp;&nbsp;group1-&gt;<a href="CppAdd.htm">Add</a>Participant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_logged_in-&gt;RemoveParticipant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_logged_in-&gt;CollectParticipants().back()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(group1-&gt;GetSize() <a href="CppOperatorEqual.htm">==</a> 6);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; p <a href="CppOperatorAssign.htm">=</a> group1-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(p.begin(),p.end());<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupParticipating&gt; group2(<b><a href="CppNew.htm">new</a></b> GroupParticipating(m_server));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;group2-&gt;<a href="CppAdd.htm">Add</a>Participant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group1-&gt;RemoveParticipant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p[i]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(group1-&gt;GetSize() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(group2-&gt;GetSize() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;m_participating.insert(group2);<br/>
&nbsp;&nbsp;m_signal_groups_changed();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>MoveAllToFinished moves all Participants to the Finished Group<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::MoveAllToFinished()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_not_logged_in-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_finished-&gt;<a href="CppAdd.htm">Add</a>FinishedParticipant(<b><a href="CppThis.htm">this</a></b>-&gt;m_not_logged_in-&gt;RemoveParticipant(p));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_logged_in-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_finished-&gt;<a href="CppAdd.htm">Add</a>FinishedParticipant(m_logged_in-&gt;RemoveParticipant(p));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_participating.begin(),m_participating.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupParticipating&gt; group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> group-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,group](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_finished-&gt;<a href="CppAdd.htm">Add</a>FinishedParticipant(group-&gt;RemoveParticipant(p));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;m_signal_groups_changed();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Moves all logged in Participants to the GroupPartipating<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::MoveLoggedInToParticipating()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_logged_in-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppConst.htm">const</a></b> GroupAssignerPredetermined * <b><a href="CppConst.htm">const</a></b> a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> GroupAssignerPredetermined*&gt;(p-&gt;GetGroupAssigner()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> group_index <a href="CppOperatorAssign.htm">=</a> a-&gt;GetGroup();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If there ain't a group with <b><a href="CppThis.htm">this</a></b> index, create it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (<a href="CppStdFind_if.htm">std::find_if</a>(m_participating.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_participating.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[group_index](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> GroupParticipating&gt;&amp; group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> group-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> group_index;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> m_participating.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupParticipating&gt; new_group(<b><a href="CppNew.htm">new</a></b> GroupParticipating(m_server));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_participating.insert(new_group);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume the group with <b><a href="CppThis.htm">this</a></b> index can be found<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAny_of.htm">std::any_of</a>(m_participating.begin(),m_participating.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[group_index](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> GroupParticipating&gt;&amp; group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> group-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> group_index;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Retrieve the group with <b><a href="CppThis.htm">this</a></b> index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> new_group_iter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(m_participating.begin(),m_participating.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[group_index](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> GroupParticipating&gt;&amp; group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> group-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> group_index;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*new_group_iter)-&gt;<a href="CppAdd.htm">Add</a>Participant(m_logged_in-&gt;RemoveParticipant(p));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;m_signal_groups_changed();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Remove all Participants<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::Reset()<br/>
{<br/>
&nbsp;&nbsp;m_finished-&gt;Clear();<br/>
&nbsp;&nbsp;m_last_id_participant <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;m_logged_in-&gt;Clear();<br/>
&nbsp;&nbsp;m_not_logged_in-&gt;Clear();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_participating.resize(0);<br/>
&nbsp;&nbsp;m_participating.clear();<br/>
&nbsp;&nbsp;GroupParticipating::Reset();<br/>
<br/>
&nbsp;&nbsp;m_signal_groups_changed();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set the Participants <b><a href="CppFor.htm">for</a></b> the coming experiment<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups::SetParticipants(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; &gt; participants)<br/>
{<br/>
&nbsp;&nbsp;Reset();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_not_logged_in-&gt;GetSize() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(participants.begin(),participants.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_not_logged_in-&gt;<a href="CppAdd.htm">Add</a>Participant(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;m_signal_groups_changed();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Groups&amp; groups)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;groups&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*groups.m_finished)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> groups.m_last_id_participant<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*groups.m_logged_in)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*groups.m_not_logged_in);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(groups.m_participating.begin(),groups.m_participating.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;os](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupParticipating&gt;&amp; group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*group);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/groups&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstlogfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstlogfile.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>LOG<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>LOG<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>LogFile is the log file.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>A crashed session should be able to be restored it.<br/>
<b><a href="CppStruct.htm">struct</a></b> LogFile<br/>
{<br/>
&nbsp;&nbsp;LogFile();<br/>
&nbsp;&nbsp;LogFile(<b><a href="CppConst.htm">const</a></b> LogFile&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;LogFile&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> LogFile&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clear the LogFile NEVER DO SO!<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> ClearLogFile();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Log a Participant his/her last action<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> LogAction(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Log a Participant being as<b><a href="CppSigned.htm">signed</a></b> to a group<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> LogAssignGroup(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Log a Participant having as<b><a href="CppSigned.htm">signed</a></b> his/her Payoff<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> LogAssignPayoff(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Log a ChatMessage from a Participant<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> LogChatMessage(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt;&amp; message);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Log that the experiment its state/phase has been changed<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> LogExperiment<a href="CppState.htm">State</a>Changed(<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>* <b><a href="CppConst.htm">const</a></b> new_state);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Log that a Participant has logged in<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Login(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Log a Participant has logged out (although he/she will remain in <a href="CppMemory.htm">memory</a>)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Logout(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Log the parameters<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> LogParameters(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Log that a ParticipantDialog has its ParticipantDialog<a href="CppState.htm">State</a> changed<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> LogParticipantDialog<a href="CppState.htm">State</a>Changed(<b><a href="CppConst.htm">const</a></b> ParticipantDialog<a href="CppState.htm">State</a>* <b><a href="CppConst.htm">const</a></b> new_state);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Log a Participant having survived a period<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> LogReAssignPayoff(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Log a Participant being removed from a group<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> LogRemoveParticipant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Log a Participant his/her vote<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> LogVote(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename of the log file where all logged operations are written to<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_log_filename;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~LogFile();<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(LogFile*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppFriend.htm">Befriend</a> <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> LogFile&amp; logfile);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns date in YYYY-MM-DD format<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetDateIso8601.htm">GetDateIso8601</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetDateIso8601.htm">GetDateIso8601</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetTime.htm">GetTime</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetTime.htm">GetTime</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns the current date and <a href="CppTime.htm">time</a> as a YYYY_MM_DD_HH_MM_SS <a href="CppStdString.htm">std::string</a>,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppFor.htm">for</a></b> example '2011_07_01_11_35_38'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetTimestamp.htm">GetTimestamp</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetTimestamp.htm">GetTimestamp</a>();<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> LogFile&amp; logfile);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> LOG<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstlogfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstlogfile.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/date_<a href="CppTime.htm">time</a>/posix_<a href="CppTime.htm">time</a>/posix_<a href="CppTime.htm">time</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/date_<a href="CppTime.htm">time</a>/gregorian/gregorian.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a><a href="CppChat.htm">chat</a>message.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>chooseactionoption.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoffs.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>votingoption.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::LogFile()<br/>
&nbsp;&nbsp;: m_log_filename("log" <a href="CppOperatorPlus.htm">+</a> <a href="CppGetTimestamp.htm">GetTimestamp</a>() <a href="CppOperatorPlus.htm">+</a> ".xml")<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>f<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "‭&lt;?xml <a href="CppVersion.htm">version</a>=\"1.0\" encoding=\"utf-8\"?&gt;"<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "‭&lt;logfile name=\"<a href="ProjectGtst.htm">gtst</a>\" xml:lang=\"en\"&gt;";<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::~LogFile()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str(),<a href="CppStd.htm">std</a>::ios::app);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "‎&lt;/logfile&gt;";<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::ClearLogFile()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clear log file<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> <a href="CppGetTime.htm">GetTime</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!t.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Pop back trailing newlines<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (t[t.size() <a href="CppOperatorMinus.htm">-</a>1] <a href="CppOperatorEqual.htm">==</a> '\n')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.resize(t.size() <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;START&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/START&gt;\n";<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">///</a>Returns date in YYYY-MM-DD format<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetDateIso8601.htm">GetDateIso8601</a>.htm<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::<a href="CppGetDateIso8601.htm">GetDateIso8601</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::gregorian::date today<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::gregorian::day_clock::local_day();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::gregorian::to_iso_extended_string(today);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.size()<a href="CppOperatorEqual.htm">==</a>10);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s[4]<a href="CppOperatorEqual.htm">==</a>'-');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s[7]<a href="CppOperatorEqual.htm">==</a>'-');<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get the current <a href="CppTime.htm">time</a><br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetTime.htm">GetTime</a>.htm<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::<a href="CppGetTime.htm">GetTime</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the local <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::posix_<a href="CppTime.htm">time</a>::p<a href="CppTime.htm">time</a> now<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::posix_<a href="CppTime.htm">time</a>::second_clock::local_<a href="CppTime.htm">time</a>();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> the <a href="CppTime.htm">time</a> to <a href="CppStdStringstream.htm">std::stringstream</a><br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> now.<a href="CppTime.htm">time</a>_of_day();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Return the <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Returns the current date and <a href="CppTime.htm">time</a> as a YYYY_MM_DD_HH_MM_SS <a href="CppStdString.htm">std::string</a>,<br/>
<a href="CppComment.htm">///</a><b><a href="CppFor.htm">for</a></b> example '2011_07_01_11_35_38'<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetTimestamp.htm">GetTimestamp</a>.htm<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::<a href="CppGetTimestamp.htm">GetTimestamp</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppGetDateIso8601.htm">GetDateIso8601</a>() <a href="CppOperatorPlus.htm">+</a> '_' <a href="CppOperatorPlus.htm">+</a> <a href="CppGetTime.htm">GetTime</a>();<br/>
&nbsp;&nbsp;<a href="CppStdReplace.htm">std::replace</a>(s.begin(),s.end(),':','_');<br/>
&nbsp;&nbsp;<a href="CppStdReplace.htm">std::replace</a>(s.begin(),s.end(),'-','_');<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::LogAction(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant-&gt;CanGetId());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!participant-&gt;GetActions().empty());<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str(),<a href="CppStd.htm">std</a>::ios::app);<br/>
&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;choose_action&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> participant-&gt;GetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;action&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *participant-&gt;GetActions().back()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/action&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/choose_action&gt;\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::LogAssignGroup(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(group);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str(),<a href="CppStd.htm">std</a>::ios::app);<br/>
&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;assign_group&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (participant-&gt;CanGetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppStdString.htm">std::string</a>("unassigned"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;group&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> group-&gt;GetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/group&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/assign_group&gt;\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::LogAssignPayoff(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str(),<a href="CppStd.htm">std</a>::ios::app);<br/>
&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;assign_payoff&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;participant&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> participant-&gt;GetId() <a href="CppComment.htm">//</a>Only log the Participant his/her ID<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/participant&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *participant-&gt;GetPayoffs()-&gt;GetLast()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/assign_payoff&gt;\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::LogExperiment<a href="CppState.htm">State</a>Changed(<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>* new_state)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str(),<a href="CppStd.htm">std</a>::ios::app);<br/>
&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;experimentstate_change&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;new_period&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> new_state-&gt;GetPeriod()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/new_period&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;new_cycle&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> new_state-&gt;GetCycle()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/new_cycle&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;new_state&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> new_state-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/new_state&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/experimentstate_change&gt;\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::Login(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str(),<a href="CppStd.htm">std</a>::ios::app);<br/>
&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;login&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/login&gt;\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::Logout(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str(),<a href="CppStd.htm">std</a>::ios::app);<br/>
&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;logout&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/logout&gt;\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::LogReAssignPayoff(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str(),<a href="CppStd.htm">std</a>::ios::app);<br/>
&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;reassign_payoff&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;participant&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> participant-&gt;GetId() <a href="CppComment.htm">//</a>Only log the Participant his/her ID<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/participant&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *participant-&gt;GetPayoffs()-&gt;GetLast()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/reassign_payoff&gt;\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::LogRemoveParticipant(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(group);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant-&gt;CanGetId());<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str(),<a href="CppStd.htm">std</a>::ios::app);<br/>
&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;remove_participant&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> participant-&gt;GetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;old_group&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> group-&gt;GetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/old_group&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/remove_participant&gt;\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::LogVote(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant-&gt;CanGetId());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!participant-&gt;GetVotes().empty());<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str(),<a href="CppStd.htm">std</a>::ios::app);<br/>
&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;vote&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> participant-&gt;GetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;voting_option&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *participant-&gt;GetVotes().back()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/voting_option&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/vote&gt;\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::LogParameters(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str(),<a href="CppStd.htm">std</a>::ios::app);<br/>
&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;set_parameters&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*parameters.get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/set_parameters&gt;\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::LogParticipantDialog<a href="CppState.htm">State</a>Changed(<b><a href="CppConst.htm">const</a></b> ParticipantDialog<a href="CppState.htm">State</a>* <b><a href="CppConst.htm">const</a></b> new_state)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str(),<a href="CppStd.htm">std</a>::ios::app);<br/>
<br/>
&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;participantdialogstate_change&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> new_state-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/participantdialogstate_change&gt;\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile::LogChatMessage(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt;&amp; message)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(m_log_filename.c_str(),<a href="CppStd.htm">std</a>::ios::app);<br/>
&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppChat.htm">chat</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;participant_id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> participant-&gt;GetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/participant_id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*message)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppChat.htm">chat</a>&gt;\n";<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> LogFile&amp; logfile)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;logfile&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;log_filename&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> logfile.m_log_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/log_filename&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/logfile&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstmenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstmenudialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>MENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>MENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWContainerWidget.htm">WContainerWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPushButton.htm">WPushButton</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAbout.htm">about</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The <a href="CppMain.htm">main</a> menu dialog<br/>
<b><a href="CppStruct.htm">struct</a></b> MenuDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a MenuDialog <b><a href="CppUsing.htm">using</a></b> one <a href="CppIpAddress.htm">IP address</a> per Participant<br/>
&nbsp;&nbsp;MenuDialog(<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a> * <b><a href="CppConst.htm">const</a></b> ip_address);<br/>
&nbsp;&nbsp;MenuDialog(<b><a href="CppConst.htm">const</a></b> MenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;MenuDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> MenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~MenuDialog() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(MenuDialog*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the <a href="CppWtAboutDialog.htm">WtAboutDialog</a><br/>
&nbsp;&nbsp;<a href="CppWtAboutDialog.htm">WtAboutDialog</a> * CreateNew<a href="CppAbout.htm">About</a>Dialog() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <b><a href="CppNew.htm">new</a></b> welcome dialog<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * CreateNewWelcomeDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a> * <b><a href="CppConst.htm">const</a></b> ip_address) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <b><a href="CppNew.htm">new</a></b> '<a href="CppAbout.htm">About</a> the experiment' dialog<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * CreateNew<a href="CppAbout.htm">About</a>TheExperimentDialog() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <b><a href="CppNew.htm">new</a></b> '<a href="CppAbout.htm">About</a> the experiment | Experiment flow' dialog<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * CreateNew<a href="CppAbout.htm">About</a>TheExperimentFlowDialog() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <b><a href="CppNew.htm">new</a></b> '<a href="CppAbout.htm">About</a> the experiment | General' dialog<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * CreateNew<a href="CppAbout.htm">About</a>TheExperimentGeneralDialog() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <b><a href="CppNew.htm">new</a></b> '<a href="CppAbout.htm">About</a> the experiment | Parameters' dialog<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * CreateNew<a href="CppAbout.htm">About</a>TheExperimentParametersDialog() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> m_server;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppAbout.htm">About</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppAbout.htm">About</a> GetAbout();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the program's <a href="CppVersion.htm">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History();<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstmenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstmenudialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>menudialog.h"<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/filesystem.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWGroupBox.htm">WGroupBox</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWImage.htm">WImage</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLineEdit.htm">WLineEdit</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWText.htm">WText</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTextArea.htm">WTextArea</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTimer.htm">WTimer</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWStackedWidget.htm">WStackedWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWMenu.htm">WMenu</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppQFile.htm">QFile</a> must be <a href="CppInclude.htm">#include</a>d after <a href="CppWt.htm">Wt</a> <a href="CppHeaderFile.htm">header file</a>s<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAbout.htm">about</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppCounter.htm">counter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administratordialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a><a href="CppDebug.htm">debug</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstateassignpayoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate<a href="CppChat.htm">chat</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatechooseaction.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatefinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstategroupassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstategroupreassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatenotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstateviewresultsgroup.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstateviewresultsvoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatevoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>resources.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppIpaddress.htm">ipaddress</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppLed.htm">led</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppLedWidget.htm">ledwidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMultipleChoiceQuestion.htm">multiplechoicequestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMultipleChoiceQuestionDialog.htm">multiplechoicequestiondialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRainbow.htm">rainbow</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShape.htm">shape</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShapeWidget.htm">shapewidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtAboutDialog.htm">wtaboutdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtAutoConfig.htm">wtautoconfig</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtGroupWidget.htm">wtgroupwidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtMultipleChoiceQuestionDialog.htm">wtmultiplechoicequestiondialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtSelectFileDialog.htm">wtselectfiledialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusherClient.htm">wtserverpusherclient</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtShapeGroupWidget.htm">wtshapegroupwidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtShapeWidget.htm">wtshapewidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtTimedServerPusher.htm">wttimedserverpusher</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtTimedServerPusherClient.htm">wttimedserverpusherclient</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::MenuDialog::MenuDialog(<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a> * <b><a href="CppConst.htm">const</a></b> ip_address)<br/>
&nbsp;&nbsp;: m_server(Server::Get())<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server);<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Main<a href="CppTime.htm">Time</a>r::Get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_server-&gt;TestMe();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWText.htm">Wt::WText</a> * <b><a href="CppConst.htm">const</a></b> title <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("<a href="ProjectGtst.htm">GTST</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;title-&gt;setStyleClass("title");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(title);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Menu<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWStackedWidget.htm">Wt::WStackedWidget</a> * <b><a href="CppConst.htm">const</a></b> contents <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWStackedWidget.htm">Wt::WStackedWidget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenu.htm">Wt::WMenu</a> * <b><a href="CppConst.htm">const</a></b> menu <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenu.htm">Wt::WMenu</a>(contents,<a href="CppWt.htm">Wt</a>::Horizontal);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Using CSS style<b><a href="CppClass.htm">class</a></b> is the best (only?) way to display the menu well<br/>
&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;setStyleClass("menu");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Welcome",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNewWelcomeDialog((ip_address)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Participant",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ParticipantDialog(m_server,ip_address));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Administrator",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> AdministratorDialog(m_server));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppDebug.htm">Debug</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppDebug.htm">Debug</a>Dialog(m_server));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppAbout.htm">About</a> the experiment",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNew<a href="CppAbout.htm">About</a>TheExperimentDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppAbout.htm">About</a> <b><a href="CppThis.htm">this</a></b> program",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNew<a href="CppAbout.htm">About</a>Dialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display menu on top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(menu);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display contents below menu<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(contents);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppWtAboutDialog.htm">WtAboutDialog</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::MenuDialog::CreateNew<a href="CppAbout.htm">About</a>Dialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a <a href="CppOperatorAssign.htm">=</a> GetAbout();<br/>
&nbsp;&nbsp;<a href="CppWtAboutDialog.htm">WtAboutDialog</a> * <b><a href="CppConst.htm">const</a></b> d <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWtAboutDialog.htm">WtAboutDialog</a>(a,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
}<br/>
<br/>
<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::MenuDialog::CreateNew<a href="CppAbout.htm">About</a>TheExperimentDialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <b><a href="CppConst.htm">const</a></b> dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>;<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Menu<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWStackedWidget.htm">Wt::WStackedWidget</a> * <b><a href="CppConst.htm">const</a></b> contents <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWStackedWidget.htm">Wt::WStackedWidget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenu.htm">Wt::WMenu</a> * <b><a href="CppConst.htm">const</a></b> menu <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenu.htm">Wt::WMenu</a>(contents,<a href="CppWt.htm">Wt</a>::Horizontal);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Using CSS style<b><a href="CppClass.htm">class</a></b> is the best (only?) way to display the menu well<br/>
&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;setStyleClass("menu");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"General",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNew<a href="CppAbout.htm">About</a>TheExperimentGeneralDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Experiment flow",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNew<a href="CppAbout.htm">About</a>TheExperimentFlowDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWMenuItem.htm">Wt::WMenuItem</a> * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWMenuItem.htm">Wt::WMenuItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Parameters",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNew<a href="CppAbout.htm">About</a>TheExperimentParametersDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(menu);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display contents below menu<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(contents);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dialog;<br/>
}<br/>
<br/>
<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::MenuDialog::CreateNew<a href="CppAbout.htm">About</a>TheExperimentFlowDialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <b><a href="CppConst.htm">const</a></b> dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>;<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenameExperiment(),dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenamePeriod(),dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenameCycle(),dialog);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dialog;<br/>
}<br/>
<br/>
<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::MenuDialog::CreateNew<a href="CppAbout.htm">About</a>TheExperimentGeneralDialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <b><a href="CppConst.htm">const</a></b> dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>;<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("<a href="ProjectGtst.htm">GTST</a> (\'Game Theory ServerT\') is an open source program",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("<b><a href="CppFor.htm">for</a></b> performing game theory experiments.",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("When <a href="ProjectGtst.htm">GTST</a> is started on a server, both administrators",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("and participants can log in and <b><a href="CppDo.htm">do</a></b> game theory experiments.",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("<a href="ProjectGtst.htm">GTST</a> has been developed by:",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("* Lucas Molleman: researcher",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("* Piet van den Berg: researcher",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("* Richel Bilderbeek: programming",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dialog;<br/>
}<br/>
<br/>
<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::MenuDialog::CreateNew<a href="CppAbout.htm">About</a>TheExperimentParametersDialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <b><a href="CppConst.htm">const</a></b> dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>;<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> box <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("Assign payoff",dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;box-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenameParticipantDialogAssignPayoff()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> box <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("<a href="CppChat.htm">Chat</a>",dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;box-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenameParticipantDialog<a href="CppChat.htm">Chat</a>()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> box <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("Choose action",dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;box-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenameParticipantDialogChooseAction()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> box <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("Finished",dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;box-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenameParticipantDialogFinished()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> box <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("Group assign",dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;box-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenameParticipantDialogGroupAssign()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> box <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("Group re-assign",dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;box-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenameParticipantDialogGroupReAssign()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> box <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("Logged in",dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;box-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenameParticipantDialogLoggedIn()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> box <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("Not logged in",dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;box-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenameParticipantDialogNotLoggedIn()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> box <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("View results group",dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;box-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenameParticipantDialogViewResultsGroup()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> box <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("View results voting",dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;box-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenameParticipantDialogViewResultsVoting()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> box <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("Voting",dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;box-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWImage.htm">Wt::WImage</a>(Resources::GetImageFilenameParticipantDialogVoting()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dialog;<br/>
}<br/>
<br/>
<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::MenuDialog::CreateNewWelcomeDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a> * <b><a href="CppConst.htm">const</a></b> ip_address) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWContainerWidget.htm">Wt::WContainerWidget</a> * <b><a href="CppConst.htm">const</a></b> dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>;<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Welcome to <a href="ProjectGtst.htm">GTST</a>",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Choose one of the top items to log in as a participant or administrator",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Your <a href="CppIpAddress.htm">IP address</a> is ",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(ip_address-&gt;Get().c_str(),dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dialog;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppAbout.htm">About</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::MenuDialog::GetAbout()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="ProjectGtst.htm">GTST</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"game theory experiment server",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"the 1st of September 2011",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-2014",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>History());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppFunctionParser.htm">FunctionParser</a> (by Warp) <a href="CppVersion.htm">version</a>: 4.4.3");<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppFuzzy_equal_to.htm">Fuzzy_equal_to</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppIpAddress.htm">IpAddress</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIpAddress.htm">IpAddress</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppLed.htm">Led</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppLed.htm">Led</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppLedWidget.htm">LedWidget</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppLedWidget.htm">LedWidget</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppMultipleChoiceQuestionDialog.htm">MultipleChoiceQuestionDialog</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppMultipleChoiceQuestionDialog.htm">MultipleChoiceQuestionDialog</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQuestion.htm">Question</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQuestion.htm">Question</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQuestionDialog.htm">QuestionDialog</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQuestionDialog.htm">QuestionDialog</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppRainbow.htm">Rainbow</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppRainbow.htm">Rainbow</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppShape.htm">Shape</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppShape.htm">Shape</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppShapeWidget.htm">ShapeWidget</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppShapeWidget.htm">ShapeWidget</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppStopwatch.htm">Stopwatch</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppStopwatch.htm">Stopwatch</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppTrace.htm">Trace</a> <a href="CppVersion.htm">version</a>: "&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppTrace.htm">Trace</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWidget.htm">Widget</a> <a href="CppVersion.htm">version</a>: "&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppWidget.htm">Widget</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtAutoConfig.htm">WtAutoConfig</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtAutoConfig.htm">WtAutoConfig</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtGroupWidget.htm">WtGroupWidget</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtGroupWidget.htm">WtGroupWidget</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtMultipleChoiceQuestionDialog.htm">WtMultipleChoiceQuestionDialog</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtMultipleChoiceQuestionDialog.htm">WtMultipleChoiceQuestionDialog</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWt.htm">Wt</a><a href="CppQuestionDialog.htm">QuestionDialog</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWt.htm">Wt</a><a href="CppQuestionDialog.htm">QuestionDialog</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtServerPusher.htm">WtServerPusher</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtServerPusher.htm">WtServerPusher</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtServerPusherClient.htm">WtServerPusherClient</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtServerPusherClient.htm">WtServerPusherClient</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtSelectFileDialog.htm">WtSelectFileDialog</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtSelectFileDialog.htm">WtSelectFileDialog</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtShapeGroupWidget.htm">WtShapeGroupWidget</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtShapeGroupWidget.htm">WtShapeGroupWidget</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtShapeWidget.htm">WtShapeWidget</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtShapeWidget.htm">WtShapeWidget</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::MenuDialog::Get<a href="CppVersion.htm">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.02";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::MenuDialog::Get<a href="CppVersion.htm">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-09: <a href="CppVersion.htm">Version</a> 0.01: initial <a href="CppVersion.htm">version</a>, then called ProjectGameTheory",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-10: <a href="CppVersion.htm">Version</a> 0.02: made bulletproof (at that <a href="CppTime.htm">time</a>)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-11: <a href="CppVersion.htm">Version</a> 0.03: added group <a href="CppChat.htm">chat</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-11: <a href="CppVersion.htm">Version</a> 0.04: added experiment parameter file upload",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-11: <a href="CppVersion.htm">Version</a> 0.05: added \'I want to participate\' checkbox",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-12: <a href="CppVersion.htm">Version</a> 0.06: added first step in adding parameter options",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-12: <a href="CppVersion.htm">Version</a> 0.07: visualizing unassigned participants",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-13: <a href="CppVersion.htm">Version</a> 0.08: added <a href="CppIpAddress.htm">IP address</a>, added choosing actions by participants",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-16: <a href="CppVersion.htm">Version</a> 0.09: improved administrator section",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-16: <a href="CppVersion.htm">Version</a> 0.10: fixed group <a href="CppChat.htm">chat</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-16: <a href="CppVersion.htm">Version</a> 0.11: added <a href="CppChat.htm">chat</a> tags",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-16: <a href="CppVersion.htm">Version</a> 0.12: administrator can set experiment phase",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-16: <a href="CppVersion.htm">Version</a> 0.13: one <a href="CppIpAddress.htm">IP address</a> per participant",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-17: <a href="CppVersion.htm">Version</a> 0.14: added Chinese sayings, added choose action state",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-17: <a href="CppVersion.htm">Version</a> 0.15: add <a href="CppTime.htm">time</a>r to chatting, chosing actions and viewing group results",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-18: <a href="CppVersion.htm">Version</a> 0.16: standarized parameters file, implemented first step of Parameters",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-19: <a href="CppVersion.htm">Version</a> 0.17: created Parameters structure with <b><a href="CppDefault.htm">default</a></b> <a href="CppInitialize.htm">initialization</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-19: <a href="CppVersion.htm">Version</a> 0.18: created complete backbone of the program",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-19: <a href="CppVersion.htm">Version</a> 0.19: added waiting <b><a href="CppFor.htm">for</a></b> all participants to login",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-19: <a href="CppVersion.htm">Version</a> 0.20: ID\'s are as<b><a href="CppSigned.htm">signed</a></b> to participants at login",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-23: <a href="CppVersion.htm">Version</a> 0.21: implemented voting and choose action step that waits <b><a href="CppFor.htm">for</a></b> all before going on",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-23: <a href="CppVersion.htm">Version</a> 0.22: assign and view payoffs from IPGG",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-23: <a href="CppVersion.htm">Version</a> 0.23: added experiment flow",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-23: <a href="CppVersion.htm">Version</a> 0.24: added asyn<a href="CppChrono.htm">chrono</a>us participance",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-23: <a href="CppVersion.htm">Version</a> 0.25: fixed multiple-vote error, added viewing voting results",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-23: <a href="CppVersion.htm">Version</a> 0.26: added read-only textarea to stylesheet",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-23: <a href="CppVersion.htm">Version</a> 0.27: wait <b><a href="CppFor.htm">for</a></b> all participants to vote/choose action by <b><a href="CppDefault.htm">default</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-23: <a href="CppVersion.htm">Version</a> 0.28: repeat the IPGG as often as desired",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-24: <a href="CppVersion.htm">Version</a> 0.29: improved <a href="CppTime.htm">time</a> display, removed obsolete <b><a href="CppClass.htm">class</a></b>, improved <a href="CppDocumentation.htm">documentation</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-24: <a href="CppVersion.htm">Version</a> 0.30: polished GUI",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-24: <a href="CppVersion.htm">Version</a> 0.31: fixed important <a href="CppBug.htm">bug</a> in flow, added option to <b><a href="CppDelete.htm">delete</a></b> patricipants",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-24: <a href="CppVersion.htm">Version</a> 0.32: implemented ServerTest::TestParticipant",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-25: <a href="CppVersion.htm">Version</a> 0.33: implemented ServerTest::TestServer1",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-25: <a href="CppVersion.htm">Version</a> 0.34: implemented ServerTest::TestServer4, updated reading from a parameter file",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-26: <a href="CppVersion.htm">Version</a> 0.35: added random range in IPGG cycles from parameter file",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-26: <a href="CppVersion.htm">Version</a> 0.36: added geometric distribution in IPGG cycles from parameter file",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-26: <a href="CppVersion.htm">Version</a> 0.37: added dynamics group formation, renamed program to <a href="ProjectGtst.htm">GTST</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-28: <a href="CppVersion.htm">Version</a> 0.38: fixed asyn<a href="CppChrono.htm">chrono</a>us participation",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-05-29: <a href="CppVersion.htm">Version</a> 0.39: major refactoring, added Participant<a href="CppState.htm">State</a> to Participant",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-06-01: <a href="CppVersion.htm">Version</a> 0.40: major refactoring, put Participants in Groups",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-06-04: <a href="CppVersion.htm">Version</a> 0.41: major refactoring, added <a href="CppXml.htm">XML</a> pretty printing of parameter files",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-06-11: <a href="CppVersion.htm">Version</a> 0.42: major refactoring, added <a href="CppDebug.htm">Debug</a> menu item, successful <b><a href="CppStatic.htm">static</a></b> group assignment trials",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-06-11: <a href="CppVersion.htm">Version</a> 0.43: successful dynamic group assignment trials",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-06-20: <a href="CppVersion.htm">Version</a> 0.44: added majority voting and the consensus reached",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-06-21: <a href="CppVersion.htm">Version</a> 0.45: respond to the results of the added majority voting",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-06-22: <a href="CppVersion.htm">Version</a> 0.46: start <b><a href="CppUsing.htm">using</a></b> <a href="CppWtSafeTimer.htm">WtSafeTimer</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-06-22: <a href="CppVersion.htm">Version</a> 0.47: <a href="CppWtSafeTimer.htm">WtSafeTimer</a> appears to yield a stable heartbeat",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-06-26: <a href="CppVersion.htm">Version</a> 0.48: added payoff to earnings parameter option",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-07-03: <a href="CppVersion.htm">Version</a> 0.49: Fixed <a href="CppBug.htm">bug</a>, added <a href="CppWtSelectFileDialog.htm">WtSelectFileDialog</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-07-14: <a href="CppVersion.htm">Version</a> 0.50: added first step of quiz state, done some <a href="CppGprof.htm">gprof</a> <a href="CppProfiling.htm">profiling</a>, made some small cosmetic changes",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-07-15: <a href="CppVersion.htm">Version</a> 0.51: added download of log files, prevent user uploading parameter file with wrong groups or wrong-sized groups",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-07-19: <a href="CppVersion.htm">Version</a> 0.52: changed <a href="CppChar.htm">character</a> <a href="CppChat.htm">chat</a> tags to <a href="CppWtShapeWidget.htm">WtShapeWidget</a>s",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-07-26: <a href="CppVersion.htm">Version</a> 0.53: let participant know what happens to him/her each period",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-08-05: <a href="CppVersion.htm">Version</a> 0.54: <b><a href="CppSwitch.htm">switch</a></b>ed to <b><a href="CppUsing.htm">using</a></b> <a href="CppWtServerPusher.htm">WtServerPusher</a> and <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-08-08: <a href="CppVersion.htm">Version</a> 0.55: fixed <a href="CppChat.htm">chat</a> tag errors (in <a href="CppWtShapeWidget.htm">WtShapeWidget</a>)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-08-11: <a href="CppVersion.htm">Version</a> 0.56: getting it to work at single-core server",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-08-15: <a href="CppVersion.htm">Version</a> 0.57: many small <a href="CppBug.htm">bug</a>fixes, improved <a href="CppXml.htm">XML</a> produced",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-08-15: <a href="CppVersion.htm">Version</a> 0.58: policing visible <b><a href="CppFor.htm">for</a></b> contestants and logged in <a href="CppXml.htm">XML</a>, show ParticipantDialog and AdministratorDialog being responsive",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-08-19: <a href="CppVersion.htm">Version</a> 0.59: fixed <a href="CppBug.htm">bug</a>s in not able to have two experiments after one another, fixed <a href="CppDeadlock.htm">deadlock</a>, show voting result, improved administrator's view of the groups",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-08-29: <a href="CppVersion.htm">Version</a> 1.00: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-09-01: <a href="CppVersion.htm">Version</a> 1.01: changed text and GUI, removed status <a href="CppLed.htm">LED</a>s in <a href="CppDebug.htm">debug</a> <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-09-11: <a href="CppVersion.htm">Version</a> 1.02: small <a href="CppBug.htm">bug</a>fix",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-04-28: <a href="CppVersion.htm">Version</a> 1.03: cleanup"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparameters.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Parameters <b><a href="CppFor.htm">for</a></b> an experiment<br/>
<b><a href="CppStruct.htm">struct</a></b> Parameters<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <b><a href="CppDefault.htm">default</a></b>-<a href="CppConstructor.htm">construct</a>ed Parameters<br/>
&nbsp;&nbsp;Parameters(Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;Parameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Parameters&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Parameters&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <b><a href="CppDefault.htm">default</a></b> non-logged in Participant<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; CreateDefaultParticipant();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Deletes all Participant <a href="CppInstance.htm">instances</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DeleteParticipants();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set a Parameter from file<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ReadFromFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersAssignPayoff as a read-and-write <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersAssignPayoff&gt; GetAssignPayoff() { <b><a href="CppReturn.htm">return</a></b> m_assign_payoff; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersAssignPayoff as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersAssignPayoff&gt; GetAssignPayoff() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_assign_payoff; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Parameters<a href="CppChat.htm">Chat</a> as a read-and-write <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters<a href="CppChat.htm">Chat</a>&gt; Get<a href="CppChat.htm">Chat</a>() { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppChat.htm">chat</a>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Parameters<a href="CppChat.htm">Chat</a> as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Parameters<a href="CppChat.htm">Chat</a>&gt; Get<a href="CppChat.htm">Chat</a>() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppChat.htm">chat</a>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersChooseAction as a read-and-write <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersChooseAction&gt; GetChooseAction() { <b><a href="CppReturn.htm">return</a></b> m_choose_action; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersChooseAction as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersChooseAction&gt; GetChooseAction() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_choose_action; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersFinished as a read-and-write <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersFinished&gt; GetFinished() { <b><a href="CppReturn.htm">return</a></b> m_finished; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersFinished as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersFinished&gt; GetFinished() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_finished; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersGroupAssign as a read-and-write <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersGroupAssign&gt; GetGroupAssign() { <b><a href="CppReturn.htm">return</a></b> m_group_assign; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersGroupAssign as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersGroupAssign&gt; GetGroupAssign() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_group_assign; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersGroupReAssign as a read-and-write <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersGroupReAssign&gt; GetGroupReAssign() { <b><a href="CppReturn.htm">return</a></b> m_group_reassign; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersGroupReAssign as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersGroupReAssign&gt; GetGroupReAssign() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_group_reassign; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersQuiz as a read-and-write <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersQuiz&gt; GetQuiz() { <b><a href="CppReturn.htm">return</a></b> m_quiz; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersQuiz as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersQuiz&gt; GetQuiz() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_quiz; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersViewResultsAll as a read-and-write <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ParametersViewResultsAll * GetViewResultsAll();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersViewResultsAll as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> ParametersViewResultsAll * GetViewResultsAll() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersViewResultsGroup as a read-and-write <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersViewResultsGroup&gt; GetViewResultsGroup() { <b><a href="CppReturn.htm">return</a></b> m_view_results_group; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersViewResultsGroup as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersViewResultsGroup&gt; GetViewResultsGroup() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_view_results_group; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersViewResultsVoting as a read-and-write <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersViewResultsVoting&gt; GetViewResultsVoting() { <b><a href="CppReturn.htm">return</a></b> m_view_results_voting; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersViewResultsVoting as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersViewResultsVoting&gt; GetViewResultsVoting() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_view_results_voting; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersVoting as a read-and-write <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersVoting&gt; GetVoting() { <b><a href="CppReturn.htm">return</a></b> m_voting; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersVoting as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersVoting&gt; GetVoting() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_voting; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participants as a read-only reference<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; &gt;&amp; GetParticipants() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_participants; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participants as a reference<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; &gt;&amp; GetParticipants() { <b><a href="CppReturn.htm">return</a></b> m_participants; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a> Participants to Parameters<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Participant(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; participant);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Parameters() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Parameters*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParametersAssignPayoff<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersAssignPayoff&gt; m_assign_payoff;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Parameters<a href="CppChat.htm">Chat</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters<a href="CppChat.htm">Chat</a>&gt; m_<a href="CppChat.htm">chat</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParametersChooseAction<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersChooseAction&gt; m_choose_action;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParametersFinished<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersFinished&gt; m_finished;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParametersGroupAssign<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersGroupAssign&gt; m_group_assign;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParametersGroupReAssign<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersGroupReAssign&gt; m_group_reassign;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Unassigned Participant colection<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; &gt; m_participants;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParametersQuiz<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersQuiz&gt; m_quiz;<br/>
<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> m_server;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParametersViewResultsGroup<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersViewResultsGroup&gt; m_view_results_group;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParametersViewResultsVoting<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersViewResultsVoting&gt; m_view_results_voting;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParametersVoting<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParametersVoting&gt; m_voting;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a line in a Parameter file<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Split a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator);<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparameters.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a><a href="CppChat.htm">chat</a><a href="CppShape.htm">shape</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppIpaddress.htm">ipaddress</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShape.htm">shape</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShapeWidget.htm">shapewidget</a>.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtShapeWidget.htm">wtshapewidget</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Parameters::Parameters(Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: m_assign_payoff(<b><a href="CppNew.htm">new</a></b> ParametersAssignPayoff),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppChat.htm">chat</a>(<b><a href="CppNew.htm">new</a></b> Parameters<a href="CppChat.htm">Chat</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_choose_action(<b><a href="CppNew.htm">new</a></b> ParametersChooseAction),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_finished(<b><a href="CppNew.htm">new</a></b> ParametersFinished),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_group_assign(<b><a href="CppNew.htm">new</a></b> ParametersGroupAssign),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_group_reassign(<b><a href="CppNew.htm">new</a></b> ParametersGroupReAssign),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_participants{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_quiz(<b><a href="CppNew.htm">new</a></b> ParametersQuiz),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_server(server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_view_results_group(<b><a href="CppNew.htm">new</a></b> ParametersViewResultsGroup),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_view_results_voting(<b><a href="CppNew.htm">new</a></b> ParametersViewResultsVoting),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_voting(<b><a href="CppNew.htm">new</a></b> ParametersVoting)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_participants.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Do not create Participants by <b><a href="CppDefault.htm">default</a></b> as <b><a href="CppThis.htm">this</a></b> will start a <b><a href="CppDefault.htm">default</a></b> experiment");<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppAdd.htm">Add</a> Participants to Parameters<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Parameters::<a href="CppAdd.htm">Add</a>Participant(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppAdd.htm">Add</a>ed participant " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> participant <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
&nbsp;&nbsp;m_participants.push_back(participant);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Create a <b><a href="CppDefault.htm">default</a></b> non-logged in Partipant<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Parameters::CreateDefaultParticipant()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> already_created <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create <a href="CppChat.htm">chat</a> tag<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppWtShapeWidget.htm">WtShapeWidget</a>&gt; chat_<a href="CppShape.htm">shape</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWtShapeWidget.htm">WtShapeWidget</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chat<a href="CppShape.htm">Shape</a>Factory::Get()-&gt;GetNext<a href="CppWidget.htm">Widget</a>()));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create GroupAssigner<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupAssigner&gt; group_assigner(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> GroupAssignerPredetermined(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 <a href="CppOperatorPlus.htm">+</a> (already_created%2)));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set wild-card <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ip_address="*";<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the Participant<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Participant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppWtShapeWidget.htm">WtShapeWidget</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWtShapeWidget.htm">WtShapeWidget</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;Chat<a href="CppShape.htm">Shape</a>Factory::Get()-&gt;GetNext<a href="CppWidget.htm">Widget</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group_assigner,m_server));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> the Participant is really created from scratch<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p-&gt;CanGetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "ID must be as<b><a href="CppSigned.htm">signed</a></b> by Server");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppIpAddress.htm">IP address</a> must be as<b><a href="CppSigned.htm">signed</a></b> by Server");<br/>
<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>already_created;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Deletes all Participant <a href="CppInstance.htm">instances</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Parameters::DeleteParticipants()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_participants.clear();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_participants.empty());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Parameters::ReadFromFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("File ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" not found");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(error);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppFileToVector.htm">FileToVector</a>(filename);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTrim.htm">Trim</a>_copy s to remove Microsoft <a href="CppWindows.htm">Windows</a> line endings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Parse(<a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::trim_copy(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> at least initial group 1 and 2 are present<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; tally;<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_participants.begin(),m_participants.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;tally](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> GroupAssigner * <b><a href="CppConst.htm">const</a></b> a <a href="CppOperatorAssign.htm">=</a> p-&gt;GetGroupAssigner();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> GroupAssignerPredetermined*&gt;(a))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>tally[<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> GroupAssignerPredetermined*&gt;(a)-&gt;GetGroup()];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tally[1]<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Group #1 must exist and contain either 3 or 5 participants");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tally[1]<a href="CppOperatorNotEqual.htm">!=</a>3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> tally[1]<a href="CppOperatorNotEqual.htm">!=</a>5)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Group #1 must contain either 3 or 5 participants");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tally[2]<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Group #2 must exist and contain either 3 or 5 participants");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tally[2]<a href="CppOperatorNotEqual.htm">!=</a>3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> tally[2]<a href="CppOperatorNotEqual.htm">!=</a>5)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Group #2 must contain either 3 or 5 participants");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; ids;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tally.begin(),tally.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(ids),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p.first; } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostLambda.htm">boost::lambda</a>::bind(&amp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;::first, <a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_ids <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(ids.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_ids; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>At index 0 there must be ID 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ids[i] <a href="CppOperatorNotEqual.htm">!=</a> i+1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("Group #")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(i+1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" is missing") ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_choose_action-&gt;GetOptions().size() &lt; 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Please specify at least two choose_action_options");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;m_voting-&gt;GetOptions().size() &lt; 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Please specify at least two voting_options");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Parse a line in a Parameter file.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Parameters::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,1) <a href="CppOperatorEqual.htm">==</a> "#") <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,2) <a href="CppOperatorEqual.htm">==</a> "<a href="CppComment.htm">//</a>") <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parameters starting with finished_ are parsed by ParametersFinished<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 9 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,9) <a href="CppOperatorEqual.htm">==</a> "finished_")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(9,s.size()-9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetFinished()-&gt;Parse(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parameters starting with finished_ are parsed by ParametersGroupReAssign<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 13 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,13) <a href="CppOperatorEqual.htm">==</a> "group_assign_")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(13,s.size()-13);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetGroupAssign()-&gt;Parse(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parameters starting with finished_ are parsed by ParametersGroupReAssign<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 15 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,15) <a href="CppOperatorEqual.htm">==</a> "group_reassign_")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(15,s.size()-15);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetGroupReAssign()-&gt;Parse(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parameters starting with finished_ are parsed by ParametersGroupReAssign<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 14 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,14) <a href="CppOperatorEqual.htm">==</a> "assign_payoff_")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(14,s.size()-14);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAssignPayoff()-&gt;Parse(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parameters starting with finished_ are parsed by ParametersViewResultsGroup<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 20 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,20) <a href="CppOperatorEqual.htm">==</a> "view_results_voting_")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(20,s.size()-20);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetViewResultsVoting()-&gt;Parse(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parameters starting with finished_ are parsed by ParametersViewResultsGroup<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 19 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,19) <a href="CppOperatorEqual.htm">==</a> "view_results_group_")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(19,s.size()-19);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetViewResultsGroup()-&gt;Parse(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parameters starting with finished_ are parsed by ParametersViewResultsGroup<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 14 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,14) <a href="CppOperatorEqual.htm">==</a> "assign_payoff_")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(14,s.size()-14);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAssignPayoff()-&gt;Parse(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 14 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,14) <a href="CppOperatorEqual.htm">==</a> "choose_action_")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(14,s.size()-14);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetChooseAction()-&gt;Parse(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 5 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,5) <a href="CppOperatorEqual.htm">==</a> "chat_")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(5,s.size()-5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppChat.htm">Chat</a>()-&gt;Parse(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 7 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,7) <a href="CppOperatorEqual.htm">==</a> "voting_")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(7,s.size()-7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetVoting()-&gt;Parse(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Participants<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 12 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,12) <a href="CppOperatorEqual.htm">==</a> "participant=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(12,s.size() <a href="CppOperatorMinus.htm">-</a> 12);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(t,',');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.size() <a href="CppOperatorNotEqual.htm">!=</a> 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>((<a href="CppStdString.htm">std::string</a>("Incorrectly formed participant line: ") <a href="CppOperatorPlus.htm">+</a> s).c_str());;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Participant must have two elements");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupAssigner&gt; group_assigner<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GroupAssigner::CreateAssigner(v[0]);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ip_address_str <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; participant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppNew.htm">new</a></b> Participant(group_assigner,m_server)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ip_address_str<a href="CppOperatorNotEqual.htm">!=</a>"*")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Safe<a href="CppIpAddress.htm">IpAddress</a>&gt; ip_address(<b><a href="CppNew.htm">new</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>(ip_address_str));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;participant-&gt;Set<a href="CppIpAddress.htm">IpAddress</a>(ip_address);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>((<a href="CppStdString.htm">std::string</a>("Incorrectly formed <a href="CppIpAddress.htm">IP address</a>: ") <a href="CppOperatorPlus.htm">+</a> ip_address_str).c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_participants.push_back(participant);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>((<a href="CppStdString.htm">std::string</a>("Unparsable parameter file line: ") <a href="CppOperatorPlus.htm">+</a> s).c_str());<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Parameters::<a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdIstringstream.htm">std::istringstream</a> is(input);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> sub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(is, sub, seperator);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(sub))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Empty <b><a href="CppFor.htm">for</a></b> loop<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;parameters&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;participants&gt;";<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; &gt;&amp; participants<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> parameters.GetParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(participants.begin(),participants.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;os](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; p) { os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*p); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/participants&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*parameters.GetAssignPayoff())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*parameters.Get<a href="CppChat.htm">Chat</a>())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*parameters.GetChooseAction())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*parameters.GetGroupAssign())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*parameters.GetGroupReAssign())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*parameters.GetFinished())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*parameters.GetViewResultsAll())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*parameters.GetViewResultsGroup())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*parameters.GetViewResultsVoting())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*parameters.GetVoting())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/parameters&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersassignpayoff.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersassignpayoff.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSASSIGNPAYOFF_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSASSIGNPAYOFF_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Parameters in the assign-payoff state (in the smaller/IPGG cycle)<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersAssignPayoff<br/>
{<br/>
&nbsp;&nbsp;ParametersAssignPayoff();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the message displayed in the ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetMessage() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_message; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the message displayed in the ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMessage(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; message);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParametersAssignPayoff() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParametersAssignPayoff*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The message displayed in the ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_message;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersAssignPayoff&amp; parameters);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERSASSIGNPAYOFF_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersassignpayoff.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersassignpayoff.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersassignpayoff.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersAssignPayoff::ParametersAssignPayoff()<br/>
&nbsp;&nbsp;: m_message("Assigning payoffs...")<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Parse a line<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersAssignPayoff::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 27 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,27) <a href="CppOperatorEqual.htm">==</a> "individual_cost_contribute=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(27,s.size()-27);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Obsolete parameter: assign_payoff_individual_cost_contribute");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s.size() &gt; 25 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,25) <a href="CppOperatorEqual.htm">==</a> "group_benefit_contribute=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Obsolete parameter: assign_payoff_group_benefit_contribute");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s.size() &gt; 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,8) <a href="CppOperatorEqual.htm">==</a> "message=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(8,s.size()-8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetMessage(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set the message displayed in the ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersAssignPayoff::SetMessage(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; message)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!message.empty());<br/>
&nbsp;&nbsp;m_message <a href="CppOperatorAssign.htm">=</a> message;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersAssignPayoff&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;parametersassignpayoff&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;group_benefit_contribute&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetGroupBenefitContribute()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/group_benefit_contribute&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;individual_cost_contribute&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetIndividualCostContribute()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/individual_cost_contribute&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;message&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetMessage()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/message&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/parametersassignpayoff&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparameterschat.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparameterschat.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSCHAT_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSCHAT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Parameters <b><a href="CppFor.htm">for</a></b> chatting<br/>
<b><a href="CppStruct.htm">struct</a></b> Parameters<a href="CppChat.htm">Chat</a><br/>
{<br/>
&nbsp;&nbsp;Parameters<a href="CppChat.htm">Chat</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetDuration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Parameters<a href="CppChat.htm">Chat</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Parameters<a href="CppChat.htm">Chat</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTime.htm">Time</a> that is allowed in <b><a href="CppThis.htm">this</a></b> phase<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_duration;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Parameters<a href="CppChat.htm">Chat</a>&amp; parameters);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERSCHAT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparameterschat.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparameterschat.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parameters<a href="CppChat.htm">chat</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Parameters<a href="CppChat.htm">Chat</a>::Parameters<a href="CppChat.htm">Chat</a>()<br/>
&nbsp;&nbsp;: m_duration(5)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Parameters<a href="CppChat.htm">Chat</a>::GetDuration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_duration;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Parameters<a href="CppChat.htm">Chat</a>::SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>)<br/>
{<br/>
&nbsp;&nbsp;m_duration <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Parse a line<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Parameters<a href="CppChat.htm">Chat</a>::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppChat.htm">Chat</a> <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 9 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,9) <a href="CppOperatorEqual.htm">==</a> "duration=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(9,s.size()-9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("chat_duration must be an <a href="CppInt.htm">integer</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a> &lt; 0) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("chat_duration must be zero or posive");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetDuration(<a href="CppTime.htm">time</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Parameters<a href="CppChat.htm">Chat</a>&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;parameters<a href="CppChat.htm">chat</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;duration&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetDuration()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/duration&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/parameters<a href="CppChat.htm">chat</a>&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparameterschooseaction.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparameterschooseaction.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSCHOOSEACTION_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSCHOOSEACTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Parameters in the choose-action state (in the smaller/IPGG cycle)<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersChooseAction<br/>
{<br/>
&nbsp;&nbsp;ParametersChooseAction();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the descriptions of the actions that can be chosen<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChooseActionOption&gt; &gt;&amp; GetOptions() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_options; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetDuration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the Server<a href="CppState.htm">State</a> and ParticipantDialog wait <b><a href="CppFor.htm">for</a></b> all?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> GetWait() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_wait; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the options of the actions to be chosen by the Participant<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetOptions(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChooseActionOption&gt; &gt;&amp; options);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set <b><a href="CppIf.htm">if</a></b> the Server<a href="CppState.htm">State</a> and ParticipantDialog wait <b><a href="CppFor.htm">for</a></b> all other<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWait(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> wait) { m_wait <a href="CppOperatorAssign.htm">=</a> wait; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParametersChooseAction() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParametersChooseAction*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTime.htm">Time</a> that is allowed in <b><a href="CppThis.htm">this</a></b> phase, where zero<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/denotes to wait <b><a href="CppFor.htm">for</a></b> all participants<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_duration;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The options to choose from<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChooseActionOption&gt; &gt; m_options;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Wait <b><a href="CppFor.htm">for</a></b> all before going on?<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-<b><a href="CppTrue.htm">true</a></b>: After voting, Participant has to wait until all have choosen an action<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-<b><a href="CppFalse.htm">false</a></b>: after m_<a href="CppTime.htm">time</a> seconds, an automatic random action is chosen <b><a href="CppFor.htm">for</a></b> the Participant<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_wait;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Seperates a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator);<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersChooseAction&amp; parameters);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERSCHOOSEACTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparameterschooseaction.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparameterschooseaction.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>chooseactionoption.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parameterschooseaction.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersChooseAction::ParametersChooseAction()<br/>
&nbsp;&nbsp;: m_duration{5},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_options{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_wait(<b><a href="CppTrue.htm">true</a></b>)<br/>
{<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersChooseAction::GetDuration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_duration;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Parse a line<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersChooseAction::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 5 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,5) <a href="CppOperatorEqual.htm">==</a> "wait=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(5,s.size()-5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t<a href="CppOperatorEqual.htm">==</a>"y" <a href="CppOperatorLogicalOr.htm">||</a> t<a href="CppOperatorEqual.htm">==</a>"Y" <a href="CppOperatorLogicalOr.htm">||</a> t<a href="CppOperatorEqual.htm">==</a>"1" <a href="CppOperatorLogicalOr.htm">||</a> t <a href="CppOperatorEqual.htm">==</a> "n" <a href="CppOperatorLogicalOr.htm">||</a> t <a href="CppOperatorEqual.htm">==</a> "N" <a href="CppOperatorLogicalOr.htm">||</a> t <a href="CppOperatorEqual.htm">==</a>"0")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t<a href="CppOperatorEqual.htm">==</a>"y" <a href="CppOperatorLogicalOr.htm">||</a> t<a href="CppOperatorEqual.htm">==</a>"Y" <a href="CppOperatorLogicalOr.htm">||</a> t<a href="CppOperatorEqual.htm">==</a>"1")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetWait(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetWait(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("choose_action_wait me be either \'y\' or \'n\'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 9 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,9) <a href="CppOperatorEqual.htm">==</a> "duration=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(9,s.size()-9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("choose_action_duration must be an <a href="CppInt.htm">integer</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a> &lt; 0) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("choose_action_duration must be zero or posive");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetDuration(<a href="CppTime.htm">time</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 7 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,7) <a href="CppOperatorEqual.htm">==</a> "option=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(7,s.size() <a href="CppOperatorMinus.htm">-</a> 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(t,',');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.size() <a href="CppOperatorNotEqual.htm">!=</a> 4)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"choose_action_option line must have four elements");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 4 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "choose_action_options must have four elements");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> description <a href="CppOperatorAssign.htm">=</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> contribution_str <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> cost_str <a href="CppOperatorAssign.htm">=</a> v[2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> message <a href="CppOperatorAssign.htm">=</a> v[3];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStod.htm">std::stod</a>(contribution_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("Incorrectly formed contribution: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> contribution_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStod.htm">std::stod</a>(cost_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStod.htm">std::stod</a>(cost_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("Incorrectly formed cost: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> cost_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> contribution <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStod.htm">std::stod</a>(contribution_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> cost <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStod.htm">std::stod</a>(cost_str);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChooseActionOption&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ChooseActionOption(contribution,cost,description,message));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_options.push_back(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppSeperateString.htm">SeperateString</a> splits a <a href="CppStdString.htm">std::string</a><br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersChooseAction::<a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdIstringstream.htm">std::istringstream</a> is(input);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> sub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(is, sub, seperator);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(sub))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Empty <b><a href="CppFor.htm">for</a></b> loop<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersChooseAction::SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>)<br/>
{<br/>
&nbsp;&nbsp;m_duration <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersChooseAction&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;parameterschooseaction&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;duration&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetDuration()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/duration&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;wait&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetWait()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/wait&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_actions <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters.GetOptions().size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_actions;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;option" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*(parameters.GetOptions()[i]))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/option" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/parameterschooseaction&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersfinished.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersfinished.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSFINISHED_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSFINISHED_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Parameters <b><a href="CppFor.htm">for</a></b> the finished state<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersFinished<br/>
{<br/>
&nbsp;&nbsp;ParametersFinished();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculate the earnings of a Participant <b><a href="CppFor.htm">for</a></b> participating,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/from the amount of payoff he/she has gathered<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> CalculateEarnings(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppFunction.htm">function</a> that is used to calculate the earnings of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/a Participant <b><a href="CppFor.htm">for</a></b> participating, from the amount of payoff<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/he/she has gathered<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetEarnings<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_earnings_function; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the message shown to the Participant when the experiment has finished<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetMessage() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_message; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppFunction.htm">function</a> that is used to calculate the earnings of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/a Participant <b><a href="CppFor.htm">for</a></b> participating, from the amount of payoff<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/he/she has gathered<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetEarnings<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; earnings_function);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the message shown to the Participant when the experiment has finished<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMessage(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; message);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParametersFinished() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParametersFinished*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppFunction.htm">function</a> that is used to calculate the earnings of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/a Participant <b><a href="CppFor.htm">for</a></b> participating, from the amount of payoff<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/he/she has gathered<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example 'sqrt(p)+10'<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_earnings_function;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The message a Particapants get when finished<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example: 'Thanks <b><a href="CppFor.htm">for</a></b> participating in <b><a href="CppThis.htm">this</a></b> experiment'<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_message;<br/>
<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersFinished&amp; parameters);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERSFINISHED_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersfinished.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersfinished.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "fparser.hh"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersfinished.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersFinished::ParametersFinished()<br/>
&nbsp;&nbsp;: m_earnings_function{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_message{}<br/>
{<br/>
&nbsp;&nbsp;SetEarnings<a href="CppFunction.htm">Function</a>("1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;SetMessage("Thanks <b><a href="CppFor.htm">for</a></b> participating in <b><a href="CppThis.htm">this</a></b> experiment");<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersFinished::CalculateEarnings(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppFunctionParser.htm">FunctionParser</a> f;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parse the formula<br/>
&nbsp;&nbsp;f.Parse(m_earnings_function,"p");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.GetParseErrorType()<a href="CppOperatorEqual.htm">==</a> <a href="CppFunctionParser.htm">FunctionParser</a>::FP_NO_ERROR);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Evaluate the parsed formula<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoffs[1] <a href="CppOperatorAssign.htm">=</a> { payoff };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> earnings <a href="CppOperatorAssign.htm">=</a> f.Eval(payoffs);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (f.EvalError()<a href="CppOperatorNotEqual.htm">!=</a>0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppFunction.htm">Function</a> \'"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_earnings_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\'could not be evaluated"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <b><a href="CppFor.htm">for</a></b> a payoff of "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> payoff<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> earnings;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Parse a line<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersFinished::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,8) <a href="CppOperatorEqual.htm">==</a> "message=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(8,s.size()-8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetMessage(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s.size() &gt; 18 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,18) <a href="CppOperatorEqual.htm">==</a> "earnings_function=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(18,s.size()-18);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFunctionParser.htm">FunctionParser</a> f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parse the formula<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f.Parse(t,"p");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (f.GetParseErrorType()<a href="CppOperatorNotEqual.htm">!=</a> <a href="CppFunctionParser.htm">FunctionParser</a>::FP_NO_ERROR)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("finished_earnings_function could not be parsed, use <b><a href="CppFor.htm">for</a></b> example \'sqrt(p)+10\'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetEarnings<a href="CppFunction.htm">Function</a>(t);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set the <a href="CppFunction.htm">function</a> that is used to calculate the earnings of<br/>
<a href="CppComment.htm">///</a>a Participant <b><a href="CppFor.htm">for</a></b> participating, from the amount of payoff<br/>
<a href="CppComment.htm">///</a>he/she has gathered<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersFinished::SetEarnings<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; earnings_function)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFunctionParser.htm">FunctionParser</a> f;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parse the formula<br/>
&nbsp;&nbsp;f.Parse(earnings_function,"p");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (f.GetParseErrorType()<a href="CppOperatorNotEqual.htm">!=</a> <a href="CppFunctionParser.htm">FunctionParser</a>::FP_NO_ERROR)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("finished_earnings_function could not be parsed, use <b><a href="CppFor.htm">for</a></b> example \'sqrt(p)+10\'");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_earnings_function <a href="CppOperatorAssign.htm">=</a> earnings_function;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set the message shown to the Participant when the experiment has finished<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersFinished::SetMessage(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; message)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!message.empty());<br/>
&nbsp;&nbsp;m_message <a href="CppOperatorAssign.htm">=</a> message;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersFinished&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;parameters<a href="CppChat.htm">chat</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;earnings_function&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetEarnings<a href="CppFunction.htm">Function</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/earnings_function&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;message&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetMessage()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/message&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/parameters<a href="CppChat.htm">chat</a>&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersgroupassign.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersgroupassign.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PARAMETERSGROUPASSIGN_H<br/>
<a href="CppDefine.htm">#define</a> PARAMETERSGROUPASSIGN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Parameters <b><a href="CppFor.htm">for</a></b> the group dynamics state<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersGroupAssign<br/>
{<br/>
&nbsp;&nbsp;ParametersGroupAssign();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculate how much payoff the waiting participant is rewarded<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppFor.htm">for</a></b> simply waiting<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> CalculateWaitingPayoff(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> average_payoff) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the message shown to an as<b><a href="CppSigned.htm">signed</a></b> participant<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetMessageAs<b><a href="CppSigned.htm">signed</a></b>() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_message_as<b><a href="CppSigned.htm">signed</a></b>; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the message shown to an unassigned participant<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetMessageUnassigned() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_message_unassigned; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppFunction.htm">function</a> that determines how much payoff the waiting<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/participant is rewarded <b><a href="CppFor.htm">for</a></b> simply waiting<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetWaitingPayoff<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_waiting_payoff_function; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the message shown to an as<b><a href="CppSigned.htm">signed</a></b> participant<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMessageAs<b><a href="CppSigned.htm">signed</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; message);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the message shown to an unassigned participant<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMessageUnassigned(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; message);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppFunction.htm">function</a> that determines how much payoff the waiting<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/participant is rewarded <b><a href="CppFor.htm">for</a></b> simply waiting<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWaitingPayoff<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppFunction.htm">function</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParametersGroupAssign() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParametersGroupAssign*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The message at the group dynamics screen when as<b><a href="CppSigned.htm">signed</a></b> to a group<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_message_as<b><a href="CppSigned.htm">signed</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The message at the group dynamics screen when not yet as<b><a href="CppSigned.htm">signed</a></b> to a group<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_message_unassigned;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppFunction.htm">function</a> that determines how much payoff the waiting participant is rewarded<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppFor.htm">for</a></b> simply waiting<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This payoff is as<b><a href="CppSigned.htm">signed</a></b> when the active participants are reas<b><a href="CppSigned.htm">signed</a></b> to another<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/period.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This payoff <a href="CppFunction.htm">function</a> is dependent on variable 'p', which denotes the average payoff<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/of the active participants, which can be negative<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example '1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p)' denotes that a waiting participant gets<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/one plus a tenth of the average payoff gained by the other participants.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If statements are also possible: '(p&gt;0)*p' denotes '<b><a href="CppIf.htm">if</a></b> (p&gt;0) <b><a href="CppReturn.htm">return</a></b> p, <b><a href="CppElse.htm">else</a></b> zero',<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/because '(p&gt;0)' evaluates to one <b><a href="CppIf.htm">if</a></b> p is bigger than zero, and evaluates to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/zero <b><a href="CppIf.htm">if</a></b> p is smaller or equal to zero.<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_waiting_payoff_function;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersGroupAssign&amp; parameters);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERSGROUPASSIGN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersgroupassign.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersgroupassign.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCctypeH.htm">cctype</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "fparser.hh"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersgroupassign.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupAssign::ParametersGroupAssign()<br/>
&nbsp;&nbsp;: m_message_as<b><a href="CppSigned.htm">signed</a></b>("Waiting <b><a href="CppFor.htm">for</a></b> others. You have been as<b><a href="CppSigned.htm">signed</a></b> to group "),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_message_unassigned("Waiting <b><a href="CppFor.htm">for</a></b> server to assign you to a group"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_waiting_payoff_function{}<br/>
{<br/>
&nbsp;&nbsp;SetWaitingPayoff<a href="CppFunction.htm">Function</a>("0.0");<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupAssign::CalculateWaitingPayoff(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> average_payoff) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppFunctionParser.htm">FunctionParser</a> f;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parse the formula<br/>
&nbsp;&nbsp;f.Parse(m_waiting_payoff_function,"p");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.GetParseErrorType()<a href="CppOperatorEqual.htm">==</a> <a href="CppFunctionParser.htm">FunctionParser</a>::FP_NO_ERROR);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Evaluate the parsed formula<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoffs[1] <a href="CppOperatorAssign.htm">=</a> { average_payoff };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff_waiting <a href="CppOperatorAssign.htm">=</a> f.Eval(payoffs);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (f.EvalError()<a href="CppOperatorNotEqual.htm">!=</a>0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppFunction.htm">Function</a> \'"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_waiting_payoff_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\'could not be evaluated"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <b><a href="CppFor.htm">for</a></b> an average payoff of "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> average_payoff<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> payoff_waiting;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Parse a line<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupAssign::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 19 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,19) <a href="CppOperatorEqual.htm">==</a> "message_unassigned=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(19,s.size()-19);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetMessageUnassigned(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s.size() &gt; 17 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,17) <a href="CppOperatorEqual.htm">==</a> "message_as<b><a href="CppSigned.htm">signed</a></b>=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(17,s.size()-17);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetMessageAs<b><a href="CppSigned.htm">signed</a></b>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s.size() &gt; 24 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,24) <a href="CppOperatorEqual.htm">==</a> "waiting_payoff_function=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_assert.htm">static_assert</a></b>(<b><a href="CppSizeof.htm">sizeof</a></b>("waiting_payoff_function=") <a href="CppOperatorEqual.htm">==</a> 24 <a href="CppOperatorPlus.htm">+</a> 1,"Assume size 24");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(24,s.size()-24);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFunctionParser.htm">FunctionParser</a> f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parse the formula<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f.Parse(t,"p");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (f.GetParseErrorType()<a href="CppOperatorNotEqual.htm">!=</a> <a href="CppFunctionParser.htm">FunctionParser</a>::FP_NO_ERROR)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("group_assign_waiting_payoff_function could not be parsed, use <b><a href="CppFor.htm">for</a></b> example \'sqrt(p)+10\'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetWaitingPayoff<a href="CppFunction.htm">Function</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("Unparsable parameter file line: group_assign_") <a href="CppOperatorPlus.htm">+</a> s).c_str());<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set the message shown to an as<b><a href="CppSigned.htm">signed</a></b> participant<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupAssign::SetMessageAs<b><a href="CppSigned.htm">signed</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; message)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!message.empty());<br/>
&nbsp;&nbsp;m_message_as<b><a href="CppSigned.htm">signed</a></b> <a href="CppOperatorAssign.htm">=</a> message;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set the message shown to an unassigned participant<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupAssign::SetMessageUnassigned(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; message)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!message.empty());<br/>
&nbsp;&nbsp;m_message_unassigned <a href="CppOperatorAssign.htm">=</a> message;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupAssign::SetWaitingPayoff<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppFunction.htm">function</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFunctionParser.htm">FunctionParser</a> f;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parse the formula<br/>
&nbsp;&nbsp;f.Parse(<a href="CppFunction.htm">function</a>,"p");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (f.GetParseErrorType()<a href="CppOperatorNotEqual.htm">!=</a> <a href="CppFunctionParser.htm">FunctionParser</a>::FP_NO_ERROR)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("finished_earnings_function could not be parsed, use <b><a href="CppFor.htm">for</a></b> example \'sqrt(p)+10\'");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_waiting_payoff_function <a href="CppOperatorAssign.htm">=</a> <a href="CppFunction.htm">function</a>;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersGroupAssign&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;parameters<a href="CppChat.htm">chat</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;messageas<b><a href="CppSigned.htm">signed</a></b>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetMessageAs<b><a href="CppSigned.htm">signed</a></b>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/messageas<b><a href="CppSigned.htm">signed</a></b>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;messageunassigned&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetMessageUnassigned()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/messageunassigned&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/parameters<a href="CppChat.htm">chat</a>&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersgroupreassign.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersgroupreassign.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PARAMETERSGROUPREASSIGN_H<br/>
<a href="CppDefine.htm">#define</a> PARAMETERSGROUPREASSIGN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Parameters <b><a href="CppFor.htm">for</a></b> the group dynamics state<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersGroupReAssign : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>GroupReAssign<br/>
{<br/>
&nbsp;&nbsp;ParametersGroupReAssign();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculate how much payoff the active participant is rewarded<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppFor.htm">for</a></b> reaching the next round<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> CalculateNextPeriodPayoff(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetDuration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppFunction.htm">function</a> that determines how much payoff the active participant is rewarded<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppFor.htm">for</a></b> reaching the next round<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetNextPeriodPayoff<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_next_period_payoff_function; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the number of <a href="CppTime.htm">time</a>s the larger-cycle/experiment repeats itself<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOfPeriods() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppFunction.htm">function</a> that determines how much payoff the active participant is rewarded<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppFor.htm">for</a></b> reaching the next round<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetNextPeriodPayoff<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppFunction.htm">function</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the number of <a href="CppTime.htm">time</a>s the larger-cycle/experiment repeats itself<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetNumberOfPeriods(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_periods);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParametersGroupReAssign() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParametersGroupReAssign*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTime.htm">Time</a> that is allowed in <b><a href="CppThis.htm">this</a></b> phase<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_duration;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The number of <a href="CppTime.htm">time</a>s the larger-cycle/experiment repeats itself<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/An m_n_periods of 1 denotes that the larger-cycle/experiment does<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/not repeat itself<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_n_periods;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppFunction.htm">function</a> that determines how much payoff the active participant is rewarded<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppFor.htm">for</a></b> reaching the next round waiting<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This payoff is as<b><a href="CppSigned.htm">signed</a></b> when the active participants are reas<b><a href="CppSigned.htm">signed</a></b> to another<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/period.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This payoff <a href="CppFunction.htm">function</a> is dependent on variable 'p', which denotes the average payoff<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/of the active participants, which can be negative<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example '1 <a href="CppOperatorPlus.htm">+</a> (0.1 * p)' denotes that an active participant gets<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/one plus a tenth of the average payoff gained by the other active participants.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If statements are also possible: '(p&gt;0)*p' denotes '<b><a href="CppIf.htm">if</a></b> (p&gt;0) <b><a href="CppReturn.htm">return</a></b> p, <b><a href="CppElse.htm">else</a></b> zero',<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/because '(p&gt;0)' evaluates to one <b><a href="CppIf.htm">if</a></b> p is bigger than zero, and evaluates to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/zero <b><a href="CppIf.htm">if</a></b> p is smaller or equal to zero.<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_next_period_payoff_function;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersGroupReAssign&amp; parameters);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERSGROUPREASSIGN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersgroupreassign.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersgroupreassign.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCctypeH.htm">cctype</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "fparser.hh"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersgroupreassign.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupReAssign::ParametersGroupReAssign()<br/>
&nbsp;&nbsp;: m_duration(30),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_n_periods(1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_next_period_payoff_function{}<br/>
{<br/>
&nbsp;&nbsp;SetNextPeriodPayoff<a href="CppFunction.htm">Function</a>("0.0");<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupReAssign::CalculateNextPeriodPayoff(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> average_payoff) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppFunctionParser.htm">FunctionParser</a> f;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parse the formula<br/>
&nbsp;&nbsp;f.Parse(m_next_period_payoff_function,"p");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.GetParseErrorType()<a href="CppOperatorEqual.htm">==</a> <a href="CppFunctionParser.htm">FunctionParser</a>::FP_NO_ERROR);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Evaluate the parsed formula<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoffs[1] <a href="CppOperatorAssign.htm">=</a> { average_payoff };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff_for_reaching_next_period <a href="CppOperatorAssign.htm">=</a> f.Eval(payoffs);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (f.EvalError()<a href="CppOperatorNotEqual.htm">!=</a>0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppFunction.htm">Function</a> \'"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_next_period_payoff_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\'could not be evaluated"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <b><a href="CppFor.htm">for</a></b> a payoff of "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> average_payoff<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> payoff_for_reaching_next_period;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupReAssign::GetDuration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_duration;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get the number of <a href="CppTime.htm">time</a>s the larger-cycle/experiment repeats itself<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupReAssign::GetNumberOfPeriods() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_n_periods <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_n_periods;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Parse a line<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupReAssign::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 9 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,9) <a href="CppOperatorEqual.htm">==</a> "duration=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(9,s.size()-9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("group_reassign_duration must be an <a href="CppInt.htm">integer</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a> &lt; 0) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("group_reassign_duration must be zero or posive");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetDuration(<a href="CppTime.htm">time</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s.size() &gt; 18 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,18) <a href="CppOperatorEqual.htm">==</a> "number_of_periods=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(18,s.size()-18);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("group_reassign_number_of_periods must be an <a href="CppInt.htm">integer</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_periods <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_periods &lt; 0) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("group_reassign_number_of_periods must be zero or posive");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetNumberOfPeriods(n_periods);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s.size() &gt; 28 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,28) <a href="CppOperatorEqual.htm">==</a> "next_period_payoff_function=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_assert.htm">static_assert</a></b>(<b><a href="CppSizeof.htm">sizeof</a></b>("next_period_payoff_function=") <a href="CppOperatorEqual.htm">==</a> 28 <a href="CppOperatorPlus.htm">+</a> 1,"Assume size 28");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(28,s.size()-28);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFunctionParser.htm">FunctionParser</a> f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parse the formula<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f.Parse(t,"p");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (f.GetParseErrorType()<a href="CppOperatorNotEqual.htm">!=</a> <a href="CppFunctionParser.htm">FunctionParser</a>::FP_NO_ERROR)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("group_reassign_next_period_payoff_function could not be parsed, use <b><a href="CppFor.htm">for</a></b> example \'sqrt(p)+10\'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetNextPeriodPayoff<a href="CppFunction.htm">Function</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("Unparsable parameter file line: group_reassign_") <a href="CppOperatorPlus.htm">+</a> s).c_str());<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupReAssign::SetNextPeriodPayoff<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppFunction.htm">function</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFunctionParser.htm">FunctionParser</a> f;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parse the formula<br/>
&nbsp;&nbsp;f.Parse(<a href="CppFunction.htm">function</a>,"p");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (f.GetParseErrorType()<a href="CppOperatorNotEqual.htm">!=</a> <a href="CppFunctionParser.htm">FunctionParser</a>::FP_NO_ERROR)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("finished_earnings_function could not be parsed, use <b><a href="CppFor.htm">for</a></b> example \'sqrt(p)+10\'");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_next_period_payoff_function <a href="CppOperatorAssign.htm">=</a> <a href="CppFunction.htm">function</a>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupReAssign::SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>)<br/>
{<br/>
&nbsp;&nbsp;m_duration <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set the number of <a href="CppTime.htm">time</a>s the larger-cycle/experiment repeats itself<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersGroupReAssign::SetNumberOfPeriods(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_periods)<br/>
{<br/>
&nbsp;&nbsp;m_n_periods <a href="CppOperatorAssign.htm">=</a> n_periods;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_n_periods <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersGroupReAssign&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;parameters_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;messageas<b><a href="CppSigned.htm">signed</a></b>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetMessageAs<b><a href="CppSigned.htm">signed</a></b>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/messageas<b><a href="CppSigned.htm">signed</a></b>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;messageunassigned&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetMessageUnassigned()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/messageunassigned&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/parameters_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersquiz.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersquiz.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSQUIZ_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSQUIZ_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Parameters <b><a href="CppFor.htm">for</a></b> the voting state<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersQuiz<br/>
{<br/>
&nbsp;&nbsp;ParametersQuiz();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetDuration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetNumberOfOptions <a href="CppReturn.htm">returns</a> the number of options to vote <b><a href="CppFor.htm">for</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b> GetNumberOfOptions() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get all options to vote <b><a href="CppFor.htm">for</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;QuizOption&gt; &gt;&amp; GetOptions() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_options; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the descriptions of the options to vote <b><a href="CppFor.htm">for</a></b> only<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; GetVoteDescriptions() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the Server<a href="CppState.htm">State</a> and ParticipantDialog wait <b><a href="CppFor.htm">for</a></b> all?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> GetWait() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_wait; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the descriptions of the voting options<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetOptions(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;QuizOption&gt; &gt;&amp; options);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set <b><a href="CppIf.htm">if</a></b> there is waited <b><a href="CppFor.htm">for</a></b> all before going on<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWait(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> wait);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParametersQuiz() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParametersQuiz*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTime.htm">Time</a> that is allowed in <b><a href="CppThis.htm">this</a></b> phase, or that is indicated to be enough<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_duration;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The descriptions of the voting options<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;QuizOption&gt; &gt; m_options;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Wait <b><a href="CppFor.htm">for</a></b> all before going on?<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-<b><a href="CppTrue.htm">true</a></b>: After voting, Participant has to wait until all have<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-<b><a href="CppFalse.htm">false</a></b>: after m_<a href="CppTime.htm">time</a> seconds, an automatic random vote is made <b><a href="CppFor.htm">for</a></b> the Participant<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_wait;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;QuizOption&gt; &gt; CreateDefaultOptions();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppSeperateString.htm">SeperateString</a> splits a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator);<br/>
<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersQuiz&amp; parameters);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERSQUIZ_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersquiz.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersquiz.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<a href="CppComment.htm">//</a> <br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersquiz.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>votingoption.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersQuiz::ParametersQuiz()<br/>
&nbsp;&nbsp;: m_duration(10),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_options(CreateDefaultOptions()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_wait(<b><a href="CppTrue.htm">true</a></b>)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersQuiz::GetDuration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_duration;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get the descriptions of the options to vote <b><a href="CppFor.htm">for</a></b> only<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersQuiz::GetVoteDescriptions() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Parse a line<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersQuiz::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 9 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,9) <a href="CppOperatorEqual.htm">==</a> "duration=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(9,s.size()-9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("voting_duration must be an <a href="CppInt.htm">integer</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a> &lt; 0) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("voting_duration must be zero or posive");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetDuration(<a href="CppTime.htm">time</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 5 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,5) <a href="CppOperatorEqual.htm">==</a> "wait=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(5,s.size()-5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t<a href="CppOperatorEqual.htm">==</a>"y" <a href="CppOperatorLogicalOr.htm">||</a> t<a href="CppOperatorEqual.htm">==</a>"Y" <a href="CppOperatorLogicalOr.htm">||</a> t<a href="CppOperatorEqual.htm">==</a>"1" <a href="CppOperatorLogicalOr.htm">||</a> t <a href="CppOperatorEqual.htm">==</a> "n" <a href="CppOperatorLogicalOr.htm">||</a> t <a href="CppOperatorEqual.htm">==</a> "N" <a href="CppOperatorLogicalOr.htm">||</a> t <a href="CppOperatorEqual.htm">==</a>"0")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t<a href="CppOperatorEqual.htm">==</a>"y" <a href="CppOperatorLogicalOr.htm">||</a> t<a href="CppOperatorEqual.htm">==</a>"Y" <a href="CppOperatorLogicalOr.htm">||</a> t<a href="CppOperatorEqual.htm">==</a>"1")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetWait(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetWait(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("vote_wait me be either \'y\' or \'n\'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Participants<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 7 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,7) <a href="CppOperatorEqual.htm">==</a> "option=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(7,s.size() <a href="CppOperatorMinus.htm">-</a> 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(t,',');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.size() <a href="CppOperatorNotEqual.htm">!=</a> 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("Incorrectly formed vote_option line: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": must consist of [description][chance][cost],")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("<b><a href="CppFor.htm">for</a></b> example \'Lenient supervisor,0.5,1.0\'"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "vote_options must have two elements");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> description <a href="CppOperatorAssign.htm">=</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> chance_str <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> cost_str <a href="CppOperatorAssign.htm">=</a> v[2];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStod.htm">std::stod</a>(chance_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStod.htm">std::stod</a>(chance_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("Incorrectly formed chance: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> chance_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStod.htm">std::stod</a>(cost_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStod.htm">std::stod</a>(cost_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Incorrectly formed cost: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> cost_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppSeperateString.htm">SeperateString</a> splits a <a href="CppStdString.htm">std::string</a><br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersQuiz::<a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdIstringstream.htm">std::istringstream</a> is(input);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> sub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(is, sub, seperator);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(sub))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Empty <b><a href="CppFor.htm">for</a></b> loop<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersQuiz::SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>)<br/>
{<br/>
&nbsp;&nbsp;m_duration <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set <b><a href="CppIf.htm">if</a></b> there is waited <b><a href="CppFor.htm">for</a></b> all before going on<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersQuiz::SetWait(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> wait)<br/>
{<br/>
&nbsp;&nbsp;m_wait <a href="CppOperatorAssign.htm">=</a> wait;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersQuiz&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;parametersquiz&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetDuration()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/parametersquiz&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersviewresultsall.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersviewresultsall.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PARAMETERSVIEWRESULTSALL_H<br/>
<a href="CppDefine.htm">#define</a> PARAMETERSVIEWRESULTSALL_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Parameters <b><a href="CppFor.htm">for</a></b> the view-results-all state<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersViewResultsAll<br/>
{<br/>
&nbsp;&nbsp;ParametersViewResultsAll();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetDuration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the number of <a href="CppTime.htm">time</a>s the larger-cycle/experiment repeats itself<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOfPeriods() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the number of <a href="CppTime.htm">time</a>s the larger-cycle/experiment repeats itself<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetNumberOfPeriods(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_periods);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParametersViewResultsAll() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParametersViewResultsAll*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTime.htm">Time</a> that is allowed in <b><a href="CppThis.htm">this</a></b> phase<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_duration;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The number of <a href="CppTime.htm">time</a>s the larger-cycle/experiment repeats itself<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/An m_n_periods of 1 denotes that the larger-cycle/experiment does<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/not repeat itself<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_n_periods;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersViewResultsAll&amp; parameters);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERSVIEWRESULTSALL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersviewresultsgroup.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersviewresultsgroup.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSVIEWRESULTSGROUP_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSVIEWRESULTSGROUP_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Parameters in the view-results group state (in the smaller/IPGG cycle)<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersViewResultsGroup<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Default-<a href="CppConstructor.htm">construct</a> a ParametersViewResultsGroup<br/>
&nbsp;&nbsp;ParametersViewResultsGroup();<br/>
&nbsp;&nbsp;ParametersViewResultsGroup(<b><a href="CppConst.htm">const</a></b> ParametersViewResultsGroup&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;ParametersViewResultsGroup&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> ParametersViewResultsGroup&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParametersViewResultsGroup its RepeatAssigner<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;RepeatAssigner&gt; GetRepeatAssigner() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_repeat_assigner; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetDuration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the ParametersViewResultsGroup its RepeatAssigner<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetRepeatAssigner(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;RepeatAssigner&gt; assigner);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParametersViewResultsGroup() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParametersViewResultsGroup*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The assigner of how much repeats <b><a href="CppThis.htm">this</a></b> state must have<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;RepeatAssigner&gt; m_repeat_assigner;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTime.htm">Time</a> that is allowed in <b><a href="CppThis.htm">this</a></b> phase<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_duration;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a line starting with cycles=<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ParseCycles(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Seperates a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator);<br/>
<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersViewResultsGroup&amp; parameters);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERSVIEWRESULTSGROUP_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersviewresultsgroup.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersviewresultsgroup.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a> <br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersviewresultsgroup.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassignerfixed.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassignerrandomgeometric.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassignerrandomuniform.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersViewResultsGroup::ParametersViewResultsGroup()<br/>
&nbsp;&nbsp;: m_repeat_assigner(<b><a href="CppNew.htm">new</a></b> RepeatAssignerFixed(3)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_duration(5)<br/>
{<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersViewResultsGroup::GetDuration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_duration;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Parse a line<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersViewResultsGroup::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View results <a href="CppTime.htm">time</a> in the same group, in the IPGG phase<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 9 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,9) <a href="CppOperatorEqual.htm">==</a> "duration=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(9,s.size()-9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("view_results_group_duration must be an <a href="CppInt.htm">integer</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a> &lt; 0) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("view_results_group_duration must be zero or posive");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetDuration(<a href="CppTime.htm">time</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View results <a href="CppTime.htm">time</a> in the same group, in the IPGG phase<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 7 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,7) <a href="CppOperatorEqual.htm">==</a> "cycles=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(7,s.size()-7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParseCycles(t);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Parse a line starting with cycles=<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersViewResultsGroup::ParseCycles(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.empty()) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Empty value. view_results_group_cycles must non-empty, <b><a href="CppFor.htm">for</a></b> example \'2\' or \'[3,5&gt;\'");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[0] <a href="CppOperatorEqual.htm">==</a> '[')<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[s.size()-1]<a href="CppOperatorNotEqual.htm">!=</a>'&gt;') <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Invalid range notation. view_results_group_cycles ranges must be defined in the notation \'[from,to&gt;\', <b><a href="CppFor.htm">for</a></b> example '[3,5&gt;\'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> range_str <a href="CppOperatorAssign.htm">=</a> s.substr(1,s.size()-2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; range <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(range_str,',');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (range.size() <a href="CppOperatorNotEqual.htm">!=</a> 2) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Invalid range. view_results_group_cycles ranges must be defined in the notation \'[from,to&gt;\', <b><a href="CppFor.htm">for</a></b> example '[3,5&gt;\'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStoi.htm">std::stoi</a>(range[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStoi.htm">std::stoi</a>(range[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Non-number at first position in range. view_results_group_cycles must be an <a href="CppInt.htm">integer</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStoi.htm">std::stoi</a>(range[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStoi.htm">std::stoi</a>(range[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Non-number at second position in range. view_results_group_cycles must be an <a href="CppInt.htm">integer</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(range[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(range[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(range[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(range[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (from <a href="CppOperatorGreaterEqual.htm">&gt;=</a> to)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Invalid range: \'from\' must be less than \'to\' value. view_results_group_cycles must be an <a href="CppInt.htm">integer</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;RepeatAssigner&gt; assigner(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> RepeatAssignerRandomUniform(from,to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetRepeatAssigner(assigner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s[0] <a href="CppOperatorEqual.htm">==</a> '?')<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(1,s.size()-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStod.htm">std::stod</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStod.htm">std::stod</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("w must be a <b><a href="CppDouble.htm">double</a></b> (view_results_group_cycles)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> w <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStod.htm">std::stod</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> w <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStod.htm">std::stod</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (w &lt; 0.0) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("w must be positive (view_results_group_cycles)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (w <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1.0) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("w must be smaller than one (view_results_group_cycles)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;RepeatAssigner&gt; assigner(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> RepeatAssignerRandomGeometric(w));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetRepeatAssigner(assigner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStoi.htm">std::stoi</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStoi.htm">std::stoi</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("view_results_group_cycles must be an <a href="CppInt.htm">integer</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cycles <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cycles <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_cycles <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("view_results_group_cycles must be posive");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;RepeatAssigner&gt; assigner(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> RepeatAssignerFixed(n_cycles));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetRepeatAssigner(assigner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppSeperateString.htm">SeperateString</a> splits a <a href="CppStdString.htm">std::string</a><br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersViewResultsGroup::<a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdIstringstream.htm">std::istringstream</a> is(input);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> sub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(is, sub, seperator);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(sub))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Empty <b><a href="CppFor.htm">for</a></b> loop<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersViewResultsGroup::SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>)<br/>
{<br/>
&nbsp;&nbsp;m_duration <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersViewResultsGroup::SetRepeatAssigner(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;RepeatAssigner&gt; assigner)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(assigner);<br/>
&nbsp;&nbsp;m_repeat_assigner <a href="CppOperatorAssign.htm">=</a> assigner;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersViewResultsGroup&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;parametersviewresultsgroup&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;duration&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetDuration()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/duration&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;repeat_assigner&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (parameters.GetRepeatAssigner()-&gt;ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/repeat_assigner&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/parametersviewresultsgroup&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersviewresultsvoting.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersviewresultsvoting.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSVIEWRESULTSVOTING_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSVIEWRESULTSVOTING_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Parameters <b><a href="CppFor.htm">for</a></b> the view-results-voting state<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersViewResultsVoting<br/>
{<br/>
&nbsp;&nbsp;ParametersViewResultsVoting();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetDuration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParametersViewResultsVoting() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParametersViewResultsVoting*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTime.htm">Time</a> that is allowed in <b><a href="CppThis.htm">this</a></b> phase<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_duration;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersViewResultsVoting&amp; parameters);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERSVIEWRESULTSVOTING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersviewresultsvoting.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersviewresultsvoting.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a> <br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersviewresultsvoting.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersViewResultsVoting::ParametersViewResultsVoting()<br/>
&nbsp;&nbsp;: m_duration(5)<br/>
{<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersViewResultsVoting::GetDuration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_duration;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Parse a line<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersViewResultsVoting::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View results <a href="CppTime.htm">time</a> in the same group, in the IPGG phase<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 9 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,9) <a href="CppOperatorEqual.htm">==</a> "duration=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(9,s.size()-9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <a href="CppStdStoi.htm">std::stoi</a>(t); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("view_results_voting_duration must be an <a href="CppInt.htm">integer</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a> &lt; 0) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("view_results_voting_duration must be zero or posive");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetDuration(<a href="CppTime.htm">time</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersViewResultsVoting::SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>)<br/>
{<br/>
&nbsp;&nbsp;m_duration <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersViewResultsVoting&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;parametersviewresultsvoting&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetDuration()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/parametersviewresultsvoting&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersvoting.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersvoting.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSVOTING_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARAMETERSVOTING_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Parameters <b><a href="CppFor.htm">for</a></b> the voting state<br/>
<b><a href="CppStruct.htm">struct</a></b> ParametersVoting<br/>
{<br/>
&nbsp;&nbsp;ParametersVoting();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppComment.htm">///</a>Find a VotingOption from its description<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> VotingOption * FindVotingOption(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; description) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetDuration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetNumberOfOptions <a href="CppReturn.htm">returns</a> the number of options to vote <b><a href="CppFor.htm">for</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b> GetNumberOfOptions() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get all options to vote <b><a href="CppFor.htm">for</a></b><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; &gt;&amp; GetOptions() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_options; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the descriptions of the options to vote <b><a href="CppFor.htm">for</a></b> only<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; GetVoteDescriptions() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the Server<a href="CppState.htm">State</a> and ParticipantDialog wait <b><a href="CppFor.htm">for</a></b> all?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> GetWait() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_wait; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the duration of the Server<a href="CppState.htm">State</a> (in seconds)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the descriptions of the voting options<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetOptions(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; &gt;&amp; options);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set <b><a href="CppIf.htm">if</a></b> there is waited <b><a href="CppFor.htm">for</a></b> all before going on<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWait(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> wait);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParametersVoting() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParametersVoting*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTime.htm">Time</a> that is allowed in <b><a href="CppThis.htm">this</a></b> phase, or that is indicated to be enough<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_duration;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The descriptions of the voting options<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; &gt; m_options;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Wait <b><a href="CppFor.htm">for</a></b> all before going on?<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-<b><a href="CppTrue.htm">true</a></b>: After voting, Participant has to wait until all have<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-<b><a href="CppFalse.htm">false</a></b>: after m_<a href="CppTime.htm">time</a> seconds, an automatic random vote is made <b><a href="CppFor.htm">for</a></b> the Participant<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_wait;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; &gt; CreateDefaultOptions();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppSeperateString.htm">SeperateString</a> splits a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator);<br/>
<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersVoting&amp; parameters);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERSVOTING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparametersvoting.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparametersvoting.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersvoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>votingoption.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersVoting::ParametersVoting()<br/>
&nbsp;&nbsp;: m_duration(10),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_options(CreateDefaultOptions()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_wait(<b><a href="CppTrue.htm">true</a></b>)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::VotingOption&gt; &gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersVoting::CreateDefaultOptions()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; &gt; v;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; p(<b><a href="CppNew.htm">new</a></b> VotingOption(0.0,0.0,"No supervisor"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; p(<b><a href="CppNew.htm">new</a></b> VotingOption(0.5,1.0,"Lenient supervisor"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; p(<b><a href="CppNew.htm">new</a></b> VotingOption(1.0,2.0,"Rigorous supervisor"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersVoting::GetDuration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_duration;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get the descriptions of the options to vote <b><a href="CppFor.htm">for</a></b> only<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersVoting::GetVoteDescriptions() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_options.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_options.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostLambda.htm">boost::lambda</a>::bind(&amp;VotingOption::GetDescription, *<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt;&amp; i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> i-&gt;GetDescription();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Parse a line<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersVoting::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 9 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,9) <a href="CppOperatorEqual.htm">==</a> "duration=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(9,s.size()-9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("voting_duration must be an <a href="CppInt.htm">integer</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStoi.htm">std::stoi</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a> &lt; 0) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("voting_duration must be zero or posive");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetDuration(<a href="CppTime.htm">time</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 5 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,5) <a href="CppOperatorEqual.htm">==</a> "wait=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(5,s.size()-5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t<a href="CppOperatorEqual.htm">==</a>"y" <a href="CppOperatorLogicalOr.htm">||</a> t<a href="CppOperatorEqual.htm">==</a>"Y" <a href="CppOperatorLogicalOr.htm">||</a> t<a href="CppOperatorEqual.htm">==</a>"1" <a href="CppOperatorLogicalOr.htm">||</a> t <a href="CppOperatorEqual.htm">==</a> "n" <a href="CppOperatorLogicalOr.htm">||</a> t <a href="CppOperatorEqual.htm">==</a> "N" <a href="CppOperatorLogicalOr.htm">||</a> t <a href="CppOperatorEqual.htm">==</a>"0")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t<a href="CppOperatorEqual.htm">==</a>"y" <a href="CppOperatorLogicalOr.htm">||</a> t<a href="CppOperatorEqual.htm">==</a>"Y" <a href="CppOperatorLogicalOr.htm">||</a> t<a href="CppOperatorEqual.htm">==</a>"1")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetWait(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetWait(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("vote_wait me be either \'y\' or \'n\'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Participants<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 7 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,7) <a href="CppOperatorEqual.htm">==</a> "option=")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(7,s.size() <a href="CppOperatorMinus.htm">-</a> 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(t,',');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.size() <a href="CppOperatorNotEqual.htm">!=</a> 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("Incorrectly formed vote_option line: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": must consist of [description][chance][cost],")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("<b><a href="CppFor.htm">for</a></b> example \'Lenient supervisor,0.5,1.0\'"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "vote_options must have two elements");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> description <a href="CppOperatorAssign.htm">=</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> chance_str <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> cost_str <a href="CppOperatorAssign.htm">=</a> v[2];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStod.htm">std::stod</a>(chance_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStod.htm">std::stod</a>(chance_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("Incorrectly formed chance: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> chance_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStod.htm">std::stod</a>(cost_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStod.htm">std::stod</a>(cost_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Incorrectly formed cost: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> cost_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStod.htm">std::stod</a>(chance_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStod.htm">std::stod</a>(chance_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> cost <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStod.htm">std::stod</a>(cost_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> cost <a href="CppOperatorAssign.htm">=</a> <a href="CppStdStod.htm">std::stod</a>(cost_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> VotingOption(chance,cost,description));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_options.push_back(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppSeperateString.htm">SeperateString</a> splits a <a href="CppStdString.htm">std::string</a><br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersVoting::<a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdIstringstream.htm">std::istringstream</a> is(input);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> sub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(is, sub, seperator);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(sub))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Empty <b><a href="CppFor.htm">for</a></b> loop<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersVoting::SetDuration(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>)<br/>
{<br/>
&nbsp;&nbsp;m_duration <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersVoting::SetOptions(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; &gt;&amp; options)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(options.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A participant must vote between at least two options");<br/>
&nbsp;&nbsp;m_options <a href="CppOperatorAssign.htm">=</a> options;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set <b><a href="CppIf.htm">if</a></b> there is waited <b><a href="CppFor.htm">for</a></b> all before going on<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParametersVoting::SetWait(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> wait)<br/>
{<br/>
&nbsp;&nbsp;m_wait <a href="CppOperatorAssign.htm">=</a> wait;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> ParametersVoting&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;parametersvoting&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppTime.htm">time</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetDuration()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppTime.htm">time</a>&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_actions <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters.GetOptions().size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_actions;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;option" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*(parameters.GetOptions()[i]))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/option" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/parametersvoting&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipant.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipant.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANT_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Participant is a participant.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>During a session there are zero, one or more <a href="CppInstance.htm">instances</a> of Participant.<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A Participant is <a href="CppConstructor.htm">construct</a>ed by a <a href="CppChat.htm">chat</a> tag and his/her GroupAssigner<br/>
&nbsp;&nbsp;Participant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupAssigner&gt; group_assigner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;Participant(<b><a href="CppConst.htm">const</a></b> Participant&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Participant&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Participant&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAppend.htm">Append</a> the last <a href="CppChat.htm">chat</a> message (from someone in Participants's group)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/to <b><a href="CppThis.htm">this</a></b> Participant's <a href="CppChat.htm">chat</a> log<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAppend.htm">Append</a><a href="CppChat.htm">Chat</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt;&amp; message);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assign the Participant an ID<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AssignId(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assign the payoff the Participant receives from the chosen action<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> AssignPayoff(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> the Participant is as<b><a href="CppSigned.htm">signed</a></b> an ID already<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGetId() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> the Participant already has an <a href="CppIpAddress.htm">IP address</a> as<b><a href="CppSigned.htm">signed</a></b><br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> Can<a href="CppGetIpAddress.htm">GetIpAddress</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Lets the Participant choose an action<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ChooseAction(<b><a href="CppConst.htm">const</a></b> ChooseActionOption * <b><a href="CppConst.htm">const</a></b> option);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Actions taken by the Participant<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> ChooseActionOption *&gt;&amp; GetActions() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_actions; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppChat.htm">Chat</a> log of all <a href="CppChat.htm">chat</a> messages in group<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt; &gt; &gt;&amp; GetChatLog() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppChat.htm">chat</a>; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participant's <a href="CppChat.htm">chat</a> tag<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppWtShapeWidget.htm">WtShapeWidget</a>&gt; GetChat<a href="CppShape.htm">Shape</a>() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_chat_<a href="CppShape.htm">shape</a>; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participant his/her unique ID<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetId() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participant's <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt; <a href="CppGetIpAddress.htm">GetIpAddress</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participant his/her GroupAssigner as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> GroupAssigner * GetGroupAssigner() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_group_assigner.get(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participant his/her payoffs received in the total experiment<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Payoffs&gt; GetPayoffs() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_payoffs; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participant his/her payoffs received in the total experiment<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Payoffs&gt; GetPayoffs() { <b><a href="CppReturn.htm">return</a></b> m_payoffs; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participant last as<b><a href="CppSigned.htm">signed</a></b> payoff<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDouble.htm">double</a></b> GetPayoffLast() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participant his/her total payoff<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDouble.htm">double</a></b> GetPayoffTotal() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Experiment<a href="CppState.htm">State</a> in which the Participant is<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/in as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a> * Get<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Experiment<a href="CppState.htm">State</a> in which the Participant is<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/in as a read-and-write <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a> * Get<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get all votes of <b><a href="CppThis.htm">this</a></b> Participant<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; &gt;&amp; GetVotes() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_votes; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assign an <a href="CppIpAddress.htm">IP address</a> to the Participant<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppIpAddress.htm">IpAddress</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set<a href="CppState.htm">State</a> sets the Participant<a href="CppState.htm">State</a> of the Participant<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a> * <b><a href="CppConst.htm">const</a></b> state);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start<a href="CppChat.htm">Chat</a> lets the Participant know that he/she starts a <b><a href="CppNew.htm">new</a></b> <a href="CppChat.htm">chat</a> phase<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start<a href="CppChat.htm">Chat</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/ToStr creates a one-line string viewed by an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Lets the Participant vote<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Vote(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt;&amp; vote);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Participant();<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_actions is a log of all actions taken by the participant<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> ChooseActionOption *&gt; m_actions;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_<a href="CppChat.htm">chat</a> is the participants' <a href="CppChat.htm">chat</a> log, obtained from all participants<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt; &gt; &gt; m_<a href="CppChat.htm">chat</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppChat.htm">chat</a> tag is the <a href="CppChar.htm">character</a> that is as<b><a href="CppSigned.htm">signed</a></b> to a participant at chatting<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppWtShapeWidget.htm">WtShapeWidget</a>&gt; m_chat_<a href="CppShape.htm">shape</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_group_assigner is a Strategy that determines the group number<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/of a Participant.<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupAssigner&gt; m_group_assigner;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Every Participant has a unique ID.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This ID is uncorrelated with Administrator::m_id<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_id;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppIpAddress.htm">IP address</a> <b><a href="CppThis.htm">this</a></b> participant is allowed to be as<b><a href="CppSigned.htm">signed</a></b> to.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppIf.htm">if</a></b> m_ip_address is null, the participant can log in from <a href="CppAny.htm">any</a> <a href="CppIpAddress.htm">IP address</a>.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/When the participant logs in, his/her <a href="CppIpAddress.htm">IP address</a> is stored here<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt; m_ip_address;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_payoffs is a log of all payoffs recieved by the participant<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Payoffs&gt; m_payoffs;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Server * <b><a href="CppConst.htm">const</a></b> m_server;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The current Participant<a href="CppState.htm">State</a> the Participant is in<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a> * m_state;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant his/her Participant<a href="CppState.htm">State</a>AssignPayoff Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Participant<a href="CppState.htm">State</a>AssignPayoff&gt; m_state_assign_payoff;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant his/her Participant<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Participant<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>&gt; m_state_<a href="CppChat.htm">chat</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant his/her Participant<a href="CppState.htm">State</a>ChooseAction Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Participant<a href="CppState.htm">State</a>ChooseAction&gt; m_state_choose_action;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant his/her Participant<a href="CppState.htm">State</a>Finished Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Participant<a href="CppState.htm">State</a>Finished&gt; m_state_finished;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant his/her Participant<a href="CppState.htm">State</a>GroupAssign Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Participant<a href="CppState.htm">State</a>GroupAssign&gt; m_state_group_assign;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant his/her Participant<a href="CppState.htm">State</a>GroupReAssign Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Participant<a href="CppState.htm">State</a>GroupReAssign&gt; m_state_group_reassign;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant his/her Participant<a href="CppState.htm">State</a>LoggedIn Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Participant<a href="CppState.htm">State</a>LoggedIn&gt; m_state_logged_in;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant his/her Participant<a href="CppState.htm">State</a>NotLoggedIn Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Participant<a href="CppState.htm">State</a>NotLoggedIn&gt; m_state_not_logged_in;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant his/her Participant<a href="CppState.htm">State</a>Quiz Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Participant<a href="CppState.htm">State</a>Quiz&gt; m_state_quiz;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant his/her Participant<a href="CppState.htm">State</a>ViewResultsGroup Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Participant<a href="CppState.htm">State</a>ViewResultsGroup&gt; m_state_view_resuls_group;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant his/her Participant<a href="CppState.htm">State</a>ViewResultsVoting Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Participant<a href="CppState.htm">State</a>ViewResultsVoting&gt; m_state_view_results_voting;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant his/her Participant<a href="CppState.htm">State</a>Voting Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Participant<a href="CppState.htm">State</a>Voting&gt; m_state_voting;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_votes is a log of all votes by the participant<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; &gt; m_votes;<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppForwardDeclaration.htm">Forward declaration</a>s.<br/>
<a href="CppComment.htm">//</a><a href="CppHerbSutter.htm">Herb Sutter</a>. <a href="CppException.htm">Exception</a>al <a href="Cpp.htm">C++</a>. ISBN: 0-201-61562-2. Item 26: 'Never <a href="CppInclude.htm">#include</a> a header when a <a href="CppForwardDeclaration.htm">forward declaration</a> will suffice'<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Participant&amp; p);<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; p);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> Participant&amp; lhs,<b><a href="CppConst.htm">const</a></b> Participant&amp; rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipant.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipant.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a><a href="CppChat.htm">chat</a><a href="CppShape.htm">shape</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppIpaddress.htm">ipaddress</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateassignpayoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate<a href="CppChat.htm">chat</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatechooseaction.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatefinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstategroupassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstategroupreassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatenotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatequiz.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateviewresultsgroup.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateviewresultsvoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatevoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoffs.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShape.htm">shape</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShapeWidget.htm">shapewidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtShapeWidget.htm">wtshapewidget</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::Participant(<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupAssigner&gt; group_assigner,<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: m_actions{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppChat.htm">chat</a>{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_chat_<a href="CppShape.htm">shape</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWtShapeWidget.htm">WtShapeWidget</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chat<a href="CppShape.htm">Shape</a>Factory::Get()-&gt;GetNext<a href="CppWidget.htm">Widget</a>())),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_group_assigner(group_assigner),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_id(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ip_address{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_payoffs(<b><a href="CppNew.htm">new</a></b> Payoffs),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state(<b><a href="CppNew.htm">new</a></b> Participant<a href="CppState.htm">State</a>NotLoggedIn(<b><a href="CppThis.htm">this</a></b>,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_assign_payoff(<b><a href="CppNew.htm">new</a></b> Participant<a href="CppState.htm">State</a>AssignPayoff(<b><a href="CppThis.htm">this</a></b>,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_<a href="CppChat.htm">chat</a>(<b><a href="CppNew.htm">new</a></b> Participant<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>(<b><a href="CppThis.htm">this</a></b>,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_choose_action(<b><a href="CppNew.htm">new</a></b> Participant<a href="CppState.htm">State</a>ChooseAction(<b><a href="CppThis.htm">this</a></b>,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_finished(<b><a href="CppNew.htm">new</a></b> Participant<a href="CppState.htm">State</a>Finished(<b><a href="CppThis.htm">this</a></b>,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_group_assign(<b><a href="CppNew.htm">new</a></b> Participant<a href="CppState.htm">State</a>GroupAssign(<b><a href="CppThis.htm">this</a></b>,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_group_reassign(<b><a href="CppNew.htm">new</a></b> Participant<a href="CppState.htm">State</a>GroupReAssign(<b><a href="CppThis.htm">this</a></b>,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_logged_in(<b><a href="CppNew.htm">new</a></b> Participant<a href="CppState.htm">State</a>LoggedIn(<b><a href="CppThis.htm">this</a></b>,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_not_logged_in(<b><a href="CppNew.htm">new</a></b> Participant<a href="CppState.htm">State</a>NotLoggedIn(<b><a href="CppThis.htm">this</a></b>,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_quiz(<b><a href="CppNew.htm">new</a></b> Participant<a href="CppState.htm">State</a>Quiz(<b><a href="CppThis.htm">this</a></b>,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_view_resuls_group(<b><a href="CppNew.htm">new</a></b> Participant<a href="CppState.htm">State</a>ViewResultsGroup(<b><a href="CppThis.htm">this</a></b>,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_view_results_voting(<b><a href="CppNew.htm">new</a></b> Participant<a href="CppState.htm">State</a>ViewResultsVoting(<b><a href="CppThis.htm">this</a></b>,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_voting(<b><a href="CppNew.htm">new</a></b> Participant<a href="CppState.htm">State</a>Voting(<b><a href="CppThis.htm">this</a></b>,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_votes{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_id <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume ID is unassigned");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_group_assigner);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!CanGetId());<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::~Participant()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::~Participant() <b><a href="CppFor.htm">for</a></b> #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> GetId() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n' ;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::<a href="CppAppend.htm">Append</a><a href="CppChat.htm">Chat</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt;&amp; message)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(message);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_<a href="CppChat.htm">chat</a>.empty());<br/>
<br/>
&nbsp;&nbsp;m_<a href="CppChat.htm">chat</a>.back().push_back(message);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Assign the Participant an ID<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::AssignId(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(id &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "ID\'s must be positive non-zero values");<br/>
&nbsp;&nbsp;m_id <a href="CppOperatorAssign.htm">=</a> id;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Assign the payoff the Participant receives from the chosen action<br/>
<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::AssignPayoff(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff)<br/>
<a href="CppComment.htm">//</a>{<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;m_payoffs.push_back(payoff);<br/>
<a href="CppComment.htm">//</a>}<br/>
<br/>
<a href="CppComment.htm">///</a>Check <b><a href="CppIf.htm">if</a></b> the Participant is as<b><a href="CppSigned.htm">signed</a></b> an ID already<br/>
<a href="CppComment.htm">///</a><b><a href="CppIf.htm">if</a></b> m_id equals zero, the Participant is not as<b><a href="CppSigned.htm">signed</a></b> an ID yet<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::CanGetId() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_id <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_id <a href="CppOperatorNotEqual.htm">!=</a> 0;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::Can<a href="CppGetIpAddress.htm">GetIpAddress</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_ip_address.get();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Lets the Participant choose an action<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::ChooseAction(<b><a href="CppConst.htm">const</a></b> ChooseActionOption * <b><a href="CppConst.htm">const</a></b> option)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(option);<br/>
<br/>
&nbsp;&nbsp;m_actions.push_back(option);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get the Participant his/her unique ID<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::GetId() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_id &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "ID\'s must be positive non-zero values");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_id;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get the Participant's <a href="CppIpAddress.htm">IP address</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Safe<a href="CppIpAddress.htm">IpAddress</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::<a href="CppGetIpAddress.htm">GetIpAddress</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_ip_address;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Avoiding duplication in <b><a href="CppConst.htm">const</a></b> and non-<a href="CppConstMemberFunction.htm">const member function</a>s.<br/>
<a href="CppComment.htm">//</a><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C<a href="CppOperatorIncrement.htm">++</a> (3rd edition). ISBN: 0-321-33487-6. Item 3,<br/>
<a href="CppComment.htm">//</a>paragraph 'Avoid duplication in <b><a href="CppConst.htm">const</a></b> and non-<a href="CppConstMemberFunction.htm">const member function</a>s'<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::Get<a href="CppState.htm">State</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;Participant<a href="CppState.htm">State</a>*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant&amp;&gt;(*<b><a href="CppThis.htm">this</a></b>).Get<a href="CppState.htm">State</a>());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::Get<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::Set<a href="CppIpAddress.htm">IpAddress</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Can<a href="CppGetIpAddress.htm">GetIpAddress</a>() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot change the <a href="CppIpAddress.htm">IP address</a> of a participant <b><a href="CppIf.htm">if</a></b> it is valid already");<br/>
<br/>
&nbsp;&nbsp;m_ip_address <a href="CppOperatorAssign.htm">=</a> ip_address;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set<a href="CppState.htm">State</a> sets the Participant<a href="CppState.htm">State</a> of the Participant<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::Set<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a> * <b><a href="CppConst.htm">const</a></b> state)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>AssignPayoff*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> m_state_assign_payoff.get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> m_state_<a href="CppChat.htm">chat</a>.get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>ChooseAction*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> m_state_choose_action.get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>Finished*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> m_state_finished.get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>GroupAssign*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> m_state_group_assign.get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>GroupReAssign*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> m_state_group_reassign.get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>LoggedIn*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> m_state_logged_in.get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>NotLoggedIn*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> m_state_not_logged_in.get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>Quiz*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> m_state_quiz.get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>ViewResultsGroup*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> m_state_view_resuls_group.get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>ViewResultsVoting*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> m_state_view_results_voting.get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>Voting*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> m_state_voting.get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here: unimplemented state <b><a href="CppFor.htm">for</a></b> Participant");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Start<a href="CppChat.htm">Chat</a> lets the Participant know that he/she starts a <b><a href="CppNew.htm">new</a></b> <a href="CppChat.htm">chat</a> phase<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::Start<a href="CppChat.htm">Chat</a>()<br/>
{<br/>
&nbsp;&nbsp;m_<a href="CppChat.htm">chat</a>.push_back(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt; &gt;());<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>ToStr creates a one-line string viewed by an Administrator<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::ToAdminStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppState.htm">State</a>()-&gt;ToAdminStr();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant::Vote(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt;&amp; vote)<br/>
{<br/>
&nbsp;&nbsp;m_votes.push_back(vote);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Participant&amp; p)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;participant&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (p.CanGetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppStdTo_string.htm">std::to_string</a>(p.GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppStdString.htm">std::string</a>("N/A"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/id&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;ip_address&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (p.Can<a href="CppGetIpAddress.htm">GetIpAddress</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? p.<a href="CppGetIpAddress.htm">GetIpAddress</a>()-&gt;Get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppStdString.htm">std::string</a>("*"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/ip_address&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;state&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (p.Get<a href="CppState.htm">State</a>()-&gt;ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/state&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/participant&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; p)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*(p.get()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> Participant&amp; lhs,<b><a href="CppConst.htm">const</a></b> Participant&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs.GetId() <a href="CppOperatorNotEqual.htm">!=</a> rhs.GetId() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume each participant has a unique ID");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetId() &lt; rhs.GetId();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialog.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWContainerWidget.htm">WContainerWidget</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusherClient.htm">wtserverpusherclient</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtTimedServerPusherClient.htm">wttimedserverpusherclient</a>.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>ParticipantDialog handles the user <a href="CppInterface.htm">interface</a> <b><a href="CppFor.htm">for</a></b> a Participant.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>ParticipantDialog is an Observer of Participant and does<br/>
<a href="CppComment.htm">///</a>not alter Participant itself. It does so by connecting to<br/>
<a href="CppComment.htm">///</a>the Server.<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>, <a href="CppWtServerPusherClient.htm">WtServerPusherClient</a>, <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Construct</a> a ParticipantDialog and use its <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;ParticipantDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a> * <b><a href="CppConst.htm">const</a></b> ip_address);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> a valid read-only <a href="CppPointer.htm">pointer</a> to the Participant can be get<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGetParticipant() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSomethingRandom();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get <b><a href="CppThis.htm">this</a></b> ParticipantDialog its <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt; <a href="CppGetIpAddress.htm">GetIpAddress</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-only <a href="CppPointer.htm">pointer</a> to the Participant<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; GetParticipant() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the ParticipantDialog<a href="CppState.htm">State</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParticipantDialog<a href="CppState.htm">State</a>s&gt; Get<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assign a Participant to <b><a href="CppThis.htm">this</a></b> ParticipantDialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParticipant(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the ParticipantDialog<a href="CppState.htm">State</a> of a ParticipantDialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>(ParticipantDialog<a href="CppState.htm">State</a> * <b><a href="CppConst.htm">const</a></b> state);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;ParticipantDialog( <b><a href="CppConst.htm">const</a></b> ParticipantDialog&amp; );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ParticipantDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=( <b><a href="CppConst.htm">const</a></b> ParticipantDialog&amp; );<br/>
<br/>
&nbsp;&nbsp;~ParticipantDialog();<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppIpAddress.htm">IP address</a> <b><a href="CppThis.htm">this</a></b> ParticipantDialog is recognized with<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Safe<a href="CppIpAddress.htm">IpAddress</a>&gt; m_ip_address;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read-only Participant <a href="CppPointer.htm">pointer</a>, obtained from server<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; m_participant;<br/>
<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> m_server;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/ParticipantDialog<a href="CppState.htm">State</a>s manages the ParticipantDialog<a href="CppState.htm">State</a> <a href="CppInstance.htm">instances</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a>s&gt; m_states;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the start/heading/beginning of all ParticipantDialog <a href="CppInstance.htm">instances</a><br/>
&nbsp;&nbsp;ParticipantDialog * CreateDialogHeading();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_led(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppWLabel.htm">Wt::WLabel</a> * m_label_<a href="CppTime.htm">time</a>_left;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWtLedWidget.htm">WtLedWidget</a> * m_led;<br/>
&nbsp;&nbsp;} m_ui;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWApplication.htm">WApplication</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTimer.htm">WTimer</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWGroupBox.htm">WGroupBox</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_participantdialogstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppIpaddress.htm">ipaddress</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppLed.htm">led</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppLedWidget.htm">ledwidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRainbow.htm">rainbow</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtLedWidget.htm">wtledwidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a>\note<br/>
<a href="CppComment.htm">///</a>Do not <a href="CppMake.htm">make</a> m_<a href="CppTime.htm">time</a>r a child of <b><a href="CppThis.htm">this</a></b>,<br/>
<a href="CppComment.htm">///</a>to prevent it being <b><a href="CppDelete.htm">delete</a></b> by <a href="CppWt.htm">Wt</a> <b><a href="CppClass.htm">classes</a></b><br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog::ParticipantDialog(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a> * <b><a href="CppConst.htm">const</a></b> ip_address)<br/>
&nbsp;&nbsp;: m_ip_address(<b><a href="CppNew.htm">new</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>(ip_address-&gt;Get())),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_participant{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_server(server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_states(<b><a href="CppNew.htm">new</a></b> ParticipantDialog<a href="CppState.htm">State</a>s(<b><a href="CppThis.htm">this</a></b>,server))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;,m_ui{}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_participant <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Participant is obtained from Server");<br/>
<br/>
&nbsp;&nbsp;m_states-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;ShowPage(CreateDialogHeading());<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog::~ParticipantDialog()<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog::CanGetParticipant() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_participant.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog::CreateDialogHeading()<br/>
{<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog <a href="CppOperatorAssign.htm">=</a> Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;GetDialog();<br/>
&nbsp;&nbsp;dialog-&gt;clear();<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignRight);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;m_ui.m_led <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWtLedWidget.htm">WtLedWidget</a>(1.0);<br/>
&nbsp;&nbsp;m_ui.m_led-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;SetGeometry(0,0,24,24);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_led);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;dialog-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignCenter);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dialog;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog::DoSomethingRandom()<br/>
{<br/>
&nbsp;&nbsp;m_states-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;DoSomethingRandom();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Safe<a href="CppIpAddress.htm">IpAddress</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog::<a href="CppGetIpAddress.htm">GetIpAddress</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_ip_address;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant&gt;&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog::GetParticipant() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanGetParticipant());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_participant;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog::Get<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_states;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog::OnServerPush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If the participant is logged out, <b><a href="CppThrow.htm">throw</a></b> him/her back to the login screen<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!CanGetParticipant())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_states-&gt;Set<a href="CppState.htm">State</a>(m_states-&gt;Get<a href="CppState.htm">State</a>NotLoggedIn());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_states-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;RespondToParticipant();<br/>
<br/>
&nbsp;&nbsp;m_states-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;RespondToServerPush();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog::On<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If the participant is logged out, <b><a href="CppThrow.htm">throw</a></b> him/her back to the login screen<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!CanGetParticipant())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_states-&gt;Set<a href="CppState.htm">State</a>(m_states-&gt;Get<a href="CppState.htm">State</a>NotLoggedIn());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update label_<a href="CppTime.htm">time</a>_left<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>Left();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("<a href="CppTime.htm">Time</a> left: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<a href="CppTime.htm">time</a>_left)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" seconds ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label_<a href="CppTime.htm">time</a>_left-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update the <a href="CppLed.htm">Led</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdRand.htm">std::rand</a>())/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRAND_MAX.htm">RAND_MAX</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> r,g,b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRainbow.htm">Rainbow</a>::GetRgb(f,r,g,b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_led-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;Get<a href="CppLed.htm">Led</a>()-&gt;SetColor(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r * 255.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g * 255.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b * 255.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_led-&gt;refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_states-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;RespondToParticipant();<br/>
<br/>
&nbsp;&nbsp;m_states-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;RespondTo<a href="CppTime.htm">Time</a>dServerPush();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog::SetParticipant(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
&nbsp;&nbsp;m_participant <a href="CppOperatorAssign.htm">=</a> participant;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Let a <a href="CppState.htm">State</a> perform a transition that is logged and lets the <b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a> be drawn to screen.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog::Set<a href="CppState.htm">State</a>(ParticipantDialog<a href="CppState.htm">State</a> * <b><a href="CppConst.htm">const</a></b> state)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (state <a href="CppOperatorEqual.htm">==</a> m_states-&gt;GetCurrent<a href="CppState.htm">State</a>()) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;m_states-&gt;Set<a href="CppState.htm">State</a>(state);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Log the change in state<br/>
&nbsp;&nbsp;m_server-&gt;GetLog()-&gt;LogParticipantDialog<a href="CppState.htm">State</a>Changed(m_states-&gt;GetCurrent<a href="CppState.htm">State</a>());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show the <b><a href="CppNew.htm">new</a></b> page<br/>
&nbsp;&nbsp;m_states-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;ShowPage(CreateDialogHeading());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstate.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstate.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATE_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWObject.htm">WObject</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The state of ParticipantDialog.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>The <a href="CppState.htm">State</a> <a href="CppDesignPattern.htm">Design Pattern</a> of the ParticipantDialog.<br/>
<a href="CppComment.htm">///</a>ParticipantDialog is an Observer of Participant<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>, <a href="CppWObject.htm">Wt::WObject</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create every ParticipantDialog<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/its ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> ParticipantDialog<a href="CppState.htm">State</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> ParticipantDialog<a href="CppState.htm">State</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> DoSomethingRandom() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/RespondToServerPush responds to the <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> RespondToServerPush() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/RespondToServerPush responds to the <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> RespondTo<a href="CppTime.htm">Time</a>dServerPush() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/ShowPage shows the webpage<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog * GetDialog();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog, read-only<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ParticipantDialog * GetDialog() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Responds to the Participant his/her Participant<a href="CppState.htm">State</a>, which<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/can be changed by the Server<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToParticipant();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~ParticipantDialog<a href="CppState.htm">State</a>() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do not forget the <b><a href="CppTemplate.htm">template</a></b> brackets, as stated in<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppHerbSutter.htm">Herb Sutter</a>. <a href="CppException.htm">Exception</a>al C<a href="CppOperatorIncrement.htm">++</a> style. 2005. ISBN: 0-201-76042-8. Item 8: '<a href="CppFriend.htm">Befriending</a> <a href="CppTemplate.htm">templates</a>'.<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a>*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The dialog <b><a href="CppThis.htm">this</a></b> state works on<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do not change <b><a href="CppThis.htm">this</a></b> to <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParticipantDialog&gt;, because<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/each <a href="CppState.htm">State</a> is <a href="CppConstructor.htm">construct</a>ed at the <a href="CppConstructor.htm">constructor</a> of a ParticipantDialog,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/which requires a <a href="CppPointer.htm">pointer</a> to '<b><a href="CppThis.htm">this</a></b>'<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> m_dialog;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Nobody logs out: he/she refreshes or has a browser crash<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Logout();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> m_server;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Converts</a> a currency to <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example: 123.456789 to 123.46<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> CurrencyToStr(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstate.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstate.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIomanipH.htm">iomanip</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/filesystem.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_participantdialogstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_participantstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>::ParticipantDialog<a href="CppState.htm">State</a>(<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: m_dialog(dialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_server(server)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>::CurrencyToStr(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetprecision.htm">std::setprecision</a>(2) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdFixed.htm">std::fixed</a>;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> value;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>::GetDialog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_dialog);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_dialog;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>::GetDialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_dialog);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_dialog;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>::Logout()<br/>
{<br/>
&nbsp;&nbsp;m_server-&gt;NotifyLogout(GetDialog()-&gt;GetParticipant());<br/>
&nbsp;&nbsp;<a href="CppWtServerPusher.htm">WtServerPusher</a>::GetInstance()-&gt;Post();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Respons to the Participant his/her Participant<a href="CppState.htm">State</a>, which<br/>
<a href="CppComment.htm">///</a>can be changed by the Server<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>::RespondToParticipant()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!GetDialog()-&gt;CanGetParticipant())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;GetParticipant());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;GetParticipant()-&gt;Get<a href="CppState.htm">State</a>());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a> * <b><a href="CppConst.htm">const</a></b> state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetDialog()-&gt;GetParticipant()-&gt;Get<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>AssignPayoff*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog-&gt;Set<a href="CppState.htm">State</a>(m_dialog-&gt;Get<a href="CppState.htm">State</a>s()-&gt;Get<a href="CppState.htm">State</a>AssignPayoff());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog-&gt;Set<a href="CppState.htm">State</a>(m_dialog-&gt;Get<a href="CppState.htm">State</a>s()-&gt;Get<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>ChooseAction*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog-&gt;Set<a href="CppState.htm">State</a>(m_dialog-&gt;Get<a href="CppState.htm">State</a>s()-&gt;Get<a href="CppState.htm">State</a>ChooseAction());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>Finished*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog-&gt;Set<a href="CppState.htm">State</a>(m_dialog-&gt;Get<a href="CppState.htm">State</a>s()-&gt;Get<a href="CppState.htm">State</a>Finished());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>GroupAssign*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog-&gt;Set<a href="CppState.htm">State</a>(m_dialog-&gt;Get<a href="CppState.htm">State</a>s()-&gt;Get<a href="CppState.htm">State</a>GroupAssign());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>GroupReAssign*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog-&gt;Set<a href="CppState.htm">State</a>(m_dialog-&gt;Get<a href="CppState.htm">State</a>s()-&gt;Get<a href="CppState.htm">State</a>GroupReAssign());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>LoggedIn*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog-&gt;Set<a href="CppState.htm">State</a>(m_dialog-&gt;Get<a href="CppState.htm">State</a>s()-&gt;Get<a href="CppState.htm">State</a>LoggedIn());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>NotLoggedIn*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog-&gt;Set<a href="CppState.htm">State</a>(m_dialog-&gt;Get<a href="CppState.htm">State</a>s()-&gt;Get<a href="CppState.htm">State</a>NotLoggedIn());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>Quiz*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog-&gt;Set<a href="CppState.htm">State</a>(m_dialog-&gt;Get<a href="CppState.htm">State</a>s()-&gt;Get<a href="CppState.htm">State</a>Quiz());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>ViewResultsGroup*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog-&gt;Set<a href="CppState.htm">State</a>(m_dialog-&gt;Get<a href="CppState.htm">State</a>s()-&gt;Get<a href="CppState.htm">State</a>ViewResultsGroup());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>ViewResultsVoting*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog-&gt;Set<a href="CppState.htm">State</a>(m_dialog-&gt;Get<a href="CppState.htm">State</a>s()-&gt;Get<a href="CppState.htm">State</a>ViewResultsVoting());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>Voting*&gt;(state))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog-&gt;Set<a href="CppState.htm">State</a>(m_dialog-&gt;Get<a href="CppState.htm">State</a>s()-&gt;Get<a href="CppState.htm">State</a>Voting());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("Unimplemented state: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> state-&gt;ToStr();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> error <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> error <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>("Should not get here, there must be an unimplemented state");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Should not get here (<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>::RespondToParticipant), there must be an unimplemented state");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> DEBUG_TEMP_2367452375825442365723832<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a>&nbsp;&nbsp;DEBUG_TEMP_2367452375825442365723832<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(GetDialog()-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> GetDialog()-&gt;GetParticipant()-&gt;Get<a href="CppState.htm">State</a>()-&gt;ToStr())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(GetDialog()-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(GetDialog()-&gt;GetParticipant()-&gt;Get<a href="CppState.htm">State</a>()-&gt;ToStr());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetDialog()-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;ToStr()<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> GetDialog()-&gt;GetParticipant()-&gt;Get<a href="CppState.htm">State</a>()-&gt;ToStr());<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstateassignpayoff.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstateassignpayoff.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATEASSIGNPAYOFF_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATEASSIGNPAYOFF_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff is the state the ParticipantDialog is<br/>
<a href="CppComment.htm">///</a>in when the experiment has finished.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>In <b><a href="CppThis.htm">this</a></b> state, nothing<br/>
<a href="CppComment.htm">///</a>exciting is expected to happen.<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff<br/>
 : <b><a href="CppPublic.htm">public</a></b> ParticipantDialog<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>AssignPayoff<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create every ParticipantDialog<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/its ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSomethingRandom() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToServerPush() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondTo<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the Participant's <a href="CppState.htm">State</a> to <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a>'s <a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParticipant<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> web page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>AssignPayoff::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_label_status(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_status;<br/>
&nbsp;&nbsp;} m_ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> each Participant already has his/her payoff as<b><a href="CppSigned.htm">signed</a></b> <b><a href="CppThis.htm">this</a></b>/last round<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Could have use lambda <a href="CppFunction.htm">function</a>s instead as well :-(<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> GetAllParticipantsHaveAs<b><a href="CppSigned.htm">signed</a></b>Payoff() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATEASSIGNPAYOFF_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstateassignpayoff.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstateassignpayoff.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstateassignpayoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff::ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff(<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: ParticipantDialog<a href="CppState.htm">State</a>(dialog,server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff::RespondTo<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume that only existing participants can have their payoffs as<b><a href="CppSigned.htm">signed</a></b>");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do nothing...<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display the Participant<br/>
&nbsp;&nbsp;RespondToParticipant();<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff::ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;m_ui.m_label_status<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_server-&gt;GetParameters()-&gt;GetAssignPayoff()-&gt;GetMessage().c_str());<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_label_status);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstatechat.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstatechat.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATECHAT_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATECHAT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The ParticipantDialog is in its <a href="CppChat.htm">chat</a> state.<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a><br/>
 : <b><a href="CppPublic.htm">public</a></b> ParticipantDialog<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create every ParticipantDialog<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/its ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSomethingRandom();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/In <b><a href="CppThis.htm">this</a></b> <b><a href="CppCase.htm">case</a></b>, when someone sent a <a href="CppChat.htm">chat</a> message<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondTo<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the Participant's <a href="CppState.htm">State</a> to <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a>'s <a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParticipant<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> web page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>() {}&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_edit_<a href="CppChat.htm">chat</a>(0), m_label_group(0), m_label_chat_tag(0), m_label_status(0), m_label_<a href="CppTime.htm">time</a>_left(0), m_table(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLineEdit.htm">Wt::WLineEdit</a> * m_edit_<a href="CppChat.htm">chat</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_group;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_chat_tag;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_status;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_<a href="CppTime.htm">time</a>_left;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWTable.htm">Wt::WTable</a> * m_table;<br/>
&nbsp;&nbsp;} ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetRandom<a href="CppDebug.htm">Debug</a>String() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SubmitChatText();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATECHAT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstatechat.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstatechat.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWGroupBox.htm">WGroupBox</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLineEdit.htm">WLineEdit</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWRadioButton.htm">WRadioButton</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTable.htm">WTable</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTableRow.htm">WTableRow</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWText.htm">WText</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTextArea.htm">WTextArea</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a><a href="CppChat.htm">chat</a>message.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate<a href="CppChat.htm">chat</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate<a href="CppChat.htm">chat</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShape.htm">shape</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShapeWidget.htm">shapewidget</a>.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtShapeWidget.htm">wtshapewidget</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>(<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: ParticipantDialog<a href="CppState.htm">State</a>(dialog,server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::DoSomethingRandom()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 10)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: ui.m_edit_<a href="CppChat.htm">chat</a>-&gt;setText(GetRandom<a href="CppDebug.htm">Debug</a>String()); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: SubmitChatText(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <b><a href="CppBreak.htm">break</a></b>; <a href="CppComment.htm">//</a>No problem<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::GetRandom<a href="CppDebug.htm">Debug</a>String() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Success should not go to head and failure should not go to heart. (Tamil proverb)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Light travels faster then sound... which is why most people appear brilliant until you hear them.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Happiness is like a butterfly, which when pursued is just beyond your grasp, but which <b><a href="CppIf.htm">if</a></b> you will sit down quietly may alight upon you. (Hawthorne)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The larger the lake of knowledge the longer the shore of wonder.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"When the power of love overcomes the love of power, then the world will know peace. (Jimi Hendrix)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"There is a light at the end of every tunnel, just pray it's not a train.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"You were born as an original. Don't die as a copy.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"He who feels that he is too small to <a href="CppMake.htm">make</a> a difference has never been bitten by a mosquito.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If I knew grandchildren were going to be <b><a href="CppThis.htm">this</a></b> much fun, I would have had them first!",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If you let go of the past, it no longer has a hold on you.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"There is a certain freedom in having nothing left to lose.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Rules <a href="CppOperatorPlus.htm">+</a> Regulations <a href="CppOperatorMinus.htm">-</a> Relationships <a href="CppOperatorAssign.htm">=</a> Resentment <a href="CppOperatorPlus.htm">+</a> Rebellion.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"When I stand before the Lord, I'd rather explain why I went, rather than why I didn't go.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"We <b><a href="CppDo.htm">do</a></b> what we believe, the rest is just a bunch of religious talk.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Of course men can multitask, they read on the toilet.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Friendship should not be sought, but is usually found both by chance and good luck.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Enthusiasm can be like a fire that needs an occasional poke with a stick.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The envious praise me unknowingly. (Kahlil Gibran)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If you can laugh with a person, you can work with a person.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Strive <b><a href="CppFor.htm">for</a></b> perfection in everything you <b><a href="CppDo.htm">do</a></b>. ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Take the best that exists and <a href="CppMake.htm">make</a> it better. ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"When it does not exist, design it. (Sir Frederick Henry Royce <a href="CppOperatorMinus.htm">-</a> of Rolls-Royce)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Smile is contagious; just smile at someone and see their reaction.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"It takes a day to find a <b><a href="CppFriend.htm">friend</a></b>, a moment to lose them but a life<a href="CppTime.htm">time</a> to forget them.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"He, who doesn't hope to win has already lost. (Simon Bolivar)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Don't follow the crowd, let the crowd follow you.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Making your good <a href="CppTime.htm">time</a>s count and not forgeting your bad <a href="CppTime.htm">time</a>s <a href="CppMake.htm">make</a>s a man sucessful.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Though we travel the world over to find the beautiful, we must carry it with us or we find it not. (Ralph Waldo Emerson)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Fate decides who walks into your life, you decide who you let stay, who you let walk away, and who you refuse to let walk out.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"It's <b><a href="CppTrue.htm">true</a></b> that we don't know what we've got until we lose it, but it's also <b><a href="CppTrue.htm">true</a></b> that we don't know what we've been missing until it arrives.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Don't <a href="CppMake.htm">make</a> someone a priority, who only <a href="CppMake.htm">make</a>s you an option.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If a man is not there <b><a href="CppFor.htm">for</a></b> you at your worst, he does not deserve to see you at your best.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"It is the pain of sacrifice or the pain of regret.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"He who wrestles with us, strengthens our nerves and sharpens our skills. Our antagonist is our helper. (Edmund Burke)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Friendship is not <a href="CppAbout.htm">about</a> who came first or who cares the most. It is all <a href="CppAbout.htm">about</a> who came in your life and never left.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Contingencies have tendencies to become dependencies. (W. Thomas McQueeney)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"When you take things <b><a href="CppFor.htm">for</a></b> granted, the things you are granted, get taken. (Phil Hennessy)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The older I get, the smarter my Dad gets. (Mark Twain)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The search <b><a href="CppFor.htm">for</a></b> wisdom is a great challenge; to act on wisdom is an even greater challenge. (Jagad Guru)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Charity may begin at home, but <b><a href="CppIf.htm">if</a></b> it goes no further, it's no longer <b><a href="CppChar.htm">char</a></b>ity. It's clan loyalty.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A computer once beat me at <a href="CppChess.htm">chess</a>, but it was no match <b><a href="CppFor.htm">for</a></b> me at kick boxing.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Advice <b><a href="CppFor.htm">for</a></b> the day: If you have a headache, <b><a href="CppDo.htm">do</a></b> what it says on the aspirin bottle: Take two, and keep away from children.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Expecting the world to treat you fairly because you are good is like expecting the bull not to <b><a href="CppChar.htm">char</a></b>ge because you are a vegetarian.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"When the well's dry, we know the worth of water. (Ben Franklin)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A succesful man <a href="CppMake.htm">make</a>s more money than his woman can spend. ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A succesful woman is one who can find such a man.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If you can't dance, don't blame the dance floor.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The road to a <b><a href="CppFriend.htm">friend</a></b>s house is never <b><a href="CppLong.htm">long</a></b>. (Swedish proverb)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppTime.htm">time</a> to ensure that the toilet works is before you really need it.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Making enemies out of <b><a href="CppFriend.htm">friend</a></b>s is easy. ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Making <b><a href="CppFriend.htm">friend</a></b>s out of enemies is difficult, but it is actually worth<b><a href="CppWhile.htm">while</a></b>.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Fools learn from experience. Wise men learn from the experience of others (Otto von Bismark)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"When the congregation falls asleep it is <a href="CppTime.htm">time</a> <b><a href="CppFor.htm">for</a></b> the minister to wake up.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The measure of greatness is not found in your accomplishments. Its in how much discouragement it takes to stop you.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Laziness is the mother of all vice... but, it's a mother and you should respect her! (Spanish popular wisdom)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Talent hits the target which no one <b><a href="CppElse.htm">else</a></b> can hit; genius hits the target which no one <b><a href="CppElse.htm">else</a></b> can see.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A beautiful relationship does not depend upon how good we understand someone but on how well we avoid misunderstandings.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Wisdom will keep you from getting into situations where you need it. (Bruce M. Sandbrook)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Opportunity is a bald man with a beard: You can <b><a href="CppCatch.htm">catch</a></b> him coming, but you can' t <b><a href="CppCatch.htm">catch</a></b> him going.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"What is worth having is worth waiting <b><a href="CppFor.htm">for</a></b>.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Love is an irresistible desire to be irresistibly desired. (Robert Frost)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"An eye <b><a href="CppFor.htm">for</a></b> an eye leaves the whole world blind. (Mohandas Gandhi)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"As <b><a href="CppLong.htm">long</a></b> as people keep killing people, to stop the killing of people, the killing will go on.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If love was a raindrop I would send you a shower ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If hope was a minute I would send you an hour",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If happiness was a leaf I would send you a tree",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If you need a <b><a href="CppFriend.htm">friend</a></b> you will always have me!",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Surely it's no coincidence that the word 'listen' is an anagram of the word 'silent'.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"May every day of your life together be worse than the next. (Old Irish wedding blessing)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If <b><a href="CppThis.htm">this</a></b> is coffee, please bring me some tea; but <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> is tea, please bring me some coffee. (Abraham Lincoln)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A good match blows fire...",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"You may have grown old, but you may not have grown up.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"It is not what you gather but what you scatter that tells what kind of life you have lived.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If you need <a href="CppTime.htm">time</a> alone, <b><a href="CppTry.htm">try</a></b> cleaning the house.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If I never had a bad day, how would I know whether I was having a good day? (Lee)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"When you give and don't expect <a href="CppAny.htm">any</a>thing back that's love. But <b><a href="CppIf.htm">if</a></b> you give and expect a <b><a href="CppReturn.htm">return</a></b> it's an investment.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Laughter is a smile with the volume turned up.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Some<a href="CppTime.htm">time</a>s we all have days where we are 386's in a P4 world.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Have you ever noticed how the contents of a box are much more interesting before the box is opened?",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"It is okay to visit your past just don't bring <a href="CppAny.htm">any</a> luggage with you.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"There's a book that tells you where you should go on your vacation. It's called your checkbook.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Knowledge is proud she knows so much; wisdom is humble that she knows no more. (Cowper)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Twenty years from now you will be more disap<a href="CppPointer.htm">point</a>ed by the things you did not <b><a href="CppDo.htm">do</a></b> than by the ones you did. (Mark Twain)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"You can't expect people to look eye to eye with you <b><a href="CppIf.htm">if</a></b> you are looking down on them.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"We can't always build the future <b><a href="CppFor.htm">for</a></b> our youth, but we can build our youth <b><a href="CppFor.htm">for</a></b> the future. (Franklin D. Roosevelt)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Be not simply good; be good <b><a href="CppFor.htm">for</a></b> something. (Henry David Thoreau)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Success is the ability to go from one failure to another with no loss of enthusiasm. (Winston Churchill)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Be careful <a href="CppAbout.htm">about</a> reading health books. You may die of a misprint. (Mark Twain)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Better a diamond with a flaw than a pebble without.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A children's catechism <b><a href="CppClass.htm">class</a></b> was learning the Apostles Creed. Each child had been as<b><a href="CppSigned.htm">signed</a></b> a sentence to repeat. ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"People laugh because I'm different, I laugh because they're all the same.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Hope is the ability to hear the <a href="CppMusic.htm">music</a> of the future. ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Faith is having the courage to dance to it today.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"You can't <a href="CppMake.htm">make</a> someone <b><a href="CppElse.htm">else</a></b>'s choices. You shouldn't let someone <b><a href="CppElse.htm">else</a></b> <a href="CppMake.htm">make</a> yours. (Colin Powell)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Impossibility simply means I'm possibility. (Monsieur Nana Adom)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Faith is personal, but never <b><a href="CppPrivate.htm">private</a></b>.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Tears are the baptism of the soul.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Utility is when you have one telephone, luxury is when you have two, and paradise is when you have none.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A politician is the one who shakes your hand before elections and your confidence after.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Quality rather than quantity determines your success.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Don't protect yourself by a fence, but rather by your <b><a href="CppFriend.htm">friend</a></b>s.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A baby seal walks into a club. (Anonymous)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Here was the sort of man you only dared to cross <b><a href="CppIf.htm">if</a></b> you had a team of Sherpas with you. (Douglas Adams)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"I don't smoke, I don't drink, I don't snort and I don't gamble. I <b><a href="CppDo.htm">do</a></b> lie a little bit though. (Tim Maia)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"I'm not an actor, but I play one on TV. (David Recksiek)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Did you know that dolphins are just gay sharks? (Heather Morris)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Black Beauty, He was a dark horse. (Tim Vine)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Bigfoot is blurry, it's not the photographer's fault. (Mitch Hedberg)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"I have nothing to declare except my genius. (Oscar Wilde, upon arriving at US customs 1882[2])",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Race is just a pigment of the imagination (Glen Highland)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If all those sweet young things were laid end to end <a href="CppOperatorMinus.htm">-</a> I wouldn't be a bit surprised. (Dorothy Parker, on girls attending a Yale prom[3])",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"So, have you noticed there aren't a lot of Chinese guys named Rusty? (George Carlin)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"I never forget a face, but in your <b><a href="CppCase.htm">case</a></b> I'll be glad to <a href="CppMake.htm">make</a> an <a href="CppException.htm">exception</a>. (Groucho Marx)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Take my wife <a href="CppOperatorMinus.htm">-</a> please! (Henny Youngman)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The worst <a href="CppTime.htm">time</a> to have a heart attack is during a game of <b><a href="CppChar.htm">char</a></b>ades (Demetri Martin)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"My <b><a href="CppFriend.htm">friend</a></b> has difficulty sleeping, but I can <b><a href="CppDo.htm">do</a></b> it with my eyes closed. (Shmuel Breban)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If it wasn't <b><a href="CppFor.htm">for</a></b> pickpockets, I'd have no sex life at all. (Rodney Dangerfield)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Overall, I'd say my career as a photographer has been a bit of a blur. (Milton Jones)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"My mom bought me a <a href="CppMemory.htm">memory</a> pillow a couple of years ago... I don't tell secrets in my bedroom <a href="CppAny.htm">any</a>more. (Bink)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Ah, nostalgia ain't what it used to be... (English Proverb)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"I have a map of the world... it's actual size. (Steven Wright)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"I live in a two-income household, but who knows how <b><a href="CppLong.htm">long</a></b> my mom can keep that up. (Shmuel Breban)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"I quit my job at the helium factory, I refuse to be spoken to in that tone. (Stewart Francis)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"I have come here to chew bubblegum and kick ass, and I'm all out of bubblegum. (Nada in They Live[4])",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"People laughed when I said I'd become a comedian. Well, they're not laughing now. (Bob Monkhouse)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A single spark can set a prairie on fire",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Water can both sustain and sink a ship",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Count not what is lost, but what is left",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If there is a s<a href="GameTronCollection.htm">tron</a>g general there will be no weak soldiers",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"To extend your life by a year take one less bite each meal",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Peace only comes when reason rules",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Even the tallest tower started from the ground",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Eloquence provides only persuasion, but truth buys loyalty",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Wisdom is attained by learning when to hold one's tongue",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A single tree cannot <a href="CppMake.htm">make</a> a forest",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If one eats less one will taste more",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"One hand alone cannot clap, it takes two to quarrel",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"It does not matter <b><a href="CppIf.htm">if</a></b> the cat is black or white, so <b><a href="CppLong.htm">long</a></b> as it <b><a href="CppCatch.htm">catch</a></b>es mice",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Cowards have dreams, brave men have visions",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Learning is like the horizon; there is no limit",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The old horse will know the way",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A good <b><a href="CppFriend.htm">friend</a></b> shields you from the storm",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Change the skin, wash the heart",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Sow melon, reap melon; sow beans, reap beans",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"One sings, all follow",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Fortune has a fickle heart and a <b><a href="CppShort.htm">short</a></b> <a href="CppMemory.htm">memory</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Harsh words and poor reasoning never settle <a href="CppAny.htm">any</a>thing",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Dangerous enemies will meet again in narrow streets",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Better to bend in the wind than to <b><a href="CppBreak.htm">break</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Do not kill the hen <b><a href="CppFor.htm">for</a></b> her eggs",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"First attain skill; creativity comes later",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Make the cap fit the head",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A single beam cannot support a great house",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Do not be concerned with things outside your door",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Wise men may not be learned; learned men may not be wise",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Crows are black the world over",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Do not lift a rock only to drop it on your own foot",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Kill the chicken to frighten the monkey",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Wait <b><a href="CppLong.htm">long</a></b>, strike fast",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Do not wait until you're thirsty to dig a well",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"One who would pick the roses must bear with thorns",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Failure is the mother of success",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Do not climb a tree to look <b><a href="CppFor.htm">for</a></b> a fish",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Only <a href="CppTime.htm">time</a> and effort brings proficiency",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Distance tests the endurance of a horse; <a href="CppTime.htm">time</a> reveals a man's <a href="CppChar.htm">character</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Programming<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Programs must be written <b><a href="CppFor.htm">for</a></b> people to read, and only incidentally <b><a href="CppFor.htm">for</a></b> machines to execute. Harold Abelson and Gerald Jay Sussman",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it. Alan Perlis",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"If you lie to the <a href="CppCompiler.htm">compiler</a>, it will get its revenge. Henry Spencer"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!v.empty());<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> v[ <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> v.size() ];<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::RespondToServerPush()<br/>
{<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a> * <b><a href="CppConst.htm">const</a></b> server_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>*&gt;(m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!server_state)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": warning: no Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;GetParticipant()-&gt;GetId() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get <a href="CppChat.htm">chat</a> messages <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b> participant<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (server_state-&gt;CanGetChatMessages(GetDialog()-&gt;GetParticipant()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt; &gt; chat_messages<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> server_state-&gt;GetChatMessages(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetDialog()-&gt;GetParticipant());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(chat_messages.begin(),chat_messages.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt; chat_message)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;ui.m_table);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui.m_table-&gt;insertRow(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWtShapeWidget.htm">WtShapeWidget</a> * chat_tag <a href="CppOperatorAssign.htm">=</a> chat_message-&gt;GetSender()-&gt;GetChat<a href="CppShape.htm">Shape</a>()-&gt;Clone();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.m_table-&gt;elementAt(0,0)-&gt;addWidget(chat_tag);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.m_table-&gt;elementAt(0,1)-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(chat_message-&gt;GetText()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display the Participant<br/>
&nbsp;&nbsp;RespondToParticipant();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::RespondTo<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>Left();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update label_<a href="CppTime.htm">time</a>_left<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("<a href="CppTime.htm">Time</a> left: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<a href="CppTime.htm">time</a>_left)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" seconds ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label_<a href="CppTime.htm">time</a>_left-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume a logged in participant");<br/>
<br/>
&nbsp;&nbsp;ui.m_edit_<a href="CppChat.htm">chat</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLineEdit.htm">Wt::WLineEdit</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("Hello from ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(GetDialog()-&gt;GetParticipant()-&gt;GetId()));<br/>
&nbsp;&nbsp;ui.m_label_status <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Welcome participant");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;GetParticipant()-&gt;CanGetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume a logged in participant with an ID");<br/>
<br/>
&nbsp;&nbsp;ui.m_label_chat_tag <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Your <a href="CppChat.htm">chat</a> tag is");<br/>
<br/>
&nbsp;&nbsp;ui.m_label_group <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("You are in group number ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_server-&gt;GetGroups()-&gt;FindMyGroup(GetDialog()-&gt;GetParticipant())-&gt;GetId()));<br/>
&nbsp;&nbsp;ui.m_label_<a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("<a href="CppTime.htm">Time</a> left: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>Left())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" seconds ")).c_str());<br/>
&nbsp;&nbsp;ui.m_table <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWTable.htm">Wt::WTable</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_edit_<a href="CppChat.htm">chat</a>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_group);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_chat_tag);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_status);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_table);<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_status);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_group);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_chat_tag);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(GetDialog()-&gt;GetParticipant()-&gt;GetChat<a href="CppShape.htm">Shape</a>()-&gt;Clone());<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_edit_<a href="CppChat.htm">chat</a>);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_table);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ButtonGroup<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">container</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("Possible voting options",dialog);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; descriptions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetParameters()-&gt;GetVoting()-&gt;GetVoteDescriptions();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_descriptions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(descriptions.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the RadioButtons<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_descriptions; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWRadioButton.htm">Wt::WRadioButton</a> * <b><a href="CppConst.htm">const</a></b> button <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWRadioButton.htm">Wt::WRadioButton</a>(descriptions[i].c_str(), <a href="CppContainer.htm">container</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(<a href="CppContainer.htm">container</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;ui.m_edit_<a href="CppChat.htm">chat</a>-&gt;setMinimumSize(600,<a href="CppWLength.htm">Wt::WLength</a>::Auto);<br/>
&nbsp;&nbsp;ui.m_table-&gt;setMinimumSize(600,600);<br/>
&nbsp;&nbsp;ui.m_edit_<a href="CppChat.htm">chat</a>-&gt;enterPressed().connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::SubmitChatText);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::SubmitChatText()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_edit_<a href="CppChat.htm">chat</a>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "When the dialog in in the chatting state, there should be a participant");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui.m_edit_<a href="CppChat.htm">chat</a>-&gt;text().empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> ui.m_edit_<a href="CppChat.htm">chat</a>-&gt;text().toUTF8();<br/>
&nbsp;&nbsp;ui.m_edit_<a href="CppChat.htm">chat</a>-&gt;setText(GetRandom<a href="CppDebug.htm">Debug</a>String().c_str());<br/>
<br/>
&nbsp;&nbsp; <br/>
<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a> * <b><a href="CppConst.htm">const</a></b> server_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>*&gt;(m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!server_state)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": warning: no Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;server_state-&gt;NotifyChatMessage(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetDialog()-&gt;GetParticipant(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ChatMessage(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetDialog()-&gt;GetParticipant(),s)));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstatechooseaction.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstatechooseaction.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATECHOOSEACTION_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATECHOOSEACTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The ParticipantDialog is in its choose-an-action state.<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>ChooseAction<br/>
 : <b><a href="CppPublic.htm">public</a></b> ParticipantDialog<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>ChooseAction<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create every ParticipantDialog<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/its ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>ChooseAction(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSomethingRandom();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToServerPush() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondTo<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the Participant's <a href="CppState.htm">State</a> to <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a>'s <a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParticipant<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> web page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>ChooseAction::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParticipantDialog<a href="CppState.htm">State</a>ChooseAction() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a>ChooseAction*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_button_choose_action(0), m_group(0), m_label_status(0), m_label_<a href="CppTime.htm">time</a>_left(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWPushButton.htm">Wt::WPushButton</a> * m_button_choose_action;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWButtonGroup.htm">Wt::WButtonGroup</a> * m_group;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_status;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_<a href="CppTime.htm">time</a>_left;<br/>
&nbsp;&nbsp;} ui;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnChooseActionClick();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATECHOOSEACTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstatechooseaction.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstatechooseaction.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWButtonGroup.htm">WButtonGroup</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWGroupBox.htm">WGroupBox</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPushButton.htm">WPushButton</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWRadioButton.htm">WRadioButton</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>chooseactionoption.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatechooseaction.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ChooseAction::ParticipantDialog<a href="CppState.htm">State</a>ChooseAction(<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: ParticipantDialog<a href="CppState.htm">State</a>(dialog,server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ChooseAction::DoSomethingRandom()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Select a random button<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui.m_button_choose_action-&gt;isEnabled())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.m_group-&gt;setSelectedButtonIndex(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> (ui.m_group-&gt;count() <a href="CppOperatorPlus.htm">+</a> 1)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Click to choose <b><a href="CppThis.htm">this</a></b> action<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui.m_button_choose_action-&gt;isEnabled())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnChooseActionClick();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <b><a href="CppBreak.htm">break</a></b>; <a href="CppComment.htm">//</a>No problem<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ChooseAction::OnChooseActionClick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> action_index <a href="CppOperatorAssign.htm">=</a> ui.m_group-&gt;selectedButtonIndex();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> user did not click vote, without selecting a radiobutton<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (action_index <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(action_index &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_server-&gt;GetParameters()-&gt;GetChooseAction()-&gt;GetOptions().size()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server<a href="CppState.htm">State</a>ChooseAction * <b><a href="CppConst.htm">const</a></b> server_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Server<a href="CppState.htm">State</a>ChooseAction*&gt;(m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!server_state)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": warning: no Server<a href="CppState.htm">State</a>ChooseAction\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;server_state-&gt;NotifyChosenAction(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetDialog()-&gt;GetParticipant(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_server-&gt;GetParameters()-&gt;GetChooseAction()-&gt;GetOptions()[action_index].get());<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Log the action<br/>
&nbsp;&nbsp;ui.m_button_choose_action-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_group-&gt;selectedButtonIndex() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "m_button_choose_action should only disable when an action is selected");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> buttons <a href="CppOperatorAssign.htm">=</a> ui.m_group-&gt;buttons();<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(buttons.begin(),buttons.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppWRadioButton.htm">Wt::WRadioButton</a> * <b><a href="CppConst.htm">const</a></b> r) { r-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>); } );<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ChooseAction::RespondTo<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>Left();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update label_<a href="CppTime.htm">time</a>_left<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("<a href="CppTime.htm">Time</a> left: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<a href="CppTime.htm">time</a>_left)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" seconds");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_server-&gt;GetParameters()-&gt;GetChooseAction()-&gt;GetWait())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Infinite <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppStdString.htm">std::string</a>(" (waiting <b><a href="CppFor.htm">for</a></b> others)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label_<a href="CppTime.htm">time</a>_left-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> choice must be sent to the server<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_server-&gt;GetParameters()-&gt;GetChooseAction()-&gt;GetWait()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppTime.htm">time</a>_left <a href="CppOperatorLessEqual.htm">&lt;=</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui.m_button_choose_action-&gt;isEnabled())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let Participant choose a random action by <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> selected <a href="CppOperatorAssign.htm">=</a> ui.m_group-&gt;selectedButtonIndex();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_group-&gt;count() &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> action_index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (selected <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1 <a href="CppComment.htm">//</a>Did user select something?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> ui.m_group-&gt;count() <a href="CppComment.htm">//</a>Take a random action<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: selected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(action_index &gt; <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> action_index &lt; ui.m_group-&gt;count());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.m_group-&gt;setSelectedButtonIndex(action_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnChooseActionClick();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!ui.m_button_choose_action-&gt;isEnabled())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_group-&gt;selectedButtonIndex() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "m_button_choose_action should only disable when an action is selected");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChooseActionOption&gt; &gt;&amp; options<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetParameters()-&gt;GetChooseAction()-&gt;GetOptions();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_group-&gt;selectedButtonIndex() &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(options.size()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChooseActionOption&gt; option<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> options[ ui.m_group-&gt;selectedButtonIndex() ];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> option-&gt;GetMessageChoice()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("\', waiting <b><a href="CppFor.htm">for</a></b> the others...");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label_status-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label_status-&gt;setText("Please choose an action.");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Follow the server its tempo<br/>
&nbsp;&nbsp;RespondToParticipant();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ChooseAction::ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume a logged in participant");<br/>
<br/>
&nbsp;&nbsp;ui.m_button_choose_action <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWPushButton.htm">Wt::WPushButton</a>("Submit");<br/>
&nbsp;&nbsp;ui.m_group <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWButtonGroup.htm">Wt::WButtonGroup</a>(dialog);<br/>
&nbsp;&nbsp;ui.m_label_status <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Please choose an action.");<br/>
&nbsp;&nbsp;ui.m_label_<a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("<a href="CppTime.htm">Time</a> left: ... seconds");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_button_choose_action);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_group);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_status);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_status);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ButtonGroup<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">container</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("Possible actions",dialog);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChooseActionOption&gt; &gt;&amp; options<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetParameters()-&gt;GetChooseAction()-&gt;GetOptions();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_options<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(options.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the RadioButtons<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_options; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWRadioButton.htm">Wt::WRadioButton</a> * <b><a href="CppConst.htm">const</a></b> button <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWRadioButton.htm">Wt::WRadioButton</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options[i]-&gt;GetDescription().c_str(), <a href="CppContainer.htm">container</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(<a href="CppContainer.htm">container</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.m_group-&gt;addButton(button,i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_button_choose_action);<br/>
<br/>
&nbsp;&nbsp;ui.m_button_choose_action-&gt;clicked().connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ChooseAction::OnChooseActionClick);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstatefinished.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstatefinished.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATEFINISHED_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATEFINISHED_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>ParticipantDialog<a href="CppState.htm">State</a>Finished is the state the ParticipantDialog is<br/>
<a href="CppComment.htm">///</a>in when the experiment has finished.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>In <b><a href="CppThis.htm">this</a></b> state, nothing<br/>
<a href="CppComment.htm">///</a>exciting is expected to happen.<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>Finished<br/>
 : <b><a href="CppPublic.htm">public</a></b> ParticipantDialog<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>Finished<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create every ParticipantDialog<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/its ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>Finished(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSomethingRandom() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToServerPush() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondTo<a href="CppTime.htm">Time</a>dServerPush() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> web page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>Finished::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParticipantDialog<a href="CppState.htm">State</a>Finished() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a>Finished*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATEFINISHED_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstatefinished.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstatefinished.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoffs.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatefinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Finished::ParticipantDialog<a href="CppState.htm">State</a>Finished(<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: ParticipantDialog<a href="CppState.htm">State</a>(dialog,server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Finished::ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;GetParticipant());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server-&gt;GetParameters());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server-&gt;GetParameters()-&gt;GetFinished());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> total_payoff <a href="CppOperatorAssign.htm">=</a> dialog-&gt;GetParticipant()-&gt;GetPayoffs()-&gt;GetTotal();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> earnings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetParameters()-&gt;GetFinished()-&gt;CalculateEarnings(total_payoff);<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display the status message<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_server-&gt;GetParameters()-&gt;GetFinished()-&gt;GetMessage().c_str()));<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("You have obtained a total payoff of ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> CurrencyToStr(total_payoff)));<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("You have earned ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> CurrencyToStr(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;earnings)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " euros"));<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstategroupassign.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstategroupassign.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PARTICIPANTDIALOGSTATEGROUPASSIGN_H<br/>
<a href="CppDefine.htm">#define</a> PARTICIPANTDIALOGSTATEGROUPASSIGN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The state that a Participant is or has to be as<b><a href="CppSigned.htm">signed</a></b> to a group.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>ParticipantDialog<a href="CppState.htm">State</a>GroupAssign is the state the ParticipantDialog<br/>
<a href="CppComment.htm">///</a>has just logged in and must be as<b><a href="CppSigned.htm">signed</a></b> a group (and thus has to<br/>
<a href="CppComment.htm">///</a>wait), or when a period (the larger cycle) is repeated (where the<br/>
<a href="CppComment.htm">///</a>Participant has his/her group re-as<b><a href="CppSigned.htm">signed</a></b>)<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>GroupAssign<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> ParticipantDialog<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>GroupAssign<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create every ParticipantDialog<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/its ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>GroupAssign(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSomethingRandom() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToServerPush() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondTo<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the Participant's <a href="CppState.htm">State</a> to <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a>'s <a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParticipant<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> web page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>GroupAssign::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParticipantDialog<a href="CppState.htm">State</a>GroupAssign() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a>GroupAssign*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The user <a href="CppInterface.htm">interface</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_label_group(0), m_label_status(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_group;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_status;<br/>
&nbsp;&nbsp;} ui;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATEGROUPASSIGN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstategroupassign.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstategroupassign.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate<a href="CppChat.htm">chat</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstategroupassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstategroupreassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstategroupassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>GroupAssign::ParticipantDialog<a href="CppState.htm">State</a>GroupAssign(<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: ParticipantDialog<a href="CppState.htm">State</a>(dialog,server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>GroupAssign::RespondTo<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp; <br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume that only existing participants can have their payoffs as<b><a href="CppSigned.htm">signed</a></b>");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetDialog()-&gt;GetParticipant();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>GroupAssign * <b><a href="CppConst.htm">const</a></b> server_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Server<a href="CppState.htm">State</a>GroupAssign*&gt;(m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!server_state)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": warning: no Server<a href="CppState.htm">State</a>GroupAssign\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is the Participant waiting to be as<b><a href="CppSigned.htm">signed</a></b> to a group?<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_server-&gt;GetGroups()-&gt;FindMyGroup(participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> m_server-&gt;GetGroups()-&gt;GetGroupLoggedIn())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Can the server assign the Participant to a group?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (server_state-&gt;CanAssignGroup(participant))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assign the Participant to a group<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server_state-&gt;AssignGroup(participant);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server-&gt;GetGroups()-&gt;FindMyGroup(participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> m_server-&gt;GetGroups()-&gt;GetGroupLoggedIn());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display the group the Participant is in<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetGroups()-&gt;FindMyGroup(participant);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update the status label<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> message<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetParameters()-&gt;GetGroupAssign()-&gt;GetMessageAs<b><a href="CppSigned.htm">signed</a></b>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(group-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> GroupNotLoggedIn *&gt;(group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppStdString.htm">std::string</a>(" (not participating)")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppStdString.htm">std::string</a>(" (participating)"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_group);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label_group-&gt;setText(message.c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; participant <a href="CppOperatorAssign.htm">=</a> GetDialog()-&gt;GetParticipant();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>GroupAssign*&gt;(participant-&gt;Get<a href="CppState.htm">State</a>()))<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>GroupAssign* <b><a href="CppConst.htm">const</a></b> state<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>GroupAssign*&gt;(participant-&gt;Get<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;ui.m_label_status-&gt;setText(state-&gt;GetMessage().c_str());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Follow the server its tempo<br/>
&nbsp;&nbsp;RespondToParticipant();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>GroupAssign::ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A Participant must be logged in in <b><a href="CppThis.htm">this</a></b> state");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;GetParticipant()-&gt;CanGetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A Participant must be as<b><a href="CppSigned.htm">signed</a></b> an ID before entering <b><a href="CppThis.htm">this</a></b> state");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> participant <a href="CppOperatorAssign.htm">=</a> dialog-&gt;GetParticipant();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the <a href="CppWidget.htm">widget</a>(s)<br/>
&nbsp;&nbsp;ui.m_label_group <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>;<br/>
&nbsp;&nbsp;ui.m_label_status <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the <a href="CppWidget.htm">widget</a>(s)<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_status);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_group);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the <a href="CppWidget.htm">widget</a>s to the<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> id<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "You have been as<b><a href="CppSigned.htm">signed</a></b> ID "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(id.c_str()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_group);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group <a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetGroups()-&gt;FindMyGroup(participant);<br/>
<br/>
&nbsp;&nbsp;ui.m_label_group-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> GroupParticipating*&gt;(group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? m_server-&gt;GetParameters()-&gt;GetGroupAssign()-&gt;GetMessageAs<b><a href="CppSigned.htm">signed</a></b>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> GroupParticipating*&gt;(group)-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: m_server-&gt;GetParameters()-&gt;GetGroupAssign()-&gt;GetMessageUnassigned() ).c_str() );<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstategroupreassign.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstategroupreassign.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PARTICIPANTDIALOGSTATEGROUPREASSIGN_H<br/>
<a href="CppDefine.htm">#define</a> PARTICIPANTDIALOGSTATEGROUPREASSIGN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The state that a Participant is or has to be as<b><a href="CppSigned.htm">signed</a></b> to a group.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign is the state the ParticipantDialog<br/>
<a href="CppComment.htm">///</a>has just logged in and must be as<b><a href="CppSigned.htm">signed</a></b> a group (and thus has to<br/>
<a href="CppComment.htm">///</a>wait), or when a period (the larger cycle) is repeated (where the<br/>
<a href="CppComment.htm">///</a>Participant has his/her group re-as<b><a href="CppSigned.htm">signed</a></b>)<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> ParticipantDialog<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>GroupReAssign<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create every ParticipantDialog<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/its ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSomethingRandom() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToServerPush() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondTo<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the Participant's <a href="CppState.htm">State</a> to <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a>'s <a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParticipant<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> web page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>GroupReAssign::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The user <a href="CppInterface.htm">interface</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_label_status(0), m_label_<a href="CppTime.htm">time</a>_left(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_status;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_<a href="CppTime.htm">time</a>_left;<br/>
&nbsp;&nbsp;} ui;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATEGROUPREASSIGN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstategroupreassign.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstategroupreassign.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTable.htm">WTable</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWText.htm">WText</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate<a href="CppChat.htm">chat</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstategroupassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstategroupreassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoffs.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign::ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign(<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: ParticipantDialog<a href="CppState.htm">State</a>(dialog,server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign::RespondTo<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume that only existing participants can have their payoffs as<b><a href="CppSigned.htm">signed</a></b>");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update label_<a href="CppTime.htm">time</a>_left<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>Left();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("<a href="CppTime.htm">Time</a> left: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<a href="CppTime.htm">time</a>_left)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" seconds ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label_<a href="CppTime.htm">time</a>_left-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Follow the server its tempo<br/>
&nbsp;&nbsp;RespondToParticipant();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign::ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A Participant must be logged in in <b><a href="CppThis.htm">this</a></b> state");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant <a href="CppOperatorAssign.htm">=</a> dialog-&gt;GetParticipant();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;GetParticipant()-&gt;CanGetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A Participant must be as<b><a href="CppSigned.htm">signed</a></b> an ID before entering <b><a href="CppThis.htm">this</a></b> state");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> payoffs <a href="CppOperatorAssign.htm">=</a> participant-&gt;GetPayoffs();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group <a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetGroups()-&gt;FindMyGroup(participant);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(group);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the <a href="CppWidget.htm">widget</a>(s)<br/>
&nbsp;&nbsp;ui.m_label_status <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>;<br/>
&nbsp;&nbsp;ui.m_label_<a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the <a href="CppWidget.htm">widget</a>(s)<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_status);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Group re-assign"));<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("This is the end of <b><a href="CppThis.htm">this</a></b> period"));<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("You are in group #")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(group-&gt;GetId())).c_str()));<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("Your earnings in <b><a href="CppThis.htm">this</a></b> period are ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> CurrencyToStr(payoffs-&gt;GetLast()-&gt;m_payoff)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" <a href="CppPointer.htm">point</a>s")).c_str()));<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("Your total earnings are ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> CurrencyToStr(payoffs-&gt;GetTotal())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" <a href="CppPointer.htm">point</a>s")).c_str()));<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Group average earnings:"));<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppWTable.htm">Wt::WTable</a> * table <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWTable.htm">Wt::WTable</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> groups <a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetGroups()-&gt;CollectGroups(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(groups.begin(),groups.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;dialog,&amp;table,<b><a href="CppThis.htm">this</a></b>,group](<b><a href="CppConst.htm">const</a></b> Group* <b><a href="CppConst.htm">const</a></b> <a href="CppAny.htm">any</a>_group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppAny.htm">any</a>_group-&gt;GetAveragePayoffs().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;insertRow(0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;elementAt(0,0)-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWString.htm">Wt::WString</a>("Group {1}").arg(<a href="CppAny.htm">any</a>_group-&gt;GetId())));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;elementAt(0,1)-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWString.htm">Wt::WString</a>("{1} <a href="CppPointer.htm">point</a>s").arg(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;CurrencyToStr(<a href="CppAny.htm">any</a>_group-&gt;GetAveragePayoffs().back()))));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppAny.htm">any</a>_group <a href="CppOperatorEqual.htm">==</a> group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;elementAt(0,2)-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("your group"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>GroupReAssign * <b><a href="CppConst.htm">const</a></b> server_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Server<a href="CppState.htm">State</a>GroupReAssign*&gt;(m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!server_state)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": warning: no Server<a href="CppState.htm">State</a>GroupReAssign\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> p <a href="CppOperatorAssign.htm">=</a> server_state-&gt;GetWorstAndBestGroup();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (group <a href="CppOperatorEqual.htm">==</a> p.first)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Worst<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.second-&gt;GetSize() <a href="CppOperatorEqual.htm">==</a> 5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("Your group has the lowest average earnings in <b><a href="CppThis.htm">this</a></b> period"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("and has been selected to &lt;b&gt;be eliminated from the experiment&lt;/b&gt;"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(<a href="CppWString.htm">Wt::WString</a>("Group {1} has the highest average earnings in <b><a href="CppThis.htm">this</a></b> period and has been selected to grow").arg(p.first-&gt;GetId())));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(<a href="CppWString.htm">Wt::WString</a>("This group grows from 3 to 5 members.")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(<a href="CppWString.htm">Wt::WString</a>("Your group &lt;b&gt;remains the same&lt;/b&gt;")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (group <a href="CppOperatorEqual.htm">==</a> p.second)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (group-&gt;GetSize() <a href="CppOperatorEqual.htm">==</a> 5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("Your group has the highest average earnings in <b><a href="CppThis.htm">this</a></b> period"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("and has been selected to &lt;b&gt;grow and split&lt;/b&gt; into two groups."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("Your group first grows from 5 to 6 members, and then splits into two groups of three members."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("Your group in the next period will be one of those two groups"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("Your group has the highest average earnings in <b><a href="CppThis.htm">this</a></b> period and has been selected to &lt;b&gt;grow&lt;/b&gt;"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("Your group grows from 3 to 5 members"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.second-&gt;GetSize() <a href="CppOperatorEqual.htm">==</a> 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Best group grows<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(<a href="CppWString.htm">Wt::WString</a>("Group {1} has the highest average earnings in <b><a href="CppThis.htm">this</a></b> period and has been selected to grow").arg(p.first-&gt;GetId())));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(<a href="CppWString.htm">Wt::WString</a>("This group grows from 3 to 5 members.")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(<a href="CppWString.htm">Wt::WString</a>("Your group &lt;b&gt;remains the same&lt;/b&gt;")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Best group splits, worst dies<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(<a href="CppWString.htm">Wt::WString</a>("Group {1} has the highest average earnings in <b><a href="CppThis.htm">this</a></b> period").arg(p.second-&gt;GetId())));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("and has been selected to grow and split into two groups."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(<a href="CppWString.htm">Wt::WString</a>("Group {1} has the lowest average earnings in <b><a href="CppThis.htm">this</a></b> period").arg(p.first-&gt;GetId())));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("and has been selected to be eliminated from the experiment."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(<a href="CppWString.htm">Wt::WString</a>("Your group &lt;b&gt;remains the same&lt;/b&gt;")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (group <a href="CppOperatorEqual.htm">==</a> p.first <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> p.second-&gt;GetSize() <a href="CppOperatorEqual.htm">==</a> 5)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A dead Participant :3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("For you, <b><a href="CppThis.htm">this</a></b> experiment ends now"));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A survivor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> TEMP_DEBUG_215487632492487527652376428<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> TEMP_DEBUG_215487632492487527652376428<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(!<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> PayoffReAssign*&gt;(payoffs-&gt;GetLast().get()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(group-&gt;GetId());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(participant-&gt;GetId());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> PayoffReAssign*&gt;(payoffs-&gt;GetLast().get()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWString.htm">Wt::WString</a>("You earn {1} <a href="CppPointer.htm">point</a>s <b><a href="CppFor.htm">for</a></b> reaching the next period").arg(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrencyToStr(payoffs-&gt;GetLast()-&gt;m_payoff))));<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstateloggedin.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstateloggedin.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATELOGGEDIN_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATELOGGEDIN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Participant is not logged in yet<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>LoggedIn<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> ParticipantDialog<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>LoggedIn<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create every ParticipantDialog<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/its ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>LoggedIn(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSomethingRandom() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToServerPush() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondTo<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> web page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>LoggedIn::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParticipantDialog<a href="CppState.htm">State</a>LoggedIn() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a>LoggedIn*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The user <a href="CppInterface.htm">interface</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_label_status(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_status;<br/>
&nbsp;&nbsp;} ui;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATELOGGEDIN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstateloggedin.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstateloggedin.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WCheckBox&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstategroupassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstategroupreassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstateloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateloggedin.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>LoggedIn::ParticipantDialog<a href="CppState.htm">State</a>LoggedIn(<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: ParticipantDialog<a href="CppState.htm">State</a>(dialog,server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>LoggedIn::RespondTo<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetDialog()-&gt;GetParticipant();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>LoggedIn*&gt;(participant-&gt;Get<a href="CppState.htm">State</a>()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>LoggedIn* <b><a href="CppConst.htm">const</a></b> state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>LoggedIn*&gt;(participant-&gt;Get<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label_status-&gt;setText(state-&gt;GetMessage().c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;RespondToParticipant();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>LoggedIn::ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;GetParticipant());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;GetParticipant()-&gt;CanGetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A Participant must have became an ID before being logged in");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;GetParticipant()-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A Participant must have became an <a href="CppIpAddress.htm">IP address</a> before being logged in");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the GUI <a href="CppWidget.htm">widget</a>s<br/>
&nbsp;&nbsp;ui.m_label_status <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Welcome",dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Please wait <b><a href="CppFor.htm">for</a></b> the experiment to begin",dialog);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("You have been as<b><a href="CppSigned.htm">signed</a></b> an ID of ")<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(GetDialog()-&gt;GetParticipant()-&gt;GetId())).c_str()<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;,dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_status);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstatenotloggedin.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstatenotloggedin.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATENOTLOGGEDIN_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATENOTLOGGEDIN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Participant is not logged in yet<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> ParticipantDialog<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>NotLoggedIn<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create every ParticipantDialog<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/its ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSomethingRandom();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToServerPush() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondTo<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the Participant's <a href="CppState.htm">State</a> to <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a>'s <a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParticipant<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> web page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>NotLoggedIn::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_check_participate(0), m_label_status(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWCheckBox.htm">Wt::WCheckBox</a> * m_check_participate;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_status;<br/>
&nbsp;&nbsp;} ui;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Login();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATENOTLOGGEDIN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstatenotloggedin.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstatenotloggedin.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppThreadH.htm">thread</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WCheckBox&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstategroupassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstategroupreassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatenotloggedin.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn::ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn(<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: ParticipantDialog<a href="CppState.htm">State</a>(dialog,server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn::DoSomethingRandom()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppSwitch.htm">switch</a></b> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 1)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppComment.htm">//</a>Select a random button<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.m_check_participate-&gt;setChecked(<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 2);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <b><a href="CppBreak.htm">break</a></b>; <a href="CppComment.htm">//</a>No problem<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn::Login()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Keep trying forever to log in!<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (ui.m_check_participate-&gt;isChecked()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !GetDialog()-&gt;CanGetParticipant())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdThis_thread.htm">std::this_thread</a>::sleep_for(<a href="CppStdChrono.htm">std::chrono</a>::milliseconds(100));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The Participant is acknowledged to be logged in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetDialog()-&gt;SetParticipant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_server-&gt;LetLogin(GetDialog()-&gt;<a href="CppGetIpAddress.htm">GetIpAddress</a>()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppWtServerPusher.htm">WtServerPusher</a>::GetInstance()-&gt;Post();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume a logged in participant");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_server-&gt;GetGroups()-&gt;GetGroupNotLoggedIn()-&gt;IsMember(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetDialog()-&gt;GetParticipant())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume Participant is not in GroupNotLoggedIn <a href="CppAny.htm">any</a>more");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server-&gt;GetGroups()-&gt;GetGroupLoggedIn()-&gt;IsMember(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetDialog()-&gt;GetParticipant())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume Participant is in GroupLoggedIn");<br/>
<br/>
&nbsp;&nbsp;ui.m_check_participate-&gt;hide();<br/>
&nbsp;&nbsp;ui.m_label_status-&gt;setText("Logged in... waiting <b><a href="CppFor.htm">for</a></b> the experiment to start");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn::RespondTo<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(!GetDialog()-&gt;CanGetParticipant())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> participant may log in...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui.m_check_participate-&gt;isChecked()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_server-&gt;GetGroups()-&gt;CanLetLogin(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetDialog()-&gt;<a href="CppGetIpAddress.htm">GetIpAddress</a>()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Login();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Participant is logged in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Follow the server its tempo<br/>
&nbsp;&nbsp;&nbsp;&nbsp;RespondToParticipant();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn::ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;ui.m_check_participate <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWCheckBox.htm">Wt::WCheckBox</a>("I want to participate");<br/>
&nbsp;&nbsp;ui.m_label_status <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Welcome participant");<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_status);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_check_participate);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstatequiz.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstatequiz.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATEQUIZ_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATEQUIZ_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The ParticipantDialog is in its view results group state.<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>Quiz<br/>
 : <b><a href="CppPublic.htm">public</a></b> ParticipantDialog<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>Quiz<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create every ParticipantDialog<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/its ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>Quiz(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSomethingRandom();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToServerPush() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondTo<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the Participant's <a href="CppState.htm">State</a> to <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a>'s <a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParticipant<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> web page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>Quiz::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParticipantDialog<a href="CppState.htm">State</a>Quiz() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a>Quiz*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/User <a href="CppInterface.htm">interface</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Constructor</a> of the user <a href="CppInterface.htm">interface</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_mc_dialog(0), m_label_status(0), m_label_<a href="CppTime.htm">time</a>_left(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The multiple choice <a href="CppQuestion.htm">question</a> dialog<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWtMultipleChoiceQuestionDialog.htm">WtMultipleChoiceQuestionDialog</a> * m_mc_dialog;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Label showing the status<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_status;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Label showing the <a href="CppTime.htm">time</a> left<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_<a href="CppTime.htm">time</a>_left;<br/>
&nbsp;&nbsp;} ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> each Participant has voted already <b><a href="CppThis.htm">this</a></b>/last round<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Could have use lambda <a href="CppFunction.htm">function</a>s instead as well :-(<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> GetAllParticipantsHaveVoted() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The user clicks submit<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnSubmitClick();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATEQUIZ_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstatequiz.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstatequiz.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWButtonGroup.htm">WButtonGroup</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWGroupBox.htm">WGroupBox</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPushButton.htm">WPushButton</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWRadioButton.htm">WRadioButton</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMultipleChoiceQuestion.htm">multiplechoicequestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMultipleChoiceQuestionDialog.htm">multiplechoicequestiondialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQuestionDialog.htm">questiondialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatequiz.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtMultipleChoiceQuestionDialog.htm">wtmultiplechoicequestiondialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtQuestionDialog.htm">wtquestiondialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Quiz::ParticipantDialog<a href="CppState.htm">State</a>Quiz(<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: ParticipantDialog<a href="CppState.htm">State</a>(dialog,server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui{}<br/>
{<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Quiz::DoSomethingRandom()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 5)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Select a random button<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_group-&gt;buttons()[0]-&gt;isEnabled())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_group-&gt;setSelectedButtonIndex(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> (m_group-&gt;count() <a href="CppOperatorPlus.htm">+</a> 1)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Click to choose <b><a href="CppThis.htm">this</a></b> action<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_button_vote-&gt;isEnabled())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnVoteClick();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <b><a href="CppBreak.htm">break</a></b>; <a href="CppComment.htm">//</a>No problem<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Quiz::RespondTo<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>Left();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update label_<a href="CppTime.htm">time</a>_left<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("<a href="CppTime.htm">Time</a> left: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<a href="CppTime.htm">time</a>_left)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" seconds ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_server-&gt;GetParameters()-&gt;GetQuiz()-&gt;GetWait())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Infinite <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppStdString.htm">std::string</a>(" (waiting <b><a href="CppFor.htm">for</a></b> others)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label_<a href="CppTime.htm">time</a>_left-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> choice must be sent to the server<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If no waiting <b><a href="CppFor.htm">for</a></b> others, choose randomly <b><a href="CppFor.htm">for</a></b> the Participant<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_server-&gt;GetParameters()-&gt;GetQuiz()-&gt;GetWait()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppTime.htm">time</a>_left <a href="CppOperatorLessEqual.htm">&lt;=</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui.m_button_vote-&gt;isEnabled())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_button_vote-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_button_vote-&gt;isEnabled());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> selected <a href="CppOperatorAssign.htm">=</a> m_group-&gt;selectedButtonIndex();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_group-&gt;count() &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> vote_index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (selected <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1 <a href="CppComment.htm">//</a>Did user select something?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> m_group-&gt;count() <a href="CppComment.htm">//</a>Take a random action<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: selected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_group-&gt;setSelectedButtonIndex(vote_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnVoteClick();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_button_vote-&gt;isEnabled())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_group-&gt;selectedButtonIndex() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> vote_description<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_group-&gt;selectedButton()-&gt;text().toUTF8();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("You have voted \'")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> vote_description<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("\', waiting <b><a href="CppFor.htm">for</a></b> the others...");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_button_vote-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_label_status-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_label_status-&gt;setText("Waiting <b><a href="CppFor.htm">for</a></b> your vote");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Follow the server its tempo<br/>
&nbsp;&nbsp;RespondToParticipant();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Quiz::OnSubmitClick()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;ui.m_mc_dialog-&gt;GetDialog()-&gt;IsAnswerCorrect<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> vote <a href="CppOperatorAssign.htm">=</a> m_group-&gt;selectedButtonIndex();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> user did not click vote, without selecting a radiobutton<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vote <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do really vote<br/>
&nbsp;&nbsp;server.Get<a href="CppState.htm">State</a>Quiz()-&gt;NotifyVote(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetDialog()-&gt;GetParticipant(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vote);<br/>
<br/>
&nbsp;&nbsp;m_button_vote-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<a href="CppWRadioButton.htm">Wt::WRadioButton</a> * <b><a href="CppConst.htm">const</a></b> r: m_group-&gt;buttons())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;r-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Quiz::ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume a logged in participant");<br/>
<br/>
&nbsp;&nbsp;ui.m_label_<a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("<a href="CppTime.htm">Time</a> left: ... seconds");<br/>
&nbsp;&nbsp;ui.m_label_status <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Waiting <b><a href="CppFor.htm">for</a></b> your vote");<br/>
<br/>
&nbsp;&nbsp;ui.m_mc_dialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWtMultipleChoiceQuestionDialog.htm">WtMultipleChoiceQuestionDialog</a>("*,Test,Good,Wrong1,Wrong2");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_status);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_mc_dialog);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_status);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_mc_dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ui.m_mc_dialog-&gt;m_signal_submitted.connect(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Quiz::OnSubmitClick);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstates.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstates.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PARTICIPANTDIALOGSTATES_H<br/>
<a href="CppDefine.htm">#define</a> PARTICIPANTDIALOGSTATES_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>ParticipantDialog<a href="CppState.htm">State</a>s manages all ParticipantDialog<a href="CppState.htm">State</a> <a href="CppInstance.htm">instances</a><br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>s<br/>
{<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog* <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>s(<b><a href="CppConst.htm">const</a></b> ParticipantDialog<a href="CppState.htm">State</a>s&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>s&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> ParticipantDialog<a href="CppState.htm">State</a>s&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its current ParticipantDialog<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a> * GetCurrent<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff * Get<a href="CppState.htm">State</a>AssignPayoff() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a><br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a> * Get<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>ChooseAction<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>ChooseAction * Get<a href="CppState.htm">State</a>ChooseAction() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>Finished<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>Finished * Get<a href="CppState.htm">State</a>Finished() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>GroupAssign<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>GroupAssign * Get<a href="CppState.htm">State</a>GroupAssign() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign * Get<a href="CppState.htm">State</a>GroupReAssign() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>LoggedIn<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>LoggedIn * Get<a href="CppState.htm">State</a>LoggedIn() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>ViewResultsAll<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn * Get<a href="CppState.htm">State</a>NotLoggedIn() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>Quiz<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>Quiz * Get<a href="CppState.htm">State</a>Quiz() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>ViewResultsAll<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ParticipantDialog<a href="CppState.htm">State</a>ViewResultsAll * Get<a href="CppState.htm">State</a>ViewResultsAll() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup * Get<a href="CppState.htm">State</a>ViewResultsGroup() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting * Get<a href="CppState.htm">State</a>ViewResultsVoting() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>Voting<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>Voting * Get<a href="CppState.htm">State</a>Voting() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the ParticipantDialog<a href="CppState.htm">State</a> of <b><a href="CppThis.htm">this</a></b> ParticipantDialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>(ParticipantDialog<a href="CppState.htm">State</a> * <b><a href="CppConst.htm">const</a></b> state);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParticipantDialog<a href="CppState.htm">State</a>s() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a>s*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its current ParticipantDialog<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a> * m_state;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff&gt; m_state_assign_payoff;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a><br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>&gt; m_state_<a href="CppChat.htm">chat</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>ChooseAction<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a>ChooseAction&gt; m_state_choose_action;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>Finished<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a>Finished&gt; m_state_finished;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>GroupAssign<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a>GroupAssign&gt; m_state_group_assign;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>GroupAssign<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign&gt; m_state_group_reassign;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>LoggedIn<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a>LoggedIn&gt; m_state_logged_in;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn&gt; m_state_not_logged_in;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>Quiz<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a>Quiz&gt; m_state_quiz;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>ViewResultsAll<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a>ViewResultsAll&gt; m_state_view_results_all;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup&gt; m_state_view_results_group;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting&gt; m_state_view_results_voting;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParticipantDialog its ParticipantDialog<a href="CppState.htm">State</a>Voting<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;ParticipantDialog<a href="CppState.htm">State</a>Voting&gt; m_state_voting;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstates.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstates.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_participantdialogstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstates.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::ParticipantDialog<a href="CppState.htm">State</a>s(<br/>
&nbsp;&nbsp;ParticipantDialog* <b><a href="CppConst.htm">const</a></b> dialog,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: m_state(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_assign_payoff(<b><a href="CppNew.htm">new</a></b> ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff(dialog,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_<a href="CppChat.htm">chat</a>(<b><a href="CppNew.htm">new</a></b> ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>(dialog,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_choose_action(<b><a href="CppNew.htm">new</a></b> ParticipantDialog<a href="CppState.htm">State</a>ChooseAction(dialog,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_finished(<b><a href="CppNew.htm">new</a></b> ParticipantDialog<a href="CppState.htm">State</a>Finished(dialog,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_group_assign(<b><a href="CppNew.htm">new</a></b> ParticipantDialog<a href="CppState.htm">State</a>GroupAssign(dialog,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_group_reassign(<b><a href="CppNew.htm">new</a></b> ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign(dialog,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_logged_in(<b><a href="CppNew.htm">new</a></b> ParticipantDialog<a href="CppState.htm">State</a>LoggedIn(dialog,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_not_logged_in(<b><a href="CppNew.htm">new</a></b> ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn(dialog,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_quiz(<b><a href="CppNew.htm">new</a></b> ParticipantDialog<a href="CppState.htm">State</a>Quiz(dialog,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_view_results_group(<b><a href="CppNew.htm">new</a></b> ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup(dialog,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_view_results_voting(<b><a href="CppNew.htm">new</a></b> ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting(dialog,server)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_voting(<b><a href="CppNew.htm">new</a></b> ParticipantDialog<a href="CppState.htm">State</a>Voting(dialog,server))<br/>
{<br/>
&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> m_state_not_logged_in.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::GetCurrent<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Get<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_<a href="CppChat.htm">chat</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_<a href="CppChat.htm">chat</a>.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>AssignPayoff * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Get<a href="CppState.htm">State</a>AssignPayoff() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_assign_payoff);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_assign_payoff.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ChooseAction * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Get<a href="CppState.htm">State</a>ChooseAction() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_choose_action);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_choose_action.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Finished * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Get<a href="CppState.htm">State</a>Finished() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_finished);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_finished.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>GroupAssign * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Get<a href="CppState.htm">State</a>GroupAssign() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_group_assign);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_group_assign.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>GroupReAssign * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Get<a href="CppState.htm">State</a>GroupReAssign() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_group_reassign);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_group_reassign.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>LoggedIn * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Get<a href="CppState.htm">State</a>LoggedIn() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_logged_in);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_logged_in.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Quiz * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Get<a href="CppState.htm">State</a>Quiz() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_quiz);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_quiz.get();<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ViewResultsAll * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Get<a href="CppState.htm">State</a>ViewResultsAll() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_view_results_all);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_view_results_all.get();<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Get<a href="CppState.htm">State</a>ViewResultsGroup() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_view_results_group);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_view_results_group.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Get<a href="CppState.htm">State</a>ViewResultsVoting() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_view_results_voting);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_view_results_voting.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Voting * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Get<a href="CppState.htm">State</a>Voting() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_voting);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_voting.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>NotLoggedIn * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Get<a href="CppState.htm">State</a>NotLoggedIn() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_not_logged_in);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_state_not_logged_in.get();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>s::Set<a href="CppState.htm">State</a>(ParticipantDialog<a href="CppState.htm">State</a> * <b><a href="CppConst.htm">const</a></b> state)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (state <a href="CppOperatorEqual.htm">==</a> m_state) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> state;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstateviewresultsgroup.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstateviewresultsgroup.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATEVIEWRESULTSGROUP_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATEVIEWRESULTSGROUP_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The ParticipantDialog is in its view results group state.<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup<br/>
 : <b><a href="CppPublic.htm">public</a></b> ParticipantDialog<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>ViewResultsGroup<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create every ParticipantDialog<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/its ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSomethingRandom() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToServerPush() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondTo<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the Participant's <a href="CppState.htm">State</a> to <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a>'s <a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParticipant<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> web page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>ViewResultsGroup::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/User <a href="CppInterface.htm">interface</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_label_<a href="CppTime.htm">time</a>_left(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_<a href="CppTime.htm">time</a>_left;<br/>
&nbsp;&nbsp;} ui;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATEVIEWRESULTSGROUP_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstateviewresultsgroup.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstateviewresultsgroup.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTable.htm">WTable</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWText.htm">WText</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTextArea.htm">WTextArea</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>chooseactionoption.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoffs.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstateviewresultsgroup.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShape.htm">shape</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShapeWidget.htm">shapewidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtShapeWidget.htm">wtshapewidget</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup::ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup(<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: ParticipantDialog<a href="CppState.htm">State</a>(dialog,server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup::RespondTo<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume that only existing participants can have finished an experiment");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>Left();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update label_<a href="CppTime.htm">time</a>_left<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("<a href="CppTime.htm">Time</a> left: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<a href="CppTime.htm">time</a>_left)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" seconds ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label_<a href="CppTime.htm">time</a>_left-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Follow the server its tempo<br/>
&nbsp;&nbsp;RespondToParticipant();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ViewResultsGroup::ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant <a href="CppOperatorAssign.htm">=</a> dialog-&gt;GetParticipant();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
<br/>
&nbsp;&nbsp;ui.m_label_<a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>;<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWString.htm">Wt::WString</a>("Results of round {1} of <b><a href="CppThis.htm">this</a></b> period").arg(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;GetPeriod())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!participant-&gt;GetPayoffs().empty()<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group <a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetGroups()-&gt;FindMyGroup(participant);<br/>
<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("You are in group #")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_server-&gt;GetGroups()-&gt;FindMyGroup(participant)-&gt;GetId())).c_str()));<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!participant-&gt;GetPayoffs()-&gt;IsEmpty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("Your earnings from the previous round are ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> CurrencyToStr(participant-&gt;GetPayoffs()-&gt;GetLast()-&gt;m_payoff)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" <a href="CppPointer.htm">point</a>s")).c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("Your total earnings are ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> CurrencyToStr(participant-&gt;GetPayoffs()-&gt;GetTotal())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" <a href="CppPointer.htm">point</a>s")).c_str()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Your earnings in the last cycle are none"));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppWTable.htm">Wt::WTable</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWTable.htm">Wt::WTable</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> ps <a href="CppOperatorAssign.htm">=</a> group-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(ps.begin(),ps.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;table,participant](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!other-&gt;GetPayoffs()-&gt;IsEmpty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;insertRow(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;elementAt(0,0)-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("Player"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;elementAt(0,1)-&gt;addWidget(other-&gt;GetChat<a href="CppShape.htm">Shape</a>()-&gt;Clone());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Payoff&gt; last_payoff_base <a href="CppOperatorAssign.htm">=</a> other-&gt;GetPayoffs()-&gt;GetLast();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PayoffIpgg * payoff <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> PayoffIpgg*&gt;(last_payoff_base.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(payoff);<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;elementAt(0,2)-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (payoff-&gt;m_did_contribute<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ? <a href="CppStdString.htm">std::string</a>("did contribute")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <a href="CppStdString.htm">std::string</a>("did not contribute")).c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (participant <a href="CppOperatorEqual.htm">==</a> other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!payoff-&gt;m_did_contribute)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (payoff-&gt;m_did_get_caught)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> "the supervisor did take your share of the revenue";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> "the supervisor did not take your share of the revenue";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;elementAt(0,3)-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(s.c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!payoff-&gt;m_did_contribute)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (payoff-&gt;m_did_get_caught)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> "the supervisor did take the share of the revenue of <b><a href="CppThis.htm">this</a></b> player";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> "the supervisor did not take the share of the revenue of <b><a href="CppThis.htm">this</a></b> player";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;elementAt(0,3)-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(s.c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (participant <a href="CppOperatorEqual.htm">==</a> other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;elementAt(0,4)-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("<b><a href="CppThis.htm">this</a></b> is you"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstateviewresultsvoting.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstateviewresultsvoting.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATEVIEWRESULTSVOTING_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATEVIEWRESULTSVOTING_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The ParticipantDialog is in its view results group state.<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting<br/>
 : <b><a href="CppPublic.htm">public</a></b> ParticipantDialog<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>ViewResultsVoting<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create every ParticipantDialog<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/its ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSomethingRandom() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToServerPush() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondTo<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the Participant's <a href="CppState.htm">State</a> to <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a>'s <a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParticipant<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> web page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>ViewResultsVoting::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The user <a href="CppInterface.htm">interface</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_label_<a href="CppTime.htm">time</a>_left(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_<a href="CppTime.htm">time</a>_left;<br/>
&nbsp;&nbsp;} ui;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATEVIEWRESULTSVOTING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstateviewresultsvoting.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstateviewresultsvoting.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTable.htm">WTable</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWText.htm">WText</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTextArea.htm">WTextArea</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstateviewresultsvoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShape.htm">shape</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShapeWidget.htm">shapewidget</a>.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>vote.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>votingoption.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtShapeWidget.htm">wtshapewidget</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting::ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting(<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: ParticipantDialog<a href="CppState.htm">State</a>(dialog,server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting::RespondTo<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume that only existing participants can have finished an experiment");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>Left();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update label_<a href="CppTime.htm">time</a>_left<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("<a href="CppTime.htm">Time</a> left: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<a href="CppTime.htm">time</a>_left)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" seconds ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label_<a href="CppTime.htm">time</a>_left-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Follow the server its tempo<br/>
&nbsp;&nbsp;RespondToParticipant();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>ViewResultsVoting::ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;GetParticipant());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetDialog()-&gt;GetParticipant();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> group <a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetGroups()-&gt;FindMyGroup(participant);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(group);<br/>
<br/>
&nbsp;&nbsp;ui.m_label_<a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>;<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Voting results"));<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("You are in group #")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(group-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;).c_str()));<br/>
<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;<a href="CppWTable.htm">Wt::WTable</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWTable.htm">Wt::WTable</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>ViewResultsVoting * <b><a href="CppConst.htm">const</a></b> server_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Server<a href="CppState.htm">State</a>ViewResultsVoting*&gt;(m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!server_state)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": warning: no Server<a href="CppState.htm">State</a>ViewResultsVoting\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> votes <a href="CppOperatorAssign.htm">=</a> server_state-&gt;GetGroupResults(participant);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(votes.begin(),votes.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;table,participant](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Vote&gt;&amp; vote)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(vote);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(vote-&gt;GetSender());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(vote-&gt;GetSender()-&gt;GetChat<a href="CppShape.htm">Shape</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;insertRow(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;elementAt(0,0)-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("Participant "));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;elementAt(0,1)-&gt;addWidget(vote-&gt;GetSender()-&gt;GetChat<a href="CppShape.htm">Shape</a>()-&gt;Clone());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;elementAt(0,2)-&gt;addWidget(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>( (<a href="CppStdString.htm">std::string</a>("voted <b><a href="CppFor.htm">for</a></b> "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> vote-&gt;GetVote()-&gt;GetDescription())).c_str()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppIf.htm">if</a></b> (vote-&gt;GetSender() <a href="CppOperatorEqual.htm">==</a> participant)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; table-&gt;elementAt(0,3)-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("your vote"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> server_state-&gt;GetVotedOptions().find(group);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i<a href="CppOperatorNotEqual.htm">!=</a>server_state-&gt;GetVotedOptions().end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((*i).first <a href="CppOperatorEqual.htm">==</a> group);<br/>
<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("As a result of the voting, your group will hire ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ((*i).second ? (*i).second-&gt;GetDescription() : "no supervisor");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(s.c_str()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("In each round of <b><a href="CppThis.htm">this</a></b> period, all members of your group will automatically pay ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> CurrencyToStr((*i).second ? (*i).second-&gt;GetCost() : 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" <a href="CppPointer.htm">point</a>s <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>(s.c_str()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p <a href="CppOperatorAssign.htm">=</a> ((*i).second ? (*i).second-&gt;GetChance() : 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("In each round of <b><a href="CppThis.htm">this</a></b> period,"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("all members of your group that <b><a href="CppDo.htm">do</a></b> not contribute to the group project"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("will receive a share of the group revenue"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (p <a href="CppOperatorEqual.htm">==</a> 1.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("In each round of <b><a href="CppThis.htm">this</a></b> period,"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("all members of your group that <b><a href="CppDo.htm">do</a></b> not contribute to the group project"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>("will &lt;b&gt;not&lt;/b&gt; receive a share of the group revenue"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("In each round of <b><a href="CppThis.htm">this</a></b> period,"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("all members of your group that <b><a href="CppDo.htm">do</a></b> not contribute to the group project"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("will receive a share of the group revenue"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">Wt::WText</a>(<a href="CppWString.htm">Wt::WString</a>("&lt;b&gt;with a chance of {1}%&lt;/b&gt;").arg(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrencyToStr(p))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstatevoting.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstatevoting.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATEVOTING_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTDIALOGSTATEVOTING_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The ParticipantDialog is in its view results group state.<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantDialog<a href="CppState.htm">State</a>Voting<br/>
 : <b><a href="CppPublic.htm">public</a></b> ParticipantDialog<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>Voting<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create every ParticipantDialog<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/its ParticipantDialog<br/>
&nbsp;&nbsp;ParticipantDialog<a href="CppState.htm">State</a>Voting(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSomethingRandom();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtServerPusher.htm">WtServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToServerPush() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondTo<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the Participant's <a href="CppState.htm">State</a> to <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a>'s <a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParticipant<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show <b><a href="CppThis.htm">this</a></b> web page<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> ParticipantDialog<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>Voting::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~ParticipantDialog<a href="CppState.htm">State</a>Voting() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ParticipantDialog<a href="CppState.htm">State</a>Voting*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The user <a href="CppInterface.htm">interface</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_button_vote(0), m_group(0), m_label_<a href="CppTime.htm">time</a>_left(0), m_label_status(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWPushButton.htm">Wt::WPushButton</a> * m_button_vote;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWButtonGroup.htm">Wt::WButtonGroup</a> * m_group;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_<a href="CppTime.htm">time</a>_left;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label_status;<br/>
&nbsp;&nbsp;} m_ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; &gt; m_voting_options;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> each Participant has voted already <b><a href="CppThis.htm">this</a></b>/last round<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Could have use lambda <a href="CppFunction.htm">function</a>s instead as well :-(<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> GetAllParticipantsHaveVoted() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnVoteClick();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTDIALOGSTATEVOTING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantdialogstatevoting.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantdialogstatevoting.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWButtonGroup.htm">WButtonGroup</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWGroupBox.htm">WGroupBox</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPushButton.htm">WPushButton</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWRadioButton.htm">WRadioButton</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstatevoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>votingoption.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Voting::ParticipantDialog<a href="CppState.htm">State</a>Voting(<br/>
&nbsp;&nbsp;ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: ParticipantDialog<a href="CppState.htm">State</a>(dialog,server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_voting_options{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Do something random with the UI, used by <a href="CppDebug.htm">Debug</a>Dialog<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Voting::DoSomethingRandom()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_group);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_button_vote);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Select a random button<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_ui.m_group-&gt;buttons()[0]-&gt;isEnabled())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_group-&gt;setSelectedButtonIndex(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> (m_ui.m_group-&gt;count() <a href="CppOperatorPlus.htm">+</a> 1)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Click to choose <b><a href="CppThis.htm">this</a></b> action<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_ui.m_button_vote-&gt;isEnabled())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnVoteClick();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <b><a href="CppBreak.htm">break</a></b>; <a href="CppComment.htm">//</a>No problem<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Voting::RespondTo<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>Left();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update label_<a href="CppTime.htm">time</a>_left<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("<a href="CppTime.htm">Time</a> left: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<a href="CppTime.htm">time</a>_left)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" seconds ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_server-&gt;GetParameters()-&gt;GetVoting()-&gt;GetWait())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Infinite <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppStdString.htm">std::string</a>(" (waiting <b><a href="CppFor.htm">for</a></b> others)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_label_<a href="CppTime.htm">time</a>_left-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> choice must be sent to the server<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If no waiting <b><a href="CppFor.htm">for</a></b> others, choose randomly <b><a href="CppFor.htm">for</a></b> the Participant<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_server-&gt;GetParameters()-&gt;GetVoting()-&gt;GetWait()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppTime.htm">time</a>_left <a href="CppOperatorLessEqual.htm">&lt;=</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_ui.m_button_vote-&gt;isEnabled())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_button_vote-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_ui.m_button_vote-&gt;isEnabled());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> selected <a href="CppOperatorAssign.htm">=</a> m_ui.m_group-&gt;selectedButtonIndex();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_group-&gt;count() &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> vote_index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (selected <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1 <a href="CppComment.htm">//</a>Did user select something?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> m_ui.m_group-&gt;count() <a href="CppComment.htm">//</a>Take a random action<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: selected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_group-&gt;setSelectedButtonIndex(vote_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnVoteClick();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_ui.m_button_vote-&gt;isEnabled())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_group-&gt;selectedButtonIndex() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> vote_description<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_ui.m_group-&gt;selectedButton()-&gt;text().toUTF8();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("You have voted \'")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> vote_description<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("\', waiting <b><a href="CppFor.htm">for</a></b> the others...");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_button_vote-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_label_status-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_label_status-&gt;setText("Waiting <b><a href="CppFor.htm">for</a></b> your vote");<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Follow the server its tempo<br/>
&nbsp;&nbsp;RespondToParticipant();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Voting::OnVoteClick()<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> vote <a href="CppOperatorAssign.htm">=</a> m_ui.m_group-&gt;selectedButtonIndex();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> user did not click vote, without selecting a radiobutton<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vote <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(vote <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(vote &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_voting_options.size()));<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server<a href="CppState.htm">State</a>Voting * <b><a href="CppConst.htm">const</a></b> server_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Server<a href="CppState.htm">State</a>Voting*&gt;(m_server-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!server_state)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": warning: no Server<a href="CppState.htm">State</a>Voting\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do really vote<br/>
&nbsp;&nbsp;&nbsp;&nbsp;server_state-&gt;NotifyVote(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetDialog()-&gt;GetParticipant(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_voting_options[vote]);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppWtServerPusher.htm">WtServerPusher</a>::GetInstance()-&gt;Post();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_ui.m_button_vote-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> buttons <a href="CppOperatorAssign.htm">=</a> m_ui.m_group-&gt;buttons();<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(buttons.begin(),buttons.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppWRadioButton.htm">Wt::WRadioButton</a> * <b><a href="CppConst.htm">const</a></b> r) { r-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>); } );<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Voting::ShowPage(ParticipantDialog * <b><a href="CppConst.htm">const</a></b> dialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDialog()-&gt;CanGetParticipant()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume a logged in participant");<br/>
<br/>
&nbsp;&nbsp;m_voting_options <a href="CppOperatorAssign.htm">=</a> m_server-&gt;GetParameters()-&gt;GetVoting()-&gt;GetOptions();<br/>
<br/>
&nbsp;&nbsp;m_ui.m_button_vote <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWPushButton.htm">Wt::WPushButton</a>("Submit");<br/>
&nbsp;&nbsp;m_ui.m_group <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWButtonGroup.htm">Wt::WButtonGroup</a>(dialog);<br/>
&nbsp;&nbsp;m_ui.m_label_<a href="CppTime.htm">time</a>_left <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("<a href="CppTime.htm">Time</a> left: ... seconds");<br/>
&nbsp;&nbsp;m_ui.m_label_status <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>("Waiting <b><a href="CppFor.htm">for</a></b> your vote");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_button_vote);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_group);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_label_status);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_label_status);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_label_<a href="CppTime.htm">time</a>_left);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ButtonGroup<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">container</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>("Possible voting options",dialog);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_options<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_voting_options.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the RadioButtons<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_options; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWRadioButton.htm">Wt::WRadioButton</a> * <b><a href="CppConst.htm">const</a></b> button<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWRadioButton.htm">Wt::WRadioButton</a>(m_voting_options[i]-&gt;GetDescription().c_str(), <a href="CppContainer.htm">container</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(<a href="CppContainer.htm">container</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_ui.m_group-&gt;addButton(button,i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(dialog);<br/>
&nbsp;&nbsp;dialog-&gt;addWidget(m_ui.m_button_vote);<br/>
<br/>
&nbsp;&nbsp;m_ui.m_button_vote-&gt;clicked().connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ParticipantDialog<a href="CppState.htm">State</a>Voting::OnVoteClick);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstate.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstate.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATE_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATE_H<br/>
<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The <a href="CppState.htm">State</a> the Participant is in.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Every Participant<a href="CppState.htm">State</a> has certain assumptions:<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Participant<a href="CppState.htm">State</a>NotLoggedIn: no ID, no <a href="CppIpAddress.htm">IP address</a><br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Participant<a href="CppState.htm">State</a>LoggedIn: assigns ID, assigns <a href="CppIpAddress.htm">IP address</a>, not in a Group<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Participant<a href="CppState.htm">State</a>GroupDynamics: assigns Group<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Participant<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>: adds <a href="CppChat.htm">chat</a> messages<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Participant<a href="CppState.htm">State</a>Voting: adds vote<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Participant<a href="CppState.htm">State</a>ViewResultsVoting: views group votes<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Participant<a href="CppState.htm">State</a>ChooseAction: adds action<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Participant<a href="CppState.htm">State</a>AssignPayoff: assign payoff<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Participant<a href="CppState.htm">State</a>ViewResultsGroup: views group payoff<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Participant<a href="CppState.htm">State</a>ViewResultsAll: views all group payoff<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contruct every Participant<a href="CppState.htm">State</a> from a <a href="CppPointer.htm">pointer</a> to its Participant<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> participant,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Participant<a href="CppState.htm">State</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-only Participant<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant * GetParticipant() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_participant; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppState.htm">State</a>ToStr() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Participant<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Participant<a href="CppState.htm">State</a>() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant<a href="CppState.htm">State</a>*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Participant <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a> works on<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do not change <b><a href="CppThis.htm">this</a></b> to <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;, because<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/each <a href="CppState.htm">State</a> is <a href="CppConstructor.htm">construct</a>ed at the <a href="CppConstructor.htm">constructor</a> of a Participant,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/which requires a <a href="CppPointer.htm">pointer</a> to '<b><a href="CppThis.htm">this</a></b>'<br/>
&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> m_participant;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> m_server;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTSTATE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstate.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstate.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>::Participant<a href="CppState.htm">State</a>(Participant * <b><a href="CppConst.htm">const</a></b> participant,<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: m_participant(participant),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_server(server)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_participant);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstateassignpayoff.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstateassignpayoff.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATEASSIGNPAYOFF_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATEASSIGNPAYOFF_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The Participant is in the <a href="CppState.htm">State</a>AssignPayoff Participant<a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>AssignPayoff<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> Participant<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>AssignPayoff<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contruct every Participant<a href="CppState.htm">State</a> from a <a href="CppPointer.htm">pointer</a> to its Participant<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>AssignPayoff(Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Participant<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> at a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>AssignPayoff::ToStr(); }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Participant<a href="CppState.htm">State</a>AssignPayoff() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant<a href="CppState.htm">State</a>AssignPayoff*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTSTATEASSIGNPAYOFF_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstateassignpayoff.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstateassignpayoff.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateassignpayoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoffs.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>AssignPayoff::Participant<a href="CppState.htm">State</a>AssignPayoff(<br/>
&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> participant,<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Participant<a href="CppState.htm">State</a>(participant,server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>AssignPayoff::ToAdminStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant * <b><a href="CppConst.htm">const</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetParticipant();<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> payoffs <a href="CppOperatorAssign.htm">=</a> participant-&gt;GetPayoffs();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (payoffs-&gt;IsEmpty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"no payoffs as<b><a href="CppSigned.htm">signed</a></b>";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a><a href="CppStdTo_string.htm">std::to_string</a>(payoffs-&gt;GetSize())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" payoffs, last: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(payoffs-&gt;GetLast()-&gt;m_payoff);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstatechat.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstatechat.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATECHAT_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATECHAT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The Participant is in the <a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a> Participant<a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a><br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> Participant<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contruct every Participant<a href="CppState.htm">State</a> from a <a href="CppPointer.htm">pointer</a> to its Participant<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>(Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Participant<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> at a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::ToStr(); }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Participant<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTSTATECHAT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstatechat.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstatechat.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a><a href="CppChat.htm">chat</a>message.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate<a href="CppChat.htm">chat</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::Participant<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>(<br/>
&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Participant<a href="CppState.htm">State</a>(participant,server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::ToAdminStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant * <b><a href="CppConst.htm">const</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetParticipant();<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt; &gt; &gt;&amp; <a href="CppChat.htm">chat</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> participant-&gt;GetChatLog();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppChat.htm">chat</a>.back().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"[no <a href="CppChat.htm">chat</a> <b><a href="CppThis.htm">this</a></b> round]";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(<a href="CppChat.htm">chat</a>.back().begin(), <a href="CppChat.htm">chat</a>.back().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;s](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt;&amp; t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>t-&gt;GetText() <a href="CppOperatorPlus.htm">+</a>" | ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstatechooseaction.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstatechooseaction.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATECHOOSEACTION_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATECHOOSEACTION_H<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The Participant is in the <a href="CppState.htm">State</a>ChooseAction Participant<a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>ChooseAction<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> Participant<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>ChooseAction<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contruct every Participant<a href="CppState.htm">State</a> from a <a href="CppPointer.htm">pointer</a> to its Participant<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>ChooseAction(Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Participant<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> at a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>ChooseAction::ToStr(); }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Participant<a href="CppState.htm">State</a>ChooseAction() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant<a href="CppState.htm">State</a>ChooseAction*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTSTATECHOOSEACTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstatechooseaction.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstatechooseaction.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>chooseactionoption.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatechooseaction.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>ChooseAction::Participant<a href="CppState.htm">State</a>ChooseAction(<br/>
&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Participant<a href="CppState.htm">State</a>(participant,server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>ChooseAction::ToAdminStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
 <b><a href="CppConst.htm">const</a></b> Participant * <b><a href="CppConst.htm">const</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetParticipant();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppThis.htm">this</a></b>-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!participant-&gt;GetActions().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> ChooseActionOption * action: participant-&gt;GetActions())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>action-&gt;GetDescription()+",";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>s<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppStdTo_string.htm">std::to_string</a>(i)+",";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.resize(s.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a> <a href="CppStdString.htm">std::string</a>("(")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetActions().size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(")");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"no actions chosen";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstatefinished.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstatefinished.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATEFINISHED_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATEFINISHED_H<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The Participant is in the <a href="CppState.htm">State</a>Finished Participant<a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>Finished<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> Participant<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>Finished<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contruct every Participant<a href="CppState.htm">State</a> from a <a href="CppPointer.htm">pointer</a> to its Participant<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>Finished(Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Participant<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> at a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>Finished::ToStr(); }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Participant<a href="CppState.htm">State</a>Finished() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant<a href="CppState.htm">State</a>Finished*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTSTATEFINISHED_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstatefinished.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstatefinished.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatefinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoffs.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>Finished::Participant<a href="CppState.htm">State</a>Finished(<br/>
&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Participant<a href="CppState.htm">State</a>(participant,server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>Finished::ToAdminStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetParticipant());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant * <b><a href="CppConst.htm">const</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetParticipant();<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppThis.htm">this</a></b>-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": earnings: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_server-&gt;GetParameters()-&gt;GetFinished()-&gt;CalculateEarnings(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;participant-&gt;GetPayoffs()-&gt;GetTotal()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" euros");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstategroupassign.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstategroupassign.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PARTICIPANTSTATEGROUPASSIGN_H<br/>
<a href="CppDefine.htm">#define</a> PARTICIPANTSTATEGROUPASSIGN_H<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The Participant is in the <a href="CppState.htm">State</a>GroupAssign Participant<a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>GroupAssign<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> Participant<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>GroupAssign<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contruct every Participant<a href="CppState.htm">State</a> from a <a href="CppPointer.htm">pointer</a> to its Participant<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>GroupAssign(Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Participant<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> at a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>GroupAssign::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Participant<a href="CppState.htm">State</a>GroupAssign() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant<a href="CppState.htm">State</a>GroupAssign*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The message from the server <b><a href="CppIf.htm">if</a></b> others finish a period, where<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppThis.htm">this</a></b> participant is waiting to participate. This message<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/shows how much payoff the Participant is given <b><a href="CppFor.htm">for</a></b> waiting a period<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdString.htm">std::string</a> m_message;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTSTATEGROUPASSIGN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstategroupassign.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstategroupassign.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstategroupassign.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>GroupAssign::Participant<a href="CppState.htm">State</a>GroupAssign(<br/>
&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Participant<a href="CppState.htm">State</a>(participant,server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>GroupAssign::ToAdminStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant * <b><a href="CppConst.htm">const</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetParticipant();<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppThis.htm">this</a></b>-&gt;ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstategroupreassign.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstategroupreassign.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PARTICIPANTSTATEGROUPREASSIGN_H<br/>
<a href="CppDefine.htm">#define</a> PARTICIPANTSTATEGROUPREASSIGN_H<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The Participant is in the <a href="CppState.htm">State</a>GroupReAssign Participant<a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>GroupReAssign<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> Participant<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>GroupReAssign<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contruct every Participant<a href="CppState.htm">State</a> from a <a href="CppPointer.htm">pointer</a> to its Participant<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>GroupReAssign(Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Participant<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> at a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>GroupReAssign::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Participant<a href="CppState.htm">State</a>GroupReAssign() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant<a href="CppState.htm">State</a>GroupReAssign*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTSTATEGROUPREASSIGN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstategroupreassign.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstategroupreassign.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstategroupreassign.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>GroupReAssign::Participant<a href="CppState.htm">State</a>GroupReAssign(<br/>
&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Participant<a href="CppState.htm">State</a>(participant,server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>GroupReAssign::ToAdminStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant * <b><a href="CppConst.htm">const</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetParticipant();<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppThis.htm">this</a></b>-&gt;ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstateloggedin.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstateloggedin.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATELOGGEDIN_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATELOGGEDIN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The Participant is in the <a href="CppState.htm">State</a>LoggedIn Participant<a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>LoggedIn<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> Participant<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>LoggedIn<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contruct every Participant<a href="CppState.htm">State</a> from a <a href="CppPointer.htm">pointer</a> to its Participant<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>LoggedIn(Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the message from the server <b><a href="CppIf.htm">if</a></b> others finish a period, where<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppThis.htm">this</a></b> participant is waiting to participate<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetMessage() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_message; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the message (done by the Server) <b><a href="CppIf.htm">if</a></b> others finish a period, where<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppThis.htm">this</a></b> participant is waiting to participate<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMessage(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; message) { m_message <a href="CppOperatorAssign.htm">=</a> message; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Participant<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> at a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>LoggedIn::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;~Participant<a href="CppState.htm">State</a>LoggedIn() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant<a href="CppState.htm">State</a>LoggedIn*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The message from the server <b><a href="CppIf.htm">if</a></b> others finish a period, where<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppThis.htm">this</a></b> participant is waiting to participate. This message<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/shows how much payoff the Participant is given <b><a href="CppFor.htm">for</a></b> waiting a period<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_message;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTSTATELOGGEDIN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstateloggedin.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstateloggedin.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppIpaddress.htm">ipaddress</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateloggedin.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>LoggedIn::Participant<a href="CppState.htm">State</a>LoggedIn(<br/>
&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Participant<a href="CppState.htm">State</a>(participant,server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_message{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>LoggedIn::ToAdminStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant * <b><a href="CppConst.htm">const</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetParticipant();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(", ID: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (participant-&gt;CanGetId()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppStdString.htm">std::string</a>("?NONE?"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(", <a href="CppIpAddress.htm">IP address</a>: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (participant-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? participant-&gt;<a href="CppGetIpAddress.htm">GetIpAddress</a>()-&gt;Get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppStdString.htm">std::string</a>("?NONE?"));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstatenotloggedin.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstatenotloggedin.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATENOTLOGGEDIN_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATENOTLOGGEDIN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Participant is in the <a href="CppState.htm">State</a>NotLoggedIn Participant<a href="CppState.htm">State</a><br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>An Administrator or Participant can be not logged in,<br/>
<a href="CppComment.htm">///</a>Server does not have <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a>.<br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>NotLoggedIn<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> Participant<a href="CppState.htm">State</a>, <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>NotLoggedIn<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contruct every Participant<a href="CppState.htm">State</a> from a <a href="CppPointer.htm">pointer</a> to its Participant<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>NotLoggedIn(Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Participant<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> at a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>NotLoggedIn::ToStr(); }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Participant<a href="CppState.htm">State</a>NotLoggedIn() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant<a href="CppState.htm">State</a>NotLoggedIn*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTSTATENOTLOGGEDIN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstatenotloggedin.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstatenotloggedin.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppIpaddress.htm">ipaddress</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatenotloggedin.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>NotLoggedIn::Participant<a href="CppState.htm">State</a>NotLoggedIn(<br/>
&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Participant<a href="CppState.htm">State</a>(participant,server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>NotLoggedIn::ToAdminStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;GetParticipant()-&gt;CanGetId())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>", ID: " <a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(GetParticipant()-&gt;GetId());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;GetParticipant()-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>", <a href="CppIpAddress.htm">IP address</a>: " <a href="CppOperatorPlus.htm">+</a> GetParticipant()-&gt;<a href="CppGetIpAddress.htm">GetIpAddress</a>()-&gt;Get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstatequiz.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstatequiz.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATEQUIZ_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATEQUIZ_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The Participant is in the <a href="CppState.htm">State</a>Quiz Participant<a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>Quiz<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> Participant<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>Quiz<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contruct every Participant<a href="CppState.htm">State</a> from a <a href="CppPointer.htm">pointer</a> to its Participant<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>Quiz(Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Participant<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> at a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>Quiz::ToStr(); }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Participant<a href="CppState.htm">State</a>Quiz() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant<a href="CppState.htm">State</a>Quiz*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTSTATEQUIZ_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstatequiz.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstatequiz.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatequiz.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatevoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>votingoption.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>Quiz::Participant<a href="CppState.htm">State</a>Quiz(<br/>
&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Participant<a href="CppState.htm">State</a>(participant,server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>Quiz::ToAdminStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
 <b><a href="CppConst.htm">const</a></b> Participant * <b><a href="CppConst.htm">const</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetParticipant();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppThis.htm">this</a></b>-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!participant-&gt;GetVotes().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt;&amp; i: participant-&gt;GetVotes())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>i-&gt;GetDescription()+",";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.resize(s.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a> <a href="CppStdString.htm">std::string</a>("(")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetVotes().size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(")");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"no votes";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstateviewresultsgroup.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstateviewresultsgroup.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATEVIEWRESULTSGROUP_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATEVIEWRESULTSGROUP_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The Participant is in the <a href="CppState.htm">State</a>ViewResultsGroup Participant<a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>ViewResultsGroup<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> Participant<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>ViewResultsGroup<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contruct every Participant<a href="CppState.htm">State</a> from a <a href="CppPointer.htm">pointer</a> to its Participant<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>ViewResultsGroup(Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Participant<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> at a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>ViewResultsGroup::ToStr(); }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Participant<a href="CppState.htm">State</a>ViewResultsGroup() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant<a href="CppState.htm">State</a>ViewResultsGroup*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTSTATEVIEWRESULTSGROUP_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstateviewresultsgroup.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstateviewresultsgroup.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateviewresultsgroup.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>ViewResultsGroup::Participant<a href="CppState.htm">State</a>ViewResultsGroup(<br/>
&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Participant<a href="CppState.htm">State</a>(participant,server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>ViewResultsGroup::ToAdminStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant * <b><a href="CppConst.htm">const</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetParticipant();<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppThis.htm">this</a></b>-&gt;ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstateviewresultsvoting.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstateviewresultsvoting.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATEVIEWRESULTSVOTING_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATEVIEWRESULTSVOTING_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The Participant is in the <a href="CppState.htm">State</a>ViewResultsVoting Participant<a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>ViewResultsVoting<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> Participant<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>ViewResultsVoting<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contruct every Participant<a href="CppState.htm">State</a> from a <a href="CppPointer.htm">pointer</a> to its Participant<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>ViewResultsVoting(Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Participant<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> at a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>ViewResultsVoting::ToStr(); }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Participant<a href="CppState.htm">State</a>ViewResultsVoting() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant<a href="CppState.htm">State</a>ViewResultsVoting*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTSTATEVIEWRESULTSVOTING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstateviewresultsvoting.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstateviewresultsvoting.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateviewresultsvoting.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>ViewResultsVoting::Participant<a href="CppState.htm">State</a>ViewResultsVoting(<br/>
&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> participant,<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Participant<a href="CppState.htm">State</a>(participant,server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>ViewResultsVoting::ToAdminStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant * <b><a href="CppConst.htm">const</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetParticipant();<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppThis.htm">this</a></b>-&gt;ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstatevoting.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstatevoting.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATEVOTING_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PARTICIPANTSTATEVOTING_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The Participant is in the <a href="CppState.htm">State</a>Voting Participant<a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Participant<a href="CppState.htm">State</a>Voting<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> Participant<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>Voting<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contruct every Participant<a href="CppState.htm">State</a> from a <a href="CppPointer.htm">pointer</a> to its Participant<br/>
&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>Voting(Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the Participant<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> an Administrator<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToAdminStr() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> at a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>Voting::ToStr(); }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Participant<a href="CppState.htm">State</a>Voting() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> <b><a href="CppDelete.htm">delete</a></b> <b><a href="CppThis.htm">this</a></b> Participant<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Participant<a href="CppState.htm">State</a>Voting*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARTICIPANTSTATEVOTING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstparticipantstatevoting.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstparticipantstatevoting.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstatevoting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>votingoption.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>Voting::Participant<a href="CppState.htm">State</a>Voting(<br/>
&nbsp;&nbsp;Participant * <b><a href="CppConst.htm">const</a></b> participant,Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: Participant<a href="CppState.htm">State</a>(participant,server)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant<a href="CppState.htm">State</a>Voting::ToAdminStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
 <b><a href="CppConst.htm">const</a></b> Participant * <b><a href="CppConst.htm">const</a></b> participant <a href="CppOperatorAssign.htm">=</a> GetParticipant();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetId())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppThis.htm">this</a></b>-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!participant-&gt;GetVotes().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt;&amp; i: participant-&gt;GetVotes())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>i-&gt;GetDescription()+",";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.resize(s.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a> <a href="CppStdString.htm">std::string</a>("(")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(participant-&gt;GetVotes().size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(")");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"no votes";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstpayoff.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstpayoff.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PAYOFF_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PAYOFF_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppTribool.htm">boost/logic/tribool.hpp</a>&gt;<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Payoff is a <b><a href="CppClass.htm">class</a></b> <b><a href="CppFor.htm">for</a></b> the different types of payoff<br/>
<b><a href="CppStruct.htm">struct</a></b> Payoff<br/>
{<br/>
&nbsp;&nbsp;Payoff(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C<a href="CppOperatorIncrement.htm">++</a> coding standards: 101 rules,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>guidelines, and best practices. ISBN: 0-32-111358-6. Item 50: 'Make base<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppClass.htm">class</a></b> <a href="CppDestructor.htm">destructor</a>s <b><a href="CppPublic.htm">public</a></b> and <b><a href="CppVirtual.htm">virtual</a></b>, or <b><a href="CppProtected.htm">protected</a></b> and non<b><a href="CppVirtual.htm">virtual</a></b>'.<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Payoff() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> the Payoff to an <a href="CppXml.htm">XML</a> string<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The payoff in <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_payoff;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The period (larger cycle) number<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_period;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> PayoffAssign : <b><a href="CppPublic.htm">public</a></b> Payoff<br/>
{<br/>
&nbsp;&nbsp;PayoffAssign(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> the Payoff to an <a href="CppXml.htm">XML</a> string<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~PayoffAssign() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(PayoffAssign*);<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> PayoffIpgg : <b><a href="CppPublic.htm">public</a></b> Payoff<br/>
{<br/>
&nbsp;&nbsp;PayoffIpgg(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> ipgg_round,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> did_contribute,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostTribool.htm">boost::logic::tribool</a>&amp; did_get_caught);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> the Payoff to an <a href="CppXml.htm">XML</a> string<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The IPGG round <b><a href="CppThis.htm">this</a></b> payoff was as<b><a href="CppSigned.htm">signed</a></b> in<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_ipgg_round;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Did the Participant contribute?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> m_did_contribute;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Did a non-contributing Participant get caught by the supervisor?<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> <b><a href="CppTrue.htm">true</a></b>: yes<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> no: no<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> <a href="CppIndeterminate.htm">indeterminate</a>: Participant did contribute<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostTribool.htm">boost::logic::tribool</a> m_did_get_caught;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~PayoffIpgg() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(PayoffIpgg*);<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> PayoffReAssign : <b><a href="CppPublic.htm">public</a></b> Payoff<br/>
{<br/>
&nbsp;&nbsp;PayoffReAssign(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> the Payoff to an <a href="CppXml.htm">XML</a> string<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~PayoffReAssign() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(PayoffReAssign*);<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Payoff&amp; p);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PAYOFF_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstpayoff.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstpayoff.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoff.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Payoff::Payoff(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff)<br/>
&nbsp;&nbsp;: m_payoff(payoff), m_period(period)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_period <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::PayoffAssign::PayoffAssign(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff)<br/>
&nbsp;&nbsp;: Payoff(period,payoff)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::PayoffAssign::To<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;payoff_assign&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;period&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_period<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/period&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;payoff&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_payoff<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/payoff&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/payoff_assign&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::PayoffIpgg::PayoffIpgg(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> ipgg_round,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> did_contribute,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostTribool.htm">boost::logic::tribool</a>&amp; did_get_caught)<br/>
&nbsp;&nbsp;: Payoff(period,payoff),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ipgg_round(ipgg_round),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_did_contribute(did_contribute),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_did_get_caught(did_get_caught)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ipgg_round <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::PayoffIpgg::To<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;payoff_ipgg&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;period&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_period<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/period&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;ipgg_round&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_ipgg_round<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/ipgg_round&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;payoff&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_payoff<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/payoff&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;did_contribute&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_did_contribute<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/did_contribute&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;did_get_caught&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_did_get_caught<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/did_get_caught&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/payoff_ipgg&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::PayoffReAssign::PayoffReAssign(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> payoff)<br/>
&nbsp;&nbsp;: Payoff(period,payoff)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::PayoffReAssign::To<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;payoff_reassign&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;period&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_period<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/period&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;payoff&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_payoff<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/payoff&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/payoff_reassign&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Payoff&amp; p)<br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.To<a href="CppXml.htm">Xml</a>();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstpayoffs.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstpayoffs.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PAYOFFS_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PAYOFFS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Payoffs is a Facade to work with a collection of Payoff <a href="CppInstance.htm">instances</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Payoffs<br/>
{<br/>
&nbsp;&nbsp;Payoffs();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a> a <b><a href="CppNew.htm">new</a></b> Payoff to the collection<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Payoff&gt; payoff);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> there are some <a href="CppInstance.htm">instances</a> of Payoff stored<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsEmpty() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the last obtained payoff<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Payoff&gt; GetLast() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the sum of the last n obtained payoffs<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetLast(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the size of the collection of Payoff<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetSize() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Sum the total payoff<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetTotal() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Payoffs() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Payoffs*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Payoff&gt; &gt; m_v;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PROJECT<a href="ProjectGtst.htm">GTST</a>PAYOFFS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstpayoffs.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstpayoffs.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoffs.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Payoffs::Payoffs()<br/>
&nbsp;&nbsp;: m_v{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Payoffs::<a href="CppAdd.htm">Add</a>(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Payoff&gt; payoff)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(payoff);<br/>
&nbsp;&nbsp;m_v.push_back(payoff);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Payoffs::GetSize() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Payoffs::IsEmpty() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_v.empty();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Payoff&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Payoffs::GetLast() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_v.empty());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_v.back();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get the sum of the last n obtained payoffs<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Payoffs::GetLast(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> DEBUG_TEMP_732487276655432842<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a>&nbsp;&nbsp;DEBUG_TEMP_732487276655432842<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n &gt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(m_v.size());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n <a href="CppOperatorLessEqual.htm">&lt;=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdAccumulate.htm">std::accumulate</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.end() <a href="CppOperatorMinus.htm">-</a> n, m_v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppDouble.htm">double</a></b>&amp; sum, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Payoff&gt; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sum <a href="CppOperatorPlus.htm">+</a> p-&gt;m_payoff;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Payoffs::GetTotal() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdAccumulate.htm">std::accumulate</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.begin(),m_v.end(),0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppDouble.htm">double</a></b>&amp; sum,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Payoff&gt;&amp; payoff)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sum <a href="CppOperatorPlus.htm">+</a> payoff-&gt;m_payoff;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstrepeatassigner.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstrepeatassigner.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>REPEATASSIGNER_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>REPEATASSIGNER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>RepeatAssigner is a Strategy to determined<br/>
<a href="CppComment.htm">///</a>how often a certain state is repeated<br/>
<b><a href="CppStruct.htm">struct</a></b> RepeatAssigner<br/>
{<br/>
&nbsp;&nbsp;RepeatAssigner();<br/>
&nbsp;&nbsp;RepeatAssigner(<b><a href="CppConst.htm">const</a></b> RepeatAssigner&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;RepeatAssigner&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> RepeatAssigner&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assign determines the number of IPGG repeats<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppInt.htm">int</a></b> Assign() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns the last as<b><a href="CppSigned.htm">signed</a></b> number of repeats<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGetLastAs<b><a href="CppSigned.htm">signed</a></b>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns <b><a href="CppIf.htm">if</a></b> there already is a value as<b><a href="CppSigned.htm">signed</a></b><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetLastAs<b><a href="CppSigned.htm">signed</a></b>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Converts</a> a RepeatAssigner to <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~RepeatAssigner() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(RepeatAssigner*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The log of all as<b><a href="CppSigned.htm">signed</a></b> values<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m_as<b><a href="CppSigned.htm">signed</a></b>_values;<br/>
};<br/>
<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> REPEATASSIGNER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstrepeatassigner.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstrepeatassigner.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::RepeatAssigner::RepeatAssigner()<br/>
&nbsp;&nbsp;: m_as<b><a href="CppSigned.htm">signed</a></b>_values{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Returns the last as<b><a href="CppSigned.htm">signed</a></b> number of repeats<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::RepeatAssigner::CanGetLastAs<b><a href="CppSigned.htm">signed</a></b>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !m_as<b><a href="CppSigned.htm">signed</a></b>_values.empty();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Returns <b><a href="CppIf.htm">if</a></b> there already is a value as<b><a href="CppSigned.htm">signed</a></b><br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::RepeatAssigner::GetLastAs<b><a href="CppSigned.htm">signed</a></b>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!CanGetLastAs<b><a href="CppSigned.htm">signed</a></b>())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "BREAK\n";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanGetLastAs<b><a href="CppSigned.htm">signed</a></b>());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_as<b><a href="CppSigned.htm">signed</a></b>_values.back();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstrepeatassignerfixed.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstrepeatassignerfixed.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>REPEATASSIGNERFIXED_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>REPEATASSIGNERFIXED_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>A RepeatAssigner that always assigns the IPGG to be repeated a fixed<br/>
<a href="CppComment.htm">///</a>amount of <a href="CppTime.htm">time</a>s<br/>
<b><a href="CppStruct.htm">struct</a></b> RepeatAssignerFixed : <b><a href="CppPublic.htm">public</a></b> RepeatAssigner<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the RepeatAssigner with the value it will always produce<br/>
&nbsp;&nbsp;RepeatAssignerFixed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> value);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assign determines the number of IPGG repeats<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Assign() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Converts</a> RepeatAssignerFixed to <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~RepeatAssignerFixed() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(RepeatAssignerFixed*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The number of IPGG repeats<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_value;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> REPEATASSIGNERFIXED_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstrepeatassignerfixed.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstrepeatassignerfixed.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassignerfixed.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::RepeatAssignerFixed::RepeatAssignerFixed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> value)<br/>
&nbsp;&nbsp;: RepeatAssigner{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_value(value)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_value &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "An experimental state must be visited at least once");<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::RepeatAssignerFixed::Assign() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;m_as<b><a href="CppSigned.htm">signed</a></b>_values.push_back(m_value);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanGetLastAs<b><a href="CppSigned.htm">signed</a></b>());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetLastAs<b><a href="CppSigned.htm">signed</a></b>() <a href="CppOperatorEqual.htm">==</a> m_value);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_value;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Converts</a> RepeatAssignerFixed to <a href="CppStdString.htm">std::string</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::RepeatAssignerFixed::ToStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("&lt;repeatassigner_fixed&gt;")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(m_value)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("&lt;/repeatassigner_fixed&gt;");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstrepeatassignerrandomgeometric.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstrepeatassignerrandomgeometric.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>REPEATASSIGNERRANDOMGEOMETRIC_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>REPEATASSIGNERRANDOMGEOMETRIC_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>A RepeatAssignerRandomGeometric that assigns the IPGG to be<br/>
<a href="CppComment.htm">///</a>repeated a <a href="CppRandomNumber.htm">random number</a> of <a href="CppTime.htm">time</a>s following a geometric distribution<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>The <a href="CppRandomNumber.htm">random number</a> of <a href="CppTime.htm">time</a>s the IPGG is player is calculated<br/>
<a href="CppComment.htm">///</a>by a Monte Carlo run in Assign<br/>
<b><a href="CppStruct.htm">struct</a></b> RepeatAssignerRandomGeometric : <b><a href="CppPublic.htm">public</a></b> RepeatAssigner<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the RepeatAssigner with the chance it will choose to <b><a href="CppDo.htm">do</a></b> another IPGG round<br/>
&nbsp;&nbsp;RepeatAssignerRandomGeometric(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> w);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assign determines the number of IPGG repeats<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Assign() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Converts</a> RepeatAssignerRandomUniform to <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~RepeatAssignerRandomGeometric() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(RepeatAssignerRandomGeometric*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parameter w is the chance that after a round, another one will follow<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_w;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get a <a href="CppRandomNumber.htm">random number</a> from 0.0 to 1.0 in a uniform distribution<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppGetRandomUniform.htm">GetRandomUniform</a>();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> REPEATASSIGNERRANDOMGEOMETRIC_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstrepeatassignerrandomgeometric.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstrepeatassignerrandomgeometric.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
 <br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassignerrandomgeometric.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::RepeatAssignerRandomGeometric::RepeatAssignerRandomGeometric(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> w)<br/>
&nbsp;&nbsp;: m_w(w)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_w <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "w must be at least zero");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_w&nbsp;&nbsp;&lt; 1.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "w must be at highest (but excluding) one");<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Assign the number of round that there will be played beforehand by Monte Carlo<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::RepeatAssignerRandomGeometric::Assign() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> value <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Monte Carlo<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (<a href="CppGetRandomUniform.htm">GetRandomUniform</a>() &lt; m_w)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>value;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_as<b><a href="CppSigned.htm">signed</a></b>_values.push_back(value);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanGetLastAs<b><a href="CppSigned.htm">signed</a></b>());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetLastAs<b><a href="CppSigned.htm">signed</a></b>() <a href="CppOperatorEqual.htm">==</a> value);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> value;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get a <a href="CppRandomNumber.htm">random number</a> from 0.0 to 1.0 in a uniform distribution<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetRandomUniform.htm">GetRandomUniform</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::RepeatAssignerRandomGeometric::<a href="CppGetRandomUniform.htm">GetRandomUniform</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdRand.htm">std::rand</a>())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRAND_MAX.htm">RAND_MAX</a>);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Converts</a> RepeatAssignerRandomGeometric to <a href="CppStdString.htm">std::string</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::RepeatAssignerRandomGeometric::ToStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("&lt;repeatassigner_random_geometric&gt;")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("&lt;w&gt;")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(m_w)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("&lt;/w&gt;")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("&lt;/repeatassigner_random_geometric&gt;");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstrepeatassignerrandomuniform.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstrepeatassignerrandomuniform.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>REPEATASSIGNERRANDOMUNIFORM_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>REPEATASSIGNERRANDOMUNIFORM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>A RepeatAssigner that assigns the IPGG to repeated a <a href="CppRandomNumber.htm">random number</a> of <a href="CppTime.htm">time</a>s.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>This <a href="CppRandomNumber.htm">random number</a> of <a href="CppTime.htm">time</a>s is a <a href="CppRandomNumber.htm">random number</a> from a certain range<br/>
<a href="CppComment.htm">///</a>in a uniform distribution<br/>
<b><a href="CppStruct.htm">struct</a></b> RepeatAssignerRandomUniform : <b><a href="CppPublic.htm">public</a></b> RepeatAssigner<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the RepeatAssigner with the range of values it chooses from<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/to determine the number of IPGG rounds<br/>
&nbsp;&nbsp;RepeatAssignerRandomUniform(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assign determines the number of IPGG repeats<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Assign() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Converts</a> RepeatAssignerRandomUniform to <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~RepeatAssignerRandomUniform() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(RepeatAssignerRandomUniform*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The lowest value RepeatAssignerRandomUniform chooses from to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/determine the number of IPGG rounds<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_from;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The range its to(-but-not-included)-value RepeatAssignerRandomUniform<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/chooses from to determine the number of IPGG rounds<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_to;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> REPEATASSIGNERRANDOMUNIFORM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstrepeatassignerrandomuniform.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstrepeatassignerrandomuniform.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassignerrandomuniform.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::RepeatAssignerRandomUniform::RepeatAssignerRandomUniform(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to)<br/>
&nbsp;&nbsp;: m_from(from),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to(to)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_from &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "An experimental state must be visited at least once");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_to &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "An experimental state must be visited at least once");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_from <a href="CppOperatorNotEqual.htm">!=</a> m_to <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A range consists of two different number");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_from &lt; m_to <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A range must start with the lower number");<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::RepeatAssignerRandomUniform::Assign() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_from <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> (m_from <a href="CppOperatorMinus.htm">-</a> m_to));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(value <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m_from <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A range starts at m_from");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(value&nbsp;&nbsp;&lt; m_to <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A range from m_from to _and not including_ m_to");<br/>
<br/>
&nbsp;&nbsp;m_as<b><a href="CppSigned.htm">signed</a></b>_values.push_back(value);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanGetLastAs<b><a href="CppSigned.htm">signed</a></b>());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetLastAs<b><a href="CppSigned.htm">signed</a></b>() <a href="CppOperatorEqual.htm">==</a> value);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> value;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Converts</a> RepeatAssignerRandomUniform to <a href="CppStdString.htm">std::string</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::RepeatAssignerRandomUniform::ToStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("&lt;repeatassigner_random_uniform&gt;")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("&lt;from&gt;")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(m_from)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("&lt;/from&gt;")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("&lt;to&gt;")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(m_to)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("&lt;/to&gt;")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("&lt;/repeatassigner_random_uniform&gt;");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstresources.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstresources.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a><a href="CppQmakeResources.htm">RESOURCES</a>_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a><a href="CppQmakeResources.htm">RESOURCES</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Resources ensures all resources will be present<br/>
<b><a href="CppStruct.htm">struct</a></b> Resources<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Resources<br/>
&nbsp;&nbsp;Resources();<br/>
&nbsp;&nbsp;Resources(<b><a href="CppConst.htm">const</a></b> Resources&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Resources&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Resources&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the background image<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameBackground() { <b><a href="CppReturn.htm">return</a></b> "Background.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the experiment cycle image<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameCycle() { <b><a href="CppReturn.htm">return</a></b> "Cycle_100.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the participant dialog 'Assign Payoff' and the parameter file possibilities<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameParticipantDialogAssignPayoff() { <b><a href="CppReturn.htm">return</a></b> "<a href="ProjectGtst.htm">ProjectGtst</a>ParticipantDialogAssignPayoffParameters.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the participant dialog '<a href="CppChat.htm">Chat</a>' and the parameter file possibilities<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameParticipantDialog<a href="CppChat.htm">Chat</a>() { <b><a href="CppReturn.htm">return</a></b> "<a href="ProjectGtst.htm">ProjectGtst</a>ParticipantDialogChatParameters.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the participant dialog 'Choose Action' and the parameter file possibilities<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameParticipantDialogChooseAction() { <b><a href="CppReturn.htm">return</a></b> "<a href="ProjectGtst.htm">ProjectGtst</a>ParticipantDialogChooseActionParameters.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the participant dialog 'Finished' and the parameter file possibilities<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameParticipantDialogFinished() { <b><a href="CppReturn.htm">return</a></b> "<a href="ProjectGtst.htm">ProjectGtst</a>ParticipantDialogFinishedParameters.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the participant dialog 'Group Assign' and the parameter file possibilities<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameParticipantDialogGroupAssign() { <b><a href="CppReturn.htm">return</a></b> "<a href="ProjectGtst.htm">ProjectGtst</a>ParticipantDialogGroupAssign2Parameters.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the participant dialog 'Group Re-assign' and the parameter file possibilities<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameParticipantDialogGroupReAssign() { <b><a href="CppReturn.htm">return</a></b> "<a href="ProjectGtst.htm">ProjectGtst</a>ParticipantDialogGroupReAssignParameters.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the participant dialog 'Logged-in' and the parameter file possibilities<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameParticipantDialogLoggedIn() { <b><a href="CppReturn.htm">return</a></b> "<a href="ProjectGtst.htm">ProjectGtst</a>ParticipantDialogLoggedInParameters.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the participant dialog 'Not logged-in' and the parameter file possibilities<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameParticipantDialogNotLoggedIn() { <b><a href="CppReturn.htm">return</a></b> "<a href="ProjectGtst.htm">ProjectGtst</a>ParticipantDialogNotLoggedInParameters.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the participant dialog 'View results group' and the parameter file possibilities<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameParticipantDialogViewResultsGroup() { <b><a href="CppReturn.htm">return</a></b> "<a href="ProjectGtst.htm">ProjectGtst</a>ParticipantDialogViewResultsGroupParameters.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the participant dialog 'View results voting' and the parameter file possibilities<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameParticipantDialogViewResultsVoting() { <b><a href="CppReturn.htm">return</a></b> "<a href="ProjectGtst.htm">ProjectGtst</a>ParticipantDialogViewResultsVotingParameters.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the participant dialog 'Voting' and the parameter file possibilities<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameParticipantDialogVoting() { <b><a href="CppReturn.htm">return</a></b> "<a href="ProjectGtst.htm">ProjectGtst</a>ParticipantDialogVotingParameters.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the total experiment flow<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameExperiment() { <b><a href="CppReturn.htm">return</a></b> "Experiment_100.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the groups image<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenameGroups() { <b><a href="CppReturn.htm">return</a></b> "Groups.png"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filename of the experiment period image<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetImageFilenamePeriod() { <b><a href="CppReturn.htm">return</a></b> "Period_100_58.png"; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the CSS <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b> <a href="CppApplication.htm">application</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; CreateStylesheet() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Save the stylesheet <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b> <a href="CppApplication.htm">application</a> to file<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SaveStylesheet() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Resources() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Resources*);<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> <a href="CppQmakeResources.htm">RESOURCES</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstresources.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstresources.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>resources.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppInclude.htm">#include</a> <a href="CppQt.htm">Qt</a> files after <a href="CppWt.htm">Wt</a> files<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Resources::Resources()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the <b><a href="CppDefault.htm">default</a></b> parameters file<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "wt.css";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SaveStylesheet();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; image_names<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>GetImageFilenameBackground(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameCycle(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameExperiment(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameGroups(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameParticipantDialogAssignPayoff(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameParticipantDialog<a href="CppChat.htm">Chat</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameParticipantDialogChooseAction(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameParticipantDialogFinished(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameParticipantDialogGroupAssign(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameParticipantDialogGroupReAssign(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameParticipantDialogLoggedIn(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameParticipantDialogNotLoggedIn(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameParticipantDialogViewResultsGroup(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameParticipantDialogViewResultsVoting(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenameParticipantDialogVoting(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetImageFilenamePeriod()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(image_names.begin(),image_names.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> f( (<a href="CppStdString.htm">std::string</a>(":/images/") <a href="CppOperatorPlus.htm">+</a> filename).c_str() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.copy(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "File not found: " <a href="CppOperatorPlus.htm">+</a> filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Create the CSS <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b> <a href="CppApplication.htm">application</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Resources::CreateStylesheet() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
<br/>
&nbsp;&nbsp;v.push_back("*");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-family:\"Verdana\",\"Arial\"\"Sans-serif\";");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-size:large;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("body");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v.push_back("&nbsp;&nbsp;background-image:url('Background.png');");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v.push_back("&nbsp;&nbsp;background-position:center center;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back(".read_only_textarea");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v.push_back("&nbsp;&nbsp;background-color:#bbbbbb;"); <a href="CppComment.htm">//</a>Gray<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;background-color:transparent;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back(".title");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-weight:bold;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-size:x-large;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("table, th, td");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;border: 1px solid black;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("td");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;padding:12px;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Items in <a href="CppMain.htm">main</a> menu<br/>
&nbsp;&nbsp;v.push_back(".menu * .item");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;cursor: <a href="CppPointer.htm">pointer</a>; cursor: hand;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-size:x-large;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;color: black;");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v.push_back("&nbsp;&nbsp;background-color:rgb(160,160,160);");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;padding:12px;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back(".menu * .itemselected {");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-size:x-large;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-weight: bold;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;color: blue;");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v.push_back("&nbsp;&nbsp;background-color:rgb(160,160,160);");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;padding:12px;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back(".<a href="ProjectWtWebsite.htm">wtwebsite</a>menu * .item");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;cursor: <a href="CppPointer.htm">pointer</a>; cursor: hand;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-size:x-large;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;color: black;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;padding:4px;");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v.push_back("&nbsp;&nbsp;background-color:rgb(160,160,160);");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;border:0px");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back(".<a href="ProjectWtWebsite.htm">wtwebsite</a>menu * .itemselected {");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-size:x-large;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-weight:bold;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;color: blue;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;padding:4px;");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v.push_back("&nbsp;&nbsp;background-color:rgb(196,196,196);");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;border:0px");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Save the stylesheet <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b> <a href="CppApplication.htm">application</a> to file<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Resources::SaveStylesheet() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> CreateStylesheet();<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f("wt.css");<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(f,"\n"));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserver.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserver.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVER_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMutexH.htm">regex</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/weak_ptr.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtTimedServerPusherClient.htm">wttimedserverpusherclient</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The center of communication.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Server is a <a href="CppThread.htm">thread</a>-safe Non-copyable <a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
<a href="CppComment.htm">///</a><b><a href="CppThis.htm">this</a></b> is a client of <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Server : <b><a href="CppPublic.htm">public</a></b> <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a><br/>
{<br/>
&nbsp;&nbsp;Server(<b><a href="CppConst.htm">const</a></b> Server&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Server&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Server&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Deletes all Participant <a href="CppInstance.htm">instances</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DeleteParticipants();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let an Administrator log in<br/>
&nbsp;&nbsp;<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Administrator&gt; LoginAdministrator();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let a Participant with a certain <a href="CppIpAddress.htm">IP address</a> log in <b><a href="CppFor.htm">for</a></b> the first or later <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; LetLogin(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Administrator collection<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Administrators&gt; GetAdministrators() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_administrators; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Administrator collection<br/>
&nbsp;&nbsp;<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Administrators&gt; GetAdministrators() { <b><a href="CppReturn.htm">return</a></b> m_administrators; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-only <a href="CppPointer.htm">pointer</a> to Groups<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Groups * GetGroups() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-and-write <a href="CppPointer.htm">pointer</a> to Groups<br/>
&nbsp;&nbsp;Groups * GetGroups();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Log File, read-only<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> LogFile * GetLog() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Log File<br/>
&nbsp;&nbsp;LogFile * GetLog();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Server<a href="CppState.htm">State</a>s, read-only<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>s * Get<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Server<a href="CppState.htm">State</a>s<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>s * Get<a href="CppState.htm">State</a>s();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters * GetParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Sets the Parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Effects all member variables, except the Administrators<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParameters(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the current Server<a href="CppState.htm">State</a> to its <b><a href="CppNew.htm">new</a></b> state<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a> * <b><a href="CppConst.htm">const</a></b> new_state);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Nobody ever logs out: he/she just refreshes or has a browser crash<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>When the browser is closed, the server is notified. This is not<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>the <b><a href="CppCase.htm">case</a></b> when a browser is refreshed (by pressing F5, <b><a href="CppFor.htm">for</a></b> example)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> NotifyLogout(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Resets the server to its initial state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Reset();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test the Server<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestMe();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Constructor</a> is as <b><a href="CppPrivate.htm">private</a></b> as Server is <a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
&nbsp;&nbsp;Server();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Server <a href="CppDesignPatternSingleton.htm">Singleton</a>'s only <a href="CppInstance.htm">instance</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Server * Get();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The set of active Administrators<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Administrators&gt; m_administrators;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Groups Facade<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Groups&gt; m_groups;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The only <a href="CppInstance.htm">instance</a> of the Server<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Server&gt; <a href="CppInstance.htm">m_instance</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The LogFile<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LogFile&gt; m_log;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The parameters when not/yes loaded<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Public <a href="CppMutex.htm">mutex</a> when reading/writing to Server,<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a> m_mutex;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Server<a href="CppState.htm">State</a> <a href="CppInstance.htm">instances</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>s&gt; m_states;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to the <a href="CppTime.htm">Time</a>dServerPusher<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>dServerPush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Give <b><a href="CppFriend.htm">friend</a></b>ship to Server<a href="CppState.htm">State</a> <b><a href="CppFor.htm">for</a></b> the FindParticipant <a href="CppMemberFunction.htm">member function</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> Server<a href="CppState.htm">State</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Give <b><a href="CppFriend.htm">friend</a></b>ship to the only Server::Get caller<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> MenuDialog;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SERVER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserver.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserver.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdioH.htm">cstdio</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/filesystem.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppProperty_tree.htm">boost/property_tree</a>/ptree.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppProperty_tree.htm">boost/property_tree</a>/xml_parser.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administrators.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>resources.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>test.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a>The Server <a href="CppDesignPatternSingleton.htm">Singleton</a> its only <a href="CppInstance.htm">instance</a><br/>
<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::<a href="CppInstance.htm">m_instance</a>;<br/>
<br/>
<a href="CppComment.htm">///</a>Mutex when writing to Server<br/>
<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::m_mutex;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::Server()<br/>
&nbsp;&nbsp;: m_administrators(<b><a href="CppNew.htm">new</a></b> Administrators),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_groups(<b><a href="CppNew.htm">new</a></b> Groups(<b><a href="CppThis.htm">this</a></b>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_log(<b><a href="CppNew.htm">new</a></b> LogFile),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters(<b><a href="CppNew.htm">new</a></b> Parameters(<b><a href="CppThis.htm">this</a></b>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_states{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create resources<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Resources&gt;(<b><a href="CppNew.htm">new</a></b> Resources);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_states.reset(<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>s(<b><a href="CppThis.htm">this</a></b>,m_parameters,m_log.get()));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SetParameters(m_parameters);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Assignment <b><a href="CppOperator.htm">operator</a></b><br/>
<a href="CppComment.htm">/*</a><br/>
Server&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::<b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Server&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b> <a href="CppOperatorEqual.htm">==</a> &amp;rhs) <b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdMutex.htm">std::mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_administrators <a href="CppOperatorAssign.htm">=</a> rhs.m_administrators;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_groups <a href="CppOperatorAssign.htm">=</a> rhs.m_groups;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_last_id_administrator <a href="CppOperatorAssign.htm">=</a> rhs.m_last_id_administrator;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_log <a href="CppOperatorAssign.htm">=</a> rhs.m_log;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_parameters <a href="CppOperatorAssign.htm">=</a> rhs.m_parameters;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_state <a href="CppOperatorAssign.htm">=</a> rhs.m_state;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_state_assign_payoff <a href="CppOperatorAssign.htm">=</a> rhs.m_state_assign_payoff;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_state_<a href="CppChat.htm">chat</a> <a href="CppOperatorAssign.htm">=</a> rhs.m_state_<a href="CppChat.htm">chat</a>;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_state_choose_action <a href="CppOperatorAssign.htm">=</a> rhs.m_state_choose_action;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_state_finished <a href="CppOperatorAssign.htm">=</a> rhs.m_state_finished;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_state_group_assign <a href="CppOperatorAssign.htm">=</a> rhs.m_state_group_assign;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_state_group_reassign <a href="CppOperatorAssign.htm">=</a> rhs.m_state_group_reassign;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_state_quiz <a href="CppOperatorAssign.htm">=</a> rhs.m_state_quiz;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_state_view_results_group <a href="CppOperatorAssign.htm">=</a> rhs.m_state_view_results_group;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_state_view_results_voting <a href="CppOperatorAssign.htm">=</a> rhs.m_state_view_results_voting;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_state_voting <a href="CppOperatorAssign.htm">=</a> rhs.m_state_voting;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_state_waiting <a href="CppOperatorAssign.htm">=</a> rhs.m_state_waiting;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">///</a>Deletes all Participant <a href="CppInstance.htm">instances</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::DeleteParticipants()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;m_groups-&gt;MoveAllToFinished();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_groups.reset(<b><a href="CppNew.htm">new</a></b> Groups(<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
&nbsp;&nbsp;m_parameters-&gt;DeleteParticipants();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::Get()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppInstance.htm">m_instance</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDouble.htm">Double</a>-checked lock<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::m_mutex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppInstance.htm">m_instance</a>) <a href="CppInstance.htm">m_instance</a>.reset(<b><a href="CppNew.htm">new</a></b> Server);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppInstance.htm">m_instance</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppInstance.htm">m_instance</a>.get();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain a read-only <a href="CppPointer.htm">pointer</a> to Groups<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::GetGroups() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_groups);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_groups.get();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain a read-and-write <a href="CppPointer.htm">pointer</a> to Groups<br/>
<a href="CppComment.htm">//</a>Avoiding duplication in <b><a href="CppConst.htm">const</a></b> and non-<a href="CppConstMemberFunction.htm">const member function</a>s.<br/>
<a href="CppComment.htm">//</a><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C<a href="CppOperatorIncrement.htm">++</a> (3rd edition). ISBN: 0-321-33487-6. Item 3,<br/>
<a href="CppComment.htm">//</a>paragraph 'Avoid duplication in <b><a href="CppConst.htm">const</a></b> and non-<a href="CppConstMemberFunction.htm">const member function</a>s'<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Groups * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::GetGroups()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;Groups*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Server&amp;&gt;(*<b><a href="CppThis.htm">this</a></b>).GetGroups());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::GetLog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_log);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_log.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::LogFile * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::GetLog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_log);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_log.get();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Parameters * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::GetParameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_parameters.get();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>s * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::Get<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_states);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_states.get();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>s * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::Get<a href="CppState.htm">State</a>s()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_states);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_states.get();<br/>
}<br/>
<br/>
<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Administrator&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::LoginAdministrator()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_administrators-&gt;CreateNewAdministrator();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::LetLogin(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>&gt;&amp; ip_address)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> participants that reloaded the page by pressing F5<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetGroups()-&gt;CanGetParticipantWith<a href="CppIpAddress.htm">IpAddress</a>(ip_address))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetGroups()-&gt;GetParticipantWith<a href="CppIpAddress.htm">IpAddress</a>(ip_address);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetGroups()-&gt;CanLetLogin(ip_address));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; new_participant<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_groups-&gt;LetLogin(ip_address);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(new_participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Logging <b><a href="CppThis.htm">this</a></b> event<br/>
&nbsp;&nbsp;m_log-&gt;Login(new_participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>New participants <b><a href="CppTry.htm">try</a></b> to log in<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> new_participant;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::Reset()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;m_administrators.reset(<b><a href="CppNew.htm">new</a></b> Administrators);<br/>
&nbsp;&nbsp;m_parameters.reset(<b><a href="CppNew.htm">new</a></b> Parameters(<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetParameters(m_parameters);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::NotifyLogout(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Logging <b><a href="CppThis.htm">this</a></b> eventServer<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;m_log-&gt;Logout(participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do not erase the Participant: it is used again when he/she<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>refreshed his/her browser, so he/she can log in easily<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::On<a href="CppTime.htm">Time</a>dServerPush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (!m_states) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_states);<br/>
&nbsp;&nbsp;m_states-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;On<a href="CppTime.htm">Time</a>r();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::SetParameters(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_groups.reset(<b><a href="CppNew.htm">new</a></b> Groups(<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;m_groups-&gt;MoveAllToFinished();<br/>
&nbsp;&nbsp;GroupParticipating::Reset();<br/>
&nbsp;&nbsp;m_log.reset(<b><a href="CppNew.htm">new</a></b> LogFile);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_log);<br/>
&nbsp;&nbsp;m_parameters <a href="CppOperatorAssign.htm">=</a> parameters;<br/>
&nbsp;&nbsp;m_log-&gt;LogParameters(m_parameters);<br/>
&nbsp;&nbsp;m_states.reset(<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>s(<b><a href="CppThis.htm">this</a></b>,m_parameters,m_log.get()));<br/>
&nbsp;&nbsp;m_groups-&gt;SetParticipants(m_parameters-&gt;GetParticipants());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server::TestMe()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdRecursive_mutex.htm">std::recursive_mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only test server <b><a href="CppFor.htm">for</a></b> the first person that logs in<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> has_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (has_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;Test&gt; test(<b><a href="CppNew.htm">new</a></b> Test(<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;has_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstate.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstate.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATE_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Server<a href="CppState.htm">State</a> embodies the state of the server.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Server<a href="CppState.htm">State</a> is a <a href="CppState.htm">State</a>.<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a Server<a href="CppState.htm">State</a> with a <a href="CppPointer.htm">pointer</a> to its Server<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>(Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle);<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppMemberFunction.htm">member function</a> is implemented like <b><a href="CppThis.htm">this</a></b> <b><a href="CppFor.htm">for</a></b> possible future<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/more complex state transitions<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppBool.htm">bool</a></b> CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find a read/write Group from a read-only Group<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This is the only <a href="CppMemberFunction.htm">member function</a> that <b><a href="CppConst_cast.htm">const_cast</a></b>s a Group<br/>
&nbsp;&nbsp;Group * FindGroup(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find a read/write Participant from a read-only Participant<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This is the only <a href="CppMemberFunction.htm">member function</a> that <b><a href="CppConst_cast.htm">const_cast</a></b>s a Participant<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; FindParticipant(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Go to the next state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> GoToNext<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the IPGG cycle <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> is in<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetCycle() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_period; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain all Participant's their states relevant <b><a href="CppFor.htm">for</a></b> the current Server<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; GetParticipant<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the period <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> is in<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetPeriod() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_period; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppTime.htm">time</a> left (in seconds) in <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppGetTime.htm">GetTime</a>Left() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppState.htm">State</a> its parent<br/>
&nbsp;&nbsp;Server * GetServer() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the duration of the state in seconds<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a> dependent response to a <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Reset the <a href="CppTime.htm">time</a>r, when the <a href="CppState.htm">State</a> is started<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Reset<a href="CppTime.htm">Time</a>Left();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start or restart the state, <b><a href="CppFor.htm">for</a></b> example by resetting the <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Start() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Server<a href="CppState.htm">State</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Server<a href="CppState.htm">State</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The IPGG cycle <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> is in<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_cycle;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The period <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> is in<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_period;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(re)set the <a href="CppTime.htm">time</a> left in <b><a href="CppThis.htm">this</a></b> state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppTime.htm">Time</a>Left(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> m_server;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The server <b><a href="CppThis.htm">this</a></b> state works on<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do not change <b><a href="CppThis.htm">this</a></b> to <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Server&gt;, because<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/each <a href="CppState.htm">State</a> is <a href="CppConstructor.htm">construct</a>ed at the <a href="CppConstructor.htm">constructor</a> of a Server,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/which requires a <a href="CppPointer.htm">pointer</a> to '<b><a href="CppThis.htm">this</a></b>'<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A <a href="CppStopwatch.htm">Stopwatch</a> used in the <a href="CppTime.htm">time</a>d <a href="CppState.htm">State</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppStopwatch.htm">Stopwatch</a>&gt; m_<a href="CppStopwatch.htm">stopwatch</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppTime.htm">time</a> that must yet be waited before the state is ended<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_wait_<a href="CppTime.htm">time</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Converts</a> a currency to <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example: 123.456789 to 123.46<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> CurrencyToStr(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ServerSTATE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstate.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstate.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIomanipH.htm">iomanip</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/bounds.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administrator.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantdialogstate.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>::Server<a href="CppState.htm">State</a>(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle)<br/>
&nbsp;&nbsp;: m_cycle(cycle),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_period(period),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_server(server),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppStopwatch.htm">stopwatch</a>(<b><a href="CppNew.htm">new</a></b> <a href="CppStopwatch.htm">Stopwatch</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_wait_<a href="CppTime.htm">time</a>{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="CppStopwatch.htm">stopwatch</a>);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>::CurrencyToStr(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetprecision.htm">std::setprecision</a>(2) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdFixed.htm">std::fixed</a>;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> value;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Find a read/write Group from a read-only Group<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>\note<br/>
<a href="CppComment.htm">///</a>This is the only <a href="CppMemberFunction.htm">member function</a> that <b><a href="CppConst_cast.htm">const_cast</a></b>s a Group<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>::FindGroup(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetServer()-&gt;GetGroups()-&gt;FindGroup(group);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Find a read/write Participant from a read-only Participant<br/>
<a href="CppComment.htm">///</a>Just checks <b><a href="CppIf.htm">if</a></b> the Participant really exists<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>\note<br/>
<a href="CppComment.htm">///</a>One of the most important <b><a href="CppConst_cast.htm">const_cast</a></b>s<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Participant&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>::FindParticipant(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetServer()-&gt;GetGroups()-&gt;FindMyGroup(participant));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::const_<a href="CppPointer.htm">pointer</a>_cast&lt;Participant&gt;(participant);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain all Participant's their states relevant <b><a href="CppFor.htm">for</a></b> the current Server<a href="CppState.htm">State</a><br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>::GetParticipant<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetServer());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetServer()-&gt;GetGroups());<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetServer()-&gt;GetGroups()-&gt;CollectParticipants().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("No participants logged in");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> ps <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetGroups()-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(ps.begin(),ps.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;v](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p-&gt;ToAdminStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the <a href="CppState.htm">State</a> its parent<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>::GetServer() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_server;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>::<a href="CppGetTime.htm">GetTime</a>Left() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="CppStopwatch.htm">stopwatch</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_wait_<a href="CppTime.htm">time</a> <a href="CppOperatorMinus.htm">-</a> m_<a href="CppStopwatch.htm">stopwatch</a>-&gt;elapsed();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>::GoToNext<a href="CppState.htm">State</a>()<br/>
{<br/>
&nbsp;&nbsp;GetServer()-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GoToNext<a href="CppState.htm">State</a>();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>::Reset<a href="CppTime.htm">Time</a>Left()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_duration <a href="CppOperatorAssign.htm">=</a> Get<a href="CppState.htm">State</a>Duration();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_duration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Set<a href="CppTime.htm">Time</a>Left(state_duration);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetTime.htm">GetTime</a>Left() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1); <a href="CppComment.htm">//</a>-1 because of a possible clock tick<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>::Set<a href="CppTime.htm">Time</a>Left(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_<a href="CppStopwatch.htm">stopwatch</a>.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppStopwatch.htm">Stopwatch</a>);<br/>
&nbsp;&nbsp;m_wait_<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> m_<a href="CppStopwatch.htm">stopwatch</a>-&gt;elapsed() <a href="CppOperatorPlus.htm">+</a> <a href="CppTime.htm">time</a>;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstateassignpayoff.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstateassignpayoff.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEASSIGNPAYOFF_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEASSIGNPAYOFF_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Server is in the assign-payoff state<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>AssignPayoff : <b><a href="CppPublic.htm">public</a></b> Server<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>AssignPayoff<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> by passing the Server it is a <a href="CppState.htm">State</a> of<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>AssignPayoff(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersAssignPayoff&gt; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>ViewResultsVoting&gt; state_view_results_voting);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppMemberFunction.htm">member function</a> is implemented like <b><a href="CppThis.htm">this</a></b> <b><a href="CppFor.htm">for</a></b> possible future<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/more complex state transitions<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a> dependent response to a <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the duration of the state in seconds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> its specific Parameters<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersAssignPayoff&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start or restart the state, <b><a href="CppFor.htm">for</a></b> example by resetting the <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>AssignPayoff::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Server<a href="CppState.htm">State</a>AssignPayoff() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Server<a href="CppState.htm">State</a>AssignPayoff*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>AssignPayoff&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Keeps track of Participants having as<b><a href="CppSigned.htm">signed</a></b> their payoff<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant *,<b><a href="CppBool.htm">bool</a></b>&gt; m_has_as<b><a href="CppSigned.htm">signed</a></b>_payoff;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read-only parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersAssignPayoff&gt; m_parameters;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a>ViewResultsVoting <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> reads its information from<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>ViewResultsVoting&gt; m_state_view_results_voting;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>AssignPayoff&amp; s);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ServerSTATEASSIGNPAYOFF_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstateassignpayoff.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstateassignpayoff.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administrator.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>votingoption.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>AssignPayoff::Server<a href="CppState.htm">State</a>AssignPayoff(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersAssignPayoff&gt; parameters,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>ViewResultsVoting&gt; state_view_results_voting)<br/>
&nbsp;&nbsp;: Server<a href="CppState.htm">State</a>(server,period,cycle),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_has_as<b><a href="CppSigned.htm">signed</a></b>_payoff{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters(parameters),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_view_results_voting(state_view_results_voting)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_view_results_voting);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>AssignPayoff::CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the duration of the state in seconds<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>AssignPayoff::Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::numeric::bounds&lt;<b><a href="CppInt.htm">int</a></b>&gt;::highest();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>AssignPayoff::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanGoToNext<a href="CppState.htm">State</a>()) GoToNext<a href="CppState.htm">State</a>();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>AssignPayoff::Start()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetPeriod();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetCycle();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/assigns all Participant payoffs<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> groups <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetGroups()-&gt;CollectGroups(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(groups.begin(),groups.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,period,cycle](<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(group);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;m_state_view_results_voting-&gt;GetVotedOptions().find(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group) <a href="CppOperatorNotEqual.htm">!=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_state_view_results_voting-&gt;GetVotedOptions().end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> VotingOption * <b><a href="CppConst.htm">const</a></b> option<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_state_view_results_voting-&gt;GetVotedOptions().find(group)-&gt;second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If option is null, no consensus is reached within <b><a href="CppThis.htm">this</a></b> group<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;FindGroup(group)-&gt;AssignPayoff(period,cycle,option);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> ps <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetGroups()-&gt;CollectParticipants(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(ps.begin(),ps.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppState.htm">State</a>AssignPayoff * <b><a href="CppConst.htm">const</a></b> state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>AssignPayoff*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;FindParticipant(p)-&gt;Set<a href="CppState.htm">State</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>AssignPayoff&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;has_as<b><a href="CppSigned.htm">signed</a></b>_payoff&gt;";<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(s.m_has_as<b><a href="CppSigned.htm">signed</a></b>_payoff.begin(),s.m_has_as<b><a href="CppSigned.htm">signed</a></b>_payoff.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;os](<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant *,<b><a href="CppBool.htm">bool</a></b>&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.first<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;yesno&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.second<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/yesno&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_has_as<b><a href="CppSigned.htm">signed</a></b>_payoff<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/has_as<b><a href="CppSigned.htm">signed</a></b>_payoff&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_server<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_<a href="CppStopwatch.htm">stopwatch</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_wait_<a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstatechat.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstatechat.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATECHAT_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATECHAT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Server is in the <a href="CppChat.htm">chat</a> state<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>: <b><a href="CppPublic.htm">public</a></b> Server<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> by passing the Server it is a <a href="CppState.htm">State</a> of<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Parameters<a href="CppChat.htm">Chat</a>&gt; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/See <b><a href="CppIf.htm">if</a></b> the Participant has pending <a href="CppChat.htm">chat</a> messages,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/sent by him/herself or the others<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGetChatMessages(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppMemberFunction.htm">member function</a> is implemented like <b><a href="CppThis.htm">this</a></b> <b><a href="CppFor.htm">for</a></b> possible future<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/more complex state transitions<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Participant his/her pending <a href="CppChat.htm">chat</a> messages,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/sent by him/herself or the others<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt; &gt; GetChatMessages(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a> dependent response to a <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the duration of the state in seconds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> its specific Parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Parameters<a href="CppChat.htm">Chat</a>&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/In the '<a href="CppChat.htm">Chat</a>' phase, <a href="CppAny.htm">any</a> Participant can send a <a href="CppChat.htm">chat</a> message that<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/will be broadcasted to all group members<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> NotifyChatMessage(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt;&amp; message);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start or restart the state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For Participant, m_chat_messages contains<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/his/her pending <a href="CppChat.htm">chat</a> messages<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;,<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt; &gt; &gt; m_chat_messages;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppChat.htm">Chat</a> parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Parameters<a href="CppChat.htm">Chat</a>&gt; m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> each Participant has chatted already <b><a href="CppThis.htm">this</a></b>/last round<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> GetAllParticipantsHaveChatted() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>&amp; s);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ServerSTATECHAT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstatechat.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstatechat.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administrator.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a><a href="CppChat.htm">chat</a>message.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtServerPusher.htm">wtserverpusher</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Parameters<a href="CppChat.htm">Chat</a>&gt; parameters)<br/>
&nbsp;&nbsp;: Server<a href="CppState.htm">State</a>(server,period,cycle),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_chat_messages{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters(parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>See <b><a href="CppIf.htm">if</a></b> the Participant has pending <a href="CppChat.htm">chat</a> messages,<br/>
<a href="CppComment.htm">///</a>sent by him/herself or the others<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::CanGetChatMessages(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_chat_messages.find(participant) <a href="CppOperatorNotEqual.htm">!=</a> m_chat_messages.end();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppGetTime.htm">GetTime</a>Left() &lt; 0;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the Participant his/her pending <a href="CppChat.htm">chat</a> messages,<br/>
<a href="CppComment.htm">///</a>sent by him/herself or the others<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::ChatMessage&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::GetChatMessages(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanGetChatMessages(participant));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get <b><a href="CppNew.htm">new</a></b> messages<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt; &gt; messages<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_chat_messages[participant];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove pending messages<br/>
&nbsp;&nbsp;m_chat_messages[participant].resize(0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Return <b><a href="CppNew.htm">new</a></b> messages<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> messages;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the duration of the state in seconds<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_parameters-&gt;GetDuration();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanGoToNext<a href="CppState.htm">State</a>()) GoToNext<a href="CppState.htm">State</a>();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>In the '<a href="CppChat.htm">Chat</a>' phase, <a href="CppAny.htm">any</a> Participant can send a <a href="CppChat.htm">chat</a> message that<br/>
<a href="CppComment.htm">///</a>will be broadcasted to all group members<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::NotifyChatMessage(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt;&amp; message)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetServer());<br/>
<br/>
&nbsp;&nbsp;LogFile * <b><a href="CppConst.htm">const</a></b> logfile <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetLog();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(logfile);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAppend.htm">Append</a> the <a href="CppChat.htm">chat</a> message to the Participant his/her own log<br/>
&nbsp;&nbsp;FindParticipant(participant)-&gt;<a href="CppAppend.htm">Append</a><a href="CppChat.htm">Chat</a>(message);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Logging <b><a href="CppThis.htm">this</a></b> event<br/>
&nbsp;&nbsp;logfile-&gt;LogChatMessage(participant,message);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Broadcasting <a href="CppChat.htm">chat</a> texts <b><a href="CppFor.htm">for</a></b> participants of the same group<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>including the sender itself<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetGroups()-&gt;FindMyGroup(participant);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> ps <a href="CppOperatorAssign.htm">=</a> group-&gt;CollectParticipants();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(ps.begin(),ps.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,message](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_chat_messages[p].push_back(message);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppWtServerPusher.htm">WtServerPusher</a>::GetInstance()-&gt;Post();<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Parameters<a href="CppChat.htm">Chat</a>&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;m_parameters <a href="CppOperatorAssign.htm">=</a> parameters;<br/>
<br/>
&nbsp;&nbsp;Reset<a href="CppTime.htm">Time</a>Left();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppGetTime.htm">GetTime</a>Left() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">///</a>Start or restart the state. Just go to the next <a href="CppChat.htm">chat</a> phase, because<br/>
<a href="CppComment.htm">///</a>every Participant can have or have not chatted the last round<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>::Start()<br/>
{<br/>
&nbsp;&nbsp;Reset<a href="CppTime.htm">Time</a>Left();<br/>
&nbsp;&nbsp;m_chat_messages.clear();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> ps <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetGroups()-&gt;CollectParticipants(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(ps.begin(),ps.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a> * <b><a href="CppConst.htm">const</a></b> state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;FindParticipant(p)-&gt;Set<a href="CppState.htm">State</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;FindParticipant(p)-&gt;Start<a href="CppChat.htm">Chat</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;has_as<b><a href="CppSigned.htm">signed</a></b>_payoff&gt;";<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(s.m_chat_messages.begin(),s.m_chat_messages.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;os](<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;,<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt; &gt; &gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(p.second.begin(),p.second.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;os](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt;&amp; m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/has_as<b><a href="CppSigned.htm">signed</a></b>_payoff&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_server<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_<a href="CppStopwatch.htm">stopwatch</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_wait_<a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstatechooseaction.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstatechooseaction.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATECHOOSEACTION_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATECHOOSEACTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Server is in the choose-action state<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>ChooseAction : <b><a href="CppPublic.htm">public</a></b> Server<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>ChooseAction<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> by passing the Server it is a <a href="CppState.htm">State</a> of<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>ChooseAction(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersChooseAction&gt; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppMemberFunction.htm">member function</a> is implemented like <b><a href="CppThis.htm">this</a></b> <b><a href="CppFor.htm">for</a></b> possible future<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/more complex state transitions<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a> dependent response to a <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the duration of the state in seconds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Server is notified by ParticipantDialogChooseAction<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/of the action taken by its Participant<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> NotifyChosenAction(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ChooseActionOption * <b><a href="CppConst.htm">const</a></b> option);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> its specific Parameters<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersChooseAction&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start or restart the state, <b><a href="CppFor.htm">for</a></b> example by resetting the <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>ChooseAction::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Server<a href="CppState.htm">State</a>ChooseAction() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Server<a href="CppState.htm">State</a>ChooseAction*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>ChooseAction&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Keeps track of Participants having voted<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;,<b><a href="CppBool.htm">bool</a></b>&gt; m_has_chosen_action;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersChooseAction&gt; m_parameters;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>ChooseAction&amp; s);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ServerSTATECHOOSEACTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstatechooseaction.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstatechooseaction.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>administrator.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ChooseAction::Server<a href="CppState.htm">State</a>ChooseAction(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersChooseAction&gt; parameters)<br/>
&nbsp;&nbsp;: Server<a href="CppState.htm">State</a>(server,period,cycle),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_has_chosen_action{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters(parameters)<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ChooseAction::CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdFind_if.htm">std::find_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_has_chosen_action.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_has_chosen_action.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;,<b><a href="CppBool.htm">bool</a></b>&gt;&amp; i) { <b><a href="CppReturn.htm">return</a></b> !i.second; } )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> m_has_chosen_action.end();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the duration of the state in seconds<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ChooseAction::Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_parameters-&gt;GetDuration();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>The Server is notified by ParticipantDialogChooseAction<br/>
<a href="CppComment.htm">///</a>of the action taken by its Participant<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ChooseAction::NotifyChosenAction(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ChooseActionOption * <b><a href="CppConst.htm">const</a></b> option)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(option);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;FindParticipant(participant)-&gt;ChooseAction(option);<br/>
<br/>
&nbsp;&nbsp;m_has_chosen_action[participant] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;m_server-&gt;GetLog()-&gt;LogAction(participant);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ChooseAction::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanGoToNext<a href="CppState.htm">State</a>())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GoToNext<a href="CppState.htm">State</a>();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ChooseAction::SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersChooseAction&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;m_parameters <a href="CppOperatorAssign.htm">=</a> parameters;<br/>
<br/>
&nbsp;&nbsp;Reset<a href="CppTime.htm">Time</a>Left();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppGetTime.htm">GetTime</a>Left() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ChooseAction::Start()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Keeps track of Participants having voted<br/>
&nbsp;&nbsp;m_has_chosen_action.clear();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_has_chosen_action.empty());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetServer()-&gt;GetGroups()-&gt;CollectParticipants(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!GetServer()-&gt;GetGroups()-&gt;CollectParticipants(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>).empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_has_chosen_action.insert(<a href="CppStdMake_pair.htm">std::make_pair</a>(p,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppState.htm">State</a>ChooseAction * <b><a href="CppConst.htm">const</a></b> state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>ChooseAction*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FindParticipant(p)-&gt;Set<a href="CppState.htm">State</a>(state);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!CanGoToNext<a href="CppState.htm">State</a>());<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>ChooseAction&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;has_chosen_action&gt;";<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(s.m_has_chosen_action.begin(),s.m_has_chosen_action.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;os](<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;,<b><a href="CppBool.htm">bool</a></b>&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*(p.first))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;yesno&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.second<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/yesno&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/has_chosen_action&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstatefinished.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstatefinished.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEFINISHED_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEFINISHED_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Server in the state when the experiment is finished<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>Finished : <b><a href="CppPublic.htm">public</a></b> Server<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>Finished<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> by passing the Server it is a <a href="CppState.htm">State</a> of<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>Finished(Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppMemberFunction.htm">member function</a> is implemented like <b><a href="CppThis.htm">this</a></b> <b><a href="CppFor.htm">for</a></b> possible future<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/more complex state transitions<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a> dependent response to a <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the duration of the state in seconds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> its specific Parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersFinished&gt;&amp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>Finished::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start or restart the state, <b><a href="CppFor.htm">for</a></b> example by resetting the <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Server<a href="CppState.htm">State</a>Finished() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Server<a href="CppState.htm">State</a>Finished*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>Finished&amp; s);<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>Finished&amp; s);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ServerSTATEFINISHED_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstatefinished.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstatefinished.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/bounds.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Finished::Server<a href="CppState.htm">State</a>Finished(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle)<br/>
&nbsp;&nbsp;: Server<a href="CppState.htm">State</a>(server,period,cycle)<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Finished::CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the duration of the state in seconds<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Finished::Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::numeric::bounds&lt;<b><a href="CppInt.htm">int</a></b>&gt;::highest();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Finished::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do exactly nothing<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Finished::Start()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetServer()-&gt;GetGroups()-&gt;CollectParticipants())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FindParticipant(p)-&gt;Set<a href="CppState.htm">State</a>(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>Finished);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;GetServer()-&gt;GetGroups()-&gt;MoveAllToFinished();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>Finished&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstategroupassign.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstategroupassign.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> SERVERSTATEGROUPASSIGN_H<br/>
<a href="CppDefine.htm">#define</a> SERVERSTATEGROUPASSIGN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Server in the state when each Participant is as<b><a href="CppSigned.htm">signed</a></b> his/her group<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>GroupAssign : <b><a href="CppPublic.htm">public</a></b> Server<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>GroupAssign<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> by passing the Server it is a <a href="CppState.htm">State</a> of<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>GroupAssign(Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Request the server to assign the Participant to a Group<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AssignGroup(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Ask the server <b><a href="CppIf.htm">if</a></b> the Participant can be ass<b><a href="CppSigned.htm">signed</a></b> to a Group<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanAssignGroup(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppMemberFunction.htm">member function</a> is implemented like <b><a href="CppThis.htm">this</a></b> <b><a href="CppFor.htm">for</a></b> possible future<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/more complex state transitions<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a> dependent response to a <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the duration of the state in seconds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> its specific Parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersGroupAssign&gt;&amp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start or restart the state, calculate the joiners<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>GroupAssign::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Server<a href="CppState.htm">State</a>GroupAssign() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Server<a href="CppState.htm">State</a>GroupAssign*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>GroupAssign&amp; s);<br/>
<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>GroupAssign&amp; s);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SERVERSTATEGROUPASSIGN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstategroupassign.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstategroupassign.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/bounds.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupAssign::Server<a href="CppState.htm">State</a>GroupAssign(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle)<br/>
&nbsp;&nbsp;: Server<a href="CppState.htm">State</a>(server,period,cycle)<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupAssign::AssignGroup(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> GroupAssigner * <b><a href="CppConst.htm">const</a></b> assigner <a href="CppOperatorAssign.htm">=</a> participant-&gt;GetGroupAssigner();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(assigner);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppConst.htm">const</a></b> GroupAssignerPredetermined * <b><a href="CppConst.htm">const</a></b> p<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> GroupAssignerPredetermined*&gt;(assigner))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group_from<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetServer()-&gt;GetGroups()-&gt;FindMyGroup(participant);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Group*&gt; groups<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetServer()-&gt;GetGroups()-&gt;CollectGroups();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> group_to_index <a href="CppOperatorAssign.htm">=</a> p-&gt;GetGroup();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group_to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> *<a href="CppStdFind_if.htm">std::find_if</a>(groups.begin(),groups.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;Group::GetId,<a href="CppBoostLambda.htm">boost::lambda</a>::_1) <a href="CppOperatorEqual.htm">==</a> group_to_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group_to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> *<a href="CppStdFind_if.htm">std::find_if</a>(groups.begin(),groups.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[group_to_index](<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> i) { <b><a href="CppReturn.htm">return</a></b>&nbsp;&nbsp;i-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> group_to_index; } );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Transfer the Particippayoffsant<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FindGroup(group_to)-&gt;<a href="CppAdd.htm">Add</a>Participant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FindGroup(group_from)-&gt;RemoveParticipant(participant));<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Log group assignment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_server-&gt;GetLog()-&gt;LogAssignGroup(group_to,participant);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"?Should not get here?");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Check <b><a href="CppIf.htm">if</a></b> the Participant can be as<b><a href="CppSigned.htm">signed</a></b> to a group.<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupAssign::CanAssignGroup(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sure, <a href="CppAny.htm">any</a> logged-in Participant can be as<b><a href="CppSigned.htm">signed</a></b> to a group<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetServer()-&gt;GetGroups()-&gt;GetGroupLoggedIn()-&gt;IsMember(participant);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
<a href="CppComment.htm">///</a>Server<a href="CppState.htm">State</a>GroupAssign can only go to the next state <b><a href="CppIf.htm">if</a></b><br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> all Participants have had their <a href="CppIpAddress.htm">IP address</a>es as<b><a href="CppSigned.htm">signed</a></b><br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupAssign::CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetServer());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetServer()-&gt;GetParameters());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Nobody must be not logged in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetServer()-&gt;GetGroups()-&gt;CollectParticipants(<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>).empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Somebody must be logged in or participating<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !GetServer()-&gt;GetGroups()-&gt;CollectParticipants(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>).empty();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the duration of the state in seconds<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupAssign::Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::numeric::bounds&lt;<b><a href="CppInt.htm">int</a></b>&gt;::highest();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupAssign::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanGoToNext<a href="CppState.htm">State</a>())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetServer()-&gt;GetGroups()-&gt;MoveLoggedInToParticipating();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GoToNext<a href="CppState.htm">State</a>();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupAssign::Start()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetServer());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetServer()-&gt;GetGroups());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the state of the participants<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> ps <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetGroups()-&gt;CollectParticipants(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(ps.begin(),ps.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppState.htm">State</a>GroupAssign * <b><a href="CppConst.htm">const</a></b> state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>GroupAssign*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;FindParticipant(p)-&gt;Set<a href="CppState.htm">State</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>GroupAssign&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstategroupreassign.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstategroupreassign.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> SERVERSTATEGROUPREASSIGN_H<br/>
<a href="CppDefine.htm">#define</a> SERVERSTATEGROUPREASSIGN_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Server in the state when each Participant is as<b><a href="CppSigned.htm">signed</a></b> his/her group<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>GroupReAssign : <b><a href="CppPublic.htm">public</a></b> Server<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>GroupReAssign<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> by passing the Server it is a <a href="CppState.htm">State</a> of<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>GroupReAssign(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersGroupReAssign&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Request the server to assign the Participant to a Group<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AssignGroup(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Ask the server <b><a href="CppIf.htm">if</a></b> the Participant can be ass<b><a href="CppSigned.htm">signed</a></b> to a Group<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanAssignGroup(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppMemberFunction.htm">member function</a> is implemented like <b><a href="CppThis.htm">this</a></b> <b><a href="CppFor.htm">for</a></b> possible future<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/more complex state transitions<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let <b><a href="CppThis.htm">this</a></b> one Group split from 3 Participants<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/to 5 Participants<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> NotifyGroupGrowth(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let <b><a href="CppThis.htm">this</a></b> one Group split from 5 Participants<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/to two Groups of 3 Participants<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> NotifyGroupSplit(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Kill the Group<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> NotifyKillGroup(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a> dependent response to a <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the duration of the state in seconds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the worst and best group<br/>
&nbsp;&nbsp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *,<b><a href="CppConst.htm">const</a></b> Group *&gt; GetWorstAndBestGroup() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_worst_and_best_group; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> its specific Parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersGroupReAssign&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the ID's (=key) of the Participants that are<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/allowed to join a group (=value)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetJoiners(<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;&amp; joiners);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start or restart the state, calculate the joiners<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>GroupReAssign::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Server<a href="CppState.htm">State</a>GroupReAssign() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Server<a href="CppState.htm">State</a>GroupReAssign*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>GroupReAssign&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculate the average payoff of the active particpants<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> CalculateAveragePayoff() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Determine which groups are worst and best<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *,<b><a href="CppConst.htm">const</a></b> Group *&gt; CalculateWorstAndBestGroup() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The group its average payoff in the entire last IPGG cycle<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> key <a href="CppOperatorAssign.htm">=</a> group_index<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppStdPair.htm">std::pair</a> <a href="CppOperatorAssign.htm">=</a> value:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> <b><a href="CppDouble.htm">double</a></b>: average payoff<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Example: Group of 3, <b><a href="CppFor.htm">for</a></b> 2 IPGG cycles<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/#1: 1 4<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/#2: 2 5<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/#3: 3 6<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Average <a href="CppOperatorAssign.htm">=</a> (1 <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> 3 <a href="CppOperatorPlus.htm">+</a> 4 <a href="CppOperatorPlus.htm">+</a> 5 <a href="CppOperatorPlus.htm">+</a> 6) <a href="CppOperatorDivide.htm">/</a> 6 <a href="CppOperatorAssign.htm">=</a> 3.5<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *,<b><a href="CppDouble.htm">double</a></b>&gt; m_group_payoffs;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Server<a href="CppState.htm">State</a>ViewResultsAll its read-only ParametersViewResultsAll<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersGroupReAssign&gt; m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The worst and best group<br/>
&nbsp;&nbsp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *,<b><a href="CppConst.htm">const</a></b> Group *&gt; m_worst_and_best_group;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>GroupReAssign&amp; s);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SERVERSTATEGROUPREASSIGN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstategroupreassign.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstategroupreassign.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/bounds.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstateloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participantstategroupreassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoff.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>payoffs.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupReAssign::Server<a href="CppState.htm">State</a>GroupReAssign(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersGroupReAssign&gt;&amp; parameters)<br/>
&nbsp;&nbsp;: Server<a href="CppState.htm">State</a>(server,period,cycle),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_group_payoffs{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters(parameters),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_worst_and_best_group{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupReAssign::AssignGroup(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> GroupAssigner * <b><a href="CppConst.htm">const</a></b> assigner <a href="CppOperatorAssign.htm">=</a> participant-&gt;GetGroupAssigner();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(assigner);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppConst.htm">const</a></b> GroupAssignerPredetermined * <b><a href="CppConst.htm">const</a></b> p<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> GroupAssignerPredetermined*&gt;(assigner))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group_from<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetServer()-&gt;GetGroups()-&gt;FindMyGroup(participant);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Group*&gt; groups<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetServer()-&gt;GetGroups()-&gt;CollectGroups();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> group_to_index <a href="CppOperatorAssign.htm">=</a> p-&gt;GetGroup();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group_to <a href="CppOperatorAssign.htm">=</a> *<a href="CppStdFind_if.htm">std::find_if</a>(groups.begin(),groups.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[group_to_index](<b><a href="CppConst.htm">const</a></b> Group* group) { <b><a href="CppReturn.htm">return</a></b> group-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> group_to_index; } );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Transfer the Particippayoffsant<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FindGroup(group_to)-&gt;<a href="CppAdd.htm">Add</a>Participant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FindGroup(group_from)-&gt;RemoveParticipant(participant));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Log group assignment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_server-&gt;GetLog()-&gt;LogAssignGroup(group_to,participant);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"?Should not get here?");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupReAssign::CanAssignGroup(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sure, <a href="CppAny.htm">any</a> logged-in Participant can be as<b><a href="CppSigned.htm">signed</a></b> to a group<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetServer()-&gt;GetGroups()-&gt;GetGroupLoggedIn()-&gt;IsMember(participant);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupReAssign::CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppGetTime.htm">GetTime</a>Left() &lt; 0;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupReAssign::CalculateAveragePayoff() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_ipgg_cycles <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCycles(GetServer()-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;GetPeriod());<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> average_payoff <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_active_participants <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *&gt; groups_active <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetGroups()-&gt;CollectGroups(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(groups_active.begin(),groups_active.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,&amp;average_payoff,&amp;n_active_participants,n_ipgg_cycles](<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Sum the payoff<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; w <a href="CppOperatorAssign.htm">=</a> group-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;average_payoff,&amp;n_active_participants,n_ipgg_cycles](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;average_payoff <a href="CppOperatorPlusAssign.htm">+=</a> p-&gt;GetPayoffs()-&gt;GetLast(n_ipgg_cycles);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>n_active_participants;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Average the payoff<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_active_participants <a href="CppOperatorNotEqual.htm">!=</a> 0) average_payoff <a href="CppOperatorDivideAssign.htm">/=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_active_participants);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> average_payoff;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupReAssign::Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_parameters-&gt;GetDuration();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group *,<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Group *&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupReAssign::CalculateWorstAndBestGroup() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_group_payoffs.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 2);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> ps <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMinmax_element.htm">std::minmax_element</a>(m_group_payoffs.begin(),m_group_payoffs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *,<b><a href="CppDouble.htm">double</a></b>&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *,<b><a href="CppDouble.htm">double</a></b>&gt;&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rhs.second &gt; lhs.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *,<b><a href="CppConst.htm">const</a></b> Group *&gt; p<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_pair.htm">std::make_pair</a>((*ps.first).first,(*ps.second).first);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.first <a href="CppOperatorNotEqual.htm">!=</a> p.second);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Let <b><a href="CppThis.htm">this</a></b> one Group split from 3 Participants<br/>
<a href="CppComment.htm">///</a>to 5 Participants<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupReAssign::NotifyGroupGrowth(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;GetServer()-&gt;GetGroups()-&gt;GrowGroup(group);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Let <b><a href="CppThis.htm">this</a></b> one Group split from 5 Participants<br/>
<a href="CppComment.htm">///</a>to two Groups of 3 Participants<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupReAssign::NotifyGroupSplit(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;GetServer()-&gt;GetGroups()-&gt;SplitGroup(group);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Kill the Group<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupReAssign::NotifyKillGroup(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;GetServer()-&gt;GetGroups()-&gt;KillGroup(group);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupReAssign::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanGoToNext<a href="CppState.htm">State</a>())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Actually move the Participants<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> most_successful_group <a href="CppOperatorAssign.htm">=</a> m_worst_and_best_group.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the group size of the group with the highest payoffs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> group_size <a href="CppOperatorAssign.htm">=</a> most_successful_group-&gt;GetSize();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (group_size <a href="CppOperatorEqual.htm">==</a> 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "A group of size 3 grows to 5!\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NotifyGroupGrowth(most_successful_group);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (group_size <a href="CppOperatorEqual.htm">==</a> 5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "A group of size 5 splits!\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> least_successful_group <a href="CppOperatorAssign.htm">=</a> m_worst_and_best_group.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(least_successful_group);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(least_successful_group <a href="CppOperatorNotEqual.htm">!=</a> most_successful_group);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\note<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The operation below invalidates <b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> least_successful_group<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NotifyKillGroup(least_successful_group);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Again find the most successful group and let it split<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find the group with the highest payoff<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(most_successful_group-&gt;GetSize() <a href="CppOperatorEqual.htm">==</a> 5);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NotifyGroupSplit(most_successful_group);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GoToNext<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>GroupReAssign::Start()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> average_payoff <a href="CppOperatorAssign.htm">=</a> CalculateAveragePayoff();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Give all waiting Participants their payoff <b><a href="CppFor.htm">for</a></b> waiting<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Give the average payoff to the waiting participants<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *&gt; group_waiting <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetGroups()-&gt;CollectGroups(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(group_waiting.begin(),group_waiting.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,average_payoff](<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; w <a href="CppOperatorAssign.htm">=</a> group-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,average_payoff](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> my_payoff <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetServer()-&gt;GetParameters()-&gt;GetGroupAssign()-&gt;CalculateWaitingPayoff(average_payoff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetServer()-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;GetPeriod();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Payoff&gt; payoff(<b><a href="CppNew.htm">new</a></b> PayoffAssign(period,my_payoff));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;FindParticipant(p)-&gt;GetPayoffs()-&gt;<a href="CppAdd.htm">Add</a>(payoff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Participant<a href="CppState.htm">State</a>LoggedIn*&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;FindParticipant(p)-&gt;Get<a href="CppState.htm">State</a>()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Participant<a href="CppState.htm">State</a>LoggedIn * <b><a href="CppConst.htm">const</a></b> state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Participant<a href="CppState.htm">State</a>LoggedIn*&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;FindParticipant(p)-&gt;Get<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state-&gt;SetMessage(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("Your total earnings are: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(p-&gt;GetPayoffs()-&gt;GetTotal())).c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetServer()-&gt;GetLog()-&gt;LogAssignPayoff(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Update the group_payoffs <b><a href="CppFor.htm">for</a></b> determining the best and worst group<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_group_payoffs.clear();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_group_payoffs.empty());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_ipgg_cycles <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCycles(GetServer()-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;GetPeriod());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *&gt; groups<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetGroups()-&gt;CollectGroups(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(groups.begin(),groups.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[n_ipgg_cycles,<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> payoff <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sum the payoff<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; w <a href="CppOperatorAssign.htm">=</a> group-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[n_ipgg_cycles,&amp;payoff](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;payoff <a href="CppOperatorPlusAssign.htm">+=</a> p-&gt;GetPayoffs()-&gt;GetLast(n_ipgg_cycles);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Average the payoff<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;payoff <a href="CppOperatorDivideAssign.htm">/=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(w.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_group_payoffs.insert(<a href="CppStdMake_pair.htm">std::make_pair</a>(group,payoff));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;FindGroup(group)-&gt;<a href="CppAppend.htm">Append</a>AveragePayoff(payoff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_group_payoffs.size() <a href="CppOperatorEqual.htm">==</a> GetServer()-&gt;GetGroups()-&gt;CollectGroups(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>).size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate joiners<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_group_payoffs.empty() <a href="CppOperatorLogicalOr.htm">||</a> m_group_payoffs.size() <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_worst_and_best_group <a href="CppOperatorAssign.htm">=</a> CalculateWorstAndBestGroup();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_worst_and_best_group.first <a href="CppOperatorNotEqual.htm">!=</a> m_worst_and_best_group.second);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assign payoff <b><a href="CppFor.htm">for</a></b> surviving<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> group_size_most_successful <a href="CppOperatorAssign.htm">=</a> m_worst_and_best_group.second-&gt;GetSize();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *&gt; all_active_groups <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetGroups()-&gt;CollectGroups(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *&gt; survived_groups;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (group_size_most_successful <a href="CppOperatorEqual.htm">==</a> 5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy_if.htm">std::copy_if</a>(all_active_groups.begin(),all_active_groups.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(survived_groups),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> Group * group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> group <a href="CppOperatorNotEqual.htm">!=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_worst_and_best_group.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;survived_groups <a href="CppOperatorAssign.htm">=</a> all_active_groups;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reward survived_groups <b><a href="CppFor.htm">for</a></b> reaching the next round<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(survived_groups.begin(),survived_groups.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,average_payoff](<b><a href="CppConst.htm">const</a></b> Group * group)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; &gt; w <a href="CppOperatorAssign.htm">=</a> group-&gt;CollectParticipants();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,average_payoff](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> my_payoff <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetServer()-&gt;GetParameters()-&gt;GetGroupReAssign()-&gt;CalculateNextPeriodPayoff(average_payoff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetServer()-&gt;Get<a href="CppState.htm">State</a>s()-&gt;GetCurrent<a href="CppState.htm">State</a>()-&gt;GetPeriod();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Payoff&gt; payoff(<b><a href="CppNew.htm">new</a></b> PayoffReAssign(period,my_payoff));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;FindParticipant(p)-&gt;GetPayoffs()-&gt;<a href="CppAdd.htm">Add</a>(payoff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetServer()-&gt;GetLog()-&gt;LogReAssignPayoff(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the state of the participants<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> ps <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetGroups()-&gt;CollectParticipants(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(ps.begin(),ps.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppState.htm">State</a>GroupReAssign * <b><a href="CppConst.htm">const</a></b> state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>GroupReAssign*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;FindParticipant(p)-&gt;Set<a href="CppState.htm">State</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>GroupReAssign&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstatequiz.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstatequiz.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEQUIZ_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEQUIZ_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Server in the state when each Participant has to vote.<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>Quiz : <b><a href="CppPublic.htm">public</a></b> Server<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>Quiz<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> by passing the Server it is a <a href="CppState.htm">State</a> of<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>Quiz(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersQuiz&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppMemberFunction.htm">member function</a> is implemented like <b><a href="CppThis.htm">this</a></b> <b><a href="CppFor.htm">for</a></b> possible future<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/more complex state transitions<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain all Participant's their states relevant <b><a href="CppFor.htm">for</a></b> the current Server<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TODOipant<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a> dependent response to a <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the duration of the state in seconds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/ParticipantDialog notifies the Server of the<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Participant his/her vote<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> NotifyVote(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt;&amp; vote);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> its specific Parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersQuiz&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participant-dependent results<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TODOs(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; p) <b><a href="CppConst.htm">const</a></b>; <a href="CppComment.htm">//</a>TODO<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start or restart the state, <b><a href="CppFor.htm">for</a></b> example by resetting the <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>Quiz::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Server<a href="CppState.htm">State</a>Quiz() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Server<a href="CppState.htm">State</a>Quiz*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>Quiz&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Keeps track of Participants having voted<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;,<b><a href="CppBool.htm">bool</a></b>&gt; m_has_voted;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The quiz parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersQuiz&gt; m_parameters;<br/>
<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>Quiz&amp; s);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SERVERSTATEQUIZ_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstatequiz.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstatequiz.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Quiz::Server<a href="CppState.htm">State</a>Quiz(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersQuiz&gt;&amp; parameters)<br/>
&nbsp;&nbsp;: Server<a href="CppState.htm">State</a>(server,period,cycle),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_has_voted{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters(parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Server<a href="CppState.htm">State</a>Quiz goes to the next state <b><a href="CppIf.htm">if</a></b><br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> all Participants are logged in<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> all Participants have voted<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Quiz::CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;,<b><a href="CppBool.htm">bool</a></b>&gt; Pair;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> Pair&amp; p: m_has_voted)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.second <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If there is no '<b><a href="CppFalse.htm">false</a></b>' in m_has_voted::second<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdFind_if.htm">std::find_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_has_voted.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_has_voted.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLambda.htm">boost::lambda</a>::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant*,<b><a href="CppBool.htm">bool</a></b>&gt;::second,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLambda.htm">boost::lambda</a>::_1) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> m_has_voted.end();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the duration of the state in seconds<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Quiz::Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> m_parameters-&gt;GetDuration();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 123456;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>ParticipantDialog notifies the Server of the<br/>
<a href="CppComment.htm">///</a>Participant his/her vote<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Quiz::NotifyVote(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt;&amp; vote)<br/>
{<br/>
&nbsp;&nbsp;FindParticipant(participant)-&gt;Vote(vote);<br/>
<br/>
&nbsp;&nbsp;m_has_voted[participant] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Log the vote<br/>
&nbsp;&nbsp;m_server-&gt;GetLog()-&gt;LogVote(participant);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppWtBroadcastServer.htm">WtBroadcastServer</a>::GetInstance()-&gt;Post();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Quiz::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanGoToNext<a href="CppState.htm">State</a>()) GoToNext<a href="CppState.htm">State</a>();<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Quiz::SetParameters(<b><a href="CppConst.htm">const</a></b> ParametersQuiz* <b><a href="CppConst.htm">const</a></b> parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;m_parameters <a href="CppOperatorAssign.htm">=</a> parameters;<br/>
<br/>
&nbsp;&nbsp;Reset<a href="CppTime.htm">Time</a>Left();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppGetTime.htm">GetTime</a>Left() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Quiz::Start()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Keeps track of Participants having voted<br/>
&nbsp;&nbsp;m_has_voted.clear();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_has_voted.empty());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetServer()-&gt;GetGroups()-&gt;CollectParticipants(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_has_voted[p] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppState.htm">State</a>Quiz * <b><a href="CppConst.htm">const</a></b> state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>Quiz*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FindParticipant(p)-&gt;Set<a href="CppState.htm">State</a>(state);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!CanGoToNext<a href="CppState.htm">State</a>());<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>Quiz&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstates.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstates.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATES_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATES_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/weak_ptr.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Server<a href="CppState.htm">State</a>s hold all Server states<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>s<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server must be added as an argument to prevent recursive calls between<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a>s::Server<a href="CppState.htm">State</a>s and Server::Server<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Parameters&gt; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;LogFile * <b><a href="CppConst.htm">const</a></b> log);<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>s(<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>s&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>s&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>s&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current Server<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a> * GetCurrent<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current Server<a href="CppState.htm">State</a>, read-only<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a> * GetCurrent<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetCycles(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let the Sequence go to the next state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> GoToNext<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the Parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetParameters(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Parameters&gt; parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Server<a href="CppState.htm">State</a>s() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Server<a href="CppState.htm">State</a>s*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The current Server<a href="CppState.htm">State</a> index<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_i;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The LogFile<br/>
&nbsp;&nbsp;LogFile * <b><a href="CppConst.htm">const</a></b> m_log;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The map that maps the period (<a href="CppOperatorAssign.htm">=</a> key) to the number of IPGG cycles<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; m_n_cycles;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppChrono.htm">chrono</a>logical collection of Server<a href="CppState.htm">State</a> <a href="CppInstance.htm">instances</a><br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt; &gt; m_v;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstates.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstates.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersgroupreassign.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>parametersviewresultsgroup.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>s::Server<a href="CppState.htm">State</a>s(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server,<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Parameters&gt; parameters,<br/>
&nbsp;&nbsp;LogFile * <b><a href="CppConst.htm">const</a></b> log)<br/>
&nbsp;&nbsp;: m_i(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_log(log),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_n_cycles{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_log);<br/>
<br/>
&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>GroupAssign(server,0,0)));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_periods <a href="CppOperatorAssign.htm">=</a> parameters-&gt;GetGroupReAssign()-&gt;GetNumberOfPeriods();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> period <a href="CppOperatorAssign.htm">=</a> 0; period<a href="CppOperatorNotEqual.htm">!=</a>n_periods; <a href="CppOperatorIncrement.htm">++</a>period)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>(server,period,0,parameters-&gt;Get<a href="CppChat.htm">Chat</a>())));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt; voting(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>Voting(server,period,0,parameters-&gt;GetVoting()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(voting);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>ViewResultsVoting&gt; view_results_voting(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>ViewResultsVoting(server,period,0,parameters-&gt;GetViewResultsVoting()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(view_results_voting);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cycles <a href="CppOperatorAssign.htm">=</a> parameters-&gt;GetViewResultsGroup()-&gt;GetRepeatAssigner()-&gt;Assign();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Store the number of IPGG cycles<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_n_cycles[period] <a href="CppOperatorAssign.htm">=</a> n_cycles;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> cycle <a href="CppOperatorAssign.htm">=</a> 0; cycle<a href="CppOperatorNotEqual.htm">!=</a>n_cycles; <a href="CppOperatorIncrement.htm">++</a>cycle)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>ChooseAction(server,period,cycle,parameters-&gt;GetChooseAction())));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>AssignPayoff(server,period,cycle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;GetAssignPayoff(),view_results_voting)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>ViewResultsGroup(server,period,cycle,parameters-&gt;GetViewResultsGroup())));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>GroupReAssign(server,period,0,parameters-&gt;GetGroupReAssign())));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>Finished(server,n_periods,0)));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>s::GetCurrent<a href="CppState.htm">State</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_v[m_i].get();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a> * <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>s::GetCurrent<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_v[m_i].get();<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>s::GetCycles(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_n_cycles.find(period) <a href="CppOperatorNotEqual.htm">!=</a> m_n_cycles.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (*m_n_cycles.find(period)).second;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>s::GoToNext<a href="CppState.htm">State</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_i;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size()));<br/>
<br/>
&nbsp;&nbsp;m_v[m_i]-&gt;Start();<br/>
&nbsp;&nbsp;m_v[m_i]-&gt;Reset<a href="CppTime.htm">Time</a>Left();<br/>
<br/>
&nbsp;&nbsp;m_log-&gt;LogExperiment<a href="CppState.htm">State</a>Changed(GetCurrent<a href="CppState.htm">State</a>());<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>s::SetParameters(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Parameters&gt; parameters)<br/>
{<br/>
&nbsp;&nbsp;Server * server <a href="CppOperatorAssign.htm">=</a> m_server;<br/>
<br/>
&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>GroupAssign(server,0,0)));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_periods <a href="CppOperatorAssign.htm">=</a> parameters-&gt;GetGroupReAssign()-&gt;GetNumberOfPeriods();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> period <a href="CppOperatorAssign.htm">=</a> 0; period<a href="CppOperatorNotEqual.htm">!=</a>n_periods; <a href="CppOperatorIncrement.htm">++</a>period)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>(server,period,0,parameters-&gt;Get<a href="CppChat.htm">Chat</a>())));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt; voting(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>Voting(server,period,0,parameters-&gt;GetVoting()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(voting);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>ViewResultsVoting&gt; view_results_voting(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>ViewResultsVoting(server,period,0,parameters-&gt;GetViewResultsVoting()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(view_results_voting);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cycles <a href="CppOperatorAssign.htm">=</a> parameters-&gt;GetViewResultsGroup()-&gt;GetRepeatAssigner()-&gt;Assign();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> cycle <a href="CppOperatorAssign.htm">=</a> 0; cycle<a href="CppOperatorNotEqual.htm">!=</a>n_cycles; <a href="CppOperatorIncrement.htm">++</a>cycle)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>ChooseAction(server,period,cycle,parameters-&gt;GetChooseAction())));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>AssignPayoff(server,period,cycle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;GetAssignPayoff(),view_results_voting)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>ViewResultsGroup(server,period,cycle,parameters-&gt;GetViewResultsGroup())));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>GroupReAssign(server,period,0,parameters-&gt;GetGroupReAssign())));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_v.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Server<a href="CppState.htm">State</a>&gt;(<b><a href="CppNew.htm">new</a></b> Server<a href="CppState.htm">State</a>Finished(server,n_periods,0)));<br/>
&nbsp;&nbsp;m_i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstateviewresultsgroup.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstateviewresultsgroup.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEVIEWRESULTSGROUP_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEVIEWRESULTSGROUP_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Server in the state when each Participant can view<br/>
<a href="CppComment.htm">///</a>the results of his/her group.<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>ViewResultsGroup : <b><a href="CppPublic.htm">public</a></b> Server<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>ViewResultsGroup<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> by passing the Server it is a <a href="CppState.htm">State</a> of<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>ViewResultsGroup(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersViewResultsGroup&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppMemberFunction.htm">member function</a> is implemented like <b><a href="CppThis.htm">this</a></b> <b><a href="CppFor.htm">for</a></b> possible future<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/more complex state transitions<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a> dependent response to a <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the duration of the state in seconds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> its specific Parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersViewResultsGroup&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participant-dependent results<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; GetResults(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Participant * <b><a href="CppConst.htm">const</a></b> participant) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start or restart the state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>ViewResultsGroup::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Server<a href="CppState.htm">State</a>ViewResultsGroup() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Server<a href="CppState.htm">State</a>ViewResultsGroup*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>ViewResultsGroup&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ParametersViewResultsGroup<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersViewResultsGroup&gt; m_parameters;<br/>
<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>ViewResultsGroup&amp; s);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ServerSTATEVIEWRESULTSGROUP_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstateviewresultsgroup.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstateviewresultsgroup.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>chooseactionoption.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ViewResultsGroup::Server<a href="CppState.htm">State</a>ViewResultsGroup(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersViewResultsGroup&gt;&amp; parameters)<br/>
&nbsp;&nbsp;: Server<a href="CppState.htm">State</a>(server,period,cycle),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters(parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ViewResultsGroup::CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppGetTime.htm">GetTime</a>Left() &lt; 0;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the duration of the state in seconds<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ViewResultsGroup::Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_parameters-&gt;GetDuration();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ViewResultsGroup::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanGoToNext<a href="CppState.htm">State</a>()) GoToNext<a href="CppState.htm">State</a>();<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ViewResultsGroup::SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersViewResultsGroup&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;m_parameters <a href="CppOperatorAssign.htm">=</a> parameters;<br/>
<br/>
&nbsp;&nbsp;Reset<a href="CppTime.htm">Time</a>Left();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppGetTime.htm">GetTime</a>Left() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">///</a>Start or restart the state<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ViewResultsGroup::Start()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> ps <a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetGroups()-&gt;CollectParticipants(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(ps.begin(),ps.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppState.htm">State</a>ViewResultsGroup * <b><a href="CppConst.htm">const</a></b> state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>ViewResultsGroup*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;FindParticipant(p)-&gt;Set<a href="CppState.htm">State</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>ViewResultsGroup&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstateviewresultsvoting.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstateviewresultsvoting.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEVIEWRESULTSVOTING_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEVIEWRESULTSVOTING_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Server in the state when each Participant can view the<br/>
<a href="CppComment.htm">///</a>voting results of his/her group.<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>ViewResultsVoting : <b><a href="CppPublic.htm">public</a></b> Server<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>ViewResultsVoting<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> by passing the Server it is a <a href="CppState.htm">State</a> of<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>ViewResultsVoting(Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersViewResultsVoting&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppMemberFunction.htm">member function</a> is implemented like <b><a href="CppThis.htm">this</a></b> <b><a href="CppFor.htm">for</a></b> possible future<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/more complex state transitions<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the duration of the state in seconds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the VotingOptions voted <b><a href="CppFor.htm">for</a></b> by each Group<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If no consensus is reached, VotingOptions is null<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *,<b><a href="CppConst.htm">const</a></b> VotingOption *&gt;&amp; GetVotedOptions() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_voted_concensus; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a> dependent response to a <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> its specific Parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersViewResultsVoting&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participant-dependent results of the votes of his/her group<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Vote&gt; &gt; GetGroupResults(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start or restart the state, <b><a href="CppFor.htm">for</a></b> example by resetting the <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>ViewResultsVoting::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:&nbsp;&nbsp;<br/>
&nbsp;&nbsp;~Server<a href="CppState.htm">State</a>ViewResultsVoting() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Server<a href="CppState.htm">State</a>ViewResultsVoting*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>ViewResultsVoting&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersViewResultsVoting&gt; m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The consensus of the VotingOptions voted <b><a href="CppFor.htm">for</a></b> by each Group<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If no consensus is reached, VotingOptions is null<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppConst.htm">const</a></b> Group *,<b><a href="CppConst.htm">const</a></b> VotingOption *&gt; m_voted_concensus;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>ViewResultsVoting&amp; s);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ServerSTATEVIEWRESULTSVOTING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstateviewresultsvoting.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstateviewresultsvoting.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>group.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupparticipating.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>vote.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>votingoption.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ViewResultsVoting::Server<a href="CppState.htm">State</a>ViewResultsVoting(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersViewResultsVoting&gt;&amp; parameters)<br/>
&nbsp;&nbsp;: Server<a href="CppState.htm">State</a>(server,period,cycle),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters(parameters),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_voted_concensus{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.1<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ViewResultsVoting::CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppGetTime.htm">GetTime</a>Left() &lt; 0;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Vote&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ViewResultsVoting::GetGroupResults(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetServer());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetServer()-&gt;GetParameters());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetServer()-&gt;GetParameters()-&gt;GetVoting());<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Vote&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetGroups()-&gt;FindMyGroup(participant);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(group);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;group-&gt;CollectParticipants())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!participant-&gt;GetVotes().empty());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Vote&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Vote(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;participant,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;participant-&gt;GetVotes().back().get())));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the duration of the state in seconds<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ViewResultsVoting::Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_parameters-&gt;GetDuration();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ViewResultsVoting::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanGoToNext<a href="CppState.htm">State</a>()) GoToNext<a href="CppState.htm">State</a>();<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ViewResultsVoting::SetParameters(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersViewResultsVoting&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;m_parameters <a href="CppOperatorAssign.htm">=</a> parameters;<br/>
&nbsp;&nbsp;Reset<a href="CppTime.htm">Time</a>Left();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppGetTime.htm">GetTime</a>Left() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">///</a>Start or restart the state<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>ViewResultsVoting::Start()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Setting the group its vote<br/>
&nbsp;&nbsp;m_voted_concensus.clear();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> Group * <b><a href="CppConst.htm">const</a></b> group:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetServer()-&gt;GetGroups()-&gt;CollectGroups(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only participating groups will have voted<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> GroupParticipating*&gt;(group));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(group-&gt;CollectParticipants().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(group-&gt;GetId());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!group-&gt;CollectParticipants().empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume a group is never empty");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Tally all votes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b>&gt; vote_tally;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group-&gt;CollectParticipants())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!participant-&gt;GetVotes().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> participant-&gt;GetVotes().back()-&gt;GetDescription();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vote_tally.find(s) <a href="CppOperatorEqual.htm">==</a> vote_tally.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vote_tally[s] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>vote_tally[s];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the highest tally value (that is: the second <b><a href="CppInt.htm">int</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator max<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax_element.htm">std::max_element</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vote_tally.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vote_tally.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLambda.htm">boost::lambda</a>::bind(&amp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b>&gt;::second, <a href="CppBoostLambda.htm">boost::lambda</a>::_2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt; <a href="CppBoostLambda.htm">boost::lambda</a>::bind(&amp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b>&gt;::second, <a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max_count<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdCount_if.htm">std::count_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vote_tally.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vote_tally.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppBoostLambda.htm">boost::lambda</a>::bind(&amp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b>&gt;::second, <a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> max-&gt;second);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (max_count <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group-&gt;CollectParticipants())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id <a href="CppOperatorAssign.htm">=</a> participant-&gt;GetId();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> participant-&gt;GetVotes().back()-&gt;GetDescription();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ID: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> id <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " vote: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "max-&gt;first: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> max-&gt;first <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "max-&gt;second: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> max-&gt;second <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "max_count: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> max_count <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(max_count <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (max_count <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Unique!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(max-&gt;first &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;GetServer()-&gt;GetParameters()-&gt;GetVoting()-&gt;GetOptions().size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt; &gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetServer()-&gt;GetParameters()-&gt;GetVoting()-&gt;GetOptions();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFind_if.htm">std::find_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;VotingOption::GetDescription,<a href="CppBoostLambda.htm">boost::lambda</a>::_1) <a href="CppOperatorEqual.htm">==</a> max-&gt;first)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_voted_concensus[group]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (*<a href="CppStdFind_if.htm">std::find_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;VotingOption::GetDescription,<a href="CppBoostLambda.htm">boost::lambda</a>::_1) <a href="CppOperatorEqual.htm">==</a> max-&gt;first)).get();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No consensus in voting<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_voted_concensus[group] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetServer()-&gt;GetGroups()-&gt;CollectParticipants(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppState.htm">State</a>ViewResultsVoting * <b><a href="CppConst.htm">const</a></b> state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>ViewResultsVoting*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FindParticipant(p)-&gt;Set<a href="CppState.htm">State</a>(state);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>ViewResultsVoting&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstatevoting.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstatevoting.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEVOTING_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEVOTING_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Server in the state when each Participant has to vote.<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>Voting : <b><a href="CppPublic.htm">public</a></b> Server<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>Voting<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> by passing the Server it is a <a href="CppState.htm">State</a> of<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>Voting(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersVoting&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppMemberFunction.htm">member function</a> is implemented like <b><a href="CppThis.htm">this</a></b> <b><a href="CppFor.htm">for</a></b> possible future<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/more complex state transitions<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a> dependent response to a <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the duration of the state in seconds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/ParticipantDialog notifies the Server of the<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Participant his/her vote<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> NotifyVote(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; participant,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt;&amp; vote);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> its specific Parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersVoting&gt;&amp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Participant-dependent results<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TODOs(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt;&amp; p) <b><a href="CppConst.htm">const</a></b>; <a href="CppComment.htm">//</a>TODO<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start or restart the state, <b><a href="CppFor.htm">for</a></b> example by resetting the <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>Voting::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Server<a href="CppState.htm">State</a>Voting() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Server<a href="CppState.htm">State</a>Voting*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>Voting&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The voting parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersVoting&gt; m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Keeps track of Participants having voted<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;,<b><a href="CppBool.htm">bool</a></b>&gt; m_has_voted;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>Voting&amp; s);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ServerSTATEVOTING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstatevoting.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstatevoting.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
 <br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Voting::Server<a href="CppState.htm">State</a>Voting(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersVoting&gt;&amp; parameters)<br/>
&nbsp;&nbsp;: Server<a href="CppState.htm">State</a>(server,period,cycle),<br/>
&nbsp;&nbsp;m_parameters(parameters),<br/>
&nbsp;&nbsp;m_has_voted{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Server<a href="CppState.htm">State</a>Voting goes to the next state <b><a href="CppIf.htm">if</a></b><br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> all Participants are logged in<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> all Participants have voted<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Voting::CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;,<b><a href="CppBool.htm">bool</a></b>&gt; Pair;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> Pair&amp; p: m_has_voted)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.second <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the duration of the state in seconds<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Voting::Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_parameters-&gt;GetDuration();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>ParticipantDialog notifies the Server of the<br/>
<a href="CppComment.htm">///</a>Participant his/her vote<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Voting::NotifyVote(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp;&nbsp;&nbsp;participant,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt;&amp; vote)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(vote);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(participant);<br/>
&nbsp;&nbsp;FindParticipant(participant)-&gt;Vote(vote);<br/>
<br/>
&nbsp;&nbsp;m_has_voted[participant] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Log the vote<br/>
&nbsp;&nbsp;m_server-&gt;GetLog()-&gt;LogVote(participant);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppWtBroadcastServer.htm">WtBroadcastServer</a>::GetInstance()-&gt;Post();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Voting::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanGoToNext<a href="CppState.htm">State</a>()) GoToNext<a href="CppState.htm">State</a>();<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Voting::SetParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ParametersVoting&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;m_parameters <a href="CppOperatorAssign.htm">=</a> parameters;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_state_<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> parameters-&gt;<a href="CppGetTime.htm">GetTime</a>();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_wait <a href="CppOperatorAssign.htm">=</a> parameters-&gt;GetWait();<br/>
<br/>
&nbsp;&nbsp;Reset<a href="CppTime.htm">Time</a>Left();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppGetTime.htm">GetTime</a>Left() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Voting::Start()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Keeps track of Participants having voted<br/>
&nbsp;&nbsp;m_has_voted.clear();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_has_voted.empty());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; p:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetServer()-&gt;GetGroups()-&gt;CollectParticipants(<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppFalse.htm">false</a></b>,<b><a href="CppTrue.htm">true</a></b>,<b><a href="CppFalse.htm">false</a></b>))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_has_voted[p] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppState.htm">State</a>Voting * <b><a href="CppConst.htm">const</a></b> state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>Voting*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FindParticipant(p)-&gt;Set<a href="CppState.htm">State</a>(state);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!CanGoToNext<a href="CppState.htm">State</a>());<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>Voting&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstatewaiting.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstatewaiting.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEWAITING_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>SERVERSTATEWAITING_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>serverstate.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The Server is waiting <b><a href="CppFor.htm">for</a></b> an Administrator to start the experiment<br/>
<a href="CppComment.htm">///</a>by clicking a button or uploading Parameters.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>This is the Server's<br/>
<a href="CppComment.htm">///</a>initial state.<br/>
<b><a href="CppStruct.htm">struct</a></b> Server<a href="CppState.htm">State</a>Waiting : <b><a href="CppPublic.htm">public</a></b> Server<a href="CppState.htm">State</a>, <a href="CppState.htm">State</a>Waiting<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> by passing the Server it is a <a href="CppState.htm">State</a> of<br/>
&nbsp;&nbsp;Server<a href="CppState.htm">State</a>Waiting(Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppMemberFunction.htm">member function</a> is implemented like <b><a href="CppThis.htm">this</a></b> <b><a href="CppFor.htm">for</a></b> possible future<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/more complex state transitions<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Server<a href="CppState.htm">State</a> dependent response to a <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the duration of the state in seconds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> its specific Parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> ParametersWaiting* <b><a href="CppConst.htm">const</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start or restart the state, <b><a href="CppFor.htm">for</a></b> example by resetting the <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> Server<a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>Waiting::ToStr(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Server<a href="CppState.htm">State</a>Waiting() {}<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Server<a href="CppState.htm">State</a>Waiting*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>Waiting&amp; s);<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>Waiting&amp; s);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ServerSTATEWAITING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstserverstatewaiting.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstserverstatewaiting.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/bounds.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Waiting::Server<a href="CppState.htm">State</a>Waiting(<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> server, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> period, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cycle)<br/>
&nbsp;&nbsp;: Server<a href="CppState.htm">State</a>(server,period,cycle)<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> state can go to the next state.<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Waiting::CanGoToNext<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the duration of the state in seconds<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Waiting::Get<a href="CppState.htm">State</a>Duration() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::numeric::bounds&lt;<b><a href="CppInt.htm">int</a></b>&gt;::highest();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Server<a href="CppState.htm">State</a>Waiting::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (CanGoToNext<a href="CppState.htm">State</a>()) GoToNext<a href="CppState.htm">State</a>();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do NOT go to the next state by a <a href="CppTime.htm">time</a>r, but by uploading Parameters<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a>Waiting&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.m_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/state_" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtststate.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtststate.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>STATE_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>STATE_H<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a><a href="CppState.htm">State</a> is a state and serves as a <a href="CppBaseClass.htm">base class</a> <b><a href="CppFor.htm">for</a></b> all states.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a><a href="CppState.htm">State</a> is used by Participant<a href="CppState.htm">State</a>, ParticipantDialog<a href="CppState.htm">State</a>,<br/>
<a href="CppComment.htm">///</a>Server<a href="CppState.htm">State</a> and Parameters.<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent the <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a>*);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Assigning-payoff <a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>AssignPayoff : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "assign_payoff"; }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>AssignPayoff() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a>AssignPayoff*);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppChat.htm">Chat</a> <a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "<a href="CppChat.htm">chat</a>"; }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>*);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Choose-action <a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>ChooseAction : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "choose_action"; }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>ChooseAction() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a>ChooseAction*);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Experiment/Participant-is-finished <a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>Finished : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "finished"; }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>Finished() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a>Finished*);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Group assignment <a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>GroupAssign : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "group_assign"; }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>GroupAssign() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a>GroupAssign*);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Group re-assignment <a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>GroupReAssign : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "group_reassign"; }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>GroupReAssign() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a>GroupReAssign*);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Participant-is-logged-in <a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>LoggedIn : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "logged_in"; }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>LoggedIn() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a>LoggedIn*);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Participant-is-not-logged-in <a href="CppState.htm">State</a><br/>
<a href="CppComment.htm">///</a>Server does not have <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a>.<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>NotLoggedIn : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "not_logged_in"; }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>NotLoggedIn() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a>NotLoggedIn*);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Participant is doing a quiz<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>Quiz : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "quiz"; }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>Quiz() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a>Quiz*);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>View-the-results-within-own-group <a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>ViewResultsGroup : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "view_results_group"; }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>ViewResultsGroup() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a>ViewResultsGroup*);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>View-the-results-of-voting <a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>ViewResultsVoting : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "view_results_voting"; }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>ViewResultsVoting() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a>ViewResultsVoting*);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Voting <a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>Voting : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "voting"; }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>Voting() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a>Voting*);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Server-is-waiting-<b><a href="CppFor.htm">for</a></b>-Parameters <a href="CppState.htm">State</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>Waiting : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Represent <b><a href="CppThis.htm">this</a></b> <a href="CppState.htm">State</a> as a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "waiting"; }<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppState.htm">State</a>Waiting() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppState.htm">State</a>Waiting*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> STATE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtststate.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtststate.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtsttest.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtsttest.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>TEST_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>TEST_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>Class to test the non-<a href="CppWt.htm">Wt</a> <b><a href="CppClass.htm">classes</a></b><br/>
<b><a href="CppStruct.htm">struct</a></b> Test<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief ServerTest contructor performs all tests<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This contructor is only called once<br/>
&nbsp;&nbsp;Test(Server * <b><a href="CppConst.htm">const</a></b> server);<br/>
&nbsp;&nbsp;Test(<b><a href="CppConst.htm">const</a></b> Test&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Test&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Test&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Test() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Test*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Tests the parsing of the parameter files<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestParameterParsing();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestParameters();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestParticipant();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test<a href="CppState.htm">State</a>s test <a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Test<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create parameter file 1<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateParameterFile1();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create parameter file <b><a href="CppFor.htm">for</a></b> TestServer1_2<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateParameterFileForTestServer1_2();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create parameter file 2<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateParameterFile2();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create parameter file 3<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateParameterFile3();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create parameter file 4<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateParameterFile4();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create parameter file 5<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateParameterFile5();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create parameter file 6<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateParameterFile6();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create parameter file 7<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateParameterFile7();<br/>
<br/>
&nbsp;&nbsp;Server * <b><a href="CppConst.htm">const</a></b> m_server;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TEST_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtsttest.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtsttest.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>test.h"<br/>
<br/>
<a href="CppComment.htm">///</a>\brief Test contructor performs all tests<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>This contructor is only called once<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Test::Test(Server * <b><a href="CppConst.htm">const</a></b> server)<br/>
&nbsp;&nbsp;: m_server(server)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_server);<br/>
&nbsp;&nbsp;Test<a href="CppState.htm">State</a>();<br/>
&nbsp;&nbsp;TestParameterParsing();<br/>
<br/>
&nbsp;&nbsp;TestParticipant();<br/>
&nbsp;&nbsp;TestParameters();<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Call TestServer1_1 twice, <b><a href="CppFor.htm">for</a></b> two different number of periods<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TestServer1_1(1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TestServer1_1(2);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Call TestServer1_2 twice, <b><a href="CppFor.htm">for</a></b> two different number of periods<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TestServer1_2(1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TestServer1_2(2);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TestServer4();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TestServer9();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtsttestparameterparsing.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtsttestparameterparsing.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<br/>
 <br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a><a href="CppChat.htm">chat</a><a href="CppShape.htm">shape</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>test.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Test::CreateParameterFile1()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Default parameters file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> participants&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>A participant has the following parameters");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> Initial group as<b><a href="CppSigned.htm">signed</a></b> to. Possible values:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a positive value: the ID will as<b><a href="CppSigned.htm">signed</a></b> to group x");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppChat.htm">Chat</a> tag");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a non-asterisk <a href="CppChar.htm">character</a>: that <a href="CppChar.htm">character</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppIpAddress.htm">IP address</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a valid <a href="CppIpAddress.htm">IP address</a>: <b><a href="CppThis.htm">this</a></b> <a href="CppIpAddress.htm">IP address</a> is as<b><a href="CppSigned.htm">signed</a></b> to <b><a href="CppThis.htm">this</a></b> ID");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> *: <a href="CppAny.htm">any</a> <a href="CppIpAddress.htm">IP address</a> is allowed");<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>0<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>1<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>2<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>3<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>4<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>5<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the group assignment phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_as<b><a href="CppSigned.htm">signed</a></b>=U bent ingedeeld in groep #");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_unassigned=U bent nog niet ingedeeld");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The <a href="CppFunction.htm">function</a> that determines how much payoff the waiting participant is rewarded");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> simply waiting, where p is the average payoff gathered by the active");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>participants in the last period.");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_assign_waiting_payoff_function=0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the <a href="CppChat.htm">chat</a> phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the <a href="CppChat.htm">chat</a> state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("chat_duration=60");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the (majority) voting state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("voting_duration=60");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>What can be voted <b><a href="CppFor.htm">for</a></b>?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Must be in the form of [description],[chance],[cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>For example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Lenient supervisor,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Rigorous supervisor,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=Mijn vriendin,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=Mijn moeder,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=Mijn oma,0.0,0.0");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to vote?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after vote_duration a random vote is chosen");<br/>
&nbsp;&nbsp;v.push_back("voting_wait=n");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting results phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the majority voting results state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_voting_duration=30");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the choose action screen (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>choose_action_options are the option of the actions to be chosen");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>and have the form [description],[benefit to group],[individual cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I want to contribute,2.0,1.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I <b><a href="CppDo.htm">do</a></b> not want to contribute,0.0,0.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=Ik zet mijn beste beentje voor,2.0,1.0,U heeft ervoor gekozen om bij te dragen");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=De ander kan de tering krijgen,0.0,0.0,U heeft ervoor gekozen om niet bij te dragen");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to choos an action?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after choose_action_duration a random action is chosen");<br/>
&nbsp;&nbsp;v.push_back("choose_action_wait=n");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the choose action state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppAny.htm">any</a> non-zero positive value: <b><a href="CppThis.htm">this</a></b> <a href="CppTime.htm">time</a> in seconsd");<br/>
&nbsp;&nbsp;v.push_back("choose_action_duration=30");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the individual payoff (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The message displayed to the participant");<br/>
&nbsp;&nbsp;v.push_back("assign_payoff_message=Ik ken nu de payoffs toe");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view in-group results screen (period cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the choose action state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_duration=30");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How many IPGG cycles are there?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> x&nbsp;&nbsp;&nbsp;&nbsp; : x cycles, <b><a href="CppFor.htm">for</a></b> example '1'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> ?w&nbsp;&nbsp;&nbsp;&nbsp;: after every action there is a chance of w <b><a href="CppFor.htm">for</a></b> another cycle,");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppFor.htm">for</a></b> example '0.8'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> [a,b&gt; : there are from a to (not including) b cycles, following a ");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uniform distribution, <b><a href="CppFor.htm">for</a></b> example '[1,4&gt;'");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_cycles=7");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view all-group results screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the choose action state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_duration=30");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much experimental cycles/periods are played?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_number_of_periods=4");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much payoff is an active participant given <b><a href="CppFor.htm">for</a></b> reaching the next period?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> his/her total accumulated payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_next_period_payoff_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much payoff is an active participant given <b><a href="CppFor.htm">for</a></b> reaching the next period?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> his/her total accumulated payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_next_period_payoff_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the finished experimenty screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The goodbye message on the finished screen");<br/>
&nbsp;&nbsp;v.push_back("finished_message=Klaar!");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much money does the participant earn from his/her payoff?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("finished_earnings_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.001 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> file("parameters1.txt");<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(file,"\n"));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Test::CreateParameterFile2()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Default parameters file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> participants&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>A participant has the following parameters");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> Initial group as<b><a href="CppSigned.htm">signed</a></b> to. Possible values:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a positive value: the ID will as<b><a href="CppSigned.htm">signed</a></b> to group x");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppChat.htm">Chat</a> tag");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a non-asterisk <a href="CppChar.htm">character</a>: that <a href="CppChar.htm">character</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppIpAddress.htm">IP address</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a valid <a href="CppIpAddress.htm">IP address</a>: <b><a href="CppThis.htm">this</a></b> <a href="CppIpAddress.htm">IP address</a> is as<b><a href="CppSigned.htm">signed</a></b> to <b><a href="CppThis.htm">this</a></b> ID");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> *: <a href="CppAny.htm">any</a> <a href="CppIpAddress.htm">IP address</a> is allowed");<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>0<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>1<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>2<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>3<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>4<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>5<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the group assignment phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_as<b><a href="CppSigned.htm">signed</a></b>=You have been as<b><a href="CppSigned.htm">signed</a></b> to group #");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_unassigned=You have not been as<b><a href="CppSigned.htm">signed</a></b> to a group yet");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The <a href="CppFunction.htm">function</a> that determines how much payoff the waiting participant is rewarded");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> simply waiting, where p is the average payoff gathered by the active");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>participants in the last period.");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_assign_waiting_payoff_function=0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the <a href="CppChat.htm">chat</a> phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the <a href="CppChat.htm">chat</a> state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("chat_duration=120");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the (majority) voting state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("voting_duration=30");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>What can be voted <b><a href="CppFor.htm">for</a></b>?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Must be in the form of [description],[chance],[cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>For example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Lenient supervisor,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Rigorous supervisor,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=rigorous supervisor,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=lenient supervisor,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=no supervisor,0.0,0.0");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to vote?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after vote_duration a random vote is chosen");<br/>
&nbsp;&nbsp;v.push_back("voting_wait=y");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting results phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the majority voting results state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_voting_duration=60");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the choose action screen (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>choose_action_options are the option of the actions to be chosen");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>and have the form [description],[benefit to group],[individual cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I want to contribute,2.0,1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I <b><a href="CppDo.htm">do</a></b> not want to contribute,0.0,0.0");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=Contribute,2.0,1.0,You have chosen to contribute");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=Do not contribute,0.0,0.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to choose an action?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after choose_action_duration a random action is chosen");<br/>
&nbsp;&nbsp;v.push_back("choose_action_wait=y");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the choose action state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppAny.htm">any</a> non-zero positive value: <b><a href="CppThis.htm">this</a></b> <a href="CppTime.htm">time</a> in seconsd");<br/>
&nbsp;&nbsp;v.push_back("choose_action_duration=60");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the individual payoff (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The message displayed to the participant");<br/>
&nbsp;&nbsp;v.push_back("assign_payoff_message=Assigning payoffs");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view in-group results screen (period cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the choose action state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_duration=60");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How many IPGG cycles are there?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> x&nbsp;&nbsp;&nbsp;&nbsp; : x cycles, <b><a href="CppFor.htm">for</a></b> example '1'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> ?w&nbsp;&nbsp;&nbsp;&nbsp;: after every action there is a chance of w <b><a href="CppFor.htm">for</a></b> another cycle,");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppFor.htm">for</a></b> example '0.8'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> [a,b&gt; : there are from a to (not including) b cycles, following a ");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uniform distribution, <b><a href="CppFor.htm">for</a></b> example '[1,4&gt;'");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_cycles=3");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view all-group results screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the choose action state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_duration=90");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much experimental cycles/periods are played?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_number_of_periods=3");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much payoff is an active participant given <b><a href="CppFor.htm">for</a></b> reaching the next period?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> his/her total accumulated payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_next_period_payoff_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the finished experimenty screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The goodbye message on the finished screen");<br/>
&nbsp;&nbsp;v.push_back("finished_message=The experiment has finished");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much money does the participant earn from his/her payoff?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("finished_earnings_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> file("parameters2.txt");<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(file,"\n"));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Test::CreateParameterFile3()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Default parameters file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> participants&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>A participant has the following parameters");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> Initial group as<b><a href="CppSigned.htm">signed</a></b> to. Possible values:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a positive value: the ID will as<b><a href="CppSigned.htm">signed</a></b> to group x");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppChat.htm">Chat</a> tag");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a non-asterisk <a href="CppChar.htm">character</a>: that <a href="CppChar.htm">character</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppIpAddress.htm">IP address</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a valid <a href="CppIpAddress.htm">IP address</a>: <b><a href="CppThis.htm">this</a></b> <a href="CppIpAddress.htm">IP address</a> is as<b><a href="CppSigned.htm">signed</a></b> to <b><a href="CppThis.htm">this</a></b> ID");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> *: <a href="CppAny.htm">any</a> <a href="CppIpAddress.htm">IP address</a> is allowed");<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>0<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>1<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>2<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>3<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>4<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>5<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the group assignment phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_as<b><a href="CppSigned.htm">signed</a></b>=You have been as<b><a href="CppSigned.htm">signed</a></b> to group #");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_unassigned=You have not been as<b><a href="CppSigned.htm">signed</a></b> to a group yet");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The <a href="CppFunction.htm">function</a> that determines how much payoff the waiting participant is rewarded");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> simply waiting, where p is the average payoff gathered by the active");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>participants in the last period.");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_assign_waiting_payoff_function=0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the <a href="CppChat.htm">chat</a> phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the <a href="CppChat.htm">chat</a> state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("chat_duration=120");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the (majority) voting state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("voting_duration=30");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>What can be voted <b><a href="CppFor.htm">for</a></b>?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Must be in the form of [description],[chance],[cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>For example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Lenient supervisor,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Rigorous supervisor,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=rigorous supervisor,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=lenient supervisor,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=no supervisor,0.0,0.0");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to vote?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after vote_duration a random vote is chosen");<br/>
&nbsp;&nbsp;v.push_back("voting_wait=y");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting results phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the majority voting results state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_voting_duration=60");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the choose action screen (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>choose_action_options are the option of the actions to be chosen");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>and have the form [description],[benefit to group],[individual cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I want to contribute,2.0,1.0,You have chosen to contribute");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I <b><a href="CppDo.htm">do</a></b> not want to contribute,0.0,0.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=Contribute,2.0,1.0,You have chosen to contribute");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=Do not contribute,0.0,0.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to choose an action?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after choose_action_duration a random action is chosen");<br/>
&nbsp;&nbsp;v.push_back("choose_action_wait=y");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the choose action state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppAny.htm">any</a> non-zero positive value: <b><a href="CppThis.htm">this</a></b> <a href="CppTime.htm">time</a> in seconsd");<br/>
&nbsp;&nbsp;v.push_back("choose_action_duration=60");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the individual payoff (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The message displayed to the participant");<br/>
&nbsp;&nbsp;v.push_back("assign_payoff_message=Assigning payoffs");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view in-group results screen (period cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the view results group state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_duration=60");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How many IPGG cycles are there?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> x&nbsp;&nbsp;&nbsp;&nbsp; : x cycles, <b><a href="CppFor.htm">for</a></b> example '1'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> ?w&nbsp;&nbsp;&nbsp;&nbsp;: after every action there is a chance of w <b><a href="CppFor.htm">for</a></b> another cycle,");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppFor.htm">for</a></b> example '0.8'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> [a,b&gt; : there are from a to (not including) b cycles, following a ");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uniform distribution, <b><a href="CppFor.htm">for</a></b> example '[1,4&gt;'");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_cycles=[1,4&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view all-group results screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the view results group take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_duration=90");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much experimental cycles/periods are played?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_number_of_periods=3");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much payoff is an active participant given <b><a href="CppFor.htm">for</a></b> reaching the next period?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> his/her total accumulated payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_next_period_payoff_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the finished experimenty screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The goodbye message on the finished screen");<br/>
&nbsp;&nbsp;v.push_back("finished_message=The experiment has finished");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much money does the participant earn from his/her payoff?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("finished_earnings_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> file("parameters3.txt");<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(file,"\n"));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Test::CreateParameterFile4()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Default parameters file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> participants&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>A participant has the following parameters");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> Initial group as<b><a href="CppSigned.htm">signed</a></b> to. Possible values:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a positive value: the ID will as<b><a href="CppSigned.htm">signed</a></b> to group x");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppChat.htm">Chat</a> tag");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a non-asterisk <a href="CppChar.htm">character</a>: that <a href="CppChar.htm">character</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppIpAddress.htm">IP address</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a valid <a href="CppIpAddress.htm">IP address</a>: <b><a href="CppThis.htm">this</a></b> <a href="CppIpAddress.htm">IP address</a> is as<b><a href="CppSigned.htm">signed</a></b> to <b><a href="CppThis.htm">this</a></b> ID");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> *: <a href="CppAny.htm">any</a> <a href="CppIpAddress.htm">IP address</a> is allowed");<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>0<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>1<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>2<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>3<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>4<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>5<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the group assignment phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_as<b><a href="CppSigned.htm">signed</a></b>=You have been as<b><a href="CppSigned.htm">signed</a></b> to group #");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_unassigned=You have not been as<b><a href="CppSigned.htm">signed</a></b> to a group yet");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The <a href="CppFunction.htm">function</a> that determines how much payoff the waiting participant is rewarded");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> simply waiting, where p is the average payoff gathered by the active");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>participants in the last period.");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_assign_waiting_payoff_function=0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the <a href="CppChat.htm">chat</a> phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the <a href="CppChat.htm">chat</a> state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("chat_duration=120");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the (majority) voting state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("voting_duration=30");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>What can be voted <b><a href="CppFor.htm">for</a></b>?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Must be in the form of [description],[chance],[cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>For example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Lenient supervisor,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Rigorous supervisor,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=rigorous supervisor,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=lenient supervisor,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=no supervisor,0.0,0.0");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to vote?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after vote_duration a random vote is chosen");<br/>
&nbsp;&nbsp;v.push_back("voting_wait=y");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting results phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the majority voting results state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_voting_duration=60");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the choose action screen (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>choose_action_options are the option of the actions to be chosen");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>and have the form [description],[benefit to group],[individual cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I want to contribute,2.0,1.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I <b><a href="CppDo.htm">do</a></b> not want to contribute,0.0,0.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=Contribute,2.0,1.0,You have chosen to contribute");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=Do not contribute,0.0,0.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to choose an action?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after choose_action_duration a random action is chosen");<br/>
&nbsp;&nbsp;v.push_back("choose_action_wait=y");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the choose action state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppAny.htm">any</a> non-zero positive value: <b><a href="CppThis.htm">this</a></b> <a href="CppTime.htm">time</a> in seconsd");<br/>
&nbsp;&nbsp;v.push_back("choose_action_duration=60");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the individual payoff (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The message displayed to the participant");<br/>
&nbsp;&nbsp;v.push_back("assign_payoff_message=Assigning payoffs");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view in-group results screen (period cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the view results group state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_duration=60");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How many IPGG cycles are there?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> x&nbsp;&nbsp;&nbsp;&nbsp; : x cycles, <b><a href="CppFor.htm">for</a></b> example '1'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> ?w&nbsp;&nbsp;&nbsp;&nbsp;: after every action there is a chance of w <b><a href="CppFor.htm">for</a></b> another cycle,");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppFor.htm">for</a></b> example '0.8'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> [a,b&gt; : there are from a to (not including) b cycles, following a ");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uniform distribution, <b><a href="CppFor.htm">for</a></b> example '[1,4&gt;'");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_cycles=?0.5");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view all-group results screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the view results group take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_duration=90");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much experimental cycles/periods are played?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_number_of_periods=3");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much payoff is an active participant given <b><a href="CppFor.htm">for</a></b> reaching the next period?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> his/her total accumulated payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_next_period_payoff_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the finished experimenty screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The goodbye message on the finished screen");<br/>
&nbsp;&nbsp;v.push_back("finished_message=The experiment has finished");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much money does the participant earn from his/her payoff?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("finished_earnings_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> file("parameters4.txt");<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(file,"\n"));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Test::CreateParameterFile5()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Default parameters file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> participants&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>A participant has the following parameters");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> Initial group as<b><a href="CppSigned.htm">signed</a></b> to. Possible values:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a positive value: the ID will as<b><a href="CppSigned.htm">signed</a></b> to group x");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppChat.htm">Chat</a> tag");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a non-asterisk <a href="CppChar.htm">character</a>: that <a href="CppChar.htm">character</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppIpAddress.htm">IP address</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a valid <a href="CppIpAddress.htm">IP address</a>: <b><a href="CppThis.htm">this</a></b> <a href="CppIpAddress.htm">IP address</a> is as<b><a href="CppSigned.htm">signed</a></b> to <b><a href="CppThis.htm">this</a></b> ID");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> *: <a href="CppAny.htm">any</a> <a href="CppIpAddress.htm">IP address</a> is allowed");<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>0<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>1<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>2<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>3<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>4<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>5<br/>
&nbsp;&nbsp;v.push_back("participant=?,*"); <a href="CppComment.htm">//</a>6<br/>
&nbsp;&nbsp;v.push_back("participant=?,*"); <a href="CppComment.htm">//</a>7<br/>
&nbsp;&nbsp;v.push_back("participant=?,*"); <a href="CppComment.htm">//</a>8<br/>
&nbsp;&nbsp;v.push_back("participant=?,*"); <a href="CppComment.htm">//</a>9<br/>
&nbsp;&nbsp;v.push_back("participant=?,*"); <a href="CppComment.htm">//</a>10<br/>
&nbsp;&nbsp;v.push_back("participant=?,*"); <a href="CppComment.htm">//</a>11<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the group assignment phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_as<b><a href="CppSigned.htm">signed</a></b>=You have been as<b><a href="CppSigned.htm">signed</a></b> to group #");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_unassigned=You have not been as<b><a href="CppSigned.htm">signed</a></b> to a group yet");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The <a href="CppFunction.htm">function</a> that determines how much payoff the waiting participant is rewarded");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> simply waiting, where p is the average payoff gathered by the active");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>participants in the last period.");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_assign_waiting_payoff_function=0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the <a href="CppChat.htm">chat</a> phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the <a href="CppChat.htm">chat</a> state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("chat_duration=5");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the (majority) voting state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("voting_duration=5");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>What can be voted <b><a href="CppFor.htm">for</a></b>?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Must be in the form of [description],[chance],[cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>For example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Lenient supervisor,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Rigorous supervisor,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=rigorous supervisor,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=lenient supervisor,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=no supervisor,0.0,0.0");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to vote?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after vote_duration a random vote is chosen");<br/>
&nbsp;&nbsp;v.push_back("voting_wait=y");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting results phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the majority voting results state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_voting_duration=5");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the choose action screen (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>choose_action_options are the option of the actions to be chosen");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>and have the form [description],[benefit to group],[individual cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I want to contribute,2.0,1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I <b><a href="CppDo.htm">do</a></b> not want to contribute,0.0,0.0");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=Contribute,2.0,1.0,You have chosen to contribute");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=Do not contribute,0.0,0.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to choose an action?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after choose_action_duration a random action is chosen");<br/>
&nbsp;&nbsp;v.push_back("choose_action_wait=y");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the choose action state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppAny.htm">any</a> non-zero positive value: <b><a href="CppThis.htm">this</a></b> <a href="CppTime.htm">time</a> in seconsd");<br/>
&nbsp;&nbsp;v.push_back("choose_action_duration=5");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the individual payoff (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The message displayed to the participant");<br/>
&nbsp;&nbsp;v.push_back("assign_payoff_message=Assigning payoffs");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view in-group results screen (period cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the view results group state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_duration=5");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How many IPGG cycles are there?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> x&nbsp;&nbsp;&nbsp;&nbsp; : x cycles, <b><a href="CppFor.htm">for</a></b> example '1'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> ?w&nbsp;&nbsp;&nbsp;&nbsp;: after every action there is a chance of w <b><a href="CppFor.htm">for</a></b> another cycle,");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppFor.htm">for</a></b> example '0.8'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> [a,b&gt; : there are from a to (not including) b cycles, following a ");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uniform distribution, <b><a href="CppFor.htm">for</a></b> example '[1,4&gt;'");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_cycles=?0.1");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view all-group results screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the view results group take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_duration=5");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much experimental cycles/periods are played?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_number_of_periods=3");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much payoff is an active participant given <b><a href="CppFor.htm">for</a></b> reaching the next period?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> his/her total accumulated payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_next_period_payoff_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the finished experimenty screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The goodbye message on the finished screen");<br/>
&nbsp;&nbsp;v.push_back("finished_message=The experiment has finished");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much money does the participant earn from his/her payoff?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("finished_earnings_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> file("parameters5.txt");<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(file,"\n"));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Test::CreateParameterFile6()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Default parameters file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> participants&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>A participant has the following parameters");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> Initial group as<b><a href="CppSigned.htm">signed</a></b> to. Possible values:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a positive value: the ID will as<b><a href="CppSigned.htm">signed</a></b> to group x");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppChat.htm">Chat</a> tag");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a non-asterisk <a href="CppChar.htm">character</a>: that <a href="CppChar.htm">character</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppIpAddress.htm">IP address</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a valid <a href="CppIpAddress.htm">IP address</a>: <b><a href="CppThis.htm">this</a></b> <a href="CppIpAddress.htm">IP address</a> is as<b><a href="CppSigned.htm">signed</a></b> to <b><a href="CppThis.htm">this</a></b> ID");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> *: <a href="CppAny.htm">any</a> <a href="CppIpAddress.htm">IP address</a> is allowed");<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>0<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>1<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>2<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>3<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>4<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>5<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the group assignment phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_as<b><a href="CppSigned.htm">signed</a></b>=You have been as<b><a href="CppSigned.htm">signed</a></b> to group #");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_unassigned=You have not been as<b><a href="CppSigned.htm">signed</a></b> to a group yet");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The <a href="CppFunction.htm">function</a> that determines how much payoff the waiting participant is rewarded");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> simply waiting, where p is the average payoff gathered by the active");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>participants in the last period.");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_assign_waiting_payoff_function=0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the <a href="CppChat.htm">chat</a> phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the <a href="CppChat.htm">chat</a> state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("chat_duration=5");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the (majority) voting state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("voting_duration=5");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>What can be voted <b><a href="CppFor.htm">for</a></b>?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>What can be voted <b><a href="CppFor.htm">for</a></b>?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Must be in the form of [description],[chance],[cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>For example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Lenient supervisor,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Rigorous supervisor,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=rigorous supervisor,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=lenient supervisor,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=no supervisor,0.0,0.0");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to vote?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after vote_duration a random vote is chosen");<br/>
&nbsp;&nbsp;v.push_back("voting_wait=y");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting results phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the majority voting results state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_voting_duration=5");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the choose action screen (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>choose_action_options are the option of the actions to be chosen");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>and have the form [description],[benefit to group],[individual cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I want to contribute,2.0,1.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I <b><a href="CppDo.htm">do</a></b> not want to contribute,0.0,0.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=Contribute,2.0,1.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=Do not contribute,0.0,0.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to choose an action?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after choose_action_duration a random action is chosen");<br/>
&nbsp;&nbsp;v.push_back("choose_action_wait=y");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the choose action state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppAny.htm">any</a> non-zero positive value: <b><a href="CppThis.htm">this</a></b> <a href="CppTime.htm">time</a> in seconsd");<br/>
&nbsp;&nbsp;v.push_back("choose_action_duration=5");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the individual payoff (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The message displayed to the participant");<br/>
&nbsp;&nbsp;v.push_back("assign_payoff_message=Assigning payoffs");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view in-group results screen (period cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the view results group state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_duration=5");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How many IPGG cycles are there?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> x&nbsp;&nbsp;&nbsp;&nbsp; : x cycles, <b><a href="CppFor.htm">for</a></b> example '1'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> ?w&nbsp;&nbsp;&nbsp;&nbsp;: after every action there is a chance of w <b><a href="CppFor.htm">for</a></b> another cycle,");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppFor.htm">for</a></b> example '0.8'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> [a,b&gt; : there are from a to (not including) b cycles, following a ");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uniform distribution, <b><a href="CppFor.htm">for</a></b> example '[1,4&gt;'");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_cycles=?0.8");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view all-group results screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the view results group take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_duration=5");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much experimental cycles/periods are played?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_number_of_periods=2");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much payoff is an active participant given <b><a href="CppFor.htm">for</a></b> reaching the next period?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> his/her total accumulated payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_next_period_payoff_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the finished experimenty screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The goodbye message on the finished screen");<br/>
&nbsp;&nbsp;v.push_back("finished_message=The experiment has finished");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much money does the participant earn from his/her payoff?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("finished_earnings_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> file("parameters6.txt");<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(file,"\n"));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Test::CreateParameterFile7()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Default parameters file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> participants&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>A participant has the following parameters");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> Initial group as<b><a href="CppSigned.htm">signed</a></b> to. Possible values:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a positive value: the ID will as<b><a href="CppSigned.htm">signed</a></b> to group x");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppChat.htm">Chat</a> tag");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a non-asterisk <a href="CppChar.htm">character</a>: that <a href="CppChar.htm">character</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppIpAddress.htm">IP address</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> a valid <a href="CppIpAddress.htm">IP address</a>: <b><a href="CppThis.htm">this</a></b> <a href="CppIpAddress.htm">IP address</a> is as<b><a href="CppSigned.htm">signed</a></b> to <b><a href="CppThis.htm">this</a></b> ID");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> *: <a href="CppAny.htm">any</a> <a href="CppIpAddress.htm">IP address</a> is allowed");<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>0<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>1<br/>
&nbsp;&nbsp;v.push_back("participant=1,*"); <a href="CppComment.htm">//</a>2<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>3<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>4<br/>
&nbsp;&nbsp;v.push_back("participant=2,*"); <a href="CppComment.htm">//</a>5<br/>
&nbsp;&nbsp;v.push_back("participant=3,*"); <a href="CppComment.htm">//</a>6<br/>
&nbsp;&nbsp;v.push_back("participant=3,*"); <a href="CppComment.htm">//</a>7<br/>
&nbsp;&nbsp;v.push_back("participant=3,*"); <a href="CppComment.htm">//</a>8<br/>
&nbsp;&nbsp;v.push_back("participant=4,*"); <a href="CppComment.htm">//</a>9<br/>
&nbsp;&nbsp;v.push_back("participant=4,*"); <a href="CppComment.htm">//</a>10<br/>
&nbsp;&nbsp;v.push_back("participant=4,*"); <a href="CppComment.htm">//</a>11<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("participant=?,*");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the group assignment phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_as<b><a href="CppSigned.htm">signed</a></b>=You have been as<b><a href="CppSigned.htm">signed</a></b> to group #");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>group_assign_message_as<b><a href="CppSigned.htm">signed</a></b> is the message displayed to an as<b><a href="CppSigned.htm">signed</a></b> participant");<br/>
&nbsp;&nbsp;v.push_back("group_assign_message_unassigned=You have not been as<b><a href="CppSigned.htm">signed</a></b> to a group yet");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The <a href="CppFunction.htm">function</a> that determines how much payoff the waiting participant is rewarded");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> simply waiting, where p is the average payoff gathered by the active");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>participants in the last period.");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_assign_waiting_payoff_function=0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the <a href="CppChat.htm">chat</a> phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the <a href="CppChat.htm">chat</a> state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("chat_duration=10");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the (majority) voting state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("voting_duration=10");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>What can be voted <b><a href="CppFor.htm">for</a></b>?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Must be in the form of [description],[chance],[cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>For example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Lenient supervisor,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> voting_option=Rigorous supervisor,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=rigorous supervisor,1.0,2.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=lenient supervisor,0.5,1.0");<br/>
&nbsp;&nbsp;v.push_back("voting_option=no supervisor,0.0,0.0");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to vote?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after vote_duration a random vote is chosen");<br/>
&nbsp;&nbsp;v.push_back("voting_wait=y");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the majority voting results phase (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the majority voting results state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_voting_duration=10");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the choose action screen (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>choose_action_options are the option of the actions to be chosen");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>and have the form [description],[benefit to group],[individual cost]");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> example:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I want to contribute,2.0,1.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> choose_action_option=I <b><a href="CppDo.htm">do</a></b> not want to contribute,0.0,0.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=Contribute,2.0,1.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("choose_action_option=Do not contribute,0.0,0.0,You have chosen not to contribute");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Wait <b><a href="CppFor.htm">for</a></b> all participants to choose an action?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> y : yes");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> n : no, after choose_action_duration a random action is chosen");<br/>
&nbsp;&nbsp;v.push_back("choose_action_wait=y");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the choose action state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> <a href="CppAny.htm">any</a> non-zero positive value: <b><a href="CppThis.htm">this</a></b> <a href="CppTime.htm">time</a> in seconsd");<br/>
&nbsp;&nbsp;v.push_back("choose_action_duration=10");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the individual payoff (IPGG cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The message displayed to the participant");<br/>
&nbsp;&nbsp;v.push_back("assign_payoff_message=Assigning payoffs");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view in-group results screen (period cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the view results group state take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_duration=10");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How many IPGG cycles are there?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> x&nbsp;&nbsp;&nbsp;&nbsp; : x cycles, <b><a href="CppFor.htm">for</a></b> example '1'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> ?w&nbsp;&nbsp;&nbsp;&nbsp;: after every action there is a chance of w <b><a href="CppFor.htm">for</a></b> another cycle,");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppFor.htm">for</a></b> example '0.8'");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> [a,b&gt; : there are from a to (not including) b cycles, following a ");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uniform distribution, <b><a href="CppFor.htm">for</a></b> example '[1,4&gt;'");<br/>
&nbsp;&nbsp;v.push_back("view_results_group_cycles=?0.1");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the view all-group results screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How <b><a href="CppLong.htm">long</a></b> does the view results group take in seconds?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_duration=10");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much experimental cycles/periods are played?");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_number_of_periods=10");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much payoff is an active participant given <b><a href="CppFor.htm">for</a></b> reaching the next period?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> his/her total accumulated payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("group_reassign_next_period_payoff_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Parameters <b><a href="CppFor.htm">for</a></b> the finished experimenty screen (experiment cycle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a><a href="CppComment.htm">///</a>/");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>The goodbye message on the finished screen");<br/>
&nbsp;&nbsp;v.push_back("finished_message=The experiment has finished");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>How much money does the participant earn from his/her payoff?");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>This is a <a href="CppFunction.htm">function</a> of p, where p stands <b><a href="CppFor.htm">for</a></b> payoff");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a>Examples:");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (0.1 * p * p)");<br/>
&nbsp;&nbsp;v.push_back("finished_earnings_function=1.0 <a href="CppOperatorPlus.htm">+</a> (0.01 * p)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> file("parameters7.txt");<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(file,"\n"));<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Tests the parsing of the parameter files<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Test::TestParameterParsing()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateParameterFile1();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters(<b><a href="CppNew.htm">new</a></b> Parameters(m_server));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;ReadFromFile("parameters1.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetParticipants().size() <a href="CppOperatorEqual.htm">==</a> 6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetAssignPayoff()-&gt;GetMessage() <a href="CppOperatorEqual.htm">==</a> "Ik ken nu de payoffs toe");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;Get<a href="CppChat.htm">Chat</a>()-&gt;GetDuration() <a href="CppOperatorEqual.htm">==</a> 60);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetChooseAction()-&gt;GetDuration() <a href="CppOperatorEqual.htm">==</a> 30);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetChooseAction()-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetChooseAction()-&gt;GetWait() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetFinished()-&gt;GetMessage() <a href="CppOperatorEqual.htm">==</a> "Klaar!");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetFinished()-&gt;GetEarnings<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "1.0 <a href="CppOperatorPlus.htm">+</a> (0.001 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupAssign()-&gt;GetMessageAs<b><a href="CppSigned.htm">signed</a></b>() <a href="CppOperatorEqual.htm">==</a> "U bent ingedeeld in groep #");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupAssign()-&gt;GetMessageUnassigned() <a href="CppOperatorEqual.htm">==</a> "U bent nog niet ingedeeld");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupAssign()-&gt;GetWaitingPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupReAssign()-&gt;GetNextPeriodPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetViewResultsGroup()-&gt;GetDuration() <a href="CppOperatorEqual.htm">==</a> 30);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetViewResultsGroup()-&gt;GetRepeatAssigner()-&gt;Assign() <a href="CppOperatorEqual.htm">==</a> 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetViewResultsVoting()-&gt;GetDuration() <a href="CppOperatorEqual.htm">==</a> 30);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetVoting()-&gt;GetDuration() <a href="CppOperatorEqual.htm">==</a> 60);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetVoting()-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("Mijn vriendin");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("Mijn moeder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("Mijn oma");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetVoting()-&gt;GetVoteDescriptions() <a href="CppOperatorEqual.htm">==</a> v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetVoting()-&gt;GetWait() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateParameterFile2();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters(<b><a href="CppNew.htm">new</a></b> Parameters(m_server));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;ReadFromFile("parameters2.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetParticipants().size() <a href="CppOperatorEqual.htm">==</a> 6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetAssignPayoff()-&gt;GetMessage() <a href="CppOperatorEqual.htm">==</a> "Assigning payoffs");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;Get<a href="CppChat.htm">Chat</a>()-&gt;GetDuration() <a href="CppOperatorEqual.htm">==</a> 120);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetChooseAction()-&gt;GetDuration() <a href="CppOperatorEqual.htm">==</a> 60);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetChooseAction()-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetChooseAction()-&gt;GetWait() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetFinished()-&gt;GetMessage() <a href="CppOperatorEqual.htm">==</a> "The experiment has finished");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupAssign()-&gt;GetMessageAs<b><a href="CppSigned.htm">signed</a></b>() <a href="CppOperatorEqual.htm">==</a> "You have been as<b><a href="CppSigned.htm">signed</a></b> to group #");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupAssign()-&gt;GetMessageUnassigned() <a href="CppOperatorEqual.htm">==</a> "You have not been as<b><a href="CppSigned.htm">signed</a></b> to a group yet");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupAssign()-&gt;GetWaitingPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupReAssign()-&gt;GetNextPeriodPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetViewResultsGroup()-&gt;GetDuration() <a href="CppOperatorEqual.htm">==</a> 60);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetViewResultsGroup()-&gt;GetRepeatAssigner()-&gt;Assign() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetViewResultsVoting()-&gt;GetDuration() <a href="CppOperatorEqual.htm">==</a> 60);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetVoting()-&gt;GetDuration() <a href="CppOperatorEqual.htm">==</a> 30);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetVoting()-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("rigorous supervisor");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("lenient supervisor");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("no supervisor");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetVoting()-&gt;GetVoteDescriptions() <a href="CppOperatorEqual.htm">==</a> v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetVoting()-&gt;GetWait() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateParameterFile3();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters(<b><a href="CppNew.htm">new</a></b> Parameters(m_server));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;ReadFromFile("parameters3.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; score(4,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (score[1] <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> score[2] <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> score[3] <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_repeats <a href="CppOperatorAssign.htm">=</a> parameters-&gt;GetViewResultsGroup()-&gt;GetRepeatAssigner()-&gt;Assign();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_repeats <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_repeats &lt;&nbsp;&nbsp;4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>score[n_repeats];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetChooseAction()-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupAssign()-&gt;GetWaitingPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupReAssign()-&gt;GetNextPeriodPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetVoting()-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateParameterFile4();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters(<b><a href="CppNew.htm">new</a></b> Parameters(m_server));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;ReadFromFile("parameters4.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; score(5,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (score[1] <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> score[2] <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> score[3] <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> score[4] <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_repeats <a href="CppOperatorAssign.htm">=</a> parameters-&gt;GetViewResultsGroup()-&gt;GetRepeatAssigner()-&gt;Assign();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_repeats <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_repeats &lt; 5) <a href="CppOperatorIncrement.htm">++</a>score[n_repeats];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetChooseAction()-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupAssign()-&gt;GetWaitingPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupReAssign()-&gt;GetNextPeriodPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetVoting()-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateParameterFile5();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters(<b><a href="CppNew.htm">new</a></b> Parameters(m_server));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;ReadFromFile("parameters5.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupAssign()-&gt;GetWaitingPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupReAssign()-&gt;GetNextPeriodPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetVoting()-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateParameterFile6();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters(<b><a href="CppNew.htm">new</a></b> Parameters(m_server));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;ReadFromFile("parameters6.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetChooseAction()-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupAssign()-&gt;GetWaitingPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupReAssign()-&gt;GetNextPeriodPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetVoting()-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateParameterFile7();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters(<b><a href="CppNew.htm">new</a></b> Parameters(m_server));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;ReadFromFile("parameters7.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetChooseAction()-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupAssign()-&gt;GetWaitingPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "0.5 <a href="CppOperatorPlus.htm">+</a> (0.5 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetGroupReAssign()-&gt;GetNextPeriodPayoff<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "1.0 <a href="CppOperatorPlus.htm">+</a> (0.0 * p)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetVoting()-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;Chat<a href="CppShape.htm">Shape</a>Factory::Get()-&gt;Reset();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtsttestparameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtsttestparameters.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<br/>
 <br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>test.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Test::TestParameters()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check setting parameters<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters(<b><a href="CppNew.htm">new</a></b> Parameters(m_server));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetParticipants().empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume <b><a href="CppDefault.htm">default</a></b> parameters contain no participants");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> one <b><a href="CppDefault.htm">default</a></b> Participant<br/>
&nbsp;&nbsp;parameters-&gt;<a href="CppAdd.htm">Add</a>Participant(parameters-&gt;CreateDefaultParticipant());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetParticipants().size() <a href="CppOperatorEqual.htm">==</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume after &gt;<a href="CppAdd.htm">Add</a>Participant, these is a Participant present");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete all participants from Parameters<br/>
&nbsp;&nbsp;parameters-&gt;DeleteParticipants();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetParticipants().empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume after DeleteParticipants, these are actually deleted");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Again add one <b><a href="CppDefault.htm">default</a></b> Participant<br/>
&nbsp;&nbsp;parameters-&gt;<a href="CppAdd.htm">Add</a>Participant(parameters-&gt;CreateDefaultParticipant());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetParticipants().size() <a href="CppOperatorEqual.htm">==</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume after &gt;<a href="CppAdd.htm">Add</a>Participant, these is a Participant present");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete all participants from Parameters<br/>
&nbsp;&nbsp;parameters-&gt;DeleteParticipants();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete all participants from Parameters again should work<br/>
&nbsp;&nbsp;parameters-&gt;DeleteParticipants();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtsttestparticipant.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtsttestparticipant.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a><a href="CppChat.htm">chat</a>message.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groupassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppIpaddress.htm">ipaddress</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>repeatassigner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>test.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShape.htm">shape</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppShapeWidget.htm">shapewidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>votingoption.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtShapeWidget.htm">wtshapewidget</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Test::TestParticipant()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a GroupAssigner<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> expected_group <a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 256);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GroupAssigner&gt; group_assigner(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> GroupAssignerPredetermined(expected_group));<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test the GroupAssigner<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dummy_id <a href="CppOperatorAssign.htm">=</a> <a href="CppStdRand.htm">std::rand</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(group_assigner-&gt;Assign(dummy_id) <a href="CppOperatorEqual.htm">==</a> expected_group<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume GroupAssignerPredetermined always produces the same <a href="CppInt.htm">integer</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Participant(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>chat_tag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group_assigner,m_server));<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;CanGetGroup());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p-&gt;CanGetId());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetActions().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetVotes().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assign an ID<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id <a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;AssignId(id);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;CanGetId());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> id);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assign an <a href="CppIpAddress.htm">IP address</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Safe<a href="CppIpAddress.htm">IpAddress</a>&gt; ip_address(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Safe<a href="CppIpAddress.htm">IpAddress</a>("123.123.123.123"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;Set<a href="CppIpAddress.htm">IpAddress</a>(ip_address);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;Can<a href="CppGetIpAddress.htm">GetIpAddress</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;<a href="CppGetIpAddress.htm">GetIpAddress</a>()-&gt;Get()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> ip_address.get()-&gt;Get());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assign a group<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>p-&gt;AssignGroup();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;CanGetGroup());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;GetGroup() <a href="CppOperatorEqual.htm">==</a> expected_group);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppChat.htm">Chat</a> #1<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt; chat_message(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ChatMessage(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("<a href="CppChat.htm">chat</a>") <a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<a href="CppStdRand.htm">std::rand</a>())));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetChatLog().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "p has not yet chatted, not even close\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;HasChatted());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;Start<a href="CppChat.htm">Chat</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p-&gt;GetChatLog().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetChatLog().back().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;CanGetLast<a href="CppChat.htm">Chat</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "p has not yet chatted\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;HasChatted());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;<a href="CppAppend.htm">Append</a><a href="CppChat.htm">Chat</a>(chat_message);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;CanGetLast<a href="CppChat.htm">Chat</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "p has chatted\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p-&gt;GetChatLog().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p-&gt;GetChatLog().back().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;HasChatted());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "p should not have an empty <a href="CppChat.htm">chat</a> log\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;GetLast<a href="CppChat.htm">Chat</a>().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "p should not have a <a href="CppChat.htm">chat</a> log with one message\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetChatLog().back().size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "p should not have a <a href="CppChat.htm">chat</a> log with the one message chatted\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetChatLog().back()[0] <a href="CppOperatorEqual.htm">==</a> chat_message);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Voting #1<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> vote <a href="CppOperatorAssign.htm">=</a> <a href="CppStdRand.htm">std::rand</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;CanGetLastVote());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "p has not yet voted, not even close\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;HasVoted());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>p-&gt;StartVoting();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;CanGetLastVote());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;HasVoted());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetVotes().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;Vote(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> VotingOption(0.5,0.1,"Test")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p-&gt;GetVotes().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;CanGetLastVote());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;HasVoted());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;GetLastVote() <a href="CppOperatorEqual.htm">==</a> vote);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Choose action #1<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> action <a href="CppOperatorAssign.htm">=</a> <a href="CppStdRand.htm">std::rand</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;CanGetLastAction());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;HasChosenAction());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>p-&gt;StartChooseAction();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;CanGetLastAction());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;HasChosenAction());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetActions().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;ChooseAction(action);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p-&gt;GetActions().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;CanGetLastAction());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;HasChosenAction());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;GetLastChosenAction() <a href="CppOperatorEqual.htm">==</a> action);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Voting #2<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> vote <a href="CppOperatorAssign.htm">=</a> <a href="CppStdRand.htm">std::rand</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;CanGetLastVote());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;HasVoted());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>p-&gt;StartVoting();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;CanGetLastVote());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;HasVoted());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;Vote(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;VotingOption&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> VotingOption(0.5,0.1,"Test2")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetVotes().size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;CanGetLastVote());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;HasVoted());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;GetLastVote() <a href="CppOperatorEqual.htm">==</a> vote);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Choose action #2<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> action <a href="CppOperatorAssign.htm">=</a> <a href="CppStdRand.htm">std::rand</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;CanGetLastAction());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;HasChosenAction());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>p-&gt;StartChooseAction();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;CanGetLastAction());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;HasChosenAction());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;ChooseAction(action);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetActions().size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;CanGetLastAction());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;HasChosenAction());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;GetLastChosenAction() <a href="CppOperatorEqual.htm">==</a> action);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppChat.htm">Chat</a> #2<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ChatMessage&gt; chat_message(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ChatMessage(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>("<a href="CppChat.htm">chat</a>") <a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(<a href="CppStdRand.htm">std::rand</a>())));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;CanGetLast<a href="CppChat.htm">Chat</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;HasChatted());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetChatLog().size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;Start<a href="CppChat.htm">Chat</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetChatLog().size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetChatLog().back().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;CanGetLast<a href="CppChat.htm">Chat</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;HasChatted());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;<a href="CppAppend.htm">Append</a><a href="CppChat.htm">Chat</a>(chat_message);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p-&gt;GetChatLog().back().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;CanGetLast<a href="CppChat.htm">Chat</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;HasChatted());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!p-&gt;GetLast<a href="CppChat.htm">Chat</a>().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p-&gt;GetLast<a href="CppChat.htm">Chat</a>().size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetChatLog().back()[0] <a href="CppOperatorEqual.htm">==</a> chat_message);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check the <b><a href="CppDefault.htm">default</a></b> Participant creation<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Parameters(m_server));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; p1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> parameters-&gt;CreateDefaultParticipant();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; p2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> parameters-&gt;CreateDefaultParticipant();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1-&gt;GetChat<a href="CppShape.htm">Shape</a>() <a href="CppOperatorNotEqual.htm">!=</a> p2-&gt;GetChat<a href="CppShape.htm">Shape</a>());<br/>
<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstteststate.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstteststate.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>state.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>test.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a>Test<a href="CppState.htm">State</a>s test <a href="CppState.htm">State</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Test::Test<a href="CppState.htm">State</a>()<br/>
{<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; s(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>AssignPayoff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> "assign_payoff");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; s(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a><a href="CppChat.htm">Chat</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> "<a href="CppChat.htm">chat</a>");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; s(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>ChooseAction);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> "choose_action");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; s(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>Finished);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> "finished");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; s(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>GroupAssign);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> "group_assign");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; s(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>GroupReAssign);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> "group_reassign");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; s(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>LoggedIn);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> "logged_in");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; s(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>NotLoggedIn);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> "not_logged_in");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; s(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>ViewResultsAll);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> "view_results_all");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; s(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>ViewResultsGroup);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> "view_results_group");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; s(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>ViewResultsVoting);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> "view_results_voting");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; s(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>Voting);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> "voting");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppState.htm">State</a>&gt; s(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>Waiting);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> "waiting");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstvote.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstvote.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>VOTE_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>VOTE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>A Vote is a Participant its voted VotingOption<br/>
<b><a href="CppStruct.htm">struct</a></b> Vote<br/>
{<br/>
&nbsp;&nbsp;Vote(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> VotingOption * <b><a href="CppConst.htm">const</a></b> vote);<br/>
&nbsp;&nbsp;Vote(<b><a href="CppConst.htm">const</a></b> Vote&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Vote&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Vote&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-only <a href="CppPointer.htm">pointer</a> to the sender<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; GetSender() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_sender; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppChat.htm">chat</a> message its text<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> VotingOption * GetVote() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_vote; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Vote() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Vote*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppShapeWidget.htm">ShapeWidget</a> of the sender<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; m_sender;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt; m_sender;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppChat.htm">chat</a> message its text<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> VotingOption * <b><a href="CppConst.htm">const</a></b> m_vote;<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppForwardDeclaration.htm">Forward declaration</a>s.<br/>
<a href="CppComment.htm">//</a><a href="CppHerbSutter.htm">Herb Sutter</a>. <a href="CppException.htm">Exception</a>al <a href="Cpp.htm">C++</a>. ISBN: 0-201-61562-2. Item 26: 'Never <a href="CppInclude.htm">#include</a> a header when a <a href="CppForwardDeclaration.htm">forward declaration</a> will suffice'<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Vote&amp; p);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> VOTE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstvote.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstvote.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>participant.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>vote.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>votingoption.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::Vote::Vote(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Participant&gt;&amp; sender,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> VotingOption * <b><a href="CppConst.htm">const</a></b> vote)<br/>
&nbsp;&nbsp;: m_sender(sender), m_vote(vote)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_sender);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_vote);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Vote&amp; p)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;chat_message&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*(p.GetSender()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*(p.GetVote()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/chat_message&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstvotingoption.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstvotingoption.h" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PROJECT<a href="ProjectGtst.htm">GTST</a>VOTINGOPTION_H<br/>
<a href="CppDefine.htm">#define</a> PROJECT<a href="ProjectGtst.htm">GTST</a>VOTINGOPTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>forward_declarations.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>An option that can be voted <b><a href="CppFor.htm">for</a></b><br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>A VotingOption has a description and a chance of getting caught<br/>
<a href="CppComment.htm">///</a>by a supervisor.<br/>
<b><a href="CppStruct.htm">struct</a></b> VotingOption<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A VotingOption has a description and a chance of getting caught<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/by a supervisor.<br/>
&nbsp;&nbsp;VotingOption(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> cost,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; description);<br/>
&nbsp;&nbsp;VotingOption(<b><a href="CppConst.htm">const</a></b> VotingOption&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;VotingOption&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> VotingOption&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the chance of getting caught by a supervisor when not contributing<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetChance() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the cost of <b><a href="CppThis.htm">this</a></b> supervisor/option<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetCost() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the description of <b><a href="CppThis.htm">this</a></b> voting option<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetDescription() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the chance of getting caught by a supervisor when not contributing<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetChance(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chance);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the cost of <b><a href="CppThis.htm">this</a></b> supervisor/option<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetCost(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> cost);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the description of <b><a href="CppThis.htm">this</a></b> voting option<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDescription(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; description);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~VotingOption() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(VotingOption*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The chance of getting caught by a supervisor when not contributing<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_chance;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The cost of <b><a href="CppThis.htm">this</a></b> supervisor/option<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_cost;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The description of <b><a href="CppThis.htm">this</a></b> voting option<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_description;<br/>
<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> VotingOption&amp; v);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="ProjectGtst.htm">gtst</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> VOTINGOPTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtstvotingoption.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtstvotingoption.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ProjectGtst.htm">GTST</a>, Game Theory Server<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ProjectGtst.htm">ProjectGtst</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>votingoption.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::VotingOption::VotingOption(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chance,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> cost,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; description)<br/>
&nbsp;&nbsp;: m_chance{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cost{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_description{}<br/>
{<br/>
&nbsp;&nbsp;SetChance(chance);<br/>
&nbsp;&nbsp;SetCost(cost);<br/>
&nbsp;&nbsp;SetDescription(description);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get the chance of getting caught by a supervisor when not contributing<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::VotingOption::GetChance() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_chance;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get the cost of <b><a href="CppThis.htm">this</a></b> supervisor/option<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::VotingOption::GetCost() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_cost;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Get the description of <b><a href="CppThis.htm">this</a></b> voting option<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::VotingOption::GetDescription() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_description;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set the chance of getting caught by a supervisor when not contributing<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::VotingOption::SetChance(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A chance must be zero at least");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A chance must be one (that is: 100%) at most");<br/>
&nbsp;&nbsp;m_chance <a href="CppOperatorAssign.htm">=</a> p;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set the cost of <b><a href="CppThis.htm">this</a></b> supervisor/option<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::VotingOption::SetCost(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> cost)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cost <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Costs typically are positive values");<br/>
&nbsp;&nbsp;m_cost <a href="CppOperatorAssign.htm">=</a> cost;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Set the description of <b><a href="CppThis.htm">this</a></b> voting option<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::VotingOption::SetDescription(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; description)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!description.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A description must contain text");<br/>
&nbsp;&nbsp;m_description <a href="CppOperatorAssign.htm">=</a> description;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> VotingOption&amp; v)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;chance&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v.GetChance()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/chance&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;cost&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v.GetCost()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/cost&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;description&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v.GetDescription()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/description&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/wtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/wtmain.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>\mainpage <a href="ProjectGtst.htm">GTST</a><br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Welcome to the <a href="ProjectGtst.htm">GTST</a> <a href="CppDocumentation.htm">documentation</a><br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>\author<br/>
<a href="CppComment.htm">///</a>Richel Bilderbeek<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>\remark<br/>
<a href="CppComment.htm">///</a>In collaboration with Lucas Molleman, Piet van den Berg and<br/>
<a href="CppComment.htm">///</a>Franjo Weissing<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>\todo<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> let an Administrator also remain logged in by his/her IP<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> let a Partipant that has a browser refresh automatically go to the<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;Participant screens instead of to the Welcome screen<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> when a Participant participates, remove the menu items that are not<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;to be used <a href="CppAny.htm">any</a>more: Administrator, <a href="CppAbout.htm">About</a>, Experiment flow<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> <a href="CppAdd.htm">Add</a> quiz at beginning<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> <a href="CppAdd.htm">Add</a> <a href="CppQuestion.htm">question</a>naire at end<br/>
<br/>
<a href="CppComment.htm">///</a>\remark<br/>
<a href="CppComment.htm">///</a>Most <b><a href="CppClass.htm">classes</a></b> have the following:<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;~ParticipantDialog();<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Administrator*);<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>This idiom the following trouble,<br/>
<a href="CppComment.htm">///</a>cited from http://www.<a href="CppBoost.htm">boost</a>.org/libs/utility/checked_delete.html:<br/>
<a href="CppComment.htm">///</a>The C<a href="CppOperatorIncrement.htm">++</a> Standard allows, in 5.3.5/5, <a href="CppPointer.htm">pointer</a>s to incomplete<br/>
<a href="CppComment.htm">///</a><b><a href="CppClass.htm">class</a></b> types to be deleted with a <b><a href="CppDelete.htm">delete</a></b>-expression.<br/>
<a href="CppComment.htm">///</a>When the <b><a href="CppClass.htm">class</a></b> has a non-trivial <a href="CppDestructor.htm">destructor</a>, or a <b><a href="CppClass.htm">class</a></b>-specific <b><a href="CppOperator.htm">operator</a></b><br/>
<a href="CppComment.htm">///</a><b><a href="CppDelete.htm">delete</a></b>, the behavior is undefined. Some <a href="CppCompiler.htm">compilers</a> issue a warning when an<br/>
<a href="CppComment.htm">///</a>incomplete type is deleted, but unfortunately, not all <b><a href="CppDo.htm">do</a></b>, and programmers<br/>
<a href="CppComment.htm">///</a>some<a href="CppTime.htm">time</a>s ignore or disable warnings.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>The <b><a href="CppTemplate.htm">template</a></b> syntax of the <a href="CppFriend.htm">befriending</a> with <a href="CppBoostChecked_delete.htm">boost::checked_delete</a> is from<br/>
<a href="CppComment.htm">//</a><a href="CppComment.htm">/*</a> <a href="CppHerbSutter.htm">Herb Sutter</a>. <a href="CppException.htm">Exception</a>al C<a href="CppOperatorIncrement.htm">++</a> style. 2005. ISBN: 0-201-76042-8.<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;Item 8: '<a href="CppFriend.htm">Befriending</a> <a href="CppTemplate.htm">templates</a>'.<br/>
<br/>
<a href="CppComment.htm">///</a>\remark<br/>
<a href="CppComment.htm">///</a>Hall Of Fame, that is people that broke the server:<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> 82.136.255.242<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> 84.85.246.65<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> 85.151.237.75<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> 127.0.0.1<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> 129.125.142.212<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> 129.125.142.230<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> 129.125.177.214<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> 145.94.229.7<br/>
<a href="CppComment.htm">///</a>(yes, the joke is intentional)<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/filesystem.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWApplication.htm">WApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWEnvironment.htm">WEnvironment</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>all_serverstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>menudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ProjectGtst.htm">gtst</a>server.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppIpaddress.htm">ipaddress</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtAutoConfig.htm">wtautoconfig</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtSelectFileDialog.htm">wtselectfiledialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The <a href="CppWt.htm">Wt</a> <a href="CppApplication.htm">application</a> of <b><a href="CppThis.htm">this</a></b> program.<br/>
<b><a href="CppStruct.htm">struct</a></b> WtGtst<a href="CppApplication.htm">Application</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppWApplication.htm">Wt::WApplication</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a WtGtst<a href="CppApplication.htm">Application</a><br/>
&nbsp;&nbsp;WtGtst<a href="CppApplication.htm">Application</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">Wt::WEnvironment</a>&amp; env)<br/>
&nbsp;&nbsp;: <a href="CppWApplication.htm">Wt::WApplication</a>(env)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setTitle("<a href="ProjectGtst.htm">GTST</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;useStyleSheet("wt.css");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::Safe<a href="CppIpAddress.htm">IpAddress</a>&gt; ip_address(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::Safe<a href="CppIpAddress.htm">IpAddress</a>(env.client<a href="CppAddress.htm">Address</a>()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;root()-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::<a href="ProjectGtst.htm">gtst</a>::MenuDialog(ip_address.get()));<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Create a <a href="CppWApplication.htm">Wt::WApplication</a><br/>
<a href="CppWApplication.htm">Wt::WApplication</a> * create<a href="CppApplication.htm">Application</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">Wt::WEnvironment</a>&amp; env)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> WtGtst<a href="CppApplication.htm">Application</a>(env);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The program's entry <a href="CppPointer.htm">point</a><br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;{ START_<a href="CppTRACE.htm">TRACE</a>(); }<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppWtSelectFileDialog.htm">WtSelectFileDialog</a>::SetPath(<a href="CppBoostFilesystem.htm">boost::filesystem</a>::path(<a href="CppArgc.htm">argv</a>[0]).parent_path().string());<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppWtAutoConfig.htm">WtAutoConfig</a> a(<a href="CppArgc.htm">argc</a>,<a href="CppArgc.htm">argv</a>,create<a href="CppApplication.htm">Application</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.Run();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/wtmain_test_concurrency.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/wtmain_test_concurrency.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/filesystem.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/test/included/prg_exec_monitor.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWApplication.htm">WApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWEnvironment.htm">WEnvironment</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "groupfinished.h"<br/>
<a href="CppInclude.htm">#include</a> "grouploggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "groupnotloggedin.h"<br/>
<a href="CppInclude.htm">#include</a> "groups.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppIpaddress.htm">ipaddress</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "logfile.h"<br/>
<a href="CppInclude.htm">#include</a> "main<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppStopwatch.htm">stopwatch</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtAutoConfig.htm">wtautoconfig</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "project<a href="ProjectGtst.htm">gtst</a>menudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "server.h"<br/>
<a href="CppInclude.htm">#include</a> "serverstate.h"<br/>
<a href="CppInclude.htm">#include</a> "serverstateassignpayoff.h"<br/>
<a href="CppInclude.htm">#include</a> "serverstate<a href="CppChat.htm">chat</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "serverstatechooseaction.h"<br/>
<a href="CppInclude.htm">#include</a> "serverstatefinished.h"<br/>
<a href="CppInclude.htm">#include</a> "serverstategroupassign.h"<br/>
<a href="CppInclude.htm">#include</a> "serverstategroupreassign.h"<br/>
<a href="CppInclude.htm">#include</a> "serverstatequiz.h"<br/>
<a href="CppInclude.htm">#include</a> "serverstateviewresultsall.h"<br/>
<a href="CppInclude.htm">#include</a> "serverstateviewresultsgroup.h"<br/>
<a href="CppInclude.htm">#include</a> "serverstateviewresultsvoting.h"<br/>
<a href="CppInclude.htm">#include</a> "serverstatevoting.h"<br/>
<a href="CppInclude.htm">#include</a> "serverstatewaiting.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtBroadcastServer.htm">wtbroadcastserver</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtSelectFileDialog.htm">wtselectfiledialog</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> WtGtstTestConcurrencyDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>, <a href="CppWtBroadcastServerClient.htm">WtBroadcastServerClient</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a MenuDialog <b><a href="CppUsing.htm">using</a></b> one <a href="CppIpAddress.htm">IP address</a> per Participant<br/>
&nbsp;&nbsp;WtGtstTestConcurrencyDialog()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Main<a href="CppTime.htm">Time</a>r::Get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server-&gt;TestMe();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWtBroadcastServer.htm">WtBroadcastServer</a>::GetInstance()-&gt;Post();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(ui.m_label);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdatePage()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let <b><a href="CppThis.htm">this</a></b> <a href="CppThread.htm">thread</a> sleep, to give the other <a href="CppThread.htm">thread</a> a chance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdThis_thread.htm">std::this_thread</a>::sleep_for(<a href="CppStdChrono.htm">std::chrono</a>::milliseconds(100));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 100;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSet.htm">std::set</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Administrator&gt; &gt;&amp; admins<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> server-&gt;GetAdministrators();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdTo_string.htm">std::to_string</a>(x) <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(admins.size())).c_str()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Server<a href="CppState.htm">State</a> * <b><a href="CppConst.htm">const</a></b> state <a href="CppOperatorAssign.htm">=</a> server-&gt;GetCurrent<a href="CppState.htm">State</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdTo_string.htm">std::to_string</a>(x) <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(state-&gt;ToStr())).c_str()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Groups * <b><a href="CppConst.htm">const</a></b> groups <a href="CppOperatorAssign.htm">=</a> server-&gt;GetGroups();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdTo_string.htm">std::to_string</a>(x) <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(groups-&gt;CollectParticipants().size())).c_str()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Parameters&gt; p(<b><a href="CppNew.htm">new</a></b> Parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;ReadFromFile("parameters7.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server-&gt;SetParameters(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWtBroadcastServer.htm">WtBroadcastServer</a>::GetInstance()-&gt;Post();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> LogFile * <b><a href="CppConst.htm">const</a></b> log <a href="CppOperatorAssign.htm">=</a> server-&gt;GetLog();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdTo_string.htm">std::to_string</a>(x) <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(log-&gt;m_log_filename)).c_str()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters * <b><a href="CppConst.htm">const</a></b> parameters <a href="CppOperatorAssign.htm">=</a> server-&gt;GetParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.m_label-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdTo_string.htm">std::to_string</a>(x) <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(": ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdTo_string.htm">std::to_string</a>(parameters-&gt;CreateDefaultParticipant()-&gt;ToAdminStr())).c_str()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;refresh();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui() : m_label(0) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * m_label;<br/>
&nbsp;&nbsp;} ui;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The <a href="CppWt.htm">Wt</a> <a href="CppApplication.htm">application</a> to test the concurrency of <b><a href="CppThis.htm">this</a></b> program.<br/>
<b><a href="CppStruct.htm">struct</a></b> WtGtstTestConcurrency<a href="CppApplication.htm">Application</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppWApplication.htm">Wt::WApplication</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a WtGameTheory<a href="CppApplication.htm">Application</a><br/>
&nbsp;&nbsp;WtGtstTestConcurrency<a href="CppApplication.htm">Application</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">Wt::WEnvironment</a>&amp; env)<br/>
&nbsp;&nbsp;: <a href="CppWApplication.htm">Wt::WApplication</a>(env)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setTitle("<a href="ProjectGtst.htm">GTST</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;useStyleSheet("wt.css");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;root()-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> WtGtstTestConcurrencyDialog);<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Create a <a href="CppWApplication.htm">Wt::WApplication</a><br/>
<a href="CppWApplication.htm">Wt::WApplication</a> * create<a href="CppApplication.htm">Application</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">Wt::WEnvironment</a>&amp; env)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> WtGtstTestConcurrency<a href="CppApplication.htm">Application</a>(env);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>\brief<br/>
<a href="CppComment.htm">///</a>The program's entry <a href="CppPointer.htm">point</a><br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Normally, <b><a href="CppThis.htm">this</a></b> <a href="CppFunction.htm">function</a> its name would be '<a href="CppMain.htm">main</a>', but because<br/>
<a href="CppComment.htm">///</a>of <b><a href="CppUsing.htm">using</a></b> the <a href="CppBoost.htm">Boost</a>.Test <a href="CppLibrary.htm">library</a>, the <a href="CppMain.htm">main</a> entry <a href="CppPointer.htm">point</a> <a href="CppFunction.htm">function</a> must<br/>
<a href="CppComment.htm">///</a>be called 'cpp_main'<br/>
<b><a href="CppInt.htm">int</a></b> cpp_main(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppDebug.htm">debug</a>::detect_<a href="CppMemory.htm">memory</a>_leaks(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;START_<a href="CppTRACE.htm">TRACE</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppWtSelectFileDialog.htm">WtSelectFileDialog</a>::SetPath(<a href="CppBoostFilesystem.htm">boost::filesystem</a>::path(<a href="CppArgc.htm">argv</a>[0]).parent_path().string());<br/>
&nbsp;&nbsp;<a href="CppWtAutoConfig.htm">WtAutoConfig</a> a(<a href="CppArgc.htm">argc</a>,<a href="CppArgc.htm">argv</a>,create<a href="CppApplication.htm">Application</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.Run();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/drd.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/drd.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
valgrind --tool=drd --log-file=drd.txt ../ProjectGtst-build-desktop/./gtst<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/gtst_start_and_auto_update.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/gtst_start_and_auto_update.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
rm gtst<br/>
<br/>
#Infinite loop<br/>
while [ 1 -eq 1 ]<br/>
do<br/>
&nbsp;&nbsp;#Download the executable<br/>
&nbsp;&nbsp;wget richelbilderbeek.nl/gtst<br/>
&nbsp;&nbsp;#Allow the executable to run<br/>
&nbsp;&nbsp;chmod 707 gtst<br/>
&nbsp;&nbsp;#Start the executable<br/>
&nbsp;&nbsp;./gtst &gt; log_gtst.txt #As normal user<br/>
&nbsp;&nbsp;#./gtst --http-port 80 #As super-user<br/>
&nbsp;&nbsp;#Delete the executable<br/>
&nbsp;&nbsp;rm gtst<br/>
done<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/helgrind.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/helgrind.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
valgrind --tool=helgrind --log-file=helgrind.txt ../ProjectGtst-build-desktop/./gtst --docroot=. --http-address=0.0.0.0 --http-port=8080<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/helgrind_test_concurrency.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/helgrind_test_concurrency.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
valgrind --tool=helgrind --log-file=helgrind_test_concurrency.txt ../ProjectGtstTestConcurrency-build-desktop/./gtst_test_concurrency --docroot=. --http-address=0.0.0.0 --http-port=8080<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/memcheck.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/memcheck.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
valgrind --leak-check=full -v --show-reachable=yes --log-file=memcheck.txt ../ProjectGtst-build-desktop/./gtst<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/profile.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/profile.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
echo "Removing user file"<br/>
rm *.pro.user<br/>
<br/>
echo "Creating profile executable"<br/>
qmake -config debug<br/>
make clean<br/>
make<br/>
<br/>
echo "Removing makefile"<br/>
rm Makefile<br/>
<br/>
echo "Removing object files"<br/>
rm *.o<br/>
<br/>
echo "Start the application"<br/>
./gtst<br/>
<br/>
echo "Analyse the gprof results"<br/>
gprof gtst &gt; gprof.txt<br/>
<br/>
echo "Remove temporary gprof file"<br/>
rm gmon.out<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/ptrcheck.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/ptrcheck.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
valgrind --tool=exp-ptrcheck ./gtst<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectGtst/zip.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectGtst/zip.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
#zip packs all the files to port into a single .zip file,<br/>
#minicking the same folder structure<br/>
#Folder structure<br/>
# *<br/>
#&nbsp;&nbsp;* Classes<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppAbout<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppCopy_if<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppCounter<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppFuzzy_equal_to<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppIpAddress<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppLed<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppLedWidget<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppMultipleChoiceQuestion<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppMultipleChoiceQuestionDialog<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppOpenQuestion<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppOpenQuestionDialog<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppQuestion<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppQuestionDialog<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppRainbow<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppRectangle<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppShape<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppShapeWidget<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppStopwatch<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppSurvey<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppTrace<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppWidget<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppWtAboutDialog<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppWtAutoConfig<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppWtGroupWidget<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppWtLedWidget<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppWtMultipleChoiceQuestionDialog<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppWtOpenQuestionDialog<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppWtQuestionDialog<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppWtSelectFileDialog<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppWtServerPusher<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppWtShapeGroupWidget<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppWtShapeWidget<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* CppWtTimedServerPusher<br/>
#&nbsp;&nbsp;* Libraries<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* fparser4.4.3<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* extrasrc<br/>
#&nbsp;&nbsp;* Projects<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* ProjectGtst<br/>
echo "Creating a sloccount file"<br/>
sloccount ../ProjectGtst &gt; ProjectGtstSloccount.txt<br/>
<br/>
echo "Creating documentation"<br/>
doxygen doxygen_config.txt<br/>
<br/>
echo "Converting DIA to PNG"<br/>
dia --filter=png ProjectGtstArchitectureServer.dia<br/>
dia --filter=png ProjectGtstArchitectureMenuDialog.dia<br/>
<br/>
echo "Converting ProjectGtstToDo.odt to ProjectGtstToDo.pdf (for Windows users)"<br/>
unoconv -f pdf ProjectGtstToDo.odt<br/>
<br/>
echo "Removing user information"<br/>
rm ProjectGtst.pro.user<br/>
<br/>
echo "Removing old log files"<br/>
rm log*.txt<br/>
<br/>
echo "Removing old parameter files"<br/>
rm parameters*.txt<br/>
<br/>
echo "Removing old temporary"<br/>
rm tmp.txt<br/>
<br/>
echo "Removing old output trace file"<br/>
rm trace_out.txt<br/>
<br/>
echo "Removing XML files"<br/>
rm *.xml<br/>
<br/>
echo "Removing some temp files from other tools"<br/>
rm copy.txt<br/>
rm tmp.txt<br/>
<br/>
echo "Mimicking file structure"<br/>
mkdir temp_zip<br/>
mkdir temp_zip/Classes<br/>
mkdir temp_zip/Classes/CppAbout<br/>
mkdir temp_zip/Classes/CppCopy_if<br/>
mkdir temp_zip/Classes/CppCounter<br/>
mkdir temp_zip/Classes/CppFuzzy_equal_to<br/>
mkdir temp_zip/Classes/CppIpAddress<br/>
mkdir temp_zip/Classes/CppLed<br/>
mkdir temp_zip/Classes/CppLedWidget<br/>
mkdir temp_zip/Classes/CppMultipleChoiceQuestion<br/>
mkdir temp_zip/Classes/CppMultipleChoiceQuestionDialog<br/>
mkdir temp_zip/Classes/CppOpenQuestion<br/>
mkdir temp_zip/Classes/CppOpenQuestionDialog<br/>
mkdir temp_zip/Classes/CppQuestion<br/>
mkdir temp_zip/Classes/CppQuestionDialog<br/>
mkdir temp_zip/Classes/CppRainbow<br/>
mkdir temp_zip/Classes/CppRectangle<br/>
mkdir temp_zip/Classes/CppShape<br/>
mkdir temp_zip/Classes/CppShapeWidget<br/>
mkdir temp_zip/Classes/CppStopwatch<br/>
mkdir temp_zip/Classes/CppSurvey<br/>
mkdir temp_zip/Classes/CppTrace<br/>
mkdir temp_zip/Classes/CppWidget<br/>
mkdir temp_zip/Classes/CppWtAboutDialog<br/>
mkdir temp_zip/Classes/CppWtAutoConfig<br/>
mkdir temp_zip/Classes/CppWtGroupWidget<br/>
mkdir temp_zip/Classes/CppWtLedWidget<br/>
mkdir temp_zip/Classes/CppWtMultipleChoiceQuestionDialog<br/>
mkdir temp_zip/Classes/CppWtOpenQuestionDialog<br/>
mkdir temp_zip/Classes/CppWtQuestionDialog<br/>
mkdir temp_zip/Classes/CppWtSelectFileDialog<br/>
mkdir temp_zip/Classes/CppWtServerPusher<br/>
mkdir temp_zip/Classes/CppWtShapeGroupWidget<br/>
mkdir temp_zip/Classes/CppWtShapeWidget<br/>
mkdir temp_zip/Classes/CppWtTimedServerPusher<br/>
mkdir temp_zip/Libraries<br/>
mkdir temp_zip/Libraries/fparser4.4.3<br/>
mkdir temp_zip/Libraries/fparser4.4.3/extrasrc<br/>
mkdir temp_zip/Projects<br/>
mkdir temp_zip/Projects/ProjectGtst<br/>
<br/>
echo "Copying files"<br/>
cp ../../Classes/CppAbout/*.* temp_zip/Classes/CppAbout<br/>
cp ../../Classes/CppCopy_if/*.* temp_zip/Classes/CppCopy_if<br/>
cp ../../Classes/CppCounter/*.* temp_zip/Classes/CppCounter<br/>
cp ../../Classes/CppFuzzy_equal_to/*.* temp_zip/Classes/CppFuzzy_equal_to<br/>
cp ../../Classes/CppIpAddress/*.* temp_zip/Classes/CppIpAddress<br/>
cp ../../Classes/CppLed/*.* temp_zip/Classes/CppLed<br/>
cp ../../Classes/CppLedWidget/*.* temp_zip/Classes/CppLedWidget<br/>
cp ../../Classes/CppMultipleChoiceQuestion/*.* temp_zip/Classes/CppMultipleChoiceQuestion<br/>
cp ../../Classes/CppMultipleChoiceQuestionDialog/*.* temp_zip/Classes/CppMultipleChoiceQuestionDialog<br/>
cp ../../Classes/CppOpenQuestion/*.* temp_zip/Classes/CppOpenQuestion<br/>
cp ../../Classes/CppOpenQuestionDialog/*.* temp_zip/Classes/CppOpenQuestionDialog<br/>
cp ../../Classes/CppQuestion/*.* temp_zip/Classes/CppQuestion<br/>
cp ../../Classes/CppQuestionDialog/*.* temp_zip/Classes/CppQuestionDialog<br/>
cp ../../Classes/CppRainbow/*.* temp_zip/Classes/CppRainbow<br/>
cp ../../Classes/CppRectangle/*.* temp_zip/Classes/CppRectangle<br/>
cp ../../Classes/CppShape/*.* temp_zip/Classes/CppShape<br/>
cp ../../Classes/CppShapeWidget/*.* temp_zip/Classes/CppShapeWidget<br/>
cp ../../Classes/CppStopwatch/*.* temp_zip/Classes/CppStopwatch<br/>
cp ../../Classes/CppSurvey/*.* temp_zip/Classes/CppSurvey<br/>
cp ../../Classes/CppTrace/*.* temp_zip/Classes/CppTrace<br/>
cp ../../Classes/CppWidget/*.* temp_zip/Classes/CppWidget<br/>
cp ../../Classes/CppWtAboutDialog/*.* temp_zip/Classes/CppWtAboutDialog<br/>
cp ../../Classes/CppWtAutoConfig/*.* temp_zip/Classes/CppWtAutoConfig<br/>
cp ../../Classes/CppWtGroupWidget/*.* temp_zip/Classes/CppWtGroupWidget<br/>
cp ../../Classes/CppWtLedWidget/*.* temp_zip/Classes/CppWtLedWidget<br/>
cp ../../Classes/CppWtMultipleChoiceQuestionDialog/*.* temp_zip/Classes/CppWtMultipleChoiceQuestionDialog<br/>
cp ../../Classes/CppWtOpenQuestionDialog/*.* temp_zip/Classes/CppWtOpenQuestionDialog<br/>
cp ../../Classes/CppWtQuestionDialog/*.* temp_zip/Classes/CppWtQuestionDialog<br/>
cp ../../Classes/CppWtSelectFileDialog/*.* temp_zip/Classes/CppWtSelectFileDialog<br/>
cp ../../Classes/CppWtServerPusher/*.* temp_zip/Classes/CppWtServerPusher<br/>
cp ../../Classes/CppWtShapeGroupWidget/*.* temp_zip/Classes/CppWtShapeGroupWidget<br/>
cp ../../Classes/CppWtShapeWidget/*.* temp_zip/Classes/CppWtShapeWidget<br/>
cp ../../Classes/CppWtTimedServerPusher/*.* temp_zip/Classes/CppWtTimedServerPusher<br/>
<br/>
cp ../../Libraries/fparser4.4.3/*.* temp_zip/Libraries/fparser4.4.3<br/>
cp ../../Libraries/fparser4.4.3/extrasrc/*.* temp_zip/Libraries/fparser4.4.3/extrasrc<br/>
<br/>
cp ../../Projects/ProjectGtst/*.* temp_zip/Projects/ProjectGtst<br/>
<br/>
FILENAME=ProjectGtstSource_1_2<br/>
ZIP_FILENAME=$FILENAME".zip"<br/>
<br/>
echo "Remove previous zip"<br/>
rm $ZIP_FILENAME<br/>
<br/>
#echo "Compressing files"<br/>
cd temp_zip<br/>
zip -r $FILENAME Classes<br/>
zip -r $FILENAME Libraries<br/>
zip -r $FILENAME Projects<br/>
cd ..<br/>
cp "temp_zip/"$ZIP_FILENAME $ZIP_FILENAME<br/>
<br/>
echo "Cleaning up"<br/>
rm temp_zip/Classes/CppAbout/*.*<br/>
rm temp_zip/Classes/CppCopy_if/*.*<br/>
rm temp_zip/Classes/CppCounter/*.*<br/>
rm temp_zip/Classes/CppFuzzy_equal_to/*.*<br/>
rm temp_zip/Classes/CppIpAddress/*.*<br/>
rm temp_zip/Classes/CppLed/*.*<br/>
rm temp_zip/Classes/CppLedWidget/*.*<br/>
rm temp_zip/Classes/CppMultipleChoiceQuestion/*.*<br/>
rm temp_zip/Classes/CppMultipleChoiceQuestionDialog/*.*<br/>
rm temp_zip/Classes/CppOpenQuestion/*.*<br/>
rm temp_zip/Classes/CppOpenQuestionDialog/*.*<br/>
rm temp_zip/Classes/CppQuestion/*.*<br/>
rm temp_zip/Classes/CppQuestionDialog/*.*<br/>
rm temp_zip/Classes/CppRainbow/*.*<br/>
rm temp_zip/Classes/CppRectangle/*.*<br/>
rm temp_zip/Classes/CppShape/*.*<br/>
rm temp_zip/Classes/CppShapeWidget/*.*<br/>
rm temp_zip/Classes/CppStopwatch/*.*<br/>
rm temp_zip/Classes/CppSurvey/*.*<br/>
rm temp_zip/Classes/CppTrace/*.*<br/>
rm temp_zip/Classes/CppWidget/*.*<br/>
rm temp_zip/Classes/CppWtAboutDialog/*.*<br/>
rm temp_zip/Classes/CppWtAutoConfig/*.*<br/>
rm temp_zip/Classes/CppWtGroupWidget/*.*<br/>
rm temp_zip/Classes/CppWtLedWidget/*.*<br/>
rm temp_zip/Classes/CppWtMultipleChoiceQuestionDialog/*.*<br/>
rm temp_zip/Classes/CppWtOpenQuestionDialog/*.*<br/>
rm temp_zip/Classes/CppWtQuestionDialog/*.*<br/>
rm temp_zip/Classes/CppWtSelectFileDialog/*.*<br/>
rm temp_zip/Classes/CppWtServerPusher/*.*<br/>
rm temp_zip/Classes/CppWtShapeGroupWidget/*.*<br/>
rm temp_zip/Classes/CppWtShapeWidget/*.*<br/>
rm temp_zip/Classes/CppWtTimedServerPusher/*.*<br/>
rmdir temp_zip/Classes/CppAbout<br/>
rmdir temp_zip/Classes/CppCopy_if<br/>
rmdir temp_zip/Classes/CppCounter<br/>
rmdir temp_zip/Classes/CppFuzzy_equal_to<br/>
rmdir temp_zip/Classes/CppIpAddress<br/>
rmdir temp_zip/Classes/CppLed<br/>
rmdir temp_zip/Classes/CppLedWidget<br/>
rmdir temp_zip/Classes/CppMultipleChoiceQuestion<br/>
rmdir temp_zip/Classes/CppMultipleChoiceQuestionDialog<br/>
rmdir temp_zip/Classes/CppOpenQuestion<br/>
rmdir temp_zip/Classes/CppOpenQuestionDialog<br/>
rmdir temp_zip/Classes/CppQuestion<br/>
rmdir temp_zip/Classes/CppQuestionDialog<br/>
rmdir temp_zip/Classes/CppRainbow<br/>
rmdir temp_zip/Classes/CppRectangle<br/>
rmdir temp_zip/Classes/CppShape<br/>
rmdir temp_zip/Classes/CppShapeWidget<br/>
rmdir temp_zip/Classes/CppStopwatch<br/>
rmdir temp_zip/Classes/CppSurvey<br/>
rmdir temp_zip/Classes/CppTrace<br/>
rmdir temp_zip/Classes/CppWidget<br/>
rmdir temp_zip/Classes/CppWtAboutDialog<br/>
rmdir temp_zip/Classes/CppWtAutoConfig<br/>
rmdir temp_zip/Classes/CppWtGroupWidget<br/>
rmdir temp_zip/Classes/CppWtLedWidget<br/>
rmdir temp_zip/Classes/CppWtMultipleChoiceQuestionDialog<br/>
rmdir temp_zip/Classes/CppWtOpenQuestionDialog<br/>
rmdir temp_zip/Classes/CppWtQuestionDialog<br/>
rmdir temp_zip/Classes/CppWtSelectFileDialog<br/>
rmdir temp_zip/Classes/CppWtServerPusher<br/>
rmdir temp_zip/Classes/CppWtShapeGroupWidget<br/>
rmdir temp_zip/Classes/CppWtShapeWidget<br/>
rmdir temp_zip/Classes/CppWtTimedServerPusher<br/>
rmdir temp_zip/Classes<br/>
<br/>
rm temp_zip/Libraries/fparser4.4.3/extrasrc/*.*<br/>
rm temp_zip/Libraries/fparser4.4.3/*.*<br/>
rmdir temp_zip/Libraries/fparser4.4.3/extrasrc<br/>
rmdir temp_zip/Libraries/fparser4.4.3<br/>
rmdir temp_zip/Libraries<br/>
<br/>
rm temp_zip/Projects/ProjectGtst/*.*<br/>
rmdir temp_zip/Projects/ProjectGtst<br/>
rmdir temp_zip/Projects<br/>
<br/>
rm temp_zip/*.*<br/>
rmdir temp_zip<br/>
echo "Done"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
