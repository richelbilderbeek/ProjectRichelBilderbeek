#include <iostream>
#include <vector>
#include <string>
#include <assert>
#include <algorithm>

//From http://www.richelbilderbeek.nl
const std::vector<std::string> SeperateString(const std::string& input, const char& seperator)
{
  std::vector<std::string> v;
  typedef std::string::const_iterator Iterator;
  const Iterator end = input.end();
  Iterator i1 = input.begin();
  {
    //Copy until first comma
    Iterator i2 = std::find(i1,end,',');
    assert(i1!=i2);
    std::string s;
    std::copy(i1,i2,std::back_inserter(s));
    v.push_back(s);
    i1 = i2;
  }
  while (i1!=end)
  {
    //Copy from comma to (comma || end)
    Iterator i2 = std::find(i1 + 1,end,',');
    assert(i1!=i2);
    assert(i2 == end || *i2 == ',');
    std::string s;
    std::copy(i1+1,i2,std::back_inserter(s));
    v.push_back(s);
    i1 = i2;
  }
  return v;
}

//From http://www.richelbilderbeek.nl
const std::vector<std::string> SeperateStringOld(std::string input, const char& seperator)
{
  assert(input.empty()==false);
  assert(input[0]!=seperator);
  assert(input[input.size()-1]!=seperator);

  std::vector<std::string> result;
  int pos = 0;
  while(pos<static_cast<int>(input.size()))
  {
    if (input[pos]==seperator)
    {
      const std::string found = input.substr(0,pos);
      result.push_back(found);
      input = input.substr(pos+1,input.size()-pos);
      pos = 0;
    }
    ++pos;
  }
  result.push_back(input);
  return result;
}

//From http://www.richelbilderbeek.nl
const std::vector<std::string> SeperateString(std::string input, const std::string& seperator)
{
  assert(input.empty()==false);
  assert(input.substr(0,seperator.size()) != seperator);
  assert(input.substr(input.size()-seperator.size(),seperator.size())!=seperator);
  std::vector<std::string> result;
  int pos = 0;
  while(pos<static_cast<int>(input.size()))
  {
    if (input.substr(pos,seperator.size())==seperator)
    {
      const std::string found = input.substr(0,pos);
      result.push_back(found);
      input = input.substr(pos+seperator.size(),input.size()-pos);
      pos = 0;
    }
    ++pos;
  }
  result.push_back(input);
  return result;
}

//From http://www.richelbilderbeek.nl
void TestSeperateString1()
{
  {
    //#define THESE_WILL_FAIL_AND_SHOULD_FAIL
    #ifdef THESE_WILL_FAIL_AND_SHOULD_FAIL
    //Empty
    const std::vector<std::string> v1 = SeperateString("",',');
    //Seperator only
    const std::vector<std::string> v2 = SeperateString(",",',');
    //Single input, leading seperator
    const std::vector<std::string> v3 = SeperateString(",a",',');
    //Single input, trailing seperator
    const std::vector<std::string> v4 = SeperateString("a,",',');
    //Two inputs, leading seperator
    const std::vector<std::string> v5 = SeperateString(",a,a",',');
    //Two inputs, trailing seperator
    const std::vector<std::string> v6 = SeperateString("a,a,",',');
    #endif
  }

  { //Single input, seperator of type char
    const std::vector<std::string> v = SeperateString("a",',');
    assert(v[0]=="a");
  }
  { //Two inputs, seperator of type char
    const std::vector<std::string> v = SeperateString("a,b",',');
    assert(v[0]=="a");
    assert(v[1]=="b");
  }
  { //Five inputs, seperator of type char
    const std::vector<std::string> v = SeperateString("a,bb,ccc,dddd,eeeee",',');
    assert(v[0]=="a");
    assert(v[1]=="bb");
    assert(v[2]=="ccc");
    assert(v[3]=="dddd");
    assert(v[4]=="eeeee");
  }
  { //Three inputs, of which one empty, seperator of type char
    const std::vector<std::string> v = SeperateString("a, ,ccc",',');
    assert(v[0]=="a");
    assert(v[1]==" ");
    assert(v[2]=="ccc");
  }
  { //Two inputs, of which one starts with a separator, seperator of type char
    //Note: avoid this kind of input
    const std::vector<std::string> v = SeperateString("a,,ccc",',');
    assert(v[0]=="a");
    assert(v[1]==""); //NOTE: Differs from other SeperateString function!
    assert(v[2]=="ccc");
  }
}

//From http://www.richelbilderbeek.nl
void TestSeperateString2()
{
  {
    //#define THESE_WILL_FAIL_AND_SHOULD_FAIL
    #ifdef THESE_WILL_FAIL_AND_SHOULD_FAIL
    //Empty
    const std::vector<std::string> v1 = SeperateStringOld("",',');
    //Seperator only
    const std::vector<std::string> v2 = SeperateStringOld(",",',');
    //Single input, leading seperator
    const std::vector<std::string> v3 = SeperateStringOld(",a",',');
    //Single input, trailing seperator
    const std::vector<std::string> v4 = SeperateStringOld("a,",',');
    //Two inputs, leading seperator
    const std::vector<std::string> v5 = SeperateStringOld(",a,a",',');
    //Two inputs, trailing seperator
    const std::vector<std::string> v6 = SeperateStringOld("a,a,",',');
    #endif
  }

  { //Single input, seperator of type char
    const std::vector<std::string> v = SeperateStringOld("a",',');
    assert(v[0]=="a");
  }
  { //Two inputs, seperator of type char
    const std::vector<std::string> v = SeperateStringOld("a,b",',');
    assert(v[0]=="a");
    assert(v[1]=="b");
  }
  { //Five inputs, seperator of type char
    const std::vector<std::string> v = SeperateStringOld("a,bb,ccc,dddd,eeeee",',');
    assert(v[0]=="a");
    assert(v[1]=="bb");
    assert(v[2]=="ccc");
    assert(v[3]=="dddd");
    assert(v[4]=="eeeee");
  }
  { //Three inputs, of which one empty, seperator of type char
    const std::vector<std::string> v = SeperateStringOld("a, ,ccc",',');
    assert(v[0]=="a");
    assert(v[1]==" ");
    assert(v[2]=="ccc");
  }
  { //Two inputs, of which one starts with a separator, seperator of type char
    //Note: avoid this kind of input
    const std::vector<std::string> v = SeperateStringOld("a,,ccc",',');
    assert(v[0]=="a");
    assert(v[1]==",ccc"); //NOTE: Differs from other SeperateString function!
  }
}

//From http://www.richelbilderbeek.nl
void TestSeperateString3()
{
  {
    //#define THESE_WILL_FAIL_AND_SHOULD_FAIL
    #ifdef THESE_WILL_FAIL_AND_SHOULD_FAIL
    //Empty
    const std::vector<std::string> v1 = SeperateString("",",");
    //Seperator only
    const std::vector<std::string> v2 = SeperateString(",",",");
    //Single input, leading seperator
    const std::vector<std::string> v3 = SeperateString(",a",",");
    //Single input, trailing seperator
    const std::vector<std::string> v4 = SeperateString("a,",",");
    //Two inputs, leading seperator
    const std::vector<std::string> v5 = SeperateString(",a,a",",");
    //Two inputs, trailing seperator
    const std::vector<std::string> v6 = SeperateString("a,a,",",");
    #endif
  }
  { //Single input, seperator of type std::string
    const std::vector<std::string> v = SeperateString("a",",");
    assert(v[0]=="a");
  }
  { //Two inputs, seperator of type std::string
    const std::vector<std::string> v = SeperateString("a,b",",");
    assert(v[0]=="a");
    assert(v[1]=="b");
  }
  { //Five inputs, seperator of type std::string
    const std::vector<std::string> v = SeperateString("a,bb,ccc,dddd,eeeee",",");
    assert(v[0]=="a");
    assert(v[1]=="bb");
    assert(v[2]=="ccc");
    assert(v[3]=="dddd");
    assert(v[4]=="eeeee");
  }
  { //Three inputs, of which one empty, seperator of type std::string
    const std::vector<std::string> v = SeperateString("a, ,ccc",",");
    assert(v[0]=="a");
    assert(v[1]==" ");
    assert(v[2]=="ccc");
  }
  { //Two inputs, of which one starts with a separator, seperator of type std::string
    //Note: avoid this kind of input
    const std::vector<std::string> v = SeperateString("a,,ccc",",");
    assert(v[0]=="a");
    assert(v[1]==",ccc");
  }
}

//From http://www.richelbilderbeek.nl
int main()
{
  TestSeperateString1();
  TestSeperateString2();
  TestSeperateString3();

  std::cout << "All tests have succeeded" << std::endl;
  std::cin.get();
}