<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Binder</title>
  <meta name="description" content="C++ Binder"/>
  <meta name="keywords" content="C++ Binder code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBinder.htm">Binder</a></h1>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>A <a href="CppBinder.htm">binder</a> is a type of <a href="CppAdapter.htm">adapter</a>
that allows a two-argument function object to be used as a single-argument
function by binding one argument to a value [1]. <a href="CppBinder.htm">Binders</a> are useful when
using <a href="CppAlgorithm.htm">algorithms</a>.</p>
<p>&nbsp;</p>
<p>There are two <a href="CppStl.htm">STL</a> <a href="CppBinder.htm">binders</a>:</p>
<ul>
  <li><a href="CppBind1st.htm">std::bind1st</a></li>
  <li><a href="CppBind2nd.htm">std::bind2nd</a></li>
</ul>
<p>&nbsp;</p>
<p>There is one <a href="CppBoost.htm">Boost</a> <a href="CppBinder.htm">binder</a>:</p>
<ul>
  <li><a href="CppBind.htm">boost::bind</a></li>
</ul>
<p>&nbsp;</p>
<p>Using <a href="CppBind.htm">boost::bind</a> results in easier to read and shorter code.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Replacing a <a href="CppFor.htm">for</a> loop by an <a href="CppAlgorithm.htm">algorithm</a> using <a href="CppBind2nd.htm">std::bind2nd</a> and <a href="CppBind.htm">boost::bind</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filewUmrvJ.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWidget.htm">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoItOften(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n) <b><a href="CppConst.htm">const</a></b> { <a href="CppOperatorDivide.htm">/</a>* <b><a href="CppDo.htm">do</a></b> it n <a href="CppTime.htm">time</a>s <a href="CppComment.htm">*/</a> }<br/>
};<br/>
 <br/>
<b><a href="CppVoid.htm">void</a></b> DoItOften(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppWidget.htm">Widget</a>&gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i].DoItOften(n);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileM6xEGn.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWidget.htm">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoItOften(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n) <b><a href="CppConst.htm">const</a></b> { <a href="CppOperatorDivide.htm">/</a>* <b><a href="CppDo.htm">do</a></b> it n <a href="CppTime.htm">time</a>s <a href="CppComment.htm">*/</a> }<br/>
};<br/>
 <br/>
<b><a href="CppVoid.htm">void</a></b> DoItOften(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppWidget.htm">Widget</a>&gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind2nd.htm">std::bind2nd</a>(<a href="CppMem_fun.htm">std::mem_fun_ref</a>(&amp;<a href="CppWidget.htm">Widget</a>::DoItOften),n)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileOPPXUF.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWidget.htm">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoItOften(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n) <b><a href="CppConst.htm">const</a></b> { <a href="CppOperatorDivide.htm">/</a>* <b><a href="CppDo.htm">do</a></b> it n <a href="CppTime.htm">time</a>s <a href="CppComment.htm">*/</a> }<br/>
};<br/>
 <br/>
<b><a href="CppVoid.htm">void</a></b> DoItOften(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppWidget.htm">Widget</a>&gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>(&amp;<a href="CppWidget.htm">Widget</a>::DoItOften, _1, n)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li>
    <a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN:
    0-201-88954-4. Chapter 18.4.4: 'A binder allows a two-argument function object
    to be used as a single-argument function by binding one argument to a value.'
  </li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>



