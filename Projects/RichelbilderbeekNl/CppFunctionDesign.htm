<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>function design</title>
  <meta name="description" content="C++ function design"/>
  <meta name="keywords" content="C++ function design code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppFunctionDesign.htm">function design</a></h1>
<p>&nbsp;</p>
<p><a href="CppFunctionDesign.htm">Function design</a> is the correct design of a <a href="CppFunction.htm">function</a>. <a href="CppExerciseCorrectFunctionDeclarations.htm">Exercise #2: correct function declarations</a> is an exercise in correct <a href="CppFunctionDesign.htm">function design</a>.</p>
<p>&nbsp;</p>
<p>The most important to get correct is the <a href="CppFunctionDeclaration.htm">function declaration</a>.</p>
<p>&nbsp;</p>
<p>Here is some <a href="CppAdvice.htm">advice</a>:</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>General</h2>
<p>&nbsp;</p>
<ul>
  <li>Avoid writing long <a href="CppFunction.htm">functions</a> [1-2,5,35]</li>
  <li>Avoid using <a href="CppFunction.htm">functions</a> with a large number of arguments [36]</li>
  <li>Prefer functions over <a href="CppMacro.htm">macros</a> [23,24]</li>
  <li>If a function may have to be evaluated at compile time, declare it <a href="CppConstexpr.htm">constexpr</a> [7]</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>The name of the function should say what it does</h2>
<p>&nbsp;</p>
<ul>
  <li>Do use names like <a href="CppSwap.htm">Swap</a>, <a href="CppGetDistance.htm">GetDistance</a>, <a href="CppStrToInt.htm">StrToInt</a></li>
  <li>Do not use names like DoIt, Transmogrify, Stuff</li>
  <li>Exceptions: Transmogrify is a function name commonly used in the literature to denote a function you are not aware of what it is doing</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>A function should perform a single logical operation [4]</h2>
<p>&nbsp;</p>
<ul>
  <li>Do not use names with 'And' in it, like SwapAndGetMean</li>
  <li>Do use two functions instead, Swap and GetMean</li>
  <li>Exceptions: some mathematical functions can cooperate and so improve runtime speed: <a href="CppMeanAndStdDev.htm">MeanAndStdDev</a> executes faster then calling the seperate functions for Mean and StdDev</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>The <a href="CppReturnType.htm">return type</a> is expected from the name of the function</h2>
<p>&nbsp;</p>
<ul>
  <li>If a function cannot return, mark it <a href="CppNoreturn.htm">[[noreturn]]</a> [8]</li>
  <li>Do give a function a <a href="CppVoid.htm">void</a> <a href="CppReturnType.htm">return type</a> when it has no <a href="CppReturnType.htm">return type</a></li>
  <li>Do return a non-<a href="CppPointer.htm">pointer</a> non-<a href="CppReference.htm">reference</a> object when a function is expected to always execute successfully on the assumptions that its <a href="CppArgument.htm">arguments</a> are valid</li>
  <li>
    Return a result as a return value rather than modifying an object through an argument [11]
  </li>
  <li>
    Do return a <a href="CppPointer.htm">pointer</a> (or better: a <a href="CppSmartPointer.htm">smart pointer</a>) to a 
    <a href="CppDataType.htm">data type</a> when the <a href="CppReturnType.htm">return type</a> can be <a href="CppNull.htm">null</a>, that is: empty. If the 
	<a href="CppPointer.htm">pointer</a> needs to be read-only, make it <a href="CppConst.htm">const</a> (for 
	example '<a href="CppConst.htm">const</a> T * <a href="CppConst.htm">const</a> GetT()', where GetT is a function that returns a pointer to a T)
  </li>
  <li>
    Do not make a function return a <a href="CppReference.htm">reference</a> to a function's <a href="CppLocal.htm">local</a> variable [6,31], this leads to undefined behavior
  </li>
  <li>
    Do not make a function return an error code, use <a href="CppException.htm">exceptions</a> instead [32]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>The function arguments are expected from the name of the function</h2>
<p>&nbsp;</p>
<ul>
  <li>
    A function declared with an empty parameter list takes no arguments [37]. Or: write 'int f()' instead of 'int f(void)' [37]
  </li>
  <li>
    Prefer pass-by-reference-to-const to pass-by-value [30]
  </li>
  <li>
    Use pass-by-non-const-reference only if you have to [14]
  </li>
  <li>
    Do use a non-<a href="CppPointer.htm">pointer</a> <a href="CppReference.htm">reference</a> object for expensive-to-copy data types, 
	like <a href="CppString.htm">std::string</a>, <a href="CppVector.htm">std::vector</a>&lt;int&gt; or Database. Make the 
	argument <a href="CppConst.htm">const</a> if it must be marked read-only [10]
  </li>
  <li>
    Do use a non-<a href="CppPointer.htm">pointer</a> non-<a href="CppReference.htm">reference</a> object for standard data types like int [9]. 
	Make the argument <a href="CppConst.htm">const</a> if it must be marked read-only
  </li>
  <li>
    Do use a <a href="CppPointer.htm">pointer</a> (or better: a <a href="CppSmartPointer.htm">smart pointer</a>) to a 
	<a href="CppDataType.htm">data type</a> when the <a href="CppArgument.htm">argument</a> can be <a href="CppNullptr.htm">nullptr</a>/<a href="CppNull.htm">null</a>/empty [13]. 
	If the <a href="CppPointer.htm">pointer</a> needs to be read-only, 
	make it <a href="CppConst.htm">const</a> (for example 'void CoutT(<a href="CppConst.htm">const</a> T * <a href="CppConst.htm">const</a> t)', where CoutT is a function that uses std::cout on a T)
  </li>
  <li>
    Avoid passing <a href="CppArray.htm">arrays</a> as <a href="CppPointer.htm">pointers</a> [16]
  </li>
  <li>
    Assume that a <a href="CppCharPointer.htm">char*</a> or a const <a href="CppCharPointer.htm">char*</a> <a href="CppArgument.htm">argument</a> points to a C-style string [15]
  </li>
  <li>
    Use rvalue references to implement move and forwarding [12]
  </li>
  <li>
    Pass a homogeneous list of unknown length as an <a href="CppInitializer_list.htm">std::initializer_list</a> or as some other <a href="CppContainer.htm">container</a> [17]
  </li>
  <li>
    Avoid unspecified numbers of arguments (...) [18]
  </li>
  <li>
    Prefer to pass function objects (including lambdas) and virtual functions to pointers to functions [22]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Specify preconditions and postconditions for your functions [21,25-28]</h2>
<p>&nbsp;</p>
<ul>
  <li>
    Do use <a href="CppAssert.htm">assert</a> and <a href="CppException.htm">exceptions</a> 
    to make clear to the client which input the function cannot handle. For example, the square root of a negative number does not exist
  </li>
  <li>
    Do not use error codes as return types, use <a href="CppException.htm">exceptions</a> instead [32]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Exception handling</h2>
<p>&nbsp;</p>
<ul>
  <li>
    Don't try to <a href="CppCatch.htm">catch</a> every <a href="CppException.htm">exception</a> in every <a href="CppFunction.htm">function</a> [29]
  </li>
  <li>
    Assume that every <a href="CppException.htm">exception</a> that can be <a href="CppThrow.htm">thrown</a> by a 
    <a href="CppFunction.htm">function</a> will be <a href="CppThrow.htm">thrown</a> [33]
  </li>
  <li>
    If a <a href="CppFunction.htm">function</a> may not <a href="CppThrow.htm">throw</a>, 
    <a href="CppDeclaration.htm">declare</a> it <a href="CppNoexcept.htm">noexcept</a> [34]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Function overloading</h2>
<p>&nbsp;</p>
<ul>
  <li>Use overloading when functions perform conceptually the same task on different types [19]</li>
  <li>When overloading on integers, provide functions to eliminate common ambiguities [20]</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 20: 'Avoid long functions. Avoid deep nesting'</li>
  <li><!--  2 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. AV Rule 1: 'Any one function (or method) will contain no more than 200 logical source lines of code.'</li>
  <li><!--  3 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[1] "Package meaningful operations as carefully named functions'</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[2] A function should perform a single logical operation'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[3] Keep functions short'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[4] Don't return pointers or references to local variables'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[5] If a function may have to be evaluated at compile time, declare it constexpr'</li>
  <li><!--  8 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[6] If a function cannot return, mark it [[noreturn]]'</li>
  <li><!--  9 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[7] Use pass-by-value for small objects'</li>
  <li><!-- 10 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[8] Use pass-by-const-reference to pass large values that you don't need to modify'</li>
  <li><!-- 11 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[9] Return a result as a return value rather than modifying an object through an argument'</li>
  <li><!-- 12 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[10] Use rvalue references to implement move and forwarding'</li>
  <li><!-- 13 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[11] Pass a pointer if "no object" is a valid alternative (and represent "no object" by nullptr)'</li>
  <li><!-- 14 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[12] Use pass-by-non-const-reference only if you have to'</li>
  <li><!-- 15 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[14] Assume that a char* or a const char* argument points to a C-style string'</li>
  <li><!-- 16 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[15] Avoid passing arrays as pointers'</li>
  <li><!-- 17 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[16] Pass a homogeneous list of unknown length as an initializer_list<T> (or as some other container)'</li>
  <li><!-- 18 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[17] Avoid unspecified numbers of arguments (...)'</li>
  <li><!-- 19 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[18] Use overloading when functions perform conceptually the same task on different types'</li>
  <li><!-- 20 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[19] When overloading on integers, provide functions to eliminate common ambiguities'</li>
  <li><!-- 21 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[20] Specify preconditions and postconditions for your functions'</li>
  <li><!-- 22 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[21] Prefer function objects (including lambdas) and virtual functions to pointers to functions'</li>
  <li><!-- 23 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[22] Avoid macros'</li>
  <li><!-- 24 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Item 16: 'Avoid macro's'.</li>
  <li><!-- 25 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 68: 'Assert liberally to document internal assumptions and invariants'</li>
  <li><!-- 26 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Advice 24.5.18: 'Explicitly express preconditions, postconditions, and other assertions as assertions'</li>
  <li><!-- 27 -->Steve McConnell. Code Complete (2nd edition). 2004. ISBN: -735619670. Chapter 8.2 'Assertions', paragraph 'Guidelines for using asserts': 'Use assertions to document and verify preconditions and postconditions'</li>
  <li><!-- 28 -->Steve McConnell. Code Complete (2nd edition). 2004. ISBN: -735619670. Chapter 8.2 'Assertions', paragraph 'Guidelines for using asserts': 'Use assertions for conditions that should never occur'.</li>
  <li><!-- 29 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[8] 'Don't try to catch every exception in every function'</li>
  <li><!-- 30 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 20: Prefer pass-by-reference-to-const to pass-by-value.</li>
  <li><!-- 31 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 21: Don't try to return a reference when you must return an object.</li>
  <li><!-- 32 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 386: '[3] Use exceptions for error handling'</li>
  <li><!-- 33 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[33] Assume that every exception that can be thrown by a function will be thrown'</li>
  <li><!-- 34 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice, page 387: '[23] If your function may not throw, declare it noexcept'</li>
  <li><!-- 35 --><a href="CppBruceEckel.htm">Bruce Eckel</a>. Thinking in C++, second edition, volume 1. 2000. ISBN: 0-13-979809-9. Chapter B: Programming Guidelines. Item 15: 'Watch for long member function definitions. A function that is long and complicated is difficult and expensive to maintain, and is probably trying to do too much all by itself. If you see such a function, it indicates that, at the least, it should be broken up into multiple functions. It may also suggest the creation of a new class.'</li>
  <li><!-- 36 --><a href="CppBruceEckel.htm">Bruce Eckel</a>. Thinking in C++, second edition, volume 1. 2000. ISBN: 0-13-979809-9. Chapter B: Programming Guidelines. Item 16: 'Watch for long argument lists. Function calls then become difficult to write, read and maintain. Instead, try to move the member function to a class where it is (more) appropriate, and/or pass objects in as arguments.'</li>
  <li><!-- 37 --><!-- C++14 -->Working Draft, Standard for Programming Language C++. 2014-08-22. N3936. Paragraph C.1.7. First change. 'In C++, a function declared with an empty parameter list takes no arguments. In C, an empty parameter list means that the number and type of the function arguments are unknown.'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
