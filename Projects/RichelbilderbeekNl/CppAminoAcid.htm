<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>AminoAcid</title>
  <meta name="description" content="C++ AminoAcid"/>
  <meta name="keywords" content="C++ AminoAcid "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppAminoAcid.htm">AminoAcid</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppAminoAcid-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/CppAminoAcid.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/CppAminoAcid.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafmenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafaminoacid.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafaminoacids.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aaffighter.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aaffighterfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafmolecule.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafatom.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafbond.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafmoleculefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafatomtype.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafmenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafaminoacid.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafaminoacids.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aaffighter.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aaffighterfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aaffwd.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafmolecule.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafatom.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafbond.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafmoleculefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/aafatomtype.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/Licence.txt<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafaminoacid.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafaminoacid.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> AAFAMINOACID_H<br/>
<a href="CppDefine.htm">#define</a> AAFAMINOACID_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> aaf {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> AminoAcid<br/>
{<br/>
&nbsp;&nbsp;alanine,<br/>
&nbsp;&nbsp;arginine,<br/>
&nbsp;&nbsp;asparagine,<br/>
&nbsp;&nbsp;aspartic_acid,<br/>
&nbsp;&nbsp;cysteine,<br/>
&nbsp;&nbsp;glutamic_acid,<br/>
&nbsp;&nbsp;glutamine,<br/>
&nbsp;&nbsp;glycine,<br/>
&nbsp;&nbsp;histidine,<br/>
&nbsp;&nbsp;isoleucine,<br/>
&nbsp;&nbsp;leucine,<br/>
&nbsp;&nbsp;lysine,<br/>
&nbsp;&nbsp;methionine,<br/>
&nbsp;&nbsp;ornithine, <a href="CppComment.htm">//</a>Bonus<br/>
&nbsp;&nbsp;phenylalanine,<br/>
&nbsp;&nbsp;proline,<br/>
&nbsp;&nbsp;selenocysteine, <a href="CppComment.htm">//</a>Bonus<br/>
&nbsp;&nbsp;serine,<br/>
&nbsp;&nbsp;threonine,<br/>
&nbsp;&nbsp;tryptophan,<br/>
&nbsp;&nbsp;tyrosine,<br/>
&nbsp;&nbsp;valine,<br/>
&nbsp;&nbsp;n_types <a href="CppComment.htm">//</a>Used <b><a href="CppFor.htm">for</a></b> <a href="CppDebug.htm">debugging</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> aaf<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> AAFAMINOACID_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafaminoacid.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafaminoacid.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "aafaminoacid.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafaminoacids.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafaminoacids.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> AAFAMINOACIDS_H<br/>
<a href="CppDefine.htm">#define</a> AAFAMINOACIDS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "aafaminoacid.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bimap.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> aaf {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> AminoAcids<br/>
{<br/>
&nbsp;&nbsp;AminoAcids();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;AminoAcid&gt; GetAll() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> AminoAcid s) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;AminoAcid ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt; m_map;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt; CreateMap();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> aaf<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> AAFAMINOACIDS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafaminoacids.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafaminoacids.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "aafaminoacids.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::aaf::AminoAcid,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::aaf::AminoAcids::m_map;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::aaf::AminoAcids::AminoAcids()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::aaf::AminoAcid,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::aaf::AminoAcids::CreateMap()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt; m;<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::alanine,"alanine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::arginine,"arginine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::asparagine,"asparagine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::aspartic_acid,"aspartic_acid"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::cysteine,"cysteine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::glutamic_acid,"glutamic_acid"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::glutamine,"glutamine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::glycine,"glycine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::histidine,"histidine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::isoleucine,"isoleucine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::leucine,"leucine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::lysine,"lysine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::methionine,"methionine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::ornithine,"ornithine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::phenylalanine,"phenylalanine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::proline,"proline"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::selenocysteine,"selenocysteine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::serine,"serine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::threonine,"threonine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::tryptophan,"tryptophan"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::tyrosine,"tyrosine"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;AminoAcid,<a href="CppStdString.htm">std::string</a>&gt;::value_type(AminoAcid::valine,"valine"));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::aaf::AminoAcid&gt; <a href="CppRibi.htm">ribi</a>::aaf::AminoAcids::GetAll() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;AminoAcid&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::alanine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::arginine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::asparagine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::aspartic_acid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::cysteine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::glutamic_acid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::glutamine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::glycine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::histidine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::isoleucine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::leucine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::lysine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::methionine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::ornithine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::phenylalanine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::proline,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::selenocysteine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::serine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::threonine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::tryptophan,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::tyrosine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AminoAcid::valine<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(AminoAcid::n_types));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::aaf::AminoAcids::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;AminoAcid&gt; v <a href="CppOperatorAssign.htm">=</a> AminoAcids().GetAll();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> AminoAcid t <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> AminoAcids().ToStr(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> AminoAcid u <a href="CppOperatorAssign.htm">=</a> AminoAcids().ToType(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(u <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::aaf::AminoAcids::ToStr(<b><a href="CppConst.htm">const</a></b> AminoAcid type) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.left.empty()) m_map <a href="CppOperatorAssign.htm">=</a> CreateMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.left.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.left.count(type));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> m_map.left.find(type)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::aaf::AminoAcid <a href="CppRibi.htm">ribi</a>::aaf::AminoAcids::ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.right.empty()) m_map <a href="CppOperatorAssign.htm">=</a> CreateMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.right.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.right.count(s) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> AminoAcid t <a href="CppOperatorAssign.htm">=</a> m_map.right.find(s)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafatom.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafatom.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> AAFATOM_H<br/>
<a href="CppDefine.htm">#define</a> AAFATOM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "polarcoordinat.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/plane_angle.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "aafatomtype.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> aaf {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Atom<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::plane_angle&gt; Angle;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; Length;<br/>
<br/>
&nbsp;&nbsp;Atom(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> AtomType type <a href="CppOperatorAssign.htm">=</a> AtomType::H,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt; coordinat <a href="CppOperatorAssign.htm">=</a> CreateDefaultCoordinat()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;PolarCoordinat&lt;Angle,Length&gt; m_coordinat;<br/>
&nbsp;&nbsp;AtomType m_type;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> PolarCoordinat&lt;Angle,Length&gt; CreateDefaultCoordinat() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> aaf<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> AAFATOM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafatom.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafatom.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "aafatom.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::aaf::Atom::Atom(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> AtomType type,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PolarCoordinat&lt;Angle,Length&gt; coordinat<br/>
) : m_coordinat(coordinat),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_type(type)<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRibi.htm">ribi</a>::aaf::Atom::Atom(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> AtomType type,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Angle angle,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Length length<br/>
) : m_coordinat(angle,length),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_type(type)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PolarCoordinat&lt;<a href="CppRibi.htm">ribi</a>::aaf::Atom::Angle,<a href="CppRibi.htm">ribi</a>::aaf::Atom::Length&gt; <a href="CppRibi.htm">ribi</a>::aaf::Atom::CreateDefaultCoordinat() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> PolarCoordinat&lt;Angle,Length&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::radian,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafatomtype.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafatomtype.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> AAFATOMTYPE_H<br/>
<a href="CppDefine.htm">#define</a> AAFATOMTYPE_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> aaf {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> AtomType {<br/>
&nbsp;&nbsp;H,<br/>
&nbsp;&nbsp;O,<br/>
&nbsp;&nbsp;N,<br/>
&nbsp;&nbsp;C,<br/>
&nbsp;&nbsp;S<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> aaf<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> AAFATOMTYPE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafatomtype.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafatomtype.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "aafatomtype.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafbond.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafbond.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> AAFBOND_H<br/>
<a href="CppDefine.htm">#define</a> AAFBOND_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/unit.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/quantity.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/length.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> aaf {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Bond<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length,<b><a href="CppDouble.htm">double</a></b>&gt; Length;<br/>
<br/>
<br/>
&nbsp;&nbsp;Bond(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_bonds <a href="CppOperatorAssign.htm">=</a> 1) : m_n_bonds(n_bonds) {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_n_bonds;<br/>
};<br/>
<br/>
<a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length,<b><a href="CppDouble.htm">double</a></b>&gt; GetAverageBondLength() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> aaf<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> AAFBOND_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafbond.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafbond.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "aafbond.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/prefixes.hpp&gt;<br/>
<br/>
<a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length,<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::aaf::GetAverageBondLength() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length,<b><a href="CppDouble.htm">double</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;109.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* <a href="CppBoostUnits.htm">boost::units</a>::si::pico<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* <a href="CppBoostUnits.htm">boost::units</a>::si::meter<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aaffwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aaffwd.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> AAFFWD_H<br/>
<a href="CppDefine.htm">#define</a> AAFFWD_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> aaf {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Fighter;<br/>
<b><a href="CppStruct.htm">struct</a></b> FighterFactory;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> aaf {<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> AAFFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafmolecule.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafmolecule.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> AAFMOLECULE_H<br/>
<a href="CppDefine.htm">#define</a> AAFMOLECULE_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/graph/adjacency_list.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "aafatom.h"<br/>
<a href="CppInclude.htm">#include</a> "aafbond.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Text<a href="CppCanvas.htm">Canvas</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> aaf {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Molecule<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoostAdjacency_list.htm">boost::adjacency_list</a><br/>
&nbsp;&nbsp;&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store all edges as a <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::vecS,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store all vertices in a <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::vecS,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Relations are both ways<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::undirectedS,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>All vertices are person names of type <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoost.htm">boost</a>::property&lt;<a href="CppBoost.htm">boost</a>::vertex_name_t,<a href="CppStdString.htm">std::string</a>&gt;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::property&lt;<a href="CppBoost.htm">boost</a>::vertex_name_t,Atom&gt;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>All edges are weights equal to the en<a href="CppCounter.htm">counter</a> frequencies<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::property&lt;<a href="CppBoost.htm">boost</a>::edge_name_t,Bond&gt;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Graph itself has a <a href="CppStdString.htm">std::string</a> name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::property&lt;<a href="CppBoost.htm">boost</a>::graph_name_t,<a href="CppStdString.htm">std::string</a>&gt;<br/>
&nbsp;&nbsp;&gt; Graph;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Text<a href="CppCanvas.htm">Canvas</a>&gt; ToText<a href="CppCanvas.htm">Canvas</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;Molecule(<b><a href="CppConst.htm">const</a></b> Graph&amp; graph) : m_graph(graph) {}<br/>
<br/>
&nbsp;&nbsp;Graph m_graph;<br/>
};<br/>
<br/>
<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> aaf {<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> AAFMOLECULE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafmolecule.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafmolecule.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "aafmolecule.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "aafbond.h"<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::Text<a href="CppCanvas.htm">Canvas</a>&gt; <a href="CppRibi.htm">ribi</a>::aaf::Molecule::ToText<a href="CppCanvas.htm">Canvas</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Text<a href="CppCanvas.htm">Canvas</a>&gt; canvas;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> l(GetAverageBondLength());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Map atoms to <a href="CppInt.htm">integer</a> positions<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> canvas;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafmoleculefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafmoleculefactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> AAFMOLECULEFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> AAFMOLECULEFACTORY_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/graph/adjacency_list.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "aafatom.h"<br/>
<a href="CppInclude.htm">#include</a> "aafbond.h"<br/>
<a href="CppInclude.htm">#include</a> "aafmolecule.h"<br/>
<a href="CppInclude.htm">#include</a> "aafaminoacid.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> aaf {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MoleculeFactory<br/>
{<br/>
&nbsp;&nbsp;MoleculeFactory() {}<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Molecule&gt; Create(<b><a href="CppConst.htm">const</a></b> AminoAcid a) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Molecule&gt; CreateGlycine() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> aaf<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> AAFMOLECULEFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppAminoAcid/aafmoleculefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppAminoAcid/aafmoleculefactory.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "aafmoleculefactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "aafbond.h"<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::aaf::Molecule&gt; <a href="CppRibi.htm">ribi</a>::aaf::MoleculeFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> AminoAcid a<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (a)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> AminoAcid::glycine: <b><a href="CppReturn.htm">return</a></b> CreateGlycine();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::aaf::MoleculeFactory::Create: unknown amino acid");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::aaf::MoleculeFactory::Create: unknown amino acid");<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::aaf::Molecule&gt; <a href="CppRibi.htm">ribi</a>::aaf::MoleculeFactory::CreateGlycine() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> Molecule::Graph Graph;<br/>
&nbsp;&nbsp;Graph g;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>All vertex names<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Note: cannot use spaces<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> bond_length(GetAverageBondLength());<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> PolarCoordinat&lt;Atom::Angle,Atom::Length&gt; Coordinat;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi { <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_atoms { 10 };<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_bonds {&nbsp;&nbsp;9 };<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;H&nbsp;&nbsp; H&nbsp;&nbsp; O<br/>
&nbsp;&nbsp; \&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;N-C-C<br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;H&nbsp;&nbsp; H&nbsp;&nbsp; O-H<br/>
<br/>
&nbsp;&nbsp;8&nbsp;&nbsp; 1&nbsp;&nbsp; 5<br/>
&nbsp;&nbsp; \&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;4-0-2<br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;7&nbsp;&nbsp; 3&nbsp;&nbsp; 6-9<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Coordinat&gt; coordinats;<br/>
&nbsp;&nbsp;coordinats.push_back(Coordinat(0.0 * radian,0.0 * bond_length));<br/>
&nbsp;&nbsp;coordinats.push_back(Coordinat(0.0 * pi * radian,1.0 * bond_length));<br/>
&nbsp;&nbsp;coordinats.push_back(Coordinat(0.5 * pi * radian,1.0 * bond_length));<br/>
&nbsp;&nbsp;coordinats.push_back(Coordinat(1.0 * pi * radian,1.0 * bond_length));<br/>
&nbsp;&nbsp;coordinats.push_back(Coordinat(1.5 * pi * radian,1.0 * bond_length));<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> TODO_RJCB<br/>
&nbsp;&nbsp;coordinats.push_back(coordinats[2] <a href="CppOperatorPlus.htm">+</a> Coordinat(( 1.0 <a href="CppOperatorDivide.htm">/</a> 6.0) * pi * radian,1.0 * bond_length));<br/>
&nbsp;&nbsp;coordinats.push_back(coordinats[2] <a href="CppOperatorPlus.htm">+</a> Coordinat(( 5.0 <a href="CppOperatorDivide.htm">/</a> 6.0) * pi * radian,1.0 * bond_length));<br/>
&nbsp;&nbsp;coordinats.push_back(coordinats[4] <a href="CppOperatorPlus.htm">+</a> Coordinat(( 7.0 <a href="CppOperatorDivide.htm">/</a> 6.0) * pi * radian,1.0 * bond_length));<br/>
&nbsp;&nbsp;coordinats.push_back(coordinats[4] <a href="CppOperatorPlus.htm">+</a> Coordinat((11.0 <a href="CppOperatorDivide.htm">/</a> 6.0) * pi * radian,1.0 * bond_length));<br/>
&nbsp;&nbsp;coordinats.push_back(coordinats[6] <a href="CppOperatorPlus.htm">+</a> Coordinat(0.5 * pi * radian,1.0 * bond_length));<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_atoms <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(coordinats.size()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Atom&gt; atoms;<br/>
&nbsp;&nbsp;atoms.push_back(Atom(AtomType::C,coordinats[0]));<br/>
&nbsp;&nbsp;atoms.push_back(Atom(AtomType::H,coordinats[1]));<br/>
&nbsp;&nbsp;atoms.push_back(Atom(AtomType::C,coordinats[2]));<br/>
&nbsp;&nbsp;atoms.push_back(Atom(AtomType::H,coordinats[3]));<br/>
&nbsp;&nbsp;atoms.push_back(Atom(AtomType::N,coordinats[4]));<br/>
&nbsp;&nbsp;atoms.push_back(Atom(AtomType::H,coordinats[5]));<br/>
&nbsp;&nbsp;atoms.push_back(Atom(AtomType::O,coordinats[6]));<br/>
&nbsp;&nbsp;atoms.push_back(Atom(AtomType::H,coordinats[7]));<br/>
&nbsp;&nbsp;atoms.push_back(Atom(AtomType::H,coordinats[8]));<br/>
&nbsp;&nbsp;atoms.push_back(Atom(AtomType::H,coordinats[9]));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_atoms <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(atoms.size()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Graph::vertex_descriptor&gt; vertices;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_atoms; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertices.push_back(<a href="CppBoost.htm">boost</a>::add_vertex(atoms[i],g));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;H&nbsp;&nbsp; H&nbsp;&nbsp; O<br/>
&nbsp;&nbsp; \&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;N-C-C<br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;H&nbsp;&nbsp; H&nbsp;&nbsp; O-H<br/>
<br/>
&nbsp;&nbsp;8&nbsp;&nbsp; 1&nbsp;&nbsp; 5<br/>
&nbsp;&nbsp; \&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;4-0-2<br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;7&nbsp;&nbsp; 3&nbsp;&nbsp; 6-9<br/>
<br/>
&nbsp;&nbsp;i&nbsp;&nbsp;&nbsp;&nbsp; b&nbsp;&nbsp;&nbsp;&nbsp; f<br/>
&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e-3-a-1-c<br/>
&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;5<br/>
&nbsp;&nbsp;h&nbsp;&nbsp;&nbsp;&nbsp; d&nbsp;&nbsp;&nbsp;&nbsp; g8j<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Bond&gt; bonds;<br/>
&nbsp;&nbsp;bonds.push_back(Bond());<br/>
&nbsp;&nbsp;bonds.push_back(Bond());<br/>
&nbsp;&nbsp;bonds.push_back(Bond());<br/>
&nbsp;&nbsp;bonds.push_back(Bond());<br/>
&nbsp;&nbsp;bonds.push_back(Bond(2));<br/>
&nbsp;&nbsp;bonds.push_back(Bond());<br/>
&nbsp;&nbsp;bonds.push_back(Bond());<br/>
&nbsp;&nbsp;bonds.push_back(Bond());<br/>
&nbsp;&nbsp;bonds.push_back(Bond());<br/>
&nbsp;&nbsp;bonds.push_back(Bond());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_bonds <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(bonds.size()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::add_edge(vertices[0],vertices[1],bonds[0],g);<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::add_edge(vertices[0],vertices[2],bonds[0],g);<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::add_edge(vertices[0],vertices[3],bonds[0],g);<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::add_edge(vertices[0],vertices[4],bonds[0],g);<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::add_edge(vertices[2],vertices[5],bonds[0],g);<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::add_edge(vertices[2],vertices[6],bonds[0],g);<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::add_edge(vertices[4],vertices[7],bonds[0],g);<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::add_edge(vertices[4],vertices[8],bonds[0],g);<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::add_edge(vertices[6],vertices[9],bonds[0],g);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Molecule&gt; m {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Molecule(g)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
