<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>TriangleFile</title>
  <meta name="description" content="C++ TriangleFile"/>
  <meta name="keywords" content="C++ TriangleFile "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppTriangleFile.htm">TriangleFile</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppTriangleFile-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleFile/CppTriangleFile.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleFile/CppTriangleFile.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleFile<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleFile/trianglefile.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleFile/trianglefile.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleFile/Licence.txt<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleFile/CppTriangleFile.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleFile/trianglefile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleFile/trianglefile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RIBI_TRIANGLE<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_TRIANGLE<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-variable"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/<a href="CppPointer.htm">point</a>_xy.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/polygon.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/area.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/length.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/plane_angle.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/quantity.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> PolyFileFromPolygons;<br/>
<br/>
<a href="CppComment.htm">///</a>TriangleFile allows <b><a href="CppFor.htm">for</a></b> conversion between multiple polygons<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;and Triangle output files<br/>
<a href="CppComment.htm">///</a>The following steps are taken:<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> <a href="CppConvert.htm">Convert</a> the <a href="CppShape.htm">shape</a>s to WKT<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>TriangleFile can then call ExecuteTriangle on itself<br/>
<a href="CppComment.htm">///</a>to create a triangulated 2D mesh in the form of a .ele, .node and poly file<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Triangle.exe is written by Jonathan Shewchuk, http://people.sc.fsu.edu/~jburkardt/c_src/triangle/triangle.html<br/>
<b><a href="CppStruct.htm">struct</a></b> TriangleFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::plane_angle&gt; Angle;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::area&gt; Area;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; Length;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Coordinat;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;Coordinat&gt; Linestring;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::polygon&lt;Coordinat&gt; Polygon;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Linestring&gt; Linestrings;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Polygon&gt; Polygons;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;Polygons,Linestrings&gt; <a href="CppShape.htm">Shape</a>s;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start from polygons<br/>
&nbsp;&nbsp;TriangleFile(<b><a href="CppConst.htm">const</a></b> Polygons&amp; polygons, <b><a href="CppConst.htm">const</a></b> Linestrings&amp; linestrings);<br/>
&nbsp;&nbsp;TriangleFile(<b><a href="CppConst.htm">const</a></b> <a href="CppShape.htm">Shape</a>s&amp; <a href="CppShape.htm">shape</a>s) : TriangleFile(<a href="CppShape.htm">shape</a>s.first,<a href="CppShape.htm">shape</a>s.second) {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Call Triangle<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> TODO_ISSUE_207<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a>&nbsp;&nbsp;TODO_ISSUE_207<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ExecuteTriangle(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; node_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; ele_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; poly_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Angle triangle_min_angle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Area triangle_max_area,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Call Triangle its C<a href="CppOperatorIncrement.htm">++</a> equivalent<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ExecuteTriangleCpp(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; node_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; ele_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; poly_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Angle triangle_min_angle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Area triangle_max_area,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Executes Triangle.exe from a <a href="CppWindows.htm">Windows</a> command line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ExecuteTriangleExe(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; node_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; ele_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; poly_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Angle triangle_min_angle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Area triangle_max_area,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Executes TriangleCpp.exe from command line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ExecuteTriangleCppExe(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; node_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; ele_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; poly_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Angle triangle_min_angle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Area triangle_max_area,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Polygons&amp; Get<a href="CppShape.htm">Shape</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PolyFileFromPolygons&gt; m_polyfile;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppChar.htm">char</a></b> **&gt; CreateArgv(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> DeleteArgv(<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppChar.htm">char</a></b> **&gt;&amp; p) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_TRIANGLE<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleFile/trianglefile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleFile/trianglefile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglefile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppMake_shared.htm">make_shared</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "polyfile.h"<br/>
<a href="CppInclude.htm">#include</a> "polyfilefrompolygons.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "triangle.h"<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> TODO_ISSUE_207<br/>
<a href="CppIfdef.htm">#ifdef</a>&nbsp;&nbsp;TODO_ISSUE_207<br/>
<a href="CppInclude.htm">#include</a> "trianglecppmain.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::TriangleFile::TriangleFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Polygons&amp; polygons,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Linestrings&amp; linestrings<br/>
) : m_polyfile(<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;PolyFileFromPolygons&gt;(polygons,linestrings))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppChar.htm">char</a></b> **&gt; <a href="CppRibi.htm">ribi</a>::TriangleFile::CreateArgv(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppChar.htm">char</a></b>* String;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> String* Strings;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> buffer_sz <a href="CppOperatorAssign.htm">=</a> 256; <a href="CppComment.htm">//</a>Will leak<br/>
&nbsp;&nbsp;Strings <a href="CppArgc.htm">argv</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> String[256];<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a><a href="CppArgc.htm">argc</a>; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArgc.htm">argv</a>[i] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <b><a href="CppChar.htm">char</a></b>[v[i].size() <a href="CppOperatorPlus.htm">+</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStrcpy.htm">std::strcpy</a>(<a href="CppArgc.htm">argv</a>[i],&amp;v[i][0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=<a href="CppArgc.htm">argc</a>; i<a href="CppOperatorNotEqual.htm">!=</a>buffer_sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArgc.htm">argv</a>[i] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppChar.htm">char</a></b> **&gt; p <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_pair.htm">std::make_pair</a>(<a href="CppArgc.htm">argc</a>,<a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::TriangleFile::DeleteArgv(<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppChar.htm">char</a></b> **&gt;&amp; p) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a> <a href="CppOperatorAssign.htm">=</a> p.first;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppArgc.htm">argc</a>; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b>[] p.second[i];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b>[] p.second;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> TODO_ISSUE_207<br/>
<a href="CppIfdef.htm">#ifdef</a>&nbsp;&nbsp;TODO_ISSUE_207<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::TriangleFile::ExecuteTriangle(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; node_filename,<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; ele_filename,<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; poly_filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> quality,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> area,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".poly") };<br/>
&nbsp;&nbsp;node_filename <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;ele_filename <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;poly_filename <a href="CppOperatorAssign.htm">=</a> "";<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_polyfile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;ToStr();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> exe_filename { "triangle.exe" };<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Specific<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> quality_str <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(quality);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> area_str <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(area);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(quality_str.find(',') <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>::npos <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "No Dutch please");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(area_str.find(',')&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>::npos <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "No Dutch please");<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; cmd {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;exe_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"-j",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"-z",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"-q",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;quality_str,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"-a",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;area_str,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!verbose)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cmd.push_back("-Q");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(cmd[cmd.size() <a href="CppOperatorMinus.htm">-</a> 1], cmd[cmd.size() <a href="CppOperatorMinus.htm">-</a> 2]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppChar.htm">char</a></b> **&gt; p <a href="CppOperatorAssign.htm">=</a> CreateArgv(cmd);<br/>
&nbsp;&nbsp;triangle_main(p.first,p.second);<br/>
&nbsp;&nbsp;DeleteArgv(p);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>End of specific part<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_base(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetFileBasename.htm">GetFileBasename</a>(filename));<br/>
&nbsp;&nbsp;node_filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> ".1.node";<br/>
&nbsp;&nbsp;ele_filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> ".1.ele";<br/>
&nbsp;&nbsp;poly_filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> ".1.poly";<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(node_filename));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(ele_filename));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(poly_filename));<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::TriangleFile::ExecuteTriangleCpp(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; node_filename,<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; ele_filename,<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; poly_filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> quality,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> area,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".poly") };<br/>
&nbsp;&nbsp;node_filename <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;ele_filename <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;poly_filename <a href="CppOperatorAssign.htm">=</a> "";<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_polyfile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;ToStr();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> exe_filename { "triangle.exe" };<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Specific<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> quality_str <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(quality);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> area_str <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(area);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(quality_str.find(',') <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>::npos <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "No Dutch please");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(area_str.find(',')&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>::npos <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "No Dutch please");<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; cmd {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;exe_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"-j",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"-z",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"-q",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;quality_str,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"-a",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;area_str,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!verbose)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cmd.push_back("-Q");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(cmd[cmd.size() <a href="CppOperatorMinus.htm">-</a> 1], cmd[cmd.size() <a href="CppOperatorMinus.htm">-</a> 2]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;tricpp::triangle_cpp_main(cmd);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>End of specific part<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_base(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetFileBasename.htm">GetFileBasename</a>(filename));<br/>
&nbsp;&nbsp;node_filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> ".1.node";<br/>
&nbsp;&nbsp;ele_filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> ".1.ele";<br/>
&nbsp;&nbsp;poly_filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> ".1.poly";<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(node_filename));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(ele_filename));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(poly_filename));<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TODO_ISSUE_207<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::TriangleFile::ExecuteTriangleExe(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; node_filename,<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; ele_filename,<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>&amp; poly_filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Angle triangle_min_angle, <a href="CppComment.htm">//</a>Triangle calls <b><a href="CppThis.htm">this</a></b> the 'quality' parameter<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Area triangle_max_area,&nbsp;&nbsp; <a href="CppComment.htm">//</a>Triangle calls <b><a href="CppThis.htm">this</a></b> the 'area' parameter<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".poly") };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> delete_poly_file <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;node_filename <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;ele_filename <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;poly_filename <a href="CppOperatorAssign.htm">=</a> "";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Writing .poly file to '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.str() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_polyfile-&gt;ToStr();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> exe_filename { "triangle.exe" };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> exe_filename { "<a href="Tools.htm">Tool</a>TriangleConsole.exe" };<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> exe_filename { "<a href="Tools.htm">Tool</a>TriangleConsole" };<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Specific<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> quality_str<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangle_min_angle.value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 360.0 <a href="CppOperatorDivide.htm">/</a> <a href="CppBoost.htm">boost</a>::math::constants::two_pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() <a href="CppComment.htm">//</a>Triangle uses degrees<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> area_str<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(triangle_max_area.value());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(quality_str.find(',') <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>::npos <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "No Dutch please");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(area_str.find(',')&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>::npos <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "No Dutch please");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(exe_filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> file( (":/trianglefile/files/" <a href="CppOperatorPlus.htm">+</a> exe_filename).c_str() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file.copy(exe_filename.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(exe_filename));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> command;<br/>
&nbsp;&nbsp;command<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> exe_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <a href="CppOperatorMinus.htm">-</a>j <a href="CppOperatorMinus.htm">-</a>z <a href="CppOperatorMinus.htm">-</a>q"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> quality_str<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <a href="CppOperatorMinus.htm">-</a>a"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> area_str<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (verbose ? "" : " <a href="CppOperatorMinus.htm">-</a>Q")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> filename<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Starting command '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> command.str() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> error <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSystem.htm">std::system</a>(command.str().c_str());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete input file directly after running the program,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>so that independent of a possible error <b><a href="CppThis.htm">this</a></b> behavior occurs<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (delete_poly_file)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Deleted file " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Kept file " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <b><a href="CppFor.htm">for</a></b> inspection" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Respond to errors<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Finished command with an error" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(m_polyfile-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Error: '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> command.str() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' failed, with error code " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> error;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Finished command without errors" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>End of specific<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_base(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetFileBasename.htm">GetFileBasename</a>(filename));<br/>
&nbsp;&nbsp;node_filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> ".1.node";<br/>
&nbsp;&nbsp;ele_filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> ".1.ele";<br/>
&nbsp;&nbsp;poly_filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> ".1.poly";<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(node_filename));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(ele_filename));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(poly_filename));<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::TriangleFile::Polygons&amp; <a href="CppRibi.htm">ribi</a>::TriangleFile::Get<a href="CppShape.htm">Shape</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_polyfile);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_polyfile-&gt;GetPolygons();<br/>
}<br/>
<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::TriangleFile::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.6";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::TriangleFile::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-02-07: <a href="CppVersion.htm">Version</a> 1.0: initial <a href="CppVersion.htm">version</a>, use of <a href="CppWindows.htm">Windows</a> executable only",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-04-04: <a href="CppVersion.htm">Version</a> 1.1: allow to call Triangle its code directly",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-05-18: <a href="CppVersion.htm">Version</a> 1.2: allow use of a <a href="CppLinux.htm">Linux</a> executable"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-05-19: <a href="CppVersion.htm">Version</a> 1.3: use of non-freezing <a href="CppWindows.htm">Windows</a> executable",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-05-26: <a href="CppVersion.htm">Version</a> 1.4: use of units in Triangle 'area' (the maximum area of a triangle) and 'quality' (the minimum angle of a triangle's corner) parameters"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-05-27: <a href="CppVersion.htm">Version</a> 1.5: split of sections to PolyFile",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-06-02: <a href="CppVersion.htm">Version</a> 1.6: split of sections to PolyFileFromPolygons"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::TriangleFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::TriangleFile::Test");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Call Triangle with simple <a href="CppShape.htm">shape</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat&gt; <a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0.5, 2.0}, <a href="CppComment.htm">//</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1.0, 1.0}, <a href="CppComment.htm">//</a>1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1.0, 0.0}, <a href="CppComment.htm">//</a>2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0.0, 0.0}, <a href="CppComment.htm">//</a>3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0.0, 1.0}&nbsp;&nbsp;<a href="CppComment.htm">//</a>4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Polygon v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::append(v, <a href="CppPointer.htm">point</a>s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Polygons polygons <a href="CppOperatorAssign.htm">=</a> { v };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Linestrings linestrings <a href="CppOperatorAssign.htm">=</a> {};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppShape.htm">Shape</a>s <a href="CppShape.htm">shape</a>s <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_pair.htm">std::make_pair</a>(polygons,linestrings);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TriangleFile f(<a href="CppShape.htm">shape</a>s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(f.ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filename_node;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filename_ele;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filename_poly;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Angle min_angle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 20.0 <a href="CppComment.htm">//</a>Default used by Triangle, in degrees<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (<a href="CppBoost.htm">boost</a>::math::constants::two_pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() <a href="CppOperatorDivide.htm">/</a> 360.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* <a href="CppBoostUnits.htm">boost::units</a>::si::radian<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Area max_area <a href="CppOperatorAssign.htm">=</a> 1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::square_meter;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> TODO_ISSUE_207<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a>&nbsp;&nbsp;TODO_ISSUE_207<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.ExecuteTriangle(filename_node,filename_ele,filename_poly,min_angle,max_area,verbose);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.ExecuteTriangleExe(filename_node,filename_ele,filename_poly,min_angle,max_area,verbose);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TODO_ISSUE_207<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_node));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_ele));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_poly));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "TriangleFile::Test: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Triangle.exe failed: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::TriangleFile::Test successfully");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::TriangleFile::ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_polyfile);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_polyfile-&gt;ToStr();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
