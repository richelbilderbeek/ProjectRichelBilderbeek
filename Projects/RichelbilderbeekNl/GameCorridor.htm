<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GameCorridor</title>
  <meta name="description" content="C++ GameCorridor"/>
  <meta name="keywords" content="C++ GameCorridor "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="GameCorridor.htm">GameCorridor</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Tue Aug 12 15:39:02 2014
 -->
<p><img src="PicQt.png" alt="Qt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="GameCorridor.htm">Corridor</a> is a <a href="Games.htm">game</a> written by Or Dvory (also known as gnudles) in 2007 
and ported by me to a <a href="CppQtCreator.htm">Qt Creator</a> project on the 17th September 2010.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="GameCorridor.png">View a screenshot of 'Corridor' (png)</a></li>
  <li><a href="GameCorridor.zip">Download the source code of 'Corridor' (zip)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicGui.png" alt="GUI"/> <a href="CppGuiApplication.htm">GUI application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 5.2.1 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./GameCorridor/GameCorridor.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameCorridor/GameCorridor.pro" border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core gui<br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeLibs.htm">LIBS</a> += -L/usr/local/lib -lSDL \<br/>
&nbsp;&nbsp;-L/usr/local/lib -lSDL_ttf \<br/>
&nbsp;&nbsp;-L/usr/local/lib -lSDL_image \<br/>
&nbsp;&nbsp;-L/usr/local/lib -lpng<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ucorridor.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameCorridor/ucorridor.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameCorridor/ucorridor.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a>**************************************************************************<br/>
 *&nbsp;&nbsp; SDL implementation of Quoridor game&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<br/>
 *&nbsp;&nbsp; Copyright (C) 2007 by Or Dvory&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
 *&nbsp;&nbsp; gnudles@nana.co.il&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<br/>
 *&nbsp;&nbsp; This program is free software; you can redistribute it and/or modify&nbsp;&nbsp;*<br/>
 *&nbsp;&nbsp; it under the terms of the GNU General Public License as published by&nbsp;&nbsp;*<br/>
 *&nbsp;&nbsp; the Free Software Foundation; either <a href="CppVersion.htm">version</a> 2 of the License, or&nbsp;&nbsp;&nbsp;&nbsp; *<br/>
 *&nbsp;&nbsp; (at your option) any later version.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<br/>
 *&nbsp;&nbsp; This program is distributed in the hope that it will be useful,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<br/>
 *&nbsp;&nbsp; but WITHOUT ANY WARRANTY; without even the implied warranty of&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
 *&nbsp;&nbsp; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<br/>
 *&nbsp;&nbsp; GNU General Public License for more details.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<br/>
 *&nbsp;&nbsp; You should have received a copy of the GNU General Public License&nbsp;&nbsp;&nbsp;&nbsp; *<br/>
 *&nbsp;&nbsp; along with this program; <b><a href="CppIf.htm">if</a></b> not, write to the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<br/>
 *&nbsp;&nbsp; Free Software Foundation, Inc.,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<br/>
 *&nbsp;&nbsp; 59 Temple Place <a href="CppOperatorMinus.htm">-</a> Suite 330, Boston, MA&nbsp;&nbsp;02111-1307, USA.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<br/>
 **************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdioH.htm">stdio.h</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;SDL/SDL.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;SDL/SDL_ttf.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;SDL/SDL_image.h&gt;<br/>
<a href="CppDefine.htm">#define</a> status_text_color RGBAcolor(255,188,72,0)<br/>
<a href="CppDefine.htm">#define</a> status_down_color RGBtoInt(220,55,15)<br/>
<a href="CppDefine.htm">#define</a> status_up_color RGBtoInt(255,198,120)<br/>
<a href="CppDefine.htm">#define</a> button_down_color RGBtoInt(255,70,0)<br/>
<a href="CppDefine.htm">#define</a> button_up_color RGBtoInt(255,200,0)<br/>
<a href="CppDefine.htm">#define</a> button_text_color RGBAcolor(240,250,215,0)<br/>
<a href="CppDefine.htm">#define</a> SCRX 800<br/>
<a href="CppDefine.htm">#define</a> SCRY 600<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> margins=8;<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> squaresize=32;<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppVoid.htm">void</a></b> putpixel(<b><a href="CppInt.htm">int</a></b> x, <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppInt.htm">int</a></b> color);<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppInt.htm">int</a></b> RGBtoInt(U<b><a href="CppInt.htm">int</a></b>8 r, U<b><a href="CppInt.htm">int</a></b>8 g, U<b><a href="CppInt.htm">int</a></b>8 b);<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppVoid.htm">void</a></b> draw_square(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> x,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> y,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> width,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> height, <b><a href="CppInt.htm">int</a></b> color);<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppVoid.htm">void</a></b> draw_linex(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> x,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> y,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> width,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> height, <b><a href="CppInt.htm">int</a></b> color);<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> U<b><a href="CppInt.htm">int</a></b>8 InttoR(<b><a href="CppInt.htm">int</a></b> color);<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> U<b><a href="CppInt.htm">int</a></b>8 InttoG(<b><a href="CppInt.htm">int</a></b> color);<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> U<b><a href="CppInt.htm">int</a></b>8 InttoB(<b><a href="CppInt.htm">int</a></b> color);<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppVoid.htm">void</a></b> grad_square(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> x,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> y,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> width,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> height, <b><a href="CppInt.htm">int</a></b> color1,<b><a href="CppInt.htm">int</a></b> color2);<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> SDL_Color RGBAcolor(Uint16 r,Uint16 g,Uint16 b,Uint16 a);<br/>
<br/>
<br/>
<br/>
SDL_Surface *load_image( <a href="CppStdString.htm">std::string</a> filename );<br/>
<br/>
<br/>
SDL_Surface *screen ;<br/>
<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> *pixptr;<br/>
<br/>
TTF_Font *font;<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> programexit()<br/>
{<br/>
	SDL_Quit();<br/>
	TTF_CloseFont( font );<br/>
	TTF_Quit();<br/>
}<br/>
<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Textbar<br/>
{<br/>
	SDL_Rect text_bar;<br/>
	<b><a href="CppVoid.htm">void</a></b> draw_textarea(){<br/>
		grad_square(0, 0,SCRX,40,status_down_color, status_up_color);<br/>
	}<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
		<b><a href="CppBool.htm">bool</a></b> mouse_over;<br/>
		Textbar()<br/>
		{<br/>
			text_bar.x=20;<br/>
			text_bar.y=10;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font <a href="CppOperatorAssign.htm">=</a> TTF_OpenFont("resources/FreeSansBold.ttf", 22 );<br/>
			change_text("Welcome to Corridor");<br/>
		}<br/>
		<b><a href="CppVoid.htm">void</a></b> change_text(<a href="CppStdString.htm">std::string</a> new_text)<br/>
		{<br/>
				draw_textarea();<br/>
				SDL_Surface *sText;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sText <a href="CppOperatorAssign.htm">=</a> TTF_RenderText_Blended( font, new_text.c_str(),status_text_color );<br/>
				SDL_BlitSurface( sText,<a href="CppNULL.htm">NULL</a>, screen,&amp;text_bar );<br/>
				SDL_FreeSurface( sText );<br/>
				<br/>
				SDL_UpdateRect(screen, 0, 0, SCRX, 40);<br/>
		}<br/>
	<br/>
};<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Menu<br/>
{<br/>
	Uint16 lastmove;<br/>
	<b><a href="CppBool.htm">bool</a></b> fullscreen;<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
		Menu()<br/>
		{<br/>
			lastmove=0;<br/>
			fullscreen=<b><a href="CppFalse.htm">false</a></b>;<br/>
			draw_menu();	<br/>
		}<br/>
		<b><a href="CppVoid.htm">void</a></b> notover()<br/>
		{<br/>
			lastmove=0;<br/>
		}<br/>
		Uint16 click_event(<b><a href="CppInt.htm">int</a></b> y,Textbar *actiontext)<br/>
		{<br/>
			y<a href="CppOperatorMinusAssign.htm">-=</a>42;<br/>
			y<a href="CppOperatorDivideAssign.htm">/=</a>80;<br/>
			y<a href="CppOperatorIncrement.htm">++</a>;<br/>
			<b><a href="CppSwitch.htm">switch</a></b>(y)<br/>
			{<br/>
				<b><a href="CppCase.htm">case</a></b> 1:<br/>
					<b><a href="CppReturn.htm">return</a></b> 3;<br/>
				<b><a href="CppCase.htm">case</a></b> 2:<br/>
					changefullscreen();<br/>
					<b><a href="CppReturn.htm">return</a></b> 2;<br/>
				<b><a href="CppCase.htm">case</a></b> 3:<br/>
					<b><a href="CppIf.htm">if</a></b> (fullscreen)<br/>
						actiontext-&gt;change_text("I mustn't open <a href="CppLink.htm">link</a>s in full screen mode...");<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>EDIT BY BILDERBIKKEL<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>system ("firefox gnudles.wmn.cc/<a href="GameCorridor.htm">corridor</a>/howto.html");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;system ("firefox resources/howto.html");<br/>
					<b><a href="CppBreak.htm">break</a></b>;<br/>
				<b><a href="CppCase.htm">case</a></b> 4:<br/>
					<b><a href="CppIf.htm">if</a></b> (fullscreen)<br/>
						actiontext-&gt;change_text("I mustn't open <a href="CppLink.htm">link</a>s in full screen mode...");<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>EDIT BY BILDERBIKKEL<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>system ("firefox gnudles.wmn.cc/<a href="GameCorridor.htm">corridor</a>/<a href="CppAbout.htm">about</a>.html");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;system ("firefox resources/<a href="CppAbout.htm">about</a>.html");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
				<b><a href="CppCase.htm">case</a></b> 5:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> 4;<br/>
				<b><a href="CppCase.htm">case</a></b> 6:<br/>
					<b><a href="CppReturn.htm">return</a></b> 1;<br/>
			}<br/>
			<b><a href="CppReturn.htm">return</a></b> 0;<br/>
		}<br/>
		<b><a href="CppVoid.htm">void</a></b> changefullscreen()<br/>
		{<br/>
			<b><a href="CppIf.htm">if</a></b> (!fullscreen)<br/>
			{<br/>
				screen <a href="CppOperatorAssign.htm">=</a> SDL_SetVideoMode(SCRX, SCRY, 32, SDL_SWSURFACE|SDL_FULLSCREEN|SDL_DOUBLEBUF);<br/>
				fullscreen=<b><a href="CppTrue.htm">true</a></b>;<br/>
			}<br/>
			<b><a href="CppElse.htm">else</a></b><br/>
			{<br/>
				screen <a href="CppOperatorAssign.htm">=</a> SDL_SetVideoMode(SCRX, SCRY, 32, SDL_SWSURFACE|SDL_DOUBLEBUF);<br/>
				fullscreen=<b><a href="CppFalse.htm">false</a></b>;<br/>
			}<br/>
			draw_menu();<br/>
		}<br/>
		<b><a href="CppVoid.htm">void</a></b> move_event(<b><a href="CppInt.htm">int</a></b> y,Textbar *actiontext)<br/>
		{<br/>
			<b><a href="CppIf.htm">if</a></b> (y<a href="CppOperatorEqual.htm">==</a>0)<br/>
			{<br/>
				lastmove=0;<br/>
				<b><a href="CppReturn.htm">return</a></b>;<br/>
			}<br/>
			y<a href="CppOperatorMinusAssign.htm">-=</a>42;<br/>
			y<a href="CppOperatorDivideAssign.htm">/=</a>80;<br/>
			y<a href="CppOperatorIncrement.htm">++</a>;<br/>
			<b><a href="CppIf.htm">if</a></b> (y<a href="CppOperatorNotEqual.htm">!=</a>lastmove)<br/>
				<b><a href="CppSwitch.htm">switch</a></b>(y)<br/>
				{<br/>
					<b><a href="CppCase.htm">case</a></b> 1:<br/>
						actiontext-&gt;change_text("Start New Game");<br/>
						<b><a href="CppBreak.htm">break</a></b>;<br/>
					<b><a href="CppCase.htm">case</a></b> 2:<br/>
						actiontext-&gt;change_text("Toggle Full Screen");<br/>
						<b><a href="CppBreak.htm">break</a></b>;<br/>
					<b><a href="CppCase.htm">case</a></b> 3:<br/>
						actiontext-&gt;change_text("Display Game Tutorial");<br/>
						<b><a href="CppBreak.htm">break</a></b>;<br/>
					<b><a href="CppCase.htm">case</a></b> 4:<br/>
						actiontext-&gt;change_text("(C) 2007, Or Dvory, distributed under the terms of the GPLv2");<br/>
						<b><a href="CppBreak.htm">break</a></b>;<br/>
					<b><a href="CppCase.htm">case</a></b> 5:<br/>
						actiontext-&gt;change_text("Undo last move");<br/>
						<b><a href="CppBreak.htm">break</a></b>;<br/>
					<b><a href="CppCase.htm">case</a></b> 6:<br/>
						actiontext-&gt;change_text("Quit the program");<br/>
						<b><a href="CppBreak.htm">break</a></b>;<br/>
					<br/>
					<b><a href="CppDefault.htm">default</a></b>:<br/>
						actiontext-&gt;change_text("");<br/>
						y=0;<br/>
				}<br/>
			lastmove=y;<br/>
		}<br/>
		<b><a href="CppVoid.htm">void</a></b> draw_button(<b><a href="CppInt.htm">int</a></b> y,<a href="CppStdString.htm">std::string</a> button_text){<br/>
			SDL_Rect text_label={20,y+30,0,0};<br/>
			grad_square(2, y,250,78,button_down_color,button_up_color );<br/>
			SDL_Surface *sText;<br/>
			sText <a href="CppOperatorAssign.htm">=</a> TTF_RenderText_Blended( font, button_text.c_str(),button_text_color );<br/>
			SDL_BlitSurface( sText,<a href="CppNULL.htm">NULL</a>, screen,&amp;text_label );<br/>
			SDL_FreeSurface( sText );<br/>
		}<br/>
	<b><a href="CppVoid.htm">void</a></b> draw_menu(){<br/>
		draw_button(42,"New Game");<br/>
		draw_button(122,"Full Screen");<br/>
		draw_button(202,"How to Play");<br/>
		draw_button(282,"<a href="CppAbout.htm">About</a>");<br/>
		draw_button(362,"Undo");<br/>
		draw_button(442,"Exit");<br/>
	}<br/>
};<br/>
<b><a href="CppClass.htm">class</a></b> Game<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppStruct.htm">struct</a></b> <br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppBool.htm">bool</a></b> able;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppBool.htm">bool</a></b> player;&nbsp;&nbsp;&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppChar.htm">char</a></b> movex,movey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; U<b><a href="CppInt.htm">int</a></b>8 wall_number;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}movement;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;movement lmove;<br/>
	<b><a href="CppClass.htm">class</a></b> Wall{<br/>
		<br/>
		<br/>
		<b><a href="CppPublic.htm">public</a></b>:<br/>
<br/>
			Uint16 spx,<a href="CppSpy.htm">spy</a>;<br/>
			<b><a href="CppBool.htm">bool</a></b> placed,vertical;<br/>
			<b><a href="CppVoid.htm">void</a></b> set_wall(Uint16 spx,Uint16 <a href="CppSpy.htm">spy</a>)<br/>
			{<br/>
				<b><a href="CppThis.htm">this</a></b>-&gt;placed=<b><a href="CppFalse.htm">false</a></b>;<br/>
				<b><a href="CppThis.htm">this</a></b>-&gt;vertical=<b><a href="CppTrue.htm">true</a></b>;<br/>
				<b><a href="CppThis.htm">this</a></b>-&gt;spx=spx;<br/>
				<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppSpy.htm">spy</a>=<a href="CppSpy.htm">spy</a>;<br/>
			}<br/>
			<b><a href="CppVoid.htm">void</a></b> set_focus()<br/>
			{<br/>
				draw_wall(RGBtoInt(200,70,50));<br/>
<a href="CppComment.htm">/*</a>				<b><a href="CppIf.htm">if</a></b> (<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a>0)<br/>
					SDL_UpdateRect(screen, spx*(squaresize+margins)-margins+360,60,margins,margins+2*squaresize);<br/>
				<b><a href="CppElse.htm">else</a></b><br/>
					SDL_UpdateRect(screen,spx*(squaresize+margins)-margins+360,squaresize*2+60+<a href="CppSpy.htm">spy</a>*(squaresize+margins),margins,margins+2*squaresize);<a href="CppComment.htm">*/</a><br/>
			}<br/>
			<b><a href="CppVoid.htm">void</a></b> remove_focus()<br/>
			{<br/>
				draw_wall();<br/>
<a href="CppComment.htm">/*</a>				<b><a href="CppIf.htm">if</a></b> (<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a>0)<br/>
					SDL_UpdateRect(screen, spx*(squaresize+margins)-margins+360,60,margins,margins+2*squaresize);<br/>
				<b><a href="CppElse.htm">else</a></b><br/>
					SDL_UpdateRect(screen,spx*(squaresize+margins)-margins+360,squaresize*11+60+9*margins,margins,margins+2*squaresize);<a href="CppComment.htm">*/</a><br/>
			}<br/>
			<br/>
			<b><a href="CppVoid.htm">void</a></b> draw_wall(<b><a href="CppInt.htm">int</a></b> color)<br/>
			{<br/>
				<b><a href="CppIf.htm">if</a></b> (<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a>0)<br/>
				{<br/>
					draw_square(spx*(squaresize+margins)-margins+360,60,margins,margins+2*squaresize,color );<br/>
					SDL_UpdateRect(screen, spx*(squaresize+margins)-margins+360,60,margins,margins+2*squaresize);<br/>
				}<br/>
				<b><a href="CppElse.htm">else</a></b><br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a>9)<br/>
					{<br/>
						draw_square(spx*(squaresize+margins)-margins+360, squaresize*11+60+9*margins,margins,margins+2*squaresize,color );<br/>
						SDL_UpdateRect(screen,spx*(squaresize+margins)-margins+360,squaresize*2+60+<a href="CppSpy.htm">spy</a>*(squaresize+margins),margins,margins+2*squaresize);<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
					<b><a href="CppIf.htm">if</a></b> (vertical)<br/>
					{<br/>
						draw_square(spx*(squaresize+margins)-margins+360, squaresize+60+<a href="CppSpy.htm">spy</a>*(squaresize+margins),margins,margins+2*squaresize,color );<br/>
						SDL_UpdateRect(screen,spx*(squaresize+margins)-margins+360,squaresize+60+<a href="CppSpy.htm">spy</a>*(squaresize+margins),margins,margins+2*squaresize);<br/>
						<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						draw_square(spx*(squaresize+margins)+360, squaresize*2+60+<a href="CppSpy.htm">spy</a>*(squaresize+margins),margins+2*squaresize,margins,color );<br/>
						SDL_UpdateRect(screen,spx*(squaresize+margins)+360,squaresize*2+60+<a href="CppSpy.htm">spy</a>*(squaresize+margins),margins+2*squaresize,margins);<br/>
					}<br/>
					}<br/>
				}<br/>
			}<br/>
			<b><a href="CppVoid.htm">void</a></b> draw_wall()<br/>
			{<br/>
				draw_wall(RGBtoInt(140,30,10));<br/>
			}<br/>
			<b><a href="CppVoid.htm">void</a></b> changepos(Uint16 spx,Uint16 <a href="CppSpy.htm">spy</a>,<b><a href="CppBool.htm">bool</a></b> vertical,movement *lmove)<br/>
			{<br/>
				draw_wall(RGBtoInt(190,130,60));<br/>
				(*lmove).player=<b><a href="CppFalse.htm">false</a></b>;<br/>
				(*lmove).able=<b><a href="CppTrue.htm">true</a></b>;<br/>
				(*lmove).wall_number=<b><a href="CppThis.htm">this</a></b>-&gt;spx;<br/>
				<b><a href="CppThis.htm">this</a></b>-&gt;spx=spx;<br/>
				<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppSpy.htm">spy</a>=<a href="CppSpy.htm">spy</a>;<br/>
				<b><a href="CppThis.htm">this</a></b>-&gt;vertical=vertical;<br/>
				<b><a href="CppThis.htm">this</a></b>-&gt;placed=<b><a href="CppTrue.htm">true</a></b>;<br/>
				draw_wall();<br/>
			}<br/>
	};<br/>
	<b><a href="CppClass.htm">class</a></b> Player{<br/>
		SDL_Surface *playerlook,*playerlooksel;<br/>
		SDL_Rect entry<a href="CppPointer.htm">point</a>;<br/>
		<br/>
		<b><a href="CppPublic.htm">public</a></b>:<br/>
			Wall walls[10];<br/>
			<b><a href="CppChar.htm">char</a></b> desty,locx,locy, wselected;<a href="CppComment.htm">//</a>wselected <a href="CppOperatorMinus.htm">-</a>1 none, 0-9 blocks, 10 pawn<br/>
			<b><a href="CppBool.htm">bool</a></b> mouse_over;<br/>
			<b><a href="CppVoid.htm">void</a></b> reset_player()<br/>
			{<br/>
				mouse_over=<b><a href="CppFalse.htm">false</a></b>;<br/>
				locy=10-desty;<br/>
				wselected=-1;<br/>
				locx=5;<br/>
				entry<a href="CppPointer.htm">point</a>.x=360+4*margins+4*squaresize;<br/>
				entry<a href="CppPointer.htm">point</a>.y=squaresize+60+locy*(squaresize+margins);<br/>
			}<br/>
			Player(Uint16 sy){<br/>
				desty=10-sy;<br/>
				reset_player();<br/>
				<b><a href="CppIf.htm">if</a></b> (sy<a href="CppOperatorEqual.htm">==</a>9)<br/>
				{<br/>
					playerlook=load_image( "resources<a href="CppComment.htm">//</a>indx_crimson.png" );<br/>
					playerlooksel=load_image( "resources<a href="CppComment.htm">//</a>sel_indx_crimson.png" );<br/>
				}<br/>
				<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (sy<a href="CppOperatorEqual.htm">==</a>1)<br/>
				{<br/>
					playerlook=load_image( "resources<a href="CppComment.htm">//</a>indx_fawn.png" );<br/>
					playerlooksel=load_image( "resources<a href="CppComment.htm">//</a>sel_indx_fawn.png" );<br/>
				}<br/>
			}<br/>
<br/>
			<br/>
			~Player()<br/>
			{<br/>
				SDL_FreeSurface( playerlook );<br/>
				SDL_FreeSurface( playerlooksel );<br/>
			}<br/>
			<b><a href="CppBool.htm">bool</a></b> can_up(Player *enemy)<br/>
			{<br/>
				<b><a href="CppFor.htm">for</a></b>(Uint16 i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
					<b><a href="CppIf.htm">if</a></b> ((!enemy-&gt;walls[i].vertical) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;walls[i].placed)<br/>
						<b><a href="CppIf.htm">if</a></b>(enemy-&gt;walls[i].<a href="CppSpy.htm">spy</a>+1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy)<br/>
							<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;locx-1<a href="CppOperatorEqual.htm">==</a>enemy-&gt;walls[i].spx <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppThis.htm">this</a></b>-&gt;locx-2<a href="CppOperatorEqual.htm">==</a>enemy-&gt;walls[i].spx)<br/>
							<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
				<b><a href="CppFor.htm">for</a></b>(Uint16 i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
					<b><a href="CppIf.htm">if</a></b> ((!<b><a href="CppThis.htm">this</a></b>-&gt;walls[i].vertical) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <b><a href="CppThis.htm">this</a></b>-&gt;walls[i].placed)<br/>
						<b><a href="CppIf.htm">if</a></b>(<b><a href="CppThis.htm">this</a></b>-&gt;walls[i].<a href="CppSpy.htm">spy</a>+1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy)<br/>
							<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;locx-1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;walls[i].spx <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppThis.htm">this</a></b>-&gt;locx-2<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;walls[i].spx)<br/>
								<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
				<b><a href="CppIf.htm">if</a></b> (locy-1&gt;0)<br/>
					<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
				<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
			}<br/>
			<b><a href="CppBool.htm">bool</a></b> can_left(Player *enemy)<br/>
			{<br/>
				<b><a href="CppFor.htm">for</a></b>(Uint16 i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
					<b><a href="CppIf.htm">if</a></b> ((enemy-&gt;walls[i].vertical) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;walls[i].placed)<br/>
						<b><a href="CppIf.htm">if</a></b>(enemy-&gt;walls[i].spx+1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx)<br/>
							<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;locy-1<a href="CppOperatorEqual.htm">==</a>enemy-&gt;walls[i].<a href="CppSpy.htm">spy</a> <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppThis.htm">this</a></b>-&gt;locy<a href="CppOperatorEqual.htm">==</a>enemy-&gt;walls[i].<a href="CppSpy.htm">spy</a>)<br/>
								<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
				<b><a href="CppFor.htm">for</a></b>(Uint16 i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
					<b><a href="CppIf.htm">if</a></b> ((<b><a href="CppThis.htm">this</a></b>-&gt;walls[i].vertical) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <b><a href="CppThis.htm">this</a></b>-&gt;walls[i].placed)<br/>
						<b><a href="CppIf.htm">if</a></b>(<b><a href="CppThis.htm">this</a></b>-&gt;walls[i].spx+1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx)<br/>
							<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;locy-1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;walls[i].<a href="CppSpy.htm">spy</a> <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppThis.htm">this</a></b>-&gt;locy<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;walls[i].<a href="CppSpy.htm">spy</a>)<br/>
								<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
				<b><a href="CppIf.htm">if</a></b> (locx-1&gt;0)<br/>
					<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
				<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
			}<br/>
			<b><a href="CppBool.htm">bool</a></b> can_down(Player *enemy)<br/>
			{<br/>
				<b><a href="CppFor.htm">for</a></b>(Uint16 i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
					<b><a href="CppIf.htm">if</a></b> ((!enemy-&gt;walls[i].vertical) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;walls[i].placed)<br/>
						<b><a href="CppIf.htm">if</a></b>(enemy-&gt;walls[i].<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy)<br/>
							<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;locx-1<a href="CppOperatorEqual.htm">==</a>enemy-&gt;walls[i].spx <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppThis.htm">this</a></b>-&gt;locx-2<a href="CppOperatorEqual.htm">==</a>enemy-&gt;walls[i].spx)<br/>
								<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
				<b><a href="CppFor.htm">for</a></b>(Uint16 i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
					<b><a href="CppIf.htm">if</a></b> ((!<b><a href="CppThis.htm">this</a></b>-&gt;walls[i].vertical) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <b><a href="CppThis.htm">this</a></b>-&gt;walls[i].placed)<br/>
						<b><a href="CppIf.htm">if</a></b>(<b><a href="CppThis.htm">this</a></b>-&gt;walls[i].<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy)<br/>
							<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;locx-1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;walls[i].spx <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppThis.htm">this</a></b>-&gt;locx-2<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;walls[i].spx)<br/>
								<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
				<b><a href="CppIf.htm">if</a></b> (locy+1&lt;10)<br/>
					<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
				<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
			}<br/>
			<b><a href="CppBool.htm">bool</a></b> can_right(Player *enemy)<br/>
			{<br/>
				<b><a href="CppFor.htm">for</a></b>(Uint16 i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
					<b><a href="CppIf.htm">if</a></b> ((enemy-&gt;walls[i].vertical) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;walls[i].placed)<br/>
						<b><a href="CppIf.htm">if</a></b>(enemy-&gt;walls[i].spx<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx)<br/>
							<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;locy-1<a href="CppOperatorEqual.htm">==</a>enemy-&gt;walls[i].<a href="CppSpy.htm">spy</a> <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppThis.htm">this</a></b>-&gt;locy<a href="CppOperatorEqual.htm">==</a>enemy-&gt;walls[i].<a href="CppSpy.htm">spy</a>)<br/>
								<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
				<b><a href="CppFor.htm">for</a></b>(Uint16 i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
					<b><a href="CppIf.htm">if</a></b> ((<b><a href="CppThis.htm">this</a></b>-&gt;walls[i].vertical) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <b><a href="CppThis.htm">this</a></b>-&gt;walls[i].placed)<br/>
						<b><a href="CppIf.htm">if</a></b>(<b><a href="CppThis.htm">this</a></b>-&gt;walls[i].spx<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx)<br/>
							<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;locy-1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;walls[i].<a href="CppSpy.htm">spy</a> <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppThis.htm">this</a></b>-&gt;locy<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;walls[i].<a href="CppSpy.htm">spy</a>)<br/>
								<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
				<b><a href="CppIf.htm">if</a></b> (locx+1&lt;10)<br/>
					<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
				<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
			}<br/>
			<b><a href="CppVoid.htm">void</a></b> select(Player *enemy)<br/>
			{<br/>
				<b><a href="CppIf.htm">if</a></b> (wselected<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> wselected&lt;10)<br/>
				{<br/>
					walls[wselected].remove_focus();<br/>
					wselected=-1;<br/>
				}<br/>
				wselected=9-wselected;<br/>
				draw_player();<br/>
				<br/>
				<b><a href="CppIf.htm">if</a></b> (wselected<a href="CppOperatorEqual.htm">==</a>10){<br/>
					make_around(enemy);<br/>
				}<br/>
				<b><a href="CppElse.htm">else</a></b>{<br/>
					del_around(enemy);<br/>
				}<br/>
				SDL_UpdateRect(screen, 0, 0, SCRX, SCRY);<br/>
			}<br/>
			<b><a href="CppVoid.htm">void</a></b> make_around(Player *enemy)<br/>
			{<br/>
				SDL_SetAlpha(playerlooksel, SDL_RLEACCEL|SDL_SRCALPHA, 80);<br/>
				<b><a href="CppIf.htm">if</a></b> (can_left(enemy))<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (enemy-&gt;locx+1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;locy<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_left(<b><a href="CppThis.htm">this</a></b>))<br/>
						{<br/>
							entry<a href="CppPointer.htm">point</a>.x=(locx-3)*(squaresize+margins)+360;<br/>
							entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy)*(squaresize+margins);<br/>
							draw_player();<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_up(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								entry<a href="CppPointer.htm">point</a>.x=(locx-2)*(squaresize+margins)+360;<br/>
								entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy-1)*(squaresize+margins);<br/>
								draw_player();<br/>
							}<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_down(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								entry<a href="CppPointer.htm">point</a>.x=(locx-2)*(squaresize+margins)+360;<br/>
								entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy+1)*(squaresize+margins);<br/>
								draw_player();<br/>
							}<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy)*(squaresize+margins);<br/>
						entry<a href="CppPointer.htm">point</a>.x=(locx-2)*(squaresize+margins)+360;<br/>
						draw_player();<br/>
					}<br/>
				}<br/>
				<b><a href="CppIf.htm">if</a></b> (can_right(enemy))<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (enemy-&gt;locx-1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;locy<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_right(<b><a href="CppThis.htm">this</a></b>))<br/>
						{<br/>
							entry<a href="CppPointer.htm">point</a>.x=(locx+1)*(squaresize+margins)+360;<br/>
							entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy)*(squaresize+margins);<br/>
							draw_player();<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_up(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								entry<a href="CppPointer.htm">point</a>.x=(locx)*(squaresize+margins)+360;<br/>
								entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy-1)*(squaresize+margins);<br/>
								draw_player();<br/>
							}<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_down(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								entry<a href="CppPointer.htm">point</a>.x=(locx)*(squaresize+margins)+360;<br/>
								entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy+1)*(squaresize+margins);<br/>
								draw_player();<br/>
							}<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy)*(squaresize+margins);<br/>
						entry<a href="CppPointer.htm">point</a>.x=(locx)*(squaresize+margins)+360;<br/>
						draw_player();<br/>
					}<br/>
				}<br/>
				<b><a href="CppIf.htm">if</a></b> (can_up(enemy))<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (enemy-&gt;locx<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;locy<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy-1)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_up(<b><a href="CppThis.htm">this</a></b>))<br/>
						{<br/>
							entry<a href="CppPointer.htm">point</a>.x=(locx-1)*(squaresize+margins)+360;<br/>
							entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy-2)*(squaresize+margins);<br/>
							draw_player();<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_right(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								entry<a href="CppPointer.htm">point</a>.x=(locx)*(squaresize+margins)+360;<br/>
								entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy-1)*(squaresize+margins);<br/>
								draw_player();<br/>
							}<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_left(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								entry<a href="CppPointer.htm">point</a>.x=(locx-2)*(squaresize+margins)+360;<br/>
								entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy-1)*(squaresize+margins);<br/>
								draw_player();<br/>
							}<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						entry<a href="CppPointer.htm">point</a>.x=(locx-1)*(squaresize+margins)+360;<br/>
						entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy-1)*(squaresize+margins);<br/>
						draw_player();<br/>
					}<br/>
				}<br/>
				<b><a href="CppIf.htm">if</a></b> (can_down(enemy))<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (enemy-&gt;locx<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;locy-1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_down(<b><a href="CppThis.htm">this</a></b>))<br/>
						{<br/>
							entry<a href="CppPointer.htm">point</a>.x=(locx-1)*(squaresize+margins)+360;<br/>
							entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy+2)*(squaresize+margins);<br/>
							draw_player();<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_right(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								entry<a href="CppPointer.htm">point</a>.x=(locx)*(squaresize+margins)+360;<br/>
								entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy+1)*(squaresize+margins);<br/>
								draw_player();<br/>
							}<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_left(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								entry<a href="CppPointer.htm">point</a>.x=(locx-2)*(squaresize+margins)+360;<br/>
								entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy+1)*(squaresize+margins);<br/>
								draw_player();<br/>
							}<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						entry<a href="CppPointer.htm">point</a>.x=(locx-1)*(squaresize+margins)+360;<br/>
						entry<a href="CppPointer.htm">point</a>.y=squaresize+60+(locy+1)*(squaresize+margins);<br/>
						draw_player();<br/>
					}<br/>
				}<br/>
				entry<a href="CppPointer.htm">point</a>.x=(locx-1)*(squaresize+margins)+360;<br/>
				entry<a href="CppPointer.htm">point</a>.y=squaresize+60+locy*(squaresize+margins);<br/>
					<br/>
				SDL_SetAlpha(playerlooksel, SDL_RLEACCEL|SDL_SRCALPHA, 255);<br/>
			}<br/>
			<b><a href="CppVoid.htm">void</a></b> del_around(Player *enemy)<br/>
			{<br/>
				<b><a href="CppIf.htm">if</a></b> (can_left(enemy))<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (enemy-&gt;locx+1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;locy<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_left(<b><a href="CppThis.htm">this</a></b>))<br/>
						{<br/>
							draw_square((locx-3)*(squaresize+margins)+360, squaresize*2+margins+60+(locy-1)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_up(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								draw_square((locx-2)*(squaresize+margins)+360, squaresize*2+margins+60+(locy-2)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
							}<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_down(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								draw_square((locx-2)*(squaresize+margins)+360, squaresize*2+margins+60+(locy)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
							}<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						draw_square((locx-2)*(squaresize+margins)+360, squaresize*2+margins+60+(locy-1)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
					}<br/>
				}<br/>
				<b><a href="CppIf.htm">if</a></b> (can_right(enemy))<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (enemy-&gt;locx-1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;locy<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_right(<b><a href="CppThis.htm">this</a></b>))<br/>
						{<br/>
							draw_square((locx+1)*(squaresize+margins)+360, squaresize*2+margins+60+(locy-1)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_up(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								draw_square((locx)*(squaresize+margins)+360, squaresize*2+margins+60+(locy-2)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
							}<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_down(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								draw_square((locx)*(squaresize+margins)+360, squaresize*2+margins+60+(locy)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
							}<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						draw_square((locx)*(squaresize+margins)+360, squaresize*2+margins+60+(locy-1)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
					}<br/>
				}<br/>
				<b><a href="CppIf.htm">if</a></b> (can_up(enemy))<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (enemy-&gt;locx<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;locy<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy-1)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_up(<b><a href="CppThis.htm">this</a></b>))<br/>
						{<br/>
							draw_square((locx-1)*(squaresize+margins)+360, squaresize*2+margins+60+(locy-3)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_right(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								draw_square((locx)*(squaresize+margins)+360, squaresize*2+margins+60+(locy-2)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
							}<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_left(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								draw_square((locx-2)*(squaresize+margins)+360, squaresize*2+margins+60+(locy-2)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
							}<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						draw_square((locx-1)*(squaresize+margins)+360, squaresize*2+margins+60+(locy-2)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
					}<br/>
				}<br/>
				<b><a href="CppIf.htm">if</a></b> (can_down(enemy))<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (enemy-&gt;locx<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;locy-1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_down(<b><a href="CppThis.htm">this</a></b>))<br/>
						{<br/>
							draw_square((locx-1)*(squaresize+margins)+360, squaresize*2+margins+60+(locy+1)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_right(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								draw_square((locx)*(squaresize+margins)+360, squaresize*2+margins+60+(locy)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
							}<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_left(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								draw_square((locx-2)*(squaresize+margins)+360, squaresize*2+margins+60+(locy)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
							}<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						draw_square((locx-1)*(squaresize+margins)+360, squaresize*2+margins+60+(locy)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
					}<br/>
				}<br/>
			}<br/>
			<b><a href="CppVoid.htm">void</a></b> draw_player()<br/>
			{<br/>
				<b><a href="CppIf.htm">if</a></b> (wselected<a href="CppOperatorEqual.htm">==</a>10)<br/>
					SDL_BlitSurface( playerlooksel,<a href="CppNULL.htm">NULL</a>, screen,&amp;entry<a href="CppPointer.htm">point</a> );<br/>
				<b><a href="CppElse.htm">else</a></b><br/>
					SDL_BlitSurface( playerlook,<a href="CppNULL.htm">NULL</a>, screen,&amp;entry<a href="CppPointer.htm">point</a> );<br/>
			}<br/>
			<b><a href="CppBool.htm">bool</a></b> onplayer(Uint16 x,Uint16 y)<br/>
			{<br/>
				<b><a href="CppIf.htm">if</a></b> (x&gt;(entry<a href="CppPointer.htm">point</a>.x) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x&lt;(entry<a href="CppPointer.htm">point</a>.x+squaresize))<br/>
					<b><a href="CppIf.htm">if</a></b> (y&gt;(entry<a href="CppPointer.htm">point</a>.y) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y&lt;(entry<a href="CppPointer.htm">point</a>.y+squaresize))<br/>
						<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
				<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
			}<br/>
			<b><a href="CppBool.htm">bool</a></b> onsquare(Uint16 x,Uint16 y,Uint16 bx,Uint16 by)<br/>
			{<br/>
				<b><a href="CppIf.htm">if</a></b> (x&gt;bx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x&lt;bx+squaresize)<br/>
					<b><a href="CppIf.htm">if</a></b> (y&gt;by <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y&lt;by+squaresize)<br/>
						<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
				<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
			}<br/>
			<b><a href="CppChar.htm">char</a></b> possible_move(Uint16 x,Uint16 y,Player *enemy,movement *lmove)<br/>
			{<br/>
				<a href="CppComment.htm">//</a>up<br/>
				<b><a href="CppIf.htm">if</a></b> (can_up(enemy))<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (enemy-&gt;locx<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;locy<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy-1)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_up(<b><a href="CppThis.htm">this</a></b>))<br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx-1)*(squaresize+margins)+360,squaresize+60+(locy-2)*(squaresize+margins)))<br/>
							{<br/>
								<b><a href="CppReturn.htm">return</a></b> move(0,-2,lmove);<br/>
							}<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_right(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx)*(squaresize+margins)+360,squaresize+60+(locy-1)*(squaresize+margins)))<br/>
								{<br/>
									<b><a href="CppReturn.htm">return</a></b> move(1,-1,lmove);<br/>
								}<br/>
							}<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_left(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx-2)*(squaresize+margins)+360,squaresize+60+(locy-1)*(squaresize+margins)))<br/>
								{<br/>
									<b><a href="CppReturn.htm">return</a></b> move(-1,-1,lmove);<br/>
								}<br/>
							}<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx-1)*(squaresize+margins)+360,squaresize+60+(locy-1)*(squaresize+margins)))<br/>
						{<br/>
							<b><a href="CppReturn.htm">return</a></b> move(0,-1,lmove);<br/>
						}<br/>
					}<br/>
				}<br/>
<br/>
				<a href="CppComment.htm">//</a>left<br/>
				<b><a href="CppIf.htm">if</a></b> (can_left(enemy))<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (enemy-&gt;locx+1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;locy<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_left(<b><a href="CppThis.htm">this</a></b>))<br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx-3)*(squaresize+margins)+360,squaresize+60+(locy)*(squaresize+margins)))<br/>
							{<br/>
								<b><a href="CppReturn.htm">return</a></b> move(-2,0,lmove);<br/>
							}<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_up(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx-2)*(squaresize+margins)+360,squaresize+60+(locy-1)*(squaresize+margins)))<br/>
								{<br/>
									<b><a href="CppReturn.htm">return</a></b> move(-1,-1,lmove);<br/>
								}<br/>
							}<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_down(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx-2)*(squaresize+margins)+360,squaresize+60+(locy+1)*(squaresize+margins)))<br/>
								{<br/>
									<b><a href="CppReturn.htm">return</a></b> move(-1,1,lmove);<br/>
								}<br/>
							}<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx-2)*(squaresize+margins)+360,squaresize+60+(locy)*(squaresize+margins)))<br/>
						{<br/>
							<b><a href="CppReturn.htm">return</a></b> move(-1,0,lmove);<br/>
						}<br/>
					}<br/>
				}<br/>
				<a href="CppComment.htm">//</a>right<br/>
				<b><a href="CppIf.htm">if</a></b> (can_right(enemy))<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (enemy-&gt;locx-1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;locy<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_right(<b><a href="CppThis.htm">this</a></b>))<br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx+1)*(squaresize+margins)+360,squaresize+60+(locy)*(squaresize+margins)))<br/>
							{<br/>
								<b><a href="CppReturn.htm">return</a></b> move(2,0,lmove);<br/>
							}<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_up(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx)*(squaresize+margins)+360,squaresize+60+(locy-1)*(squaresize+margins)))<br/>
								{<br/>
									<b><a href="CppReturn.htm">return</a></b> move(1,-1,lmove);<br/>
								}<br/>
							}<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_down(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx)*(squaresize+margins)+360,squaresize+60+(locy+1)*(squaresize+margins)))<br/>
								{<br/>
									<b><a href="CppReturn.htm">return</a></b> move(1,1,lmove);<br/>
								}<br/>
							}<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx)*(squaresize+margins)+360,squaresize+60+(locy)*(squaresize+margins)))<br/>
						{<br/>
							<b><a href="CppReturn.htm">return</a></b> move(1,0,lmove);<br/>
						}<br/>
					}<br/>
				}<br/>
				<a href="CppComment.htm">//</a>down<br/>
				<b><a href="CppIf.htm">if</a></b> (can_down(enemy))<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (enemy-&gt;locx<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> enemy-&gt;locy-1<a href="CppOperatorEqual.htm">==</a><b><a href="CppThis.htm">this</a></b>-&gt;locy)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_down(<b><a href="CppThis.htm">this</a></b>))<br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx-1)*(squaresize+margins)+360,squaresize+60+(locy+2)*(squaresize+margins)))<br/>
							{<br/>
								<b><a href="CppReturn.htm">return</a></b> move(0,2,lmove);<br/>
							}<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_right(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx)*(squaresize+margins)+360,squaresize+60+(locy+1)*(squaresize+margins)))<br/>
								{<br/>
									<b><a href="CppReturn.htm">return</a></b> move(1,1,lmove);<br/>
								}<br/>
							}<br/>
							<b><a href="CppIf.htm">if</a></b> (enemy-&gt;can_left(<b><a href="CppThis.htm">this</a></b>))<br/>
							{<br/>
								<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx-2)*(squaresize+margins)+360,squaresize+60+(locy+1)*(squaresize+margins)))<br/>
								{<br/>
									<b><a href="CppReturn.htm">return</a></b> move(-1,1,lmove);<br/>
								}<br/>
							}<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (onsquare( x, y,(locx-1)*(squaresize+margins)+360,squaresize+60+(locy+1)*(squaresize+margins)))<br/>
						{<br/>
							<b><a href="CppReturn.htm">return</a></b> move(0,1,lmove);<br/>
						}<br/>
					}<br/>
				}<br/>
				<b><a href="CppReturn.htm">return</a></b> 0;<br/>
			}<br/>
<br/>
			<b><a href="CppChar.htm">char</a></b> move(<b><a href="CppChar.htm">char</a></b> addx,<b><a href="CppChar.htm">char</a></b> addy,movement *lmove)<br/>
			{<br/>
				draw_square((locx-1)*(squaresize+margins)+360, squaresize*2+margins+60+(locy-1)*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
				locx<a href="CppOperatorPlusAssign.htm">+=</a>addx;<br/>
				locy<a href="CppOperatorPlusAssign.htm">+=</a>addy;<br/>
				(*lmove).movex=-addx;<br/>
				(*lmove).movey=-addy;<br/>
				(*lmove).able=<b><a href="CppTrue.htm">true</a></b>;<br/>
				(*lmove).player=<b><a href="CppTrue.htm">true</a></b>;<br/>
				entry<a href="CppPointer.htm">point</a>.x=(locx-1)*(squaresize+margins)+360;<br/>
				entry<a href="CppPointer.htm">point</a>.y=squaresize+60+locy*(squaresize+margins);<br/>
				draw_player();<br/>
				wselected=-1;<br/>
				<b><a href="CppIf.htm">if</a></b> (locy<a href="CppOperatorEqual.htm">==</a>desty)<a href="CppComment.htm">//</a>game end<br/>
					<b><a href="CppReturn.htm">return</a></b> <a href="CppOperatorMinus.htm">-</a>1;<br/>
				<b><a href="CppReturn.htm">return</a></b> 1;<br/>
			}<br/>
	};<br/>
	Wall demo;<br/>
	<b><a href="CppBool.htm">bool</a></b> wall_posible(Uint16 spx,Uint16 <a href="CppSpy.htm">spy</a>,<b><a href="CppBool.htm">bool</a></b> vertical)<br/>
	{<br/>
		<b><a href="CppFor.htm">for</a></b>(Uint16 i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
			<b><a href="CppIf.htm">if</a></b> (fawn-&gt;walls[i].placed)<br/>
			{<br/>
				<b><a href="CppIf.htm">if</a></b> (fawn-&gt;walls[i].vertical<a href="CppOperatorEqual.htm">==</a>vertical)<a href="CppComment.htm">//</a>over<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (fawn-&gt;walls[i].<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a><a href="CppSpy.htm">spy</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fawn-&gt;walls[i].spx<a href="CppOperatorEqual.htm">==</a>spx)<a href="CppComment.htm">//</a>same location<br/>
						<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
					<b><a href="CppIf.htm">if</a></b> (fawn-&gt;walls[i].spx<a href="CppOperatorEqual.htm">==</a>spx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> vertical)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (fawn-&gt;walls[i].<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a><a href="CppSpy.htm">spy</a>-1 <a href="CppOperatorLogicalOr.htm">||</a> fawn-&gt;walls[i].<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a><a href="CppSpy.htm">spy</a>+1)<br/>
							<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (fawn-&gt;walls[i].spx<a href="CppOperatorEqual.htm">==</a>spx+1 <a href="CppOperatorLogicalOr.htm">||</a> fawn-&gt;walls[i].spx<a href="CppOperatorEqual.htm">==</a>spx-1)<br/>
							<b><a href="CppIf.htm">if</a></b> (fawn-&gt;walls[i].<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a><a href="CppSpy.htm">spy</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (!vertical))<br/>
								<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
					}<br/>
				}<br/>
				<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a>cross<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b>(fawn-&gt;walls[i].vertical <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fawn-&gt;walls[i].spx<a href="CppOperatorEqual.htm">==</a>spx+1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fawn-&gt;walls[i].<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a><a href="CppSpy.htm">spy</a>)<br/>
						<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
					<b><a href="CppIf.htm">if</a></b>(vertical <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> spx<a href="CppOperatorEqual.htm">==</a>fawn-&gt;walls[i].spx+1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a>fawn-&gt;walls[i].<a href="CppSpy.htm">spy</a>)<br/>
						<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
				}<br/>
			}<br/>
		<b><a href="CppFor.htm">for</a></b>(Uint16 i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
			<b><a href="CppIf.htm">if</a></b> (crimson-&gt;walls[i].placed)<br/>
			{<br/>
				<b><a href="CppIf.htm">if</a></b> (crimson-&gt;walls[i].vertical<a href="CppOperatorEqual.htm">==</a>vertical)<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (crimson-&gt;walls[i].<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a><a href="CppSpy.htm">spy</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> crimson-&gt;walls[i].spx<a href="CppOperatorEqual.htm">==</a>spx)<br/>
						<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
					<b><a href="CppIf.htm">if</a></b> (crimson-&gt;walls[i].spx<a href="CppOperatorEqual.htm">==</a>spx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> vertical)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (crimson-&gt;walls[i].<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a><a href="CppSpy.htm">spy</a>-1 <a href="CppOperatorLogicalOr.htm">||</a> crimson-&gt;walls[i].<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a><a href="CppSpy.htm">spy</a>+1)<br/>
							<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (crimson-&gt;walls[i].spx<a href="CppOperatorEqual.htm">==</a>spx+1 <a href="CppOperatorLogicalOr.htm">||</a> crimson-&gt;walls[i].spx<a href="CppOperatorEqual.htm">==</a>spx-1)<br/>
							<b><a href="CppIf.htm">if</a></b> (crimson-&gt;walls[i].<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a><a href="CppSpy.htm">spy</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (!vertical))<br/>
								<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
					}<br/>
				}<br/>
				<b><a href="CppElse.htm">else</a></b><br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b>(crimson-&gt;walls[i].vertical <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> crimson-&gt;walls[i].spx<a href="CppOperatorEqual.htm">==</a>spx+1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> crimson-&gt;walls[i].<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a><a href="CppSpy.htm">spy</a>)<br/>
						<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
					<b><a href="CppIf.htm">if</a></b>(vertical <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> spx<a href="CppOperatorEqual.htm">==</a>crimson-&gt;walls[i].spx+1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a>crimson-&gt;walls[i].<a href="CppSpy.htm">spy</a>)<br/>
						<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
				}<br/>
			}<br/>
		<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
	}<br/>
	<b><a href="CppVoid.htm">void</a></b> change_wall_place(Uint16 mx,Uint16 my,Wall *swall){<br/>
		<br/>
		<b><a href="CppIf.htm">if</a></b> (demo.<a href="CppSpy.htm">spy</a><a href="CppOperatorNotEqual.htm">!=</a>0)<br/>
		{<br/>
		swall-&gt;changepos(demo.spx,demo.<a href="CppSpy.htm">spy</a>,demo.vertical,&amp;lmove);<br/>
		<b><a href="CppIf.htm">if</a></b> (turn)<br/>
		{<br/>
			crimson-&gt;wselected=-1;<br/>
			change_turn();<br/>
		}<br/>
		<b><a href="CppElse.htm">else</a></b><br/>
		{<br/>
			fawn-&gt;wselected=-1;<br/>
			change_turn();<br/>
		}<br/>
		demo.<a href="CppSpy.htm">spy</a>=0;<br/>
		}<br/>
		<br/>
	}<br/>
	<b><a href="CppVoid.htm">void</a></b> preview_wall_place(Uint16 mx,Uint16 my){<br/>
		Wall temp=demo;<br/>
		<b><a href="CppIf.htm">if</a></b> (wall_place(mx,my,&amp;(demo.spx),&amp;(demo.<a href="CppSpy.htm">spy</a>),&amp;(demo.vertical)))<br/>
		{<br/>
			<b><a href="CppIf.htm">if</a></b> (!(temp.spx<a href="CppOperatorEqual.htm">==</a>demo.spx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> temp.<a href="CppSpy.htm">spy</a><a href="CppOperatorEqual.htm">==</a>demo.<a href="CppSpy.htm">spy</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> temp.vertical<a href="CppOperatorEqual.htm">==</a>demo.vertical ))<br/>
			{<br/>
				<b><a href="CppIf.htm">if</a></b> (temp.<a href="CppSpy.htm">spy</a><a href="CppOperatorNotEqual.htm">!=</a>0)<br/>
					temp.draw_wall(RGBtoInt(190,130,60));<br/>
				demo.draw_wall(RGBtoInt(230,110,50));<br/>
			}<br/>
		}<br/>
		<b><a href="CppElse.htm">else</a></b><br/>
		{<br/>
			demo.<a href="CppSpy.htm">spy</a>=0;<a href="CppComment.htm">//</a>can't put the wall there<br/>
			<b><a href="CppIf.htm">if</a></b> (temp.<a href="CppSpy.htm">spy</a><a href="CppOperatorNotEqual.htm">!=</a>0)<br/>
				temp.draw_wall(RGBtoInt(190,130,60));<br/>
		}<br/>
	}<br/>
	<b><a href="CppBool.htm">bool</a></b> wall_place(Uint16 mx,Uint16 my,Uint16 *spx,Uint16 *<a href="CppSpy.htm">spy</a>,<b><a href="CppBool.htm">bool</a></b> *vertical)<br/>
	{<br/>
		<a href="CppComment.htm">//</a>spx*(squaresize+margins)-margins+360, squaresize*2+60+<a href="CppSpy.htm">spy</a>*(squaresize+margins),margins,margins+2*squaresize<br/>
		mx<a href="CppOperatorPlusAssign.htm">+=</a>margins-360;<br/>
		*spx=mx/(squaresize+margins);<br/>
		mx<a href="CppOperatorModulusAssign.htm">%=</a>(squaresize+margins);<br/>
		<br/>
		my<a href="CppOperatorMinusAssign.htm">-=</a>squaresize*2;<br/>
		my<a href="CppOperatorMinusAssign.htm">-=</a>60;<br/>
		<a href="CppComment.htm">//</a>my<a href="CppOperatorMinusAssign.htm">-=</a>2*margins;<br/>
		*<a href="CppSpy.htm">spy</a>=my/(squaresize+margins) <a href="CppOperatorPlus.htm">+</a>1;<br/>
		my<a href="CppOperatorModulusAssign.htm">%=</a>(squaresize+margins);<br/>
		<b><a href="CppIf.htm">if</a></b> (my&lt;margins)<br/>
		{<br/>
			<b><a href="CppIf.htm">if</a></b> (mx<a href="CppOperatorGreaterEqual.htm">&gt;=</a>margins)<br/>
			{<br/>
				*vertical=<b><a href="CppFalse.htm">false</a></b>;<br/>
				*<a href="CppSpy.htm">spy</a><a href="CppOperatorMinusAssign.htm">-=</a>1;<br/>
				<b><a href="CppIf.htm">if</a></b> (mx&lt;margins+squaresize/2)<br/>
					<b><a href="CppIf.htm">if</a></b> (*spx&gt;0)<br/>
					*spx<a href="CppOperatorMinusAssign.htm">-=</a>1;<br/>
			}<br/>
			<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (*vertical) *<a href="CppSpy.htm">spy</a><a href="CppOperatorMinusAssign.htm">-=</a>1;<br/>
				<b><a href="CppElse.htm">else</a></b> { *spx<a href="CppOperatorMinusAssign.htm">-=</a>1;<br/>
					*<a href="CppSpy.htm">spy</a><a href="CppOperatorMinusAssign.htm">-=</a>1;<br/>
				}<br/>
		}<br/>
		<b><a href="CppElse.htm">else</a></b><br/>
			<b><a href="CppIf.htm">if</a></b> (mx&lt;margins)<br/>
			{<br/>
			*vertical=<b><a href="CppTrue.htm">true</a></b>;<br/>
			<b><a href="CppIf.htm">if</a></b> (my&lt;margins+squaresize/2)<br/>
				<b><a href="CppIf.htm">if</a></b> (*<a href="CppSpy.htm">spy</a>&gt;1)<br/>
				*<a href="CppSpy.htm">spy</a><a href="CppOperatorMinusAssign.htm">-=</a>1;<br/>
			}<br/>
			<b><a href="CppElse.htm">else</a></b> <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
		<b><a href="CppIf.htm">if</a></b> (!wall_posible((*spx),(*<a href="CppSpy.htm">spy</a>),(*vertical))) <a href="CppComment.htm">//</a> over existing block or implaceable<br/>
			<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
		<b><a href="CppIf.htm">if</a></b> (*vertical)<br/>
		{<br/>
			<b><a href="CppIf.htm">if</a></b> ((*spx)&gt;0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*spx)<a href="CppOperatorLessEqual.htm">&lt;=</a>8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*<a href="CppSpy.htm">spy</a>)&gt;0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*<a href="CppSpy.htm">spy</a>)<a href="CppOperatorLessEqual.htm">&lt;=</a>8)<br/>
				<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
		}<br/>
		<b><a href="CppElse.htm">else</a></b> <br/>
		{<br/>
			<b><a href="CppIf.htm">if</a></b> (((*spx)&lt;8) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> ((*<a href="CppSpy.htm">spy</a>)&gt;0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> ((*<a href="CppSpy.htm">spy</a>)<a href="CppOperatorLessEqual.htm">&lt;=</a>8))<br/>
				<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
		}<br/>
		<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> change_turn()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; turn=!turn;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lmove.able=<b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	Player *fawn,*crimson;<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
		<b><a href="CppBool.htm">bool</a></b> turn,game_end;<a href="CppComment.htm">//</a>crimson <a href="CppOperatorMinus.htm">-</a> <b><a href="CppTrue.htm">true</a></b>, fawn <a href="CppOperatorMinus.htm">-</a> <b><a href="CppFalse.htm">false</a></b><br/>
		Game()<br/>
		{<br/>
			reset_game_status();<br/>
			fawn=<b><a href="CppNew.htm">new</a></b> Player(1);<br/>
			crimson=<b><a href="CppNew.htm">new</a></b> Player(9);<br/>
			set_walls();<br/>
			draw_board();<br/>
			demo.set_wall(1,0);<br/>
		}<br/>
		<b><a href="CppVoid.htm">void</a></b> reset_game_status()<br/>
		{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lmove.able=<b><a href="CppFalse.htm">false</a></b>;<br/>
			game_end=<b><a href="CppFalse.htm">false</a></b>;<br/>
			turn <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
		}<br/>
		<b><a href="CppVoid.htm">void</a></b> new_game()<br/>
		{<br/>
			reset_game_status();<br/>
			reset_players();<br/>
			set_walls();<br/>
			draw_board();<br/>
			demo.set_wall(1,0);<br/>
		}<br/>
		<b><a href="CppVoid.htm">void</a></b> reset_players()<br/>
		{<br/>
			fawn-&gt;reset_player();<br/>
			crimson-&gt;reset_player();<br/>
		}<br/>
		<b><a href="CppVoid.htm">void</a></b> set_walls()<br/>
		{			<br/>
			<b><a href="CppFor.htm">for</a></b>(Uint16 i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
				fawn-&gt;walls[i].set_wall(i,0);<br/>
			<b><a href="CppFor.htm">for</a></b>(Uint16 i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
				crimson-&gt;walls[i].set_wall(i,9);<br/>
		}<br/>
		<b><a href="CppVoid.htm">void</a></b> draw_board()<br/>
		{<br/>
			U<b><a href="CppInt.htm">int</a></b>8 i,j;<br/>
			<b><a href="CppFor.htm">for</a></b> (j=0;j&lt;9;j<a href="CppOperatorIncrement.htm">++</a>)<br/>
				<b><a href="CppFor.htm">for</a></b> (i=0;i&lt;9;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
					draw_square(i*(squaresize+margins)+360, squaresize*2+margins+60+j*(squaresize+margins),squaresize,squaresize,RGBtoInt(230,170,100) );<br/>
			<b><a href="CppFor.htm">for</a></b> (i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
				draw_square(i*(squaresize+margins)+360-margins, squaresize*2+margins+60,margins,squaresize*9+margins*8,RGBtoInt(190,130,60) );<br/>
			<b><a href="CppFor.htm">for</a></b> (i=0;i&lt;8;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
				draw_square(360, i*(squaresize+margins)+squaresize*3+margins+60,squaresize*9+margins*8,margins,RGBtoInt(190,130,60) );<br/>
			draw_square(360-margins,60,squaresize*9+margins*10,squaresize*2+margins,RGBtoInt(190,130,60) );<br/>
			draw_square(360-margins,60+squaresize*11+margins*9,squaresize*9+margins*10,squaresize*2+margins,RGBtoInt(190,130,60) );<br/>
			<b><a href="CppFor.htm">for</a></b>( i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
				fawn-&gt;walls[i].draw_wall();<br/>
			<b><a href="CppFor.htm">for</a></b>( i=0;i&lt;10;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
				crimson-&gt;walls[i].draw_wall();<br/>
			crimson-&gt;draw_player();<br/>
			fawn-&gt;draw_player();<br/>
			<b><a href="CppIf.htm">if</a></b> (crimson-&gt;wselected<a href="CppOperatorEqual.htm">==</a>10)<br/>
				crimson-&gt;make_around(fawn);<br/>
			<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (fawn-&gt;wselected<a href="CppOperatorEqual.htm">==</a>10)<br/>
				fawn-&gt;make_around(crimson);<br/>
			<br/>
			SDL_UpdateRect(screen, 0, 0, SCRX, SCRY);<br/>
		}<br/>
		<b><a href="CppChar.htm">char</a></b> which_wall(Uint16 x,<b><a href="CppBool.htm">bool</a></b> turn)<br/>
		{<br/>
			x<a href="CppOperatorPlusAssign.htm">+=</a>margins-360;<br/>
			<b><a href="CppChar.htm">char</a></b> spx=x/(squaresize+margins);<br/>
			x<a href="CppOperatorModulusAssign.htm">%=</a>(squaresize+margins);<br/>
			<b><a href="CppIf.htm">if</a></b> (x&lt;margins <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> spx<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> spx<a href="CppOperatorLessEqual.htm">&lt;=</a>9)<br/>
				<b><a href="CppIf.htm">if</a></b> (turn)<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (!crimson-&gt;walls[spx].placed)<br/>
						<b><a href="CppReturn.htm">return</a></b> spx;<br/>
				}<br/>
				<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (!fawn-&gt;walls[spx].placed)<br/>
						<b><a href="CppReturn.htm">return</a></b> spx;<br/>
			<b><a href="CppReturn.htm">return</a></b> <a href="CppOperatorMinus.htm">-</a>1;<br/>
		}<br/>
		<b><a href="CppVoid.htm">void</a></b> undo()<br/>
		{<br/>
			<b><a href="CppIf.htm">if</a></b> (lmove.able <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (!game_end))<br/>
			{<br/>
				turn=!turn;<br/>
				<b><a href="CppIf.htm">if</a></b> (lmove.player)<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (turn)<br/>
						crimson-&gt;move(lmove.movex,lmove.movey,&amp;lmove);<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
						fawn-&gt;move(lmove.movex,lmove.movey,&amp;lmove);<br/>
				}<br/>
				<b><a href="CppElse.htm">else</a></b><br/>
				{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turn)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; crimson-&gt;walls[lmove.wall_number].draw_wall(RGBtoInt(190,130,60));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; crimson-&gt;walls[lmove.wall_number].set_wall(lmove.wall_number,9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; crimson-&gt;walls[lmove.wall_number].draw_wall();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fawn-&gt;walls[lmove.wall_number].draw_wall(RGBtoInt(190,130,60));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fawn-&gt;walls[lmove.wall_number].set_wall(lmove.wall_number,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fawn-&gt;walls[lmove.wall_number].draw_wall();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
				SDL_UpdateRect(screen, 0, 0, SCRX, SCRY);<br/>
				lmove.able=<b><a href="CppFalse.htm">false</a></b>;<br/>
			}<br/>
		}<br/>
		<b><a href="CppVoid.htm">void</a></b> move_event(Uint16 x, Uint16 y,Textbar *actiontext)<br/>
		{<br/>
			<b><a href="CppIf.htm">if</a></b>(!game_end)<br/>
			{<br/>
				<b><a href="CppIf.htm">if</a></b> (turn)<br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b> (crimson-&gt;onplayer(x,y)<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !(crimson-&gt;mouse_over))<br/>
					{<br/>
						<br/>
						<b><a href="CppIf.htm">if</a></b> (crimson-&gt;wselected<a href="CppOperatorNotEqual.htm">!=</a>10)<br/>
						{<br/>
							actiontext-&gt;change_text("Player 1: Select your crimson Pawn");<br/>
							crimson-&gt;mouse_over=<b><a href="CppTrue.htm">true</a></b>;<br/>
						}<br/>
					}<br/>
					<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (!crimson-&gt;onplayer(x,y) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (crimson-&gt;mouse_over))<br/>
						{<br/>
								crimson-&gt;mouse_over=<b><a href="CppFalse.htm">false</a></b>;<br/>
								actiontext-&gt;change_text("");<br/>
						}<br/>
						<b><a href="CppIf.htm">if</a></b> (crimson-&gt;wselected <a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> crimson-&gt;wselected&lt;10)<br/>
							preview_wall_place(x,y);<br/>
						<br/>
					}<br/>
				}<br/>
				<b><a href="CppElse.htm">else</a></b> <br/>
					<b><a href="CppIf.htm">if</a></b> (fawn-&gt;onplayer(x,y)<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !(fawn-&gt;mouse_over))<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (fawn-&gt;wselected<a href="CppOperatorNotEqual.htm">!=</a>10)<br/>
						{<br/>
						actiontext-&gt;change_text("Player 2: Select your fawn Pawn");<br/>
						fawn-&gt;mouse_over=<b><a href="CppTrue.htm">true</a></b>;<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> ((!fawn-&gt;onplayer(x,y)) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (fawn-&gt;mouse_over))<br/>
						{<br/>
							fawn-&gt;mouse_over=<b><a href="CppFalse.htm">false</a></b>;<br/>
							actiontext-&gt;change_text("");<br/>
							<br/>
						}<br/>
						<b><a href="CppIf.htm">if</a></b> (fawn-&gt;wselected <a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fawn-&gt;wselected&lt;10)<br/>
								preview_wall_place(x,y);<br/>
						<br/>
					}<br/>
			}<br/>
		}<br/>
		<br/>
		<br/>
		<b><a href="CppVoid.htm">void</a></b> click_event(Uint16 button,Uint16 x, Uint16 y,Textbar *actiontext)<br/>
		{<br/>
			<a href="CppComment.htm">//</a>walls[0][0].changepos(4,2,<b><a href="CppFalse.htm">false</a></b>);<br/>
			<b><a href="CppChar.htm">char</a></b> other_lx,other_ly;<br/>
			<b><a href="CppIf.htm">if</a></b>(!game_end)<br/>
			<b><a href="CppIf.htm">if</a></b> (turn)<br/>
			{<br/>
				other_lx=fawn-&gt;locx;<br/>
				other_ly=fawn-&gt;locy;<br/>
				<b><a href="CppIf.htm">if</a></b> (crimson-&gt;onplayer(x,y))<br/>
					crimson-&gt;select(fawn);<br/>
				<b><a href="CppElse.htm">else</a></b> <br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b>(crimson-&gt;wselected<a href="CppOperatorEqual.htm">==</a>10)<br/>
					{<br/>
						crimson-&gt;select(fawn);<br/>
						<b><a href="CppChar.htm">char</a></b> possible=crimson-&gt;possible_move(x,y,fawn,&amp;lmove);<br/>
						<b><a href="CppIf.htm">if</a></b> (possible<a href="CppOperatorEqual.htm">==</a>-1)<br/>
						{<br/>
								game_end=<b><a href="CppTrue.htm">true</a></b>;<br/>
								actiontext-&gt;change_text("Game won by Player 1 with his crimson Pawn");<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (possible <a href="CppOperatorNotEqual.htm">!=</a>0)<br/>
							change_turn();<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (crimson-&gt;wselected<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> crimson-&gt;wselected&lt;10)<br/>
						{<br/>
							change_wall_place(x,y,&amp;(crimson-&gt;walls[crimson-&gt;wselected]));<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						<b><a href="CppIf.htm">if</a></b> (y<a href="CppOperatorGreaterEqual.htm">&gt;=</a>60+11*squaresize+9*margins <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y&lt;60+13*squaresize+10*margins)<br/>
						{<br/>
							<b><a href="CppChar.htm">char</a></b> spx=which_wall(x,turn);<br/>
							<b><a href="CppIf.htm">if</a></b> (spx&lt;0)<br/>
								<b><a href="CppReturn.htm">return</a></b>;<br/>
							<b><a href="CppIf.htm">if</a></b> (crimson-&gt;wselected<a href="CppOperatorNotEqual.htm">!=</a>spx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> crimson-&gt;wselected<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> crimson-&gt;wselected&lt;10)<br/>
								crimson-&gt;walls[crimson-&gt;wselected].remove_focus();<br/>
							crimson-&gt;wselected=spx;<br/>
							crimson-&gt;walls[spx].set_focus();<br/>
						}<br/>
					}<br/>
				}<br/>
			}<br/>
			<b><a href="CppElse.htm">else</a></b><br/>
			{<br/>
				<b><a href="CppIf.htm">if</a></b> (fawn-&gt;onplayer(x,y))<br/>
					fawn-&gt;select(crimson);<br/>
				<b><a href="CppElse.htm">else</a></b> <br/>
				{<br/>
					<b><a href="CppIf.htm">if</a></b>(fawn-&gt;wselected<a href="CppOperatorEqual.htm">==</a>10)<br/>
					{<br/>
						fawn-&gt;select(crimson);<br/>
						<b><a href="CppChar.htm">char</a></b> possible;<br/>
						possible=fawn-&gt;possible_move(x,y,crimson,&amp;lmove);<br/>
						<b><a href="CppIf.htm">if</a></b> (possible<a href="CppOperatorEqual.htm">==</a>-1)<br/>
						{<br/>
								game_end=<b><a href="CppTrue.htm">true</a></b>;<br/>
								actiontext-&gt;change_text("Game won by Player 2 with his fawn Pawn");<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (possible <a href="CppOperatorNotEqual.htm">!=</a>0)<br/>
							change_turn();<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b><br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (fawn-&gt;wselected<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fawn-&gt;wselected&lt;10)<br/>
						{<br/>
							change_wall_place(x,y,&amp;(fawn-&gt;walls[fawn-&gt;wselected]));<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
							<b><a href="CppIf.htm">if</a></b> (y<a href="CppOperatorGreaterEqual.htm">&gt;=</a>60 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y&lt;60+2*squaresize+margins)<br/>
							{<br/>
								<b><a href="CppChar.htm">char</a></b> spx=which_wall(x,turn);<br/>
								<b><a href="CppIf.htm">if</a></b> (spx&lt;0)<br/>
									<b><a href="CppReturn.htm">return</a></b>;<br/>
								<b><a href="CppIf.htm">if</a></b> (fawn-&gt;wselected<a href="CppOperatorNotEqual.htm">!=</a>spx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fawn-&gt;wselected<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fawn-&gt;wselected&lt;10)<br/>
									fawn-&gt;walls[fawn-&gt;wselected].remove_focus();<br/>
								fawn-&gt;wselected=spx;<br/>
								fawn-&gt;walls[spx].set_focus();<br/>
							}<br/>
					}<br/>
					<br/>
				}<br/>
			}<br/>
			SDL_UpdateRect(screen, 0, 0, SCRX, SCRY);<br/>
		}<br/>
<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
	atexit(programexit);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( SDL_Init(SDL_INIT_VIDEO |SDL_INIT_AUDIO) &lt; 0 ) <br/>
<br/>
	{<br/>
		fprintf(<a href="CppStd.htm">std</a>err, "Unable to init SDL: <a href="CppOperatorModulus.htm">%</a>s\n", SDL_GetError());<br/>
	&nbsp;&nbsp;exit(1);<br/>
&nbsp;&nbsp;}<br/>
<br/>
	<a href="CppComment.htm">//</a> Attempt to create a 800x600 window with 32bit pixels.<br/>
	screen <a href="CppOperatorAssign.htm">=</a> SDL_SetVideoMode(SCRX, SCRY, 32, SDL_SWSURFACE|SDL_DOUBLEBUF);<br/>
			&nbsp;&nbsp;<a href="CppComment.htm">//</a> If we fail, <b><a href="CppReturn.htm">return</a></b> error.<br/>
			<b><a href="CppIf.htm">if</a></b> ( screen <a href="CppOperatorEqual.htm">==</a> <a href="CppNULL.htm">NULL</a> )<br/>
			{<br/>
				fprintf(<a href="CppStd.htm">std</a>err, "Unable to set 800x600 video: <a href="CppOperatorModulus.htm">%</a>s\n", SDL_GetError());<br/>
				exit(1);<br/>
			}<br/>
	pixptr <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>*)screen-&gt;pixels;<br/>
	TTF_Init();<br/>
	SDL_WM_SetCaption( "Quoridor Game",<a href="CppNULL.htm">NULL</a>);<br/>
	SDL_Surface *icon=IMG_Load("resources<a href="CppComment.htm">//</a><a href="GameCorridor.htm">corridor</a>.png");<br/>
	SDL_WM_SetIcon(icon, <a href="CppNULL.htm">NULL</a>);<br/>
	SDL_FreeSurface(icon);<br/>
	SDL_UnlockSurface(screen);<br/>
&nbsp;&nbsp;Textbar * actiontext<a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> Textbar();<br/>
	Game *main_game<a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> Game();<br/>
	Menu *main_menu<a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> Menu();<br/>
	Uint16 menucevt;<br/>
	<br/>
	SDL_UpdateRect(screen, 2, 0, 250, SCRY);<br/>
	<b><a href="CppBool.htm">bool</a></b> move_event_menu=<b><a href="CppFalse.htm">false</a></b>;<br/>
	<b><a href="CppWhile.htm">while</a></b> (1)<br/>
	{<br/>
		SDL_Delay(16);<br/>
		SDL_Event event;<br/>
		<b><a href="CppWhile.htm">while</a></b> (SDL_PollEvent(&amp;event)) <br/>
		{<br/>
			<b><a href="CppSwitch.htm">switch</a></b> (event.type) <br/>
			{<br/>
				<b><a href="CppCase.htm">case</a></b> SDL_MOUSEBUTTONUP:<br/>
					<a href="CppComment.htm">//</a>SDL_UnlockSurface(screen);<br/>
					<b><a href="CppIf.htm">if</a></b>(event.button.y<a href="CppOperatorGreaterEqual.htm">&gt;=</a>42)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (event.button.x&lt;254)<br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (event.button.button<a href="CppOperatorEqual.htm">==</a>1)<br/>
							{<br/>
								menucevt=main_menu-&gt;click_event(event.button.y,actiontext);<br/>
								<b><a href="CppSwitch.htm">switch</a></b> (menucevt)<br/>
								{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;main_game-&gt;undo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
								<b><a href="CppCase.htm">case</a></b> 1:<br/>
									<b><a href="CppGoto.htm">goto</a></b> quit;<br/>
								<b><a href="CppCase.htm">case</a></b> 2:<br/>
									main_game-&gt;draw_board();<br/>
									SDL_UpdateRect(screen, 0, 0, SCRX, SCRY);<br/>
									<b><a href="CppBreak.htm">break</a></b>;<br/>
								<b><a href="CppCase.htm">case</a></b> 3:<br/>
									main_game-&gt;new_game();<br/>
									<b><a href="CppBreak.htm">break</a></b>;<br/>
								}<br/>
							}<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							main_game-&gt;click_event(event.button.button,event.button.x,event.button.y,actiontext);<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b> <br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (!main_game-&gt;game_end)<br/>
							<b><a href="CppIf.htm">if</a></b> (main_game-&gt;turn)<br/>
								actiontext-&gt;change_text("It's the crimson turn (Player 1)");<br/>
							<b><a href="CppElse.htm">else</a></b><br/>
								actiontext-&gt;change_text("It's the fawn turn (Player 2)");<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
							<b><a href="CppIf.htm">if</a></b> (main_game-&gt;turn)<br/>
								actiontext-&gt;change_text("crimson (Player 1) won the game!");<br/>
							<b><a href="CppElse.htm">else</a></b> <br/>
								actiontext-&gt;change_text("fawn (Player 2) won the game!");<br/>
					}<br/>
					<a href="CppComment.htm">//</a>SDL_LockSurface(screen);<br/>
					<b><a href="CppBreak.htm">break</a></b>;<br/>
				<b><a href="CppCase.htm">case</a></b> SDL_MOUSEMOTION:<br/>
					<a href="CppComment.htm">//</a>SDL_UnlockSurface(screen);<br/>
					<b><a href="CppIf.htm">if</a></b>(event.motion.y<a href="CppOperatorGreaterEqual.htm">&gt;=</a>42)<br/>
					{<br/>
						<b><a href="CppIf.htm">if</a></b> (actiontext-&gt;mouse_over)<br/>
							actiontext-&gt;mouse_over=<b><a href="CppFalse.htm">false</a></b>;<br/>
						<b><a href="CppIf.htm">if</a></b> (event.motion.x&lt;254)<br/>
						{<br/>
							main_menu-&gt;move_event(event.motion.y,actiontext);<br/>
							move_event_menu=<b><a href="CppTrue.htm">true</a></b>;<br/>
						}<br/>
						<b><a href="CppElse.htm">else</a></b><br/>
						{<br/>
							<b><a href="CppIf.htm">if</a></b> (move_event_menu)<br/>
							{<br/>
								main_menu-&gt;notover();<br/>
								actiontext-&gt;change_text("");<br/>
								move_event_menu=<b><a href="CppFalse.htm">false</a></b>;<br/>
							}<br/>
							main_game-&gt;move_event(event.motion.x,event.motion.y,actiontext);<br/>
							<br/>
						}<br/>
					}<br/>
					<b><a href="CppElse.htm">else</a></b> <br/>
					{<br/>
						main_menu-&gt;notover();<br/>
						<b><a href="CppIf.htm">if</a></b> (!actiontext-&gt;mouse_over)<br/>
							actiontext-&gt;change_text("Welcome to Corridor");<br/>
						actiontext-&gt;mouse_over=<b><a href="CppTrue.htm">true</a></b>;<br/>
					}<br/>
					<a href="CppComment.htm">//</a>SDL_LockSurface(screen);<br/>
					<b><a href="CppBreak.htm">break</a></b>;<br/>
				<b><a href="CppCase.htm">case</a></b> SDL_QUIT:<br/>
					quit:<br/>
					<b><a href="CppDelete.htm">delete</a></b> main_game;<br/>
					<b><a href="CppDelete.htm">delete</a></b> main_menu;<br/>
					<b><a href="CppDelete.htm">delete</a></b> actiontext;<br/>
					<b><a href="CppReturn.htm">return</a></b>(0);<br/>
			}<br/>
		}<br/>
	}<br/>
	<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
 <br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppVoid.htm">void</a></b> draw_linex(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> x,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> ly,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> width, <b><a href="CppInt.htm">int</a></b> color)<br/>
{<br/>
	<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> lx=x+width;<br/>
	<b><a href="CppWhile.htm">while</a></b> (lx&gt;x)<br/>
	{<br/>
		lx<a href="CppOperatorDecrement.htm">--</a>;<br/>
		putpixel(lx,ly,color);<br/>
	}<br/>
}<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppVoid.htm">void</a></b> draw_square(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> x,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> y,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> width,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> height, <b><a href="CppInt.htm">int</a></b> color)<br/>
{<br/>
<br/>
	<br/>
	<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> ly=y+height;<br/>
<br/>
	<br/>
		<b><a href="CppWhile.htm">while</a></b> (ly&gt;y)<br/>
		{<br/>
			ly<a href="CppOperatorDecrement.htm">--</a>;<br/>
			draw_linex(x,ly,width,color);<br/>
		}<br/>
	<br/>
	<br/>
}<br/>
<b><a href="CppVoid.htm">void</a></b> grad_square(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> x,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> y,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> width,<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> height, <b><a href="CppInt.htm">int</a></b> color1,<b><a href="CppInt.htm">int</a></b> color2)<br/>
{<br/>
<br/>
	<br/>
	<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppShort.htm">short</a></b> ly=y+height;<br/>
	<b><a href="CppChar.htm">char</a></b> r=<b><a href="CppChar.htm">char</a></b>((InttoR(color2)-InttoR(color1))/(<b><a href="CppFloat.htm">float</a></b>)(height)-0.1),g=<b><a href="CppChar.htm">char</a></b>((InttoG(color2)-InttoG(color1))/(<b><a href="CppFloat.htm">float</a></b>)(height)-0.1),b=<b><a href="CppChar.htm">char</a></b>((InttoB(color2)-InttoB(color1))/(<b><a href="CppFloat.htm">float</a></b>)(height)-0.1);<br/>
<br/>
	<br/>
	<b><a href="CppWhile.htm">while</a></b> (ly&gt;y)<br/>
	{<br/>
		ly<a href="CppOperatorDecrement.htm">--</a>;<br/>
		draw_linex(x,ly,width,color1);<br/>
		color1=RGBtoInt(InttoR(color1)+r, InttoG(color1)+g, InttoB(color1)+b);<br/>
	}<br/>
	<br/>
	<br/>
}<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppInt.htm">int</a></b> RGBtoInt(U<b><a href="CppInt.htm">int</a></b>8 r, U<b><a href="CppInt.htm">int</a></b>8 g, U<b><a href="CppInt.htm">int</a></b>8 b)<br/>
{<br/>
	<b><a href="CppReturn.htm">return</a></b> ((r<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>16)|(g<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>8)|b);<br/>
}<br/>
<b><a href="CppInline.htm">inline</a></b> U<b><a href="CppInt.htm">int</a></b>8 InttoR(<b><a href="CppInt.htm">int</a></b> color)<br/>
{<br/>
	<b><a href="CppReturn.htm">return</a></b> (color<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>16);<br/>
}<br/>
<b><a href="CppInline.htm">inline</a></b> U<b><a href="CppInt.htm">int</a></b>8 InttoG(<b><a href="CppInt.htm">int</a></b> color)<br/>
{<br/>
	<b><a href="CppReturn.htm">return</a></b> (color<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>8)%256;<br/>
}<br/>
<b><a href="CppInline.htm">inline</a></b> U<b><a href="CppInt.htm">int</a></b>8 InttoB(<b><a href="CppInt.htm">int</a></b> color)<br/>
{<br/>
	<b><a href="CppReturn.htm">return</a></b> (color)%256;<br/>
}<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> SDL_Color RGBAcolor(Uint16 r,Uint16 g,Uint16 b,Uint16 a)<br/>
{<br/>
SDL_Color clr={r,g,b,a};<br/>
<b><a href="CppReturn.htm">return</a></b> clr;<br/>
}<br/>
<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppVoid.htm">void</a></b> putpixel(<b><a href="CppInt.htm">int</a></b> x, <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppInt.htm">int</a></b> color)<br/>
{<br/>
		<b><a href="CppInt.htm">int</a></b> lineoffset <a href="CppOperatorAssign.htm">=</a> y * (screen-&gt;pitch <a href="CppOperatorDivide.htm">/</a> 4);<br/>
		pixptr[lineoffset <a href="CppOperatorPlus.htm">+</a> x] <a href="CppOperatorAssign.htm">=</a> color;<br/>
}<br/>
<br/>
SDL_Surface *load_image( <a href="CppStdString.htm">std::string</a> filename ) <br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The image that's loaded<br/>
	SDL_Surface* loadedImage <a href="CppOperatorAssign.htm">=</a> <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The optimized image that will be used<br/>
	SDL_Surface* optimizedImage <a href="CppOperatorAssign.htm">=</a> <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Load the image <b><a href="CppUsing.htm">using</a></b> SDL_image<br/>
	loadedImage <a href="CppOperatorAssign.htm">=</a> IMG_Load( filename.c_str() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If the image loaded<br/>
	<b><a href="CppIf.htm">if</a></b>( loadedImage <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppNULL.htm">NULL</a> )<br/>
	{<br/>
		SDL_SetColorKey(loadedImage, SDL_SRCCOLORKEY, SDL_MapRGB(loadedImage-&gt;format, 0, 0,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create an optimized image<br/>
		optimizedImage <a href="CppOperatorAssign.htm">=</a> SDL_DisplayFormat( loadedImage );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Free the old image<br/>
		SDL_FreeSurface( loadedImage );<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Return the optimized image<br/>
	<b><a href="CppReturn.htm">return</a></b> optimizedImage;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameCorridor/build.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameCorridor/build.sh" border = "1"><tr><td><code>
g++ ucorridor.cpp -o corridor -lSDL -lSDL_ttf -lSDL_image<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
