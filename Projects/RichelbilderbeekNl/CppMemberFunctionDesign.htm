<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Method design</title>
  <meta name="description" content="C++ Method design"/>
  <meta name="keywords" content="C++ Method design code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMemberFunctionDesign.htm">member function design</a></h1>
<p>&nbsp;</p>
<p><a href="CppMemberFunctionDesign.htm">member function design</a> is the design of 'good' <a href="CppMemberFunction.htm">member functions</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>General</h2>
<p>&nbsp;</p>
<ul>
  <li>
    Follow a good <a href="CppFunctionDesign.htm">function design</a>. Note: many points of <a href="CppAdvice.htm">advice</a>!
  </li>
  <li>
    Prefer writing short <a href="CppMemberFunction.htm">member functions</a> [3] (and <a href="CppHelperFunction.htm">helper functions</a> [18-20]).
  </li>
  <li>
    Attempt to make your names so clear that comments are unnecessary [24]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppMemberFunction.htm">Member function</a> or <a href="CppFriend.htm">friend</a>/non-<a href="CppFriend.htm">friend</a> <a href="CppHelperFunction.htm">helper function</a>?</h2>
<p>&nbsp;</p>
<ul>
  <li>
    Prefer non-<a href="CppFriend.htm">friend</a> <a href="CppHelperFunction.htm">helper functions</a> 
    to <a href="CppMemberFunction.htm">member functions</a> [4,5]
  </li>
  <li>
    Make <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> and <a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a><br/>
    a <a href="CppFriend.htm">befriended</a> <a href="CppHelperFunction.htm">helper function</a> [1]
  </li>
  <li>
    Make a <a href="CppFunction.htm">function</a> that needs type conversions on its leftmost argument, 
    a <a href="CppFriend.htm">befriended</a> <a href="CppHelperFunction.htm">helper function</a> [1]
  </li>
  <li>
    Make <a href="CppFunction.htm">functions</a> that can be implemented using the (<a href="CppPublic.htm">public</a>) <a href="CppInterface.htm">interface</a> 
    a <a href="CppHelperFunction.htm">helper functions</a> [1]
  </li>
  <li>
    Make a <a href="CppFunction.htm">function</a> a <a href="CppMemberFunction.htm">member function</a> 
    only if it needs direct access to the representation of a <a href="CppClass.htm">class</a>,
    else make it a <a href="CppHelperFunction.htm">helper function</a> [10]
  </li>
  <li>
    The <a href="CppOperator.htm">operators</a> = () [] and -&gt; must be <a href="CppMemberFunction.htm">member functions</a> [1]
  </li>
  <li>
    Use <a href="CppHelperFunction.htm">helper functions</a> for symmetric <a href="CppOperator.htm">operators</a> [21], for example <a href="CppOperatorPlus">operator+</a> and <a href="CppOperatorPlus">operator-</a>
  </li>
  <li>
    Use <a href="CppMemberFunction.htm">member functions</a> to express <a href="CppOperator.htm">operators</a> that require an <a href="CppLvalue.htm">lvalue</a> as their left-hand operand [22],
    for example <a href="CppOperatorPlusAssign.htm">operator+=</a>
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppBigFour.htm">The Big Four</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Design <a href="CppContructor.htm">constructors</a>, assignments, and the <a href="CppDestructor.htm">destructor</a> as a matched set of operations [13]
  </li>
  <li>
    Define a <a href="CppConstructor.htm">constructor</a> to handle initialization of objects [6]
  </li>
  <li>
    By default declare single-<a href="CppArgument.htm">argument</a> <a href="CppConstructor.htm">constructors</a> <a href="CppExplicit.htm">explicit</a> [7]
    Make <a href="CppConstructor.htm">constructors</a> <a href="CppExplicit.htm">explicit</a> whenever possible [8]
  </li>
  <li>
    If a <a href="CppClass.htm">class</a> is a <a href="CppContainer.htm">container</a>, give it an <a href="CppInitializerList.htm">initializer-list</a> <a href="CppContructor.htm">constructor</a> [15]
  </li>
  <li>
    If a <a href="CppClass.htm">class</a> has a <a href="CppReference.htm">reference</a> <a href="CppMemberVariable.htm">member variable</a>, it probably needs a <a href="CppCopyConstructor.htm">copy constructor</a> and <a href="CppCopyAssignmentOperator.htm">copy assignment operator</a>)
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Regular <a href="CppMemberFunction.htm">member functions</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Use function overloading and default arguments to create an intuitive, easy-to-use interface [24]
  </li>

  <li>
    Provide setters and getters for a <a href="CppMemberVariable.htm">member variable</a> only if the fundamental semantics of a class requires them [23]
  </li>
  <li>
    <a href="CppAvoidDuplicationInConstAndNonConstMemberFunctions.htm">Avoid duplication in const and non-const member functions</a> [2]
  </li>
<!-- Virtual member functions -->
  <li>
    Make <a href="CppFunction.htm">functions</a> that should behave virtually a virtual <a href="CppMemberFunction.htm">member functions</a> [1]
  </li>
  <li>
    If a <a href="CppClass.htm">class</a> has a <a href="CppVirtual.htm">virtual</a> <a href="CppMemberFunction.htm">member functions</a>, 
    it needs a <a href="CppVirtual.htm">virtual</a> <a href="CppDestructor.htm">destructor</a> [14]
  </li>
<!-- Const member functions -->
  <li>
    Declare a <a href="CppMemberFunction.htm">member function</a> that does not modify the state of its object a <a href="CppConstMemberFunction.htm">const member function</a> [9,11]
  </li>
<!-- Static member functions -->
  <li>
    Make a function that needs access to the representation of a class but needn't be called for a specific object a <a href="CppStaticMemberFunction.htm">static member function</a> [12]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppHerbSutter.htm">Herb Sutter</a>. Exceptional C++. ISBN: 0-201-61562-2. Item 20: Class mechanics.</li>
  <li><!--  2 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN:0-321-33487-6. Item 3, paragraph 'Avoid duplication in const and non-const member functions'.</li>
  <li><!--  3 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. AV Rule 1: 'Any one function (or method) will contain no more than 200 logical source lines of code.'</li>
  <li><!--  4 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 23: Prefer non-member non-friend functions to member functions.</li>
  <li><!--  5 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Chapter 44: 'Prefer writing nonmember nonfriend functions'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 16.4. Advice. page 479: '[4] Define a constructor to handle initialization of objects'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 16.4. Advice. page 479: '[5] By default declare single-argument constructors explicit'</li>
  <li><!--  8 --><a href="CppHerbSutter.htm">Herb Sutter</a>. Exceptional C++. ISBN: 0-201-61562-2. Item 20, page 71, top guideline :'Watch out for hidden temporaries created by implicit conversions. One good way to avoid this is to make constructors explicit when possible, and avoiding writing conversion operators'</li>
  <li><!--  9 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 16.4. Advice. page 479: '[6] Declare a member function that does not modify the state of its object const'</li>
  <li><!-- 10 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 16.4. Advice. page 479: '[8] Make a function a member only if it needs direct access to the representation of a class'</li>
  <li><!-- 11 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 16.4. Advice. page 479: '[10] Make a member function that doesn't modify the value of an object a const member function'</li>
  <li><!-- 12 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 16.4. Advice. page 479: '[11] Make a function that needs access to the representation of a class but needn't be called for a specific object a static member function'</li>
  <li><!-- 13 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[1] Design constructors, assignments, and the destructor as a matched set of operations'</li>
  <li><!-- 14 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[4] If a class has a virtual function, it needs a virtual destructor'</li>
  <li><!-- 15 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[8] If a class is a container, give it an initializer-list constructor'</li>
  <li><!-- 16 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[10] If a class has a reference member, it probably needs copy operations (copy constructor and copy assignment)'</li>
  <li><!-- 17 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 18.5. Advice, page 547: '[2] Redefine or prohib '</li>
  <li><!-- 18 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 20: 'Avoid long functions. Avoid deep nesting'</li>
  <li><!-- 19 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. AV Rule 1: 'Any one function (or method) will contain no more than 200 logical source lines of code.'</li>
  <li><!-- 20 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[3] Keep functions short'</li>
  <li><!-- 21 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 18.5. Advice. page 548: '[8] Use nonmember functions for symmetric operators'</li>
  <li><!-- 22 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 18.5. Advice. page 548: '[9] Use member functions to express operators that require an lvalue as their left-hand operand'</li>
  <li><!-- 23 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 18.5. Advice. page 548: '[11] Provide "set() and get() functions" for a data member only if the fundamental semantics of a class requires them'</li>
  <li><!-- 24 --><a href="CppBruceEckel.htm">Bruce Eckel</a>. Thinking in C++, second edition, volume 1. 2000. ISBN: 0-13-979809-9. Chapter B: Programming Guidelines. Item 7: 'When you create a class, make your names as clear as possible. Your goal should be to make the client programmer’s interface conceptually simple. Attempt to make your names so clear that comments are unnecessary. To this end, use function overloading and default arguments to create an intuitive, easy-to-use interface.'</li>

</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

