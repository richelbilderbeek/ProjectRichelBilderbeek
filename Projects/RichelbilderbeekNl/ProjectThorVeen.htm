<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>ThorVeen</title>
  <meta name="description" content="C++ ThorVeen"/>
  <meta name="keywords" content="C++ ThorVeen "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ProjectThorVeen.htm">ThorVeen</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.680 at Sun Jul  6 18:34:03 2014
 -->
<p><img src="PicVcl.png" alt="VCL"/><img src="PicCppBuilder.png" alt="C++ Builder"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="ProjectThorVeen.htm">The Thor Veen Project</a> is a simulation <a href="Projects.htm">project</a> that investigates costless and honest signalling using the Hawk-Dove game as its base.</p>
<p>&nbsp;</p>
<p><a href="ProjectThorVeen.htm">The Thor Veen Project</a> has been developed for <a href="http://biosciences.exeter.ac.uk/staff/index.php?web_id=thor_veen">Thor Veen</a>.</p>
<p>&nbsp;</p>
<p><a href="ProjectThorVeen.htm">The Thor Veen Project</a> has been developed by (sorted alphabetically on first name):</p>
<ul>
  <li><a href="http://www.richelbilderbeek.nl">Richel Bilderbeek</a>: programming</li>
  <li><a href="http://biosciences.exeter.ac.uk/staff/index.php?web_id=thor_veen">Thor Veen</a>: researcher</li>
</ul>
<p>&nbsp;</p>
<p><a href="ProjectThorVeen.htm">The Thor Veen Project</a> was developed from about the 9th of February of 2006 to about the 3rd of April of 2006.</p>
<p>&nbsp;</p>
<p><a href="ProjectThorVeen.htm">The Thor Veen Project</a> is licenced under GPL 3.0.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ProjectThorVeen_0_9.png">View a screenshot of 'The Thor Veen Project' (version 0.9)(png)</a></li>
  <li><a href="ProjectThorVeenExe_0_9.zip">Download the 'The Thor Veen Project' Windows executable (version 0.9)(zip)</a></li>
  <li><a href="ProjectThorVeenSource_0_9.zip">Download the 'The Thor Veen Project' source code (version 0.9)(zip)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/ProjectThorVeen.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/ProjectThorVeen.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitForm<a href="CppAbout.htm">About</a>TheAuthor<a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppAbout.htm">About</a>TheAuthor);<br/>
USEFORM("UnitFormParameters<a href="CppImplementationFile.htm">.cpp</a>", FormParameters);<br/>
USEFORM("UnitFormResults<a href="CppImplementationFile.htm">.cpp</a>", FormResults);<br/>
USEFORM("UnitFormTest<a href="CppImplementationFile.htm">.cpp</a>", FormTest);<br/>
USEFORM("UnitMain<a href="CppImplementationFile.htm">.cpp</a>", FormThorVeenProject);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "The Thor Veen Project";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;HelpFile <a href="CppOperatorAssign.htm">=</a> "C:\\Program Files\\Borland\\CBuilder6\\<a href="Projects.htm">Projects</a>\\Simulations\\ThorVeen\\7\\PROJECTHELP.HLP";<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormThorVeenProject), &amp;FormThorVeenProject);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormResults), &amp;FormResults);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormParameters), &amp;FormParameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormTest), &amp;FormTest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBird.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBird.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitBirdH<br/>
<a href="CppDefine.htm">#define</a> UnitBirdH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumBirdType.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdFactoryBase;<br/>
<b><a href="CppClass.htm">class</a></b> BirdGeneralParameters;<br/>
<b><a href="CppClass.htm">class</a></b> BirdHawkDoveParameters;<br/>
<b><a href="CppClass.htm">class</a></b> BirdWatcher;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Every bird has a condition<br/>
<b><a href="CppClass.htm">class</a></b> BirdBase : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;BirdBase();<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~BirdBase();<br/>
&nbsp;&nbsp;BirdBase(<b><a href="CppConst.htm">const</a></b> BirdFactoryBase * birdFactory);<br/>
&nbsp;&nbsp;BirdBase(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; mother, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; father);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> initBase(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdGeneralParameters&gt;&amp; params);<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppBool.htm">bool</a></b> willFight(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppBool.htm">bool</a></b> willDieLoserFight() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getClassName() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> EnumBirdType getClassType() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> setMutationConditionHeritable(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BirdFactoryBase * birdFactory,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; mutationConstitution);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Getters<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getIndexMother() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getIndexFather() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getBirdIndex() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> getCondition() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> getConditionHeritable() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> getConditionEnvironment() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> getConditionParental() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> InitBirdWatcher();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Bird physical parameters<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mConditionHeritable;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mConditionEnvironment;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mConditionParental;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> mMutationConditionHeritable;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Measuring<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> BirdWatcher * mBirdWatcher;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> mBirdIndex<a href="CppCounter.htm">Counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mBirdIndex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mIndexMother;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mIndexFather;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdHawkDove : <b><a href="CppPublic.htm">public</a></b> BirdBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;BirdHawkDove(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BirdFactoryBase * birdFactory,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdGeneralParameters&gt;&amp; birdGeneralParams,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdHawkDoveParameters&gt;&amp; hawkDoveParams);<br/>
&nbsp;&nbsp;BirdHawkDove(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; mother, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; father);<br/>
&nbsp;&nbsp;~BirdHawkDove() {}<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> willFight(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male);<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> willDieLoserFight() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> setMutationPlayHawkAlpha(<b><a href="CppConst.htm">const</a></b> BirdFactoryBase * birdFactory, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; mutationPlayHawkAlpha);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> setMutationPlayHawkBeta(<b><a href="CppConst.htm">const</a></b> BirdFactoryBase * birdFactory,&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; mutationPlayHawkBeta);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> setPdieHawkHawkLoser(<b><a href="CppConst.htm">const</a></b> BirdFactoryBase * birdFactory,&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; pDieHawkHawkLoser);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> getClassName() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;EnumBirdType getClassType() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> getPlayHawkAlpha() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> getPlayHawkBeta() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>BirdHawkDove(BirdFactoryBase*);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> mMutationPlayHawkAlpha;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> mMutationPlayHawkBeta;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> mPdieHawkHawkLoser;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mPlayHawkAlpha;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mPlayHawkBeta;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><b><a href="CppTypedef.htm">typedef</a></b> BirdBase BirdBaseMale;<br/>
<a href="CppComment.htm">//</a><b><a href="CppTypedef.htm">typedef</a></b> BirdBase BirdBaseFemale;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBird.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBird.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumBirdType.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStd.htm">std</a>lib&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitRandom.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulation<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdGeneralParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdHawkDoveParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdFactory.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdWatcher.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> BirdBase::mBirdIndex<a href="CppCounter.htm">Counter</a> <a href="CppOperatorAssign.htm">=</a> 1;<br/>
<b><a href="CppDouble.htm">double</a></b> BirdBase::mMutationConditionHeritable <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
BirdWatcher * BirdBase::mBirdWatcher <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppComment.htm">//</a>BirdWatcher * BirdBase::mBirdWatcher <a href="CppOperatorAssign.htm">=</a> BirdWatcher::<a href="CppInstance.htm">instance</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> BirdHawkDove::mMutationPlayHawkAlpha <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<b><a href="CppDouble.htm">double</a></b> BirdHawkDove::mMutationPlayHawkBeta&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<b><a href="CppDouble.htm">double</a></b> BirdHawkDove::mPdieHawkHawkLoser&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Before a first bird is created, the mBirdWatcher must be <a href="CppInitialize.htm">initialize</a>d<br/>
BirdBase::BirdBase()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The BirdWatcher watches <b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;mBirdIndex <a href="CppOperatorAssign.htm">=</a> mBirdIndex<a href="CppCounter.htm">Counter</a>;<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>mBirdIndex<a href="CppCounter.htm">Counter</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>helper::dot("New bird created: ");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>helper::dot(mBirdIndex<a href="CppCounter.htm">Counter</a>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mBirdWatcher-&gt;reportNewBird(mBirdIndex);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirdWatcher);<br/>
&nbsp;&nbsp;mBirdWatcher-&gt;reportNewBird(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
BirdBase::~BirdBase()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>helper::dot("Bird died: ");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>helper::dot(mBirdIndex<a href="CppCounter.htm">Counter</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The BirdWatcher watches <b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirdWatcher);<br/>
&nbsp;&nbsp;mBirdWatcher-&gt;reportDeadBird(mBirdIndex);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> BirdBase::InitBirdWatcher()<br/>
{<br/>
&nbsp;&nbsp;mBirdWatcher <a href="CppOperatorAssign.htm">=</a> BirdWatcher::<a href="CppInstance.htm">instance</a>();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
BirdBase::BirdBase(<b><a href="CppConst.htm">const</a></b> BirdFactoryBase * birdFactory)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(!"This <a href="CppFunction.htm">function</a> should be overridden in the derived <b><a href="CppClass.htm">classes</a></b>");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
BirdBase::BirdBase(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; mother, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; father)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(!"This <a href="CppFunction.htm">function</a> should be overridden in the derived <b><a href="CppClass.htm">classes</a></b>");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> BirdBase::initBase(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdGeneralParameters&gt;&amp; params)<br/>
{<br/>
&nbsp;&nbsp;mConditionHeritable <a href="CppOperatorAssign.htm">=</a> rnd::normal(<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mInitialConditionHeritableMean,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mInitialConditionHeritableStdDev);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> BirdBase::getClassName() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "BirdBase";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> BirdBase::getIndexMother() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mIndexMother;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> BirdBase::getIndexFather() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mIndexFather;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> BirdBase::getBirdIndex() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mBirdIndex;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> BirdBase::getCondition() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mConditionHeritable <a href="CppOperatorPlus.htm">+</a> mConditionEnvironment <a href="CppOperatorPlus.htm">+</a> mConditionParental;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> BirdBase::getConditionHeritable() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mConditionHeritable;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> BirdBase::getConditionEnvironment() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mConditionEnvironment;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> BirdBase::getConditionParental() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mConditionParental;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> BirdBase::setMutationConditionHeritable(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BirdFactoryBase * birdFactory,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; mutationConditionHeritable)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(birdFactory<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;mMutationConditionHeritable <a href="CppOperatorAssign.htm">=</a> mutationConditionHeritable;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> BirdHawkDove::getClassName() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "BirdHawkDove";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumBirdType BirdHawkDove::getClassType() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> hawkDove;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> BirdHawkDove::setMutationPlayHawkAlpha(<b><a href="CppConst.htm">const</a></b> BirdFactoryBase * birdFactory, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; mutationPlayHawkAlpha)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(birdFactory<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(birdFactory-&gt;getClassName()<a href="CppOperatorEqual.htm">==</a>"BirdFactoryHawkDove");<br/>
&nbsp;&nbsp;mMutationPlayHawkAlpha <a href="CppOperatorAssign.htm">=</a> mutationPlayHawkAlpha;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> BirdHawkDove::setMutationPlayHawkBeta(<b><a href="CppConst.htm">const</a></b> BirdFactoryBase * birdFactory, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; mutationPlayHawkBeta)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(birdFactory<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(birdFactory-&gt;getClassName()<a href="CppOperatorEqual.htm">==</a>"BirdFactoryHawkDove");<br/>
&nbsp;&nbsp;mMutationPlayHawkBeta <a href="CppOperatorAssign.htm">=</a> mutationPlayHawkBeta;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> BirdHawkDove::setPdieHawkHawkLoser(<b><a href="CppConst.htm">const</a></b> BirdFactoryBase * birdFactory,&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; pDieHawkHawkLoser)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(birdFactory<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(birdFactory-&gt;getClassName()<a href="CppOperatorEqual.htm">==</a>"BirdFactoryHawkDove");<br/>
&nbsp;&nbsp;mPdieHawkHawkLoser <a href="CppOperatorAssign.htm">=</a> pDieHawkHawkLoser;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
BirdHawkDove::BirdHawkDove(<b><a href="CppConst.htm">const</a></b> BirdFactoryBase * birdFactory,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdGeneralParameters&gt;&amp; birdGeneralParams,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdHawkDoveParameters&gt;&amp; hawkDoveParams)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(birdFactory<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(birdFactory-&gt;getClassName()<a href="CppOperatorEqual.htm">==</a>"BirdFactoryHawkDove");<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alphaMean&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> hawkDoveParams-&gt;mPlayHawkAlphaMean;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alphaStdDev <a href="CppOperatorAssign.htm">=</a> hawkDoveParams-&gt;mPlayHawkAlphaStdDev;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> betaMean&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> hawkDoveParams-&gt;mPlayHawkBetaMean;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> betaStdDev&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> hawkDoveParams-&gt;mPlayHawkBetaStdDev;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(alphaMean&nbsp;&nbsp; &gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> alphaMean&nbsp;&nbsp; &lt; 1000.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(alphaStdDev &gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> alphaStdDev &lt; 1000.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(betaMean&nbsp;&nbsp;&nbsp;&nbsp;&gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> betaMean&nbsp;&nbsp;&nbsp;&nbsp;&lt; 1000.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(betaStdDev&nbsp;&nbsp;&gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> betaStdDev&nbsp;&nbsp;&lt; 1000.0);<br/>
<br/>
&nbsp;&nbsp;mPlayHawkAlpha <a href="CppOperatorAssign.htm">=</a> rnd::normal(alphaMean,alphaStdDev);<br/>
&nbsp;&nbsp;mPlayHawkBeta&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> rnd::normal(betaMean,betaStdDev);<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;mPlayHawkAlpha <a href="CppOperatorAssign.htm">=</a> rnd::normal(hawkDoveParams-&gt;mPlayHawkAlphaMean, hawkDoveParams-&gt;mPlayHawkAlphaStdDev);<br/>
&nbsp;&nbsp;mPlayHawkBeta&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> rnd::normal(hawkDoveParams-&gt;mPlayHawkBetaMean , hawkDoveParams-&gt;mPlayHawkBetaStdDev );<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;mIndexMother <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;mIndexFather <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;mConditionEnvironment <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;mConditionParental <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mMutationPlayHawkAlpha &gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mMutationPlayHawkAlpha &lt; 1000.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mMutationPlayHawkBeta&nbsp;&nbsp;&gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mMutationPlayHawkBeta&nbsp;&nbsp;&lt; 1000.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mPlayHawkAlpha &gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mPlayHawkAlpha &lt; 1000.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mPlayHawkBeta&nbsp;&nbsp;&gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mPlayHawkBeta&nbsp;&nbsp;&lt; 1000.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mBirdWatcher-&gt;reportNewBirdHawkDove(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
BirdHawkDove::BirdHawkDove(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; motherBase, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; fatherBase)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(motherBase.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(fatherBase.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(motherBase-&gt;getClassType() <a href="CppOperatorEqual.htm">==</a> hawkDove);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(fatherBase-&gt;getClassType() <a href="CppOperatorEqual.htm">==</a> hawkDove);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BirdHawkDove * mother <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;BirdHawkDove*&gt;(motherBase.get());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BirdHawkDove * father <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;BirdHawkDove*&gt;(fatherBase.get());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> flags <a href="CppOperatorAssign.htm">=</a> <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 4;<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Constitution<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (flags%2<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConditionHeritable <a href="CppOperatorAssign.htm">=</a> mother-&gt;mConditionHeritable <a href="CppOperatorPlus.htm">+</a> rnd::normal(0.0,mMutationConditionHeritable);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mConditionHeritable <a href="CppOperatorAssign.htm">=</a> father-&gt;mConditionHeritable <a href="CppOperatorPlus.htm">+</a> rnd::normal(0.0,mMutationConditionHeritable);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;flags<a href="CppOperatorBitShiftRightAssign.htm">&gt;&gt;=</a>1;<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>PlayHawkAlpha<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (flags%2<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayHawkAlpha <a href="CppOperatorAssign.htm">=</a> mother-&gt;mPlayHawkAlpha <a href="CppOperatorPlus.htm">+</a> rnd::normal(0.0,mMutationPlayHawkAlpha);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayHawkAlpha <a href="CppOperatorAssign.htm">=</a> father-&gt;mPlayHawkAlpha <a href="CppOperatorPlus.htm">+</a> rnd::normal(0.0,mMutationPlayHawkAlpha);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;flags<a href="CppOperatorBitShiftRightAssign.htm">&gt;&gt;=</a>1;<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>PlayHawkBeta<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (flags%2<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayHawkBeta <a href="CppOperatorAssign.htm">=</a> mother-&gt;mPlayHawkBeta <a href="CppOperatorPlus.htm">+</a> rnd::normal(0.0,mMutationPlayHawkBeta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPlayHawkBeta <a href="CppOperatorAssign.htm">=</a> father-&gt;mPlayHawkBeta <a href="CppOperatorPlus.htm">+</a> rnd::normal(0.0,mMutationPlayHawkBeta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;mConditionEnvironment <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;mConditionParental <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<br/>
&nbsp;&nbsp;mIndexMother <a href="CppOperatorAssign.htm">=</a> mother-&gt;getBirdIndex();<br/>
&nbsp;&nbsp;mIndexFather <a href="CppOperatorAssign.htm">=</a> father-&gt;getBirdIndex();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(motherBase.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(fatherBase.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mMutationPlayHawkAlpha &gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mMutationPlayHawkAlpha &lt; 1000.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mMutationPlayHawkBeta&nbsp;&nbsp;&gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mMutationPlayHawkBeta&nbsp;&nbsp;&lt; 1000.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mPlayHawkAlpha &gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mPlayHawkAlpha &lt; 1000.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mPlayHawkBeta&nbsp;&nbsp;&gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mPlayHawkBeta&nbsp;&nbsp;&lt; 1000.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mBirdWatcher-&gt;reportNewBirdHawkDove(mPlayHawkAlpha,mPlayHawkBeta);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mBirdWatcher-&gt;reportNewBirdHawkDove(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> BirdHawkDove::willDieLoserFight() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (rnd::uniform() &lt; mPdieHawkHawkLoser ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> BirdHawkDove::willFight(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pPlayHawk <a href="CppOperatorAssign.htm">=</a> simFunc::logisticEquation(getCondition(),mPlayHawkAlpha,mPlayHawkBeta);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If pPlayHawk <a href="CppOperatorEqual.htm">==</a> 0.99 then rnd::uniform will be likely below <b><a href="CppThis.htm">this</a></b> value<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (rnd::uniform() &lt; pPlayHawk ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> BirdHawkDove::getPlayHawkAlpha() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mPlayHawkAlpha;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> BirdHawkDove::getPlayHawkBeta() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mPlayHawkBeta;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBirdFactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBirdFactory.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitBirdFactoryH<br/>
<a href="CppDefine.htm">#define</a> UnitBirdFactoryH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumBirdType.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdBase;<br/>
<b><a href="CppClass.htm">class</a></b> BirdGeneralParameters;<br/>
<b><a href="CppClass.htm">class</a></b> BirdHawkDoveParameters;<br/>
<b><a href="CppClass.htm">class</a></b> BirdWatcher;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>An Abstract Factory<br/>
<b><a href="CppClass.htm">class</a></b> BirdFactoryBase : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;BirdFactoryBase() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~BirdFactoryBase() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> initBase(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdGeneralParameters&gt;&amp; params);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>createBird should create a <b><a href="CppNew.htm">new</a></b> bird of the correct type AND report <b><a href="CppThis.htm">this</a></b> to BirdWatcher<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; createBird() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getClassName() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> EnumBirdType getClassType() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> InitBirdWatcher();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdGeneralParameters&gt; mBirdGeneralParams;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> BirdWatcher * mBirdWatcher;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>A Concrete Factory<br/>
<b><a href="CppClass.htm">class</a></b> BirdFactoryHawkDove : <b><a href="CppPublic.htm">public</a></b> BirdFactoryBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;BirdFactoryHawkDove(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdGeneralParameters&gt;&amp; birdGeneralParams,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdHawkDoveParameters&gt;&amp; birdHawkDoveParams);<br/>
&nbsp;&nbsp;~BirdFactoryHawkDove() {}<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; createBird() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> getClassName() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;EnumBirdType getClassType() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdHawkDoveParameters&gt; mBirdHawkDoveParams;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBirdFactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBirdFactory.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdFactory.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdHawkDoveParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdWatcher.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
BirdWatcher * BirdFactoryBase::mBirdWatcher <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppComment.htm">//</a>BirdWatcher * BirdFactoryBase::mBirdWatcher <a href="CppOperatorAssign.htm">=</a> BirdWatcher::<a href="CppInstance.htm">instance</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> BirdFactoryBase::getClassName() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "BirdFactoryBase";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> BirdFactoryBase::initBase(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdGeneralParameters&gt;&amp; params)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(params.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;mBirdGeneralParams <a href="CppOperatorAssign.htm">=</a> params;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> BirdFactoryBase::InitBirdWatcher()<br/>
{<br/>
&nbsp;&nbsp;mBirdWatcher <a href="CppOperatorAssign.htm">=</a> BirdWatcher::<a href="CppInstance.htm">instance</a>();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> BirdFactoryHawkDove::getClassName() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "BirdFactoryHawkDove";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumBirdType BirdFactoryHawkDove::getClassType() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> hawkDove;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
BirdFactoryHawkDove::BirdFactoryHawkDove(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdGeneralParameters&gt;&amp; birdGeneralParams,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdHawkDoveParameters&gt;&amp; birdHawkDoveParams)<br/>
&nbsp;&nbsp;: mBirdHawkDoveParams(birdHawkDoveParams)<br/>
{<br/>
&nbsp;&nbsp;initBase(birdGeneralParams);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirdHawkDoveParams.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> playHawkAlphaMutation <a href="CppOperatorAssign.htm">=</a> mBirdHawkDoveParams-&gt;mPlayHawkAlphaMutation;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> playHawkBetaMutation&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mBirdHawkDoveParams-&gt;mPlayHawkBetaMutation;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pDieHawkHawkLoser&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> mBirdHawkDoveParams-&gt;mPdieHawkHawkLoser;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(playHawkAlphaMutation &gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> playHawkAlphaMutation &lt; 1000.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(playHawkBetaMutation&nbsp;&nbsp;&gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> playHawkBetaMutation &lt; 1000.0);<br/>
&nbsp;&nbsp;BirdHawkDove::setMutationPlayHawkAlpha(<b><a href="CppThis.htm">this</a></b>,playHawkAlphaMutation);<br/>
&nbsp;&nbsp;BirdHawkDove::setMutationPlayHawkBeta( <b><a href="CppThis.htm">this</a></b>,playHawkBetaMutation);<br/>
&nbsp;&nbsp;BirdHawkDove::setPdieHawkHawkLoser( <b><a href="CppThis.htm">this</a></b>,pDieHawkHawkLoser);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; BirdFactoryHawkDove::createBird() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; kid(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> BirdHawkDove(<b><a href="CppThis.htm">this</a></b>,mBirdGeneralParams,mBirdHawkDoveParams));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirdWatcher);<br/>
&nbsp;&nbsp;mBirdWatcher-&gt;reportNewBird(kid);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> kid;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBirdGeneralParameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBirdGeneralParameters.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitBirdGeneralParametersH<br/>
<a href="CppDefine.htm">#define</a> UnitBirdGeneralParametersH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdGeneralParameters : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mInitialConditionHeritableMean;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mInitialConditionHeritableStdDev;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mConditionHeritableMutation;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBirdGeneralParameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBirdGeneralParameters.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdGeneralParameters.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBirdHawkDoveParameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBirdHawkDoveParameters.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitBirdHawkDoveParametersH<br/>
<a href="CppDefine.htm">#define</a> UnitBirdHawkDoveParametersH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdHawkDoveParameters : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mPlayHawkAlphaMean;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mPlayHawkAlphaStdDev;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mPlayHawkAlphaMutation;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mPlayHawkBetaMean;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mPlayHawkBetaStdDev;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mPlayHawkBetaMutation;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mPdieHawkHawkLoser;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; getText() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBirdHawkDoveParameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBirdHawkDoveParameters.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdHawkDoveParameters.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; BirdHawkDoveParameters::getText() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text;<br/>
&nbsp;&nbsp;text.push_back("PlayHawkAlphaMean: "&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> helper::ftoa(mPlayHawkAlphaMean&nbsp;&nbsp;&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;text.push_back("PlayHawkAlphaStdDev: "&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> helper::ftoa(mPlayHawkAlphaStdDev&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;text.push_back("PlayHawkAlphaMutation: " <a href="CppOperatorPlus.htm">+</a> helper::ftoa(mPlayHawkAlphaMutation));<br/>
&nbsp;&nbsp;text.push_back("PlayHawkBetaMean: "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> helper::ftoa(mPlayHawkBetaMean&nbsp;&nbsp;&nbsp;&nbsp; ));<br/>
&nbsp;&nbsp;text.push_back("PlayHawkBetaStdDev: "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> helper::ftoa(mPlayHawkBetaStdDev&nbsp;&nbsp; ));<br/>
&nbsp;&nbsp;text.push_back("PlayHawkBetaMutation: "&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> helper::ftoa(mPlayHawkBetaMutation ));<br/>
&nbsp;&nbsp;text.push_back("PdieHawkHawkLoser: "&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> helper::ftoa(mPdieHawkHawkLoser));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> text;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBirdWatcher.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBirdWatcher.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitBirdWatcherH<br/>
<a href="CppDefine.htm">#define</a> UnitBirdWatcherH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumPedigreeCharter.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> Weather;<br/>
<b><a href="CppClass.htm">class</a></b> BirdBase;<br/>
<b><a href="CppClass.htm">class</a></b> BirdHawkDove;<br/>
<b><a href="CppClass.htm">class</a></b> PedigreeCharterBase;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><b><a href="CppClass.htm">class</a></b> BirdWatcher is a <a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
<a href="CppComment.htm">//</a>Its <a href="CppFunction.htm">function</a> is to assure that every bird is created only once<br/>
<a href="CppComment.htm">//</a>and deleted exactly once.<br/>
<a href="CppComment.htm">//</a>Also it measures stats of the birds<br/>
<b><a href="CppClass.htm">class</a></b> BirdWatcher<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> BirdWatcher* <a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> reportNewBird(BirdBase* bird);&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>DEBUGGING<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> reportNewBird(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; bird);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> reportDeadBird(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index); <a href="CppComment.htm">//</a>DEBUGGING<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> reset();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setPedigreeCharter(<b><a href="CppConst.htm">const</a></b> EnumPedigreeCharter&amp; pedigreeCharter);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; getPedigree() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; getMeansConditionHeritable() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; getMeansConditionEnvironmental() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; getMeansConditionParental() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; getMeansPlayHawkAlpha() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; getMeansPlayHawkBeta() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;BirdWatcher();<br/>
&nbsp;&nbsp;~BirdWatcher();<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; mIndices;<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; mIndices;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> BirdBase&gt; &gt; &gt; mBirds;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; mPlayHawkAlpha;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;mPlayHawkBeta;<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;PedigreeCharterBase&gt; mPedigreeCharter;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;BirdWatcher&gt; mpInstance;<br/>
&nbsp;&nbsp;Weather * mWeather;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> m<a href="CppConstructor.htm">Constructor</a>Called;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Deletion <b><a href="CppFriend.htm">friend</a></b>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFriend.htm">friend</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;BirdWatcher&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;BirdWatcher&gt;(BirdWatcher*);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBirdWatcher.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBirdWatcher.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdWatcher.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdBase.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitWeather.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitPedigreeCharter.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;BirdWatcher&gt; BirdWatcher::mpInstance(<b><a href="CppNew.htm">new</a></b> BirdWatcher);<br/>
<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;BirdWatcher&gt; BirdWatcher::mpInstance(0);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> BirdWatcher::m<a href="CppConstructor.htm">Constructor</a>Called <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
BirdWatcher::BirdWatcher()<br/>
{<br/>
&nbsp;&nbsp;mWeather <a href="CppOperatorAssign.htm">=</a> Weather::<a href="CppInstance.htm">instance</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m<a href="CppConstructor.htm">Constructor</a>Called;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(m<a href="CppConstructor.htm">Constructor</a>Called<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
BirdWatcher::~BirdWatcher()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
BirdWatcher* BirdWatcher::<a href="CppInstance.htm">instance</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mpInstance.get()<a href="CppOperatorEqual.htm">==</a>0) mpInstance.reset(<b><a href="CppNew.htm">new</a></b> BirdWatcher);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mpInstance.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mpInstance.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> BirdWatcher::reset()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;mIndices.resize(0);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;mBirds.resize(0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mPlayHawkAlpha.resize(0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mPlayHawkBeta.resize(0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mIndices.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">Assert</a>(mPlayHawkAlpha.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">Assert</a>(mPlayHawkBeta.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> BirdWatcher::setPedigreeCharter(<b><a href="CppConst.htm">const</a></b> EnumPedigreeCharter&amp; pedigreeCharter)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(pedigreeCharter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;pedigreeCharterNone:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPedigreeCharter.reset(<b><a href="CppNew.htm">new</a></b> PedigreeCharterNone);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;pedigreeCharterAll:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPedigreeCharter.reset(<b><a href="CppNew.htm">new</a></b> PedigreeCharterAll);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(!"Shouldn't get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Called from BirdBase's contructor<br/>
<b><a href="CppVoid.htm">void</a></b> BirdWatcher::reportNewBird(BirdBase* bird)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> bird-&gt;getBirdIndex();<br/>
&nbsp;&nbsp;mIndices.push_back(index);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Called from Couple::CreateOffspring and BirdFactoryDerived::CreateBird<br/>
<b><a href="CppVoid.htm">void</a></b> BirdWatcher::reportNewBird(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; bird)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>Unit <a href="CppOperatorAssign.htm">=</a> mWeather-&gt;get<a href="CppTime.htm">Time</a>Unit();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> __HACK_RICHEL_6565152765376524876988989898702347234623<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Weather * test <a href="CppOperatorAssign.htm">=</a> Weather::<a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(test<a href="CppOperatorEqual.htm">==</a>mWeather);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a>Unit<a href="CppOperatorNotEqual.htm">!=</a>0) ShowMessage("YES!!!");<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mBirds.size()) <a href="CppOperatorEqual.htm">==</a> <a href="CppTime.htm">time</a>Unit)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mBirds.push_back( <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> BirdBase&gt; &gt;() );<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(<a href="CppTime.htm">time</a>Unit &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mBirds.size()));<br/>
<br/>
&nbsp;&nbsp;mBirds[<a href="CppTime.htm">time</a>Unit].push_back(bird);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(bird.use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> BirdWatcher::reportDeadBird(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>( <a href="CppStdFind.htm">std::find</a>(mIndices.begin(),mIndices.end(),index) <a href="CppOperatorNotEqual.htm">!=</a> mIndices.end() );<br/>
&nbsp;&nbsp;*<a href="CppStdFind.htm">std::find</a>(mIndices.begin(),mIndices.end(),index) <a href="CppOperatorAssign.htm">=</a> mIndices.back();<br/>
&nbsp;&nbsp;mIndices.pop_back();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; BirdWatcher::getMeansPlayHawkAlpha() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; means;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nMeans <a href="CppOperatorAssign.htm">=</a> mBirds.size();<br/>
&nbsp;&nbsp;means.reserve(nMeans);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nMeans; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sum <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nValues <a href="CppOperatorAssign.htm">=</a> mBirds[i].size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j&lt;nValues; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirds[i][j].get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirds[i][j]-&gt;getClassType()<a href="CppOperatorEqual.htm">==</a>hawkDove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BirdHawkDove * tempCopy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> BirdHawkDove*&gt;(mBirds[i][j].get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum<a href="CppOperatorPlusAssign.htm">+=</a> tempCopy-&gt;getPlayHawkAlpha();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean <a href="CppOperatorAssign.htm">=</a> sum/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nValues);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;means.push_back(mean);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(means.size()<a href="CppOperatorEqual.htm">==</a>mBirds.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> means;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; BirdWatcher::getMeansPlayHawkBeta() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; means;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nMeans <a href="CppOperatorAssign.htm">=</a> mBirds.size();<br/>
&nbsp;&nbsp;means.reserve(nMeans);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nMeans; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sum <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nValues <a href="CppOperatorAssign.htm">=</a> mBirds[i].size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j&lt;nValues; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirds[i][j].get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirds[i][j]-&gt;getClassType()<a href="CppOperatorEqual.htm">==</a>hawkDove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BirdHawkDove * tempCopy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> BirdHawkDove*&gt;(mBirds[i][j].get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum<a href="CppOperatorPlusAssign.htm">+=</a> tempCopy-&gt;getPlayHawkBeta();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean <a href="CppOperatorAssign.htm">=</a> sum/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nValues);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;means.push_back(mean);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(means.size()<a href="CppOperatorEqual.htm">==</a>mBirds.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> means;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; BirdWatcher::getMeansConditionHeritable() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; means;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> mBirds.size();<br/>
&nbsp;&nbsp;means.reserve(size);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> t=0; t&lt;size; <a href="CppOperatorIncrement.htm">++</a>t)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sum <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nValues <a href="CppOperatorAssign.htm">=</a> mBirds[t].size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j&lt;nValues; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirds[t][j].get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum<a href="CppOperatorPlusAssign.htm">+=</a>mBirds[t][j]-&gt;getConditionHeritable();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean <a href="CppOperatorAssign.htm">=</a> sum/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nValues);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;means.push_back(mean);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(means.size()<a href="CppOperatorEqual.htm">==</a>mBirds.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> means;<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; BirdWatcher::getMeansConditionEnvironmental() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; means;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> mBirds.size();<br/>
&nbsp;&nbsp;means.reserve(size);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> t=0; t&lt;size; <a href="CppOperatorIncrement.htm">++</a>t)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sum <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nValues <a href="CppOperatorAssign.htm">=</a> mBirds[t].size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j&lt;nValues; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirds[t][j].get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum<a href="CppOperatorPlusAssign.htm">+=</a>mBirds[t][j]-&gt;getConditionEnvironment();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean <a href="CppOperatorAssign.htm">=</a> sum/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nValues);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;means.push_back(mean);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(means.size()<a href="CppOperatorEqual.htm">==</a>mBirds.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> means;<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; BirdWatcher::getMeansConditionParental() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; means;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> mBirds.size();<br/>
&nbsp;&nbsp;means.reserve(size);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> t=0; t&lt;size; <a href="CppOperatorIncrement.htm">++</a>t)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sum <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nValues <a href="CppOperatorAssign.htm">=</a> mBirds[t].size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j&lt;nValues; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirds[t][j].get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum<a href="CppOperatorPlusAssign.htm">+=</a>mBirds[t][j]-&gt;getConditionParental();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean <a href="CppOperatorAssign.htm">=</a> sum/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nValues);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;means.push_back(mean);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(means.size()<a href="CppOperatorEqual.htm">==</a>mBirds.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> means;<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; BirdWatcher::getPedigree() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mPedigreeCharter-&gt;getPedigree();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBreeding.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBreeding.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitBreedingH<br/>
<a href="CppDefine.htm">#define</a> UnitBreedingH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a>&lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> CouplePool;<br/>
<b><a href="CppClass.htm">class</a></b> MigrationPool;<br/>
<b><a href="CppClass.htm">class</a></b> DeadPool;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BreedingBase : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;BreedingBase() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~BreedingBase() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> breed(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;CouplePool&gt;&amp; couplePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;MigrationPool&gt;&amp; migrationPool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nFemalesWanted,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nMalesWanted<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BreedingSingleGeneration : <b><a href="CppPublic.htm">public</a></b> BreedingBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;BreedingSingleGeneration() {}<br/>
&nbsp;&nbsp;~BreedingSingleGeneration() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> breed(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;CouplePool&gt;&amp; couplePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;MigrationPool&gt;&amp; migrationPool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nFemalesWanted,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nMalesWanted) <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBreeding.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBreeding.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitBreeding.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitCouplePool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMigrationPool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDeadPool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitCouple.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitResults.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppException.htm">Exception</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> BreedingSingleGeneration::breed(<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;CouplePool&gt;&amp; couplePool,<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;MigrationPool&gt;&amp; migrationPool,<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nFemalesWanted,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nMalesWanted) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>helper::dot("Start of <b><a href="CppVoid.htm">void</a></b> BreedingSingleGeneration::breed");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>helper::dot("couplePool.size()<a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> helper::itoa( couplePool-&gt;getSize() ) );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create females<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nFemalesWanted; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; female <a href="CppOperatorAssign.htm">=</a> couplePool-&gt;getRandomCouple()-&gt;createOneOffspring();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;migrationPool-&gt;addFemale( female);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (NoCouples<a href="CppException.htm">Exception</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Results * r <a href="CppOperatorAssign.htm">=</a> Results::<a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;r-&gt;log("No couples left");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> NoCouples<a href="CppException.htm">Exception</a>();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create males<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nMalesWanted; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; male <a href="CppOperatorAssign.htm">=</a> couplePool-&gt;getRandomCouple()-&gt;createOneOffspring();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;migrationPool-&gt;addMale( male );<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Kill parents<br/>
&nbsp;&nbsp;couplePool-&gt;<b><a href="CppDo.htm">do</a></b>Empty(deadPool);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Offspring is in migrationPool<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBreedingParameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBreedingParameters.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitBreedingParametersH<br/>
<a href="CppDefine.htm">#define</a> UnitBreedingParametersH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BreedingParameters : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Number of birds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mNfemaleOffspring;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mNmaleOffspring;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Type of breeding<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>EnumBreeding mEnumBreeding;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Random independent rearing<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mRandomMeanNotUsed;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mRandomStdDevNotUsed;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Other rearings<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>E.g. rearing dependent on... (e.g condition mother/father/etc.)<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; getText() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitBreedingParameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitBreedingParameters.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitBreedingParameters.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; BreedingParameters::getText() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> text;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitCouple.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitCouple.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitCoupleH<br/>
<a href="CppDefine.htm">#define</a> UnitCoupleH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdBase;<br/>
<b><a href="CppClass.htm">class</a></b> BirdWatcher;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> Couple : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;Couple(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male);<br/>
&nbsp;&nbsp;~Couple();<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; getFemale();<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; getMale();<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; createOneOffspring() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isFemaleNull() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isMaleNull() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;Couple() {} <a href="CppComment.htm">//</a>No <a href="CppDefaultConstructor.htm">default constructor</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; mFemale;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; mMale;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> BirdWatcher * mBirdWatcher;<br/>
<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitCouple.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitCouple.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitCouple.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppException.htm">Exception</a>s.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdWatcher.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
BirdWatcher * Couple::mBirdWatcher <a href="CppOperatorAssign.htm">=</a> BirdWatcher::<a href="CppInstance.htm">instance</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Couple::Couple(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
&nbsp;&nbsp;mFemale <a href="CppOperatorAssign.htm">=</a> female;<br/>
&nbsp;&nbsp;mMale&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> male;<br/>
<br/>
&nbsp;&nbsp;female.reset();<br/>
&nbsp;&nbsp;male.reset();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mFemale.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mMale.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Couple::~Couple()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mFemale.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mMale.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; Couple::createOneOffspring() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mMale-&gt;getClassType() <a href="CppOperatorEqual.htm">==</a> hawkDove )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; kid(<b><a href="CppNew.htm">new</a></b> BirdHawkDove(mFemale,mMale));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mBirdWatcher-&gt;reportNewBird(kid);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> kid;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(!"Unknown bird type");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> UnknownBirdType<a href="CppException.htm">Exception</a>();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; Couple::getMale()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; male(mMale);<br/>
&nbsp;&nbsp;mMale.reset();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> male;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; Couple::getFemale()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; female <a href="CppOperatorAssign.htm">=</a> mFemale;<br/>
&nbsp;&nbsp;mFemale.reset();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> female;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> Couple::isFemaleNull() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ( mFemale.get() <a href="CppOperatorEqual.htm">==</a> 0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b> );<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> Couple::isMaleNull() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ( mMale.get() <a href="CppOperatorEqual.htm">==</a> 0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b> );<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitCouplePool.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitCouplePool.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitCouplePoolH<br/>
<a href="CppDefine.htm">#define</a> UnitCouplePoolH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdBase;<br/>
<b><a href="CppClass.htm">class</a></b> Couple;<br/>
<b><a href="CppClass.htm">class</a></b> DeadPool;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> CouplePool : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;CouplePool() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> addCouple(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Couple&gt; getRandomCouple() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>Empty(<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool);<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isEmpty() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getSize() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt; <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Couple&gt; &gt; mCouples;<br/>
<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitCouplePool.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitCouplePool.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitCouplePool.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitCouple.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDeadPool.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppException.htm">Exception</a>s.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> CouplePool::addCouple(<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female,<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Couple&gt; couple(<b><a href="CppNew.htm">new</a></b> Couple(female,male));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(couple-&gt;isFemaleNull() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(couple-&gt;isMaleNull()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;mCouples.push_back(couple);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mCouples.back()-&gt;isFemaleNull() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mCouples.back()-&gt;isMaleNull()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> );<br/>
<br/>
&nbsp;&nbsp;couple.reset();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(couple.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No couple <a href="CppAny.htm">any</a>more...&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(couple-&gt;isFemaleNull() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No couple <a href="CppAny.htm">any</a>more...&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(couple-&gt;isMaleNull()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Couple&gt; CouplePool::getRandomCouple() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> mCouples.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mCouples[ index ];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b>(...)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mCouples.size()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> NoCouples<a href="CppException.htm">Exception</a>();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> CouplePool::<b><a href="CppDo.htm">do</a></b>Empty(<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(deadPool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nCouples <a href="CppOperatorAssign.htm">=</a> mCouples.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nCouples; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; female <a href="CppOperatorAssign.htm">=</a> mCouples[i]-&gt;getFemale();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; male <a href="CppOperatorAssign.htm">=</a> mCouples[i]-&gt;getMale();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mCouples[i]-&gt;isFemaleNull() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mCouples[i]-&gt;isMaleNull() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;deadPool-&gt;addFemale( female );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;deadPool-&gt;addMale( male );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;mCouples.resize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> CouplePool::isEmpty() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mCouples.empty();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> CouplePool::getSize() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mCouples.size();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitDeadPool.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitDeadPool.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitDeadPoolH<br/>
<a href="CppDefine.htm">#define</a> UnitDeadPoolH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdBase;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> DeadPool : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;DeadPool() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> addFemale(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> addMale(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> addFemale(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> addMale(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getNmales() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getNfemales() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getSize() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; &gt; mFemales;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; &gt; mMales;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitDeadPool.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitDeadPool.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitDeadPool.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">assert</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DeadPool::addFemale(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(female.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
&nbsp;&nbsp;mFemales.push_back( female );<br/>
&nbsp;&nbsp;female.reset();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(female.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DeadPool::addMale(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(male.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
&nbsp;&nbsp;mMales.push_back( male );<br/>
&nbsp;&nbsp;male.reset();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(male.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> DeadPool::getNfemales() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mFemales.size();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> DeadPool::getNmales() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mMales.size();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> DeadPool::getSize() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ( mMales.size() <a href="CppOperatorPlus.htm">+</a> mFemales.size() );<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitDisplayOptions.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitDisplayOptions.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitDisplayOptionsH<br/>
<a href="CppDefine.htm">#define</a> UnitDisplayOptionsH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumPedigreeCharter.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> DisplayOptions : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;EnumPedigreeCharter mPedigreeCharter;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; getText() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitDisplayOptions.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitDisplayOptions.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayOptions.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; DisplayOptions::getText() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er * <a href="CppConvert.htm">convert</a>er <a href="CppOperatorAssign.htm">=</a> EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er::<a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> temp <a href="CppOperatorAssign.htm">=</a> "PedigreeCharter: " <a href="CppOperatorPlus.htm">+</a> <a href="CppConvert.htm">convert</a>er-&gt;toString(mPedigreeCharter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;text.push_back(temp);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> text;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitEnumBirdType.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitEnumBirdType.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitEnumBirdTypeH<br/>
<a href="CppDefine.htm">#define</a> UnitEnumBirdTypeH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumBirdType<br/>
{<br/>
&nbsp;&nbsp;hawkDove<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>EnumBirdType<a href="CppConvert.htm">Convert</a>er is a <a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
<b><a href="CppClass.htm">class</a></b> EnumBirdType<a href="CppConvert.htm">Convert</a>er<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> EnumBirdType<a href="CppConvert.htm">Convert</a>er * <a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumBirdType toEnum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> toString(<b><a href="CppConst.htm">const</a></b> EnumBirdType&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> cout(<b><a href="CppConst.htm">const</a></b> EnumBirdType&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;EnumBirdType<a href="CppConvert.htm">Convert</a>er&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumBirdType<a href="CppConvert.htm">Convert</a>er();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;~EnumBirdType<a href="CppConvert.htm">Convert</a>er(){};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppStatic.htm">static</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;EnumBirdType<a href="CppConvert.htm">Convert</a>er&gt; mpInstance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdMap.htm">std::map</a>&lt;EnumBirdType,<a href="CppStdString.htm">std::string</a>&gt; mMap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdMap.htm">std::map</a>&lt;EnumBirdType,<a href="CppStdString.htm">std::string</a>&gt;::const_iterator mIter;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitEnumBirdType.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitEnumBirdType.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumBirdType.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;EnumBirdType<a href="CppConvert.htm">Convert</a>er&gt; EnumBirdType<a href="CppConvert.htm">Convert</a>er::mpInstance(<b><a href="CppNew.htm">new</a></b> EnumBirdType<a href="CppConvert.htm">Convert</a>er);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumBirdType<a href="CppConvert.htm">Convert</a>er * EnumBirdType<a href="CppConvert.htm">Convert</a>er::<a href="CppInstance.htm">instance</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mpInstance.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mpInstance.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumBirdType<a href="CppConvert.htm">Convert</a>er::EnumBirdType<a href="CppConvert.htm">Convert</a>er()<br/>
{<br/>
&nbsp;&nbsp;mMap[hawkDove] <a href="CppOperatorAssign.htm">=</a> "hawkDove";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumBirdType EnumBirdType<a href="CppConvert.htm">Convert</a>er::toEnum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(mIter <a href="CppOperatorAssign.htm">=</a> mMap.begin(); mIter<a href="CppOperatorNotEqual.htm">!=</a>mMap.end(); <a href="CppOperatorIncrement.htm">++</a>mIter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*mIter).second<a href="CppOperatorEqual.htm">==</a>myString) <b><a href="CppReturn.htm">return</a></b> ((*mIter).first);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unknown string");<br/>
&nbsp;&nbsp;<a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> hawkDove;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> EnumBirdType<a href="CppConvert.htm">Convert</a>er::toString(<b><a href="CppConst.htm">const</a></b> EnumBirdType&amp; myEnumBirdType) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mMap.<b><a href="CppOperator.htm">operator</a></b> [](myEnumBirdType);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> EnumBirdType<a href="CppConvert.htm">Convert</a>er::cout(<b><a href="CppConst.htm">const</a></b> EnumBirdType&amp; myEnumBirdType) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> toString(myEnumBirdType) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitEnumFemaleChoice.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitEnumFemaleChoice.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitEnumFemaleChoiceH<br/>
<a href="CppDefine.htm">#define</a> UnitEnumFemaleChoiceH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumFemaleChoice<br/>
{<br/>
&nbsp;&nbsp;traitOnly,<br/>
&nbsp;&nbsp;conditionOnly,<br/>
&nbsp;&nbsp;territoryOnly,<br/>
&nbsp;&nbsp;winnerFight2males<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er is a <a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
<b><a href="CppClass.htm">class</a></b> EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er * <a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumFemaleChoice toEnum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> toString(<b><a href="CppConst.htm">const</a></b> EnumFemaleChoice&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> cout(<b><a href="CppConst.htm">const</a></b> EnumFemaleChoice&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;~EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er(){};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppStatic.htm">static</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er&gt; mpInstance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdMap.htm">std::map</a>&lt;EnumFemaleChoice,<a href="CppStdString.htm">std::string</a>&gt; mMap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdMap.htm">std::map</a>&lt;EnumFemaleChoice,<a href="CppStdString.htm">std::string</a>&gt;::const_iterator mIter;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitEnumFemaleChoice.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitEnumFemaleChoice.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumFemaleChoice.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er&gt; EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er::mpInstance(<b><a href="CppNew.htm">new</a></b> EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er * EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er::<a href="CppInstance.htm">instance</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mpInstance.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mpInstance.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er::EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er()<br/>
{<br/>
&nbsp;&nbsp;mMap[traitOnly] <a href="CppOperatorAssign.htm">=</a> "traitOnly";<br/>
&nbsp;&nbsp;mMap[conditionOnly] <a href="CppOperatorAssign.htm">=</a> "conditionOnly";<br/>
&nbsp;&nbsp;mMap[territoryOnly] <a href="CppOperatorAssign.htm">=</a> "territoryOnly";<br/>
&nbsp;&nbsp;mMap[winnerFight2males] <a href="CppOperatorAssign.htm">=</a> "winnerFight2males";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumFemaleChoice EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er::toEnum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(mIter <a href="CppOperatorAssign.htm">=</a> mMap.begin(); mIter<a href="CppOperatorNotEqual.htm">!=</a>mMap.end(); <a href="CppOperatorIncrement.htm">++</a>mIter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*mIter).second<a href="CppOperatorEqual.htm">==</a>myString) <b><a href="CppReturn.htm">return</a></b> ((*mIter).first);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(!"Unknown string");<br/>
&nbsp;&nbsp;<a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> traitOnly;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er::toString(<b><a href="CppConst.htm">const</a></b> EnumFemaleChoice&amp; myEnumFemaleChoice) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mMap.<b><a href="CppOperator.htm">operator</a></b> [](myEnumFemaleChoice);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er::cout(<b><a href="CppConst.htm">const</a></b> EnumFemaleChoice&amp; myEnumFemaleChoice) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> toString(myEnumFemaleChoice) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitEnumMatingSystem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitEnumMatingSystem.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitEnumMatingSystemH<br/>
<a href="CppDefine.htm">#define</a> UnitEnumMatingSystemH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumMatingSystem<br/>
{<br/>
&nbsp;&nbsp;monogamy,<br/>
&nbsp;&nbsp;polygyny<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>EnumMatingSystem<a href="CppConvert.htm">Convert</a>er is a <a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
<b><a href="CppClass.htm">class</a></b> EnumMatingSystem<a href="CppConvert.htm">Convert</a>er<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> EnumMatingSystem<a href="CppConvert.htm">Convert</a>er * <a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumMatingSystem toEnum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> toString(<b><a href="CppConst.htm">const</a></b> EnumMatingSystem&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> cout(<b><a href="CppConst.htm">const</a></b> EnumMatingSystem&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;EnumMatingSystem<a href="CppConvert.htm">Convert</a>er&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumMatingSystem<a href="CppConvert.htm">Convert</a>er();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;~EnumMatingSystem<a href="CppConvert.htm">Convert</a>er(){};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppStatic.htm">static</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;EnumMatingSystem<a href="CppConvert.htm">Convert</a>er&gt; mpInstance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdMap.htm">std::map</a>&lt;EnumMatingSystem,<a href="CppStdString.htm">std::string</a>&gt; mMap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdMap.htm">std::map</a>&lt;EnumMatingSystem,<a href="CppStdString.htm">std::string</a>&gt;::const_iterator mIter;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitEnumMatingSystem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitEnumMatingSystem.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumMatingSystem.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;EnumMatingSystem<a href="CppConvert.htm">Convert</a>er&gt; EnumMatingSystem<a href="CppConvert.htm">Convert</a>er::mpInstance(<b><a href="CppNew.htm">new</a></b> EnumMatingSystem<a href="CppConvert.htm">Convert</a>er);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumMatingSystem<a href="CppConvert.htm">Convert</a>er * EnumMatingSystem<a href="CppConvert.htm">Convert</a>er::<a href="CppInstance.htm">instance</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mpInstance.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mpInstance.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumMatingSystem<a href="CppConvert.htm">Convert</a>er::EnumMatingSystem<a href="CppConvert.htm">Convert</a>er()<br/>
{<br/>
&nbsp;&nbsp;mMap[monogamy] <a href="CppOperatorAssign.htm">=</a> "monogamy";<br/>
&nbsp;&nbsp;mMap[polygyny] <a href="CppOperatorAssign.htm">=</a> "polygyny";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumMatingSystem EnumMatingSystem<a href="CppConvert.htm">Convert</a>er::toEnum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(mIter <a href="CppOperatorAssign.htm">=</a> mMap.begin(); mIter<a href="CppOperatorNotEqual.htm">!=</a>mMap.end(); <a href="CppOperatorIncrement.htm">++</a>mIter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*mIter).second<a href="CppOperatorEqual.htm">==</a>myString) <b><a href="CppReturn.htm">return</a></b> ((*mIter).first);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unknown string");<br/>
&nbsp;&nbsp;<a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> monogamy;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> EnumMatingSystem<a href="CppConvert.htm">Convert</a>er::toString(<b><a href="CppConst.htm">const</a></b> EnumMatingSystem&amp; myEnumMatingSystem) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mMap.<b><a href="CppOperator.htm">operator</a></b> [](myEnumMatingSystem);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> EnumMatingSystem<a href="CppConvert.htm">Convert</a>er::cout(<b><a href="CppConst.htm">const</a></b> EnumMatingSystem&amp; myEnumMatingSystem) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> toString(myEnumMatingSystem) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitEnumMigration.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitEnumMigration.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitEnumMigrationH<br/>
<a href="CppDefine.htm">#define</a> UnitEnumMigrationH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumMigration<br/>
{<br/>
&nbsp;&nbsp;allSurvive<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>EnumMigration<a href="CppConvert.htm">Convert</a>er is a <a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
<b><a href="CppClass.htm">class</a></b> EnumMigration<a href="CppConvert.htm">Convert</a>er<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> EnumMigration<a href="CppConvert.htm">Convert</a>er * <a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumMigration toEnum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> toString(<b><a href="CppConst.htm">const</a></b> EnumMigration&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> cout(<b><a href="CppConst.htm">const</a></b> EnumMigration&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumMigration<a href="CppConvert.htm">Convert</a>er();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;~EnumMigration<a href="CppConvert.htm">Convert</a>er(){};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> EnumMigration<a href="CppConvert.htm">Convert</a>er * mpInstance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdMap.htm">std::map</a>&lt;EnumMigration,<a href="CppStdString.htm">std::string</a>&gt; mMap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdMap.htm">std::map</a>&lt;EnumMigration,<a href="CppStdString.htm">std::string</a>&gt;::const_iterator mIter;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitEnumMigration.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitEnumMigration.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumMigration.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumMigration<a href="CppConvert.htm">Convert</a>er * EnumMigration<a href="CppConvert.htm">Convert</a>er::mpInstance;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumMigration<a href="CppConvert.htm">Convert</a>er * EnumMigration<a href="CppConvert.htm">Convert</a>er::<a href="CppInstance.htm">instance</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mpInstance<a href="CppOperatorEqual.htm">==</a><a href="CppNULL.htm">NULL</a>) mpInstance <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> EnumMigration<a href="CppConvert.htm">Convert</a>er();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mpInstance;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumMigration<a href="CppConvert.htm">Convert</a>er::EnumMigration<a href="CppConvert.htm">Convert</a>er()<br/>
{<br/>
&nbsp;&nbsp;mMap[allSurvive] <a href="CppOperatorAssign.htm">=</a> "allSurvive";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumMigration EnumMigration<a href="CppConvert.htm">Convert</a>er::toEnum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(mIter <a href="CppOperatorAssign.htm">=</a> mMap.begin(); mIter<a href="CppOperatorNotEqual.htm">!=</a>mMap.end(); <a href="CppOperatorIncrement.htm">++</a>mIter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*mIter).second<a href="CppOperatorEqual.htm">==</a>myString) <b><a href="CppReturn.htm">return</a></b> ((*mIter).first);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(!"Unknown string");<br/>
&nbsp;&nbsp;<a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> allSurvive;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> EnumMigration<a href="CppConvert.htm">Convert</a>er::toString(<b><a href="CppConst.htm">const</a></b> EnumMigration&amp; myEnumMigration) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mMap.<b><a href="CppOperator.htm">operator</a></b> [](myEnumMigration);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> EnumMigration<a href="CppConvert.htm">Convert</a>er::cout(<b><a href="CppConst.htm">const</a></b> EnumMigration&amp; myEnumMigration) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> toString(myEnumMigration) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitEnumPedigreeCharter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitEnumPedigreeCharter.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitEnumPedigreeCharterH<br/>
<a href="CppDefine.htm">#define</a> UnitEnumPedigreeCharterH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumPedigreeCharter<br/>
{<br/>
&nbsp;&nbsp;pedigreeCharterNone,<br/>
&nbsp;&nbsp;pedigreeCharterAll<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er is a <a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
<b><a href="CppClass.htm">class</a></b> EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er * <a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumPedigreeCharter toEnum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> toString(<b><a href="CppConst.htm">const</a></b> EnumPedigreeCharter&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> cout(<b><a href="CppConst.htm">const</a></b> EnumPedigreeCharter&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;~EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er(){};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppStatic.htm">static</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er&gt; mpInstance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdMap.htm">std::map</a>&lt;EnumPedigreeCharter,<a href="CppStdString.htm">std::string</a>&gt; mMap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdMap.htm">std::map</a>&lt;EnumPedigreeCharter,<a href="CppStdString.htm">std::string</a>&gt;::const_iterator mIter;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitEnumPedigreeCharter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitEnumPedigreeCharter.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumPedigreeCharter.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er&gt; EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er::mpInstance(<b><a href="CppNew.htm">new</a></b> EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er * EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er::<a href="CppInstance.htm">instance</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mpInstance.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mpInstance.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er::EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er()<br/>
{<br/>
&nbsp;&nbsp;mMap[pedigreeCharterNone] <a href="CppOperatorAssign.htm">=</a> "pedigreeCharterNone";<br/>
&nbsp;&nbsp;mMap[pedigreeCharterAll] <a href="CppOperatorAssign.htm">=</a> "pedigreeCharterAll";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumPedigreeCharter EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er::toEnum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(mIter <a href="CppOperatorAssign.htm">=</a> mMap.begin(); mIter<a href="CppOperatorNotEqual.htm">!=</a>mMap.end(); <a href="CppOperatorIncrement.htm">++</a>mIter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*mIter).second<a href="CppOperatorEqual.htm">==</a>myString) <b><a href="CppReturn.htm">return</a></b> ((*mIter).first);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unknown string");<br/>
&nbsp;&nbsp;<a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pedigreeCharterNone;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er::toString(<b><a href="CppConst.htm">const</a></b> EnumPedigreeCharter&amp; myEnumPedigreeCharter) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mMap.<b><a href="CppOperator.htm">operator</a></b> [](myEnumPedigreeCharter);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> EnumPedigreeCharter<a href="CppConvert.htm">Convert</a>er::cout(<b><a href="CppConst.htm">const</a></b> EnumPedigreeCharter&amp; myEnumPedigreeCharter) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> toString(myEnumPedigreeCharter) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitEnumSimulationType.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitEnumSimulationType.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitEnumSimulationTypeH<br/>
<a href="CppDefine.htm">#define</a> UnitEnumSimulationTypeH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumSimulationType<br/>
{<br/>
&nbsp;&nbsp;cartoonModel<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>EnumSimulationType<a href="CppConvert.htm">Convert</a>er is a <a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
<b><a href="CppClass.htm">class</a></b> EnumSimulationType<a href="CppConvert.htm">Convert</a>er<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> EnumSimulationType<a href="CppConvert.htm">Convert</a>er * <a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumSimulationType toEnum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> toString(<b><a href="CppConst.htm">const</a></b> EnumSimulationType&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> cout(<b><a href="CppConst.htm">const</a></b> EnumSimulationType&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumSimulationType<a href="CppConvert.htm">Convert</a>er();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;~EnumSimulationType<a href="CppConvert.htm">Convert</a>er(){};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> EnumSimulationType<a href="CppConvert.htm">Convert</a>er * mpInstance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdMap.htm">std::map</a>&lt;EnumSimulationType,<a href="CppStdString.htm">std::string</a>&gt; mMap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdMap.htm">std::map</a>&lt;EnumSimulationType,<a href="CppStdString.htm">std::string</a>&gt;::const_iterator mIter;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitEnumSimulationType.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitEnumSimulationType.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumSimulationType.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumSimulationType<a href="CppConvert.htm">Convert</a>er * EnumSimulationType<a href="CppConvert.htm">Convert</a>er::mpInstance;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumSimulationType<a href="CppConvert.htm">Convert</a>er * EnumSimulationType<a href="CppConvert.htm">Convert</a>er::<a href="CppInstance.htm">instance</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mpInstance<a href="CppOperatorEqual.htm">==</a><a href="CppNULL.htm">NULL</a>) mpInstance <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> EnumSimulationType<a href="CppConvert.htm">Convert</a>er();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mpInstance;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumSimulationType<a href="CppConvert.htm">Convert</a>er::EnumSimulationType<a href="CppConvert.htm">Convert</a>er()<br/>
{<br/>
&nbsp;&nbsp;mMap[cartoonModel] <a href="CppOperatorAssign.htm">=</a> "cartoonModel";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
EnumSimulationType EnumSimulationType<a href="CppConvert.htm">Convert</a>er::toEnum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(mIter <a href="CppOperatorAssign.htm">=</a> mMap.begin(); mIter<a href="CppOperatorNotEqual.htm">!=</a>mMap.end(); <a href="CppOperatorIncrement.htm">++</a>mIter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*mIter).second<a href="CppOperatorEqual.htm">==</a>myString) <b><a href="CppReturn.htm">return</a></b> ((*mIter).first);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(!"Unknown string");<br/>
&nbsp;&nbsp;<a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> cartoonModel;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> EnumSimulationType<a href="CppConvert.htm">Convert</a>er::toString(<b><a href="CppConst.htm">const</a></b> EnumSimulationType&amp; myEnumSimulationType) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mMap.<b><a href="CppOperator.htm">operator</a></b> [](myEnumSimulationType);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> EnumSimulationType<a href="CppConvert.htm">Convert</a>er::cout(<b><a href="CppConst.htm">const</a></b> EnumSimulationType&amp; myEnumSimulationType) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> toString(myEnumSimulationType) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitExceptions.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitExceptions.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> Unit<a href="CppException.htm">Exception</a>sH<br/>
<a href="CppDefine.htm">#define</a> Unit<a href="CppException.htm">Exception</a>sH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppExceptionH.htm">exception</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> NoFemale<a href="CppException.htm">Exception</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppStdException.htm">std::exception</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;NoFemale<a href="CppException.htm">Exception</a>() {} <a href="CppComment.htm">//</a>: mWhat("There was no female left") {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> mWhat;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> NoMale<a href="CppException.htm">Exception</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppStdException.htm">std::exception</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;NoMale<a href="CppException.htm">Exception</a>() {} <a href="CppComment.htm">//</a>: mWhat("There was no male left") {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> mWhat;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> NoCouples<a href="CppException.htm">Exception</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppStdException.htm">std::exception</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>: NoCouples<a href="CppException.htm">Exception</a>() {}<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> UnknownBirdType<a href="CppException.htm">Exception</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppStdException.htm">std::exception</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;UnknownBirdType<a href="CppException.htm">Exception</a>() {} <a href="CppComment.htm">//</a>: mWhat("Unknown bird type") {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> mWhat;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitExceptions.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitExceptions.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppException.htm">Exception</a>s.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitFemaleChoice.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitFemaleChoice.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFemaleChoiceH<br/>
<a href="CppDefine.htm">#define</a> UnitFemaleChoiceH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumMatingSystem.h"<br/>
<b><a href="CppClass.htm">class</a></b> SingleFemalePool;<br/>
<b><a href="CppClass.htm">class</a></b> SingleMalePool;<br/>
<b><a href="CppClass.htm">class</a></b> CouplePool;<br/>
<b><a href="CppClass.htm">class</a></b> DeadPool;<br/>
<b><a href="CppClass.htm">class</a></b> MatingSystemBase;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> FemaleChoiceBase : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;FemaleChoiceBase() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~FemaleChoiceBase() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setMatingSystem(<b><a href="CppConst.htm">const</a></b> EnumMatingSystem&amp; matingSystem);<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> choose(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleFemalePool&gt;&amp; singleFemalePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleMalePool&gt;&amp; singleMalePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;CouplePool&gt;&amp; couplePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;MatingSystemBase&gt; mMatingSystem;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> FemaleChoiceWinnerFight2males : <b><a href="CppPublic.htm">public</a></b> FemaleChoiceBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;FemaleChoiceWinnerFight2males(<b><a href="CppConst.htm">const</a></b> EnumMatingSystem&amp; matingSystem);<br/>
&nbsp;&nbsp;~FemaleChoiceWinnerFight2males() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> choose(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleFemalePool&gt;&amp; singleFemalePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleMalePool&gt;&amp; singleMalePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;CouplePool&gt;&amp; couplePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool) <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitFemaleChoice.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitFemaleChoice.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFemaleChoice.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSingleFemalePool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSingleMalePool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitCouplePool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDeadPool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMatingSystem.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppException.htm">Exception</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitRandom.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> FemaleChoiceBase::setMatingSystem(<b><a href="CppConst.htm">const</a></b> EnumMatingSystem&amp; matingSystem)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(matingSystem)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> monogamy:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMatingSystem.reset(<b><a href="CppNew.htm">new</a></b> MatingSystemMonogamy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> polygyny:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMatingSystem.reset(<b><a href="CppNew.htm">new</a></b> MatingSystemPolygyny);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(!"Shouldn't get here: Unimplemented mating system");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
FemaleChoiceWinnerFight2males::FemaleChoiceWinnerFight2males(<b><a href="CppConst.htm">const</a></b> EnumMatingSystem&amp; matingSystem)<br/>
{<br/>
&nbsp;&nbsp;setMatingSystem(matingSystem);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> FemaleChoiceWinnerFight2males::choose(<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleFemalePool&gt;&amp; singleFemalePool,<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleMalePool&gt;&amp; singleMalePool,<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;CouplePool&gt;&amp; couplePool,<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(singleFemalePool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(singleMalePool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(couplePool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(deadPool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Try to get one female and two males<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(singleFemalePool-&gt;isEmpty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>All males die in solitude<br/>
&nbsp;&nbsp;&nbsp;&nbsp;singleMalePool-&gt;<b><a href="CppDo.htm">do</a></b>Empty(deadPool);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> NoFemale<a href="CppException.htm">Exception</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; female <a href="CppOperatorAssign.htm">=</a> singleFemalePool-&gt;getFemale();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(singleMalePool-&gt;isEmpty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Single female dies in solitude<br/>
&nbsp;&nbsp;&nbsp;&nbsp;singleFemalePool-&gt;<b><a href="CppDo.htm">do</a></b>Empty(deadPool);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(singleFemalePool-&gt;isEmpty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> NoMale<a href="CppException.htm">Exception</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; male1 <a href="CppOperatorAssign.htm">=</a> singleMalePool-&gt;getMale();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(singleMalePool-&gt;isEmpty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male1.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put last male and last female in couplePool<br/>
&nbsp;&nbsp;&nbsp;&nbsp;couplePool-&gt;addCouple(female,male1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Kill all other solitary females<br/>
&nbsp;&nbsp;&nbsp;&nbsp;singleFemalePool-&gt;<b><a href="CppDo.htm">do</a></b>Empty(deadPool);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male1.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(singleFemalePool-&gt;isEmpty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(singleMalePool-&gt;isEmpty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> NoMale<a href="CppException.htm">Exception</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; male2 <a href="CppOperatorAssign.htm">=</a> singleMalePool-&gt;getMale();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Yes! We've one female and two males. Let them fight<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female-&gt;getClassType() <a href="CppOperatorEqual.htm">==</a> hawkDove);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male1-&gt;getClassType()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> hawkDove);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male2-&gt;getClassType()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> hawkDove);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( male1-&gt;willFight(male2)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (male2-&gt;willFight(male1)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>male1 hawk <a href="CppOperatorMinus.htm">-</a> male2 hawk<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (male1-&gt;getCondition() &gt; male2-&gt;getCondition())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>male1 wins and gets female, male2 might die<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The mating system determines whether male1 is copied back to the SingleMalePool again<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMatingSystem-&gt;<a href="CppMake.htm">make</a>Couple(female,male1,singleMalePool,couplePool);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does male2 die?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (male2-&gt;willDieLoserFight()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Yes, male2 dies<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deadPool-&gt;addMale(male2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>No, male2 remains single<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;singleMalePool-&gt;addMale(male2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>male2 wins and gets female, male1 dies<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The mating system determines whether male2 is copied back to the SingleMalePool again<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMatingSystem-&gt;<a href="CppMake.htm">make</a>Couple(female,male2,singleMalePool,couplePool);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does male1 die?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (male1-&gt;willDieLoserFight()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Yes, male1 dies<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deadPool-&gt;addMale(male1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>No, male1 remains single<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;singleMalePool-&gt;addMale(male1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>male1 hawk <a href="CppOperatorMinus.htm">-</a> male2 dove<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>male1 gets female, male2 remains single<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The mating system determines whether male1 is copied back to the SingleMalePool again<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMatingSystem-&gt;<a href="CppMake.htm">make</a>Couple(female,male1,singleMalePool,couplePool);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;singleMalePool-&gt;addMale(male2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (male2-&gt;willFight(male1)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>male1 dove <a href="CppOperatorMinus.htm">-</a> male2 hawk<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>male2 get female, male1 remains single<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The mating system determines whether male2 is copied back to the SingleMalePool again<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMatingSystem-&gt;<a href="CppMake.htm">make</a>Couple(female,male2,singleMalePool,couplePool);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;singleMalePool-&gt;addMale(male1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>male1 dove <a href="CppOperatorMinus.htm">-</a> male2 dove<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rnd::uniform()&lt;0.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>male1 gets female (by chance) and male2 remains single<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The mating system determines whether male1 is copied back to the SingleMalePool again<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMatingSystem-&gt;<a href="CppMake.htm">make</a>Couple(female,male1,singleMalePool,couplePool);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;singleMalePool-&gt;addMale(male2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>male2 gets female (by chance) and male1 remains single<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The mating system determines whether male1 is copied back to the SingleMalePool again<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMatingSystem-&gt;<a href="CppMake.htm">make</a>Couple(female,male2,singleMalePool,couplePool);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;singleMalePool-&gt;addMale(male1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitFormAboutTheAuthor.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitFormAboutTheAuthor.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="CppAbout.htm">About</a>TheAuthorH<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="CppAbout.htm">About</a>TheAuthorH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;jpeg.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="CppAbout.htm">About</a>TheAuthor : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEditLicence;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAuthor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTopRight;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTitle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelLicence;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelCollaboration2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelCollaboration1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelDate;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelAuthor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel<a href="CppVersion.htm">Version</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelWebsite;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPageControl *PageControl1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEditWhatsNew;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TForm<a href="CppAbout.htm">About</a>TheAuthor(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="CppAbout.htm">About</a>TheAuthor *Form<a href="CppAbout.htm">About</a>TheAuthor;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitFormAboutTheAuthor.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitFormAboutTheAuthor.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppAbout.htm">About</a>TheAuthor.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="CppAbout.htm">About</a>TheAuthor *Form<a href="CppAbout.htm">About</a>TheAuthor;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="CppAbout.htm">About</a>TheAuthor::TForm<a href="CppAbout.htm">About</a>TheAuthor(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitFormParameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitFormParameters.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormParametersH<br/>
<a href="CppDefine.htm">#define</a> UnitFormParametersH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Grids.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ValEdit.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<b><a href="CppClass.htm">class</a></b> SimulationParameters;<br/>
<b><a href="CppClass.htm">class</a></b> BirdGeneralParameters;<br/>
<b><a href="CppClass.htm">class</a></b> BirdHawkDoveParameters;<br/>
<b><a href="CppClass.htm">class</a></b> BreedingParameters;<br/>
<b><a href="CppClass.htm">class</a></b> InitialBirdNumbers;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormParameters : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TRadioGroup *RadioGroupSimulationType;<br/>
&nbsp;&nbsp;TValueListEditor *ValueListGeneral;<br/>
&nbsp;&nbsp;TRadioGroup *RadioGroupFemaleChoice;<br/>
&nbsp;&nbsp;TRadioGroup *RadioGroupMaleCompetition;<br/>
&nbsp;&nbsp;TRadioGroup *RadioGroupNextGenerationSize;<br/>
&nbsp;&nbsp;TPanel *PanelBirdType;<br/>
&nbsp;&nbsp;TValueListEditor *ValueListEditorBirdHawkDove;<br/>
&nbsp;&nbsp;TValueListEditor *ValueListBirdNumbers;<br/>
&nbsp;&nbsp;TPageControl *PageControl1;<br/>
&nbsp;&nbsp;TTabSheet *TabSheet1;<br/>
&nbsp;&nbsp;TTabSheet *TabSheet2;<br/>
&nbsp;&nbsp;TPageControl *PageControlBirdType;<br/>
&nbsp;&nbsp;TTabSheet *TabSheet3;<br/>
&nbsp;&nbsp;TTabSheet *TabSheet6;<br/>
&nbsp;&nbsp;TTabSheet *TabSheet4;<br/>
&nbsp;&nbsp;TPanel *Panel1;<br/>
&nbsp;&nbsp;TTabSheet *TabSheet5;<br/>
&nbsp;&nbsp;TRadioGroup *RadioGroupPedigree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRadioGroup *RadioGroupMigration;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel3;<br/>
&nbsp;&nbsp;TPanel *PanelRearingCaption;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPageControl *PageControlRearing;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet7;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TValueListEditor *ValueListRearingRandom;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TValueListEditor *ValueListBirdGeneral;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRadioGroup *RadioGroupMatingSystem;<br/>
&nbsp;&nbsp;TTabSheet *TabSheet9;<br/>
&nbsp;&nbsp;TValueListEditor *ValueListBreeding;<br/>
&nbsp;&nbsp;TPanel *PanelRearingLeft;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormParameters(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt; getSimulationParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdHawkDoveParameters&gt; getHawkDoveParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdGeneralParameters&gt; getBirdGeneralParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InitialBirdNumbers&gt; getInitialBirdNumbers() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BreedingParameters&gt; getBreedingParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormParameters *FormParameters;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitFormParameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitFormParameters.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFormParameters.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulationParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdGeneralParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdHawkDoveParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBreedingParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitInitialBirdNumbers.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayOptions.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormParameters *FormParameters;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormParameters::TFormParameters(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt; TFormParameters::getSimulationParameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt; params(<b><a href="CppNew.htm">new</a></b> SimulationParameters);<br/>
<br/>
&nbsp;&nbsp;params-&gt;mBirdGeneralParameters <a href="CppOperatorAssign.htm">=</a> getBirdGeneralParameters();<br/>
&nbsp;&nbsp;params-&gt;mInitialBirdNumbers&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> getInitialBirdNumbers();<br/>
&nbsp;&nbsp;params-&gt;mBreedingParameters&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> getBreedingParameters();<br/>
<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Get number of generations<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nGenerationsIndex <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>( ValueListGeneral-&gt;Cells[0][nGenerationsIndex] <a href="CppOperatorEqual.htm">==</a> "Number of generations");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mNgenerations <a href="CppOperatorAssign.htm">=</a> ValueListGeneral-&gt;Cells[1][nGenerationsIndex].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Get type of simulation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupSimulationType-&gt;ItemIndex)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(RadioGroupSimulationType-&gt;Items-&gt;<b><a href="CppOperator.htm">operator</a></b> [](0) <a href="CppOperatorEqual.htm">==</a> "Cartoon model");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mEnumSimulationType <a href="CppOperatorAssign.htm">=</a> cartoonModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Get Bird Type and their parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(PageControlBirdType-&gt;ActivePageIndex)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(PageControlBirdType-&gt;ActivePage-&gt;Caption<a href="CppOperatorEqual.htm">==</a>"Hawk-dove");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mBirdHawkDoveParameters <a href="CppOperatorAssign.htm">=</a> getHawkDoveParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(!"Unimplemented BirdType");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Get female choice<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupFemaleChoice-&gt;ItemIndex)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(RadioGroupFemaleChoice-&gt;Items-&gt;<b><a href="CppOperator.htm">operator</a></b> [](0) <a href="CppOperatorEqual.htm">==</a> "Selects on trait only");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mEnumFemaleChoice <a href="CppOperatorAssign.htm">=</a> traitOnly;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(RadioGroupFemaleChoice-&gt;Items-&gt;<b><a href="CppOperator.htm">operator</a></b> [](1) <a href="CppOperatorEqual.htm">==</a> "Selects on condition only");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mEnumFemaleChoice <a href="CppOperatorAssign.htm">=</a> conditionOnly;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(RadioGroupFemaleChoice-&gt;Items-&gt;<b><a href="CppOperator.htm">operator</a></b> [](2) <a href="CppOperatorEqual.htm">==</a> "Selects on territory only");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mEnumFemaleChoice <a href="CppOperatorAssign.htm">=</a> territoryOnly;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(RadioGroupFemaleChoice-&gt;Items-&gt;<b><a href="CppOperator.htm">operator</a></b> [](3) <a href="CppOperatorEqual.htm">==</a> "Selects winner of a fight of 2 males");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mEnumFemaleChoice <a href="CppOperatorAssign.htm">=</a> winnerFight2males;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(!"Shouldn't get here: unimplemented female choice");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Mating system<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupMatingSystem-&gt;ItemIndex)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(RadioGroupMatingSystem-&gt;Items-&gt;<b><a href="CppOperator.htm">operator</a></b>[](0)<a href="CppOperatorEqual.htm">==</a>"Monogamy");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mEnumMatingSystem <a href="CppOperatorAssign.htm">=</a> monogamy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(RadioGroupMatingSystem-&gt;Items-&gt;<b><a href="CppOperator.htm">operator</a></b>[](1)<a href="CppOperatorEqual.htm">==</a>"Polygyny");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mEnumMatingSystem <a href="CppOperatorAssign.htm">=</a> polygyny;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(!"Shouldn't get here: unimplemented mating system");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display options<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupPedigree-&gt;ItemIndex)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(RadioGroupPedigree-&gt;Items-&gt;<b><a href="CppOperator.htm">operator</a></b> [](0) <a href="CppOperatorEqual.htm">==</a>"None");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mDisplayOptions-&gt;mPedigreeCharter <a href="CppOperatorAssign.htm">=</a> pedigreeCharterNone;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(RadioGroupPedigree-&gt;Items-&gt;<b><a href="CppOperator.htm">operator</a></b> [](1) <a href="CppOperatorEqual.htm">==</a>"All");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mDisplayOptions-&gt;mPedigreeCharter <a href="CppOperatorAssign.htm">=</a> pedigreeCharterAll;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> params;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdHawkDoveParameters&gt; TFormParameters::getHawkDoveParameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdHawkDoveParameters&gt; params(<b><a href="CppNew.htm">new</a></b> BirdHawkDoveParameters);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(ValueListEditorBirdHawkDove-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Initial 'play hawk alpha' mean");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mPlayHawkAlphaMean <a href="CppOperatorAssign.htm">=</a> ValueListEditorBirdHawkDove-&gt;Cells[1][index].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(ValueListEditorBirdHawkDove-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Initial 'play hawk alpha' stdDev");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mPlayHawkAlphaStdDev <a href="CppOperatorAssign.htm">=</a> ValueListEditorBirdHawkDove-&gt;Cells[1][index].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(ValueListEditorBirdHawkDove-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Initial 'play hawk beta' mean");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mPlayHawkBetaMean <a href="CppOperatorAssign.htm">=</a> ValueListEditorBirdHawkDove-&gt;Cells[1][index].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(ValueListEditorBirdHawkDove-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Initial 'play hawk beta' stdDev");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mPlayHawkBetaStdDev <a href="CppOperatorAssign.htm">=</a> ValueListEditorBirdHawkDove-&gt;Cells[1][index].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(ValueListEditorBirdHawkDove-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Mutation rate 'play hawk alpha'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mPlayHawkAlphaMutation <a href="CppOperatorAssign.htm">=</a> ValueListEditorBirdHawkDove-&gt;Cells[1][index].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 6;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(ValueListEditorBirdHawkDove-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Mutation rate 'play hawk beta'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mPlayHawkBetaMutation <a href="CppOperatorAssign.htm">=</a> ValueListEditorBirdHawkDove-&gt;Cells[1][index].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 7;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(ValueListEditorBirdHawkDove-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "pDie loser in hawk-hawk fight");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mPdieHawkHawkLoser <a href="CppOperatorAssign.htm">=</a> ValueListEditorBirdHawkDove-&gt;Cells[1][index].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> params;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdGeneralParameters&gt; TFormParameters::getBirdGeneralParameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdGeneralParameters&gt; params(<b><a href="CppNew.htm">new</a></b> BirdGeneralParameters);<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Initial constitution mean<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>( ValueListBirdGeneral-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Initial 'condition heritable' mean");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mInitialConditionHeritableMean <a href="CppOperatorAssign.htm">=</a> ValueListBirdGeneral-&gt;Cells[1][index].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Initial conditionHeritable stdDev<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>( ValueListBirdGeneral-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Initial 'condition heritable' stdDev");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mInitialConditionHeritableStdDev <a href="CppOperatorAssign.htm">=</a> ValueListBirdGeneral-&gt;Cells[1][index].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Constitution mutation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>( ValueListBirdGeneral-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Mutation rate 'condition heritable'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mConditionHeritableMutation <a href="CppOperatorAssign.htm">=</a> ValueListBirdGeneral-&gt;Cells[1][index].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> params;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InitialBirdNumbers&gt; TFormParameters::getInitialBirdNumbers() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InitialBirdNumbers&gt; params(<b><a href="CppNew.htm">new</a></b> InitialBirdNumbers);<br/>
<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Get initial single females<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>( ValueListBirdNumbers-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Initial single females");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mNinitialSingleFemales <a href="CppOperatorAssign.htm">=</a> ValueListBirdNumbers-&gt;Cells[1][index].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Get initial single males<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>( ValueListBirdNumbers-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Initial single males");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mNinitialSingleMales <a href="CppOperatorAssign.htm">=</a> ValueListBirdNumbers-&gt;Cells[1][index].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Get initial couples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>( ValueListBirdNumbers-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Initial couples");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mNinitialCouples <a href="CppOperatorAssign.htm">=</a> ValueListBirdNumbers-&gt;Cells[1][index].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Get initial migrants<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>( ValueListBirdNumbers-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Initial migrants");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mNinitialMigrants <a href="CppOperatorAssign.htm">=</a> ValueListBirdNumbers-&gt;Cells[1][index].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Get initial death<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>( ValueListBirdNumbers-&gt;Cells[0][index] <a href="CppOperatorEqual.htm">==</a> "Initial dead");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mNinitialDead <a href="CppOperatorAssign.htm">=</a> ValueListBirdNumbers-&gt;Cells[1][index].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> params;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BreedingParameters&gt; TFormParameters::getBreedingParameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BreedingParameters&gt; params(<b><a href="CppNew.htm">new</a></b> BreedingParameters);<br/>
<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Get number of female offspring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesIndex <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>( ValueListBreeding-&gt;Cells[0][nFemalesIndex] <a href="CppOperatorEqual.htm">==</a> "Female offspring");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mNfemaleOffspring <a href="CppOperatorAssign.htm">=</a> ValueListBreeding-&gt;Cells[1][nFemalesIndex].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Get number of male offspring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nMalesIndex <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>( ValueListBreeding-&gt;Cells[0][nMalesIndex] <a href="CppOperatorEqual.htm">==</a> "Male offspring");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;params-&gt;mNmaleOffspring <a href="CppOperatorAssign.htm">=</a> ValueListBreeding-&gt;Cells[1][nMalesIndex].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> params;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitFormResults.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitFormResults.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormResultsH<br/>
<a href="CppDefine.htm">#define</a> UnitFormResultsH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Chart.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Dialogs.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Series.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;TeEngine.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;TeeProcs.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<b><a href="CppClass.htm">class</a></b> SimulationParameters;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormResults : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TPageControl *PageControlMain;<br/>
&nbsp;&nbsp;TTabSheet *TabSheet3;<br/>
&nbsp;&nbsp;TRichEdit *RichEditResults;<br/>
&nbsp;&nbsp;TTabSheet *TabSheet6;<br/>
&nbsp;&nbsp;TChart *ChartNumbers;<br/>
&nbsp;&nbsp;TLineSeries *Series2;<br/>
&nbsp;&nbsp;TLineSeries *Series3;<br/>
&nbsp;&nbsp;TLineSeries *Series4;<br/>
&nbsp;&nbsp;TLineSeries *Series5;<br/>
&nbsp;&nbsp;TLineSeries *Series6;<br/>
&nbsp;&nbsp;TTabSheet *TabSheet8;<br/>
&nbsp;&nbsp;TRichEdit *RichEditPedigree;<br/>
&nbsp;&nbsp;TPanel *Panel1;<br/>
&nbsp;&nbsp;TButton *ButtonSavePedigree;<br/>
&nbsp;&nbsp;TTabSheet *TabSheet9;<br/>
&nbsp;&nbsp;TChart *ChartTraits;<br/>
&nbsp;&nbsp;TLineSeries *Series7;<br/>
&nbsp;&nbsp;TLineSeries *Series8;<br/>
&nbsp;&nbsp;TLineSeries *Series9;<br/>
&nbsp;&nbsp;TSaveDialog *SaveDialogPedigree;<br/>
&nbsp;&nbsp;TTabSheet *TabSheet1;<br/>
&nbsp;&nbsp;TChart *Chart1;<br/>
&nbsp;&nbsp;TLineSeries *Series1;<br/>
&nbsp;&nbsp;TLineSeries *Series10;<br/>
&nbsp;&nbsp;TLineSeries *Series11;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonSavePedigreeClick(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormResults(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> displayResults();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> display(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt;&amp; simParams);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormResults *FormResults;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitFormResults.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitFormResults.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFormResults.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulationParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitResults.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdWatcher.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulation<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormResults *FormResults;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormResults::TFormResults(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormResults::ButtonSavePedigreeClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!SaveDialogPedigree-&gt;Execute()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;RichEditPedigree-&gt;Lines-&gt;SaveToFile(SaveDialogPedigree-&gt;FileName);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormResults::displayResults()<br/>
{<br/>
&nbsp;&nbsp;helper::emptyChart(ChartNumbers);<br/>
&nbsp;&nbsp;helper::emptyChart(ChartTraits);<br/>
&nbsp;&nbsp;RichEditPedigree-&gt;Lines-&gt;Clear();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Results * results <a href="CppOperatorAssign.htm">=</a> Results::<a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;helper::plot(results-&gt;mNsingleFemales, ChartNumbers-&gt;Series[0]);<br/>
&nbsp;&nbsp;helper::plot(results-&gt;mNsingleMales&nbsp;&nbsp;, ChartNumbers-&gt;Series[1]);<br/>
&nbsp;&nbsp;helper::plot(results-&gt;mNcouples&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, ChartNumbers-&gt;Series[2]);<br/>
&nbsp;&nbsp;helper::plot(results-&gt;mNmigrants&nbsp;&nbsp;&nbsp;&nbsp; , ChartNumbers-&gt;Series[3]);<br/>
&nbsp;&nbsp;helper::plot(results-&gt;mNdead&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , ChartNumbers-&gt;Series[4]);<br/>
&nbsp;&nbsp;helper::log(results-&gt;mLog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, RichEditResults);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BirdWatcher * birdWatcher <a href="CppOperatorAssign.htm">=</a> BirdWatcher::<a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; pedigree <a href="CppOperatorAssign.htm">=</a> birdWatcher-&gt;getPedigree();<br/>
&nbsp;&nbsp;helper::log(pedigree,RichEditPedigree);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; meanPlayHawkAlpha <a href="CppOperatorAssign.htm">=</a> birdWatcher-&gt;getMeansPlayHawkAlpha();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; meanPlayHawkBeta&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> birdWatcher-&gt;getMeansPlayHawkBeta();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(meanPlayHawkAlpha.size()<a href="CppOperatorEqual.htm">==</a>meanPlayHawkBeta.size());<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; meanPlayHawk;<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Calculate meanPlayHawk (from logistic equation)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> meanPlayHawkAlpha.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;meanPlayHawk.resize(size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;meanPlayHawk[i] <a href="CppOperatorAssign.htm">=</a> simFunc::logisticEquation(0.0,meanPlayHawkAlpha[i],meanPlayHawkBeta[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;ChartTraits-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a><a href="CppArray.htm">Array</a>(&amp;meanPlayHawkAlpha[0], meanPlayHawkAlpha.size()-1);<br/>
&nbsp;&nbsp;ChartTraits-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a><a href="CppArray.htm">Array</a>(&amp;meanPlayHawkBeta[0] , meanPlayHawkBeta.size()-1);<br/>
&nbsp;&nbsp;ChartTraits-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a><a href="CppArray.htm">Array</a>(&amp;meanPlayHawk[0]&nbsp;&nbsp;&nbsp;&nbsp; , meanPlayHawk.size()-1);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormResults::display(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt;&amp; simParams)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(simParams.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text <a href="CppOperatorAssign.htm">=</a> simParams-&gt;getText();<br/>
<br/>
&nbsp;&nbsp;RichEditResults-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Simulation parameters");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>String Text;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> text.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;RichEditResults-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>(text[i].c_str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitFormTest.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitFormTest.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormTestH<br/>
<a href="CppDefine.htm">#define</a> UnitFormTestH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Chart.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Series.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;TeEngine.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;TeeProcs.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormTest : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TLabeledEdit *EditPlayHawkAlpha;<br/>
&nbsp;&nbsp;TLabeledEdit *EditPlayHawkBeta;<br/>
&nbsp;&nbsp;TChart *ChartTest;<br/>
&nbsp;&nbsp;TLineSeries *Series1;<br/>
&nbsp;&nbsp;TPageControl *PageControl1;<br/>
&nbsp;&nbsp;TTabSheet *TabSheet1;<br/>
&nbsp;&nbsp;TPanel *Panel1;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall EditPlayHawkChange(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormTest(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormTest *FormTest;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitFormTest.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitFormTest.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitFormTest.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulation<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormTest *FormTest;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormTest::TFormTest(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormTest::EditPlayHawkChange(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> alpha <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> beta&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (helper::is<a href="CppDouble.htm">Double</a>(EditPlayHawkAlpha-&gt;Text.c_str(),alpha)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> helper::is<a href="CppDouble.htm">Double</a>(EditPlayHawkBeta-&gt;Text.c_str(), beta)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartTest-&gt;Series[0]-&gt;Clear();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartTest-&gt;Title-&gt;Text-&gt;Clear();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartTest-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("The chance to play hawk <b><a href="CppFor.htm">for</a></b> diffent values of condition");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartTest-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("Alpha: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(alpha));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartTest-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("Beta: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(beta));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartTest-&gt;LeftAxis-&gt;Title-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "Chance to play hawk";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartTest-&gt;BottomAxis-&gt;Title-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "Condition";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0; x&lt;1.0; x<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> simFunc::logisticEquation(x,alpha,beta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChartTest-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitHelperFunctions.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitHelperFunctions.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitHelper<a href="CppFunction.htm">Function</a>sH<br/>
<a href="CppDefine.htm">#define</a> UnitHelper<a href="CppFunction.htm">Function</a>sH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Chart.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<b><a href="CppClass.htm">class</a></b> SimulationParameters;<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppClass.htm">class</a></b> Comctrls::TRichEdit;<br/>
<b><a href="CppClass.htm">class</a></b> Chart::TChart;<br/>
<b><a href="CppClass.htm">class</a></b> Teengine::TChartSeries;<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> helper<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isInt(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s, <b><a href="CppInt.htm">int</a></b>&amp; rInt);<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> is<a href="CppDouble.htm">Double</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s, <b><a href="CppDouble.htm">double</a></b>&amp; r<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> itoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; x);<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ftoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> dot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> dot(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b>* s);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> dot(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; i);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> log(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; myLog, TRichEdit * richEdit);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> plot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; values, TChartSeries* Series);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> emptyChart(TChart * <b><a href="CppChar.htm">char</a></b>t);<br/>
&nbsp;&nbsp;<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppVoid.htm">void</a></b> add(<a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; target, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; source);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> add(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; target, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; source);<br/>
<br/>
<br/>
&nbsp;&nbsp;};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitHelperFunctions.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitHelperFunctions.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> NDOT<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>.h&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulationParameters.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppNamespace.htm">namespace</a></b> helper<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks whether a <a href="CppStdString.htm">std::string</a> can be <a href="CppConvert.htm">convert</a>ed to an <a href="CppInt.htm">integer</a>.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns <b><a href="CppTrue.htm">true</a></b> <b><a href="CppIf.htm">if</a></b> possible, also <b><a href="CppReturn.htm">return</a></b>ing <b><a href="CppThis.htm">this</a></b> <a href="CppInt.htm">integer</a> by referencing.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns <b><a href="CppFalse.htm">false</a></b> otherwise, setting the referenced <a href="CppInt.htm">integer</a> to zero.<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isInt(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s, <b><a href="CppInt.htm">int</a></b>&amp; rInt)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIstringstream.htm">std::istringstream</a> i(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(i <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> rInt))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rInt <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks whether a <a href="CppStdString.htm">std::string</a> can be <a href="CppConvert.htm">convert</a>ed to a <b><a href="CppDouble.htm">double</a></b>.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns <b><a href="CppTrue.htm">true</a></b> <b><a href="CppIf.htm">if</a></b> possible, also <b><a href="CppReturn.htm">return</a></b>ing <b><a href="CppThis.htm">this</a></b> <b><a href="CppDouble.htm">double</a></b> by referencing.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns <b><a href="CppFalse.htm">false</a></b> otherwise, setting the referenced <b><a href="CppDouble.htm">double</a></b> to zero.<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> is<a href="CppDouble.htm">Double</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s, <b><a href="CppDouble.htm">double</a></b>&amp; r<a href="CppDouble.htm">Double</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIstringstream.htm">std::istringstream</a> i(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(i <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> r<a href="CppDouble.htm">Double</a>))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r<a href="CppDouble.htm">Double</a> <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> itoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOstringstream.htm">std::ostringstream</a> o;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(o <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x)) <b><a href="CppReturn.htm">return</a></b> "ERROR";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> o.str();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ftoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOstringstream.htm">std::ostringstream</a> o;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(o <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x)) <b><a href="CppReturn.htm">return</a></b> "ERROR";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> o.str();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> dot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> NDOT<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(s.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> dot(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b>* s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> NDOT<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> dot(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> NDOT<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(<a href="CppIntToStr.htm">IntToStr</a>(i).c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> plot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; values, TChartSeries* Series)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> values.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Series-&gt;<a href="CppAdd.htm">Add</a>XY(i,values[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> log(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; myLog, TRichEdit * richEdit)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> myLog.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;richEdit-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>( myLog[i].c_str() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> emptyChart(TChart * <b><a href="CppChar.htm">char</a></b>t)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSeries <a href="CppOperatorAssign.htm">=</a> <b><a href="CppChar.htm">char</a></b>t-&gt;SeriesCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSeries; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>t-&gt;Series[i]-&gt;Clear();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppVoid.htm">void</a></b> add(<a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; target, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; source)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> source.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.push_back(source[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> add(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; target, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; source)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> source.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.push_back(source[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
};<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitInitialBirdNumbers.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitInitialBirdNumbers.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitInitialBirdNumbersH<br/>
<a href="CppDefine.htm">#define</a> UnitInitialBirdNumbersH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> InitialBirdNumbers : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mNinitialSingleFemales;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mNinitialSingleMales;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mNinitialCouples;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mNinitialMigrants;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mNinitialDead;<br/>
};<br/>
<a href="CppEndif.htm">#endif</a><br/>
 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitInitialBirdNumbers.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitInitialBirdNumbers.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitInitialBirdNumbers.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitMain.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitMain.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitMainH<br/>
<a href="CppDefine.htm">#define</a> UnitMainH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Grids.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ValEdit.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Chart.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Series.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;TeEngine.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;TeeProcs.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;BubbleCh.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Dialogs.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;jpeg.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Menus.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<b><a href="CppClass.htm">class</a></b> SimulationParameters;<br/>
<b><a href="CppClass.htm">class</a></b> BirdHawkDoveParameters;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormThorVeenProject : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
&nbsp;&nbsp;__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TStatusBar *StatusBar1;<br/>
&nbsp;&nbsp;TMainMenu *MainMenu1;<br/>
&nbsp;&nbsp;TMenuItem *MenuSimulation;<br/>
&nbsp;&nbsp;TMenuItem *Window1;<br/>
&nbsp;&nbsp;TMenuItem *Cascade1;<br/>
&nbsp;&nbsp;TMenuItem *Tile1;<br/>
&nbsp;&nbsp;TMenuItem *MenuRun;<br/>
&nbsp;&nbsp;TMenuItem *MenuEditParameters;<br/>
&nbsp;&nbsp;TMenuItem *Help1;<br/>
&nbsp;&nbsp;TMenuItem *<a href="CppAbout.htm">About</a>1;<br/>
&nbsp;&nbsp;TMenuItem *<a href="CppAbout.htm">About</a>theprogram1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMenuItem *Exit1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMenuItem *Test1;<br/>
&nbsp;&nbsp;TMenuItem *ViewResults1;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Cascade1Click(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Tile1Click(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall MenuRunClick(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall MenuEditParametersClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Exit1Click(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Test1Click(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppAbout.htm">About</a>1Click(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppAbout.htm">About</a>theprogram1Click(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ViewResults1Click(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> displayResults();<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt; getSimulationParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdHawkDoveParameters&gt; getHawkDoveParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp; __fastcall TFormThorVeenProject(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormThorVeenProject *FormThorVeenProject;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitMain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitMain.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdFactory.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMain.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormResults.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppAbout.htm">About</a>TheAuthor.h"<br/>
<a href="CppInclude.htm">#include</a> "ProjectHelp.map"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulation.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulationParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulation<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitResults.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdWatcher.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppException.htm">Exception</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormTest.h"<br/>
<a href="CppComment.htm">//</a>TEST<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormThorVeenProject *FormThorVeenProject;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormThorVeenProject::TFormThorVeenProject(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Static <a href="CppInitialize.htm">initialization</a>s<br/>
&nbsp;&nbsp;BirdBase::InitBirdWatcher();<br/>
&nbsp;&nbsp;BirdFactoryBase::InitBirdWatcher();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Caption <a href="CppOperatorAssign.htm">=</a> <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorPlus.htm">+</a> ": <a href="CppDebug.htm">Debug</a> <a href="CppVersion.htm">version</a>";<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Caption <a href="CppOperatorAssign.htm">=</a> <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorPlus.htm">+</a> ": No<a href="CppDebug.htm">Debug</a> <a href="CppVersion.htm">version</a>";<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormThorVeenProject::displayResults()<br/>
{<br/>
&nbsp;&nbsp;FormResults-&gt;displayResults();<br/>
<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Check number of generations<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BirdWatcher * birdWatcher <a href="CppOperatorAssign.htm">=</a> BirdWatcher::<a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nGenerationsIndex <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>( FormParameters-&gt;ValueListGeneral-&gt;Cells[0][nGenerationsIndex] <a href="CppOperatorEqual.htm">==</a> "Number of generations");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nGenerations <a href="CppOperatorAssign.htm">=</a> FormParameters-&gt;ValueListGeneral-&gt;Cells[1][nGenerationsIndex].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> __RICHEL_HACK_7615327659321765876666666222<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nGenerations <a href="CppOperatorNotEqual.htm">!=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(birdWatcher-&gt;getMeansPlayHawkAlpha().size()) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShowMessage(birdWatcher-&gt;getMeansPlayHawkAlpha().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(nGenerations <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(birdWatcher-&gt;getMeansPlayHawkAlpha().size()) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(nGenerations <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(birdWatcher-&gt;getMeansPlayHawkBeta().size())&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormThorVeenProject::Cascade1Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;Cascade();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormThorVeenProject::Tile1Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;Tile();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormThorVeenProject::MenuRunClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;FormResults-&gt;RichEditResults-&gt;Lines-&gt;Clear();<br/>
&nbsp;&nbsp;helper::emptyChart(FormResults-&gt;ChartNumbers);<br/>
<br/>
&nbsp;&nbsp;StatusBar1-&gt;Panels-&gt;Items[1]-&gt;Text="Starting simulation";<br/>
&nbsp;&nbsp;Refresh();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt; simParams <a href="CppOperatorAssign.htm">=</a> FormParameters-&gt;getSimulationParameters();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(simParams.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;FormResults-&gt;display(simParams);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;Simulation&gt; simulation(<b><a href="CppNew.htm">new</a></b> Simulation(simParams));<br/>
&nbsp;&nbsp;simulation-&gt;execute();<br/>
&nbsp;&nbsp;StatusBar1-&gt;Panels-&gt;Items[1]-&gt;Text="Displaying results";<br/>
&nbsp;&nbsp;Refresh();<br/>
&nbsp;&nbsp;displayResults();<br/>
&nbsp;&nbsp;StatusBar1-&gt;Panels-&gt;Items[1]-&gt;Text="Finished simulation";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormThorVeenProject::MenuEditParametersClick(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;FormParameters-&gt;Window<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> wsMaximized;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormThorVeenProject::Exit1Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppApplication.htm">Application</a>-&gt;Terminate();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormThorVeenProject::Test1Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;FormTest-&gt;Show();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormThorVeenProject::<a href="CppAbout.htm">About</a>1Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;TForm<a href="CppAbout.htm">About</a>TheAuthor&gt; form(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppAbout.htm">About</a>TheAuthor(0));<br/>
&nbsp;&nbsp;form-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormThorVeenProject::<a href="CppAbout.htm">About</a>theprogram1Click(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppApplication.htm">Application</a>-&gt;HelpSystem-&gt;ShowTableOfContents();<br/>
&nbsp;&nbsp;<a href="CppApplication.htm">Application</a>-&gt;HelpSystem-&gt;ShowContextHelp(IDH_OVERVIEW_INTRODUCTION,<a href="CppApplication.htm">Application</a>-&gt;HelpFile);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormThorVeenProject::ViewResults1Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;FormResults-&gt;Window<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> wsMaximized;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitMatingSystem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitMatingSystem.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitMatingSystemH<br/>
<a href="CppDefine.htm">#define</a> UnitMatingSystemH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdBase;<br/>
<b><a href="CppClass.htm">class</a></b> SingleMalePool;<br/>
<b><a href="CppClass.htm">class</a></b> CouplePool;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> MatingSystemBase is a Strategy <a href="CppDesignPattern.htm">design pattern</a><br/>
<a href="CppComment.htm">//</a> Therefore, MatingSystemBase is an Abstract Base Class<br/>
<b><a href="CppClass.htm">class</a></b> MatingSystemBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;MatingSystemBase();<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~MatingSystemBase();<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getClassName() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppMake.htm">make</a>Couple(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleMalePool&gt;&amp; singleMalePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;CouplePool&gt;&amp; couplePool) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> MatingSystemMonogamy : <b><a href="CppPublic.htm">public</a></b> MatingSystemBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;MatingSystemMonogamy();<br/>
&nbsp;&nbsp;~MatingSystemMonogamy();<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> getClassName() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppMake.htm">make</a>Couple(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleMalePool&gt;&amp; singleMalePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;CouplePool&gt;&amp; couplePool) <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> MatingSystemPolygyny : <b><a href="CppPublic.htm">public</a></b> MatingSystemBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;MatingSystemPolygyny();<br/>
&nbsp;&nbsp;~MatingSystemPolygyny();<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> getClassName() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppMake.htm">make</a>Couple(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleMalePool&gt;&amp; singleMalePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;CouplePool&gt;&amp; couplePool) <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitMatingSystem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitMatingSystem.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitMatingSystem.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSingleMalePool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitCouplePool.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
MatingSystemBase::MatingSystemBase()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
MatingSystemBase::~MatingSystemBase()<br/>
{<br/>
&nbsp;&nbsp;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
MatingSystemMonogamy::MatingSystemMonogamy()<br/>
{<br/>
&nbsp;&nbsp;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
MatingSystemMonogamy::~MatingSystemMonogamy()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> MatingSystemMonogamy::getClassName() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "MatingSystemMonogamy";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
MatingSystemPolygyny::MatingSystemPolygyny()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
MatingSystemPolygyny::~MatingSystemPolygyny()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> MatingSystemPolygyny::getClassName() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "MatingSystemPolygyny";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MatingSystemMonogamy::<a href="CppMake.htm">make</a>Couple(<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female,<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male,<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleMalePool&gt;&amp; singleMalePool,<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;CouplePool&gt;&amp; couplePool) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(singleMalePool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(couplePool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
&nbsp;&nbsp;couplePool-&gt;addCouple(female,male);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MatingSystemPolygyny::<a href="CppMake.htm">make</a>Couple(<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female,<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male,<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleMalePool&gt;&amp; singleMalePool,<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;CouplePool&gt;&amp; couplePool) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(singleMalePool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(couplePool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; maleCopy <a href="CppOperatorAssign.htm">=</a> male;<br/>
&nbsp;&nbsp;couplePool-&gt;addCouple(female,male);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(maleCopy.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;singleMalePool-&gt;addMale(maleCopy);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitMigration.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitMigration.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitMigrationH<br/>
<a href="CppDefine.htm">#define</a> UnitMigrationH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> MigrationPool;<br/>
<b><a href="CppClass.htm">class</a></b> DeadPool;<br/>
<b><a href="CppClass.htm">class</a></b> SingleMalePool;<br/>
<b><a href="CppClass.htm">class</a></b> SingleFemalePool;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>A Strategy<br/>
<b><a href="CppClass.htm">class</a></b> MigrationBase : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;MigrationBase() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~MigrationBase() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> migration(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;MigrationPool&gt;&amp; migrationPool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleFemalePool&gt;&amp; singleFemalePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleMalePool&gt;&amp; singleMalePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> MigrationAllSurvive : <b><a href="CppPublic.htm">public</a></b> MigrationBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;MigrationAllSurvive() {}<br/>
&nbsp;&nbsp;~MigrationAllSurvive() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> migration(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;MigrationPool&gt;&amp; migrationPool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleFemalePool&gt;&amp; singleFemalePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleMalePool&gt;&amp; singleMalePool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool) <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitMigration.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitMigration.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitMigration.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitMigrationPool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSingleFemalePool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSingleMalePool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDeadPool.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MigrationAllSurvive::migration(<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;MigrationPool&gt;&amp; migrationPool,<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleFemalePool&gt;&amp; singleFemalePool,<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleMalePool&gt;&amp; singleMalePool,<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nFemales <a href="CppOperatorAssign.htm">=</a> migrationPool-&gt;getNfemales();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nFemales; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; female <a href="CppOperatorAssign.htm">=</a> migrationPool-&gt;getFemale();<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;singleFemalePool-&gt;addFemale(female);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nMales&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> migrationPool-&gt;getNmales();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nMales; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; male <a href="CppOperatorAssign.htm">=</a> migrationPool-&gt;getMale();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;singleMalePool-&gt;addMale(male);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(migrationPool-&gt;isEmpty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitMigrationPool.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitMigrationPool.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitMigrationPoolH<br/>
<a href="CppDefine.htm">#define</a> UnitMigrationPoolH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdBase;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> MigrationPool: <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;MigrationPool() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> addFemale(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> addMale(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; getFemale();<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; getMale();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isEmpty() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> hasFemales() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> hasMales() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getNfemales() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getNmales() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getSize() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; &gt; mFemales;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; &gt; mMales;<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitMigrationPool.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitMigrationPool.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitMigrationPool.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MigrationPool::addFemale(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female)<br/>
{<br/>
&nbsp;&nbsp;mFemales.push_back( female );<br/>
&nbsp;&nbsp;female.reset();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MigrationPool::addMale(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male)<br/>
{<br/>
&nbsp;&nbsp;mMales.push_back( male );<br/>
&nbsp;&nbsp;male.reset();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> MigrationPool::isEmpty() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (mFemales.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mMales.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> MigrationPool::hasFemales() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (!mFemales.empty());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> MigrationPool::hasMales() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (!mMales.empty());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> MigrationPool::getNfemales() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mFemales.size();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> MigrationPool::getNmales() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mMales.size();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> MigrationPool::getSize() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ( mMales.size() <a href="CppOperatorPlus.htm">+</a> mFemales.size() );<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; MigrationPool::getFemale()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mFemales.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; female <a href="CppOperatorAssign.htm">=</a> mFemales.back();<br/>
<br/>
&nbsp;&nbsp;mFemales.pop_back();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.use_count()<a href="CppOperatorEqual.htm">==</a>2);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> female;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; MigrationPool::getMale()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mMales.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; male <a href="CppOperatorAssign.htm">=</a> mMales.back();<br/>
<br/>
&nbsp;&nbsp;mMales.pop_back();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> male;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitPedigreeCharter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitPedigreeCharter.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitPedigreeCharterH<br/>
<a href="CppDefine.htm">#define</a> UnitPedigreeCharterH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdHawkDove;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> PedigreeCharterBase is a Strategy <a href="CppDesignPattern.htm">design pattern</a><br/>
<a href="CppComment.htm">//</a> Therefore, PedigreeCharterBase is an Abstract Base Class<br/>
<b><a href="CppClass.htm">class</a></b> PedigreeCharterBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PedigreeCharterBase();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~PedigreeCharterBase();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getClassName() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>ChartLegend(<b><a href="CppConst.htm">const</a></b> BirdHawkDove* bird) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>Chart(<b><a href="CppConst.htm">const</a></b> BirdHawkDove* bird) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; getPedigree() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; mPedigree;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> PedigreeCharterNone : <b><a href="CppPublic.htm">public</a></b> PedigreeCharterBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PedigreeCharterNone();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;~PedigreeCharterNone();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> getClassName() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>ChartLegend(<b><a href="CppConst.htm">const</a></b> BirdHawkDove* bird);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>Chart(<b><a href="CppConst.htm">const</a></b> BirdHawkDove* bird);<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> mDefaultText;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> PedigreeCharterAll : <b><a href="CppPublic.htm">public</a></b> PedigreeCharterBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PedigreeCharterAll();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;~PedigreeCharterAll();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> getClassName() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>ChartLegend(<b><a href="CppConst.htm">const</a></b> BirdHawkDove* bird);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>Chart(<b><a href="CppConst.htm">const</a></b> BirdHawkDove* bird);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitPedigreeCharter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitPedigreeCharter.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitPedigreeCharter.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
PedigreeCharterBase::PedigreeCharterBase()<br/>
{<br/>
&nbsp;&nbsp;mPedigree.resize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
PedigreeCharterBase::~PedigreeCharterBase()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; PedigreeCharterBase::getPedigree() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mPedigree;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
PedigreeCharterNone::PedigreeCharterNone()<br/>
&nbsp;&nbsp;: mDefaultText("PedigreeCharterNone does NOTHING")<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
PedigreeCharterNone::~PedigreeCharterNone()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> PedigreeCharterNone::getClassName() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "PedigreeCharterNone";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
PedigreeCharterAll::PedigreeCharterAll()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
PedigreeCharterAll::~PedigreeCharterAll()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> PedigreeCharterAll::getClassName() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "PedigreeCharterAll";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PedigreeCharterNone::<b><a href="CppDo.htm">do</a></b>ChartLegend(<b><a href="CppConst.htm">const</a></b> BirdHawkDove* bird)<br/>
{<br/>
&nbsp;&nbsp;mPedigree.resize(0);<br/>
&nbsp;&nbsp;mPedigree.push_back(mDefaultText);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PedigreeCharterNone::<b><a href="CppDo.htm">do</a></b>Chart(<b><a href="CppConst.htm">const</a></b> BirdHawkDove* bird)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>PedigreeCharterNone does NOTHING!<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PedigreeCharterAll::<b><a href="CppDo.htm">do</a></b>ChartLegend(<b><a href="CppConst.htm">const</a></b> BirdHawkDove* bird)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pedigreeLegend <a href="CppOperatorAssign.htm">=</a> "ID\tFather\tMother\tPlayHawkAlpha\tPlayHawkBeta";<br/>
&nbsp;&nbsp;mPedigree.push_back(pedigreeLegend);&nbsp;&nbsp;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PedigreeCharterAll::<b><a href="CppDo.htm">do</a></b>Chart(<b><a href="CppConst.htm">const</a></b> BirdHawkDove* bird)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pedigree <a href="CppOperatorAssign.htm">=</a> helper::itoa(bird-&gt;getBirdIndex())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> '\t' <a href="CppOperatorPlus.htm">+</a> helper::itoa(bird-&gt;getIndexFather())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> '\t' <a href="CppOperatorPlus.htm">+</a> helper::itoa(bird-&gt;getIndexMother())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> '\t' <a href="CppOperatorPlus.htm">+</a> helper::ftoa(bird-&gt;getPlayHawkAlpha())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> '\t' <a href="CppOperatorPlus.htm">+</a> helper::ftoa(bird-&gt;getPlayHawkBeta());<br/>
&nbsp;&nbsp;mPedigree.push_back(pedigree);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitRandom.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitRandom.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitRandomH<br/>
<a href="CppDefine.htm">#define</a> UnitRandomH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;math.h&gt;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> rnd<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppLong.htm">long</a></b> <b><a href="CppInt.htm">int</a></b> idum;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> MBIG;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> MSEED;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> MZ;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> FAC;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Returns a uniform random value from 0.0 to 1.0<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> uniform()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> inext,inextp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppLong.htm">long</a></b> ma[56];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> iff=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> mj,mk;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i,ii,k;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (idum &lt; 0 <a href="CppOperatorLogicalOr.htm">||</a> iff <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iff=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mj=MSEED-(idum &lt; 0 ? <a href="CppOperatorMinus.htm">-</a>idum : idum);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mj <a href="CppOperatorModulusAssign.htm">%=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ma[55]=mj;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mk=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=1;i<a href="CppOperatorLessEqual.htm">&lt;=</a>54;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ii=(21*i) <a href="CppOperatorModulus.htm">%</a> 55;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ma[ii]=mk;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mk=mj-mk;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mk &lt; MZ) mk <a href="CppOperatorPlusAssign.htm">+=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mj=ma[ii];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (k=1;k<a href="CppOperatorLessEqual.htm">&lt;=</a>4;k<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=1;i<a href="CppOperatorLessEqual.htm">&lt;=</a>55;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ma[i] <a href="CppOperatorMinusAssign.htm">-=</a> ma[1+(i+30) <a href="CppOperatorModulus.htm">%</a> 55];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ma[i] &lt; MZ) ma[i] <a href="CppOperatorPlusAssign.htm">+=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inext=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inextp=31;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idum=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppOperatorIncrement.htm">++</a>inext <a href="CppOperatorEqual.htm">==</a> 56) inext=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppOperatorIncrement.htm">++</a>inextp <a href="CppOperatorEqual.htm">==</a> 56) inextp=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mj=ma[inext]-ma[inextp];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mj &lt; MZ) mj <a href="CppOperatorPlusAssign.htm">+=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ma[inext]=mj;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mj*FAC;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> gasdev()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> iset=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> gset;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> fac,r,v1,v2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDouble.htm">double</a></b> uniform();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;uniform();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp;(iset <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v1=2.0*uniform()-1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v2=2.0*uniform()-1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r=v1*v1+v2*v2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (r <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fac=sqrt(-2.0*log(r)/r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gset=v1*fac;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iset=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v2*fac;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iset=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> gset;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sets the seed <b><a href="CppFor.htm">for</a></b> the <a href="CppRandomNumber.htm">random number</a> sequence<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> SetSeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; seed)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;idum <a href="CppOperatorAssign.htm">=</a> <b><a href="CppLong.htm">long</a></b>(-<a href="CppStdAbs.htm">std::abs</a>(seed));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=0; i&lt;100; i<a href="CppOperatorIncrement.htm">++</a>) uniform();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Returns a <a href="CppRandomNumber.htm">random number</a> from a gaussian distrubution<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> normal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; mean,<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <a href="CppStd.htm">std</a>ev)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> gasdev()*<a href="CppStd.htm">std</a>ev <a href="CppOperatorPlus.htm">+</a> mean;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Returns a random <a href="CppInt.htm">integer</a> from 0 to N<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> RandomNumber(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; N)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> out;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x=<a href="CppStdFloor.htm">std::floor</a>(uniform()*N);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;out=<b><a href="CppInt.htm">int</a></b> (x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> out;<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitRandom.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitRandom.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitRandom.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppLong.htm">long</a></b> <b><a href="CppInt.htm">int</a></b> rnd::idum;<br/>
<b><a href="CppInt.htm">int</a></b> rnd::MBIG&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1000000000;<br/>
<b><a href="CppInt.htm">int</a></b> rnd::MSEED <a href="CppOperatorAssign.htm">=</a> 161803398;<br/>
<b><a href="CppInt.htm">int</a></b> rnd::MZ <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<b><a href="CppDouble.htm">double</a></b> rnd::FAC <a href="CppOperatorAssign.htm">=</a> (1.0/MBIG);<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitResults.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitResults.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitResultsH<br/>
<a href="CppDefine.htm">#define</a> UnitResultsH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><b><a href="CppClass.htm">class</a></b> Results is a <a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
<b><a href="CppClass.htm">class</a></b> Results : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Results* <a href="CppInstance.htm">instance</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><b><a href="CppVoid.htm">void</a></b> tallySingleFemales(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nSingleFemales);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> tallySingleMales(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nSingleMales);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> tallyCouples(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nCouples);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> tallyMigrants(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nMigrants);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> tallyDeath(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nDeath);<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; mNsingleFemales;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; mNsingleMales;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; mNcouples;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; mNmigrants;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; mNdead;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; mLog;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> log(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> log(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b>* s); <a href="CppComment.htm">//</a>For non-string compilation<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> reset();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;Results&gt;;<br/>
&nbsp;&nbsp;Results();<br/>
&nbsp;&nbsp;~Results();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;Results&gt; mpInstance;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitResults.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitResults.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitResults.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;Results&gt; Results::mpInstance(<b><a href="CppNew.htm">new</a></b> Results);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Results::Results()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Results::~Results()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Results* Results::<a href="CppInstance.htm">instance</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mpInstance.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mpInstance.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Results::log(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;mLog.push_back(s);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Results::log(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b>* s)<br/>
{<br/>
&nbsp;&nbsp;mLog.push_back(s);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Results::reset()<br/>
{<br/>
&nbsp;&nbsp;mNsingleFemales.resize(0);<br/>
&nbsp;&nbsp;mNsingleMales.resize(0);<br/>
&nbsp;&nbsp;mNcouples.resize(0);<br/>
&nbsp;&nbsp;mNmigrants.resize(0);<br/>
&nbsp;&nbsp;mNdead.resize(0);<br/>
&nbsp;&nbsp;mLog.resize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitSimulation.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitSimulation.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSimulationH<br/>
<a href="CppDefine.htm">#define</a> UnitSimulationH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "UnitEnumSimulationType.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> SimulationParameters;<br/>
<b><a href="CppClass.htm">class</a></b> SimulationTypeBase;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> Simulation : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;Simulation(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt;&amp; params);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> execute();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setSimulationType(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt;&amp; params);<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SimulationTypeBase&gt; mSimulationType; <a href="CppComment.htm">//</a>Strategy<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitSimulation.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitSimulation.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Pre<a href="CppCompile.htm">compile</a>d headers<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">assert</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulationParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulationType.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppException.htm">Exception</a>s.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulation.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Simulation::Simulation(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt;&amp; params)<br/>
{<br/>
&nbsp;&nbsp;setSimulationType(params);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::execute()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mSimulationType.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSimulationType-&gt;execute();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b>(NoCouples<a href="CppException.htm">Exception</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No problem<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::setSimulationType(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt;&amp; params)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(params.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(params-&gt;mEnumSimulationType)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> cartoonModel: mSimulationType.reset(<b><a href="CppNew.htm">new</a></b> SimulationTypeCartoonModel(params)); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitSimulationFunctions.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitSimulationFunctions.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSimulation<a href="CppFunction.htm">Function</a>sH<br/>
<a href="CppDefine.htm">#define</a> UnitSimulation<a href="CppFunction.htm">Function</a>sH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppNamespace.htm">namespace</a></b> simFunc<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> logisticEquation(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; alpha, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; beta);<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitSimulationFunctions.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitSimulationFunctions.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulation<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;math&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppExceptionH.htm">exception</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> &lt;vcl&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppNamespace.htm">namespace</a></b> simFunc<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> logisticEquation(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; alpha, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; beta)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(alpha &gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> alpha &lt; 1000.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(beta&nbsp;&nbsp;&gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> beta&nbsp;&nbsp;&lt; 1000.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(x&nbsp;&nbsp;&nbsp;&nbsp; &gt; <a href="CppOperatorMinus.htm">-</a>1000.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x&nbsp;&nbsp;&nbsp;&nbsp; &lt; 1000.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> numerator <a href="CppOperatorAssign.htm">=</a> <a href="CppStdExp.htm">std::exp</a>( (alpha*x)+beta );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> denominator <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorPlus.htm">+</a> <a href="CppStdExp.htm">std::exp</a>( (alpha*x) <a href="CppOperatorPlus.htm">+</a> beta );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(denominator<a href="CppOperatorNotEqual.htm">!=</a>0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (numerator/denominator);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((alpha*x) <a href="CppOperatorPlus.htm">+</a> beta ) &lt; 1000.000) <b><a href="CppReturn.htm">return</a></b> 0.0; <a href="CppComment.htm">//</a>You approch 0.0/(1.0+0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((alpha*x) <a href="CppOperatorPlus.htm">+</a> beta ) &lt; 0.001) <b><a href="CppReturn.htm">return</a></b> 0.5; <a href="CppComment.htm">//</a>You approach 1.0/(1.0+1.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>You approach INF/(1.0+INF)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1.0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
};<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitSimulationParameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitSimulationParameters.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSimulationParametersH<br/>
<a href="CppDefine.htm">#define</a> UnitSimulationParametersH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumSimulationType.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumFemaleChoice.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumMigration.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumBirdType.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumMatingSystem.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdGeneralParameters;<br/>
<b><a href="CppClass.htm">class</a></b> BirdHawkDoveParameters;<br/>
<b><a href="CppClass.htm">class</a></b> BreedingParameters;<br/>
<b><a href="CppClass.htm">class</a></b> InitialBirdNumbers;<br/>
<b><a href="CppClass.htm">class</a></b> DisplayOptions;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> SimulationParameters : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;SimulationParameters();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General parameters<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mNgenerations;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General <b><a href="CppEnum.htm">enum</a></b>s<br/>
&nbsp;&nbsp;EnumSimulationType mEnumSimulationType;<br/>
&nbsp;&nbsp;EnumFemaleChoice mEnumFemaleChoice;<br/>
&nbsp;&nbsp;EnumMigration mEnumMigration;<br/>
&nbsp;&nbsp;EnumBirdType mEnumBirdType;<br/>
&nbsp;&nbsp;EnumMatingSystem mEnumMatingSystem;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Specials<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdGeneralParameters&gt; mBirdGeneralParameters;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdHawkDoveParameters&gt; mBirdHawkDoveParameters;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;InitialBirdNumbers&gt; mInitialBirdNumbers;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BreedingParameters&gt; mBreedingParameters;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;DisplayOptions&gt; mDisplayOptions;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppMemberFunction.htm">Member function</a>s<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; getText() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> saveToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> loadFromFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitSimulationParameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitSimulationParameters.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulationParameters.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdGeneralParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdHawkDoveParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitInitialBirdNumbers.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBreedingParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayOptions.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SimulationParameters::SimulationParameters() :<br/>
&nbsp;&nbsp;mNgenerations(1000),<br/>
&nbsp;&nbsp;mEnumSimulationType(cartoonModel),<br/>
&nbsp;&nbsp;mEnumFemaleChoice(winnerFight2males),<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>numBreeding(singleGeneration),<br/>
&nbsp;&nbsp;mEnumMigration(allSurvive),<br/>
&nbsp;&nbsp;mEnumBirdType(hawkDove),<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mBirdHawkDoveParameters(<b><a href="CppNew.htm">new</a></b> BirdHawkDoveParameters),<br/>
&nbsp;&nbsp;mInitialBirdNumbers(<b><a href="CppNew.htm">new</a></b> InitialBirdNumbers),<br/>
&nbsp;&nbsp;mDisplayOptions(<b><a href="CppNew.htm">new</a></b> DisplayOptions)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mBreedingParameters(<b><a href="CppNew.htm">new</a></b> RearingParameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirdHawkDoveParameters.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; SimulationParameters::getText() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text;<br/>
&nbsp;&nbsp;text.push_back("Ngenerations: " <a href="CppOperatorPlus.htm">+</a> helper::itoa(mNgenerations) );<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>SimulationType<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumSimulationType<a href="CppConvert.htm">Convert</a>er * conv <a href="CppOperatorAssign.htm">=</a> EnumSimulationType<a href="CppConvert.htm">Convert</a>er::<a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;text.push_back("SimulationType: " <a href="CppOperatorPlus.htm">+</a> conv-&gt;toString(mEnumSimulationType));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>FemaleChoice<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er * conv <a href="CppOperatorAssign.htm">=</a> EnumFemaleChoice<a href="CppConvert.htm">Convert</a>er::<a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;text.push_back("FemaleChoice: " <a href="CppOperatorPlus.htm">+</a> conv-&gt;toString(mEnumFemaleChoice));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Migration<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumMigration<a href="CppConvert.htm">Convert</a>er * conv <a href="CppOperatorAssign.htm">=</a> EnumMigration<a href="CppConvert.htm">Convert</a>er::<a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;text.push_back("Migration: " <a href="CppOperatorPlus.htm">+</a> conv-&gt;toString(mEnumMigration));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>BirdType<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumBirdType<a href="CppConvert.htm">Convert</a>er * conv <a href="CppOperatorAssign.htm">=</a> EnumBirdType<a href="CppConvert.htm">Convert</a>er::<a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;text.push_back("BirdType: " <a href="CppOperatorPlus.htm">+</a> conv-&gt;toString(mEnumBirdType));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>BirdHawkDove parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; temp <a href="CppOperatorAssign.htm">=</a> mBirdHawkDoveParameters-&gt;getText();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;helper::add(text,temp);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>DisplayOptions parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; temp <a href="CppOperatorAssign.htm">=</a> mDisplayOptions-&gt;getText();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;helper::add(text,temp);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> text;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitSimulationType.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitSimulationType.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSimulationTypeH<br/>
<a href="CppDefine.htm">#define</a> UnitSimulationTypeH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> SimulationParameters;<br/>
<b><a href="CppClass.htm">class</a></b> SingleMalePool;<br/>
<b><a href="CppClass.htm">class</a></b> SingleFemalePool;<br/>
<b><a href="CppClass.htm">class</a></b> CouplePool;<br/>
<b><a href="CppClass.htm">class</a></b> MigrationPool;<br/>
<b><a href="CppClass.htm">class</a></b> DeadPool;<br/>
<b><a href="CppClass.htm">class</a></b> MaleCompetitionBase;<br/>
<b><a href="CppClass.htm">class</a></b> FemaleChoiceBase;<br/>
<b><a href="CppClass.htm">class</a></b> BreedingBase;<br/>
<b><a href="CppClass.htm">class</a></b> MigrationBase;<br/>
<b><a href="CppClass.htm">class</a></b> BirdFactoryBase;<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumFemaleChoice.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumMigration.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumBirdType.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitEnumMatingSystem.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> SimulationTypeBase : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;SimulationTypeBase();<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~SimulationTypeBase() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> execute() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppInitialize.htm">initialize</a>Pools();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleMalePool&nbsp;&nbsp;&gt; mSingleMalePool;<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;SingleFemalePool&gt; mSingleFemalePool;<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;CouplePool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt; mCouplePool;<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;MigrationPool&nbsp;&nbsp; &gt; mMigrationPool;<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&nbsp;&nbsp; &gt; mDeadPool;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt; mSimulationParameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;FemaleChoiceBase&gt; mFemaleChoice;<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;BreedingBase&gt; mBreeding;<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;MigrationBase&gt; mMigration;<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;BirdFactoryBase&gt; mBirdFactory;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setFemaleChoice(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumFemaleChoice&amp; femaleChoice,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumMatingSystem&amp; matingSystem);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setBreeding();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setMigration(<b><a href="CppConst.htm">const</a></b> EnumMigration&amp; migration);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setBirdType(<b><a href="CppConst.htm">const</a></b> EnumBirdType&amp; birdType);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> setMaleCompetition(<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> SimulationTypeCartoonModel : <b><a href="CppPublic.htm">public</a></b> SimulationTypeBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;SimulationTypeCartoonModel(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt;&amp; simulationParameters);<br/>
&nbsp;&nbsp;~SimulationTypeCartoonModel() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> execute();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitSimulationType.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitSimulationType.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulationType.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulationParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitInitialBirdNumbers.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBreedingParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSingleMalePool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSingleFemalePool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitCouplePool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMigrationPool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDeadPool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFemaleChoice.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBreeding.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMigration.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitResults.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdFactory.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppException.htm">Exception</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitWeather.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBirdWatcher.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDisplayOptions.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SimulationTypeBase::SimulationTypeBase()<br/>
&nbsp;&nbsp;: mSingleMalePool(<b><a href="CppNew.htm">new</a></b> SingleMalePool),<br/>
&nbsp;&nbsp;mSingleFemalePool(<b><a href="CppNew.htm">new</a></b> SingleFemalePool),<br/>
&nbsp;&nbsp;mCouplePool(<b><a href="CppNew.htm">new</a></b> CouplePool),<br/>
&nbsp;&nbsp;mMigrationPool(<b><a href="CppNew.htm">new</a></b> MigrationPool),<br/>
&nbsp;&nbsp;mDeadPool(<b><a href="CppNew.htm">new</a></b> DeadPool)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mSingleMalePool.reset(<b><a href="CppNew.htm">new</a></b> SingleMalePool);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mSingleFemalePool.reset(<b><a href="CppNew.htm">new</a></b> SingleFemalePool);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mCouplePool.reset(<b><a href="CppNew.htm">new</a></b> CouplePool);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mMigrationPool.reset(<b><a href="CppNew.htm">new</a></b> MigrationPool);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationTypeBase::setFemaleChoice(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumFemaleChoice&amp; femaleChoice,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumMatingSystem&amp; matingSystem)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(femaleChoice)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> winnerFight2males: mFemaleChoice.reset(<b><a href="CppNew.htm">new</a></b> FemaleChoiceWinnerFight2males(matingSystem));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(!"Shouldn't get here: Unimplemented value of femaleChoice");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mFemaleChoice.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Placeholder <b><a href="CppFor.htm">for</a></b> multiple types of Breeding<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationTypeBase::setBreeding()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppSwitch.htm">switch</a></b>(breeding)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> singleGeneration:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBreeding.reset(<b><a href="CppNew.htm">new</a></b> BreedingSingleGeneration);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">Assert</a>(!"Shouldn't get here"); <a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBreeding.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationTypeBase::setMigration(<b><a href="CppConst.htm">const</a></b> EnumMigration&amp; migration)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(migration)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> allSurvive: mMigration.reset(<b><a href="CppNew.htm">new</a></b> MigrationAllSurvive);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">Assert</a>(!"Shouldn't get here"); <a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mMigration.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationTypeBase::setBirdType(<b><a href="CppConst.htm">const</a></b> EnumBirdType&amp; birdType)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(birdType)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> hawkDove: mBirdFactory.reset(<b><a href="CppNew.htm">new</a></b> BirdFactoryHawkDove(mSimulationParameters-&gt;mBirdGeneralParameters,mSimulationParameters-&gt;mBirdHawkDoveParameters));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">Assert</a>(!"Shouldn't get here"); <a href="CppStdExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirdFactory.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirdFactory-&gt;getClassName()<a href="CppOperatorEqual.htm">==</a>"BirdFactoryHawkDove");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationTypeBase::<a href="CppInitialize.htm">initialize</a>Pools()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mSimulationParameters.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mSimulationParameters-&gt;mInitialBirdNumbers.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSingleFemales <a href="CppOperatorAssign.htm">=</a> mSimulationParameters-&gt;mInitialBirdNumbers-&gt;mNinitialSingleFemales;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSingleMales&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> mSimulationParameters-&gt;mInitialBirdNumbers-&gt;mNinitialSingleMales;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nCouples&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> mSimulationParameters-&gt;mInitialBirdNumbers-&gt;mNinitialCouples;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nMigrants&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mSimulationParameters-&gt;mInitialBirdNumbers-&gt;mNinitialMigrants;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nDead&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mSimulationParameters-&gt;mInitialBirdNumbers-&gt;mNinitialDead;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSingleFemales; <a href="CppOperatorIncrement.htm">++</a>i) { <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; female <a href="CppOperatorAssign.htm">=</a> mBirdFactory-&gt;createBird(); mSingleFemalePool-&gt;addFemale(female); }<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSingleMales&nbsp;&nbsp;; <a href="CppOperatorIncrement.htm">++</a>i) { <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; male&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> mBirdFactory-&gt;createBird(); mSingleMalePool-&gt;addMale(male);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(nCouples<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(nMigrants<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(nDead<a href="CppOperatorEqual.htm">==</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SimulationTypeCartoonModel::SimulationTypeCartoonModel(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SimulationParameters&gt;&amp; simulationParameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(simulationParameters.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
&nbsp;&nbsp;mSimulationParameters <a href="CppOperatorAssign.htm">=</a> simulationParameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(simulationParameters.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mSimulationParameters.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mSimulationParameters.get() <a href="CppOperatorEqual.htm">==</a> simulationParameters.get());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumBirdType birdType <a href="CppOperatorAssign.htm">=</a> mSimulationParameters-&gt;mEnumBirdType;<br/>
&nbsp;&nbsp;setBirdType(birdType);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumFemaleChoice femaleChoice <a href="CppOperatorAssign.htm">=</a> mSimulationParameters-&gt;mEnumFemaleChoice;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumMatingSystem matingSystem <a href="CppOperatorAssign.htm">=</a> mSimulationParameters-&gt;mEnumMatingSystem;<br/>
&nbsp;&nbsp;setFemaleChoice(femaleChoice,matingSystem);<br/>
<br/>
&nbsp;&nbsp;setBreeding();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumMigration migration <a href="CppOperatorAssign.htm">=</a> mSimulationParameters-&gt;mEnumMigration;<br/>
&nbsp;&nbsp;setMigration(migration);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mFemaleChoice.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBreeding.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBirdFactory.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mMigration.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationTypeCartoonModel::execute()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mSimulationParameters.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mSingleFemalePool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mSingleMalePool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mCouplePool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mMigrationPool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mDeadPool.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reset birdwatcher<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be reset BEFORE <a href="CppAny.htm">any</a> bird <a href="CppConstructor.htm">constructor</a> is called<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>i.e. before <a href="CppInitialize.htm">initialize</a>Pools();<br/>
&nbsp;&nbsp;BirdWatcher * birdWatcher <a href="CppOperatorAssign.htm">=</a> BirdWatcher::<a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(birdWatcher<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;birdWatcher-&gt;reset();<br/>
&nbsp;&nbsp;birdWatcher-&gt;setPedigreeCharter(mSimulationParameters-&gt;mDisplayOptions-&gt;mPedigreeCharter);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reset weather<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be reset BEFORE <a href="CppAny.htm">any</a> bird <a href="CppConstructor.htm">constructor</a> is called,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>otherwise birdWatcher will give an old (too high, i.e. non-zero) <a href="CppTime.htm">Time</a>Unit to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>the first created birds<br/>
&nbsp;&nbsp;Weather * weather <a href="CppOperatorAssign.htm">=</a> Weather::<a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(weather<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;weather-&gt;reset();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppInitialize.htm">Initialize</a> the pools with birds<br/>
&nbsp;&nbsp;<a href="CppInitialize.htm">initialize</a>Pools();<br/>
<br/>
<br/>
&nbsp;&nbsp;Results * results <a href="CppOperatorAssign.htm">=</a> Results::<a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(results<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;results-&gt;reset();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nGenerations <a href="CppOperatorAssign.htm">=</a> mSimulationParameters-&gt;mNgenerations;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; weather-&gt;get<a href="CppTime.htm">Time</a>Unit() &lt; nGenerations; weather-&gt;next<a href="CppTime.htm">Time</a>Unit())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;helper::dot("Starting " <a href="CppOperatorPlus.htm">+</a> helper::itoa(weather-&gt;get<a href="CppTime.htm">Time</a>Unit()) <a href="CppOperatorPlus.htm">+</a> "th generation");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;helper::dot("Size of mean Condition heritable: " <a href="CppOperatorPlus.htm">+</a> helper::itoa(birdWatcher-&gt;getMeansConditionHeritable().size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;results-&gt;mNsingleFemales.push_back( mSingleFemalePool-&gt;getSize());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;results-&gt;mNsingleMales.push_back( mSingleFemalePool-&gt;getSize());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;results-&gt;mNcouples.push_back( mCouplePool-&gt;getSize());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;results-&gt;mNmigrants.push_back( mMigrationPool-&gt;getSize());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;results-&gt;mNdead.push_back( mDeadPool-&gt;getSize());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mFemaleChoice.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Single males and single females are in their pools<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Female choice, creates individuals in CouplePool<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> noError <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(noError <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFemaleChoice-&gt;choose(mSingleFemalePool,mSingleMalePool,mCouplePool,mDeadPool);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b>(NoFemale<a href="CppException.htm">Exception</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;noError <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>helper::dot("Female choice ended because no females were left");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b>(NoMale<a href="CppException.htm">Exception</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;noError <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>helper::dot("Female choice ended because no males were left");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mSingleFemalePool-&gt;isEmpty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mSingleMalePool-&gt;isEmpty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Now we have a CouplePool filled with couples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>When breeding, couples produce offspring.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Also, some parents die<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mBreeding.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mBreeding-&gt;breed(mCouplePool,mMigrationPool,mDeadPool,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationParameters-&gt;mBreedingParameters-&gt;mNfemaleOffspring,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationParameters-&gt;mBreedingParameters-&gt;mNmaleOffspring);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Now we have a filled migrationpool<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mMigration.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMigration-&gt;migration(mMigrationPool,mSingleFemalePool,mSingleMalePool,mDeadPool);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>And now we have single males and females again!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitSingleFemalePool.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitSingleFemalePool.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSingleFemalePoolH<br/>
<a href="CppDefine.htm">#define</a> UnitSingleFemalePoolH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdBase;<br/>
<b><a href="CppClass.htm">class</a></b> DeadPool;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> SingleFemalePool : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;SingleFemalePool();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> addFemale(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; getFemale();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> shuffle();<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isEmpty() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>Empty(<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getSize() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; &gt; mFemales;<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitSingleFemalePool.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitSingleFemalePool.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitSingleFemalePool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDeadPool.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SingleFemalePool::SingleFemalePool()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SingleFemalePool::addFemale(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; female)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> __HACK_RICHEL_879286486293<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (female.use_count()<a href="CppOperatorNotEqual.htm">!=</a>2) ShowMessage(female.use_count());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
<br/>
&nbsp;&nbsp;mFemales.push_back( female );<br/>
&nbsp;&nbsp;female.reset();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mFemales.back().get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mFemales.back().use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; SingleFemalePool::getFemale()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mFemales.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; female(mFemales.back());<br/>
&nbsp;&nbsp;mFemales.pop_back();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> female;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SingleFemalePool::shuffle()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(mFemales.begin(),mFemales.end());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> SingleFemalePool::isEmpty() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mFemales.empty();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> SingleFemalePool::getSize() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mFemales.size();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SingleFemalePool::<b><a href="CppDo.htm">do</a></b>Empty(<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(mFemales.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; female <a href="CppOperatorAssign.htm">=</a> mFemales.back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFemales.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;deadPool-&gt;addFemale(female);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(female.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitSingleMalePool.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitSingleMalePool.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSingleMalePoolH<br/>
<a href="CppDefine.htm">#define</a> UnitSingleMalePoolH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppNoncopyable.htm">noncopyable</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> BirdBase;<br/>
<b><a href="CppClass.htm">class</a></b> DeadPool;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> SingleMalePool : <b><a href="CppPublic.htm">public</a></b> <a href="CppBoostNoncopyable.htm">boost::noncopyable</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;SingleMalePool();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> addMale(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; getMale();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> shuffle();<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isEmpty() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>Empty(<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getSize() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt; <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; &gt; mMales;<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitSingleMalePool.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitSingleMalePool.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitSingleMalePool.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDeadPool.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
SingleMalePool::SingleMalePool()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SingleMalePool::addMale(<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;BirdBase&gt; male)<br/>
<b><a href="CppVoid.htm">void</a></b> SingleMalePool::addMale(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt;&amp; male)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
<br/>
&nbsp;&nbsp;mMales.push_back( male );<br/>
&nbsp;&nbsp;male.reset();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mMales.back().get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mMales.back().use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; SingleMalePool::getMale()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;isEmpty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; male(mMales.back());<br/>
&nbsp;&nbsp;mMales.pop_back();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.use_count()<a href="CppOperatorEqual.htm">==</a>2); <a href="CppComment.htm">//</a>One copy is stored in BirdWatcher<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> male;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SingleMalePool::shuffle()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(mMales.begin(),mMales.end());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> SingleMalePool::isEmpty() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mMales.empty();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> SingleMalePool::getSize() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mMales.size();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SingleMalePool::<b><a href="CppDo.htm">do</a></b>Empty(<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;DeadPool&gt;&amp; deadPool)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(mMales.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BirdBase&gt; male <a href="CppOperatorAssign.htm">=</a> mMales.back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMales.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;deadPool-&gt;addMale(male);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(male.get()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitWeather.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitWeather.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitWeatherH<br/>
<a href="CppDefine.htm">#define</a> UnitWeatherH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><b><a href="CppClass.htm">class</a></b> Weather is a <a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Weather<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Weather* <a href="CppInstance.htm">instance</a>();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> next<a href="CppTime.htm">Time</a>Unit();<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> get<a href="CppTime.htm">Time</a>Unit() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> reset();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;Weather();<br/>
&nbsp;&nbsp;~Weather();<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;Weather&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;Weather&gt; mpInstance;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m<a href="CppTime.htm">Time</a>Unit;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> m<a href="CppConstructor.htm">Constructor</a>Called;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/UnitWeather.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/UnitWeather.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitWeather.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">Assert</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;Weather&gt; Weather::mpInstance(<b><a href="CppNew.htm">new</a></b> Weather);<br/>
<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;Weather&gt; Weather::mpInstance(0);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Weather::m<a href="CppConstructor.htm">Constructor</a>Called <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Weather::Weather()<br/>
&nbsp;&nbsp;: m<a href="CppTime.htm">Time</a>Unit(0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m<a href="CppConstructor.htm">Constructor</a>Called;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">Assert</a>(m<a href="CppConstructor.htm">Constructor</a>Called<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Weather::~Weather()<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Weather* Weather::<a href="CppInstance.htm">instance</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mpInstance.get()<a href="CppOperatorEqual.htm">==</a>0) mpInstance.reset(<b><a href="CppNew.htm">new</a></b> Weather);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">Assert</a>(mpInstance.get()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mpInstance.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Weather::next<a href="CppTime.htm">Time</a>Unit()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m<a href="CppTime.htm">Time</a>Unit;<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;helper::dot("<a href="CppTime.htm">Time</a>Unit: ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;helper::dot(m<a href="CppTime.htm">Time</a>Unit);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> Weather::get<a href="CppTime.htm">Time</a>Unit() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m<a href="CppTime.htm">Time</a>Unit;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Weather::reset()<br/>
{<br/>
&nbsp;&nbsp;m<a href="CppTime.htm">Time</a>Unit <a href="CppOperatorAssign.htm">=</a> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/assert.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/assert.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> Bilderbikkel<a href="CppAssert.htm">Assert</a>H<br/>
<a href="CppDefine.htm">#define</a> Bilderbikkel<a href="CppAssert.htm">Assert</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;Dialogs.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfdef.htm">#ifdef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> <a href="CppAssert.htm">Assert</a>(x) ((<b><a href="CppVoid.htm">void</a></b>)0)<br/>
<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> <a href="CppAssert.htm">Assert</a>(x) \<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (! (x)) \<br/>
&nbsp;&nbsp;{ \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ShowMessage("ERROR!! <a href="CppAssert.htm">Assert</a>ion "<a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String (#x) <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" failed\n on line " <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(__LINE__) <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" in the <a href="CppFunction.htm">function</a> " <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(__FUNC__) <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n in file " <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(__<a href="CppCfile.htm">FILE</a>__)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectThorVeen/assert.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectThorVeen/assert.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Thor Veen Project, simulation to investigate honest signalling<br/>
&nbsp;&nbsp;Copyright (C) 2006&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAssert.htm">assert</a>.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
