<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>VanDenBogaart</title>
  <meta name="description" content="C++ VanDenBogaart"/>
  <meta name="keywords" content="C++ VanDenBogaart "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ProjectVanDenBogaart.htm">VanDenBogaart</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.637 at Thu May  1 21:05:44 2014
 -->
<p><a href="ProjectProjectVanDenBogaart.htm">Project Van Den Bogaart</a> is the former name of the <a href="ProjectBrainweaver.htm">Brainweaver</a> <a href="Projects.htm">project</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li>For current downloads, go to <a href="ProjectBrainweaver.htm">Brainweaver</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Older downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="ProjectVanDenBogaart_0_27.png">View a screenshot of 'Project Van Den Bogaart' (version 0.27)(png)</a></li>
  <li><img src="PicWine.png" alt="Wine"/> <a href="ProjectVanDenBogaart_0_27Wine.png">View a screenshot of 'Project Van Den Bogaart' (version 0.27)(png)</a></li>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="ProjectVanDenBogaart_0_26.png">View a screenshot of 'Project Van Den Bogaart' (version 0.26)(png)</a></li>
  <li><img src="PicWine.png" alt="Wine"/> <a href="ProjectVanDenBogaart_0_26Wine.png">View a screenshot of 'Project Van Den Bogaart' (version 0.26)(png)</a></li>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="ProjectVanDenBogaart_0_25.png">View a screenshot of 'Project Van Den Bogaart' (version 0.25)(png)</a></li>
  <li><img src="PicWine.png" alt="Wine"/> <a href="ProjectVanDenBogaart_0_25Wine.png">View a screenshot of 'Project Van Den Bogaart' (version 0.25)(png)</a></li>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="ProjectVanDenBogaart_0_24.png">View a screenshot of 'Project Van Den Bogaart' (version 0.24)(png)</a></li>
  <li><img src="PicWine.png" alt="Wine"/> <a href="ProjectVanDenBogaart_0_24Wine.png">View a screenshot of 'Project Van Den Bogaart' (version 0.24)(png)</a></li>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="ProjectVanDenBogaart_0_23.png">View a screenshot of 'Project Van Den Bogaart' (version 0.23)(png)</a></li>
  <li><img src="PicWine.png" alt="Wine"/> <a href="ProjectVanDenBogaart_0_23Wine.png">View a screenshot of 'Project Van Den Bogaart' (version 0.23)(png)</a></li>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="ProjectVanDenBogaart_0_22.png">View a screenshot of 'Project Van Den Bogaart' (version 0.22)(png)</a></li>
  <li><img src="PicWine.png" alt="Wine"/> <a href="ProjectVanDenBogaart_0_22Wine.png">View a screenshot of 'Project Van Den Bogaart' (version 0.22)(png)</a></li>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="ProjectVanDenBogaart_0_20.png">View a screenshot of 'Project Van Den Bogaart' (version 0.20)(png)</a></li>
  <li><img src="PicWine.png" alt="Wine"/> <a href="ProjectVanDenBogaart_0_20Wine.png">View a screenshot of 'Project Van Den Bogaart' (version 0.20)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_19.png">View a screenshot of 'Project Van Den Bogaart' (version 0.19)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_18.png">View a screenshot of 'Project Van Den Bogaart' (version 0.18)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_17.png">View a screenshot of 'Project Van Den Bogaart' (version 0.17)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_16.png">View a screenshot of 'Project Van Den Bogaart' (version 0.16)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_15.png">View a screenshot of 'Project Van Den Bogaart' (version 0.15)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_14.png">View a screenshot of 'Project Van Den Bogaart' (version 0.14)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_13.png">View a screenshot of 'Project Van Den Bogaart' (version 0.13)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_12.png">View a screenshot of 'Project Van Den Bogaart' (version 0.12)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_11.png">View a screenshot of 'Project Van Den Bogaart' (version 0.11)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_10.png">View a screenshot of 'Project Van Den Bogaart' (version 0.10)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_9.png">View a screenshot of 'Project Van Den Bogaart' (version 0.9)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_8.png">View a screenshot of 'Project Van Den Bogaart' (version 0.8)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_7.png">View a screenshot of 'Project Van Den Bogaart' (version 0.7)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_6.png">View a screenshot of 'Project Van Den Bogaart' (version 0.6)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_5.png">View a screenshot of 'Project Van Den Bogaart' (version 0.5)(png)</a></li>
  <li><a href="ProjectVanDenBogaart_0_4.png">View a screenshot of 'Project Van Den Bogaart' (version 0.4)(png)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicGui.png" alt="GUI"/> <a href="CppGuiApplication.htm">GUI application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 5.2.1 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ProjectVanDenBogaart/ProjectVanDenBogaart.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/ProjectVanDenBogaart.pro" border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core gui<br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<br/>
<a href="CppQmakeDefines.htm">DEFINES</a> += PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
#<a href="CppQmakeDefines.htm">DEFINES</a> += PVDB_KEEP_NAMESPACE_IN_CPP_FILES<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWerror.htm">-Werror</a> <a href="CppWextra.htm">-Wextra</a> #<a href="CppWeffcpp.htm">-Weffc++</a><br/>
<br/>
#<a href="CppQmakeLibs.htm">LIBS</a> += <a href="CppDate_Time.htm">-lboost_date_time</a> #Do not use Boost.date_time as crosscompiler cannot find it<br/>
<br/>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppFuzzy_equal_to.htm">CppFuzzy_equal_to</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtArrowItem.htm">CppQtArrowItem</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtHideAndShowDialog.htm">CppQtHideAndShowDialog</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtKeyboardFriendlyGraphicsView.htm">CppQtKeyboardFriendlyGraphicsView</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtLabeledQuadBezierArrowItem.htm">CppQtLabeledQuadBezierArrowItem</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPathArrowItem.htm">CppQtPathArrowItem</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuadBezierArrowItem.htm">CppQtQuadBezierArrowItem</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtRoundedEditRectItem.htm">CppQtRoundedEditRectItem</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtRoundedRectItem.htm">CppQtRoundedRectItem</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtRoundedTextRectItem.htm">CppQtRoundedTextRectItem</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtScopedDisable.htm">CppQtScopedDisable</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a> \<br/>
&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolStyleSheetSetter.htm">ToolStyleSheetSetter</a> \<br/>
&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a> \<br/>
&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a> \<br/>
&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">about</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtArrowItem.htm">CppQtArrowItem</a>/<a href="CppQtArrowItem.htm">qtarrowitem</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtHideAndShowDialog.htm">CppQtHideAndShowDialog</a>/<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtKeyboardFriendlyGraphicsView.htm">CppQtKeyboardFriendlyGraphicsView</a>/<a href="CppQtKeyboardFriendlyGraphicsView.htm">qtkeyboardfriendlygraphicsview</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtLabeledQuadBezierArrowItem.htm">CppQtLabeledQuadBezierArrowItem</a>/<a href="CppQtLabeledQuadBezierArrowItem.htm">qtlabeledquadbezierarrowitem</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPathArrowItem.htm">CppQtPathArrowItem</a>/<a href="CppQtPathArrowItem.htm">qtpatharrowitem</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuadBezierArrowItem.htm">CppQtQuadBezierArrowItem</a>/<a href="CppQtQuadBezierArrowItem.htm">qtquadbezierarrowitem</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtRoundedEditRectItem.htm">CppQtRoundedEditRectItem</a>/<a href="CppQtRoundedEditRectItem.htm">qtroundededitrectitem</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtRoundedRectItem.htm">CppQtRoundedRectItem</a>/<a href="CppQtRoundedRectItem.htm">qtroundedrectitem</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtRoundedTextRectItem.htm">CppQtRoundedTextRectItem</a>/<a href="CppQtRoundedTextRectItem.htm">qtroundedtextrectitem</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbcluster.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbclusterfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbcompetency.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbconcept.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbconceptfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbconceptmap.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbconceptmapfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbedge.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbedgefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbexample.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbexamplefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbexamples.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbexamplesfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbfilefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbhelper.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbhints.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbmenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbnode.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbnodefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbassessormenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbbrushfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcenternodeitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbclusterdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcluster<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcompetency.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconcepteditdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptmapdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptmapdisplay<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptmapedit<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptmapitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptmaprate<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptmap<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcreateassessmentcompletedialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcreateassessmentmenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcreateassessmentpartialdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbdisplayconceptitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbedgeitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbeditconceptitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbexamplesitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbitemhighlighter.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbmenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbnewarrow.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbnodeitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdboverviewdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdboverview<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbrateconceptdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbrateconceptitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbrateconceptmapdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbrateexamplesdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbratingdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbstudentmenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbstudentstartcompletedialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestconceptitemdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestedgeitemdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestnodeitemdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtoolsitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbviewfilesdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbviewtestsdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;test_pvdbcluster.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;test_pvdbconcept.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;test_pvdbconceptmap.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;test_qtpvdbconceptmapedit<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;test_qtpvdbconceptmaprate<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;test_qtpvdbconceptmap<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>/qt<a href="ToolTestQtArrowItems.htm">testqtarrowitems</a><a href="CppMain.htm">main</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>/qt<a href="ToolTestQtArrowItems.htm">testqtarrowitems</a>menudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>/<a href="ToolTestQtArrowItems.htm">testqtarrowitems</a>menudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a>/qt<a href="ToolTestQtRoundedEditRectItem.htm">testqtroundededitrectitem</a><a href="CppMain.htm">main</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a>/qt<a href="ToolTestQtRoundedEditRectItem.htm">testqtroundededitrectitem</a>menudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a>/qt<a href="ToolTestQtRoundedEditRectItem.htm">testqtroundededitrectitem</a><a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a>/<a href="ToolTestQtRoundedEditRectItem.htm">testqtroundededitrectitem</a>menudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a>/qt<a href="ToolTestQtRoundedTextRectItem.htm">testqtroundedtextrectitem</a><a href="CppMain.htm">main</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a>/qt<a href="ToolTestQtRoundedTextRectItem.htm">testqtroundedtextrectitem</a>menudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a>/qt<a href="ToolTestQtRoundedTextRectItem.htm">testqtroundedtextrectitem</a><a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a>/<a href="ToolTestQtRoundedTextRectItem.htm">testqtroundedtextrectitem</a>menudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestconceptmapedit<a href="CppWidget.htm">widget</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestconceptmaprate<a href="CppWidget.htm">widget</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolStyleSheetSetter.htm">ToolStyleSheetSetter</a>/toolstylesheetsetter<a href="CppMain.htm">main</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;test_qtpvdbconceptmapdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbprintratingdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdb<a href="CppAbout.htm">about</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbprintconceptmapdialog.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">about</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppFuzzy_equal_to.htm">CppFuzzy_equal_to</a>/<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtArrowItem.htm">CppQtArrowItem</a>/<a href="CppQtArrowItem.htm">qtarrowitem</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtHideAndShowDialog.htm">CppQtHideAndShowDialog</a>/<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtKeyboardFriendlyGraphicsView.htm">CppQtKeyboardFriendlyGraphicsView</a>/<a href="CppQtKeyboardFriendlyGraphicsView.htm">qtkeyboardfriendlygraphicsview</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtLabeledQuadBezierArrowItem.htm">CppQtLabeledQuadBezierArrowItem</a>/<a href="CppQtLabeledQuadBezierArrowItem.htm">qtlabeledquadbezierarrowitem</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPathArrowItem.htm">CppQtPathArrowItem</a>/<a href="CppQtPathArrowItem.htm">qtpatharrowitem</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuadBezierArrowItem.htm">CppQtQuadBezierArrowItem</a>/<a href="CppQtQuadBezierArrowItem.htm">qtquadbezierarrowitem</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtRoundedEditRectItem.htm">CppQtRoundedEditRectItem</a>/<a href="CppQtRoundedEditRectItem.htm">qtroundededitrectitem</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtRoundedRectItem.htm">CppQtRoundedRectItem</a>/<a href="CppQtRoundedRectItem.htm">qtroundedrectitem</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtRoundedTextRectItem.htm">CppQtRoundedTextRectItem</a>/<a href="CppQtRoundedTextRectItem.htm">qtroundedtextrectitem</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtScopedDisable.htm">CppQtScopedDisable</a>/<a href="CppQtScopedDisable.htm">qtscopeddisable</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a>/<a href="CppTrace.htm">trace</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbclusterfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbcluster.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbcompetency.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbconceptfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbconcept.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbconceptmapfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbconceptmap.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbedgefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbedge.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbexamplefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbexample.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbexamplesfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbexamples.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbfilefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbfwd.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbhelper.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbhints.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbmenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbnodefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdbnode.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbassessormenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbbrushfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcenternodeitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbclusterdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcluster<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcompetency.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconcepteditdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptmapdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptmapdisplay<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptmapedit<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptmapitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptmaprate<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptmap<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcreateassessmentcompletedialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcreateassessmentmenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcreateassessmentpartialdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbdisplayconceptitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbedgeitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbeditconceptitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbexamplesitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbitemhighlighter.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbmenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbnewarrow.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbnodeitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdboverviewdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdboverview<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbrateconceptdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbrateconceptitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbrateconceptmapdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbrateexamplesdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbratingdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbstudentmenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbstudentstartcompletedialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestconceptitemdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestedgeitemdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestnodeitemdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtoolsitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbviewfilesdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbviewtestsdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>/qt<a href="ToolTestQtArrowItems.htm">testqtarrowitems</a><a href="CppMain.htm">main</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>/qt<a href="ToolTestQtArrowItems.htm">testqtarrowitems</a>menudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>/<a href="ToolTestQtArrowItems.htm">testqtarrowitems</a>menudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a>/qt<a href="ToolTestQtRoundedEditRectItem.htm">testqtroundededitrectitem</a><a href="CppMain.htm">main</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a>/qt<a href="ToolTestQtRoundedEditRectItem.htm">testqtroundededitrectitem</a>menudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a>/qt<a href="ToolTestQtRoundedEditRectItem.htm">testqtroundededitrectitem</a><a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a>/<a href="ToolTestQtRoundedEditRectItem.htm">testqtroundededitrectitem</a>menudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a>/qt<a href="ToolTestQtRoundedTextRectItem.htm">testqtroundedtextrectitem</a><a href="CppMain.htm">main</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a>/qt<a href="ToolTestQtRoundedTextRectItem.htm">testqtroundedtextrectitem</a>menudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a>/qt<a href="ToolTestQtRoundedTextRectItem.htm">testqtroundedtextrectitem</a><a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a>/<a href="ToolTestQtRoundedTextRectItem.htm">testqtroundedtextrectitem</a>menudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestconceptmapedit<a href="CppWidget.htm">widget</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestconceptmaprate<a href="CppWidget.htm">widget</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolStyleSheetSetter.htm">ToolStyleSheetSetter</a>/toolstylesheetsetter<a href="CppMain.htm">main</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbprintratingdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdb<a href="CppAbout.htm">about</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbprintconceptmapdialog.h<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a>&nbsp;&nbsp;&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbassessormenudialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbclusterdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconcepteditdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbconceptmapdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcreateassessmentcompletedialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcreateassessmentmenudialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbcreateassessmentpartialdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbmenudialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbrateconceptdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbrateconceptmapdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbrateexamplesdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbratingdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbstudentmenudialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbstudentstartcompletedialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestconceptitemdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestedgeitemdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestnodeitemdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbviewfilesdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbviewtestsdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>/qt<a href="ToolTestQtArrowItems.htm">testqtarrowitems</a><a href="CppMain.htm">main</a>dialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>/qt<a href="ToolTestQtArrowItems.htm">testqtarrowitems</a>menudialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a>/qt<a href="ToolTestQtRoundedEditRectItem.htm">testqtroundededitrectitem</a><a href="CppMain.htm">main</a>dialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a>/qt<a href="ToolTestQtRoundedEditRectItem.htm">testqtroundededitrectitem</a>menudialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a>/qt<a href="ToolTestQtRoundedTextRectItem.htm">testqtroundedtextrectitem</a><a href="CppMain.htm">main</a>dialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a>/qt<a href="ToolTestQtRoundedTextRectItem.htm">testqtroundedtextrectitem</a>menudialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestconceptmapedit<a href="CppWidget.htm">widget</a>dialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbtestconceptmaprate<a href="CppWidget.htm">widget</a>dialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolStyleSheetSetter.htm">ToolStyleSheetSetter</a>/toolstylesheetsetter<a href="CppMain.htm">main</a>dialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbprintratingdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpvdbprintconceptmapdialog.ui<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppFuzzy_equal_to.htm">CppFuzzy_equal_to</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppLazy_init.htm">CppLazy_init</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtArrowItem.htm">CppQtArrowItem</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtHideAndShowDialog.htm">CppQtHideAndShowDialog</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtKeyboardFriendlyGraphicsView.htm">CppQtKeyboardFriendlyGraphicsView</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtLabeledQuadBezierArrowItem.htm">CppQtLabeledQuadBezierArrowItem</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPathArrowItem.htm">CppQtPathArrowItem</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuadBezierArrowItem.htm">CppQtQuadBezierArrowItem</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtRoundedEditRectItem.htm">CppQtRoundedEditRectItem</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtRoundedRectItem.htm">CppQtRoundedRectItem</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtRoundedTextRectItem.htm">CppQtRoundedTextRectItem</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtScopedDisable.htm">CppQtScopedDisable</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;crosscompiletowindows.sh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;doxygen_config.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>/crosscompiletowindows.sh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>/R.png \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>.png \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a>/Licence.txt<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="ProjectVanDenBogaart.htm">ProjectVanDenBogaart</a>.qrc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a>/<a href="ToolTestQtRoundedTextRectItem.htm">ToolTestQtRoundedTextRectItem</a>.qrc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a>/<a href="ToolTestQtRoundedEditRectItem.htm">ToolTestQtRoundedEditRectItem</a>.qrc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>/<a href="ToolTestQtArrowItems.htm">ToolTestQtArrowItems</a>.qrc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolStyleSheetSetter.htm">ToolStyleSheetSetter</a>/<a href="ToolStyleSheetSetter.htm">ToolStyleSheetSetter</a>.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbcluster.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbcluster.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBCLUSTER_H<br/>
<a href="CppDefine.htm">#define</a> PVDBCLUSTER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ClusterFactory;<br/>
<br/>
<a href="CppComment.htm">///</a>The data behind a <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Cluster<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a> a Concept to the Cluster<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/See <b><a href="CppIf.htm">if</a></b> the cluster is empty<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> Empty() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a Cluster from an <a href="CppXml.htm">XML</a> <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the list of Concepts<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &gt; Get() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt;&amp; Get() { <b><a href="CppReturn.htm">return</a></b> m_v; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a Cluster from an <a href="CppXml.htm">XML</a> <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; c);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A Cluster is a list of Concepts. The Concepts contain examples.<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt; m_v;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Block <a href="CppConstructor.htm">constructor</a>, except <b><a href="CppFor.htm">for</a></b> ClusterFactory<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> ClusterFactory;<br/>
&nbsp;&nbsp;Cluster(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Block <a href="CppDestructor.htm">destructor</a>, except <b><a href="CppFor.htm">for</a></b> the <b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~Cluster() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Cluster* x);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Cluster&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbclusterfactory.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBCLUSTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbcluster.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbcluster.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQRegExp.htm">QRegExp</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
pvdb::Cluster::Cluster(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt;&amp; v)<br/>
&nbsp;&nbsp;: m_v(v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>FIX 2012-01-02<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } )); <a href="CppComment.htm">//</a>BUG 2012-01-02<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Cluster::<a href="CppAdd.htm">Add</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &amp; concept)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept-&gt;GetRatingComplexity() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept-&gt;GetRatingComplexity() <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;m_v.push_back(concept);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> pvdb::Cluster::Empty() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_v.empty();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; pvdb::Cluster::From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> &amp;s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 19);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(0,9) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;cluster&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(s.size() <a href="CppOperatorMinus.htm">-</a> 10,10) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/cluster&gt;"));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt; concepts;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the &lt;cluster&gt; ... &lt;/cluster&gt; string<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;cluster&gt;.*&lt;/cluster&gt;)"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Strip the &lt;cluster&gt; tags<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> cluster_str <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the &lt;concept&gt; ... &lt;/concept&gt; strings<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;concept&gt;.*&lt;/concept&gt;)"));<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;concepts](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept <a href="CppOperatorAssign.htm">=</a> Concept::From<a href="CppXml.htm">Xml</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concepts.push_back(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster(<b><a href="CppNew.htm">new</a></b> Cluster(concepts));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cluster);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> cluster;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &gt; pvdb::Cluster::Get() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &gt;(m_v.begin(),m_v.end());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::Cluster::To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; cluster)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;cluster&gt;";<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &gt;&amp; v <a href="CppOperatorAssign.htm">=</a> cluster-&gt;Get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(), v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;s](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Concept::To<a href="CppXml.htm">Xml</a>(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/cluster&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 19);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(0,9) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;cluster&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(r.size() <a href="CppOperatorMinus.htm">-</a> 10,10) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/cluster&gt;"));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> r;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Cluster&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &gt; lhs_concepts <a href="CppOperatorAssign.htm">=</a> lhs.Get(); <a href="CppComment.htm">//</a>For cross-<a href="CppCompiler.htm">compiler</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &gt; rhs_concepts <a href="CppOperatorAssign.htm">=</a> rhs.Get();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_concepts.size() <a href="CppOperatorNotEqual.htm">!=</a> rhs_concepts.size()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs_concepts.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs_concepts[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rhs_concepts[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_concepts[i] <a href="CppOperatorNotEqual.htm">!=</a> rhs_concepts[i]) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> IsEqual(*lhs,*rhs);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &gt; lhs_concepts <a href="CppOperatorAssign.htm">=</a> lhs-&gt;Get(); <a href="CppComment.htm">//</a>For cross-<a href="CppCompiler.htm">compiler</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &gt; rhs_concepts <a href="CppOperatorAssign.htm">=</a> rhs-&gt;Get();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_concepts.size() <a href="CppOperatorNotEqual.htm">!=</a> rhs_concepts.size()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs_concepts.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs_concepts[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rhs_concepts[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_concepts[i] <a href="CppOperatorNotEqual.htm">!=</a> rhs_concepts[i]) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbclusterfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbclusterfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBCLUSTERFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> PVDBCLUSTERFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<a href="CppComment.htm">///</a>Factory <b><a href="CppFor.htm">for</a></b> creating Cluster <a href="CppInstance.htm">instances</a><br/>
<b><a href="CppStruct.htm">struct</a></b> ClusterFactory<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; Create(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; DeepCopy(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt; cluster);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a single test, a combination of testing node indices<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; GetTest(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; test_node_indices);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; &gt; GetTests();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBCLUSTERFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbclusterfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbclusterfactory.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbclusterfactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; pvdb::ClusterFactory::Create(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>FIX 2012-01-02<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; p(<b><a href="CppNew.htm">new</a></b> pvdb::Cluster(v));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; pvdb::ClusterFactory::DeepCopy(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt; cluster)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> cluster-&gt;Get();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt; w;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; d <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::DeepCopy(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; p(<b><a href="CppNew.htm">new</a></b> Cluster(w));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorEqual.htm">==</a> cluster);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*p,*cluster));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; pvdb::ClusterFactory::GetTest(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; test_node_indices)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt; concepts;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(test_node_indices.begin(),test_node_indices.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(concepts),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt; tmp <a href="CppOperatorAssign.htm">=</a> ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept <a href="CppOperatorAssign.htm">=</a> tmp.at(index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> concept;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(concepts.begin(),concepts.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>FIX 2012-01-02<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(concepts.begin(),concepts.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } )); <a href="CppComment.htm">//</a>BUG 2012-01-02<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster(<b><a href="CppNew.htm">new</a></b> Cluster(concepts));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cluster);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> cluster;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; &gt; pvdb::ClusterFactory::GetTests()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; &gt; v(5);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; p <a href="CppOperatorAssign.htm">=</a> GetTest( {0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[0] <a href="CppOperatorAssign.htm">=</a> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; p <a href="CppOperatorAssign.htm">=</a> GetTest( {1} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[1] <a href="CppOperatorAssign.htm">=</a> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; p <a href="CppOperatorAssign.htm">=</a> GetTest( {0,1} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[2] <a href="CppOperatorAssign.htm">=</a> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; p <a href="CppOperatorAssign.htm">=</a> GetTest( {0,1,2} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[3] <a href="CppOperatorAssign.htm">=</a> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; p <a href="CppOperatorAssign.htm">=</a> GetTest( {} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[4] <a href="CppOperatorAssign.htm">=</a> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> DO NOT DO THIS FOR WINE<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; &gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetTest( {0} ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetTest( {1} ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetTest( {0,1} ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetTest( {0,1,2} ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetTest( { } )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>FIX 2012-01-02<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbcompetency.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbcompetency.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBCOMPETENCY_H<br/>
<a href="CppDefine.htm">#define</a> PVDBCOMPETENCY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> Competency<br/>
{<br/>
&nbsp;&nbsp;un<a href="CppInitialize.htm">initialize</a>d <a href="CppOperatorAssign.htm">=</a> 0,&nbsp;&nbsp; <a href="CppComment.htm">//</a>Not yet set<br/>
&nbsp;&nbsp;profession,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>NL: 'Beroepsdomein'<br/>
&nbsp;&nbsp;organisations,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>NL: 'Organisaties'<br/>
&nbsp;&nbsp;social_surroundings, <a href="CppComment.htm">//</a>NL: 'Sociale omgeving'<br/>
&nbsp;&nbsp;target_audience,&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>NL 'Doelgroep'<br/>
&nbsp;&nbsp;ti_knowledge,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>'Technical Instrumental', NL: 'Technische instrumentele kennis'<br/>
&nbsp;&nbsp;prof_growth,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Professionele groei<br/>
&nbsp;&nbsp;misc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>NL: 'Overig'<br/>
};<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Competency&gt; GetAllCompetencies();<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> CompetencyToDutchStr(<b><a href="CppConst.htm">const</a></b> Competency competency);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBCOMPETENCY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbcompetency.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbcompetency.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;pvdb::Competency&gt; pvdb::GetAllCompetencies()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::profession,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::organisations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::social_surroundings,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::target_audience,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::ti_knowledge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::prof_growth,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::misc<br/>
&nbsp;&nbsp;};<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::CompetencyToDutchStr(<b><a href="CppConst.htm">const</a></b> pvdb::Competency type)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d: <b><a href="CppReturn.htm">return</a></b> "[Ongeinitialiseerd]";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::profession: <b><a href="CppReturn.htm">return</a></b> "Kennis van het beroepsdomein";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::organisations: <b><a href="CppReturn.htm">return</a></b> "Kennis van de organisatie";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::social_surroundings: <b><a href="CppReturn.htm">return</a></b> "Kennis van de sociale omgeving";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::target_audience: <b><a href="CppReturn.htm">return</a></b> "Kennis van de doelgroep";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::ti_knowledge: <b><a href="CppReturn.htm">return</a></b> "Technisch instrumentele kennis";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::prof_growth: <b><a href="CppReturn.htm">return</a></b> "Kennis van de eigen persoon";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::misc: <b><a href="CppReturn.htm">return</a></b> "Overige";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Unknown pvdb::Competency");<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbconcept.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbconcept.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBCONCEPT_H<br/>
<a href="CppDefine.htm">#define</a> PVDBCONCEPT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQRegExp.htm">QRegExp</a>&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ConceptFactory;<br/>
<br/>
<a href="CppComment.htm">///</a>A Concept is a <b><a href="CppClass.htm">class</a></b> that has a name and examples<br/>
<b><a href="CppStruct.htm">struct</a></b> Concept<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Block copying, as <b><a href="CppQtSignals.htm">signals</a></b> cannot be copied<br/>
&nbsp;&nbsp;Concept(<b><a href="CppConst.htm">const</a></b> pvdb::Concept&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Concept&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> pvdb::Concept&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read concept from a <a href="CppStdString.htm">std::string</a> read from file<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the examples of the concept, e.g. 'Plato', 'Aristotle'<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt; GetExamples() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; GetExamples() { <b><a href="CppReturn.htm">return</a></b> m_examples; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the name of the concept, e.g. 'Philosphy'<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetName() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_name; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the rating of <b><a href="CppThis.htm">this</a></b> Concept <b><a href="CppFor.htm">for</a></b> complexity<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetRatingComplexity() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_rating_complexity; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the rating of <b><a href="CppThis.htm">this</a></b> Concept <b><a href="CppFor.htm">for</a></b> concreteness<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetRatingConcreteness() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_rating_concreteness; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the rating of <b><a href="CppThis.htm">this</a></b> Concept <b><a href="CppFor.htm">for</a></b> specificity<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetRatingSpecificity() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_rating_specificity; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when the examples are changed<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::Concept*)&gt; m_signal_examples_changed;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when the name is changed<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::Concept*)&gt; m_signal_name_changed;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when the rating of the complexity is changed<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::Concept*)&gt; m_signal_rating_complexity_changed;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when the rating of the complexity is changed<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::Concept*)&gt; m_signal_rating_concreteness_changed;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when the rating of the specificity is changed<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::Concept*)&gt; m_signal_rating_specificity_changed;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> Concept to a <a href="CppStdString.htm">std::string</a> to write to file<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; t);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> ::<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> ::<a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> ::<a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> ::<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> ::<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> ::<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> ::<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> ::<a href="CppQt.htm">Qt</a>PvdbEdgeItem;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> ::<a href="CppQt.htm">Qt</a>PvdbNodeItem;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> ::<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> ::<a href="CppQt.htm">Qt</a>PvdbRateConceptDialog;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> ::<a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the examples<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetExamples(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; examples);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the name<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the rating of <b><a href="CppThis.htm">this</a></b> Concept <b><a href="CppFor.htm">for</a></b> complexity<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetRatingComplexity(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_complexity);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the rating of <b><a href="CppThis.htm">this</a></b> Concept <b><a href="CppFor.htm">for</a></b> concreteness<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetRatingConcreteness(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_concreteness);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the rating of <b><a href="CppThis.htm">this</a></b> Concept <b><a href="CppFor.htm">for</a></b> specificity<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetRatingSpecificity(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_specificity);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Examples of the concept, e.g. 'Plato', 'Aristotle'<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; m_examples;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The name of the concept, e.g. 'Philosphy'<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_name;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The rating of <b><a href="CppThis.htm">this</a></b> Concept <b><a href="CppFor.htm">for</a></b> complexity<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_rating_complexity;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The rating of <b><a href="CppThis.htm">this</a></b> Concept <b><a href="CppFor.htm">for</a></b> concreteness<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_rating_concreteness;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The rating of <b><a href="CppThis.htm">this</a></b> Concept <b><a href="CppFor.htm">for</a></b> specificity<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_rating_specificity;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use checked_delete <b><a href="CppFor.htm">for</a></b> <a href="CppDestructor.htm">destructor</a><br/>
&nbsp;&nbsp;~Concept() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(pvdb::Concept* x);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let only ConceptFactory <a href="CppConstructor.htm">construct</a> Concepts<br/>
&nbsp;&nbsp;Concept(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; examples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_complexity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_concreteness,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_specificity);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> ConceptFactory;<br/>
<br/>
};<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::Concept&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Concept&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::Concept&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Concept&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::Concept&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Concept&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
<a href="CppComment.htm">///</a>Two Concept <a href="CppInstance.htm">instances</a> are ordered as follows:<br/>
<a href="CppComment.htm">///</a>(1) Alphabetically on the name<br/>
<a href="CppComment.htm">///</a>(2) (<b><a href="CppIf.htm">if</a></b> the names are equal) On their Examples<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs);<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBCONCEPT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbconcept.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbconcept.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplesfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
pvdb::Concept::Concept(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; examples,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_complexity,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_concreteness,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_specificity)<br/>
&nbsp;&nbsp;: m_examples(examples),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_name(name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_complexity(rating_complexity),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_concreteness(rating_concreteness),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_specificity(rating_specificity)<br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_examples);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rating_complexity&nbsp;&nbsp; <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1); <a href="CppComment.htm">//</a>BUG 2013-02-03<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rating_complexity&nbsp;&nbsp; <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rating_concreteness <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rating_concreteness <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rating_specificity&nbsp;&nbsp;<a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rating_specificity&nbsp;&nbsp;<a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; pvdb::Concept::From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 19);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(0,9) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;concept&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(s.size() <a href="CppOperatorMinus.htm">-</a> 10,10) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/concept&gt;"));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> name;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; examples;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> rating_complexity&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2; <a href="CppComment.htm">//</a>Not even unrated (which has <a href="CppOperatorMinus.htm">-</a>1 as its value)<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> rating_concreteness&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2; <a href="CppComment.htm">//</a>Not even unrated (which has <a href="CppOperatorMinus.htm">-</a>1 as its value)<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> rating_specificity&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2; <a href="CppComment.htm">//</a>Not even unrated (which has <a href="CppOperatorMinus.htm">-</a>1 as its value)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_name<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;name&gt;.*&lt;/name&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;name <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_examples<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;examples&gt;.*&lt;/examples&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "&lt;examples&gt;*.&lt;/examples&gt; must be present once in a Concept");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;examples <a href="CppOperatorAssign.htm">=</a> Examples::From<a href="CppXml.htm">Xml</a>(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_rating_complexity<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;complexity&gt;.*&lt;/complexity&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "(&lt;complexity&gt;.*&lt;/complexity&gt;) must be present once per Concept");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rating_complexity <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_rating_concreteness<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;concreteness&gt;.*&lt;/concreteness&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rating_concreteness <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_rating_specificity<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;specificity&gt;.*&lt;/specificity&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rating_specificity <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ConceptFactory::Create(name,examples,rating_complexity,rating_concreteness,rating_specificity);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt; pvdb::Concept::GetExamples() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_examples);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt; p(m_examples);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Concept::SetExamples(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; examples)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (examples <a href="CppOperatorNotEqual.htm">!=</a> m_examples)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples <a href="CppOperatorAssign.htm">=</a> examples;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_signal_examples_changed(<b><a href="CppThis.htm">this</a></b>); <a href="CppComment.htm">//</a>CAUSE OF MAJOR BUG 2013-01-09<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Concept::SetName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetExamples());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (name <a href="CppOperatorNotEqual.htm">!=</a> m_name)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_name <a href="CppOperatorAssign.htm">=</a> name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_signal_name_changed(<b><a href="CppThis.htm">this</a></b>); <a href="CppComment.htm">//</a>CAUSE OF MAJOR BUG 2013-01-09<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Concept::SetRatingComplexity(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_complexity)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_rating_complexity <a href="CppOperatorNotEqual.htm">!=</a> rating_complexity)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_complexity <a href="CppOperatorAssign.htm">=</a> rating_complexity;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rating_complexity <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rating_complexity <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_signal_rating_complexity_changed(<b><a href="CppThis.htm">this</a></b>); <a href="CppComment.htm">//</a>CAUSE OF MAJOR BUG 2013-01-09<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Concept::SetRatingConcreteness(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_concreteness)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_rating_concreteness <a href="CppOperatorNotEqual.htm">!=</a> rating_concreteness)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_concreteness <a href="CppOperatorAssign.htm">=</a> rating_concreteness;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rating_concreteness <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rating_concreteness <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_signal_rating_concreteness_changed(<b><a href="CppThis.htm">this</a></b>); <a href="CppComment.htm">//</a>CAUSE OF MAJOR BUG 2013-01-09<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Concept::SetRatingSpecificity(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_specificity)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_rating_specificity <a href="CppOperatorNotEqual.htm">!=</a> rating_specificity)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_specificity <a href="CppOperatorAssign.htm">=</a> rating_specificity;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rating_specificity <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rating_specificity <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_signal_rating_specificity_changed(<b><a href="CppThis.htm">this</a></b>); <a href="CppComment.htm">//</a>CAUSE OF MAJOR BUG 2013-01-09<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::Concept::To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &amp;c)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;concept&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp; "&lt;name&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetName();<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp; "&lt;/name&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp; Examples::To<a href="CppXml.htm">Xml</a>(c-&gt;GetExamples());<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp; "&lt;complexity&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetRatingComplexity();<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp; "&lt;/complexity&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp; "&lt;concreteness&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetRatingConcreteness();<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp; "&lt;/concreteness&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp; "&lt;specificity&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetRatingSpecificity();<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp; "&lt;/specificity&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/concept&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 19);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(0,9) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;concept&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(r.size() <a href="CppOperatorMinus.htm">-</a> 10,10) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/concept&gt;"));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> r;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::Concept&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Concept&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt; lhs_examples <a href="CppOperatorAssign.htm">=</a> lhs.GetExamples();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs_examples);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt; rhs_examples <a href="CppOperatorAssign.htm">=</a> rhs.GetExamples();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rhs_examples);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetName()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> rhs.GetName()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> IsEqual(*lhs_examples,*rhs_examples)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetRatingComplexity()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> rhs.GetRatingComplexity()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetRatingConcreteness() <a href="CppOperatorEqual.htm">==</a> rhs.GetRatingConcreteness()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetRatingSpecificity()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> rhs.GetRatingSpecificity();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> IsEqual(*lhs,*rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetName() &lt; rhs-&gt;GetName()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetName() &gt; rhs-&gt;GetName()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetExamples() &lt; rhs-&gt;GetExamples()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetExamples() <a href="CppOperatorNotEqual.htm">!=</a> rhs-&gt;GetExamples()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs-&gt;GetExamples() <a href="CppOperatorEqual.htm">==</a> rhs-&gt;GetExamples());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetRatingComplexity() &lt; rhs-&gt;GetRatingComplexity()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetRatingComplexity() &gt; rhs-&gt;GetRatingComplexity()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetRatingConcreteness() &lt; rhs-&gt;GetRatingConcreteness()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetRatingConcreteness() &gt; rhs-&gt;GetRatingConcreteness()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs-&gt;GetRatingSpecificity() &lt; rhs-&gt;GetRatingSpecificity();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(lhs) &lt; <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(lhs) &lt; <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(lhs) &lt; <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;(rhs);<br/>
}<br/>
<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbconceptfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbconceptfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBCONCEPTFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> PVDBCONCEPTFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppArray.htm">array</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<a href="CppComment.htm">///</a>Creates pvdb::Concepts<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ConceptFactory<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Default and complete Create <a href="CppMemberFunction.htm">member function</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; examples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_complexity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_concreteness,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_specificity);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name <a href="CppOperatorAssign.htm">=</a> "",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,Competency&gt; &gt;&amp; examples <a href="CppOperatorAssign.htm">=</a> {},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_complexity <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_concreteness <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_specificity <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Like a Concept deep-<a href="CppCopyConstructor.htm">copy constructor</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; DeepCopy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; concept);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain some testing concepts<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt; GetTests();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBCONCEPTFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbconceptfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbconceptfactory.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplesfactory.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; pvdb::ConceptFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; examples,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_complexity,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_concreteness,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_specificity)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(examples);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Concept(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;examples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rating_complexity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rating_concreteness,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rating_specificity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> concept;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; pvdb::ConceptFactory::DeepCopy(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; concept)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ExamplesFactory::Create(concept-&gt;GetExamples());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(examples);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*examples,*concept-&gt;GetExamples()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept-&gt;GetRatingComplexity() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept-&gt;GetRatingComplexity() <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; q<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;GetName(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;examples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;GetRatingComplexity(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;GetRatingConcreteness(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;GetRatingSpecificity());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q-&gt;GetExamples());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*concept,*q));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> q;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>Do not create <b><a href="CppThis.htm">this</a></b> <a href="CppVersion.htm">version</a>: it will lead to ambiguities<br/>
<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; pvdb::ConceptFactory::Create(<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt;&amp; examples)<br/>
<a href="CppComment.htm">//</a>{<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Create(name,ExamplesFactory::Create(examples));<br/>
<a href="CppComment.htm">//</a>}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; pvdb::ConceptFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,Competency&gt; &gt;&amp; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_complexity,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_concreteness,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_specificity)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt; w;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,Competency&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; q<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ExampleFactory::Create(p.first,p.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ExamplesFactory::Create(w);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(examples);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;examples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rating_complexity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rating_concreteness,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rating_specificity);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> concept;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt; pvdb::ConceptFactory::GetTests()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt; v(5);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; examples <a href="CppOperatorAssign.htm">=</a> ExamplesFactory::Create();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(examples);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; p <a href="CppOperatorAssign.htm">=</a> Create("Concept without examples", examples, 0, 1, 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetRatingComplexity() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetRatingComplexity() <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[0] <a href="CppOperatorAssign.htm">=</a> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; p <a href="CppOperatorAssign.htm">=</a> Create("Concept with one example", { { "Only example", pvdb::Competency::profession } }, 1, 2, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetRatingComplexity() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetRatingComplexity() <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[1] <a href="CppOperatorAssign.htm">=</a> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; p <a href="CppOperatorAssign.htm">=</a> Create("Concept with two examples", { { "First example", pvdb::Competency::organisations }, { "Second example", pvdb::Competency::social_surroundings } }, 2, 0, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetRatingComplexity() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetRatingComplexity() <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[2] <a href="CppOperatorAssign.htm">=</a> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; p <a href="CppOperatorAssign.htm">=</a> Create("Concept with three examples", { { "Example 1 of 3", pvdb::Competency::target_audience }, { "Example 2 of 3", pvdb::Competency::ti_knowledge }, { "Example 3 of 3", pvdb::Competency::prof_growth } }, 0, 1, 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetRatingComplexity() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetRatingComplexity() <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[3] <a href="CppOperatorAssign.htm">=</a> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; p <a href="CppOperatorAssign.htm">=</a> Create("Concept with four Roman examples", { { "Example I/IV", pvdb::Competency::misc }, { "Example II/IV", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d }, { "Example III/IV", pvdb::Competency::profession }, { "Example III/IV", pvdb::Competency::social_surroundings } }, 1, 2, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetRatingComplexity() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetRatingComplexity() <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[4] <a href="CppOperatorAssign.htm">=</a> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>FIX 2012-01-02<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0]-&gt;GetExamples());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppVersion.htm">Version</a> below appears to work differently in cross <a href="CppCompiler.htm">compiler</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create("Concept without examples", ExamplesFactory::Create(), 0, 1, 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create("Concept with one example", { { "Only example", pvdb::Competency::profession } }, 1, 2, 0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create("Concept with two examples", { { "First example", pvdb::Competency::organisations }, { "Second example", pvdb::Competency::social_surroundings } }, 2, 0, 1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create("Concept with three examples", { { "Example 1 of 3", pvdb::Competency::target_audience }, { "Example 2 of 3", pvdb::Competency::ti_knowledge }, { "Example 3 of 3", pvdb::Competency::prof_growth } }, 0, 1, 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create("Concept with four Roman examples", { { "Example I/IV", pvdb::Competency::misc }, { "Example II/IV", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d }, { "Example III/IV", pvdb::Competency::profession }, { "Example III/IV", pvdb::Competency::social_surroundings } }, 1, 2, 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}; <a href="CppComment.htm">//</a><a href="CppDouble.htm">Double</a> braces not needed in future GCC <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbconceptmap.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbconceptmap.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBCONCEPTMAP_H<br/>
<a href="CppDefine.htm">#define</a> PVDBCONCEPTMAP_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ConceptMapFactory;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ConceptMap<br/>
{<br/>
&nbsp;&nbsp;ConceptMap(<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;ConceptMap&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> ConceptMap can be <a href="CppConstructor.htm">construct</a>ed successfully<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Can<a href="CppConstructor.htm">Construct</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt;&amp; nodes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt;&amp; edges);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create all sub-conceptmaps<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Note that CreateSubs()[0] is the concept map around the focal <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; CreateSubs() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> the ConceptMap is empty<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> Empty() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a ConceptMap from an <a href="CppXml.htm">XML</a> <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the edges<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; &gt;&nbsp;&nbsp;GetEdges() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Edge&gt; &gt;&amp; GetEdges() { <b><a href="CppReturn.htm">return</a></b> m_edges; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the nodes<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; &gt;&nbsp;&nbsp;GetNodes() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&gt; &gt;&amp; GetNodes() { <b><a href="CppReturn.htm">return</a></b> m_nodes; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the focus <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppQuestion.htm">Question</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Similar to <b><a href="CppOperatorEqual.htm">operator==</a></b>, except that the GUI member variables aren't checked <b><a href="CppFor.htm">for</a></b> equality<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> HasSameContent(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; rhs);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> HasSameContent(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; rhs);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> HasSameContent(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; rhs);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> HasSameContent(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; rhs);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a ConceptMap from an <a href="CppXml.htm">XML</a> <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; c);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The edges<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt; m_edges;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The nodes<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; m_nodes;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Prepend the <a href="CppQuestion.htm">question</a> as a first node, before adding the supplied nodes<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; CreateNodes(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt;&amp; nodes);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Block <a href="CppConstructor.htm">constructor</a>, except <b><a href="CppFor.htm">for</a></b> the <b><a href="CppFriend.htm">friend</a></b> ConceptMapFactory<br/>
&nbsp;&nbsp;ConceptMap(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Nodes[0] must be the focal <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt;&amp; nodes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt;&amp; edges <a href="CppOperatorAssign.htm">=</a> {});<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a concept map from a cluster<br/>
&nbsp;&nbsp;ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; cluster);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> ConceptMapFactory;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Block <a href="CppDestructor.htm">destructor</a>, except <b><a href="CppFor.htm">for</a></b> the <b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~ConceptMap() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ConceptMap* x);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBCONCEPTMAP_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbconceptmap.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbconceptmap.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplesfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
pvdb::ConceptMap::ConceptMap(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>)<br/>
&nbsp;&nbsp;: m_edges( {} ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_nodes(CreateNodes(<a href="CppQuestion.htm">question</a>, {} ))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ConceptMap::Can<a href="CppConstructor.htm">Construct</a>(m_nodes,m_edges));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
pvdb::ConceptMap::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt;&amp; nodes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt;&amp; edges)<br/>
&nbsp;&nbsp;: m_edges(edges),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_nodes(nodes)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ConceptMap::Can<a href="CppConstructor.htm">Construct</a>(nodes,edges));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> nodes[0]-&gt;GetConcept()-&gt;GetName());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
pvdb::ConceptMap::ConceptMap(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; cluster)<br/>
&nbsp;&nbsp;: m_nodes(CreateNodes(<a href="CppQuestion.htm">question</a>, {} ))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt;&amp; v <a href="CppOperatorAssign.htm">=</a> cluster-&gt;Get();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray <a href="CppOperatorAssign.htm">=</a> 100.0; <a href="CppComment.htm">//</a>pixels<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> 2.0 * <a href="CppM_PI.htm">M_PI</a> * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(0.0 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdSin.htm">std::sin</a>(angle) * ray));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(0.0 <a href="CppOperatorMinus.htm">-</a> (<a href="CppStdCos.htm">std::cos</a>(angle) * ray));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a> arrange the positioning of the concepts<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node <a href="CppOperatorAssign.htm">=</a> pvdb::NodeFactory::Create(v[i],x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_nodes.push_back(node);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorEqual.htm">==</a> m_nodes.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume the ConceptMap has as much nodes as the cluster has concepts <a href="CppOperatorPlus.htm">+</a> one focal <a href="CppQuestion.htm">question</a>");<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> pvdb::ConceptMap::Can<a href="CppConstructor.htm">Construct</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt;&amp; nodes,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt;&amp; edges)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (<a href="CppQuestion.htm">question</a>.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot <a href="CppConstructor.htm">construct</a> empty <a href="CppQuestion.htm">question</a>s") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppIf.htm">if</a></b> first node, which is the focal <a href="CppQuestion.htm">question</a>, does not have examples<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nodes.empty())<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nodes[0]-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The center node CAN have examples, when the center node is the focal node of a sub-concept map<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppIf.htm">if</a></b> (!nodes[0]-&gt;GetConcept()-&gt;GetExamples().empty()) { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppIf.htm">if</a></b> all edges are in range<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_nodes <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(nodes.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_invalid <a href="CppOperatorAssign.htm">=</a> <a href="CppStdCount_if.htm">std::count_if</a>(edges.begin(), edges.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[n_nodes](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &amp; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> edge-&gt;GetTo() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> n_nodes <a href="CppOperatorLogicalOr.htm">||</a> edge-&gt;GetFrom() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> n_nodes;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_invalid)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppIf.htm">if</a></b> there are 'two-way' edges, that is, one edge going from A to B<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>and another edge going from B to A<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_edges <a href="CppOperatorAssign.htm">=</a> edges.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_edges; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &amp; a <a href="CppOperatorAssign.htm">=</a> edges[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a_from <a href="CppOperatorAssign.htm">=</a> a-&gt;GetFrom();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a_to&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> a-&gt;GetTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=i+1; j<a href="CppOperatorNotEqual.htm">!=</a>n_edges; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j &lt; n_edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &amp; b <a href="CppOperatorAssign.htm">=</a> edges[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.get() <a href="CppOperatorNotEqual.htm">!=</a> b.get() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume different <a href="CppPointer.htm">pointer</a>s");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_from <a href="CppOperatorAssign.htm">=</a> b-&gt;GetFrom();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_to&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> b-&gt;GetTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a_from <a href="CppOperatorEqual.htm">==</a> b_from <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_to <a href="CppOperatorEqual.htm">==</a> b_to)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a_from <a href="CppOperatorEqual.htm">==</a> b_to <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_to <a href="CppOperatorEqual.htm">==</a> b_from)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; pvdb::ConceptMap::CreateNodes(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt;&amp; nodes)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ExamplesFactory::Create(), <a href="CppComment.htm">//</a>No examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>1, <a href="CppComment.htm">//</a>No rated complexity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>1, <a href="CppComment.htm">//</a>No rated concreteness<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>1&nbsp;&nbsp;<a href="CppComment.htm">//</a>No rated specificity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; center_node <a href="CppOperatorAssign.htm">=</a> pvdb::NodeFactory::Create(concept,0,0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(center_node);<br/>
&nbsp;&nbsp;v.push_back(center_node);<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(nodes.begin(),nodes.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> nodes.size() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; pvdb::ConceptMap::CreateSubs() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_nodes.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Concept map must have a focal <a href="CppQuestion.htm">question</a>");<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_nodes <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_nodes.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_nodes; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Collect all edges connected top the focal node (which is m_nodes[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt; edges;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; node_indices_set; <a href="CppComment.htm">//</a>Which nodes must be copied later?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_edges <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_edges.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_edges; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; focal_edge <a href="CppOperatorAssign.htm">=</a> m_edges[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (focal_edge-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> i <a href="CppOperatorLogicalOr.htm">||</a> focal_edge-&gt;GetTo() <a href="CppOperatorEqual.htm">==</a> i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges.push_back(focal_edge); <a href="CppComment.htm">//</a>FIX? 2012-12-31<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; new_edge(<b><a href="CppNew.htm">new</a></b> pvdb::Edge(focal_edge)); <a href="CppComment.htm">//</a>BUG? 2012-12-31<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>edges.push_back(new_edge); <a href="CppComment.htm">//</a>BUG? 2012-12-31<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_indices_set.insert(focal_edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_indices_set.insert(focal_edge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; node_indices(node_indices_set.begin(), node_indices_set.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdIs_sorted.htm">std::is_sorted</a>(node_indices.begin(),node_indices.end()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy the collected node indices<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; nodes;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(node_indices.begin(),node_indices.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(nodes),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_nodes.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_nodes[index]; <a href="CppComment.htm">//</a>FIX? 2012-12-31<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; new_node <a href="CppOperatorAssign.htm">=</a> pvdb::NodeFactory::Create(*m_nodes[index])); <a href="CppComment.htm">//</a>BUG? 2012-12-31<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> new_node; <a href="CppComment.htm">//</a>BUG? 2012-12-31<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make the to and from indices of the <b><a href="CppNew.htm">new</a></b> concept map correct<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Luckily, we already have a remapping table:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppNew.htm">new</a></b> node index <a href="CppOperatorAssign.htm">=</a> the index in the <a href="CppStdVector.htm">std::vector</a> node_indices<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(edges.begin(),edges.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[node_indices](<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remap<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index_old <a href="CppOperatorAssign.htm">=</a> edge-&gt;GetFrom();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(node_indices.begin(),node_indices.end(),index_old) <a href="CppOperatorEqual.htm">==</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There must be only one unique known index");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> new_index_iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind.htm">std::find</a>(node_indices.begin(),node_indices.end(),index_old);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(new_index_iter <a href="CppOperatorNotEqual.htm">!=</a> node_indices.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index_new <a href="CppOperatorAssign.htm">=</a> <a href="CppStdDistance.htm">std::distance</a>(node_indices.begin(),new_index_iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index_new <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;SetFrom(index_new);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index_old <a href="CppOperatorAssign.htm">=</a> edge-&gt;GetTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(node_indices.begin(),node_indices.end(),index_old) <a href="CppOperatorEqual.htm">==</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There must be only one unique known index");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> new_index_iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind.htm">std::find</a>(node_indices.begin(),node_indices.end(),index_old);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(new_index_iter <a href="CppOperatorNotEqual.htm">!=</a> node_indices.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index_new <a href="CppOperatorAssign.htm">=</a> <a href="CppStdDistance.htm">std::distance</a>(node_indices.begin(),new_index_iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index_new <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;SetTo(index_new);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nodes.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>An unconnected node is zoomed in on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes.push_back(m_nodes[i]); <a href="CppComment.htm">//</a>FIX? 2012-12-31<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; new_node(<b><a href="CppNew.htm">new</a></b> pvdb::Node(*m_nodes[i])); <a href="CppComment.htm">//</a>BUG? 2012-12-31<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>nodes.push_back(new_node); <a href="CppComment.htm">//</a>BUG? 2012-12-31<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!nodes.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> pvdb::ConceptMap::Empty() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_nodes.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_edges.empty();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; pvdb::ConceptMap::From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> &amp;s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 27);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(0,13) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;concept_map&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(s.size() <a href="CppOperatorMinus.htm">-</a> 14,14) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/concept_map&gt;"));<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the &lt;concept_map&gt; ... &lt;/concept_map&gt; string<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;concept_map&gt;.*&lt;/concept_map&gt;)"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Strip the &lt;concept_map&gt; tags<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> concept_map_str <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; nodes;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the &lt;nodes&gt; ... &lt;/nodes&gt; strings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(concept_map_str,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;nodes&gt;.*&lt;/nodes&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Strip the &lt;nodes&gt; tags<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nodes_str <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppStripXmlTag.htm">StripXmlTag</a>(w[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the &lt;concept&gt; ... &lt;/concept&gt; strings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(nodes_str,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;node&gt;.*&lt;/node&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(x.begin(),x.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;nodes](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes.push_back( Node::From<a href="CppXml.htm">Xml</a>(s) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt; edges;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the &lt;edges&gt; ... &lt;/edges&gt; strings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(concept_map_str,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;edges&gt;.*&lt;/edges&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Strip the &lt;edges&gt; tags<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nodes_str <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppStripXmlTag.htm">StripXmlTag</a>(w[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the &lt;edge&gt; ... &lt;/edge&gt; strings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(nodes_str,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;edge&gt;.*&lt;/edge&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(x.begin(),x.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;edges](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges.push_back( Edge::From<a href="CppXml.htm">Xml</a>(s) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<b><a href="CppNew.htm">new</a></b> ConceptMap(nodes,edges));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> concept_map;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; &gt; pvdb::ConceptMap::GetEdges() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppAdd.htm">Add</a>Const(m_edges);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; &gt; pvdb::ConceptMap::GetNodes() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppAdd.htm">Add</a>Const(m_nodes);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::ConceptMap::Get<a href="CppQuestion.htm">Question</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_nodes.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_nodes[0]-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>A Concept Map CAN have examples at node[0]: when it is a sub-cluster<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_nodes[0]-&gt;GetConcept()-&gt;GetExamples().size() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_nodes[0]-&gt;GetConcept()-&gt;GetName();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> pvdb::ConceptMap::HasSameContent(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorNotEqual.htm">!=</a> rhs-&gt;Get<a href="CppQuestion.htm">Question</a>())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetEdges().size() <a href="CppOperatorNotEqual.htm">!=</a> rhs-&gt;GetEdges().size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetNodes().size() <a href="CppOperatorNotEqual.htm">!=</a> rhs-&gt;GetNodes().size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Same Concepts<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; &gt; nodes_lhs <a href="CppOperatorAssign.htm">=</a> lhs-&gt;GetNodes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMultiset.htm">std::multiset</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &gt; concepts_lhs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(nodes_lhs.begin(),nodes_lhs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::inserter(concepts_lhs,concepts_lhs.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> node-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; &gt; nodes_rhs <a href="CppOperatorAssign.htm">=</a> rhs-&gt;GetNodes();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMultiset.htm">std::multiset</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &gt; concepts_rhs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(nodes_rhs.begin(),nodes_rhs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::inserter(concepts_rhs,concepts_rhs.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> node-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdMismatch.htm">std::mismatch</a>(concepts_lhs.begin(),concepts_lhs.end(),concepts_rhs.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a <a href="CppOperatorEqual.htm">==</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdMake_pair.htm">std::make_pair</a>(concepts_lhs.end(),concepts_rhs.end()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Same Edges<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; &gt; edges_lhs <a href="CppOperatorAssign.htm">=</a> lhs-&gt;GetEdges();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMultiset.htm">std::multiset</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &gt; concepts_lhs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(edges_lhs.begin(),edges_lhs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::inserter(concepts_lhs,concepts_lhs.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> edge-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; &gt; edges_rhs <a href="CppOperatorAssign.htm">=</a> rhs-&gt;GetEdges();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMultiset.htm">std::multiset</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; &gt; concepts_rhs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(edges_rhs.begin(),edges_rhs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::inserter(concepts_rhs,concepts_rhs.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> edge-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdMismatch.htm">std::mismatch</a>(concepts_lhs.begin(),concepts_lhs.end(),concepts_rhs.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a <a href="CppOperatorEqual.htm">==</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdMake_pair.htm">std::make_pair</a>(concepts_lhs.end(),concepts_rhs.end()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppFor.htm">for</a></b> each edge a same 'from' and 'to' concept can be found<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdTuple.htm">std::tuple</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdString.htm">std::string</a>,<a href="CppStdString.htm">std::string</a>&gt; FakeEdge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;FakeEdge&gt; FakeEdges;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs-&gt;GetEdges().size() <a href="CppOperatorEqual.htm">==</a> rhs-&gt;GetEdges().size());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FakeEdges v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> lhs-&gt;GetEdges().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index_from <a href="CppOperatorAssign.htm">=</a> lhs-&gt;GetEdges()[i]-&gt;GetFrom();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index_from <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> index_from &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs-&gt;GetNodes().size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_from <a href="CppOperatorAssign.htm">=</a> lhs-&gt;GetNodes()[index_from]-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_mid <a href="CppOperatorAssign.htm">=</a> lhs-&gt;GetEdges()[i]-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index_to <a href="CppOperatorAssign.htm">=</a> lhs-&gt;GetEdges()[i]-&gt;GetTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index_to <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> index_to &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs-&gt;GetNodes().size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to <a href="CppOperatorAssign.htm">=</a> lhs-&gt;GetNodes()[index_to]-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only <b><a href="CppIf.htm">if</a></b> arrow is reversed, reverse the fake edge<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs-&gt;GetEdges()[i]-&gt;HasTailArrow() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs-&gt;GetEdges()[i]-&gt;HasHeadArrow() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(str_to,str_mid,str_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetEdges()[i]-&gt;HasTailArrow() <a href="CppOperatorEqual.htm">==</a> lhs-&gt;GetEdges()[i]-&gt;HasHeadArrow())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Two-way or zero-way arrow, add it in both directions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(str_to,str_mid,str_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(str_from,str_mid,str_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Normal arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(str_from,str_mid,str_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorGreaterEqual.htm">&gt;=</a> sz);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FakeEdges w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index_from <a href="CppOperatorAssign.htm">=</a> rhs-&gt;GetEdges()[i]-&gt;GetFrom();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index_from <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> index_from &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rhs-&gt;GetNodes().size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_from <a href="CppOperatorAssign.htm">=</a> rhs-&gt;GetNodes()[index_from]-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_mid <a href="CppOperatorAssign.htm">=</a> rhs-&gt;GetEdges()[i]-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index_to <a href="CppOperatorAssign.htm">=</a> rhs-&gt;GetEdges()[i]-&gt;GetTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index_to <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> index_to &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rhs-&gt;GetNodes().size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to <a href="CppOperatorAssign.htm">=</a> rhs-&gt;GetNodes()[index_to]-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>w.push_back(<a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(str_from,str_mid,str_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only <b><a href="CppIf.htm">if</a></b> arrow is reversed, reverse the fake edge<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rhs-&gt;GetEdges()[i]-&gt;HasTailArrow() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs-&gt;GetEdges()[i]-&gt;HasHeadArrow() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(<a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(str_to,str_mid,str_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (rhs-&gt;GetEdges()[i]-&gt;HasTailArrow() <a href="CppOperatorEqual.htm">==</a> rhs-&gt;GetEdges()[i]-&gt;HasHeadArrow())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Two-way or zero-way arrow, add it in both directions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(<a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(str_to,str_mid,str_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(<a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(str_from,str_mid,str_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Normal arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(<a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(str_from,str_mid,str_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(w.size()) <a href="CppOperatorGreaterEqual.htm">&gt;=</a> sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.size() <a href="CppOperatorNotEqual.htm">!=</a> w.size()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(w.begin(),w.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v <a href="CppOperatorNotEqual.htm">!=</a> w)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> REALLY_SHOW_ME_THIS_7364894385876473475934758934753<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "[" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (i+1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "/" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sz <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "]: ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdGet.htm">std::get</a>&lt;0&gt;(v[i]) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdGet.htm">std::get</a>&lt;1&gt;(v[i]) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdGet.htm">std::get</a>&lt;2&gt;(v[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") , ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdGet.htm">std::get</a>&lt;0&gt;(w[i]) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdGet.htm">std::get</a>&lt;1&gt;(w[i]) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdGet.htm">std::get</a>&lt;2&gt;(w[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> pvdb::ConceptMap::HasSameContent(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> HasSameContent(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(lhs),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(rhs)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> pvdb::ConceptMap::HasSameContent(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> HasSameContent(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(lhs),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(rhs)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> pvdb::ConceptMap::HasSameContent(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> HasSameContent(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(lhs),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(rhs)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::ConceptMap::To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; map)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;concept_map&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;nodes&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; &gt;&amp; nodes <a href="CppOperatorAssign.htm">=</a> map-&gt;GetNodes();<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(nodes.begin(), nodes.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;s](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Node::To<a href="CppXml.htm">Xml</a>(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/nodes&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;edges&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; &gt;&amp; edges <a href="CppOperatorAssign.htm">=</a> map-&gt;GetEdges();<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(edges.begin(), edges.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;s](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Edge::To<a href="CppXml.htm">Xml</a>(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/edges&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/concept_map&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 27);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(0,13) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;concept_map&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(r.size() <a href="CppOperatorMinus.htm">-</a> 14,14) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/concept_map&gt;"));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> r;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Compare nodes<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; &gt; lhs_nodes <a href="CppOperatorAssign.htm">=</a> lhs.GetNodes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; &gt; rhs_nodes <a href="CppOperatorAssign.htm">=</a> rhs.GetNodes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_nodes.size() <a href="CppOperatorNotEqual.htm">!=</a> rhs_nodes.size()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_nodes <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs_nodes.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_nodes; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_nodes[i] <a href="CppOperatorNotEqual.htm">!=</a> rhs_nodes[i]) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Compare edges<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; &gt; lhs_edges <a href="CppOperatorAssign.htm">=</a> lhs.GetEdges();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; &gt; rhs_edges <a href="CppOperatorAssign.htm">=</a> rhs.GetEdges();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_edges.size() <a href="CppOperatorNotEqual.htm">!=</a> rhs_edges.size()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_edges <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs_edges.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_edges; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_edges[i] <a href="CppOperatorNotEqual.htm">!=</a> rhs_edges[i]) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> IsEqual(*lhs,*rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;(rhs);<br/>
}<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbconceptmapfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbconceptmapfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBCONCEPTMAPFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> PVDBCONCEPTMAPFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<a href="CppComment.htm">///</a>Class to create PvdB <a href="CppInstance.htm">instances</a><br/>
<b><a href="CppStruct.htm">struct</a></b> ConceptMapFactory<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create an empty-as-can-get ConceptMap<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; focal_<a href="CppQuestion.htm">question</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; CreateFromCluster(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; cluster);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt;&amp; nodes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt;&amp; edges <a href="CppOperatorAssign.htm">=</a> {});<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; DeepCopy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; map);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get all the other tests as one vector<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; GetAllTests();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the documented heteromorphous test concept maps<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the documented complex homomorphous test concept maps<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; GetComplexHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the documented simple homomorphous test concept maps<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; GetSimpleHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBCONCEPTMAPFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbconceptmapfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbconceptmapfactory.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedgefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt;&amp; nodes,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt;&amp; edges)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; p(<b><a href="CppNew.htm">new</a></b> ConceptMap(nodes,edges));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; pvdb::ConceptMapFactory::CreateFromCluster(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; cluster)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; p(<b><a href="CppNew.htm">new</a></b> ConceptMap(<a href="CppQuestion.htm">question</a>,cluster));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; focal_<a href="CppQuestion.htm">question</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>A single-node ConceptMap contains only the focal <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; p <a href="CppOperatorAssign.htm">=</a> Create( { pvdb::NodeFactory::Create(focal_<a href="CppQuestion.htm">question</a>) } );;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; pvdb::ConceptMapFactory::DeepCopy(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; map)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; &gt; a <a href="CppOperatorAssign.htm">=</a> map-&gt;GetEdges();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt; edges;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(a.begin(),a.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(edges),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; f <a href="CppOperatorAssign.htm">=</a> pvdb::EdgeFactory::DeepCopy(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*f,*e));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> map-&gt;GetNodes();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; nodes;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(nodes),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; f <a href="CppOperatorAssign.htm">=</a> pvdb::NodeFactory::DeepCopy(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*e,*f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; p <a href="CppOperatorAssign.htm">=</a> Create(nodes,edges);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*p,*map));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; pvdb::ConceptMapFactory::GetAllTests()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; v;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> w <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetSimpleHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(w.begin(),w.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; w <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetComplexHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(w.begin(),w.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> w <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(w.begin(),w.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>FIX 2012-01-02<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; pvdb::ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; v(17);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[0]: as-empty-as-can-get concept map (X <a href="CppOperatorAssign.htm">=</a> focal <a href="CppQuestion.htm">question</a>_<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map <a href="CppOperatorAssign.htm">=</a> Create("X");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[0]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[1]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[1]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[2]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[2]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[3]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_d,1.2,3.4,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[3]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[4]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_d,1.2,3.4,2,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[4]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[5]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_d,1.2,3.4,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[5]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[6]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_d,1.2,3.4,2,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[6]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[7]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[7]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[8]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[8]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[9]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,2,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[9]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[10]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,1.2,3.4,2,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[10]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[11]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,2,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,3,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_c<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[11]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[12]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,2,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,3,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,1,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_c<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[12]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[13]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,2,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,3,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_c<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[13]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[14]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,2,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,3,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,1,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_c<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[14]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[15]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_c(pvdb::ConceptFactory::Create("B", { {"B-1",pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d} },0,1,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create("C", { {"C-1",pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d},{"C-2",pvdb::Competency::misc}},-1,1,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("D", { {"D-1",pvdb::Competency::misc},{"D-2",pvdb::Competency::misc},{"D-3",pvdb::Competency::misc}},-1,-1,-1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c(pvdb::NodeFactory::Create(concept_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_d(pvdb::NodeFactory::Create(concept_d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_e(pvdb::NodeFactory::Create(concept_e));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_h(pvdb::ConceptFactory::Create("2",{{"2-I",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3",{{"3-I",pvdb::Competency::misc},{"3-II",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_i(pvdb::ConceptFactory::Create("4",{{"4-I",pvdb::Competency::misc},{"4-II",pvdb::Competency::misc},{"4-III",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_j(pvdb::ConceptFactory::Create("5",{{"5-I",pvdb::Competency::misc},{"5-II",pvdb::Competency::misc},{"5-III",pvdb::Competency::misc},{"5-IV",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_f,1.2,3.4,2,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_g,2.3,4.5,3,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_h,3.4,5.6,4,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_d(pvdb::EdgeFactory::Create(concept_i,4.5,6.7,1,<b><a href="CppFalse.htm">false</a></b>,4,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_e(pvdb::EdgeFactory::Create(concept_j,5.6,7.8,0,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_d,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_e<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_d,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_e<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.at(15)=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[16]: complex rated concept map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_c(pvdb::ConceptFactory::Create("B", { {"B-1: profession",pvdb::Competency::profession} },0,1,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create("C", { {"C-1: organisations",pvdb::Competency::organisations},{"C-2: social_surroundings",pvdb::Competency::social_surroundings}},2,1,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("D", { {"D-1: target_audience",pvdb::Competency::target_audience},{"D-2: ti_knowledge",pvdb::Competency::ti_knowledge},{"D-3: prof_growth",pvdb::Competency::prof_growth},{"D-4: misc",pvdb::Competency::misc}},0,1,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c(pvdb::NodeFactory::Create(concept_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_d(pvdb::NodeFactory::Create(concept_d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_e(pvdb::NodeFactory::Create(concept_e));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_h(pvdb::ConceptFactory::Create("2",{{"2-I",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3",{{"3-I",pvdb::Competency::misc},{"3-II",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_i(pvdb::ConceptFactory::Create("4",{{"4-I",pvdb::Competency::misc},{"4-II",pvdb::Competency::misc},{"4-III",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_j(pvdb::ConceptFactory::Create("5",{{"5-I",pvdb::Competency::misc},{"5-II",pvdb::Competency::misc},{"5-III",pvdb::Competency::misc},{"5-IV",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_f,1.2,3.4,2,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_g,2.3,4.5,3,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_h,3.4,5.6,4,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_d(pvdb::EdgeFactory::Create(concept_i,4.5,6.7,1,<b><a href="CppFalse.htm">false</a></b>,4,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_e(pvdb::EdgeFactory::Create(concept_j,5.6,7.8,0,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_d,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_e<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_d,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_e<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.at(16)=concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; pvdb::ConceptMapFactory::GetComplexHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; v;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[0] (note: same as heteromorphous[11])<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,2,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,3,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[1]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,1,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,3,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,2,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[2]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,2,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,1,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,3,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, { edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[3]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,3,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,2,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, { edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[4]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,2,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,3,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, { edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[5]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,3,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,2,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,1,<b><a href="CppFalse.htm">false</a></b>,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A") }, { edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[6] (note: same as heteromorphous[11], yet arrows reversed<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,2,<b><a href="CppTrue.htm">true</a></b>,1,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,3,<b><a href="CppTrue.htm">true</a></b>,2,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,1,<b><a href="CppTrue.htm">true</a></b>,3,<b><a href="CppFalse.htm">false</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, { edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[7]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_a(pvdb::ConceptFactory::Create("X"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_b(pvdb::ConceptFactory::Create("A"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_c(pvdb::ConceptFactory::Create("C"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create("B"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_a(pvdb::NodeFactory::Create(concept_a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_b(pvdb::NodeFactory::Create(concept_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c(pvdb::NodeFactory::Create(concept_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_d(pvdb::NodeFactory::Create(concept_d));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,3,<b><a href="CppTrue.htm">true</a></b>,1,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,2,<b><a href="CppTrue.htm">true</a></b>,3,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,1,<b><a href="CppTrue.htm">true</a></b>,2,<b><a href="CppFalse.htm">false</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, { edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[8]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_a(pvdb::ConceptFactory::Create("X"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_b(pvdb::ConceptFactory::Create("B"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_c(pvdb::ConceptFactory::Create("A"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create("C"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_a(pvdb::NodeFactory::Create(concept_a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_b(pvdb::NodeFactory::Create(concept_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c(pvdb::NodeFactory::Create(concept_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_d(pvdb::NodeFactory::Create(concept_d));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,1,<b><a href="CppTrue.htm">true</a></b>,2,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,3,<b><a href="CppTrue.htm">true</a></b>,1,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,2,<b><a href="CppTrue.htm">true</a></b>,3,<b><a href="CppFalse.htm">false</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, { edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[9]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_a(pvdb::ConceptFactory::Create("X"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_b(pvdb::ConceptFactory::Create("B"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_c(pvdb::ConceptFactory::Create("C"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create("A"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_a(pvdb::NodeFactory::Create(concept_a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_b(pvdb::NodeFactory::Create(concept_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c(pvdb::NodeFactory::Create(concept_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_d(pvdb::NodeFactory::Create(concept_d));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,1,<b><a href="CppTrue.htm">true</a></b>,3,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,2,<b><a href="CppTrue.htm">true</a></b>,1,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,3,<b><a href="CppTrue.htm">true</a></b>,2,<b><a href="CppFalse.htm">false</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, { edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[10]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,3,<b><a href="CppTrue.htm">true</a></b>,2,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,1,<b><a href="CppTrue.htm">true</a></b>,3,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,2,<b><a href="CppTrue.htm">true</a></b>,1,<b><a href="CppFalse.htm">false</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, { edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[11]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_a(pvdb::ConceptFactory::Create("X"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_b(pvdb::ConceptFactory::Create("C"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_c(pvdb::ConceptFactory::Create("B"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create("A"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_a(pvdb::NodeFactory::Create(concept_a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_b(pvdb::NodeFactory::Create(concept_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c(pvdb::NodeFactory::Create(concept_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_d(pvdb::NodeFactory::Create(concept_d));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_e,1.2,3.4,2,<b><a href="CppTrue.htm">true</a></b>,3,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_f,2.3,4.5,1,<b><a href="CppTrue.htm">true</a></b>,2,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_g,3.4,5.6,3,<b><a href="CppTrue.htm">true</a></b>,1,<b><a href="CppFalse.htm">false</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, { edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 12);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; pvdb::ConceptMapFactory::GetSimpleHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; v(6);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[0]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[0] <a href="CppOperatorAssign.htm">=</a> concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[1]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[1] <a href="CppOperatorAssign.htm">=</a> concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[2]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[2] <a href="CppOperatorAssign.htm">=</a> concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[3]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[3] <a href="CppOperatorAssign.htm">=</a> concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[4]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[4] <a href="CppOperatorAssign.htm">=</a> concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[5]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("A")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[5] <a href="CppOperatorAssign.htm">=</a> concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbedge.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbedge.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBEDGE_H<br/>
<a href="CppDefine.htm">#define</a> PVDBEDGE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> EdgeFactory;<br/>
<br/>
<a href="CppComment.htm">///</a>An Edge is the GUI-independent part of the edges used in <a href="CppQt.htm">Qt</a>PvdbConceptMap.<br/>
<a href="CppComment.htm">///</a>An Edge goes from one Node to another, which must a different Node<br/>
<b><a href="CppStruct.htm">struct</a></b> Edge<br/>
{<br/>
&nbsp;&nbsp;Edge(<b><a href="CppConst.htm">const</a></b> pvdb::Edge&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;pvdb::Edge&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> pvdb::Edge&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain an Edge from an <a href="CppXml.htm">XML</a> <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&nbsp;&nbsp;GetConcept() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_concept; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt;&nbsp;&nbsp;GetConcept()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <b><a href="CppReturn.htm">return</a></b> m_concept; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Node index <b><a href="CppThis.htm">this</a></b> edge originates from<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetFrom() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_from; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Node index <b><a href="CppThis.htm">this</a></b> edge goes to<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetTo() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_to; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the x coordinat<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetX() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_x; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the y coordinat<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetY() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_y; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the edge have an arrow at the head?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> HasHeadArrow() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_head_arrow; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Similar to <b><a href="CppOperatorEqual.htm">operator==</a></b>, except that the coordinats are not checked<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> HasSameContent(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; rhs);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the edge have an arrow at the tail?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> HasTailArrow() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_tail_arrow; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get some testing edges<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt; GetTests();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetConcept(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept) { m_concept <a href="CppOperatorAssign.htm">=</a> concept; } <a href="CppComment.htm">//</a>NEW 2013-01-07<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the Node index <b><a href="CppThis.htm">this</a></b> edge originates from<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetFrom(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set <b><a href="CppIf.htm">if</a></b> the head has an arrow<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetHeadArrow(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> has_head_arrow);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set <b><a href="CppIf.htm">if</a></b> the tail has an arrow<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetTailArrow(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> has_tail_arrow);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the Node index <b><a href="CppThis.htm">this</a></b> edge goes to<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetTo(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> an Edge from an <a href="CppXml.htm">XML</a> <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; c);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when an Edge attribute has changed<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> (<b><a href="CppConst.htm">const</a></b> Edge*)&gt; m_signal_changed;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Concept on the Edge<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; m_concept;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Node index <b><a href="CppThis.htm">this</a></b> edge originates from<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_from;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is there an arrowhead at the 'to' node?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_head_arrow;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is there an arrowhead at the 'from' node?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_tail_arrow;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Node index <b><a href="CppThis.htm">this</a></b> edge goes to<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_to;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The x-coordinat<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_x;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The y-coordinat<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_y;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Block <a href="CppDestructor.htm">destructor</a>, except <b><a href="CppFor.htm">for</a></b> the <b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~Edge() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Edge* x);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Block <a href="CppConstructor.htm">constructor</a>, except <b><a href="CppFor.htm">for</a></b> EdgeFactory<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> EdgeFactory;<br/>
&nbsp;&nbsp;Edge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &amp; concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> concept_x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> concept_y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> tail_arrow,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> head_arrow);<br/>
<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::Edge&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Edge&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::Edge&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Edge&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::Edge&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Edge&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbedgefactory.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBEDGE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbedge.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbedge.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQRegExp.htm">QRegExp</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedgefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
pvdb::Edge::Edge(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &amp; concept,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> concept_x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> concept_y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> tail_arrow,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> head_arrow)<br/>
&nbsp;&nbsp;: m_concept(concept),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_from(from),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_head_arrow(head_arrow),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tail_arrow(tail_arrow),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to(to),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x(concept_x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y(concept_y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(to <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from <a href="CppOperatorNotEqual.htm">!=</a> to);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; pvdb::Edge::From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 13);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(0,6) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;edge&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(s.size() <a href="CppOperatorMinus.htm">-</a> 7,7) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/edge&gt;"));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_concept<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;concept&gt;.*&lt;/concept&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept <a href="CppOperatorAssign.htm">=</a> Concept::From<a href="CppXml.htm">Xml</a>(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_from<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> from <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;from&gt;.*&lt;/from&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;from <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_head_arrow<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> head_arrow <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;head_arrow&gt;.*&lt;/head_arrow&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;head_arrow <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppBool.htm">bool</a></b>&gt;(<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_tail_arrow<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> tail_arrow <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;tail_arrow&gt;.*&lt;/tail_arrow&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tail_arrow <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppBool.htm">bool</a></b>&gt;(<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_to<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> to <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;to&gt;.*&lt;/to&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;to <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_x<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;x&gt;.*&lt;/x&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_y<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;y&gt;.*&lt;/y&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge(<b><a href="CppNew.htm">new</a></b> Edge(concept,x,y,from,tail_arrow,to,head_arrow));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> edge;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt; pvdb::Edge::GetTests()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> test_concepts <a href="CppOperatorAssign.htm">=</a> ConceptFactory::GetTests();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt; result;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(test_concepts.begin(),test_concepts.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;result](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge(<b><a href="CppNew.htm">new</a></b> Edge(concept,1.2,3.4,0,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge(<b><a href="CppNew.htm">new</a></b> Edge(concept,0,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge(<b><a href="CppNew.htm">new</a></b> Edge(concept,0,3,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge(<b><a href="CppNew.htm">new</a></b> Edge(concept,1,2,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge(<b><a href="CppNew.htm">new</a></b> Edge(concept,1,3,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge(<b><a href="CppNew.htm">new</a></b> Edge(concept,2,3,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Edge::SetFrom(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_from <a href="CppOperatorNotEqual.htm">!=</a> from)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_from <a href="CppOperatorAssign.htm">=</a> from;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Edge::SetHeadArrow(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> has_head_arrow)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_head_arrow <a href="CppOperatorNotEqual.htm">!=</a> has_head_arrow)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_head_arrow <a href="CppOperatorAssign.htm">=</a> has_head_arrow;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Edge::SetTailArrow(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> has_tail_arrow)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_tail_arrow <a href="CppOperatorNotEqual.htm">!=</a> has_tail_arrow)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tail_arrow <a href="CppOperatorAssign.htm">=</a> has_tail_arrow;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Edge::SetTo(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(to <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_to <a href="CppOperatorNotEqual.htm">!=</a> to)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to <a href="CppOperatorAssign.htm">=</a> to;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Edge::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test member variables<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Started pvdb::Edge::Test");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(Edge::GetTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <a href="CppCopyConstructor.htm">copy constructor</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; c <a href="CppOperatorAssign.htm">=</a> pvdb::EdgeFactory::DeepCopy(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge <a href="CppOperatorEqual.htm">==</a> c); <a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> To<a href="CppXml.htm">Xml</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; d <a href="CppOperatorAssign.htm">=</a> From<a href="CppXml.htm">Xml</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Edge::Test finished successfully");<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::Edge::To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; edge)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;edge&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Concept::To<a href="CppXml.htm">Xml</a>(edge-&gt;GetConcept());<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;from&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> edge-&gt;GetFrom() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/from&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;head_arrow&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> edge-&gt;HasHeadArrow() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/head_arrow&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;tail_arrow&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> edge-&gt;HasTailArrow() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/tail_arrow&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;to&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> edge-&gt;GetTo() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/to&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;x&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> edge-&gt;GetX() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/x&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;y&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> edge-&gt;GetY() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/y&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/edge&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 13);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(0,6) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;edge&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(r.size() <a href="CppOperatorMinus.htm">-</a> 7,7) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/edge&gt;"));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> r;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::Edge&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Edge&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs.GetConcept()); <a href="CppAssert.htm">assert</a>(rhs.GetConcept());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IsEqual(*lhs.GetConcept(),*rhs.GetConcept())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetFrom()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> rhs.GetFrom()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetTo()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> rhs.GetTo()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetX()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> rhs.GetX()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetY()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> rhs.GetY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.HasHeadArrow() <a href="CppOperatorEqual.htm">==</a> rhs.HasHeadArrow()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.HasTailArrow() <a href="CppOperatorEqual.htm">==</a> rhs.HasTailArrow();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> IsEqual(*lhs,*rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;(rhs);<br/>
}<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbedgefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbedgefactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBEDGEFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> PVDBEDGEFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> EdgeFactory<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> concept_x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> concept_y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> tail_arrow,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> head_arrow);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; DeepCopy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; edge);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt; GetTests();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBEDGEFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbedgefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbedgefactory.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbedgefactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedgefactory.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; pvdb::EdgeFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> concept_x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> concept_y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> tail_arrow,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> head_arrow)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept-&gt;GetExamples());<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; p(<b><a href="CppNew.htm">new</a></b> Edge(concept,concept_x,concept_y,from,tail_arrow,to,head_arrow));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; pvdb::EdgeFactory::DeepCopy(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; edge)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::DeepCopy(edge-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; p <a href="CppOperatorAssign.htm">=</a> pvdb::EdgeFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetFrom(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;HasTailArrow(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetTo(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;HasHeadArrow()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*edge,*p));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt; pvdb::EdgeFactory::GetTests()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt; edges;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(edges),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; p(<b><a href="CppNew.htm">new</a></b> Edge(c,x,y,0,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> edges;<br/>
}<br/>
<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbexample.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbexample.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBEXAMPLE_H<br/>
<a href="CppDefine.htm">#define</a> PVDBEXAMPLE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ExampleFactory;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Example<br/>
{<br/>
&nbsp;&nbsp;Example(<b><a href="CppConst.htm">const</a></b> pvdb::Example&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;pvdb::Example&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> pvdb::Example&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a pvdb::Competency to a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> CompetencyToStr(<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create an example from <a href="CppXml.htm">XML</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the competency, as might be judged by an assessor<br/>
&nbsp;&nbsp;pvdb::Competency GetCompetency() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_competency; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the text of the example<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetText() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_text; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the competency<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetCompetency(<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the text<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetText(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; text);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a <a href="CppStdString.htm">std::string</a> to a pvdb::Competency<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> pvdb::Competency StrToCompetency(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> Example to a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; t);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when SetCompetency changes the competency<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(Example*)&gt; m_signal_competency_changed;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when SetText changes the text<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(Example*)&gt; m_signal_text_changed;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The competency, as might be judged by an assessor<br/>
&nbsp;&nbsp;pvdb::Competency m_competency;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The text of the example<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example: 'Plato', 'When I was a kid', 'As I did on holiday'<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_text;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the competency with a string<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetCompetencyAsStr(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use checked_delete only<br/>
&nbsp;&nbsp;~Example() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Example* x);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let ExampleFactory create Example <a href="CppInstance.htm">instances</a><br/>
&nbsp;&nbsp;Example(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; text, <b><a href="CppConst.htm">const</a></b> pvdb::Competency competency <a href="CppOperatorAssign.htm">=</a> pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> ExampleFactory;<br/>
};<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::Example&amp; lhs,<b><a href="CppConst.htm">const</a></b> pvdb::Example&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::Example&amp; lhs,<b><a href="CppConst.htm">const</a></b> pvdb::Example&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplefactory.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBEXAMPLE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbexample.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbexample.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQRegExp.htm">QRegExp</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
pvdb::Example::Example(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; text, <b><a href="CppConst.htm">const</a></b> pvdb::Competency competency)<br/>
&nbsp;&nbsp;: m_competency(competency),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_text(text)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::Example::CompetencyToStr(<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (competency)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d: <b><a href="CppReturn.htm">return</a></b> "un<a href="CppInitialize.htm">initialize</a>d";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::profession: <b><a href="CppReturn.htm">return</a></b> "profession";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::organisations: <b><a href="CppReturn.htm">return</a></b> "organisations";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::social_surroundings: <b><a href="CppReturn.htm">return</a></b> "social_surroundings";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::target_audience: <b><a href="CppReturn.htm">return</a></b> "target_audience";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::ti_knowledge: <b><a href="CppReturn.htm">return</a></b> "ti_knowledge";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::prof_growth: <b><a href="CppReturn.htm">return</a></b> "prof_growth";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pvdb::Competency::misc: <b><a href="CppReturn.htm">return</a></b> "misc";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("pvdb::Example::CompetencyToStr: unknown Competency");<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; pvdb::Example::From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 17);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(0,9) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;example&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(s.size() <a href="CppOperatorMinus.htm">-</a> 10,10) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/example&gt;"));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text;<br/>
&nbsp;&nbsp;pvdb::Competency competency <a href="CppOperatorAssign.htm">=</a> pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>text<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;text&gt;.*&lt;/text&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "&lt;text&gt;.*&lt;/text&gt; must be present once in an Example");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>competency<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;competency&gt;.*&lt;/competency&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;competency <a href="CppOperatorAssign.htm">=</a> StrToCompetency(<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pvdb::ExampleFactory::Create(text,competency);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Example::SetCompetency(<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_competency <a href="CppOperatorNotEqual.htm">!=</a> competency)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_competency <a href="CppOperatorAssign.htm">=</a> competency;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_competency_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Example::SetText(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; text)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_text <a href="CppOperatorNotEqual.htm">!=</a> text)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_text <a href="CppOperatorAssign.htm">=</a> text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_text_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
pvdb::Competency pvdb::Example::StrToCompetency(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "un<a href="CppInitialize.htm">initialize</a>d") <b><a href="CppReturn.htm">return</a></b> pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "profession") <b><a href="CppReturn.htm">return</a></b> pvdb::Competency::profession;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "organisations") <b><a href="CppReturn.htm">return</a></b> pvdb::Competency::organisations;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "social_surroundings") <b><a href="CppReturn.htm">return</a></b> pvdb::Competency::social_surroundings;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "target_audience") <b><a href="CppReturn.htm">return</a></b> pvdb::Competency::target_audience;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "ti_knowledge") <b><a href="CppReturn.htm">return</a></b> pvdb::Competency::ti_knowledge;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "prof_growth") <b><a href="CppReturn.htm">return</a></b> pvdb::Competency::prof_growth;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "misc") <b><a href="CppReturn.htm">return</a></b> pvdb::Competency::misc;<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("pvdb::Example::StrToCompetency: unknown string");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Example::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting pvdb::Example::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test of <b><a href="CppOperatorEqual.htm">operator==</a></b> and <b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(pvdb::ExampleFactory::GetTests().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; a <a href="CppOperatorAssign.htm">=</a> pvdb::ExampleFactory::GetTests().at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Example&gt; b <a href="CppOperatorAssign.htm">=</a> pvdb::ExampleFactory::GetTests().at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>b); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; c <a href="CppOperatorAssign.htm">=</a> pvdb::ExampleFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Example&gt; d <a href="CppOperatorAssign.htm">=</a> pvdb::ExampleFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>d); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i<a href="CppOperatorEqual.htm">==</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorNotEqual.htm">!=</a>c); <a href="CppAssert.htm">assert</a>(a<a href="CppOperatorNotEqual.htm">!=</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b<a href="CppOperatorNotEqual.htm">!=</a>c); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorNotEqual.htm">!=</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c<a href="CppOperatorNotEqual.htm">!=</a>a); <a href="CppAssert.htm">assert</a>(c<a href="CppOperatorNotEqual.htm">!=</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d<a href="CppOperatorNotEqual.htm">!=</a>a); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorNotEqual.htm">!=</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppIf.htm">if</a></b> unrated and rated examples are noticed as different<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; a <a href="CppOperatorAssign.htm">=</a> ExampleFactory::Create("1",Competency::misc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; b <a href="CppOperatorAssign.htm">=</a> ExampleFactory::Create("1",Competency::misc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; c <a href="CppOperatorAssign.htm">=</a> ExampleFactory::Create("1",Competency::un<a href="CppInitialize.htm">initialize</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> a); <a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b); <a href="CppAssert.htm">assert</a>(a <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> a); <a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> b); <a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorNotEqual.htm">!=</a> a); <a href="CppAssert.htm">assert</a>(c <a href="CppOperatorNotEqual.htm">!=</a> b); <a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Con<a href="CppVersion.htm">version</a> between <a href="CppStdString.htm">std::string</a> and competency<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Competency&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::profession,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::organisations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::social_surroundings,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::target_audience,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::ti_knowledge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::prof_growth,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::misc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> pvdb::Competency&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pvdb::Example::CompetencyToStr(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Competency&gt; x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(w.begin(),w.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pvdb::Example::StrToCompetency(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v <a href="CppOperatorEqual.htm">==</a> x);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Con<a href="CppVersion.htm">version</a> between <b><a href="CppClass.htm">class</a></b> and <a href="CppXml.htm">XML</a>, test <b><a href="CppFor.htm">for</a></b> equality<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const( ::pvdb::ExampleFactory::GetTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> pvdb::Example::To<a href="CppXml.htm">Xml</a>(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; f(Example::From<a href="CppXml.htm">Xml</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e <a href="CppOperatorEqual.htm">==</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const( ::pvdb::ExampleFactory::GetTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; e <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> pvdb::Example::To<a href="CppXml.htm">Xml</a>(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; f <a href="CppOperatorAssign.htm">=</a> v[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> pvdb::Example::To<a href="CppXml.htm">Xml</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e <a href="CppOperatorEqual.htm">==</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e <a href="CppOperatorNotEqual.htm">!=</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorNotEqual.htm">!=</a> t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Example::Test finished successfully");<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::Example::To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; c)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c);<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;example&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp; "&lt;text&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetText();<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp; "&lt;/text&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp; "&lt;competency&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;&nbsp; CompetencyToStr(c-&gt;GetCompetency());<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp; "&lt;/competency&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/example&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 17);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(0,9) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;example&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(r.size() <a href="CppOperatorMinus.htm">-</a> 10,10) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/example&gt;"));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> r;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs-&gt;GetText() <a href="CppOperatorEqual.htm">==</a> rhs-&gt;GetText()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs-&gt;GetCompetency() <a href="CppOperatorEqual.htm">==</a> rhs-&gt;GetCompetency();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetText() &lt; rhs-&gt;GetText()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetText() &gt; rhs-&gt;GetText()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs-&gt;GetCompetency() &lt; rhs-&gt;GetCompetency();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetText() &gt; rhs-&gt;GetText()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;GetText() &lt; rhs-&gt;GetText()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs-&gt;GetCompetency() &gt; rhs-&gt;GetCompetency();<br/>
}<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbexamplefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbexamplefactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBEXAMPLEFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> PVDBEXAMPLEFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ExampleFactory<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create an example from string and <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; Create(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; text, <b><a href="CppConst.htm">const</a></b> pvdb::Competency&amp; competency);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create examples <b><a href="CppFor.htm">for</a></b> strings<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Note that all pvdb::Competency values are set to un<a href="CppInitialize.htm">initialize</a>d<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt; CreateExamples(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt; GetTests();<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBEXAMPLEFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbexamplefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbexamplefactory.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplefactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; pvdb::ExampleFactory::Create(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; text, <b><a href="CppConst.htm">const</a></b> pvdb::Competency&amp; competency)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; example(<b><a href="CppNew.htm">new</a></b> Example(text,competency));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> example;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt; pvdb::ExampleFactory::GetTests()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 0",Competency::profession),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 1",Competency::organisations),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 2",Competency::social_surroundings),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 3",Competency::target_audience),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 4",Competency::ti_knowledge),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 5",Competency::prof_growth),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 6",Competency::misc),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("",Competency::un<a href="CppInitialize.htm">initialize</a>d),<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbexamples.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbexamples.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBEXAMPLES_H<br/>
<a href="CppDefine.htm">#define</a> PVDBEXAMPLES_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppContainer.htm">Container</a> of Example <a href="CppInstance.htm">instances</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Examples<br/>
{<br/>
&nbsp;&nbsp;Examples(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt;&amp; v);<br/>
&nbsp;&nbsp;Examples(<b><a href="CppConst.htm">const</a></b> Example&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Examples&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Example&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt;&amp; Get() { <b><a href="CppReturn.htm">return</a></b> m_v; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; Get() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt; &amp;c);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Something of one of the examples was changed<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<b><a href="CppConst.htm">const</a></b> Examples*)&gt; m_signal_examples_changed;<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Examples() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt; m_v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; example); <a href="CppComment.htm">//</a>?not used<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/All <b><a href="CppQtSignals.htm">signals</a></b> <a href="CppEmit.htm">emitted</a> from the examples are connected to <b><a href="CppThis.htm">this</a></b> <a href="CppMemberFunction.htm">member function</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnExampleChanged();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Correct <a href="CppFriend.htm">befriending</a>, from http://richelbilderbeek.nl/CppChecked_delete.htm<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Examples* x);<br/>
};<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::Examples&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Examples&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::Examples&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Examples&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> pvdb::Examples&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Examples&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
<a href="CppComment.htm">///</a>Two pvdb::Examples <a href="CppInstance.htm">instances</a> are sorted as follows:<br/>
<a href="CppComment.htm">///</a>(1) By their number of examples<br/>
<a href="CppComment.htm">///</a>(2) (<b><a href="CppIf.htm">if</a></b> the sizes are equal) Alphabetically on the first different example<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBEXAMPLES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbexamples.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbexamples.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQRegExp.htm">QRegExp</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplesfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
pvdb::Examples::Examples(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt;&amp; v)<br/>
&nbsp;&nbsp;: m_v(v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_v.begin(),m_v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; example)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;example-&gt;m_signal_competency_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;Examples::OnExampleChanged,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;example-&gt;m_signal_text_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;Examples::OnExampleChanged,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(m_v.begin(),m_v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; e) { <b><a href="CppReturn.htm">return</a></b> !e; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All Example <a href="CppInstance.htm">instances</a> must be <a href="CppInitialize.htm">initialize</a>d");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Examples::<a href="CppAdd.htm">Add</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; example)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect the example<br/>
&nbsp;&nbsp;example-&gt;m_signal_competency_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;Examples::OnExampleChanged,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;example-&gt;m_signal_text_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;Examples::OnExampleChanged,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the example and notify <b><a href="CppThis.htm">this</a></b> change<br/>
&nbsp;&nbsp;m_v.push_back(example);<br/>
&nbsp;&nbsp;m_signal_examples_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; pvdb::Examples::From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 20);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(0,10) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;examples&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(s.size() <a href="CppOperatorMinus.htm">-</a> 11,11) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/examples&gt;"));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt; examples;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_<a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;example&gt;.*&lt;/example&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(examples),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Example::From<a href="CppXml.htm">Xml</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ExamplesFactory::Create(examples);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; pvdb::Examples::Get() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppAdd.htm">Add</a>Const(m_v);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Examples::OnExampleChanged()<br/>
{<br/>
&nbsp;&nbsp;m_signal_examples_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Examples::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Started pvdb::Examples::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test of <b><a href="CppOperatorEqual.htm">operator==</a></b> and <b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(ExamplesFactory::GetTests().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt; a <a href="CppOperatorAssign.htm">=</a> ExamplesFactory::GetTests().at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Examples&gt; b <a href="CppOperatorAssign.htm">=</a> ExamplesFactory::GetTests().at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>b); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt; c <a href="CppOperatorAssign.htm">=</a> ExamplesFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Examples&gt; d <a href="CppOperatorAssign.htm">=</a> ExamplesFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>d); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i<a href="CppOperatorEqual.htm">==</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorNotEqual.htm">!=</a>c); <a href="CppAssert.htm">assert</a>(a<a href="CppOperatorNotEqual.htm">!=</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b<a href="CppOperatorNotEqual.htm">!=</a>c); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorNotEqual.htm">!=</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c<a href="CppOperatorNotEqual.htm">!=</a>a); <a href="CppAssert.htm">assert</a>(c<a href="CppOperatorNotEqual.htm">!=</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d<a href="CppOperatorNotEqual.htm">!=</a>a); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorNotEqual.htm">!=</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Con<a href="CppVersion.htm">version</a> between <b><a href="CppClass.htm">class</a></b> and <a href="CppXml.htm">XML</a>, test <b><a href="CppFor.htm">for</a></b> equality<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(ExamplesFactory::GetTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> pvdb::Examples::To<a href="CppXml.htm">Xml</a>(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt; f(Examples::From<a href="CppXml.htm">Xml</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e <a href="CppOperatorEqual.htm">==</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(ExamplesFactory::GetTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; e <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> pvdb::Examples::To<a href="CppXml.htm">Xml</a>(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; f <a href="CppOperatorAssign.htm">=</a> v[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> pvdb::Examples::To<a href="CppXml.htm">Xml</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e <a href="CppOperatorEqual.htm">==</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e <a href="CppOperatorNotEqual.htm">!=</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorNotEqual.htm">!=</a> t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppIf.htm">if</a></b> unrated and rated examples are noticed as different<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; a <a href="CppOperatorAssign.htm">=</a> ExampleFactory::Create("1",Competency::misc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; b <a href="CppOperatorAssign.htm">=</a> ExampleFactory::Create("1",Competency::misc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; c <a href="CppOperatorAssign.htm">=</a> ExampleFactory::Create("1",Competency::un<a href="CppInitialize.htm">initialize</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> a); <a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b); <a href="CppAssert.htm">assert</a>(a <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> a); <a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> b); <a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorNotEqual.htm">!=</a> a); <a href="CppAssert.htm">assert</a>(c <a href="CppOperatorNotEqual.htm">!=</a> b); <a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; v; v.push_back(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; w; w.push_back(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; x; x.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; d <a href="CppOperatorAssign.htm">=</a> ExamplesFactory::Create(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; e <a href="CppOperatorAssign.htm">=</a> ExamplesFactory::Create(w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; f <a href="CppOperatorAssign.htm">=</a> ExamplesFactory::Create(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d <a href="CppOperatorEqual.htm">==</a> d); <a href="CppAssert.htm">assert</a>(d <a href="CppOperatorEqual.htm">==</a> e); <a href="CppAssert.htm">assert</a>(d <a href="CppOperatorNotEqual.htm">!=</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e <a href="CppOperatorEqual.htm">==</a> d); <a href="CppAssert.htm">assert</a>(e <a href="CppOperatorEqual.htm">==</a> e); <a href="CppAssert.htm">assert</a>(e <a href="CppOperatorNotEqual.htm">!=</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorNotEqual.htm">!=</a> d); <a href="CppAssert.htm">assert</a>(f <a href="CppOperatorNotEqual.htm">!=</a> e); <a href="CppAssert.htm">assert</a>(f <a href="CppOperatorEqual.htm">==</a> f);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Examples::Test finished successfully");<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::Examples::To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt; &amp;c)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;examples&gt;";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; examples <a href="CppOperatorAssign.htm">=</a> c-&gt;GetExamples();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> example <a href="CppOperatorAssign.htm">=</a> c-&gt;Get();<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(example.begin(),example.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;s](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Example::To<a href="CppXml.htm">Xml</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/examples&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 20);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(0,10) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;examples&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(r.size() <a href="CppOperatorMinus.htm">-</a> 11,11) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/examples&gt;"));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> r;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::Examples&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Examples&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.Get().size() <a href="CppOperatorNotEqual.htm">!=</a> rhs.Get().size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.Get().empty()) { <a href="CppAssert.htm">assert</a>(rhs.Get().empty()); <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> lhs.Get();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; w <a href="CppOperatorAssign.htm">=</a> rhs.Get();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdEqual.htm">std::equal</a>(v.begin(),v.end(),w.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; a, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a <a href="CppOperatorEqual.htm">==</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> IsEqual(*lhs,*rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs<a href="CppOperatorEqual.htm">==</a>rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs<a href="CppOperatorEqual.htm">==</a>rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs<a href="CppOperatorEqual.htm">==</a>rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs<a href="CppOperatorEqual.htm">==</a>rhs);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;Get().size() &lt; rhs-&gt;Get().size()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;Get().size() &gt; rhs-&gt;Get().size()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs-&gt;Get().size() <a href="CppOperatorEqual.htm">==</a> rhs-&gt;Get().size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> lhs-&gt;Get().size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;Get()[i] &lt; rhs-&gt;Get()[i]) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs-&gt;Get()[i] &gt; rhs-&gt;Get()[i]) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbexamplesfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbexamplesfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBEXAMPLESFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> PVDBEXAMPLESFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ExamplesFactory<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Constructor</a> like<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; Create();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Copy-<a href="CppConstructor.htm">constructor</a> like<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; examples);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,Competency&gt; &gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; &gt; GetTests();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBEXAMPLESFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbexamplesfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbexamplesfactory.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplesfactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; pvdb::ExamplesFactory::Create()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; examples(<b><a href="CppNew.htm">new</a></b> Examples( {} ));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(examples);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> examples;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; pvdb::ExamplesFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; examples)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(examples);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; p <a href="CppOperatorAssign.htm">=</a> Create(examples-&gt;Get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; pvdb::ExamplesFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; p(<b><a href="CppNew.htm">new</a></b> Examples(v));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; pvdb::ExamplesFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt; w;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; q<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ExampleFactory::Create(p-&gt;GetText(),p-&gt;GetCompetency());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; examples(<b><a href="CppNew.htm">new</a></b> Examples(w));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(examples);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> examples;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; pvdb::ExamplesFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,Competency&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt; w;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,Competency&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; q<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ExampleFactory::Create(p.first,p.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; q <a href="CppOperatorAssign.htm">=</a> Create(w);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> q;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; &gt; pvdb::ExamplesFactory::GetTests()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; is <a href="CppOperatorAssign.htm">=</a> { {0}, {1}, {0,1,2,3}, {} };<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; &gt; v;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(is.begin(),is.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; js)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(js.begin(),js.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; p<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ExampleFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; q<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::ExamplesFactory::Create(w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDB<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> PVDB<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppRegexH.htm">regex</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<a href="CppComment.htm">///</a>The File used, also the <a href="CppMain.htm">main</a> director of the program's flow<br/>
<b><a href="CppStruct.htm">struct</a></b> File<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start an empty file<br/>
&nbsp;&nbsp;File();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a File from all its (non-<b><a href="CppStatic.htm">static</a></b>) member variables<br/>
&nbsp;&nbsp;File(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppAbout.htm">about</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; assessor_name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; cluster,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; concept_map,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; student_name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;File(<b><a href="CppConst.htm">const</a></b> File&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;File&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> File&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> <a href="CppXml.htm">XML</a> to File<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the string which indicates <b><a href="CppThis.htm">this</a></b> file is a PvdB file<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetAbout() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_about; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the assessor his/her name<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetAssessorName() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_assessor_name; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the student his/her clustering of concepts and examples<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt; GetCluster() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_cluster; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cluster&gt; GetCluster()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <b><a href="CppReturn.htm">return</a></b> m_cluster; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the concept map<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt; GetConceptMap() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_concept_map; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConceptMap&gt; GetConceptMap()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <b><a href="CppReturn.htm">return</a></b> m_concept_map; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the File filename extension<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> GetFilenameExtension() { <b><a href="CppReturn.htm">return</a></b> m_filename_extension; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the assessors' <a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppQuestion.htm">Question</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the student his/her name<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetStudentName() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_student_name; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a temporary filename<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> GetTempFileName();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a test filename<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> GetTestFileName();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain multiple test files<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; GetTests();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppVersion.htm">version</a>; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Load to File from disk<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; Load(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Save a File<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/File will have one line of <a href="CppXml.htm">XML</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the assessor his/her name<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetAssessorName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; assessor_name);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Write a <b><a href="CppNew.htm">new</a></b> clustering of concepts and examples<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetCluster(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; cluster);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Write a <b><a href="CppNew.htm">new</a></b> ConceptMap from a Cluster<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetConceptMap(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the student his/her name<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetStudentName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; student_name);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> File to <a href="CppXml.htm">XML</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> File&amp; file);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Block <a href="CppDestructor.htm">destructor</a>, except <b><a href="CppFor.htm">for</a></b> the <b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~File() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The string which indicates <b><a href="CppThis.htm">this</a></b> file is a PvdB file<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_about;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The assessor his/her name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_assessor_name;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The clustering of items<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; m_cluster;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The concept map<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; m_concept_map;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The file extension of a a File<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_filename_extension;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The student his/her name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_student_name;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppQuestion.htm">question</a> the student must answer<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdString.htm">std::string</a> m_<a href="CppQuestion.htm">question</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_<a href="CppVersion.htm">version</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/AutoSave, called after each setter<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AutoSave() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a file's content to a single <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> FileToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a File from <a href="CppVersion.htm">version</a> 0.1<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppConvert.htm">Convert</a>From_0_1(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; xml);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a File from <a href="CppVersion.htm">version</a> 0.2<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppConvert.htm">Convert</a>From_0_2(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; xml);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Correct <a href="CppFriend.htm">befriending</a>, from http://richelbilderbeek.nl/CppChecked_delete.htm<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(File* x);<br/>
};<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::File&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::File&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDB<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbfile.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQRegExp.htm">QRegExp</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfilefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbclusterfactory.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::File::m_filename_extension <a href="CppOperatorAssign.htm">=</a> "cmp";<br/>
<br/>
pvdb::File::File()<br/>
&nbsp;&nbsp;: m_about("<a href="ProjectVanDenBogaart.htm">ProjectVanDenBogaart</a>"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_assessor_name(""),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cluster(pvdb::ClusterFactory::Create( {} )),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept_map(pvdb::ConceptMapFactory::Create("...File::File_29...")),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_student_name(""),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppVersion.htm">version</a>("0.3")<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_cluster);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept_map);<br/>
}<br/>
<br/>
pvdb::File::File(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppAbout.htm">about</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; assessor_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; cluster,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; concept_map,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; student_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppVersion.htm">version</a>)<br/>
&nbsp;&nbsp;: m_about(<a href="CppAbout.htm">about</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_assessor_name(assessor_name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cluster(cluster),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept_map(concept_map),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_student_name(student_name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppVersion.htm">version</a>(<a href="CppVersion.htm">version</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_cluster);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept_map);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> concept_map-&gt;Get<a href="CppQuestion.htm">Question</a>());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::File::AutoSave() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Save("<b><a href="CppAuto.htm">auto</a></b>save1." <a href="CppOperatorPlus.htm">+</a> m_filename_extension);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Save("<b><a href="CppAuto.htm">auto</a></b>save2." <a href="CppOperatorPlus.htm">+</a> m_filename_extension);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::File::<a href="CppConvert.htm">Convert</a>From_0_1(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put &lt;examples&gt; around existing &lt;example&gt; tags<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> a <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::replace_all_copy(s,"&lt;/name&gt;&lt;example&gt;","&lt;/name&gt;&lt;examples&gt;&lt;example&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> b <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::replace_all_copy(a,"&lt;/example&gt;&lt;/concept&gt;","&lt;/example&gt;&lt;/examples&gt;&lt;/concept&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> c <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::replace_all_copy(b,"&lt;example&gt;","&lt;e$xample&gt;&lt;text&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> d <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::replace_all_copy(c,"&lt;/example&gt;","&lt;/text&gt;&lt;competency&gt;un<a href="CppInitialize.htm">initialize</a>d&lt;/competency&gt;&lt;/e$xample&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> e <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::replace_all_copy(d,"&lt;/examples&gt;&lt;/concept&gt;","&lt;/examples&gt;&lt;complexity&gt;-1&lt;/complexity&gt;&lt;concreteness&gt;-1&lt;/concreteness&gt;&lt;specificity&gt;-1&lt;/specificity&gt;&lt;/concept&gt;");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> &lt;examples&gt; when no &lt;example&gt; tags are present<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> f <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::replace_all_copy(e,"&lt;/name&gt;&lt;/concept&gt;","&lt;/name&gt;&lt;examples&gt;&lt;/examples&gt;&lt;complexity&gt;-1&lt;/complexity&gt;&lt;concreteness&gt;-1&lt;/concreteness&gt;&lt;specificity&gt;-1&lt;/specificity&gt;&lt;/concept&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> g <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::replace_all_copy(f,"$","");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> h <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::replace_all_copy(f,"&lt;<a href="CppVersion.htm">version</a>&gt;0.1&lt;/<a href="CppVersion.htm">version</a>&gt;","&lt;<a href="CppVersion.htm">version</a>&gt;0.2&lt;/<a href="CppVersion.htm">version</a>&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> h;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::File::<a href="CppConvert.htm">Convert</a>From_0_2(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> a <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::replace_all_copy(s,"&lt;/<a href="CppAbout.htm">about</a>&gt;&lt;cluster&gt;","&lt;/<a href="CppAbout.htm">about</a>&gt;&lt;assessor_name&gt;&lt;/assessor_name&gt;&lt;cluster&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::File::FileToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQFile.htm">QFile</a>::exists(filename.c_str()));<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> in(filename.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (!in.eof())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(in,t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>t;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; pvdb::File::From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> &amp;s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 13);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(0,6) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;file&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(s.size() <a href="CppOperatorMinus.htm">-</a> 7,7) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/file&gt;"));<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; f(<b><a href="CppNew.htm">new</a></b> File);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_about_str<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;<a href="CppAbout.htm">about</a>&gt;.*&lt;/<a href="CppAbout.htm">about</a>&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;m_about <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_assessor_name<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;assessor_name&gt;.*&lt;/assessor_name&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;m_assessor_name <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_cluster<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;cluster&gt;.*&lt;/cluster&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;m_cluster <a href="CppOperatorAssign.htm">=</a> Cluster::From<a href="CppXml.htm">Xml</a>(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_concept_map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;concept_map&gt;.*&lt;/concept_map&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;m_concept_map <a href="CppOperatorAssign.htm">=</a> ConceptMap::From<a href="CppXml.htm">Xml</a>(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_student_name<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;student_name&gt;.*&lt;/student_name&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;m_student_name <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;<a href="CppQuestion.htm">question</a>&gt;.*&lt;/<a href="CppQuestion.htm">question</a>&gt;)")).empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Must be obsolete");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_<a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;<a href="CppVersion.htm">version</a>&gt;.*&lt;/<a href="CppVersion.htm">version</a>&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;m_<a href="CppVersion.htm">version</a> <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> f;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::File::Get<a href="CppQuestion.htm">Question</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept_map);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_concept_map-&gt;Get<a href="CppQuestion.htm">Question</a>();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::File::GetTempFileName()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>("tmp.") <a href="CppOperatorPlus.htm">+</a> m_filename_extension;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::File::GetTestFileName()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>("test.") <a href="CppOperatorPlus.htm">+</a> m_filename_extension;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; pvdb::File::GetTests()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; &gt; clusters <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::GetTests();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(clusters.begin(),clusters.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(clusters.begin(),clusters.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } )); <a href="CppComment.htm">//</a>Do not use <a href="CppStdAll_of.htm">std::all_of</a> when crosscompiling<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; concept_maps <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetAllTests();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_clusters <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(clusters.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_concept_maps <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(concept_maps.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> cluster=0; cluster<a href="CppOperatorNotEqual.htm">!=</a>n_clusters; <a href="CppOperatorIncrement.htm">++</a>cluster)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> concept_map=0; concept_map<a href="CppOperatorNotEqual.htm">!=</a>n_concept_maps; <a href="CppOperatorIncrement.htm">++</a>concept_map)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppAbout.htm">about</a> <a href="CppOperatorAssign.htm">=</a> "<a href="CppAbout.htm">about</a>";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> assessor_name <a href="CppOperatorAssign.htm">=</a> "assessor_name";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> student_name <a href="CppOperatorAssign.htm">=</a> "student_name";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppVersion.htm">version</a> <a href="CppOperatorAssign.htm">=</a> "<a href="CppVersion.htm">version</a>";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(<b><a href="CppNew.htm">new</a></b> File(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAbout.htm">about</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assessor_name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters[cluster],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_maps[concept_map],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student_name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVersion.htm">version</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; pvdb::File::Load(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> &amp;filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> xml;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read <a href="CppXml.htm">XML</a> from file<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppFileToVector.htm">FileToVector</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorLessEqual.htm">&lt;=</a> 2); <a href="CppComment.htm">//</a>Allow empty line after text, due to difference in line ending<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xml <a href="CppOperatorAssign.htm">=</a> v[0];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Backwards compatiblity with file format <a href="CppVersion.htm">version</a> 0.1<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(xml,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;<a href="CppVersion.htm">version</a>&gt;.*&lt;/<a href="CppVersion.htm">version</a>&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppVersion.htm">version</a> <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppVersion.htm">version</a> <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("0.1"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xml <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>From_0_1(xml);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Backwards compatiblity with file format <a href="CppVersion.htm">version</a> 0.2<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(xml,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;<a href="CppVersion.htm">version</a>&gt;.*&lt;/<a href="CppVersion.htm">version</a>&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppVersion.htm">version</a> <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppVersion.htm">version</a> <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("0.2"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xml <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>From_0_2(xml);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file <a href="CppOperatorAssign.htm">=</a> pvdb::File::From<a href="CppXml.htm">Xml</a>(xml);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> file;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::File::Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> &amp;filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> correct extension<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> m_filename_extension))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> m_filename_extension<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> To<a href="CppXml.htm">Xml</a>(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> load results in the same File<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppFileToVector.htm">FileToVector</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have one line of <a href="CppXml.htm">XML</a>");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::File::SetAssessorName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; assessor_name)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(assessor_name.size() &gt; 1);<br/>
&nbsp;&nbsp;m_assessor_name <a href="CppOperatorAssign.htm">=</a> assessor_name;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;AutoSave();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::File::SetConceptMap(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;m_concept_map <a href="CppOperatorAssign.htm">=</a> concept_map;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;AutoSave();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::File::SetCluster(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; cluster)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cluster);<br/>
&nbsp;&nbsp;m_cluster <a href="CppOperatorAssign.htm">=</a> cluster;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;AutoSave();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::File::SetStudentName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; student_name)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(student_name.size() &gt; 1);<br/>
&nbsp;&nbsp;m_student_name <a href="CppOperatorAssign.htm">=</a> student_name;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;AutoSave();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::File::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Started pvdb::File::Test");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tmp_filename <a href="CppOperatorAssign.htm">=</a> pvdb::File::GetTempFileName();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <a href="CppCopyConstructor.htm">copy constructor</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; f(<b><a href="CppNew.htm">new</a></b> File);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;SetAssessorName("<a href="CppDebug.htm">debug</a> assessor name");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;SetStudentName("<a href="CppDebug.htm">debug</a> student name");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; g <a href="CppOperatorAssign.htm">=</a> pvdb::FileFactory::DeepCopy(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorEqual.htm">==</a> g);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Modify g, to test <b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;g-&gt;SetStudentName( f-&gt;GetStudentName() <a href="CppOperatorPlus.htm">+</a> " (modified)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorNotEqual.htm">!=</a> g);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;g-&gt;SetStudentName( f-&gt;GetStudentName());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorEqual.htm">==</a> g);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;g-&gt;SetAssessorName( f-&gt;GetAssessorName() <a href="CppOperatorPlus.htm">+</a> " (modified)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorNotEqual.htm">!=</a> g);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;g-&gt;SetAssessorName( f-&gt;GetAssessorName());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorEqual.htm">==</a> g);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Save/Load on empty File<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; firstfile(<b><a href="CppNew.htm">new</a></b> File);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;firstfile-&gt;Save(tmp_filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; secondfile(File::Load(tmp_filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(firstfile-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> secondfile-&gt;Get<a href="CppQuestion.htm">Question</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(firstfile <a href="CppOperatorEqual.htm">==</a> secondfile);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Modify f, to test <b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;firstfile-&gt;SetStudentName( firstfile-&gt;GetStudentName() <a href="CppOperatorPlus.htm">+</a> " (modified)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(firstfile <a href="CppOperatorNotEqual.htm">!=</a> secondfile);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Save/Load on file<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; firstfile(<b><a href="CppNew.htm">new</a></b> pvdb::File);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;firstfile-&gt;SetStudentName("Richel Bilderbeek");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> "Focal <a href="CppQuestion.htm">question</a>?";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::Create(<a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firstfile-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>firstfile-&gt;Set<a href="CppQuestion.htm">Question</a>("Focal <a href="CppQuestion.htm">question</a>?");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(firstfile-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;firstfile-&gt;Save(tmp_filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(firstfile-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; second_file(File::Load(tmp_filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(second_file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (second_file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorNotEqual.htm">!=</a> firstfile-&gt;Get<a href="CppQuestion.htm">Question</a>())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firstfile-&gt;Save("a.cmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;second_file-&gt;Save("b.cmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(firstfile-&gt;Get<a href="CppQuestion.htm">Question</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(second_file-&gt;Get<a href="CppQuestion.htm">Question</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(second_file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> firstfile-&gt;Get<a href="CppQuestion.htm">Question</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(firstfile <a href="CppOperatorEqual.htm">==</a> second_file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Modify f, to test <b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;firstfile-&gt;SetStudentName( firstfile-&gt;GetStudentName() <a href="CppOperatorPlus.htm">+</a> " (modified)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(firstfile <a href="CppOperatorNotEqual.htm">!=</a> second_file);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>5; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i) <a href="CppOperatorPlus.htm">+</a> ".cmp";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppQFile.htm">QFile</a>::exists(filename.c_str()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy the file from <a href="CppQt.htm">Qt</a> resources to local file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> qtfilename <a href="CppOperatorAssign.htm">=</a> ":/files/" <a href="CppOperatorPlus.htm">+</a> filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> qtfile(qtfilename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtfile.copy(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtfile.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQFile.htm">QFile</a>::exists(filename.c_str()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> file(filename.c_str());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> success <a href="CppOperatorAssign.htm">=</a> file.setPermissions(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a>::ReadOwner<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQFile.htm">QFile</a>::WriteOwner<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQFile.htm">QFile</a>::ExeOwner<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQFile.htm">QFile</a>::ReadUser<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQFile.htm">QFile</a>::WriteUser<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQFile.htm">QFile</a>::ExeUser<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQFile.htm">QFile</a>::ReadGroup<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQFile.htm">QFile</a>::WriteGroup<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQFile.htm">QFile</a>::ExeGroup<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQFile.htm">QFile</a>::ReadOther<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQFile.htm">QFile</a>::WriteOther<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQFile.htm">QFile</a>::ExeOther<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(success);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!success) { <a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "pvdb::File::Test(): Warning: !succes\n"; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.open(<a href="CppQFile.htm">QFile</a>::ReadWrite);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file.isOpen());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file.isReadable());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file.isWritable());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file.size() &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.close();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQFile.htm">QFile</a>::exists(filename.c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::File::Load(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(filename.c_str());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppQFile.htm">QFile</a>::exists(filename.c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("File::Test finished successfully");<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::File::To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> File&amp; file)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file.m_cluster);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file.m_concept_map);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;file&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppAbout.htm">about</a>&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> file.GetAbout() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppAbout.htm">about</a>&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;assessor_name&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> file.GetAssessorName() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/assessor_name&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Cluster::To<a href="CppXml.htm">Xml</a>(file.GetCluster());<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ConceptMap::To<a href="CppXml.htm">Xml</a>(file.GetConceptMap());<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;student_name&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> file.GetStudentName() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/student_name&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppVersion.htm">version</a>&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> file.Get<a href="CppVersion.htm">Version</a>() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppVersion.htm">version</a>&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/file&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 13);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(0,6) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;file&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(r.size() <a href="CppOperatorMinus.htm">-</a> 7,7) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/file&gt;"));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> r;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::File&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::File&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs.GetCluster());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs.GetConceptMap());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rhs.GetCluster());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rhs.GetConceptMap());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetAssessorName() <a href="CppOperatorEqual.htm">==</a> rhs.GetAssessorName()<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> IsEqual(*lhs.GetCluster(),*rhs.GetCluster())<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> IsEqual(*lhs.GetConceptMap(),*rhs.GetConceptMap())<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetStudentName() <a href="CppOperatorEqual.htm">==</a> rhs.GetStudentName()<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.Get<a href="CppVersion.htm">Version</a>() <a href="CppOperatorEqual.htm">==</a> rhs.Get<a href="CppVersion.htm">Version</a>();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs-&gt;GetCluster());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rhs-&gt;GetCluster());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rhs-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> IsEqual(*lhs,*rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbfilefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbfilefactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDB<a href="CppCfile.htm">FILE</a>FACTORY_H<br/>
<a href="CppDefine.htm">#define</a> PVDB<a href="CppCfile.htm">FILE</a>FACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> File;<br/>
<br/>
<a href="CppComment.htm">///</a>Factory of pvdb::File<br/>
<b><a href="CppStruct.htm">struct</a></b> FileFactory<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; Create();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; DeepCopy(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; file);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; GetTests();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDB<a href="CppCfile.htm">FILE</a>FACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbfilefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbfilefactory.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbfilefactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbclusterfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbclusterfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; pvdb::FileFactory::Create()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(<b><a href="CppNew.htm">new</a></b> pvdb::File);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> file;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; pvdb::FileFactory::DeepCopy(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; file)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetCluster());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::DeepCopy(file-&gt;GetCluster());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cluster);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetCluster());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*cluster,*file-&gt;GetCluster()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::DeepCopy(file-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*concept_map,*file-&gt;GetConceptMap()));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> File(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;GetAbout(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;GetAssessorName(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;GetStudentName(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;Get<a href="CppVersion.htm">Version</a>()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (file <a href="CppOperatorNotEqual.htm">!=</a> p)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(pvdb::File::To<a href="CppXml.htm">Xml</a>(*file));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(pvdb::File::To<a href="CppXml.htm">Xml</a>(*p));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file <a href="CppOperatorEqual.htm">==</a> p);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*file,*p));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; pvdb::FileFactory::GetTests()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; v;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[0]: empty file<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(Create());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[1]: file with focal <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; f <a href="CppOperatorAssign.htm">=</a> Create();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s().at(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(f);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[2]: file with complex concept map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; f <a href="CppOperatorAssign.htm">=</a> Create();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s().at(15);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(f);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[3]: file with complex concept map and complex cluster<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; f <a href="CppOperatorAssign.htm">=</a> Create();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;SetStudentName("pvdb::FileFactory::GetTests()[3] name");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s().at(15);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ClusterFactory::GetTests().at(3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cluster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;SetCluster(cluster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(f);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[4]: file with rated complex concept map and complex cluster<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; f <a href="CppOperatorAssign.htm">=</a> Create();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;SetStudentName("pvdb::FileFactory::GetTests()[4] name");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s().at(16);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ClusterFactory::GetTests().at(3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cluster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;SetCluster(cluster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(f);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbfwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbfwd.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBFWD_H<br/>
<a href="CppDefine.htm">#define</a> PVDBFWD_H<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppComment.htm">///</a><a href="CppForwardDeclaration.htm">Forward declaration</a>s<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Cluster;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Concept;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> ConceptFactory;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> ConceptMap;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Edge;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Example;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Examples;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> File;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Node;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQRegExp.htm">QRegExp</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQtArrowItem.htm">QtArrowItem</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQTimer.htm">QTimer</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbArrow;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptEditDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapItem;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbEditConceptItem;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbExamplesItem;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbItemHighlighter;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbNewArrow;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbPathArrow;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptItem;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>;<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbhelper.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbhelper.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBHELPER_H<br/>
<a href="CppDefine.htm">#define</a> PVDBHELPER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppArray.htm">array</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQRegExp.htm">QRegExp</a>;<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQRegExp.htm">QRegExp</a>&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<br/>
<a href="CppComment.htm">///</a>Help adding constness a bit<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> T&gt; &gt; <a href="CppAdd.htm">Add</a>Const(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;T&gt; &gt; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> T&gt; &gt;(v.begin(),v.end());<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.htm">FileToVector</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain all possible selections of a <a href="CppStdVector.htm">std::vector</a>, preserving the ordering of its elements<br/>
<a href="CppComment.htm">///</a>Examples:<br/>
/<a href="CppComment.htm">//</a> {&nbsp;&nbsp;&nbsp;&nbsp; } <a href="CppOperatorMinus.htm">-</a>&gt; { {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
/<a href="CppComment.htm">//</a> {1&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppOperatorMinus.htm">-</a>&gt; { {}, {1}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
/<a href="CppComment.htm">//</a> {1,2&nbsp;&nbsp;} <a href="CppOperatorMinus.htm">-</a>&gt; { {}, {1}, {2},&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1,2}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
/<a href="CppComment.htm">//</a> {1,2,3} <a href="CppOperatorMinus.htm">-</a>&gt; { {}, {1}, {2}, {3}, {1,2}, {1,3}, {2,3}, {1,2,3} }<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetCombinations.htm">GetCombinations</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;T&gt; &gt; <a href="CppGetCombinations.htm">GetCombinations</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;T&gt; &gt; result;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_combinations <a href="CppOperatorAssign.htm">=</a> (1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sz);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_combinations; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;T&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> j) &amp; i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(v[j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the Pythagorian distance from two delta's<br/>
<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetDistance.htm">GetDistance</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetDistance.htm">GetDistance</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_y);<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the Pythagorian distance from two coordinats<br/>
<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetDistance.htm">GetDistance</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetDistance.htm">GetDistance</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2);<br/>
<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetRegexMatches.htm">GetRegexMatches</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppGetRegexMatches.htm">GetRegexMatches</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRegExp.htm">QRegExp</a>&amp; r);<br/>
<br/>
<a href="CppComment.htm">///</a>Split an <a href="CppXml.htm">XML</a> <a href="CppStdString.htm">std::string</a> into its parts<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSplitXml.htm">SplitXml</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSplitXml.htm">SplitXml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
<a href="CppComment.htm">///</a>Strip the <a href="CppXml.htm">XML</a> tags of an <a href="CppXml.htm">XML</a> item<br/>
<a href="CppComment.htm">///</a>For example '&lt;tag&gt;text&lt;/tag&gt;' becomes 'text'<br/>
<a href="CppComment.htm">///</a>Note that also '&lt;<a href="CppAny.htm">any</a>_tag&gt;text&lt;/other_tag&gt;' fails<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppStripXmlTag.htm">StripXmlTag</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppStripXmlTag.htm">StripXmlTag</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
<a href="CppComment.htm">///</a>Test the helper <a href="CppFunction.htm">function</a>s<br/>
<b><a href="CppVoid.htm">void</a></b> TestHelper<a href="CppFunction.htm">Function</a>s();<br/>
<br/>
<a href="CppComment.htm">///</a>Pretty-print an <a href="CppXml.htm">XML</a> <a href="CppStdString.htm">std::string</a> by indenting its elements<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppXmlToPretty.htm">XmlToPretty</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppXmlToPretty.htm">XmlToPretty</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBHELPER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbhelper.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbhelper.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQRegExp.htm">QRegExp</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; pvdb::<a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;pvdb::TestHelper<a href="CppFunction.htm">Function</a>s();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQFile.htm">QFile</a>::exists(filename.c_str()));<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> in(filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !in.eof(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(in,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> pvdb::<a href="CppGetDistance.htm">GetDistance</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;pvdb::TestHelper<a href="CppFunction.htm">Function</a>s();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdSqrt.htm">std::sqrt</a>( (delta_x * delta_x) <a href="CppOperatorPlus.htm">+</a> (delta_y * delta_y) );<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> pvdb::<a href="CppGetDistance.htm">GetDistance</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;pvdb::TestHelper<a href="CppFunction.htm">Function</a>s();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppGetDistance.htm">GetDistance</a>(x1-x2,y1-y2);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRegExp.htm">QRegExp</a>&amp; r_original)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;pvdb::TestHelper<a href="CppFunction.htm">Function</a>s();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppQRegExp.htm">QRegExp</a> r(r_original);<br/>
&nbsp;&nbsp;r.setMinimal(<b><a href="CppTrue.htm">true</a></b>); <a href="CppComment.htm">//</a><a href="CppQRegExp.htm">QRegExp</a> must be non-greedy<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> pos <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((pos <a href="CppOperatorAssign.htm">=</a> r.indexIn(s.c_str(), pos)) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> q <a href="CppOperatorAssign.htm">=</a> r.cap(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (q.isEmpty()) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(q.toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pos <a href="CppOperatorPlusAssign.htm">+=</a> r.matchedLength();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; pvdb::<a href="CppSplitXml.htm">SplitXml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;pvdb::TestHelper<a href="CppFunction.htm">Function</a>s();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>::const_iterator i <a href="CppOperatorAssign.htm">=</a> s.begin();<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>::const_iterator j <a href="CppOperatorAssign.htm">=</a> s.begin();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>::const_iterator end <a href="CppOperatorAssign.htm">=</a> s.end();<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (j<a href="CppOperatorNotEqual.htm">!=</a>end)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*j<a href="CppOperatorEqual.htm">==</a>'&gt;' <a href="CppOperatorLogicalOr.htm">||</a> *j <a href="CppOperatorEqual.htm">==</a> '&lt;') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppStdDistance.htm">std::distance</a>(i,j) &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*i<a href="CppOperatorEqual.htm">==</a>'&lt;' ? i&nbsp;&nbsp; : i+1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*j<a href="CppOperatorEqual.htm">==</a>'&gt;' ? j+1 : j,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(t));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorAssign.htm">=</a> j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::<a href="CppStripXmlTag.htm">StripXmlTag</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;pvdb::TestHelper<a href="CppFunction.htm">Function</a>s();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.empty()) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[0]<a href="CppOperatorNotEqual.htm">!=</a>'&lt;') <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[s.size() <a href="CppOperatorMinus.htm">-</a> 1]<a href="CppOperatorNotEqual.htm">!=</a>'&gt;') <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> begin <a href="CppOperatorAssign.htm">=</a> s.find_first_of('&gt;');<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (begin <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStdString.htm">std::string</a>::npos)) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> end <a href="CppOperatorAssign.htm">=</a> s.find_last_of('&lt;');<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (end <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStdString.htm">std::string</a>::npos)) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (begin &gt; end) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(begin &lt; end);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tag_left <a href="CppOperatorAssign.htm">=</a> s.substr(0,begin+1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!tag_left.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(tag_left[0] <a href="CppOperatorEqual.htm">==</a> '&lt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(tag_left[tag_left.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> '&gt;');<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tag_left_text <a href="CppOperatorAssign.htm">=</a> tag_left.substr(1,tag_left.size() <a href="CppOperatorMinus.htm">-</a> 2);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tag_left_text.empty()) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tag_right <a href="CppOperatorAssign.htm">=</a> s.substr(end,s.size() <a href="CppOperatorMinus.htm">-</a> end);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tag_right.size() &lt; 2) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!tag_right.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(tag_right[0] <a href="CppOperatorEqual.htm">==</a> '&lt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(tag_right[tag_right.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> '&gt;');<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tag_right_text <a href="CppOperatorAssign.htm">=</a> tag_right.substr(2,tag_right.size() <a href="CppOperatorMinus.htm">-</a> 3);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tag_right_text.empty()) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tag_left_text <a href="CppOperatorNotEqual.htm">!=</a> tag_right_text) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> s.substr(begin <a href="CppOperatorPlus.htm">+</a> 1,end <a href="CppOperatorMinus.htm">-</a> begin <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> text;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::TestHelper<a href="CppFunction.htm">Function</a>s()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Started TestHelper<a href="CppFunction.htm">Function</a>s");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStripXmlTag.htm">StripXmlTag</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;my_tag&gt;text&lt;/my_tag&gt;") <a href="CppOperatorEqual.htm">==</a> "text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;mytag&gt;text&lt;/mytag&gt;") <a href="CppOperatorEqual.htm">==</a> "text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;tags&gt;text&lt;/tags&gt;") <a href="CppOperatorEqual.htm">==</a> "text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;tag&gt;text&lt;/tag&gt;") <a href="CppOperatorEqual.htm">==</a> "text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;tg&gt;text&lt;/tg&gt;") <a href="CppOperatorEqual.htm">==</a> "text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;t&gt;text&lt;/t&gt;") <a href="CppOperatorEqual.htm">==</a> "text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;y&lt;/x&gt;") <a href="CppOperatorEqual.htm">==</a> "y");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;y&lt;/x&gt;&lt;/x&gt;") <a href="CppOperatorEqual.htm">==</a> "y&lt;/x&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;&lt;x&gt;y&lt;/x&gt;") <a href="CppOperatorEqual.htm">==</a> "&lt;x&gt;y");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;&lt;x&gt;y&lt;/x&gt;&lt;/x&gt;") <a href="CppOperatorEqual.htm">==</a> "&lt;x&gt;y&lt;/x&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;y&lt;/z&gt;") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;y&lt;x&gt;") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;&gt;y&lt;&gt;") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;&gt;y&lt;/&gt;") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;y") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;&lt;/x&gt;") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppGetRegexMatches.htm">GetRegexMatches</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "In the Netherlands, 1234 AB and 2345 BC are valid zip codes";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; expected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;expected.push_back("1234 AB");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;expected.push_back("2345 BC");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> "(\\d{4} [A-Z]{2})";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>(r.c_str())) <a href="CppOperatorEqual.htm">==</a> expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "&lt;concept&gt;&lt;name&gt;Concept with examples&lt;/name&gt;&lt;example&gt;Example 1&lt;/example&gt;&lt;example&gt;Example 2&lt;/example&gt;&lt;example&gt;Example 3&lt;/example&gt;&lt;/concept&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(s.begin(),s.end(),'\b') <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; expected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;expected.push_back("&lt;example&gt;Example 1&lt;/example&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;expected.push_back("&lt;example&gt;Example 2&lt;/example&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;expected.push_back("&lt;example&gt;Example 3&lt;/example&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> "(&lt;example&gt;.*&lt;/example&gt;)";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>(r.c_str())) <a href="CppOperatorEqual.htm">==</a> expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppGetCombinations.htm">GetCombinations</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume the number of elements is correct<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetCombinations.htm">GetCombinations</a>(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } ) ).size() <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetCombinations.htm">GetCombinations</a>(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( {1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} ) ).size() <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetCombinations.htm">GetCombinations</a>(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( {1,2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} ) ).size() <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetCombinations.htm">GetCombinations</a>(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( {1,2,3&nbsp;&nbsp;&nbsp;&nbsp;} ) ).size() <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;8);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetCombinations.htm">GetCombinations</a>(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( {1,2,3,4&nbsp;&nbsp;} ) ).size() <a href="CppOperatorEqual.htm">==</a> 16);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetCombinations.htm">GetCombinations</a>(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( {1,2,3,4,5} ) ).size() <a href="CppOperatorEqual.htm">==</a> 32);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume the elements are correct<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppGetCombinations.htm">GetCombinations</a>(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( { 1 } ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_0 <a href="CppOperatorAssign.htm">=</a> {};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_1 <a href="CppOperatorAssign.htm">=</a> {1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_1));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppGetCombinations.htm">GetCombinations</a>(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( { 1,2 } ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_0 <a href="CppOperatorAssign.htm">=</a> {};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_1 <a href="CppOperatorAssign.htm">=</a> {1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_2 <a href="CppOperatorAssign.htm">=</a> {2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_3 <a href="CppOperatorAssign.htm">=</a> {1,2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_3));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppGetCombinations.htm">GetCombinations</a>(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( { 1,2,3 } ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_0 <a href="CppOperatorAssign.htm">=</a> {};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_1 <a href="CppOperatorAssign.htm">=</a> {1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_2 <a href="CppOperatorAssign.htm">=</a> {2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_3 <a href="CppOperatorAssign.htm">=</a> {3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_4 <a href="CppOperatorAssign.htm">=</a> {1,2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_5 <a href="CppOperatorAssign.htm">=</a> {1,3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_6 <a href="CppOperatorAssign.htm">=</a> {2,3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_7 <a href="CppOperatorAssign.htm">=</a> {1,2,3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_5));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_7));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppGetCombinations.htm">GetCombinations</a>(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( { 1,2,3,4 } ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_0 <a href="CppOperatorAssign.htm">=</a> {};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_1 <a href="CppOperatorAssign.htm">=</a> {1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_2 <a href="CppOperatorAssign.htm">=</a> {2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_3 <a href="CppOperatorAssign.htm">=</a> {3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_4 <a href="CppOperatorAssign.htm">=</a> {4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_5 <a href="CppOperatorAssign.htm">=</a> {1,2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_6 <a href="CppOperatorAssign.htm">=</a> {1,3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_7 <a href="CppOperatorAssign.htm">=</a> {1,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_8 <a href="CppOperatorAssign.htm">=</a> {2,3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_9 <a href="CppOperatorAssign.htm">=</a> {2,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_10 <a href="CppOperatorAssign.htm">=</a> {3,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_11 <a href="CppOperatorAssign.htm">=</a> {1,2,3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_12 <a href="CppOperatorAssign.htm">=</a> {1,2,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_13 <a href="CppOperatorAssign.htm">=</a> {1,3,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_14 <a href="CppOperatorAssign.htm">=</a> {2,3,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected_15 <a href="CppOperatorAssign.htm">=</a> {1,2,3,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_5));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_7));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_8));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_9));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_10));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_11));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_12));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_13));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_14));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),expected_15));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "&lt;a&gt;A&lt;/a&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; split <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppSplitXml.htm">SplitXml</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; split_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(split <a href="CppOperatorEqual.htm">==</a> split_expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; pretty <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppXmlToPretty.htm">XmlToPretty</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; pretty_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pretty <a href="CppOperatorEqual.htm">==</a> pretty_expected);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "&lt;a&gt;A&lt;b&gt;B&lt;/b&gt;&lt;/a&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; split <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppSplitXml.htm">SplitXml</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; split_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"B",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(split <a href="CppOperatorEqual.htm">==</a> split_expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; pretty <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppXmlToPretty.htm">XmlToPretty</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; pretty_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;B",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pretty <a href="CppOperatorEqual.htm">==</a> pretty_expected);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "&lt;a&gt;A&lt;b&gt;B1&lt;/b&gt;&lt;b&gt;B2&lt;/b&gt;&lt;/a&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; split <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppSplitXml.htm">SplitXml</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; split_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"B1",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"B2",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(split <a href="CppOperatorEqual.htm">==</a> split_expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; pretty <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppXmlToPretty.htm">XmlToPretty</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; pretty_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;B1",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;B2",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pretty <a href="CppOperatorEqual.htm">==</a> pretty_expected);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TestHelper<a href="CppFunction.htm">Function</a>s finished successfully");<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; pvdb::<a href="CppXmlToPretty.htm">XmlToPretty</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;pvdb::TestHelper<a href="CppFunction.htm">Function</a>s();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppSplitXml.htm">SplitXml</a>(s);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2;<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;n](<a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[0] <a href="CppOperatorEqual.htm">==</a> '&lt;' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s[1] <a href="CppOperatorNotEqual.htm">!=</a> '/')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n<a href="CppOperatorPlusAssign.htm">+=</a>2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>(n,' ') <a href="CppOperatorPlus.htm">+</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[n+0] <a href="CppOperatorEqual.htm">==</a> '&lt;' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s[n+1] <a href="CppOperatorEqual.htm">==</a> '/')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n<a href="CppOperatorMinusAssign.htm">-=</a>2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbhints.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbhints.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBHINTS_H<br/>
<a href="CppDefine.htm">#define</a> PVDBHINTS_H<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
 *<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> H<b><a href="CppInt.htm">int</a></b><br/>
{<br/>
&nbsp;&nbsp;create_concept,<br/>
&nbsp;&nbsp;edit_concept,<br/>
&nbsp;&nbsp;edit_arrow<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Manages all Pvdb hints<br/>
<b><a href="CppStruct.htm">struct</a></b> Hints<br/>
{<br/>
&nbsp;&nbsp;Hints();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get a hint its text<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetText(<b><a href="CppConst.htm">const</a></b> pvdb::H<b><a href="CppInt.htm">int</a></b> hint) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Has the user followed the hint already?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsDone(<b><a href="CppConst.htm">const</a></b> pvdb::H<b><a href="CppInt.htm">int</a></b> hint) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The user followed the hint<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDone(<b><a href="CppConst.htm">const</a></b> pvdb::H<b><a href="CppInt.htm">int</a></b> hint);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Block <a href="CppDestructor.htm">destructor</a>, except <b><a href="CppFor.htm">for</a></b> the <b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~Hints() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/All hints and <b><a href="CppIf.htm">if</a></b> these are done<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;H<b><a href="CppInt.htm">int</a></b>,<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppBool.htm">bool</a></b>,<a href="CppStdString.htm">std::string</a>&gt; &gt; m_m;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create all hints their texts<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;H<b><a href="CppInt.htm">int</a></b>,<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppBool.htm">bool</a></b>,<a href="CppStdString.htm">std::string</a>&gt; &gt; CreateMap();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Correct <a href="CppFriend.htm">befriending</a>, from http://richelbilderbeek.nl/CppChecked_delete.htm<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Hints* x);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBHINTS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbhints.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbhints.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbhints.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
pvdb::Hints::Hints()<br/>
&nbsp;&nbsp;: m_m(CreateMap())<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;pvdb::H<b><a href="CppInt.htm">int</a></b>,<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppBool.htm">bool</a></b>,<a href="CppStdString.htm">std::string</a>&gt; &gt; pvdb::Hints::CreateMap()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;H<b><a href="CppInt.htm">int</a></b>,<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppBool.htm">bool</a></b>,<a href="CppStdString.htm">std::string</a>&gt; &gt; m;<br/>
&nbsp;&nbsp;m[H<b><a href="CppInt.htm">int</a></b>::create_concept]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_pair.htm">std::make_pair</a>(<b><a href="CppFalse.htm">false</a></b>,"Dubbelklik op leeg gebied om een nieuw concept te <a href="CppMake.htm">make</a>n");<br/>
&nbsp;&nbsp;m[H<b><a href="CppInt.htm">int</a></b>::edit_concept]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_pair.htm">std::make_pair</a>(<b><a href="CppFalse.htm">false</a></b>,"Druk op F2 om een concept te bewerken");<br/>
&nbsp;&nbsp;m[H<b><a href="CppInt.htm">int</a></b>::edit_arrow]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_pair.htm">std::make_pair</a>(<b><a href="CppFalse.htm">false</a></b>,"Druk op '1' of '2' om pijlpunten te wijzigen");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; pvdb::Hints::GetText(<b><a href="CppConst.htm">const</a></b> pvdb::H<b><a href="CppInt.htm">int</a></b> hint) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsDone(hint));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (*m_m.find(hint)).second.second;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> pvdb::Hints::IsDone(<b><a href="CppConst.htm">const</a></b> pvdb::H<b><a href="CppInt.htm">int</a></b> hint) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_m.find(hint) <a href="CppOperatorNotEqual.htm">!=</a> m_m.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (*m_m.find(hint)).second.first;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Hints::SetDone(<b><a href="CppConst.htm">const</a></b> pvdb::H<b><a href="CppInt.htm">int</a></b> hint)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_m.find(hint) <a href="CppOperatorNotEqual.htm">!=</a> m_m.end());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Can always set done, even when already done so<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>((*m_m.find(hint)).second.first <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!IsDone((hint)));<br/>
&nbsp;&nbsp;m_m[hint].first <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsDone((hint)));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Hints::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Hints h;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!h.IsDone(H<b><a href="CppInt.htm">int</a></b>::create_concept));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!h.IsDone(H<b><a href="CppInt.htm">int</a></b>::edit_concept));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!h.IsDone(H<b><a href="CppInt.htm">int</a></b>::edit_arrow));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!h.GetText(H<b><a href="CppInt.htm">int</a></b>::create_concept).empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!h.GetText(H<b><a href="CppInt.htm">int</a></b>::edit_concept).empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!h.GetText(H<b><a href="CppInt.htm">int</a></b>::edit_arrow).empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;h.SetDone(H<b><a href="CppInt.htm">int</a></b>::create_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;h.SetDone(H<b><a href="CppInt.htm">int</a></b>::edit_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;h.SetDone(H<b><a href="CppInt.htm">int</a></b>::edit_arrow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(h.IsDone(H<b><a href="CppInt.htm">int</a></b>::create_concept));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(h.IsDone(H<b><a href="CppInt.htm">int</a></b>::edit_concept));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(h.IsDone(H<b><a href="CppInt.htm">int</a></b>::edit_arrow));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbmenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbmenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> PVDBMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAbout.htm">about</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<a href="CppComment.htm">///</a>The GUI independent <a href="CppVersion.htm">version</a> of Project Van Den Bogaart its menu dialog<br/>
<b><a href="CppStruct.htm">struct</a></b> MenuDialog<br/>
{<br/>
&nbsp;&nbsp;MenuDialog();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppAbout.htm">About</a> information of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppAbout.htm">About</a> GetAbout();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Block <a href="CppDestructor.htm">destructor</a>, except <b><a href="CppFor.htm">for</a></b> the <b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~MenuDialog() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Correct <a href="CppFriend.htm">befriending</a>, from http://richelbilderbeek.nl/CppChecked_delete.htm<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(MenuDialog* x);<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbmenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbmenudialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbmenudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
pvdb::MenuDialog::MenuDialog()<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppAbout.htm">About</a> pvdb::MenuDialog::GetAbout()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek (programming) and Toine van den Bogaart (research)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Project Van Den Bogaart",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"program to create and assess concept maps",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"the 23rd of January 2013",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-2013",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="ProjectVanDenBogaart.htm">ProjectVanDenBogaart</a>.htm",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>History());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppTrace.htm">Trace</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppTrace.htm">Trace</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::MenuDialog::Get<a href="CppVersion.htm">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "0.28";<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; pvdb::MenuDialog::Get<a href="CppVersion.htm">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2012-06-17: <a href="CppVersion.htm">Version</a> 0.01: concept <a href="CppVersion.htm">version</a>, <b><a href="CppUsing.htm">using</a></b> 'IronHide' style");<br/>
&nbsp;&nbsp;v.push_back("2012-10-18: <a href="CppVersion.htm">Version</a> 0.02: able to cross<a href="CppCompile.htm">compile</a> to windows, few dialogs present");<br/>
&nbsp;&nbsp;v.push_back("2012-10-19: <a href="CppVersion.htm">Version</a> 0.03: added use of <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>, most dialogs present");<br/>
&nbsp;&nbsp;v.push_back("2012-10-24: <a href="CppVersion.htm">Version</a> 0.04: added <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>");<br/>
&nbsp;&nbsp;v.push_back("2012-10-28: <a href="CppVersion.htm">Version</a> 0.05: added Cluster and ConceptMap, added AutoSave, Cluster<a href="CppWidget.htm">Widget</a> and Cluster work okay, file I/O working okay");<br/>
&nbsp;&nbsp;v.push_back("2012-11-10: <a href="CppVersion.htm">Version</a> 0.06: added first working <a href="CppQt.htm">Qt</a>ConceptMap");<br/>
&nbsp;&nbsp;v.push_back("2012-11-13: <a href="CppVersion.htm">Version</a> 0.07: added edges and helpers to <a href="CppQt.htm">Qt</a>ConceptMap");<br/>
&nbsp;&nbsp;v.push_back("2012-11-15: <a href="CppVersion.htm">Version</a> 0.08: concepts on edges in <a href="CppQt.htm">Qt</a>ConceptMap are editable, <a href="CppQt.htm">Qt</a>ConceptMap always looks pretty");<br/>
&nbsp;&nbsp;v.push_back("2012-11-18: <a href="CppVersion.htm">Version</a> 0.09: added edges with arrowheads, deletion of nodes and edges possible, put help items in status bar");<br/>
&nbsp;&nbsp;v.push_back("2012-11-22: <a href="CppVersion.htm">Version</a> 0.10: editing of concepts and their examples, <a href="Tools.htm">tools</a> icon (doing nothing yet)");<br/>
&nbsp;&nbsp;v.push_back("2012-11-24: <a href="CppVersion.htm">Version</a> 0.11: allow adding <b><a href="CppNew.htm">new</a></b> relations");<br/>
&nbsp;&nbsp;v.push_back("2012-11-25: <a href="CppVersion.htm">Version</a> 0.12: allow connecting to center node");<br/>
&nbsp;&nbsp;v.push_back("2012-11-27: <a href="CppVersion.htm">Version</a> 0.13: added program flow tests");<br/>
&nbsp;&nbsp;v.push_back("2012-11-28: <a href="CppVersion.htm">Version</a> 0.14: fixed many program flow and <a href="CppWidget.htm">widget</a> and dialog <a href="CppBug.htm">bug</a>s");<br/>
&nbsp;&nbsp;v.push_back("2012-12-02: <a href="CppVersion.htm">Version</a> 0.15: also relations can move");<br/>
&nbsp;&nbsp;v.push_back("2012-12-08: <a href="CppVersion.htm">Version</a> 0.16: use quadratic Bezier curve <b><a href="CppFor.htm">for</a></b> relations, locations of moved relations are saved");<br/>
&nbsp;&nbsp;v.push_back("2012-12-13: <a href="CppVersion.htm">Version</a> 0.17: improved keyboard <b><a href="CppFriend.htm">friend</a></b>liness");<br/>
&nbsp;&nbsp;v.push_back("2012-12-25: <a href="CppVersion.htm">Version</a> 0.18: major architectural changes, <b><a href="CppUsing.htm">using</a></b> 'B<a href="CppRainbow.htm">rainbow</a>' style");<br/>
&nbsp;&nbsp;v.push_back("2012-12-26: <a href="CppVersion.htm">Version</a> 0.19: program overview works again, concept map <a href="CppWidget.htm">widget</a>s <b><a href="CppFor.htm">for</a></b> editing, rating and displaying work fine");<br/>
&nbsp;&nbsp;v.push_back("2012-12-28: <a href="CppVersion.htm">Version</a> 0.20: got <a href="CppWine.htm">Wine</a> execution working again, rating works partially");<br/>
&nbsp;&nbsp;v.push_back("2012-12-31: <a href="CppVersion.htm">Version</a> 0.21: fixed <a href="CppBug.htm">bug</a>s in cluster dialog, added test concept dialog, temporarily removed concept maps");<br/>
&nbsp;&nbsp;v.push_back("2013-01-01: <a href="CppVersion.htm">Version</a> 0.22: added test node and edge dialogs, removed cross<a href="CppCompiler.htm">compiler</a> errors by replacing <a href="CppStdAll_of.htm">std::all_of</a> by count_if");<br/>
&nbsp;&nbsp;v.push_back("2013-01-08: <a href="CppVersion.htm">Version</a> 0.23: got editing and rating of concepts working");<br/>
&nbsp;&nbsp;v.push_back("2013-01-10: <a href="CppVersion.htm">Version</a> 0.24: backward-compatibility with previous .cmp files");<br/>
&nbsp;&nbsp;v.push_back("2013-01-13: <a href="CppVersion.htm">Version</a> 0.25: initial (incorrect) rating values calculation");<br/>
&nbsp;&nbsp;v.push_back("2013-01-18: <a href="CppVersion.htm">Version</a> 0.26: calculate rating values correctly");<br/>
&nbsp;&nbsp;v.push_back("2013-01-20: <a href="CppVersion.htm">Version</a> 0.27: added graphics to menu's, <b><a href="CppUsing.htm">using</a></b> 'Dolphin' style");<br/>
&nbsp;&nbsp;v.push_back("2013-01-23: <a href="CppVersion.htm">Version</a> 0.28: allow ConceptMapEdit arrows having solitary focus, progress on printing");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbnode.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbnode.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBNODE_H<br/>
<a href="CppDefine.htm">#define</a> PVDBNODE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> NodeFactory;<br/>
<br/>
<a href="CppComment.htm">///</a>A Node is the GUI independent part as used in <a href="CppQt.htm">Qt</a>PvdbConceptMapItem<br/>
<b><a href="CppStruct.htm">struct</a></b> Node<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a Node from an <a href="CppXml.htm">XML</a> <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Concept<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&nbsp;&nbsp;GetConcept() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_concept; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt;&amp; GetConcept() { <b><a href="CppReturn.htm">return</a></b> m_concept; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>::use_count<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetConceptUseCount() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_concept.use_count(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get some test nodes<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; GetTests();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Similar to <b><a href="CppOperatorEqual.htm">operator==</a></b>, except that GUI elements are not tested <b><a href="CppFor.htm">for</a></b> equality<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> HasSameContent(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; rhs);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the x coordinat<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetX() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_x; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the y coordinat<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetY() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_y; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetConcept(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept) { m_concept <a href="CppOperatorAssign.htm">=</a> concept; } <a href="CppComment.htm">//</a>NEW 2013-01-07<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the x coordinat<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) { m_x <a href="CppOperatorAssign.htm">=</a> x; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the y coordinat<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) { m_y <a href="CppOperatorAssign.htm">=</a> y; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a Node from an <a href="CppXml.htm">XML</a> <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; c);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Concept<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; m_concept;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The x-coordinat<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_x;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The y-coordinat<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_y;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Block <a href="CppDestructor.htm">destructor</a>, except <b><a href="CppFor.htm">for</a></b> the <b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~Node() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Node* x);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Block <a href="CppConstructor.htm">construct</a>ion, except <b><a href="CppFor.htm">for</a></b> NodeFactory<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> NodeFactory;<br/>
&nbsp;&nbsp;Node() <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Node(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.0); <a href="CppComment.htm">//</a>FIX 2013-01-10<br/>
&nbsp;&nbsp;Node(<b><a href="CppConst.htm">const</a></b> Node&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Node&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Node&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::Node&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Node&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBNODE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbnode.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbnode.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQRegExp.htm">QRegExp</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
pvdb::Node::Node(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y)<br/>
&nbsp;&nbsp;: m_concept(concept),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x(x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y(y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; pvdb::Node::From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 13);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(0,6) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;node&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(s.size() <a href="CppOperatorMinus.htm">-</a> 7,7) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/node&gt;"));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_concept<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;concept&gt;.*&lt;/concept&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept <a href="CppOperatorAssign.htm">=</a> Concept::From<a href="CppXml.htm">Xml</a>(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_x<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;x&gt;.*&lt;/x&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_x<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;y&gt;.*&lt;/y&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node(<b><a href="CppNew.htm">new</a></b> Node(concept,x,y));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> node;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; pvdb::Node::GetTests()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> test_concepts <a href="CppOperatorAssign.htm">=</a> ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; result;<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(test_concepts.begin(),test_concepts.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;result](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 256) <a href="CppOperatorMinus.htm">-</a> 128;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 256) <a href="CppOperatorMinus.htm">-</a> 128;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node(<b><a href="CppNew.htm">new</a></b> Node(concept,x,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> pvdb::Node::HasSameContent(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs-&gt;GetConcept() <a href="CppOperatorEqual.htm">==</a> rhs-&gt;GetConcept();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Node::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Started pvdb::Node::Test");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::Node::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <a href="CppCopyConstructor.htm">copy constructor</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; c <a href="CppOperatorAssign.htm">=</a> NodeFactory::DeepCopy(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> To<a href="CppXml.htm">Xml</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; d <a href="CppOperatorAssign.htm">=</a> From<a href="CppXml.htm">Xml</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test HasSameContent<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; c(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; d(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; a(<b><a href="CppNew.htm">new</a></b> Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; b(<b><a href="CppNew.htm">new</a></b> Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(ConceptFactory::GetTests().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; c <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; d <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(&amp;c <a href="CppOperatorNotEqual.htm">!=</a> &amp;d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; a(<b><a href="CppNew.htm">new</a></b> Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; b(<b><a href="CppNew.htm">new</a></b> Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot shuffle Concept its examples. No need to as well: the order is important<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; c <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d},{"3", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; d <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d},{"3", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; a(<b><a href="CppNew.htm">new</a></b> Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; b(<b><a href="CppNew.htm">new</a></b> Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot shuffle Concept its examples. No need to as well: the order is important<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; c <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d},{"3", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; d <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"3", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d},{"2", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorNotEqual.htm">!=</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; a(<b><a href="CppNew.htm">new</a></b> Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; b(<b><a href="CppNew.htm">new</a></b> Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasSameContent(a,b) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Order in examples is important and cannot be shuffled");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorNotEqual.htm">!=</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot shuffle Concept its examples. No need to as well: the order is important<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; c <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d},{"3", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; d <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2", pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorNotEqual.htm">!=</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; a(<b><a href="CppNew.htm">new</a></b> Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; b(<b><a href="CppNew.htm">new</a></b> Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorNotEqual.htm">!=</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test ConceptFactory reproductions<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(ConceptFactory::GetTests().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; c <a href="CppOperatorAssign.htm">=</a> ConceptFactory::GetTests()[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; d <a href="CppOperatorAssign.htm">=</a> ConceptFactory::GetTests()[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(&amp;c <a href="CppOperatorNotEqual.htm">!=</a> &amp;d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; a(<b><a href="CppNew.htm">new</a></b> Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; b(<b><a href="CppNew.htm">new</a></b> Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test ConceptFactory reproductions<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(ConceptFactory::GetTests().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; c <a href="CppOperatorAssign.htm">=</a> ConceptFactory::GetTests()[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; d <a href="CppOperatorAssign.htm">=</a> ConceptFactory::GetTests()[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i<a href="CppOperatorNotEqual.htm">!=</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(&amp;c <a href="CppOperatorNotEqual.htm">!=</a> &amp;d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorNotEqual.htm">!=</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; a(<b><a href="CppNew.htm">new</a></b> Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; b(<b><a href="CppNew.htm">new</a></b> Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorNotEqual.htm">!=</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(&amp;c <a href="CppOperatorNotEqual.htm">!=</a> &amp;d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; a(<b><a href="CppNew.htm">new</a></b> Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; b(<b><a href="CppNew.htm">new</a></b> Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Node::Test finished successfully");<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pvdb::Node::To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; node)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;node&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Concept::To<a href="CppXml.htm">Xml</a>(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;x&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> node-&gt;GetX() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/x&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;y&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> node-&gt;GetY() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/y&gt;";<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/node&gt;";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 13);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(0,6) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;node&gt;"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.substr(r.size() <a href="CppOperatorMinus.htm">-</a> 7,7) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("&lt;/node&gt;"));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> r;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> IsEqual(<b><a href="CppConst.htm">const</a></b> pvdb::Node&amp; lhs, <b><a href="CppConst.htm">const</a></b> pvdb::Node&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs.GetConcept()); <a href="CppAssert.htm">assert</a>(rhs.GetConcept());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IsEqual(*lhs.GetConcept(),*rhs.GetConcept())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetX()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> rhs.GetX()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetY()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> rhs.GetY();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs); <a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> IsEqual(*lhs,*rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;(rhs);<br/>
}<br/>
<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbnodefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbnodefactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PVDBNODEFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> PVDBNODEFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Node;<br/>
<br/>
<a href="CppComment.htm">///</a>Factory <b><a href="CppFor.htm">for</a></b> creating Node <a href="CppInstance.htm">instances</a><br/>
<b><a href="CppStruct.htm">struct</a></b> NodeFactory<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,Competency&gt; &gt;&amp; examples <a href="CppOperatorAssign.htm">=</a> {},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; DeepCopy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; node);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain testing nodes<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; GetTests();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PVDBNODEFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/pvdbnodefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/pvdbnodefactory.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; pvdb::NodeFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> pvdb::Node(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept,x,y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*concept,*node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node-&gt;GetX() <a href="CppOperatorEqual.htm">==</a> x);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node-&gt;GetY() <a href="CppOperatorEqual.htm">==</a> y);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> node;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; pvdb::NodeFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,Competency&gt; &gt;&amp; examples,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Node(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConceptFactory::Create(name,examples),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node-&gt;GetX() <a href="CppOperatorEqual.htm">==</a> x);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node-&gt;GetY() <a href="CppOperatorEqual.htm">==</a> y);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> node;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; pvdb::NodeFactory::DeepCopy(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; node)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; new_concept<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ConceptFactory::DeepCopy(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(new_concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*node-&gt;GetConcept(),*new_concept));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; new_node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Create(new_concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;GetY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(new_node);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(new_node-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*node,*new_node));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> new_node;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; pvdb::NodeFactory::GetTests()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; nodes;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(nodes),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; p(<b><a href="CppNew.htm">new</a></b> Node(c,x,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> nodes;<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtmain.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQIcon.htm">QIcon</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQVBoxLayout.htm">QVBoxLayout</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbclusterdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcluster<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconcepteditdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapedit<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateexamplesdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmaprate<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbmenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> CreateStyleSheet()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQDialog.htm">QDialog</a> { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #bbf, stop: 1 #bff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQLabel.htm">QLabel</a> { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;font-size: 18px;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;font-family: \"Courier\", \"Courier New\", Courier, monospace;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;font-weight: bold;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;padding: 1px;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQPushButton.htm">QPushButton</a> {"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;font-family: \"Courier New\", \"Courier\", Courier, monospace;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;font-size: 16px;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;border-width: 1px;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;border-style: solid;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;padding: 3px;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQPushButton.htm">QPushButton</a>:enabled {"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;color: black;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: <a href="CppQLinearGradient.htm">QLinearGradient</a>( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ccc, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;border-color: #111;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQPushButton.htm">QPushButton</a>:disabled {"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;color: #888;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: <a href="CppQLinearGradient.htm">QLinearGradient</a>( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ccc, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;border-color: #fff;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQPlainTextEdit.htm">QPlainTextEdit</a> {"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;font-size: 12px;&nbsp;&nbsp;font-family: \"Courier\", \"Courier New\", Courier, monospace;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"}";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<br/>
&nbsp;&nbsp;START_<a href="CppTRACE.htm">TRACE</a>();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Perform tests<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "DEBUG mode" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbMenuDialog::Test(); <a href="CppComment.htm">//</a>Tests all<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "RELEASE mode" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(1<a href="CppOperatorEqual.htm">==</a>2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume <a href="CppDebug.htm">debugging</a> is really disabled");<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete the test file<br/>
&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(pvdb::File::GetTempFileName().c_str());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQt.htm">Qt</a>PvdbMenuDialog::Test();<br/>
&nbsp;&nbsp;a.setStyleSheet(CreateStyleSheet().c_str());<br/>
&nbsp;&nbsp;a.setWindowIcon(<a href="CppQIcon.htm">QIcon</a>(":/images/R.png"));<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbMenuDialog d;<br/>
<br/>
&nbsp;&nbsp;d.show();<br/>
&nbsp;&nbsp;a.exec();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>TODO<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Prettyprint printing <b><a href="CppFor.htm">for</a></b> student result<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Prettyprint printing <b><a href="CppFor.htm">for</a></b> assessor result<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Create multiple executables: (1) student (release) (2) assessor (release) (3) developer (<a href="CppDebug.htm">debug</a>)<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> In assessor <b><a href="CppFinal.htm">final</a></b> report screen, set the column widths to the right width (depends on font)<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>TODO PERHAPS ONCE<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Allow copy-paste of <a href="CppXml.htm">XML</a> code to display the corresponding concept map<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> <a href="CppAdd.htm">Add</a> all hints when <b><a href="CppUsing.htm">using</a></b> the <a href="CppQt.htm">Qt</a>ConceptMap<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> Allow movement of items by keyboard in cluster dialog<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>DO NEVER FORGET<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> Do not use <a href="CppStdAll_of.htm">std::all_of</a>, because cross-<a href="CppCompiler.htm">compiler</a> has trouble with it<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> Do not change a QGraphicItem (that is: call a paint event) outside of the paint event<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; (<b><a href="CppThis.htm">this</a></b> was the <b><a href="CppCase.htm">case</a></b> by <b><a href="CppQtSignals.htm">signals</a></b> that caused a repaint)<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> Instead of overloading <b><a href="CppOperatorEqual.htm">operator==</a></b> <b><a href="CppFor.htm">for</a></b> all combinations of <a href="CppSmartPointer.htm">smart pointer</a>s,<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; block <b><a href="CppOperatorEqual.htm">operator==</a></b> and use IsEqual(<b><a href="CppConst.htm">const</a></b> T&amp;)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtmain_testconceptmap.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtmain_testconceptmap.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQIcon.htm">QIcon</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> CreateStyleSheet()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQDialog.htm">QDialog</a> { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1, stop: 0 #606060, stop: 1 #ffffff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"}"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQLabel.htm">QLabel</a> { font: 24px, \"Courier\" }"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"#title { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;font-size: 32px;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;font-family: \"Courier\";"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;font-weight: bold"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"}"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQPushButton.htm">QPushButton</a> { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;color: black;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: <a href="CppQLinearGradient.htm">QLinearGradient</a>( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #888, stop: 0.1 #999, stop: 0.49 #ccc, stop: 0.5 #bbb, stop: 1 #ccc);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;border-width: 3px;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;border-color: #444;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;border-style: solid;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;border-radius: 7;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;padding: 3px;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;font-size: 24px;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;font-family: \"Courier New\";"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;padding-left: 5px;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;padding-right: 5px;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"}";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;START_<a href="CppTRACE.htm">TRACE</a>();<br/>
&nbsp;&nbsp;a.setStyleSheet(CreateStyleSheet().c_str());<br/>
&nbsp;&nbsp;a.setWindowIcon(<a href="CppQIcon.htm">QIcon</a>(":/images/R.png"));<br/>
&nbsp;&nbsp;pvdb::File::Test();<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d;<br/>
&nbsp;&nbsp;d.show();<br/>
&nbsp;&nbsp;a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtmainassessor.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtmainassessor.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtassessormenudialog.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>AssessorMenuDialog w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtmainstudent.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtmainstudent.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtstudentmenudialog.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>StudentMenuDialog w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbaboutdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbaboutdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBABOUTDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBABOUTDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="CppAbout.htm">About</a>Dialog<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppQtAboutDialog.htm">QtAboutDialog</a> <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b> project<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQtAboutDialog.htm">QtAboutDialog</a>&gt; Get();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBABOUTDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbaboutdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbaboutdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="CppAbout.htm">about</a>dialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAbout.htm">about</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbmenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtArrowItem.htm">qtarrowitem</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtKeyboardFriendlyGraphicsView.htm">qtkeyboardfriendlygraphicsview</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtQuadBezierArrowItem.htm">qtquadbezierarrowitem</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtScopedDisable.htm">qtscopeddisable</a>.h"<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQtAboutDialog.htm">QtAboutDialog</a>&gt; <a href="CppQt.htm">Qt</a>Pvdb<a href="CppAbout.htm">About</a>Dialog::Get()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> <a href="CppAbout.htm">about</a> <a href="CppOperatorAssign.htm">=</a> pvdb::MenuDialog::GetAbout();<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">about</a>.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtArrowItem.htm">QtArrowItem</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtArrowItem.htm">QtArrowItem</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">about</a>.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">about</a>.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtKeyboardFriendlyGraphicsView.htm">QtKeyboardFriendlyGraphicsView</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtKeyboardFriendlyGraphicsView.htm">QtKeyboardFriendlyGraphicsView</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">about</a>.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">about</a>.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtScopedDisable.htm">QtScopedDisable</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtScopedDisable.htm">QtScopedDisable</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQtAboutDialog.htm">QtAboutDialog</a>&gt; d(<b><a href="CppNew.htm">new</a></b> <a href="CppQtAboutDialog.htm">QtAboutDialog</a>(<a href="CppAbout.htm">about</a>));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbassessormenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbassessormenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBASSESSORMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBASSESSORMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog(<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_create_assessment_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_about_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_quit_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_assess_result_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog *ui;<br/>
};<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBASSESSORMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbassessormenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbassessormenudialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbassessormenudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="CppAbout.htm">about</a>dialog.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "pvdbmenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcreateassessmentcompletedialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcreateassessmentmenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptmapdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbassessormenudialog.h"<br/>
<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog::<a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog(<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog::~<a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog::on_button_create_assessment_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog::on_button_about_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d(<a href="CppQt.htm">Qt</a>Pvdb<a href="CppAbout.htm">About</a>Dialog::Get());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide();<br/>
&nbsp;&nbsp;d-&gt;exec();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog::on_button_quit_clicked()<br/>
{<br/>
&nbsp;&nbsp;close();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog::on_button_assess_result_clicked()<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Load file<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filter_str <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("*.") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getOpenFileName(0,"Kies een assessment bestand",<a href="CppQString.htm">QString</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter_str.c_str()).toStdString();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::File::Load(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbbrushfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbbrushfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBBRUSHFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBBRUSHFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQBrush.htm">QBrush</a>&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>Class <b><a href="CppFor.htm">for</a></b> holding some <a href="CppQBrush.htm">QBrush</a> <a href="CppInstance.htm">instances</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbBrushFactory<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a brush its name<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> BrushToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a>&amp; brush);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Blue brush, to be used in all derived <b><a href="CppClass.htm">classes</a></b> <b><a href="CppFor.htm">for</a></b> uniform coloring<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> CreateBlueGradientBrush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Gold brush, to be used in all derived <b><a href="CppClass.htm">classes</a></b> <b><a href="CppFor.htm">for</a></b> uniform coloring<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> CreateGoldGradientBrush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Gray brush, to be used in all derived <b><a href="CppClass.htm">classes</a></b> <b><a href="CppFor.htm">for</a></b> uniform coloring<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> CreateGrayGradientBrush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Green brush, to be used in all derived <b><a href="CppClass.htm">classes</a></b> <b><a href="CppFor.htm">for</a></b> uniform coloring<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> CreateGreenGradientBrush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Red brush, to be used in all derived <b><a href="CppClass.htm">classes</a></b> <b><a href="CppFor.htm">for</a></b> uniform coloring<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> CreateRedGradientBrush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Yellow brush, to be used in all derived <b><a href="CppClass.htm">classes</a></b> <b><a href="CppFor.htm">for</a></b> uniform coloring<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> CreateYellowGradientBrush();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Near-white brush, to be used in all derived <b><a href="CppClass.htm">classes</a></b> <b><a href="CppFor.htm">for</a></b> uniform coloring<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> CreateWhiteGradientBrush();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The bottom coordinat of a gradient<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sm_bottom;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The left coordinat of a gradient<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sm_left;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The right coordinat of a gradient<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sm_right;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The top coordinat of a gradient<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sm_top;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The low color value: low values <b><a href="CppReturn.htm">return</a></b> in darker brushes<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sm_color_low_value;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The middle color value: higher values <b><a href="CppReturn.htm">return</a></b> in lighter brushes<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sm_color_mid_value;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBBRUSHFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbbrushfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbbrushfactory.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbbrushfactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQLinearGradient.htm">QLinearGradient</a>&gt;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::sm_bottom <a href="CppOperatorAssign.htm">=</a> 10;<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::sm_left <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>100;<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::sm_right <a href="CppOperatorAssign.htm">=</a> 100;<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::sm_top <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>10;<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::sm_color_low_value&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;64;<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::sm_color_mid_value&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 128;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::BrushToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a>&amp; brush)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (brush <a href="CppOperatorEqual.htm">==</a> CreateBlueGradientBrush()) <b><a href="CppReturn.htm">return</a></b> "blue";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (brush <a href="CppOperatorEqual.htm">==</a> CreateGoldGradientBrush()) <b><a href="CppReturn.htm">return</a></b> "gold";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (brush <a href="CppOperatorEqual.htm">==</a> CreateGrayGradientBrush()) <b><a href="CppReturn.htm">return</a></b> "gray";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (brush <a href="CppOperatorEqual.htm">==</a> CreateGreenGradientBrush()) <b><a href="CppReturn.htm">return</a></b> "green";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (brush <a href="CppOperatorEqual.htm">==</a> CreateRedGradientBrush()) <b><a href="CppReturn.htm">return</a></b> "red";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (brush <a href="CppOperatorEqual.htm">==</a> CreateYellowGradientBrush()) <b><a href="CppReturn.htm">return</a></b> "yellow";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (brush <a href="CppOperatorEqual.htm">==</a> CreateWhiteGradientBrush()) <b><a href="CppReturn.htm">return</a></b> "white";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "unknown";<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateBlueGradientBrush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQLinearGradient.htm">QLinearGradient</a> linearGradient(sm_left,sm_top,sm_right,sm_bottom);<br/>
&nbsp;&nbsp;linearGradient.setColorAt(0.0,<a href="CppQColor.htm">QColor</a>( sm_color_mid_value, sm_color_mid_value,255));<br/>
&nbsp;&nbsp;linearGradient.setColorAt(1.0,<a href="CppQColor.htm">QColor</a>(255,255,255));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> linearGradient;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGoldGradientBrush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQLinearGradient.htm">QLinearGradient</a> linearGradient(sm_left,sm_top,sm_right,sm_bottom);<br/>
&nbsp;&nbsp;linearGradient.setColorAt(0.0,<a href="CppQColor.htm">QColor</a>( sm_color_mid_value, sm_color_mid_value,sm_color_low_value));<br/>
&nbsp;&nbsp;linearGradient.setColorAt(1.0,<a href="CppQColor.htm">QColor</a>(255,255,sm_color_low_value));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> linearGradient;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGrayGradientBrush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQLinearGradient.htm">QLinearGradient</a> linearGradient(sm_left,sm_top,sm_right,sm_bottom);<br/>
&nbsp;&nbsp;linearGradient.setColorAt(0.0,<a href="CppQColor.htm">QColor</a>(196,196,196));<br/>
&nbsp;&nbsp;linearGradient.setColorAt(1.0,<a href="CppQColor.htm">QColor</a>(255,255,255));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> linearGradient;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGreenGradientBrush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQLinearGradient.htm">QLinearGradient</a> linearGradient(sm_left,sm_top,sm_right,sm_bottom);<br/>
&nbsp;&nbsp;linearGradient.setColorAt(0.0,<a href="CppQColor.htm">QColor</a>( sm_color_mid_value,255, sm_color_mid_value));<br/>
&nbsp;&nbsp;linearGradient.setColorAt(1.0,<a href="CppQColor.htm">QColor</a>(255,255,255));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> linearGradient;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateRedGradientBrush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQLinearGradient.htm">QLinearGradient</a> linearGradient(sm_left,sm_top,sm_right,sm_bottom);<br/>
&nbsp;&nbsp;linearGradient.setColorAt(0.0,<a href="CppQColor.htm">QColor</a>(255, sm_color_mid_value, sm_color_mid_value));<br/>
&nbsp;&nbsp;linearGradient.setColorAt(1.0,<a href="CppQColor.htm">QColor</a>(255,255,255));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> linearGradient;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateYellowGradientBrush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQLinearGradient.htm">QLinearGradient</a> linearGradient(sm_left,sm_top,sm_right,sm_bottom);<br/>
&nbsp;&nbsp;linearGradient.setColorAt(0.0,<a href="CppQColor.htm">QColor</a>(255,255, sm_color_mid_value));<br/>
&nbsp;&nbsp;linearGradient.setColorAt(1.0,<a href="CppQColor.htm">QColor</a>(255,255,255));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> linearGradient;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateWhiteGradientBrush()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQLinearGradient.htm">QLinearGradient</a> linearGradient(sm_left,sm_top,sm_right,sm_bottom);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> low_value <a href="CppOperatorAssign.htm">=</a> 250;<br/>
&nbsp;&nbsp;linearGradient.setColorAt(0.0,<a href="CppQColor.htm">QColor</a>(low_value,low_value,low_value));<br/>
&nbsp;&nbsp;linearGradient.setColorAt(1.0,<a href="CppQColor.htm">QColor</a>(255,255,255));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> linearGradient;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbcenternodeitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbcenternodeitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCENTERNODEITEM_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCENTERNODEITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">///</a>The center node<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbCenterNodeItem : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Node cannot be <b><a href="CppConst.htm">const</a></b>, as it contains a Concept the user might want to edit<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(that is, when a sub-concept map is created from a concept map and the<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/focal node needs to be rated)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/concept_item is the display Strategy<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbCenterNodeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; CreateConceptItem(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node);<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCENTERNODEITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbcenternodeitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbcenternodeitem.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcenternodeitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbbrushfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbCenterNodeItem::<a href="CppQt.htm">Qt</a>PvdbCenterNodeItem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;: <a href="CppQt.htm">Qt</a>PvdbNodeItem(node,CreateConceptItem(node))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetConceptItem());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFlags(<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsFocusable);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetConceptItem()-&gt;SetMainBrush(<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGoldGradientBrush());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; <a href="CppQt.htm">Qt</a>PvdbCenterNodeItem::CreateConceptItem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; item(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem(node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> item;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbclusterdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbclusterdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCLUSTERDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCLUSTERDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcluster<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog; }<br/>
<br/>
<a href="CppComment.htm">///</a>The Dialog in which the user clusters concepts and examples<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file, <a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbClusterDialog();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do some random stuff, e.g. adding some concepts with examples<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoRandomStuff();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a> * Get<a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a> * Get<a href="CppWidget.htm">Widget</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the dialog want to go back to the student menu?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> GoBackToMenu() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_back_to_menu; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Save to disk<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Respond to the following keys:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>F2: edit current item<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete: remove current item<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_add_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_next_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_edit_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_save_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbClusterDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the dialog want to go back to the student menu?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_back_to_menu;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; m_file;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start saving procedure, with request of filename<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Save();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCLUSTERDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbclusterdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbclusterdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbclusterdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim_all.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbclusterfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedgefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfilefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbclusterdialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbClusterDialog::<a href="CppQt.htm">Qt</a>PvdbClusterDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file, <a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbClusterDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_back_to_menu(<b><a href="CppFalse.htm">false</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_file(file)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*file,*m_file));<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;ui-&gt;tree-&gt;ReadFromCluster(m_file-&gt;GetCluster());<br/>
&nbsp;&nbsp;ui-&gt;label_<a href="CppQuestion.htm">question</a>-&gt;setText(m_file-&gt;GetConceptMap()-&gt;Get<a href="CppQuestion.htm">Question</a>().c_str());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_file-&gt;GetConceptMap()-&gt;GetNodes().empty());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_file-&gt;GetConceptMap()-&gt;GetNodes().size() &gt; 1) <a href="CppComment.htm">//</a>1, as node[0] is focal <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;tree-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_add-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;isEnabled());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check that writing to pvdb::File works<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::FileFactory::DeepCopy(m_file));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetCluster(cluster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetCluster() <a href="CppOperatorEqual.htm">==</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbClusterDialog::~<a href="CppQt.htm">Qt</a>PvdbClusterDialog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/WARNING: assume ui-&gt;<a href="CppWidget.htm">widget</a> is not available <a href="CppAny.htm">any</a>more<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_file-&gt;SetCluster(cluster);<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog::DoRandomStuff()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetCluster() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;DoRandomStuff();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetCluster() <a href="CppOperatorNotEqual.htm">!=</a> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
&nbsp;&nbsp;m_file-&gt;SetCluster(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetCluster() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_file-&gt;GetCluster()-&gt;Empty());<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check that writing to pvdb::File works<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::FileFactory::DeepCopy(m_file));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetCluster(cluster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetCluster() <a href="CppOperatorEqual.htm">==</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a> * <a href="CppQt.htm">Qt</a>PvdbClusterDialog::Get<a href="CppWidget.htm">Widget</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;tree);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;tree;<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a> * <a href="CppQt.htm">Qt</a>PvdbClusterDialog::Get<a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calls the <b><a href="CppConst.htm">const</a></b> <a href="CppVersion.htm">version</a> of <b><a href="CppOperator.htm">operator</a></b>[]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>To avoid duplication in <b><a href="CppConst.htm">const</a></b> and non-<a href="CppConstMemberFunction.htm">const member function</a>s [1]<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog*&gt;(<b><a href="CppThis.htm">this</a></b>)-&gt;Get<a href="CppWidget.htm">Widget</a>());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((e-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ControlModifier) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> e-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_S) { Save(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(e);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check that writing to pvdb::File works<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::FileFactory::DeepCopy(m_file));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetCluster(cluster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetCluster() <a href="CppOperatorEqual.htm">==</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog::on_button_add_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::trim_all_copy(<a href="CppStdString.htm">std::string</a>(" \t x \t ")) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("x"));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::trim_all_copy(ui-&gt;edit-&gt;text().toStdString());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (text.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQString.htm">QString</a>List v;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v.append(text.c_str());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ui-&gt;tree-&gt;addTopLevelItem(<b><a href="CppNew.htm">new</a></b> <a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a>(v));<br/>
&nbsp;&nbsp;ui-&gt;tree-&gt;<a href="CppAdd.htm">Add</a>(text);<br/>
&nbsp;&nbsp;ui-&gt;edit-&gt;clear();<br/>
&nbsp;&nbsp;ui-&gt;edit-&gt;setFocus();<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check that writing to pvdb::File works<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::FileFactory::DeepCopy(m_file));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetCluster(cluster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetCluster() <a href="CppOperatorEqual.htm">==</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog::on_button_next_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Get<a href="CppWidget.htm">Widget</a>()-&gt;isEnabled()) <a href="CppComment.htm">//</a>Save concept map, when user is all<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;SetCluster(cluster);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File's cluster and <a href="CppWidget.htm">widget</a>'s cluster should be the same<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetCluster() <a href="CppOperatorEqual.htm">==</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d(m_file);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d.GoBackToMenu())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_back_to_menu <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;close();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Same test as in <a href="CppConstructor.htm">constructor</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_file-&gt;GetConceptMap()-&gt;GetNodes().size() &gt; 1) <a href="CppComment.htm">//</a>1, as node[0] is focal <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;tree-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_add-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;isEnabled());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Regular tests<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::File::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &amp; file)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbClusterDialog&gt; d(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog(file));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetCluster() <a href="CppOperatorEqual.htm">==</a> d-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;<a href="CppAdd.htm">Add</a>("Modification!");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetCluster() <a href="CppOperatorNotEqual.htm">!=</a> d-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::File::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &amp; file)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbClusterDialog&gt; d(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog(file));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetCluster() <a href="CppOperatorEqual.htm">==</a> d-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;ui-&gt;edit-&gt;setText("modification");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;on_button_add_clicked();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetCluster() <a href="CppOperatorNotEqual.htm">!=</a> d-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQt.htm">Qt</a>PvdbClusterDialog must be enabled <b><a href="CppIf.htm">if</a></b> there is only a center node at the concept map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> "TESTQUESTION";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(<b><a href="CppNew.htm">new</a></b> pvdb::File);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::GetTest( {0,1,2} );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetCluster(cluster);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptFactory::Create(<a href="CppQuestion.htm">question</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create( { node_a } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.Get<a href="CppWidget.htm">Widget</a>()-&gt;isEnabled()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppQt.htm">Qt</a>Cluster<a href="CppWidget.htm">Widget</a> is enabled when there is only a <a href="CppQuestion.htm">question</a> in the ConceptMap");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQt.htm">Qt</a>PvdbClusterDialog must be disabled <b><a href="CppIf.htm">if</a></b> there are more nodes in the concept map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> "TESTQUESTION";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(<b><a href="CppNew.htm">new</a></b> pvdb::File);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::GetTest( { 0,1,2 } );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetCluster(cluster);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create("Concept F"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::GetTests().at(3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::GetTests().at(4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_a(pvdb::NodeFactory::Create(<a href="CppQuestion.htm">question</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_b(pvdb::NodeFactory::GetTests().at(1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c(pvdb::NodeFactory::GetTests().at(2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_d,1.2,3.4,0,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_e,2.3,4.5,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_f,3.4,5.6,2,<b><a href="CppFalse.htm">false</a></b>,0,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_a, node_b, node_c },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetConceptMap(concept_map);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!d.Get<a href="CppWidget.htm">Widget</a>()-&gt;isEnabled()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppQt.htm">Qt</a>Cluster<a href="CppWidget.htm">Widget</a> is disabled when there is a filled ConceptMap");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog::on_edit_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;edit-&gt;text() <a href="CppOperatorEqual.htm">==</a> arg1);<br/>
&nbsp;&nbsp;ui-&gt;button_add-&gt;setEnabled( arg1.size() &gt; 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check that writing to pvdb::File works<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::FileFactory::DeepCopy(m_file));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetCluster(cluster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetCluster() <a href="CppOperatorEqual.htm">==</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog::Save()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filter_str <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("*.") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_raw <a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getSaveFileName(0,"Sla de clustering op",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filter_str.c_str()).toStdString();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename_raw.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;(filename_raw.size() &lt; pvdb::File::GetFilenameExtension().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> filename_raw.substr( filename_raw.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorNotEqual.htm">!=</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ? filename_raw <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(".") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : filename_raw);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Save(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_back_to_menu <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;close();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog::Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cluster);<br/>
&nbsp;&nbsp;m_file-&gt;SetCluster(cluster);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetCluster() <a href="CppOperatorEqual.htm">==</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToCluster());<br/>
&nbsp;&nbsp;m_file-&gt;Save(filename);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog::on_button_save_clicked()<br/>
{<br/>
&nbsp;&nbsp;Save();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbclusterwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbclusterwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCLUSTERWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCLUSTERWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTreeWidget.htm">QTreeWidget</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQTreeWidget.htm">QTreeWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a> a top-level item<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; text);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoRandomStuff();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppInitialize.htm">Initialize</a> the <a href="CppWidget.htm">widget</a> with a cluster<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ReadFromCluster(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; cluster);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Write the <a href="CppWidget.htm">widget</a> its data to a cluster<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; WriteToCluster() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> dropEvent(QDropEvent *event);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RemoveEmptyItem(<a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a>*,<b><a href="CppInt.htm">int</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Block: <a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item must be added instead<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> addTopLevelItem(<a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a> *item) { <a href="CppQTreeWidget.htm">QTreeWidget</a>::addTopLevelItem(item); }<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find out the depth of an item<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetDepth(<b><a href="CppConst.htm">const</a></b> <a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a> * <b><a href="CppConst.htm">const</a></b> item) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCLUSTERWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbclusterwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbclusterwidget.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcluster<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbclusterfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplesfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a> with the only <a href="CppFunction.htm">function</a> of storing a pvdb::Competency additionally<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item : <b><a href="CppPublic.htm">public</a></b> <a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_complexity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_concreteness,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_specifity)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a>(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_competency(competency),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_rating_complexity(rating_complexity),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_rating_concreteness(rating_concreteness),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_rating_specifity(rating_specifity)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency m_competency;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_rating_complexity;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_rating_concreteness;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_rating_specifity;<br/>
};<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQTreeWidget.htm">QTreeWidget</a>(parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Hide the header<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setHeaderHidden(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the row colors alternate<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setAlternatingRowColors(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Allow items to be drag and dropped inside of the <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setDragDropMode(QAbstractItemView::InternalMove);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the drag and drop be animated<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setAnimated(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSignalMacro.htm">SIGNAL</a>(itemChanged(<a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a>*,<b><a href="CppInt.htm">int</a></b>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSLOT.htm">SLOT</a>(RemoveEmptyItem(<a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a>*,<b><a href="CppInt.htm">int</a></b>)));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>::<a href="CppAdd.htm">Add</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; text)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d,-1,-1,-1);<br/>
&nbsp;&nbsp;item-&gt;setText(0,text.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addTopLevelItem(item);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>::DoRandomStuff()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::misc,0,1,2);<br/>
&nbsp;&nbsp;top-&gt;setText(0,"SOMETEXT");<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> child_item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d,-1,0,2);<br/>
&nbsp;&nbsp;child_item-&gt;setText(0,"SOMETEXT");<br/>
&nbsp;&nbsp;top-&gt;addChild(child_item);<br/>
&nbsp;&nbsp;child_item-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addTopLevelItem(top);<br/>
&nbsp;&nbsp;top-&gt;setExpanded(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;top-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDropEnabled);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>::dropEvent(QDropEvent *event)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQTreeWidget.htm">QTreeWidget</a>::dropEvent(event);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fix the possibility of dropping a tree with depth three<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> done <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;topLevelItemCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_top; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <b><a href="CppThis.htm">this</a></b>-&gt;topLevelItemCount());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a> * <b><a href="CppConst.htm">const</a></b> top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;topLevelItem(i); <a href="CppComment.htm">//</a>FIX<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item *&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;topLevelItem(i));&nbsp;&nbsp;<a href="CppComment.htm">//</a>BUG 2012-12-30<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_child <a href="CppOperatorAssign.htm">=</a> top-&gt;childCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_child; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j &lt; top-&gt;childCount());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> top-&gt;child(j) has children<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (top-&gt;child(j)-&gt;childCount() &gt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move top-&gt;child(j) to top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a> * <b><a href="CppConst.htm">const</a></b> clone <a href="CppOperatorAssign.htm">=</a> top-&gt;child(j)-&gt;clone(); <a href="CppComment.htm">//</a>FIX<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> clone <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item *&gt;(top-&gt;child(j)-&gt;clone()); <a href="CppComment.htm">//</a>BUG 2012-12-29<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(clone);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addTopLevelItem(clone);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top-&gt;removeChild(top-&gt;child(j));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j <a href="CppOperatorAssign.htm">=</a> n_child <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorAssign.htm">=</a> n_top <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>End the <b><a href="CppWhile.htm">while</a></b> loop <b><a href="CppIf.htm">if</a></b> no parents were moved<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (done) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check that there are no items at depth three<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;topLevelItemCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_top; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a> * <b><a href="CppConst.htm">const</a></b> top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;topLevelItem(i); <a href="CppComment.htm">//</a>FIX<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item *&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;topLevelItem(i)); <a href="CppComment.htm">//</a>BUG 2012-12-30<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(top);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_child <a href="CppOperatorAssign.htm">=</a> top-&gt;childCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_child; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (top-&gt;child(j)-&gt;childCount() &gt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not find a child item within a child item");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Process all items<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;topLevelItemCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_top; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a> * <b><a href="CppConst.htm">const</a></b> top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;topLevelItem(i); <a href="CppComment.htm">//</a>FIX<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item *&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;topLevelItem(i)); <a href="CppComment.htm">//</a>BUG 2012-12-30<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(top);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let all top items <b><a href="CppAuto.htm">auto</a></b>-expand<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top-&gt;setExpanded(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Allow dropping on top-level items<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDropEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDepth(top)<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_child <a href="CppOperatorAssign.htm">=</a> top-&gt;childCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_child; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDepth(top-&gt;child(j))<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Disallow dropping on non-top-level items<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top-&gt;child(j)-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>::GetDepth(<b><a href="CppConst.htm">const</a></b> <a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a> * <b><a href="CppConst.htm">const</a></b> item) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> depth <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a> * copy <a href="CppOperatorAssign.htm">=</a> item-&gt;parent();<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(copy)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>depth;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy <a href="CppOperatorAssign.htm">=</a> copy-&gt;parent();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> depth;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Without <b><a href="CppThis.htm">this</a></b> seemingly useless <a href="CppMemberFunction.htm">member function</a>,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>the <a href="CppWidget.htm">widget</a> cannot be edited<br/>
&nbsp;&nbsp;<a href="CppQTreeWidget.htm">QTreeWidget</a>::keyPressEvent(event);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>::ReadFromCluster(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; cluster)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;isHeaderHidden());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;alternatingRowColors());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;dragDropMode() <a href="CppOperatorEqual.htm">==</a> QAbstractItemView::InternalMove);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;isAnimated());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;clear();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt;&amp; v <a href="CppOperatorAssign.htm">=</a> cluster-&gt;Get();<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept-&gt;GetRatingComplexity() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept-&gt;GetRatingComplexity() <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d, <a href="CppComment.htm">//</a>A concept is not classified in competencies<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;GetRatingComplexity(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;GetRatingConcreteness(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;GetRatingSpecificity()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top-&gt;setText(0,concept-&gt;GetName().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; examples <a href="CppOperatorAssign.htm">=</a> concept-&gt;GetExamples()-&gt;Get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(examples.begin(),examples.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[top,<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; example)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> child_item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;example-&gt;GetCompetency(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>1, <a href="CppComment.htm">//</a>An example is not rated <b><a href="CppFor.htm">for</a></b> complexity&nbsp;&nbsp; <a href="CppComment.htm">//</a>FIX 2013-02-03<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>1, <a href="CppComment.htm">//</a>An example is not rated <b><a href="CppFor.htm">for</a></b> concreteness <a href="CppComment.htm">//</a>FIX 2013-02-03<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>1&nbsp;&nbsp;<a href="CppComment.htm">//</a>An example is not rated <b><a href="CppFor.htm">for</a></b> specifity&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>FIX 2013-02-03<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child_item-&gt;setText(0,example-&gt;GetText().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top-&gt;addChild(child_item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child_item-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addTopLevelItem(top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top-&gt;setExpanded(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDropEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>::RemoveEmptyItem(<a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a>* item,<b><a href="CppInt.htm">int</a></b> col)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (item-&gt;text(col).isEmpty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Started <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>::Test");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(v.begin(),v.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a> w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.ReadFromCluster(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w.topLevelItemCount() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(c-&gt;Get().size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; d <a href="CppOperatorAssign.htm">=</a> w.WriteToCluster();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Competency::misc,0,1,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(0,<a href="CppQString.htm">QString</a>("An extra line"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.addTopLevelItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w.topLevelItemCount() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(c-&gt;Get().size()) <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; e <a href="CppOperatorAssign.htm">=</a> w.WriteToCluster();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorNotEqual.htm">!=</a> e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>::Test completed successfully");<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; <a href="CppQt.htm">Qt</a>PvdbCluster<a href="CppWidget.htm">Widget</a>::WriteToCluster() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt; concepts;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;topLevelItemCount();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_top; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a> * <b><a href="CppConst.htm">const</a></b> top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;topLevelItem(i); <a href="CppComment.htm">//</a>FIX 2012-12-30<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item *&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;topLevelItem(i)); <a href="CppComment.htm">//</a>BUG 2012-12-30<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> top-&gt;text(0).toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt; examples;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_child <a href="CppOperatorAssign.htm">=</a> top-&gt;childCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_child; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> pvdb_item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item *&gt;(top-&gt;child(j));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency <a href="CppOperatorAssign.htm">=</a> pvdb_item ? pvdb_item-&gt;m_competency : pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetDepth(top-&gt;child(j))<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ExampleFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top-&gt;child(j)-&gt;text(0).toStdString(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;competency<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;examples.push_back(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> pvdb_top <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbTree<a href="CppWidget.htm">Widget</a>Item *&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;topLevelItem(i)); <a href="CppComment.htm">//</a>FIX 2012-12-30<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concepts.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ExamplesFactory::Create(examples),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb_top ? pvdb_top-&gt;m_rating_complexity : <a href="CppOperatorMinus.htm">-</a>1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb_top ? pvdb_top-&gt;m_rating_concreteness : <a href="CppOperatorMinus.htm">-</a>1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb_top ? pvdb_top-&gt;m_rating_specifity : <a href="CppOperatorMinus.htm">-</a>1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concepts.back());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::Create(concepts);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cluster);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_top <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(cluster-&gt;Get().size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "As much top-level items in a <a href="CppQt.htm">Qt</a>Cluster<a href="CppWidget.htm">Widget</a> as Concepts in a Cluster");<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> cluster;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbcompetency.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbcompetency.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCOMPETENCY_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCOMPETENCY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQColor.htm">QColor</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQIcon.htm">QIcon</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<a href="CppComment.htm">///</a>Class to <a href="CppConvert.htm">convert</a> pvdb::Competency to <a href="CppQColor.htm">QColor</a> and vice versa<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>Competency<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a <a href="CppQColor.htm">QColor</a> to a pvdb::Competency<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> pvdb::Competency ColorToCompetency(<b><a href="CppConst.htm">const</a></b> <a href="CppQColor.htm">QColor</a>&amp; color);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a pvdb::Competency to a <a href="CppQColor.htm">QColor</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppQColor.htm">QColor</a> CompetencyToColor(<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a pvdb::Competency to a <a href="CppQIcon.htm">QIcon</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppQIcon.htm">QIcon</a> CompetencyToIcon(<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a <a href="CppQIcon.htm">QIcon</a> to a pvdb::Competency<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> pvdb::Competency IconToCompetency(<b><a href="CppConst.htm">const</a></b> <a href="CppQIcon.htm">QIcon</a>&amp; icon);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The map between pvdb::Competency and <a href="CppQColor.htm">QColor</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;pvdb::Competency,<a href="CppQColor.htm">QColor</a>&gt; m_color_map;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The map between pvdb::Competency and <a href="CppQIcon.htm">QIcon</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdMap.htm">std::map</a>&lt;pvdb::Competency,<a href="CppQIcon.htm">QIcon</a>&gt; m_icon_map;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create map between pvdb::Competency and <a href="CppQColor.htm">QColor</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;pvdb::Competency,<a href="CppQColor.htm">QColor</a>&gt; CreateColorMap();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create map between pvdb::Competency and <a href="CppQIcon.htm">QIcon</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;pvdb::Competency,<a href="CppQIcon.htm">QIcon</a>&gt; CreateIconMap();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCOMPETENCY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbcompetency.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbcompetency.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcompetency.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQImage.htm">QImage</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPixmap.htm">QPixmap</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;pvdb::Competency,<a href="CppQColor.htm">QColor</a>&gt; <a href="CppQt.htm">Qt</a>Competency::m_color_map <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>Competency::CreateColorMap();<br/>
<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;pvdb::Competency,<a href="CppQIcon.htm">QIcon</a> &gt; <a href="CppQt.htm">Qt</a>Competency::m_icon_map&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>Competency::CreateIconMap();<br/>
<a href="CppStdMap.htm">std::map</a>&lt;pvdb::Competency,<a href="CppQIcon.htm">QIcon</a> &gt; <a href="CppQt.htm">Qt</a>Competency::m_icon_map;<br/>
<br/>
pvdb::Competency <a href="CppQt.htm">Qt</a>Competency::ColorToCompetency(<b><a href="CppConst.htm">const</a></b> <a href="CppQColor.htm">QColor</a>&amp; color)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(m_color_map.begin(),m_color_map.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[color](<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;pvdb::Competency,<a href="CppQColor.htm">QColor</a>&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; color.red() <a href="CppOperatorEqual.htm">==</a> p.second.red()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> color.green() <a href="CppOperatorEqual.htm">==</a> p.second.green()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> color.blue() <a href="CppOperatorEqual.htm">==</a> p.second.blue();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter<a href="CppOperatorNotEqual.htm">!=</a>m_color_map.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> iter-&gt;first;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQColor.htm">QColor</a> <a href="CppQt.htm">Qt</a>Competency::CompetencyToColor(<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> m_color_map.find(competency);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter<a href="CppOperatorNotEqual.htm">!=</a>m_color_map.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> iter-&gt;second;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQIcon.htm">QIcon</a> <a href="CppQt.htm">Qt</a>Competency::CompetencyToIcon(<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_icon_map.empty()) m_icon_map <a href="CppOperatorAssign.htm">=</a> CreateIconMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_icon_map.empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> m_icon_map.find(competency);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter<a href="CppOperatorNotEqual.htm">!=</a>m_icon_map.end());<br/>
&nbsp;&nbsp;<a href="CppQIcon.htm">QIcon</a> icon <a href="CppOperatorAssign.htm">=</a> iter-&gt;second;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!icon.isNull());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> icon;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;pvdb::Competency,<a href="CppQColor.htm">QColor</a>&gt; <a href="CppQt.htm">Qt</a>Competency::CreateColorMap()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, <a href="CppQt.htm">Qt</a>::white },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::profession&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , <a href="CppQt.htm">Qt</a>::red },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::organisations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, <a href="CppQColor.htm">QColor</a>(255,127,0) }, <a href="CppComment.htm">//</a>Orange<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::social_surroundings, <a href="CppQt.htm">Qt</a>::yellow },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::target_audience&nbsp;&nbsp;&nbsp;&nbsp;, <a href="CppQt.htm">Qt</a>::green },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::ti_knowledge&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , <a href="CppQt.htm">Qt</a>::cyan },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::prof_growth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, <a href="CppQt.htm">Qt</a>::blue },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::misc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , <a href="CppQt.htm">Qt</a>::magenta }<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;pvdb::Competency,<a href="CppQIcon.htm">QIcon</a>&gt; <a href="CppQt.htm">Qt</a>Competency::CreateIconMap()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, <a href="CppQIcon.htm">QIcon</a>(":/images/PicWhite14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::profession&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , <a href="CppQIcon.htm">QIcon</a>(":/images/PicPurple14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::organisations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, <a href="CppQIcon.htm">QIcon</a>(":/images/PicBlue14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::social_surroundings, <a href="CppQIcon.htm">QIcon</a>(":/images/PicCyan14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::target_audience&nbsp;&nbsp;&nbsp;&nbsp;, <a href="CppQIcon.htm">QIcon</a>(":/images/PicGreen14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::ti_knowledge&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , <a href="CppQIcon.htm">QIcon</a>(":/images/PicYelow14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::prof_growth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, <a href="CppQIcon.htm">QIcon</a>(":/images/PicOrange14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::misc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , <a href="CppQIcon.htm">QIcon</a>(":/images/PicRed14x14.png") }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, <a href="CppQIcon.htm">QIcon</a>(":/images/PicWhite14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::profession&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , <a href="CppQIcon.htm">QIcon</a>(":/images/PicRed14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::organisations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, <a href="CppQIcon.htm">QIcon</a>(":/images/PicOrange14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::social_surroundings, <a href="CppQIcon.htm">QIcon</a>(":/images/PicYellow14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::target_audience&nbsp;&nbsp;&nbsp;&nbsp;, <a href="CppQIcon.htm">QIcon</a>(":/images/PicGreen14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::ti_knowledge&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , <a href="CppQIcon.htm">QIcon</a>(":/images/PicCyan14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::prof_growth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, <a href="CppQIcon.htm">QIcon</a>(":/images/PicBlue14x14.png") },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ pvdb::Competency::misc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , <a href="CppQIcon.htm">QIcon</a>(":/images/PicPurple14x14.png") }<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
pvdb::Competency <a href="CppQt.htm">Qt</a>Competency::IconToCompetency(<b><a href="CppConst.htm">const</a></b> <a href="CppQIcon.htm">QIcon</a>&amp; icon)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_icon_map.empty()) m_icon_map <a href="CppOperatorAssign.htm">=</a> CreateIconMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_icon_map.empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(m_icon_map.begin(),m_icon_map.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[icon](<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;pvdb::Competency,<a href="CppQIcon.htm">QIcon</a>&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> icon.pixmap(14,14).toImage() <a href="CppOperatorEqual.htm">==</a> (p.second).pixmap(14,14).toImage();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> icon.name() <a href="CppOperatorEqual.htm">==</a> (p.second).name();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(icon.pixmap().size() <a href="CppOperatorEqual.htm">==</a> (p.second).pixmap().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> icon.pixmap() <a href="CppOperatorEqual.htm">==</a> (p.second).pixmap();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter<a href="CppOperatorNotEqual.htm">!=</a>m_icon_map.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> iter-&gt;first;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Competency::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Con<a href="CppVersion.htm">version</a> between <a href="CppQColor.htm">QColor</a> and pvdb::Competency<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;pvdb::Competency&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::GetAllCompetencies();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> pvdb::Competency&amp; competency)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQColor.htm">QColor</a> color <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppQt.htm">Qt</a>Competency::CompetencyToColor(competency);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::<a href="CppQt.htm">Qt</a>Competency::ColorToCompetency(color) <a href="CppOperatorEqual.htm">==</a> competency);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Con<a href="CppVersion.htm">version</a> between <a href="CppQIcon.htm">QIcon</a> and pvdb::Competency<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;pvdb::Competency&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::GetAllCompetencies();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> pvdb::Competency&amp; competency)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQIcon.htm">QIcon</a> icon <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppQt.htm">Qt</a>Competency::CompetencyToIcon(competency);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::<a href="CppQt.htm">Qt</a>Competency::IconToCompetency(icon) <a href="CppOperatorEqual.htm">==</a> competency);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>Competency::Test finished successfully");<br/>
<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconcepteditdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconcepteditdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCONCEPTEDITDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCONCEPTEDITDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptEditDialog;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptEditDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/concept is not <b><a href="CppConst.htm">const</a></b> as user might want to modify it<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/concept is only modified <b><a href="CppIf.htm">if</a></b> user clicks OK<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptEditDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog();<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_WRITE_TO_CONCEPT<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; WriteToConcept() <b><a href="CppConst.htm">const</a></b>;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> PVDB_USE_ONLY_NEEDED<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_name; }<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RemoveEmptyItem(<a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item * item);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_add_clicked();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Finally <a href="CppConvert.htm">convert</a> what the GUI displays to a Concept<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_ok_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog *ui;<br/>
<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_WRITE_TO_CONCEPT<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_rating_complexity;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_rating_concreteness;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_rating_specificity;<br/>
<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The concept being modified, cannot be <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; m_concept;<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCONCEPTEDITDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconcepteditdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconcepteditdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconcepteditdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQObject.htm">QObject</a>List&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplesfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbconcepteditdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQTreeWidgetItem.htm">QTreeWidgetItem</a> with the only <a href="CppFunction.htm">function</a> of storing a pvdb::Competency additionally, only used in testing<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item : <b><a href="CppPublic.htm">public</a></b> <a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_competency(competency)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency m_competency;<br/>
};<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog::<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog),<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_WRITE_TO_CONCEPT<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_complexity(concept-&gt;GetRatingComplexity()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_concreteness(concept-&gt;GetRatingConcreteness()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_specificity(concept-&gt;GetRatingSpecificity())<br/>
<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept(concept)<br/>
<a href="CppEndif.htm">#endif</a><br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> the concept to its GUI elements<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the name<br/>
&nbsp;&nbsp;ui-&gt;edit_concept-&gt;setText(concept-&gt;GetName().c_str());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the examples<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(concept-&gt;GetExamples()-&gt;Get());<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s-&gt;GetText().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item(s-&gt;GetCompetency());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(s-&gt;GetText().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDropEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;list_examples-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;list_examples-&gt;isEnabled());<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;list_examples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSignalMacro.htm">SIGNAL</a>(itemChanged(<a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item*)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSLOT.htm">SLOT</a>(RemoveEmptyItem(<a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item*)));<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog::~<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptEditDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Enter <a href="CppOperatorLogicalOr.htm">||</a> e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Return)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::AltModifier)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on_button_ok_clicked();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQDialog.htm">QDialog</a>::keyPressEvent(e); <a href="CppComment.htm">//</a>Causes dialog to close unwanted?<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptEditDialog::on_button_add_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Close when the user has entered an empty edit<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;edit_text-&gt;text().isEmpty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(ui-&gt;edit_text-&gt;text());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDropEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;list_examples-&gt;addItem(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;ui-&gt;edit_text-&gt;clear();<br/>
&nbsp;&nbsp;ui-&gt;edit_text-&gt;setFocus();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptEditDialog::RemoveEmptyItem(<a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item * item)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (item-&gt;text().isEmpty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptEditDialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume reading in a concept and clicking OK without modification does not modify <a href="CppAny.htm">any</a>thing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; old_concept <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::DeepCopy(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept <a href="CppOperatorEqual.htm">==</a> old_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog d(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do nothing...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.on_button_ok_clicked();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> PVDB_WRITE_TO_CONCEPT<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.WriteToConcept() <a href="CppOperatorEqual.htm">==</a> old_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept <a href="CppOperatorEqual.htm">==</a> old_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume reading in a concept and clicking OK after modification of the name does modify concept<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; old_concept <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::DeepCopy(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept <a href="CppOperatorEqual.htm">==</a> old_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog d(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;edit_concept-&gt;setText(d.ui-&gt;edit_concept-&gt;text() <a href="CppOperatorPlus.htm">+</a> "MODIFICATION");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.on_button_ok_clicked();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> PVDB_WRITE_TO_CONCEPT<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(concept <a href="CppOperatorNotEqual.htm">!=</a> old_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume reading in a concept and clicking OK after adding an example<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; old_concept <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::DeepCopy(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept <a href="CppOperatorEqual.htm">==</a> old_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog d(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.ui-&gt;edit_text-&gt;text().isEmpty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;edit_text-&gt;setText("TO BE ADDED EXAMPLE");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.on_button_add_clicked(); <a href="CppComment.htm">//</a>Should add<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.on_button_ok_clicked();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> PVDB_WRITE_TO_CONCEPT<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(concept <a href="CppOperatorNotEqual.htm">!=</a> old_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume reading in a concept and NOT clicking OK does not change the concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>even when having changed the name and examples in the GUI<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; old_concept <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::DeepCopy(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept <a href="CppOperatorEqual.htm">==</a> old_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog d(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;edit_concept-&gt;setText(d.ui-&gt;edit_concept-&gt;text() <a href="CppOperatorPlus.htm">+</a> "MODIFICATION");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.ui-&gt;edit_text-&gt;text().isEmpty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;edit_text-&gt;setText("TO BE ADDED EXAMPLE");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.on_button_add_clicked(); <a href="CppComment.htm">//</a>Should add<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>DO NOT PRESS OK d.on_button_ok_clicked();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> PVDB_WRITE_TO_CONCEPT<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept <a href="CppOperatorEqual.htm">==</a> old_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog::Test completed successfully");<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptEditDialog::on_button_ok_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> PVDB_WRITE_TO_CONCEPT<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Name<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> ui-&gt;edit_concept-&gt;text().toStdString();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Examples<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_items <a href="CppOperatorAssign.htm">=</a> ui-&gt;list_examples-&gt;count();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_items; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> ui-&gt;list_examples-&gt;item(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> pvdb_item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item *&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency <a href="CppOperatorAssign.htm">=</a> pvdb_item ? pvdb_item-&gt;m_competency : pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ExampleFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;text().toStdString(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;competency<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_items <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set to concept<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; examples(<b><a href="CppNew.htm">new</a></b> pvdb::Examples(v));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(examples);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept-&gt;GetExamples());<br/>
&nbsp;&nbsp;m_concept-&gt;SetName(name);<br/>
&nbsp;&nbsp;m_concept-&gt;SetExamples(examples);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;close();<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_WRITE_TO_CONCEPT<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; <a href="CppQt.htm">Qt</a>PvdbConceptEditDialog::WriteToConcept() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Name<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> ui-&gt;edit_concept-&gt;text().toStdString();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Examples<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_items <a href="CppOperatorAssign.htm">=</a> ui-&gt;list_examples-&gt;count();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_items; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> ui-&gt;list_examples-&gt;item(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> pvdb_item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item *&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency <a href="CppOperatorAssign.htm">=</a> pvdb_item ? pvdb_item-&gt;m_competency : pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ExampleFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;text().toStdString(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;competency<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_items <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set to concept<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; examples(<b><a href="CppNew.htm">new</a></b> pvdb::Examples(v));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(examples);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;examples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_rating_complexity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_rating_concreteness,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_rating_specificity);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> concept;<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCONCEPT_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCONCEPT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQBrush.htm">QBrush</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPen.htm">QPen</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtRoundedTextRectItem.htm">qtroundedtextrectitem</a>.h"<br/>
<br/>
<a href="CppComment.htm">///</a>A <a href="CppQt.htm">Qt</a>PvdbConceptItem shows a Concept<br/>
<a href="CppComment.htm">///</a>A Concept can be shown in multiple different ways, which is performed by its derived <b><a href="CppClass.htm">classes</a></b>.<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtRoundedTextRectItem.htm">QtRoundedTextRectItem</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtRoundedTextRectItem.htm">QtRoundedTextRectItem</a> Base;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/concept cannot be <b><a href="CppConst.htm">const</a></b>, the user might edit it (in derived <b><a href="CppClass.htm">classes</a></b> <b><a href="CppFor.htm">for</a></b> example)<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptItem(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptItem&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppQt.htm">Qt</a>PvdbConceptItem() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read the Concept<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&nbsp;&nbsp;GetConcept() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt;&amp; GetConcept() { <b><a href="CppReturn.htm">return</a></b> m_concept; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get he brush by which the indicator is filled<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a>&amp; GetIndicatorBrush() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_indicator_brush; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The pen by which the indicator is drawn<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a>&amp; GetIndicatorPen() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_indicator_pen; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Derived <b><a href="CppClass.htm">classes</a></b> respond differently to key presses<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Derived <b><a href="CppClass.htm">classes</a></b> draw the concept the same, only with different pens<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/It is <a href="CppQt.htm">Qt</a>PvdbEdgeItem however, that also draws an arrow underneath<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paint(<a href="CppQPainter.htm">QPainter</a>* painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a> *, <a href="CppQWidget.htm">QWidget</a> *) <b><a href="CppFinal.htm">final</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The brush by which the indicator is filled<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetIndicatorBrush(<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a>&amp; brush);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The pen by which the indicator is filled<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetIndicatorPen(<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a>&amp; pen);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppMain.htm">main</a> brush<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMainBrush(<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a>&amp; <a href="CppAny.htm">any</a>_brush);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> the <a href="CppQt.htm">Qt</a>Node to Node<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; WriteToNode() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setBrush(<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a> &amp;brush) { <a href="CppQtRoundedRectItem.htm">QtRoundedRectItem</a>::setBrush(brush); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> hoverMoveEvent(<a href="CppQGraphicsSceneHoverEvent.htm">QGraphicsSceneHoverEvent</a> *);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mouseMoveEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mousePressEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Slot whenever the name of the concept is changed<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnConceptNameChanged();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> UpdateBrushesAndPens() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The concept on the node<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_concept cannot be <b><a href="CppConst.htm">const</a></b>: the user might edit it<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; m_concept;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The brush by which the indicator is filled<br/>
&nbsp;&nbsp;<a href="CppQBrush.htm">QBrush</a> m_indicator_brush;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The pen by which the indicator is drawn<br/>
&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a> m_indicator_pen;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setFocus(<a href="CppQt.htm">Qt</a>::FocusReason focusReason) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCONCEPT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptitem.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQCursor.htm">QCursor</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFont.htm">QFont</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbexamplesitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbConceptItem::<a href="CppQt.htm">Qt</a>PvdbConceptItem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;: m_concept(concept),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_indicator_brush(<a href="CppQBrush.htm">QBrush</a>(<a href="CppQColor.htm">QColor</a>(0,0,0,0))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_indicator_pen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,0)))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept-&gt;GetExamples());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsFocusable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsSelectable);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Allow mouse tracking<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setAcceptHoverEvents(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetPadding(<a href="CppQtRoundedTextRectItem.htm">QtRoundedTextRectItem</a>::Padding(1.0,6.0,1.0,2.0));<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetText(m_concept-&gt;GetName());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>?FIX 2013-01-06 22:47<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_name_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptItem::OnConceptNameChanged,<b><a href="CppThis.htm">this</a></b>)); <a href="CppComment.htm">//</a>Obligatory<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; <a href="CppQt.htm">Qt</a>PvdbConceptItem::GetConcept() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; p(m_concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem::hoverMoveEvent(<a href="CppQGraphicsSceneHoverEvent.htm">QGraphicsSceneHoverEvent</a> *)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setCursor(<a href="CppQCursor.htm">QCursor</a>(<a href="CppQt.htm">Qt</a>::<a href="CppPoint.htm">Point</a>ingHandCursor));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem::mouseMoveEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;Base::mouseMoveEvent(event);<br/>
&nbsp;&nbsp;m_signal_request_scene_update();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem::mousePressEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;Base::mousePressEvent(event);<br/>
&nbsp;&nbsp;m_signal_request_scene_update();<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a> ?FIX 2013-01-06 22:47<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem::OnConceptNameChanged()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept-&gt;GetExamples());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetText( <b><a href="CppThis.htm">this</a></b>-&gt;m_concept-&gt;GetName() );<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_signal_item_changed(<b><a href="CppThis.htm">this</a></b>); <a href="CppComment.htm">//</a>Called by SetText<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem::paint(<a href="CppQPainter.htm">QPainter</a>* painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a>* option, <a href="CppQWidget.htm">QWidget</a>* <a href="CppWidget.htm">widget</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept-&gt;GetExamples());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!<b><a href="CppThis.htm">this</a></b>-&gt;hasFocus()); <a href="CppComment.htm">//</a>Can have focus when used as stand-alone<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!<b><a href="CppThis.htm">this</a></b>-&gt;isSelected()); <a href="CppComment.htm">//</a>Can have focus when used as stand-alone<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;UpdateBrushesAndPens();<br/>
<br/>
&nbsp;&nbsp;Base::paint(painter,option,<a href="CppWidget.htm">widget</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_concept-&gt;GetExamples()-&gt;Get().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;setBrush(m_indicator_brush);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;setPen(m_indicator_pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw indicator that a concept has examples in it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;drawRect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rect().right() <a href="CppOperatorMinus.htm">-</a> 5.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rect().top() <a href="CppOperatorPlus.htm">+</a> 3.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem::SetIndicatorBrush(<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a>&amp; brush)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_indicator_brush <a href="CppOperatorNotEqual.htm">!=</a> brush)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_indicator_brush <a href="CppOperatorAssign.htm">=</a> brush;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem::SetIndicatorPen(<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a>&amp; pen)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_indicator_pen <a href="CppOperatorNotEqual.htm">!=</a> pen)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_indicator_pen <a href="CppOperatorAssign.htm">=</a> pen;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem::SetMainBrush(<b><a href="CppConst.htm">const</a></b> <a href="CppQBrush.htm">QBrush</a>&amp; <a href="CppAny.htm">any</a>_brush)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;brush() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppAny.htm">any</a>_brush)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setBrush(<a href="CppAny.htm">any</a>_brush);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;brush() <a href="CppOperatorEqual.htm">==</a> <a href="CppAny.htm">any</a>_brush);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptmapdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptmapdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCONCEPTMAPDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCONCEPTMAPDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmap<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog; }<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file, <a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do random stuff, <b><a href="CppFor.htm">for</a></b> example, add a node and an edge (used <b><a href="CppFor.htm">for</a></b> <a href="CppDebug.htm">debugging</a>)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoRandomStuff();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a> * Get<a href="CppWidget.htm">Widget</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a> * Get<a href="CppWidget.htm">Widget</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the user need to go back to the student menu?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> GoBackToMenu() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_back_to_menu; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Save to disk<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Shuffle to concepts (used <b><a href="CppFor.htm">for</a></b> <a href="CppDebug.htm">debugging</a>)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Shuffle();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_save_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_print_clicked();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> on_button_test_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must we go back to the student menu?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_back_to_menu;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The File<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; m_file;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/NEW 2013-01-07<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnConceptMapItemRequestsEdit(<a href="CppQt.htm">Qt</a>PvdbConceptMapItem* <b><a href="CppConst.htm">const</a></b> item);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCONCEPTMAPDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptmapdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptmapdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQLabel.htm">QLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPrintDialog.htm">QPrintDialog</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPrinter.htm">QPrinter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconcepteditdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbedgeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbprintconceptmapdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtScopedDisable.htm">qtscopeddisable</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbconceptmapdialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_back_to_menu(<b><a href="CppFalse.htm">false</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_file(file)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*file,*m_file));<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If user has added one Node at least, put it in the <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_file-&gt;GetConceptMap()-&gt;GetNodes().size() &gt; 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("User supplied a filled-in concept map");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Get<a href="CppWidget.htm">Widget</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppWidget.htm">Widget</a>()-&gt;ReadFromConceptMap(m_file-&gt;GetConceptMap());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMap::HasSameContent(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;GetConceptMap(),Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read the concept map<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (!m_file-&gt;GetCluster()-&gt;Empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("User supplied a filled-in cluster");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetCluster());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::CreateFromCluster(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;GetConceptMap()-&gt;Get<a href="CppQuestion.htm">Question</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;GetCluster()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((m_file-&gt;GetCluster()-&gt;Get().size() <a href="CppOperatorPlus.htm">+</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> (concept_map-&gt;GetNodes().size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "As much cluster items as nodes <a href="CppOperatorPlus.htm">+</a> focus <a href="CppQuestion.htm">question</a>");<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetConceptMap()-&gt;GetNodes().size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppWidget.htm">Widget</a>()-&gt;ReadFromConceptMap(m_file-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a concept map from the single-node concept map<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("User starts <a href="CppConstructor.htm">construct</a>ing a concept map from scratch");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Get<a href="CppWidget.htm">Widget</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppWidget.htm">Widget</a>()-&gt;ReadFromConceptMap(m_file-&gt;GetConceptMap());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMap::HasSameContent(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;GetConceptMap(),Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Get<a href="CppWidget.htm">Widget</a>());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the <a href="CppQuestion.htm">question</a> in the concept map<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetConceptMap()-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> m_file-&gt;GetConceptMap()-&gt;Get<a href="CppQuestion.htm">Question</a>());<br/>
&nbsp;&nbsp;Get<a href="CppWidget.htm">Widget</a>()-&gt;ReadFromConceptMap(m_file-&gt;GetConceptMap());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Center the dialog<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(screen.adjusted(64,64,-64,-64));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;m_signal_conceptmapitem_requests_edit.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::OnConceptMapItemRequestsEdit,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::~<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::DoRandomStuff()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_file-&gt;GetConceptMap(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do random stuff<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;DoRandomStuff();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!pvdb::ConceptMap::HasSameContent(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_file-&gt;GetConceptMap(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap()));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;m_file-&gt;SetConceptMap(concept_map);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_file-&gt;GetConceptMap(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetConceptMap()-&gt;GetNodes().size() &gt; 1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_file-&gt;GetConceptMap()-&gt;GetEdges().empty());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a> * <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::Get<a href="CppWidget.htm">Widget</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;<a href="CppWidget.htm">widget</a>;<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a> * <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::Get<a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calls the <b><a href="CppConst.htm">const</a></b> <a href="CppVersion.htm">version</a> of <b><a href="CppOperator.htm">operator</a></b>[]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>To avoid duplication in <b><a href="CppConst.htm">const</a></b> and non-<a href="CppConstMemberFunction.htm">const member function</a>s [1]<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog*&gt;(<b><a href="CppThis.htm">this</a></b>)-&gt;Get<a href="CppWidget.htm">Widget</a>());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((e-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ControlModifier) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> e-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_S) { on_button_save_clicked(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(e);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::on_button_print_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbPrintConceptMapDialog d(<b><a href="CppThis.htm">this</a></b>-&gt;m_file);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_OLD_APPROACH_734532864252378497232892735623897298<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> stylesheet <a href="CppOperatorAssign.htm">=</a> qApp-&gt;styleSheet();<br/>
&nbsp;&nbsp;qApp-&gt;setStyleSheet("");<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set up a <a href="CppQPrinter.htm">QPrinter</a><br/>
&nbsp;&nbsp;<a href="CppQPrinter.htm">QPrinter</a> printer;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> filename <a href="CppOperatorAssign.htm">=</a> "<a href="ProjectVanDenBogaart.htm">ProjectVanDenBogaart</a>.pdf";<br/>
&nbsp;&nbsp;printer.setOutputFormat(<a href="CppQPrinter.htm">QPrinter</a>::PdfFormat);<br/>
&nbsp;&nbsp;printer.setOrientation(<a href="CppQPrinter.htm">QPrinter</a>::Portrait);<br/>
&nbsp;&nbsp;printer.setPaperSize(<a href="CppQPrinter.htm">QPrinter</a>::A4);<br/>
&nbsp;&nbsp;printer.setFullPage(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;printer.setOutputFileName(filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start printer dialog<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPrintDialog.htm">QPrintDialog</a>&gt; print_dialog(<b><a href="CppNew.htm">new</a></b> <a href="CppQPrintDialog.htm">QPrintDialog</a>(&amp;printer));<br/>
&nbsp;&nbsp;print_dialog-&gt;setWindowTitle(tr("Print document"));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (print_dialog-&gt;exec() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQDialog.htm">QDialog</a>::Accepted) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the image to painter to printer<br/>
&nbsp;&nbsp;<a href="CppQPainter.htm">QPainter</a> painter;<br/>
&nbsp;&nbsp;painter.setBrush(<a href="CppQBrush.htm">QBrush</a>(<a href="CppQColor.htm">QColor</a>(255,255,255)));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>printer.setBrush(<a href="CppQBrush.htm">QBrush</a>(<a href="CppQColor.htm">QColor</a>(255,255,255)));<br/>
&nbsp;&nbsp;painter.begin(&amp;printer);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Page 1:<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>The y coordinat to start from<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQLabel.htm">QLabel</a> name(m_file-&gt;GetStudentName().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>name.setStyleSheet("<a href="CppQLabel.htm">QLabel</a> { font-size: 18px;&nbsp;&nbsp;font-family: \"Courier\", \"Courier New\", Courier, monospace;font-weight: bold;&nbsp;&nbsp;padding: 1px;}");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name.render(&amp;painter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorPlusAssign.htm">+=</a> name.height() <a href="CppOperatorPlus.htm">+</a> 4; <a href="CppComment.htm">//</a>4: spacing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concept map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a> w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;w.ReadFromConceptMap(<b><a href="CppThis.htm">this</a></b>-&gt;m_file-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;w.render(&amp;painter,printer.pageRect().adjusted(0,y,0,-y)); <a href="CppComment.htm">//</a>Render full <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;painter.end();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Restore the stylesheet<br/>
&nbsp;&nbsp;qApp-&gt;setStyleSheet(stylesheet);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::OnConceptMapItemRequestsEdit(<a href="CppQt.htm">Qt</a>PvdbConceptMapItem* <b><a href="CppConst.htm">const</a></b> item)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog d(item-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>item-&gt;GetConcept()-&gt;m_signal_examples_changed(item-&gt;GetConcept().get()); <a href="CppComment.htm">//</a>NEW 2013-01-08 21:40<br/>
&nbsp;&nbsp;item-&gt;m_signal_item_has_updated(item);<br/>
&nbsp;&nbsp;item-&gt;update();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::on_button_save_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Temporarily disable to <a href="CppWidget.htm">widget</a>, otherwise saving cannot succeed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQtScopedDisable.htm">QtScopedDisable</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; <a href="CppScope.htm">scope</a>d_disable1(Get<a href="CppWidget.htm">Widget</a>());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQtScopedDisable.htm">QtScopedDisable</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog&gt; <a href="CppScope.htm">scope</a>d_disable2(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filter_str <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("*.") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_raw <a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getSaveFileName(0,"Sla de concept map op",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filter_str.c_str()).toStdString();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename_raw.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;(filename_raw.size() &lt; pvdb::File::GetFilenameExtension().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> filename_raw.substr( filename_raw.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorNotEqual.htm">!=</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ? filename_raw <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(".") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : filename_raw);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Save(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_back_to_menu <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;close();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map <a href="CppOperatorAssign.htm">=</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file);<br/>
&nbsp;&nbsp;m_file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(pvdb::ConceptMap::To<a href="CppXml.htm">Xml</a>(m_file-&gt;GetConceptMap()));<br/>
&nbsp;&nbsp;m_file-&gt;Save(filename);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>{ <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppDebug.htm">debug</a>_str <a href="CppOperatorAssign.htm">=</a> "File saved as " <a href="CppOperatorPlus.htm">+</a> filename; <a href="CppTRACE.htm">TRACE</a>(<a href="CppDebug.htm">debug</a>_str); }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::Shuffle()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;Shuffle();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptmapdisplaywidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptmapdisplaywidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCONCEPTMAPDISPLAYWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCONCEPTMAPDISPLAYWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmap<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a> <b><a href="CppFor.htm">for</a></b> creation and editing of a ConceptMap<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a> This_t;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>() {}<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Creates a <b><a href="CppNew.htm">new</a></b> derived <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A simpler alternative to Clone (see above)<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; CreateNewDerived() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoRandomStuff() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppInitialize.htm">Initialize</a> the <a href="CppWidget.htm">widget</a> with a concept map<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Note that ReadFromConceptMap changes the copy of the map entered, by changing some GUI<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/elements (coordinats of the nodes, <b><a href="CppFor.htm">for</a></b> example). Therefore, the following test will fail:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;conceptmap<a href="CppWidget.htm">widget</a>-&gt;ReadFromConceptMap(m);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMapPtr n <a href="CppOperatorAssign.htm">=</a> w-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m <a href="CppOperatorEqual.htm">==</a> n);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/instead, use<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(m,n));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> ReadFromConceptMap(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; map);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a>s an Edge and connects (some of) its <b><a href="CppQtSignals.htm">signals</a></b> to <b><a href="CppSlots.htm">slots</a></b> present in the derived <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Edge cannot be <b><a href="CppConst.htm">const</a></b>, as it has a Concept on it that the user might want to edit<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Edge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;&amp; qtnodes);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a>s a node and connects (some of) its <b><a href="CppQtSignals.htm">signals</a></b> to <b><a href="CppSlots.htm">slots</a></b> present in the derived <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * <a href="CppAdd.htm">Add</a>Node(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CleanMe();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Called whenever a concept is clicked or moved<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If item is <b><a href="CppNullptr.htm">nullptr</a></b>, the last item might be deleted<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* due to <a href="CppQtKeyboardFriendlyGraphicsView.htm">QtKeyboardFriendlyGraphicsView</a> working on <a href="CppQGraphicsItem.htm">QGraphicsItem</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is implemented by OnItemUpdateRequestImpl<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppQGraphicsItem.htm">QGraphicsItem</a> cannot be <b><a href="CppConst.htm">const</a></b>: some items request <b><a href="CppFor.htm">for</a></b> an update via-via<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnItemRequestUpdateImpl(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() {}<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCONCEPTMAPDISPLAYWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptmapdisplaywidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptmapdisplaywidget.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapdisplay<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbedgeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbexamplesitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhints.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcenternodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppComment.htm">///</a>Collect all <a href="CppQGraphicsItem.htm">QGraphicsItem</a>s with <b><a href="CppClass.htm">class</a></b> T in an unorderly way<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;T*&gt; Collect(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsScene.htm">QGraphicsScene</a>* <b><a href="CppConst.htm">const</a></b> scene)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;T*&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQList.htm">QList</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a> *&gt; items <a href="CppOperatorAssign.htm">=</a> scene-&gt;items();<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(items.begin(),items.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;T*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;v.erase(<a href="CppStdRemove.htm">std::remove</a>(v.begin(),v.end(),<b><a href="CppNullptr.htm">nullptr</a></b>),v.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),<b><a href="CppNullptr.htm">nullptr</a></b>)<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>(parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>::<a href="CppAdd.htm">Add</a>Edge(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; edge,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;&amp; qtnodes)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ERROR IN THIS LINE: THE NODE CONCEPTS HAVE GOTTEN A DIFFERENT ORDER!<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SOLUTION: MAKE NODE_CONCEPTS LOCAL AND IN THE SAME ORDER<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbRateConcept*&gt; node_concepts <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbRateConcept&gt;(scene());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge-&gt;GetFrom() &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtnodes.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge-&gt;GetTo()&nbsp;&nbsp; &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtnodes.size()));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; concept(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem(edge-&gt;GetConcept()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem * <b><a href="CppConst.htm">const</a></b> qtedge <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtnodes[edge-&gt;GetFrom()],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtnodes[edge-&gt;GetTo()]<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the EdgeConcepts to the scene<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnItemRequestsUpdate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)); <a href="CppComment.htm">//</a>Do not forget the placeholder!<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;addItem(qtedge);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge-&gt;pos().x() <a href="CppOperatorEqual.htm">==</a> edge-&gt;GetX());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge-&gt;pos().y() <a href="CppOperatorEqual.htm">==</a> edge-&gt;GetY());<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbNodeItem * <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>::<a href="CppAdd.htm">Add</a>Node(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; qtconcept(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem(node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> qtnode <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem(node,qtconcept);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General: inform an Observer that <b><a href="CppThis.htm">this</a></b> item has changed<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp; <a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnItemRequestsUpdate,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General: inform an Observer that a <a href="CppQGraphicsScene.htm">QGraphicsScene</a> needs to be updated<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;addItem(qtnode);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode-&gt;pos().x() <a href="CppOperatorEqual.htm">==</a> node-&gt;GetX());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode-&gt;pos().y() <a href="CppOperatorEqual.htm">==</a> node-&gt;GetY());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> qtnode;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>::CleanMe()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prepare clearing the scene<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_examples);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_examples <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clear the scene, invalidates all scene items copies<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;scene());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;clear();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put stuff back in<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the invisible examples item<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_examples);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbExamplesItem;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;addItem(m_examples);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>::CreateNewDerived() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; p(<b><a href="CppNew.htm">new</a></b> This_t);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>::OnItemRequestUpdateImpl(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item)<br/>
{<br/>
&nbsp;&nbsp;m_examples-&gt;SetBuddyItem(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapItem*&gt;(item));<br/>
&nbsp;&nbsp;scene()-&gt;update();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptmapeditwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptmapeditwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCONCEPTMAPEDITWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCONCEPTMAPEDITWIDGET_H<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnewarrow.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbitemhighlighter.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="Tools.htm">tools</a>item.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmap<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a> <b><a href="CppFor.htm">for</a></b> creation and editing of a ConceptMap<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a> This_t;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Creates a <b><a href="CppNew.htm">new</a></b> derived <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A simpler alternative to Clone (see above)<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; CreateNewDerived() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoRandomStuff();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppInitialize.htm">Initialize</a> the <a href="CppWidget.htm">widget</a> with a concept map<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Note that ReadFromConceptMap changes the copy of the map entered, by changing some GUI<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/elements (coordinats of the nodes, <b><a href="CppFor.htm">for</a></b> example). Therefore, the following test will fail:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;conceptmap<a href="CppWidget.htm">widget</a>-&gt;ReadFromConceptMap(m);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMapPtr n <a href="CppOperatorAssign.htm">=</a> w-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m <a href="CppOperatorEqual.htm">==</a> n);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/instead, use<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(m,n));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> ReadFromConceptMap(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; map);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/NEW 2013-01-13<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<a href="CppQt.htm">Qt</a>PvdbConceptMapItem*)&gt; m_signal_conceptmapitem_requests_edit;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* event);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mouseMoveEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a> * event);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mouse<a href="CppDouble.htm">Double</a>ClickEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a> *event);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mousePressEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a> *event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The arrow used to create a <b><a href="CppNew.htm">new</a></b> arrow<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is <b><a href="CppNullptr.htm">nullptr</a></b> when not active<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNewArrow * m_arrow;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The item highlighter, used when creating a <b><a href="CppNew.htm">new</a></b> relation<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbItemHighlighter * <b><a href="CppConst.htm">const</a></b> m_highlighter;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The item showing the <a href="Tools.htm">tools</a><br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item * m_<a href="Tools.htm">tools</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a>s an Edge and connects (some of) its <b><a href="CppQtSignals.htm">signals</a></b> to <b><a href="CppSlots.htm">slots</a></b> present in the derived <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Edge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;&amp; qtnodes);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a> a <b><a href="CppNew.htm">new</a></b> edge<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Edge(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> from, <b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> to);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a>s a node and connects (some of) its <b><a href="CppQtSignals.htm">signals</a></b> to <b><a href="CppSlots.htm">slots</a></b> present in the derived <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * <a href="CppAdd.htm">Add</a>Node(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Remove all <a href="CppQt.htm">Qt</a> and non-<a href="CppQt.htm">Qt</a> items<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CleanMe();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Delete an EdgeConcept<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DeleteEdge(<a href="CppQt.htm">Qt</a>PvdbEdgeItem * <b><a href="CppConst.htm">const</a></b> edge);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/After the selected arrows, EdgeConcepts and Nodes are deleted<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppDelete.htm">delete</a></b> the unconnected leftovers that are left<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DeleteLeftovers();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Delete a Node<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DeleteNode(<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> node);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Called when an item wants to be edited<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnConceptMapItemRequestsEdit(<a href="CppQt.htm">Qt</a>PvdbConceptMapItem * <b><a href="CppConst.htm">const</a></b> item);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Called whenever a concept is clicked or moved<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If item is <b><a href="CppNullptr.htm">nullptr</a></b>, the last item might be deleted<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* due to <a href="CppQtKeyboardFriendlyGraphicsView.htm">QtKeyboardFriendlyGraphicsView</a> working on <a href="CppQGraphicsItem.htm">QGraphicsItem</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is implemented by OnItemUpdateRequestImpl<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnItemRequestUpdateImpl(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Called whenever the <a href="Tools.htm">tools</a> item is clicked<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="Tools.htm">Tools</a>Clicked();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Keep undefined<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCONCEPTMAPEDITWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptmapeditwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptmapeditwidget.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapedit<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedgefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhints.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcenternodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconcepteditdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbedgeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbexamplesitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbitemhighlighter.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnewarrow.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="Tools.htm">tools</a>item.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtQuadBezierArrowItem.htm">qtquadbezierarrowitem</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtScopedDisable.htm">qtscopeddisable</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppComment.htm">///</a>Collect all <a href="CppQGraphicsItem.htm">QGraphicsItem</a>s with <b><a href="CppClass.htm">class</a></b> T in an unorderly way<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;T*&gt; Collect(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsScene.htm">QGraphicsScene</a>* <b><a href="CppConst.htm">const</a></b> scene)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;T*&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQList.htm">QList</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a> *&gt; items <a href="CppOperatorAssign.htm">=</a> scene-&gt;items();<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(items.begin(),items.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;T*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;v.erase(<a href="CppStdRemove.htm">std::remove</a>(v.begin(),v.end(),<b><a href="CppNullptr.htm">nullptr</a></b>),v.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),<b><a href="CppNullptr.htm">nullptr</a></b>)<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow(<b><a href="CppNullptr.htm">nullptr</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_highlighter(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbItemHighlighter(0)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="Tools.htm">tools</a>(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(scene());<br/>
&nbsp;&nbsp;scene()-&gt;addItem(m_<a href="Tools.htm">tools</a>); <a href="CppComment.htm">//</a>Give m_<a href="Tools.htm">tools</a> a parent<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_highlighter <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "m_highlighter does not need to be reset in ClearMe");<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;m_<a href="Tools.htm">tools</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_highlighter);<br/>
&nbsp;&nbsp;m_highlighter-&gt;SetItem(<b><a href="CppNullptr.htm">nullptr</a></b>); <a href="CppComment.htm">//</a>Do <b><a href="CppThis.htm">this</a></b> before destroying items<br/>
&nbsp;&nbsp;m_arrow <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::<a href="CppAdd.htm">Add</a>Edge(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; edge,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;&amp; qtnodes)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ERROR IN THIS LINE: THE NODE CONCEPTS HAVE GOTTEN A DIFFERENT ORDER!<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SOLUTION: MAKE NODE_CONCEPTS LOCAL AND IN THE SAME ORDER<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeConcept*&gt; node_concepts <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbNodeConcept&gt;(scene());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge-&gt;GetFrom() &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtnodes.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge-&gt;GetTo()&nbsp;&nbsp; &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtnodes.size()));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEditConceptItem&gt; qtconcept(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbEditConceptItem(edge-&gt;GetConcept()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtconcept);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem * <b><a href="CppConst.htm">const</a></b> qtedge <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtconcept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtnodes[edge-&gt;GetFrom()],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtnodes[edge-&gt;GetTo()]<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General: inform an Observer that <b><a href="CppThis.htm">this</a></b> item has changed<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp; <a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnItemRequestsUpdate,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General: inform an Observer that a <a href="CppQGraphicsScene.htm">QGraphicsScene</a> needs to be updated<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Specific <b><a href="CppFor.htm">for</a></b> Edit <a href="CppWidget.htm">widget</a>: inform an Observer of a request <b><a href="CppFor.htm">for</a></b> a text edit<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_conceptmapitem_requests_edit.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::OnConceptMapItemRequestsEdit,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>, <a href="CppBoostLambda.htm">boost::lambda</a>::_1)); <a href="CppComment.htm">//</a>Do not forget the placeholder!<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;addItem(qtedge);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge-&gt;pos().x() <a href="CppOperatorEqual.htm">==</a> edge-&gt;GetX());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge-&gt;pos().y() <a href="CppOperatorEqual.htm">==</a> edge-&gt;GetY());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::<a href="CppAdd.htm">Add</a>Edge(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> from, <b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> to)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(to);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from <a href="CppOperatorNotEqual.htm">!=</a> to);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item*&gt;(to&nbsp;&nbsp;) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot select a <a href="Tools.htm">Tools</a>Item");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item*&gt;(from) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot select a <a href="Tools.htm">Tools</a>Item");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does <b><a href="CppThis.htm">this</a></b> edge already exists? If yes, modify it<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt; edges <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(edges.begin(),edges.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[from,to](<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem* <b><a href="CppConst.htm">const</a></b> other_edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(other_edge-&gt;GetArrow()-&gt;GetFromItem() <a href="CppOperatorEqual.htm">==</a> from <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> other_edge-&gt;GetArrow()-&gt;GetToItem() <a href="CppOperatorEqual.htm">==</a> to&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> (other_edge-&gt;GetArrow()-&gt;GetFromItem() <a href="CppOperatorEqual.htm">==</a> to&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> other_edge-&gt;GetArrow()-&gt;GetToItem() <a href="CppOperatorEqual.htm">==</a> from);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (iter <a href="CppOperatorNotEqual.htm">!=</a> edges.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem * <b><a href="CppConst.htm">const</a></b> qtedge <a href="CppOperatorAssign.htm">=</a> *iter;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (qtedge-&gt;GetArrow()-&gt;GetToItem()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> to <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !qtedge-&gt;GetArrow()-&gt;HasHead()) { qtedge-&gt;GetArrow()-&gt;SetHasHead(<b><a href="CppTrue.htm">true</a></b>); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (qtedge-&gt;GetArrow()-&gt;GetFromItem() <a href="CppOperatorEqual.htm">==</a> to <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !qtedge-&gt;GetArrow()-&gt;HasTail()) { qtedge-&gt;GetArrow()-&gt;SetHasTail(<b><a href="CppTrue.htm">true</a></b>); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Edge does not exist yet, create a <b><a href="CppNew.htm">new</a></b> one<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt; qtnodes <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept(pvdb::ConceptFactory::Create());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> head_arrow <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> tail_arrow <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> from_iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind.htm">std::find</a>(qtnodes.begin(),qtnodes.end(),from);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem*&gt; qtconcepts <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt;(scene());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from_iter <a href="CppOperatorNotEqual.htm">!=</a> qtnodes.end());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> to_iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind.htm">std::find</a>(qtnodes.begin(),qtnodes.end(),to);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(to_iter <a href="CppOperatorNotEqual.htm">!=</a> qtnodes.end());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from_index <a href="CppOperatorAssign.htm">=</a> <a href="CppStdDistance.htm">std::distance</a>(qtnodes.begin(),from_iter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from_index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtnodes.size()));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to_index <a href="CppOperatorAssign.htm">=</a> <a href="CppStdDistance.htm">std::distance</a>(qtnodes.begin(),to_iter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(to_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(to_index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtnodes.size()));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::EdgeFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(from-&gt;pos().x() <a href="CppOperatorPlus.htm">+</a> to-&gt;pos().x()) <a href="CppOperatorDivide.htm">/</a> 2.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(from-&gt;pos().y() <a href="CppOperatorPlus.htm">+</a> to-&gt;pos().y()) <a href="CppOperatorDivide.htm">/</a> 2.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from_index,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tail_arrow,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to_index,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head_arrow));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Step 1: Create an Edge concept<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEditConceptItem&gt; qtconcept(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbEditConceptItem(edge-&gt;GetConcept()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtconcept);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem * <b><a href="CppConst.htm">const</a></b> qtedge <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem(edge,qtconcept,from,to);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General: inform an Observer that <b><a href="CppThis.htm">this</a></b> item has changed<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp; <a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnItemRequestsUpdate,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General: inform an Observer that a <a href="CppQGraphicsScene.htm">QGraphicsScene</a> needs to be updated<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Specific <b><a href="CppFor.htm">for</a></b> Edit <a href="CppWidget.htm">widget</a>: inform an Observer of a request <b><a href="CppFor.htm">for</a></b> a text edit<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_conceptmapitem_requests_edit.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::OnConceptMapItemRequestsEdit,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>, <a href="CppBoostLambda.htm">boost::lambda</a>::_1)); <a href="CppComment.htm">//</a>Do not forget the placeholder!<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;addItem(qtedge);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;update();<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbNodeItem * <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::<a href="CppAdd.htm">Add</a>Node(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEditConceptItem&gt; qtconcept(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbEditConceptItem(node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> qtnode <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem(node,qtconcept);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode-&gt;pos().x() <a href="CppOperatorEqual.htm">==</a> node-&gt;GetX());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode-&gt;pos().y() <a href="CppOperatorEqual.htm">==</a> node-&gt;GetY());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General: inform an Observer that <b><a href="CppThis.htm">this</a></b> item has changed<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp; <a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnItemRequestsUpdate,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General: inform an Observer that a <a href="CppQGraphicsScene.htm">QGraphicsScene</a> needs to be updated<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Specific <b><a href="CppFor.htm">for</a></b> Edit <a href="CppWidget.htm">widget</a>: inform an Observer of a request <b><a href="CppFor.htm">for</a></b> a text edit<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_conceptmapitem_requests_edit.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::OnConceptMapItemRequestsEdit,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>, <a href="CppBoostLambda.htm">boost::lambda</a>::_1)); <a href="CppComment.htm">//</a>Do not forget the placeholder!<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;addItem(qtnode);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode-&gt;pos().x() <a href="CppOperatorEqual.htm">==</a> node-&gt;GetX());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode-&gt;pos().y() <a href="CppOperatorEqual.htm">==</a> node-&gt;GetY());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> qtnode;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::CleanMe()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prepare cleaning the scene<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_examples);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_examples <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="Tools.htm">tools</a>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_<a href="Tools.htm">tools</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_highlighter);<br/>
&nbsp;&nbsp;m_highlighter-&gt;SetItem(<b><a href="CppNullptr.htm">nullptr</a></b>); <a href="CppComment.htm">//</a>Do <b><a href="CppThis.htm">this</a></b> before destroying items<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_arrow); <a href="CppComment.htm">//</a>Not necessarily <b><a href="CppTrue.htm">true</a></b>: m_arrow is null when not active<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_arrow <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clear the scene, invalidates all scene items copies<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;scene());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;clear();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put stuff back in<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the invisible examples item<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_examples);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbExamplesItem;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;addItem(m_examples);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the <a href="Tools.htm">tools</a> item<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_<a href="Tools.htm">tools</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="Tools.htm">tools</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="Tools.htm">tools</a>-&gt;m_signal_clicked.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::On<a href="Tools.htm">Tools</a>Clicked,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;addItem(m_<a href="Tools.htm">tools</a>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::CreateNewDerived() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; p(<b><a href="CppNew.htm">new</a></b> This_t);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::DeleteEdge(<a href="CppQt.htm">Qt</a>PvdbEdgeItem * <b><a href="CppConst.htm">const</a></b> edge)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_items_before <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;items().count();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(scene()-&gt;items().contains(edge));<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;removeItem(edge);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_items_after <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;items().count();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_items_after <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorEqual.htm">==</a> n_items_before);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::DeleteLeftovers()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_edge_concepts.size() <a href="CppOperatorEqual.htm">==</a> m_arrows.size());<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> done <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;done <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete edges without to/from nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt; qtedge <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a><b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtedge.size()); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtedge.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>An edge can be deleted <b><a href="CppIf.htm">if</a></b> its 'to' or 'from' is absent<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem * <b><a href="CppConst.htm">const</a></b> edge <a href="CppOperatorAssign.htm">=</a> qtedge[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt; qtnodes <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdCount_if.htm">std::count_if</a>(qtnodes.begin(),qtnodes.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[edge](<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> edge-&gt;GetArrow()-&gt;GetToItem() <a href="CppOperatorEqual.htm">==</a> node <a href="CppOperatorLogicalOr.htm">||</a> edge-&gt;GetArrow()-&gt;GetFromItem() <a href="CppOperatorEqual.htm">==</a> node;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) &lt; 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(scene()-&gt;items().contains(edge));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteEdge(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (done) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::DeleteNode(<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> node)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_items_before <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;items().count();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;removeItem(node);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_items_after <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;items().count();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_items_after <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorEqual.htm">==</a> n_items_before);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::DoRandomStuff()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;mouse<a href="CppDouble.htm">Double</a>ClickEvent(0); <a href="CppComment.htm">//</a>CAUSES ACCESS VIOLATION<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept1(pvdb::ConceptFactory::Create("...", { {} } ) );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node1(pvdb::NodeFactory::Create(concept1));<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> qtnode1 <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Node(node1);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept2(pvdb::ConceptFactory::Create("...", { {} } ) );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node2(pvdb::NodeFactory::Create(concept2));<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> qtnode2 <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Node(node2);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppAdd.htm">Add</a>Edge(qtnode1,qtnode2);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Delete:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQList.htm">QList</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;selectedItems();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),scene()-&gt;focusItem()) <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(scene()-&gt;focusItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete a Node Concept<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> node <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem *&gt;(item))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!IsCenterNode(node)) <a href="CppComment.htm">//</a>Cannot <b><a href="CppDelete.htm">delete</a></b> center node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt; node_concepts <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(node_concepts.begin(),node_concepts.end(),node) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteNode(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete an Edge Concept<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQt.htm">Qt</a>PvdbEdgeItem* <b><a href="CppConst.htm">const</a></b> edge <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt;(item))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt; edge_concepts <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(edge_concepts.begin(),edge_concepts.end(),edge) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(scene()-&gt;items().contains(edge));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteEdge(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!v.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteLeftovers();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_examples-&gt;hide();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;OnItemRequestsUpdate(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Escape:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only remove the '<b><a href="CppNew.htm">new</a></b> arrow' <b><a href="CppIf.htm">if</a></b> present<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Otherwise let the ESC be handled by the <b><a href="CppClass.htm">class</a></b> <b><a href="CppThis.htm">this</a></b> one derives from<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_arrow)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;removeItem(m_arrow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_arrow <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::keyPressEvent(event);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::mouse<a href="CppDouble.htm">Double</a>ClickEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptFactory::Create("..."));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node(pvdb::NodeFactory::Create(concept));<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> qtnode <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Node(node); <a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a>Node creates, connects and adds the node to scene<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode);<br/>
&nbsp;&nbsp;qtnode-&gt;setPos(mapToScene(event-&gt;pos()));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::mouseMoveEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_arrow)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> pos <a href="CppOperatorAssign.htm">=</a> mapToScene(event-&gt;pos());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;SetHeadPos(pos.x(),pos.y());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move the item under the arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> item_below <a href="CppOperatorAssign.htm">=</a> GetItemBelowCursor(mapToScene(event-&gt;pos()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_highlighter-&gt;SetItem(item_below); <a href="CppComment.htm">//</a>item_below is allowed to be <b><a href="CppNullptr.htm">nullptr</a></b><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_highlighter-&gt;SetItem(<b><a href="CppNullptr.htm">nullptr</a></b>); <a href="CppComment.htm">//</a>item_below is allowed to be <b><a href="CppNullptr.htm">nullptr</a></b><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::mouseMoveEvent(event);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::mousePressEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_highlighter);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_arrow) <a href="CppComment.htm">//</a><a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_highlighter-&gt;GetItem())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_highlighter-&gt;GetItem() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_arrow-&gt;GetFrom() <a href="CppOperatorNotEqual.htm">!=</a> m_highlighter-&gt;GetItem())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item*&gt;(m_highlighter-&gt;GetItem()) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot select a <a href="Tools.htm">Tools</a>Item");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAdd.htm">Add</a>Edge( m_arrow-&gt;GetFrom(),m_highlighter-&gt;GetItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;removeItem(m_arrow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_highlighter-&gt;SetItem(<b><a href="CppNullptr.htm">nullptr</a></b>);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::mousePressEvent(event);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If nothing is selected, hide the Examples<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!GetScene()-&gt;focusItem() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !<b><a href="CppThis.htm">this</a></b>-&gt;GetScene()-&gt;selectedItems().count())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let <a href="CppAny.htm">any</a> node (in <b><a href="CppThis.htm">this</a></b> <b><a href="CppCase.htm">case</a></b> the central node) <b><a href="CppEmit.htm">emit</a></b> an update <b><a href="CppFor.htm">for</a></b> the Examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>to hide.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetCenterNode()-&gt;m_signal_item_has_updated(0);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::OnConceptMapItemRequestsEdit(<a href="CppQt.htm">Qt</a>PvdbConceptMapItem* <b><a href="CppConst.htm">const</a></b> item)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(item-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; new_concept <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::DeepCopy(item-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(new_concept);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Try edit from Edit<a href="CppWidget.htm">Widget</a>");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_signal_conceptmapitem_requests_edit(item);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtScopedDisable.htm">QtScopedDisable</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; disable(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog d(item-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.exec();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFocus();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;setFocusItem(item);<br/>
&nbsp;&nbsp;item-&gt;setSelected(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;item-&gt;m_signal_item_has_updated(item);<br/>
&nbsp;&nbsp;item-&gt;m_signal_request_scene_update();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;update();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;OnItemRequestsUpdate(item);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::OnItemRequestUpdateImpl(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item)<br/>
{<br/>
&nbsp;&nbsp;m_<a href="Tools.htm">tools</a>-&gt;SetBuddyItem(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(item));<br/>
&nbsp;&nbsp;m_examples-&gt;SetBuddyItem(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapItem*&gt;(item));<br/>
&nbsp;&nbsp;scene()-&gt;update();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::On<a href="Tools.htm">Tools</a>Clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> cursor_pos_approx(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="Tools.htm">tools</a>-&gt;GetBuddyItem()-&gt;pos().x(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="Tools.htm">tools</a>-&gt;GetBuddyItem()-&gt;pos().y() <a href="CppOperatorMinus.htm">-</a> 32.0);<br/>
&nbsp;&nbsp;m_arrow <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbNewArrow(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="Tools.htm">tools</a>-&gt;GetBuddyItem(),cursor_pos_approx);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;addItem(m_arrow);<br/>
&nbsp;&nbsp;m_arrow-&gt;update();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;update();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptmapitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptmapitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCONCEPTMAPITEM_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCONCEPTMAPITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtRoundedTextRectItem.htm">qtroundedtextrectitem</a>.h"<br/>
<br/>
<a href="CppComment.htm">///</a>Either a Node or Edge of a ConceptMap<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapItem : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtRoundedTextRectItem.htm">QtRoundedTextRectItem</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppQt.htm">Qt</a>PvdbConceptMapItem() {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> DisableAll() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> EnableAll() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Concept from either a Node or an Edge<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&nbsp;&nbsp;GetConcept() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt;&nbsp;&nbsp;GetConcept()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; GetConceptItem() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the name of the concept<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> SetName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A more specific <a href="CppSignal.htm">signal</a>: a Concept requests an edit, <b><a href="CppThis.htm">this</a></b> is passed to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/OnConceptRequestsEdit, which lets <b><a href="CppThis.htm">this</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapItem request <b><a href="CppFor.htm">for</a></b> an edit<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<a href="CppQt.htm">Qt</a>PvdbConceptMapItem*)&gt; m_signal_conceptmapitem_requests_edit;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Slot <b><a href="CppFor.htm">for</a></b> a Concept its <a href="CppSignal.htm">signal</a> to be edited, all it does is add the ConceptMapItem<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the Concept is a member of<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnConceptRequestsEdit();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> SetConcept(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept) <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>NEW 2013-01-07<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCONCEPTMAPITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptmapitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptmapitem.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapItem::OnConceptRequestsEdit()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;m_signal_conceptmapitem_requests_edit(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("HIERO 23:19");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;GetConcept()-&gt;SetName( <b><a href="CppThis.htm">this</a></b>-&gt;GetConcept()-&gt;GetName() <a href="CppOperatorPlus.htm">+</a> "*");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptmapratewidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptmapratewidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCONCEPTMAPRATEWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCONCEPTMAPRATEWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmap<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconcept.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a> <b><a href="CppFor.htm">for</a></b> creation and editing of a ConceptMap<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a> This_t;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>() {}<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Creates a <b><a href="CppNew.htm">new</a></b> derived <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A simpler alternative to Clone (see above)<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; CreateNewDerived() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoRandomStuff();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppInitialize.htm">Initialize</a> the <a href="CppWidget.htm">widget</a> with a concept map<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Note that ReadFromConceptMap changes the copy of the map entered, by changing some GUI<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/elements (coordinats of the nodes, <b><a href="CppFor.htm">for</a></b> example). Therefore, the following test will fail:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;conceptmap<a href="CppWidget.htm">widget</a>-&gt;ReadFromConceptMap(m);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMapPtr n <a href="CppOperatorAssign.htm">=</a> w-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m <a href="CppOperatorEqual.htm">==</a> n);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/instead, use<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(m,n));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> ReadFromConceptMap(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; map);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a>s an Edge and connects (some of) its <b><a href="CppQtSignals.htm">signals</a></b> to <b><a href="CppSlots.htm">slots</a></b> present in the derived <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Edge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;&amp; qtnodes);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a>s a node and connects (some of) its <b><a href="CppQtSignals.htm">signals</a></b> to <b><a href="CppSlots.htm">slots</a></b> present in the derived <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For rating and editing, the node must be non-cost<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For display, the node should best be <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * <a href="CppAdd.htm">Add</a>Node(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Remove all <a href="CppQt.htm">Qt</a> and non-<a href="CppQt.htm">Qt</a> items and add <b><a href="CppNew.htm">new</a></b> ones<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CleanMe();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a subsection of the concept map, with item at the center<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Item is non-<b><a href="CppConst.htm">const</a></b>, as it will be at index 0 in the concept map, that might be edited<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; CreateSubConceptMap(<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> item) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Called whenever a concept is clicked or moved<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If item is <b><a href="CppNullptr.htm">nullptr</a></b>, the last item might be deleted<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* due to <a href="CppQtKeyboardFriendlyGraphicsView.htm">QtKeyboardFriendlyGraphicsView</a> working on <a href="CppQGraphicsItem.htm">QGraphicsItem</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is implemented by OnItemUpdateRequestImpl<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnItemRequestUpdateImpl(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Called when a <a href="CppQt.htm">Qt</a>ConceptItem requests to have its concept rated<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Note that <b><a href="CppThis.htm">this</a></b> might be a ConceptItem on an Edge, but those <b><a href="CppQtSignals.htm">signals</a></b> are not connected<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/item must be a Node, becaus only Nodes can be rated and because the Node is<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/used <b><a href="CppFor.htm">for</a></b> contruction of a sub concept map<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnNodeRequestsRateConcept(<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> item);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Called when a <a href="CppQt.htm">Qt</a>ConceptItem requests to have its examples rated<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Note that <b><a href="CppThis.htm">this</a></b> might be a ConceptItem on an Edge, but those <b><a href="CppQtSignals.htm">signals</a></b> are not connected<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnNodeRequestsRateExamples(<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> item);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; lhs, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCONCEPTMAPRATEWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptmapratewidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptmapratewidget.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmaprate<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedgefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhints.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcenternodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbedgeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtQuadBezierArrowItem.htm">qtquadbezierarrowitem</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateexamplesdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbexamplesitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtScopedDisable.htm">qtscopeddisable</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppComment.htm">///</a>Collect all <a href="CppQGraphicsItem.htm">QGraphicsItem</a>s with <b><a href="CppClass.htm">class</a></b> T in an unorderly way<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;T*&gt; Collect(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsScene.htm">QGraphicsScene</a>* <b><a href="CppConst.htm">const</a></b> scene)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;T*&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQList.htm">QList</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a> *&gt; items <a href="CppOperatorAssign.htm">=</a> scene-&gt;items();<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(items.begin(),items.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;T*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;v.erase(<a href="CppStdRemove.htm">std::remove</a>(v.begin(),v.end(),<b><a href="CppNullptr.htm">nullptr</a></b>),v.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),<b><a href="CppNullptr.htm">nullptr</a></b>)<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>(parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::<a href="CppAdd.htm">Add</a>Edge(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; edge,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;&amp; qtnodes)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ERROR IN THIS LINE: THE NODE CONCEPTS HAVE GOTTEN A DIFFERENT ORDER!<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SOLUTION: MAKE NODE_CONCEPTS LOCAL AND IN THE SAME ORDER<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbRateConcept*&gt; node_concepts <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbRateConcept&gt;(scene());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge-&gt;GetFrom() &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtnodes.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge-&gt;GetTo()&nbsp;&nbsp; &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtnodes.size()));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEditConceptItem&gt; qtconcept(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbEditConceptItem(edge-&gt;GetConcept()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtconcept);<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem * <b><a href="CppConst.htm">const</a></b> qtedge <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtconcept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtnodes[edge-&gt;GetFrom()],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtnodes[edge-&gt;GetTo()]<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General: inform an Observer that <b><a href="CppThis.htm">this</a></b> item has changed<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp; <a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnItemRequestsUpdate,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General: inform an Observer that a <a href="CppQGraphicsScene.htm">QGraphicsScene</a> needs to be updated<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Specific: disable changing arrow heads<br/>
&nbsp;&nbsp;qtedge-&gt;GetArrow()-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do not connect m_signal_rate, because Edges will never be rated<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the EdgeConcepts to the scene<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;addItem(qtedge);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge-&gt;pos().x() <a href="CppOperatorEqual.htm">==</a> edge-&gt;GetX());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge-&gt;pos().y() <a href="CppOperatorEqual.htm">==</a> edge-&gt;GetY());<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbNodeItem * <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::<a href="CppAdd.htm">Add</a>Node(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem&gt; qtconcept(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptItem(node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtconcept);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> qtnode <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem(node,qtconcept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General: inform an Observer that <b><a href="CppThis.htm">this</a></b> item has changed<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp; <a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnItemRequestsUpdate,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>General: inform an Observer that a <a href="CppQGraphicsScene.htm">QGraphicsScene</a> needs to be updated<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Specific: inform an Observer that the Node requests its Concept being rated<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_node_requests_rate_concept.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::OnNodeRequestsRateConcept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>, <a href="CppBoostLambda.htm">boost::lambda</a>::_1)); <a href="CppComment.htm">//</a>Do not forget the placeholder!<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Specific: inform an Observer that the Node requests its Examples being rated<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_node_requests_rate_examples.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::OnNodeRequestsRateExamples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>, <a href="CppBoostLambda.htm">boost::lambda</a>::_1)); <a href="CppComment.htm">//</a>Do not forget the placeholder!<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;addItem(qtnode);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode-&gt;pos().x() <a href="CppOperatorEqual.htm">==</a> node-&gt;GetX());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode-&gt;pos().y() <a href="CppOperatorEqual.htm">==</a> node-&gt;GetY());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> qtnode;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::CleanMe()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prepare cleaning the scene<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_examples);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_examples <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clear the scene, invalidates all scene items copies<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;scene());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;clear();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put stuff back in<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the invisible examples item<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_examples);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbExamplesItem;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;addItem(m_examples);<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::CreateNewDerived() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; p(<b><a href="CppNew.htm">new</a></b> This_t);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::CreateSubConceptMap(<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> item) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Collect all nodes first<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt; qtedges <a href="CppOperatorAssign.htm">=</a> FindEdges(item);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; nodes;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; focal_concept <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::DeepCopy(item-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(focal_concept);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; focal_node <a href="CppOperatorAssign.htm">=</a> item-&gt;GetNode(); <a href="CppComment.htm">//</a>FIX?<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; focal_node <a href="CppOperatorAssign.htm">=</a> pvdb::NodeFactory::DeepCopy(item-&gt;GetNode()); <a href="CppComment.htm">//</a>BUG 2013-01-06<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(focal_node);<br/>
&nbsp;&nbsp;nodes.push_back(focal_node);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nodes[0]-&gt;GetConcept() <a href="CppOperatorEqual.htm">==</a> item-&gt;GetNode()-&gt;GetConcept());<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt; edges;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtedges.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem* <b><a href="CppConst.htm">const</a></b> qtedge <a href="CppOperatorAssign.htm">=</a> qtedges[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge-&gt;GetArrow());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge-&gt;GetArrow()-&gt;GetFromItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(qtedge-&gt;GetArrow()-&gt;GetFromItem()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(qtedge-&gt;GetArrow()-&gt;GetFromItem())-&gt;GetNode());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(qtedge-&gt;GetArrow()-&gt;GetFromItem())-&gt;GetNode()-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(qtedge-&gt;GetArrow()-&gt;GetToItem()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(qtedge-&gt;GetArrow()-&gt;GetToItem())-&gt;GetNode());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(qtedge-&gt;GetArrow()-&gt;GetToItem())-&gt;GetNode()-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; other_node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> qtedge-&gt;GetFrom()-&gt;GetNode() <a href="CppOperatorEqual.htm">==</a> focal_node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? qtedge-&gt;GetTo()-&gt;GetNode()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: qtedge-&gt;GetFrom()-&gt;GetNode();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(other_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node <a href="CppOperatorAssign.htm">=</a> pvdb::NodeFactory::DeepCopy(other_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nodes.push_back(node);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from_index <a href="CppOperatorAssign.htm">=</a> qtedge-&gt;GetFrom()-&gt;GetNode() <a href="CppOperatorEqual.htm">==</a> focal_node ? 0 : i <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to_index&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> qtedge-&gt;GetFrom()-&gt;GetNode() <a href="CppOperatorEqual.htm">==</a> focal_node ? i <a href="CppOperatorPlus.htm">+</a> 1 : 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from_index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(nodes.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(to_index&nbsp;&nbsp; &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(nodes.size()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbArrow * arrow <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;FindBuddyArrow(qtedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(arrow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge-&gt;GetEdge());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge(pvdb::EdgeFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetEdge()-&gt;GetConcept(), <a href="CppComment.htm">//</a>Deep copy<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from_index,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetEdge()-&gt;HasTailArrow(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to_index,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetEdge()-&gt;HasHeadArrow()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edges.push_back(edge);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(pvdb::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(focal_node <a href="CppOperatorEqual.htm">==</a> concept_map-&gt;GetNodes().at(0));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map-&gt;GetNodes().at(0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map-&gt;GetNodes().at(0)-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map-&gt;GetNodes().at(0)-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> item-&gt;GetNode()-&gt;GetConcept().get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Should not be a deep copy, otherwise item will not be changed");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> concept_map;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::DoRandomStuff()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"TODO");<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::OnItemRequestUpdateImpl(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item)<br/>
{<br/>
&nbsp;&nbsp;m_examples-&gt;SetBuddyItem(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapItem*&gt;(item));<br/>
&nbsp;&nbsp;scene()-&gt;update();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::OnNodeRequestsRateConcept(<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> item)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item-&gt;GetNode()-&gt;GetConcept());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide();<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtScopedDisable.htm">QtScopedDisable</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt; disable(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concept map must be edited, so item changes with it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; sub_concept_map <a href="CppOperatorAssign.htm">=</a> CreateSubConceptMap(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sub_concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sub_concept_map-&gt;GetNodes().at(0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sub_concept_map-&gt;GetNodes().at(0)-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sub_concept_map-&gt;GetNodes().at(0)-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> item-&gt;GetNode()-&gt;GetConcept().get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Should not be a deep copy, otherwise item will not be changed");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRateConceptDialog d(sub_concept_map); <a href="CppComment.htm">//</a>Item may be changed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.exec();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
&nbsp;&nbsp;item-&gt;update();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFocus();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;setFocusItem(item);<br/>
&nbsp;&nbsp;item-&gt;setSelected(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;update();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;OnItemRequestsUpdate(item);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::OnNodeRequestsRateExamples(<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> item)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (item-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start edit<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtScopedDisable.htm">QtScopedDisable</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>&gt; disable(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept <a href="CppOperatorAssign.htm">=</a> item-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> concept.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item-&gt;GetConcept() <a href="CppOperatorEqual.htm">==</a> concept);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog d(concept); <a href="CppComment.htm">//</a>FYI: Might change the concept (as suggested by the ctor prototype)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.exec();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> concept.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item-&gt;GetConcept() <a href="CppOperatorEqual.htm">==</a> concept);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFocus();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;setFocusItem(item);<br/>
&nbsp;&nbsp;item-&gt;setSelected(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;update();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;OnItemRequestsUpdate(item);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptmapwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptmapwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCONCEPTMAPWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCONCEPTMAPWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtKeyboardFriendlyGraphicsView.htm">qtkeyboardfriendlygraphicsview</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "qtpvdbexamplesitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhints.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbedgeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtKeyboardFriendlyGraphicsView.htm">QtKeyboardFriendlyGraphicsView</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Clone the derived <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppStdUnique_ptr.htm">std::unique_ptr</a> is used to:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> prevent <a href="CppMemory.htm">memory</a> leaks, when the result of Clone is unused<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> being able to transfer ownership to <a href="CppShared_ptr.htm">shared_ptr</a>&lt;T&gt;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> being able to transfer ownership to <a href="CppShared_ptr.htm">shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> T&gt;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/TOO MUCH WORK, TOO LITTLE GAIN<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; Clone() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Creates a <b><a href="CppNew.htm">new</a></b> derived <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A simpler alternative to Clone (see above)<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; CreateNewDerived() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Do something random<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> DoRandomStuff() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppQGraphicsScene.htm">QGraphicsScene</a><br/>
&nbsp;&nbsp;<a href="CppQGraphicsScene.htm">QGraphicsScene</a>* GetScene() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppInitialize.htm">Initialize</a> the <a href="CppWidget.htm">widget</a> with a concept map<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/map cannot be <b><a href="CppConst.htm">const</a></b>, as the user might want to edit it<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Note that ReadFromConceptMap changes the copy of the map entered, by changing some GUI<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/elements (coordinats of the nodes, <b><a href="CppFor.htm">for</a></b> example). Therefore, the following test will fail:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;conceptmap<a href="CppWidget.htm">widget</a>-&gt;ReadFromConceptMap(m);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMapPtr n <a href="CppOperatorAssign.htm">=</a> w-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m <a href="CppOperatorEqual.htm">==</a> n);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/instead, use<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(m,n));<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ReadFromConceptMap(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; map);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Shuffle the concepts (used in <a href="CppDebug.htm">debugging</a>)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Shuffle();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> with a derived <b><a href="CppClass.htm">class</a></b> <a href="CppInstance.htm">instance</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt;&amp; <a href="CppWidget.htm">widget</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Write the <a href="CppWidget.htm">widget</a> its data to a cluster<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; WriteToConceptMap() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event);<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The item showing the examples<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbExamplesItem * m_examples;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a>s an Edge and connects (some of) its <b><a href="CppQtSignals.htm">signals</a></b> to <b><a href="CppSlots.htm">slots</a></b> present in the derived <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Edge cannot be <b><a href="CppConst.htm">const</a></b>, as an Edge has a Concept that the user might want to edit<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/qtnodes are the <a href="CppQt.htm">Qt</a>NodeItems with the same indices as in a pvdb::ConceptMap<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Edge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;&amp; qtnodes) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAdd.htm">Add</a>s a node and connects (some of) its <b><a href="CppQtSignals.htm">signals</a></b> to <b><a href="CppSlots.htm">slots</a></b> present in the derived <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/It <a href="CppReturn.htm">returns</a> (the derived <b><a href="CppClass.htm">class</a></b> of) the <a href="CppQt.htm">Qt</a>PvdbNodeConcept added to the scene<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <a href="CppAdd.htm">Add</a>Node(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Remove all <a href="CppQt.htm">Qt</a> and non-<a href="CppQt.htm">Qt</a> items and add <b><a href="CppNew.htm">new</a></b> ones<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> CleanMe() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get all the edges connected to the concept<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt; FindEdges(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> from) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find the edge with the same from and to<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem * FindEdge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> to) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the center node<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * GetCenterNode() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the first <a href="CppQt.htm">Qt</a>PvdbNodeItem under the cursor<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns <b><a href="CppNullptr.htm">nullptr</a></b> <b><a href="CppIf.htm">if</a></b> none is present<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem* GetItemBelowCursor(<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; pos) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> item is the center node<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> IsCenterNode(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Have the nodes in the concept map be positioned once already, or must<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/these be (re)positioned. '(re)', because the nodes are initially positioned at the origin<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> MustReposition(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; &gt;&amp; nodes) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/All items from a ConceptMap are put in at the center and need to be repositioned<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RepositionItems();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test the internals of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the current content really reflect the map<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestMe(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; map) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Supply the client with a hint how to use <b><a href="CppThis.htm">this</a></b> <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> GiveH<b><a href="CppInt.htm">int</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> hint);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Implemention of OnItemUpdateRequest<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> OnItemRequestUpdateImpl(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Put the central node at index zero<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem* &gt; Sort(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;&amp; v) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Called whenever a concept is clicked or moved<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If item is <b><a href="CppNullptr.htm">nullptr</a></b>, the last item might be deleted<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* due to <a href="CppQtKeyboardFriendlyGraphicsView.htm">QtKeyboardFriendlyGraphicsView</a> working on <a href="CppQGraphicsItem.htm">QGraphicsItem</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is implemented by OnItemUpdateRequestImpl<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnItemRequestsUpdate(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Called when an item requests a scene update<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnRequestSceneUpdate();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCONCEPTMAPWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbconceptmapwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbconceptmapwidget.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmap<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbitemhighlighter.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcenternodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedgefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbbrushfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhints.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtArrowItem.htm">qtarrowitem</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconcepteditdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbedgeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcenternodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbexamplesitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="Tools.htm">tools</a>item.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnewarrow.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtScopedDisable.htm">qtscopeddisable</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppComment.htm">///</a>Collect all <a href="CppQGraphicsItem.htm">QGraphicsItem</a>s with <b><a href="CppClass.htm">class</a></b> T in an unorderly way<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;T*&gt; Collect(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsScene.htm">QGraphicsScene</a>* <b><a href="CppConst.htm">const</a></b> scene)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;T*&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQList.htm">QList</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a> *&gt; items <a href="CppOperatorAssign.htm">=</a> scene-&gt;items();<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(items.begin(),items.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;T*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;v.erase(<a href="CppStdRemove.htm">std::remove</a>(v.begin(),v.end(),<b><a href="CppNullptr.htm">nullptr</a></b>),v.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),<b><a href="CppNullptr.htm">nullptr</a></b>)<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Returns a sorted vector<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt; Sort(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;T&gt; w(v);<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(w.begin(),w.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQtKeyboardFriendlyGraphicsView.htm">QtKeyboardFriendlyGraphicsView</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbExamplesItem)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot test <b><a href="CppThis.htm">this</a></b> ABC here, its derived <b><a href="CppClass.htm">classes</a></b> will test themselves<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setScene(<b><a href="CppNew.htm">new</a></b> <a href="CppQGraphicsScene.htm">QGraphicsScene</a>(<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;scene()-&gt;addItem(m_examples); <a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the examples so it has a parent<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Collect&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem&gt;(scene()).empty());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Without <b><a href="CppThis.htm">this</a></b> line, mouseMoveEvent won't be called<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setMouseTracking(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQLinearGradient.htm">QLinearGradient</a> linearGradient(-500,-500,500,500);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>linearGradient.setColorAt(0.0,<a href="CppQColor.htm">QColor</a>(214,214,214));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>linearGradient.setColorAt(1.0,<a href="CppQColor.htm">QColor</a>(255,255,255));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;setBackgroundBrush(linearGradient);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;setBackgroundBrush(<a href="CppQBrush.htm">QBrush</a>(<a href="CppQColor.htm">QColor</a>(255,255,255)));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;m_examples <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt; <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::FindEdges(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> from) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt; v <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt; w;<br/>
&nbsp;&nbsp;<a href="CppStdCopy_if.htm">std::copy_if</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[from](<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem* <b><a href="CppConst.htm">const</a></b> edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> edge-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> from <a href="CppOperatorLogicalOr.htm">||</a> edge-&gt;GetTo() <a href="CppOperatorEqual.htm">==</a> from;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem * <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::FindEdge(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> from,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> to) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(to);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from <a href="CppOperatorNotEqual.htm">!=</a> to);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt; edge_concepts <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(edge_concepts.begin(),edge_concepts.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[from,to](<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem* <b><a href="CppConst.htm">const</a></b> edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(edge-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> from <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> edge-&gt;GetTo() <a href="CppOperatorEqual.htm">==</a> to)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> (edge-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> to <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> edge-&gt;GetTo() <a href="CppOperatorEqual.htm">==</a> from);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (iter <a href="CppOperatorEqual.htm">==</a> edge_concepts.end()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> * iter;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::GetCenterNode() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(scene());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!scene()-&gt;items().isEmpty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(scene()-&gt;items()[0]);<br/>
&nbsp;&nbsp;<a href="CppQList.htm">QList</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> scene()-&gt;items();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a> * <b><a href="CppConst.htm">const</a></b> item) { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;IsCenterNode(item); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There must be exactly one center node");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a> * <b><a href="CppConst.htm">const</a></b> item) { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;IsCenterNode(item); } );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter <a href="CppOperatorNotEqual.htm">!=</a> v.end());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> center_node <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(*iter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(center_node);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsCenterNode(center_node));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> center_node;<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbNodeItem* <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::GetItemBelowCursor(<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; pos) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQList.htm">QList</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>*&gt; v <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;items(pos.x(),pos.y(),2.0,2.0);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt; qtnodes;<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;qtnodes](<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> qtnode <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(item))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item*&gt;(item) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot draw arrow to <a href="Tools.htm">Tools</a>Item");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtnodes.push_back(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!qtnodes.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> qtnodes[0];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
}<br/>
<br/>
<a href="CppQGraphicsScene.htm">QGraphicsScene</a>* <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::GetScene() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;scene();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::IsCenterNode(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> qtnode <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(item);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> qtnode <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !(item-&gt;flags() &amp; <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsMovable);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Equal:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scale(1.1,1.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Minus:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scale(0.9,0.9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppQtKeyboardFriendlyGraphicsView.htm">QtKeyboardFriendlyGraphicsView</a>::keyPressEvent(event);<br/>
&nbsp;&nbsp;scene()-&gt;update();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::MustReposition(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; &gt;&amp; nodes) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If all are at the origin, the nodes must be (re)positioned<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdCount_if.htm">std::count_if</a>(nodes.begin(),nodes.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> node-&gt;GetX() <a href="CppOperatorEqual.htm">==</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> node-&gt;GetY() <a href="CppOperatorEqual.htm">==</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(nodes.size());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnItemRequestsUpdate(<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> item)<br/>
{<br/>
&nbsp;&nbsp;OnItemRequestUpdateImpl(item);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnRequestSceneUpdate()<br/>
{<br/>
&nbsp;&nbsp;scene()-&gt;update();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::ReadFromConceptMap(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; map)<br/>
{<br/>
&nbsp;&nbsp;CleanMe();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;scene());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!map-&gt;GetNodes().empty());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This <a href="CppStdVector.htm">std::vector</a> keeps the <a href="CppQt.htm">Qt</a>Nodes in the same order as the nodes in the concept map<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>You cannot rely on Collect&lt;<a href="CppQt.htm">Qt</a>PvdbNodeConcept*&gt;(scene), as <b><a href="CppThis.htm">this</a></b> shuffles the order<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt; qtnodes;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The initial count of the items<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> init_count <a href="CppOperatorAssign.htm">=</a> scene()-&gt;items().count();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the nodes to the scene<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the <a href="CppMain.htm">main</a> <a href="CppQuestion.htm">question</a> as the first node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node <a href="CppOperatorAssign.htm">=</a> map-&gt;GetNodes()[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> qtnode <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbCenterNodeItem(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the center node respond to mouse clicks<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtnode-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtnode-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::OnItemRequestsUpdate,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the center node to scene<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;scene()-&gt;addItem(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtnodes.push_back(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(scene()-&gt;items().count() <a href="CppOperatorEqual.htm">==</a> init_count <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(scene()-&gt;items().count() <a href="CppOperatorEqual.htm">==</a> init_count <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtnodes.size()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the regular nodes to the scene<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt;&amp; nodes <a href="CppOperatorAssign.htm">=</a> map-&gt;GetNodes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(nodes.begin() <a href="CppOperatorPlus.htm">+</a> 1, <a href="CppComment.htm">//</a>+1 to skip center node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,&amp;qtnodes,init_count](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> qtnode <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Node(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtnodes.push_back(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(scene()-&gt;items().count() <a href="CppOperatorEqual.htm">==</a> init_count <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtnodes.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(scene()-&gt;items().count() <a href="CppOperatorEqual.htm">==</a> init_count <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(map-&gt;GetNodes().size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There must as much nodes in the scene as there were in the concept map");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the Concepts on the Edges<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt;&amp; edges <a href="CppOperatorAssign.htm">=</a> map-&gt;GetEdges();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(edges.begin(),edges.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,qtnodes](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppAdd.htm">Add</a>Edge(edge,qtnodes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(scene()-&gt;items().count()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> init_count <a href="CppOperatorPlus.htm">+</a><b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(map-&gt;GetNodes().size() <a href="CppOperatorPlus.htm">+</a> map-&gt;GetEdges().size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There must be as much NodeConcepts and EdgeConcepts in the scene as the number of edges and nodes in the concept map");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the nodes around the focal <a href="CppQuestion.htm">question</a> in an initial position<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (MustReposition(<a href="CppAdd.htm">Add</a>Const(map-&gt;GetNodes()))) RepositionItems();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>qtnodes[0]-&gt;setFocus();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map);<br/>
&nbsp;&nbsp;TestMe(map);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::RepositionItems()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The ray of the upcoming circle of nodes, is the larger of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>(1) half of the diagonal of the focal <a href="CppQuestion.htm">question</a> (e.g. <b><a href="CppFor.htm">for</a></b> <b><a href="CppShort.htm">short</a></b> concepts)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>(2) calculated from the circumference by adding the nodes' length<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem *&gt; node_concepts_unsorted <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem *&gt; node_concepts <a href="CppOperatorAssign.htm">=</a> Sort(node_concepts_unsorted);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!node_concepts.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node_concepts[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> center_node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem *&gt;(node_concepts[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(center_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(center_node-&gt;pos().x() &gt; <a href="CppOperatorMinus.htm">-</a>0.5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(center_node-&gt;pos().x() &lt;&nbsp;&nbsp;0.5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(center_node-&gt;pos().y() &gt; <a href="CppOperatorMinus.htm">-</a>0.5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(center_node-&gt;pos().y() &lt;&nbsp;&nbsp;0.5);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.5 * pvdb::<a href="CppGetDistance.htm">GetDistance</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;center_node-&gt;boundingRect().width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;center_node-&gt;boundingRect().height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r3 <a href="CppOperatorAssign.htm">=</a> 50.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax.htm">std::max</a>(r1,r3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_nodes <a href="CppOperatorAssign.htm">=</a> node_concepts.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 1; i<a href="CppOperatorNotEqual.htm">!=</a>n_nodes; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>+1 to skip center node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a>ed <a href="CppOperatorPlus.htm">+</a>0 (instead of <a href="CppOperatorMinus.htm">-</a>1) to n_nodes, to prevent, in a setup with two concepts and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>one edge, the edge to overlap the central <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 2.0 * <a href="CppM_PI.htm">M_PI</a> * <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_nodes <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdCos.htm">std::cos</a>(angle) * r;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdSin.htm">std::sin</a>(angle) * r;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_concepts[i]-&gt;setPos(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the edge concepts in the middle of the nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem *&gt; edge_concepts <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(edge_concepts.begin(), edge_concepts.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppQt.htm">Qt</a>PvdbEdgeItem* <b><a href="CppConst.htm">const</a></b> edge_concept)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p((edge_concept-&gt;GetFrom()-&gt;pos() <a href="CppOperatorPlus.htm">+</a> edge_concept-&gt;GetTo()-&gt;pos()) <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_concept-&gt;setPos(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the nodes around the focal <a href="CppQuestion.htm">question</a> in their improved position<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> done <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem *&gt; qtnodes <a href="CppOperatorAssign.htm">=</a> Sort(Collect&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem&gt;(scene()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!qtnodes.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnodes[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsCenterNode(qtnodes[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem* &gt; qtedges <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> center_node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem *&gt;(qtnodes[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(center_node);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQtRoundedTextRectItem.htm">QtRoundedTextRectItem</a>*&gt; items;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(qtnodes.begin(),qtnodes.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(items));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsCenterNode(items[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(qtedges.begin(),qtedges.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(items));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move the nodes away from the center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items.begin() <a href="CppOperatorPlus.htm">+</a> 1, <a href="CppComment.htm">//</a>+1 to skip the center node at [0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[center_node,&amp;done](<a href="CppQtRoundedTextRectItem.htm">QtRoundedTextRectItem</a>* <b><a href="CppConst.htm">const</a></b> node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (center_node-&gt;boundingRect().intersects(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;boundingRect().translated(-node-&gt;pos())))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;setPos(<a href="CppQPointF.htm">QPointF</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;pos().x() &lt; center_node-&gt;pos().x() ? node-&gt;pos().x()-1 : node-&gt;pos().x() <a href="CppOperatorPlus.htm">+</a> 1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;pos().y() &lt; center_node-&gt;pos().y() ? node-&gt;pos().y()-1 : node-&gt;pos().y() <a href="CppOperatorPlus.htm">+</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (done) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::Shuffle()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt; nodes <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(nodes.begin(),nodes.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<a href="CppQt.htm">Qt</a>PvdbNodeItem* node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!IsCenterNode(node))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> node-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> node-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 4) <a href="CppOperatorModulus.htm">%</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: x<a href="CppOperatorPlusAssign.htm">+=</a> 1.0; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: y<a href="CppOperatorPlusAssign.htm">+=</a> 1.0; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: x<a href="CppOperatorPlusAssign.htm">+=</a>-1.0; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: y<a href="CppOperatorPlusAssign.htm">+=</a>-1.0; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQPointF.htm">QPointF</a>(x,y) <a href="CppOperatorNotEqual.htm">!=</a> node-&gt;pos());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;setPos(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;scene()-&gt;update();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt; <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::Sort(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;&amp; v_original) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt; v(v_original);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!v.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There must be one center node in each scene");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> qtnode)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::IsCenterNode(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There must be one unmovable node, which is the center node");<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> center_node_iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> qtnode)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::IsCenterNode(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(*center_node_iter,v[0]);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::IsCenterNode(v[0])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Focus <a href="CppQuestion.htm">question</a> must be at index zero");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::TestMe(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; map) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node*&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> map-&gt;GetNodes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStd.htm">std</a>::inserter(w,w.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&nbsp;&nbsp;ptr)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ptr.get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> w.size() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All nodes must be unique");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge*&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> map-&gt;GetEdges();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStd.htm">std</a>::inserter(w,w.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&nbsp;&nbsp;ptr)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ptr.get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> w.size() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All edges must be unique");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapItem*&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt; node_concepts <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(node_concepts.begin(),node_concepts.end(),<a href="CppStd.htm">std</a>::inserter(v,v.begin()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt; edge_concepts <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(edge_concepts.begin(),edge_concepts.end(),<a href="CppStd.htm">std</a>::inserter(v,v.begin()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> (node_concepts.size() <a href="CppOperatorPlus.htm">+</a> edge_concepts.size()) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All <a href="CppQt.htm">Qt</a> nodes must be unique");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> REALLY_USE_DELETELEFTOVERS_FOR_TESTING_784578634075630458630<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sure, I miss <b><a href="CppThis.htm">this</a></b> test, but otherwise DeleteLeftovers must be moved<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>to <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b>, which I intend to keep as read-only as possible<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeConcept *&gt; node_concepts <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbNodeConcept&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeConcept *&gt; edge_concepts <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeConcept&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbArrow *&gt; arrows <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbArrow&gt;(scene());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_arrows <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(arrows.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_edges&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(edge_concepts.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_nodes&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(node_concepts.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteLeftovers();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_arrows <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(arrows.size())&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume no leftovers");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_edges&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(edge_concepts.size()) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume no leftovers");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_nodes&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(node_concepts.size()) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume no leftovers");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Note that the ConceptMap read out again differs from the original,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/because the Nodes are placed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!pvdb::ConceptMap::HasSameContent(WriteToConceptMap(),map))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>OH OH, AN ERROR! HELP ME OUT AND GIMME LOTS OF DEBUG INFO!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppXmlToPretty.htm">XmlToPretty</a>(pvdb::ConceptMap::To<a href="CppXml.htm">Xml</a>(map));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "original map:\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(<a href="CppStdClog.htm">std::clog</a>,"\n"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppXmlToPretty.htm">XmlToPretty</a>(pvdb::ConceptMap::To<a href="CppXml.htm">Xml</a>(WriteToConceptMap()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "WriteToConceptMap():\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(<a href="CppStdClog.htm">std::clog</a>,"\n"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(pvdb::ConceptMap::To<a href="CppXml.htm">Xml</a>(WriteToConceptMap()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(pvdb::ConceptMap::To<a href="CppXml.htm">Xml</a>(map));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(WriteToConceptMap(),map)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "The concept map supplied must be homomorphous to the one created in the <a href="CppWidget.htm">widget</a>");<br/>
<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::WriteToConceptMap() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the Nodes<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; &gt; nodes;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt; qtnodes <a href="CppOperatorAssign.htm">=</a> Sort(Collect&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem&gt;(scene()));<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsCenterNode(qtnodes[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Now the first index must be the unmovable center node");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(qtnodes.begin(),qtnodes.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(nodes),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> qtnode)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode-&gt;GetNode());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; new_node <a href="CppOperatorAssign.htm">=</a> pvdb::NodeFactory::DeepCopy(qtnode-&gt;GetNode());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(new_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*qtnode-&gt;GetNode(),*new_node));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_node-&gt;SetX( qtnode-&gt;x() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_node-&gt;SetY( qtnode-&gt;y() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> new_node;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nodes.size() <a href="CppOperatorEqual.htm">==</a> qtnodes.size());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the Edges<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; &gt; edges;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt; qtedges <a href="CppOperatorAssign.htm">=</a> Collect&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(qtedges.begin(),qtedges.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,&amp;edges,qtnodes](<a href="CppQt.htm">Qt</a>PvdbEdgeItem* <b><a href="CppConst.htm">const</a></b> qtedge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept <a href="CppOperatorAssign.htm">=</a> qtedge-&gt;GetConcept(); <a href="CppComment.htm">//</a>FIX? 2012-12-31<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept(<b><a href="CppNew.htm">new</a></b> pvdb::Concept(*qtedge-&gt;GetConcept())); <a href="CppComment.htm">//</a>BUG? 2012-12-31<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> from_iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind.htm">std::find</a>(qtnodes.begin(),qtnodes.end(),qtedge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from_iter <a href="CppOperatorNotEqual.htm">!=</a> qtnodes.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from_index <a href="CppOperatorAssign.htm">=</a> <a href="CppStdDistance.htm">std::distance</a>(qtnodes.begin(),from_iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> from_index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtnodes.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> from <a href="CppOperatorAssign.htm">=</a> qtnodes[from_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> to_iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind.htm">std::find</a>(qtnodes.begin(),qtnodes.end(),qtedge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(to_iter <a href="CppOperatorNotEqual.htm">!=</a> qtnodes.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to_index <a href="CppOperatorAssign.htm">=</a> <a href="CppStdDistance.htm">std::distance</a>(qtnodes.begin(),to_iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(to_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> to_index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(qtnodes.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> tail_arrow <a href="CppOperatorAssign.htm">=</a> qtedge-&gt;GetEdge()-&gt;HasTailArrow();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> head_arrow <a href="CppOperatorAssign.htm">=</a> qtedge-&gt;GetEdge()-&gt;HasHeadArrow();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::EdgeFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;pos().x(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;pos().y(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from_index,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tail_arrow,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to_index,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head_arrow));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> concept_map;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbcreateassessmentcompletedialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbcreateassessmentcompletedialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCREATEASSESSMENTCOMPLETEDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCREATEASSESSMENTCOMPLETEDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog(<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the filled in concept map focal <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppQuestion.htm">Question</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must the parent go back to the menu?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> GoBackToMenu() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_back_to_menu; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Save file to disk<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Fill in the concept map focal <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppQuestion.htm">Question</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>);<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_save_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_edit_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must the parent go back to the menu?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_back_to_menu;<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCREATEASSESSMENTCOMPLETEDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbcreateassessmentcompletedialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbcreateassessmentcompletedialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcreateassessmentcompletedialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbcreateassessmentcompletedialog.h"<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog::<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog(<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_back_to_menu(<b><a href="CppFalse.htm">false</a></b>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog::~<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog::Get<a href="CppQuestion.htm">Question</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;edit-&gt;text().toStdString();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) close();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog::on_button_save_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filter_str <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("*.") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_raw <a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getSaveFileName(0,"Sla het assessment invoer-bestand op",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filter_str.c_str()).toStdString();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename_raw.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;(filename_raw.size() &lt; pvdb::File::GetFilenameExtension().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> filename_raw.substr( filename_raw.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorNotEqual.htm">!=</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ? filename_raw <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(".") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : filename_raw);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Save(filename);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_back_to_menu <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;close();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog::Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> ui-&gt;edit-&gt;text().toStdString();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(<b><a href="CppNew.htm">new</a></b> pvdb::File);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create(<a href="CppQuestion.htm">question</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;file-&gt;Save(filename);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog::Set<a href="CppQuestion.htm">Question</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;edit-&gt;setText(<a href="CppQuestion.htm">question</a>.c_str());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog::on_edit_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;edit-&gt;text() <a href="CppOperatorEqual.htm">==</a> arg1);<br/>
&nbsp;&nbsp;ui-&gt;button_save-&gt;setEnabled(!arg1.isEmpty());<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbcreateassessmentmenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbcreateassessmentmenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCREATEASSESSMENTMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCREATEASSESSMENTMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog; }<br/>
<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog(<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must the parent go back to the menu?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> GoBackToMenu() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_back_to_menu; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_create_assessment_complete_clicked();<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must the parent go back to the menu?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_back_to_menu;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The focal concept map <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_<a href="CppQuestion.htm">question</a>;<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCREATEASSESSMENTMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbcreateassessmentmenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbcreateassessmentmenudialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcreateassessmentmenudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcreateassessmentcompletedialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcreateassessmentpartialdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbcreateassessmentmenudialog.h"<br/>
<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog::<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog(<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog::~<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) close();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog::on_button_create_assessment_complete_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog d;<br/>
&nbsp;&nbsp;d.Set<a href="CppQuestion.htm">Question</a>(m_<a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
&nbsp;&nbsp;m_<a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> d.Get<a href="CppQuestion.htm">Question</a>();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d.GoBackToMenu())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;close();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbcreateassessmentpartialdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbcreateassessmentpartialdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBCREATEASSESSMENTPARTIALDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBCREATEASSESSMENTPARTIALDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDialog.htm">QDialog</a>&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentPartialDialog;<br/>
}<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentPartialDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQDialog.htm">QDialog</a><br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentPartialDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentPartialDialog();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_save_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AnyEditChanged();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentPartialDialog *ui;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; m_file;<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBCREATEASSESSMENTPARTIALDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbcreateassessmentpartialdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbcreateassessmentpartialdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcreateassessmentpartialdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbcreateassessmentpartialdialog.h"<br/>
<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentPartialDialog::<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentPartialDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file, <a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQDialog.htm">QDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentPartialDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_file(file)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"TODO");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> m_file-&gt;Get<a href="CppQuestion.htm">Question</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.size() <a href="CppOperatorEqual.htm">==</a> 4)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_1-&gt;setText(v[0].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_2-&gt;setText(v[1].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_3-&gt;setText(v[2].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_complete-&gt;setText(v[3].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_1-&gt;setText("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_2-&gt;setText("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_3-&gt;setText("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_complete-&gt;setText("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;edit_1,<a href="CppSignalMacro.htm">SIGNAL</a>(textChanged(<a href="CppQString.htm">QString</a>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(AnyEditChanged()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;edit_2,<a href="CppSignalMacro.htm">SIGNAL</a>(textChanged(<a href="CppQString.htm">QString</a>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(AnyEditChanged()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;edit_3,<a href="CppSignalMacro.htm">SIGNAL</a>(textChanged(<a href="CppQString.htm">QString</a>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(AnyEditChanged()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;edit_complete,<a href="CppSignalMacro.htm">SIGNAL</a>(textChanged(<a href="CppQString.htm">QString</a>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(AnyEditChanged()));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentPartialDialog::AnyEditChanged()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;m_file.Set<a href="CppQuestion.htm">Question</a>s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_1-&gt;text().toStdString(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_2-&gt;text().toStdString(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_3-&gt;text().toStdString(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_complete-&gt;text().toStdString()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentPartialDialog::~<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentPartialDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentPartialDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) close();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentPartialDialog::on_button_save_clicked()<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> filename <a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getSaveFileName(0,"Sla het assessment invoer-bestand op",<a href="CppQString.htm">QString</a>(),"*.txt");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (!filename.isEmpty())<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;pvdb::ProgramFlow::GetInstance()-&gt;GoBack(pvdb::<a href="CppState.htm">State</a>::assessor_menu);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbdisplayconceptitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbdisplayconceptitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBDISPLAYCONCEPTITEM_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBDISPLAYCONCEPTITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a>PvdbDisplayConcept display a Concept<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>concept can be modified (as it is not <b><a href="CppConst.htm">const</a></b>), but I can promise I will <b><a href="CppTry.htm">try</a></b> to prevent <b><a href="CppThis.htm">this</a></b> from happening<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept);<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *) {} <a href="CppComment.htm">//</a>Do not respond to key presses<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBrushesAndPens();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBDISPLAYCONCEPTITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbdisplayconceptitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbdisplayconceptitem.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbbrushfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem::<a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;: <a href="CppQt.htm">Qt</a>PvdbConceptItem(concept)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetConcept());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;UpdateBrushesAndPens();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>?FIX 2013-01-06 22:47<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_name_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem::OnConceptNameChanged,<b><a href="CppThis.htm">this</a></b>)); <a href="CppComment.htm">//</a>Obligatory<br/>
<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_examples_changed.connect( <a href="CppComment.htm">//</a>FIX 2013-01-06 22:32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_complexity_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_concreteness_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_specificity_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem::UpdateBrushesAndPens()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetConcept());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Brush <b><a href="CppFor.htm">for</a></b> the concept being rated<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (GetConcept()-&gt;GetRatingComplexity()&nbsp;&nbsp; <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (GetConcept()-&gt;GetRatingConcreteness() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (GetConcept()-&gt;GetRatingSpecificity()&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1 ? 1 : 0);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (n_rated)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setBrush(<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateRedGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setBrush(<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateYellowGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setBrush(<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGreenGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Brush and pen <b><a href="CppFor.htm">for</a></b> the examples being rated<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetConcept()-&gt;GetExamples()-&gt;Get().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorBrush(<a href="CppQBrush.htm">QBrush</a>(<a href="CppQColor.htm">QColor</a>(0,0,0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,0)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(GetConcept()-&gt;GetExamples()-&gt;Get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_examples <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_judged<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency <b><a href="CppThis.htm">this</a></b>_competency <a href="CppOperatorAssign.htm">=</a> p-&gt;GetCompetency();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>_competency <a href="CppOperatorNotEqual.htm">!=</a> pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_judged <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorBrush(<a href="CppQBrush.htm">QBrush</a>(<a href="CppQColor.htm">QColor</a>(255,128,128)&nbsp;&nbsp;)); <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorPen(&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a>(&nbsp;&nbsp;<a href="CppQColor.htm">QColor</a>(255,&nbsp;&nbsp;0,&nbsp;&nbsp;0),3)); <a href="CppComment.htm">//</a>Thick pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (n_judged &lt; n_examples)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorBrush(<a href="CppQBrush.htm">QBrush</a>(<a href="CppQColor.htm">QColor</a>(255,196,128)&nbsp;&nbsp;)); <a href="CppComment.htm">//</a>Orange<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorPen(&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a>(&nbsp;&nbsp;<a href="CppQColor.htm">QColor</a>(255,196,&nbsp;&nbsp;0),2)); <a href="CppComment.htm">//</a>Less thick pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_judged <a href="CppOperatorEqual.htm">==</a> n_examples);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorBrush(<a href="CppQBrush.htm">QBrush</a>(<a href="CppQColor.htm">QColor</a>(128,255,128)&nbsp;&nbsp;)); <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorPen(&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a>(&nbsp;&nbsp;<a href="CppQColor.htm">QColor</a>(&nbsp;&nbsp;0,255,&nbsp;&nbsp;0),1)); <a href="CppComment.htm">//</a>Thin pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update(); <a href="CppComment.htm">//</a>?Not obligatory?<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;m_signal_item_has_updated(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_signal_request_scene_update(); <a href="CppComment.htm">//</a>Obligatory<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbedgeitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbedgeitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBEDGEITEM_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBEDGEITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbeditconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapitem.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtQuadBezierArrowItem.htm">qtquadbezierarrowitem</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<a href="CppComment.htm">///</a>The <a href="CppQt.htm">Qt</a>PvdbEdgeItem is a <a href="CppQt.htm">Qt</a>PvdbEditConceptItem that<br/>
<a href="CppComment.htm">///</a>draws a bezier curve underneath itself, between head and tail arrowhead<br/>
<a href="CppComment.htm">///</a>concept_item is the Strategy <b><a href="CppFor.htm">for</a></b> displaying the ConceptItem<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapItem<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; concept_item,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> to);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DisableAll();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> EnableAll();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>&gt;&nbsp;&nbsp;GetArrow() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_arrow; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>&gt;&amp; GetArrow()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <b><a href="CppReturn.htm">return</a></b> m_arrow; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&nbsp;&nbsp;GetConcept() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt;&nbsp;&nbsp;GetConcept()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; GetConceptItem() <b><a href="CppConst.htm">const</a></b> <b><a href="CppFinal.htm">final</a></b> { <b><a href="CppReturn.htm">return</a></b> m_concept_item; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&nbsp;&nbsp;GetEdge() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_edge; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Edge&gt;&amp; GetEdge()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <b><a href="CppReturn.htm">return</a></b> m_edge; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The node item the arrow originates from<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * GetFrom() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_from; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The node item the arrow targets<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * GetTo() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_to; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetConcept(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept); <a href="CppComment.htm">//</a>NEW 2013-01-07<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/No 'own/<b><a href="CppAuto.htm">auto</a></b>nomous' <b><a href="CppQtSignals.htm">signals</a></b>, these are present in the ConceptItems<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQRect.htm">QRect</a>F boundingRect() <b><a href="CppConst.htm">const</a></b> <b><a href="CppFinal.htm">final</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> focusInEvent(QFocusEvent *event) <b><a href="CppFinal.htm">final</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> focusOutEvent(QFocusEvent *event) <b><a href="CppFinal.htm">final</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event) <b><a href="CppFinal.htm">final</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mousePressEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event) <b><a href="CppFinal.htm">final</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paint(<a href="CppQPainter.htm">QPainter</a>* painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a>* option, <a href="CppQWidget.htm">QWidget</a>* <a href="CppWidget.htm">widget</a>) <b><a href="CppFinal.htm">final</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQPainterPath.htm">QPainterPath</a> <a href="CppShape.htm">shape</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppFinal.htm">final</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The arrow used <b><a href="CppFor.htm">for</a></b> drawing<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>&gt; m_arrow;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Strategy <b><a href="CppFor.htm">for</a></b> displaying the Concept<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; m_concept_item;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a> m_contour_pen;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a> m_focus_pen;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The edge<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; m_edge;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The node item the arrow originates from<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> m_from;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The node item the arrow targets<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> m_to;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Called whenever the edge changes<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnEdgeChanged();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Called whenever the arrow updates<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnItemHasUpdated();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnRequestSceneUpdate();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBEDGEITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbedgeitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbedgeitem.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbedgeitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbbrushfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtQuadBezierArrowItem.htm">qtquadbezierarrowitem</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbEdgeItem::<a href="CppQt.htm">Qt</a>PvdbEdgeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt;&amp; edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; concept_item,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> to)<br/>
&nbsp;&nbsp;: m_arrow(<b><a href="CppNew.htm">new</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>(from,edge-&gt;HasTailArrow(),<b><a href="CppThis.htm">this</a></b>,edge-&gt;HasHeadArrow(),to)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept_item(concept_item),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_contour_pen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(255,255,255))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_focus_pen(concept_item-&gt;GetFocusPen()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_edge(edge),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_from(from),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to(to)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_arrow);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept_item);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_edge);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_from);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_to);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsFocusable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsMovable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsSelectable);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setPos(edge-&gt;GetX(),edge-&gt;GetY());<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetMainBrush(<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateBlueGradientBrush());<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(255,255,255)));<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetTextPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,0)));<br/>
<br/>
&nbsp;&nbsp;m_arrow-&gt;m_signal_item_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem::OnItemHasUpdated,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;m_edge-&gt;m_signal_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem::OnEdgeChanged,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem::OnItemHasUpdated,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;from-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem::OnItemUpdated,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;to-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem::OnItemUpdated,<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQt.htm">Qt</a>PvdbEditConceptItem * edit_concept <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbEditConceptItem*&gt;(concept_item.get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edit_concept-&gt;m_signal_request_edit.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMapItem::OnConceptRequestsEdit,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<a href="CppQRect.htm">QRect</a>F <a href="CppQt.htm">Qt</a>PvdbEdgeItem::boundingRect() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_concept_item-&gt;boundingRect()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;.united(m_arrow-&gt;boundingRect().translated(-<b><a href="CppThis.htm">this</a></b>-&gt;pos()));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem::DisableAll()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_concept_item-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_concept_item-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem::EnableAll()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_concept_item-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_concept_item-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; <a href="CppQt.htm">Qt</a>PvdbEdgeItem::GetConcept() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; p <a href="CppOperatorAssign.htm">=</a> m_edge-&gt;GetConcept();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem::GetConcept()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; p <a href="CppOperatorAssign.htm">=</a> m_edge-&gt;GetConcept();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem::focusInEvent(QFocusEvent*)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Lose focus of arrow<br/>
&nbsp;&nbsp;m_arrow-&gt;SetPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,0)));<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_focus_pen); <a href="CppComment.htm">//</a>Updates itself<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_concept_item-&gt;hasFocus());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem::focusOutEvent(QFocusEvent*)<br/>
{<br/>
&nbsp;&nbsp;m_arrow-&gt;SetPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,0)));<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_contour_pen); <a href="CppComment.htm">//</a>Updates itself<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_concept_item-&gt;hasFocus());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;m_concept_item-&gt;keyPressEvent(event);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_F1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_arrow-&gt;isEnabled())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;keyPressEvent(event);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapItem::keyPressEvent(event);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem::mousePressEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event)<br/>
{&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ShiftModifier)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((event-&gt;pos() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;GetTail() <a href="CppOperatorPlus.htm">+</a> <b><a href="CppThis.htm">this</a></b>-&gt;pos()).manhattanLength() &lt; 20.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;SetHasTail( !m_arrow-&gt;HasTail() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;update(); <a href="CppComment.htm">//</a>Don't!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_signal_item_updated(<b><a href="CppThis.htm">this</a></b>); <a href="CppComment.htm">//</a>Don't!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ((event-&gt;pos() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;GetHead() <a href="CppOperatorPlus.htm">+</a> <b><a href="CppThis.htm">this</a></b>-&gt;pos()).manhattanLength() &lt; 20.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;SetHasHead( !m_arrow-&gt;HasHead() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;update(); <a href="CppComment.htm">//</a>Don't!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_signal_item_updated(<b><a href="CppThis.htm">this</a></b>); <a href="CppComment.htm">//</a>Don't!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>What is clicked on: the concept or the arrow? Assume concept<br/>
&nbsp;&nbsp;m_arrow-&gt;SetPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,0)));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<b><a href="CppThis.htm">this</a></b>-&gt;rect().contains(event-&gt;pos()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If the concept is not clicked...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>but the arrow is...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQPointF.htm">QPointF</a> pos_on_arrow <a href="CppOperatorAssign.htm">=</a> event-&gt;pos();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pos_on_arrow <a href="CppOperatorPlusAssign.htm">+=</a> (<b><a href="CppThis.htm">this</a></b>-&gt;pos());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_arrow-&gt;<a href="CppShape.htm">shape</a>().contains(pos_on_arrow)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (event-&gt;pos() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;GetTail() <a href="CppOperatorPlus.htm">+</a> <b><a href="CppThis.htm">this</a></b>-&gt;pos()).manhattanLength() &lt; 20.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (event-&gt;pos() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;GetHead() <a href="CppOperatorPlus.htm">+</a> <b><a href="CppThis.htm">this</a></b>-&gt;pos()).manhattanLength() &lt; 20.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>give focus to the arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;SetPen(m_arrow-&gt;GetFocusPen());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapItem::mousePressEvent(event);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem::OnEdgeChanged()<br/>
{<br/>
&nbsp;&nbsp;m_arrow-&gt;SetHasHead(m_edge-&gt;HasHeadArrow());<br/>
&nbsp;&nbsp;m_arrow-&gt;SetHasTail(m_edge-&gt;HasTailArrow());<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetText(m_edge-&gt;GetConcept()-&gt;GetName());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem::OnItemHasUpdated()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_signal_item_has_updated(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem::OnRequestSceneUpdate()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_signal_request_scene_update();<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem::paint(<a href="CppQPainter.htm">QPainter</a>* painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a>* option, <a href="CppQWidget.htm">QWidget</a>* <a href="CppWidget.htm">widget</a>)<br/>
{<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetText(<b><a href="CppThis.htm">this</a></b>-&gt;GetConcept()-&gt;GetName()); <a href="CppComment.htm">//</a>NEW 2013-01-08<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;pos() <a href="CppOperatorEqual.htm">==</a> m_arrow-&gt;GetMidItem()-&gt;pos());<br/>
&nbsp;&nbsp;painter-&gt;translate(-<b><a href="CppThis.htm">this</a></b>-&gt;pos());<br/>
&nbsp;&nbsp;m_arrow-&gt;paint(painter,option,<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;painter-&gt;translate(<b><a href="CppThis.htm">this</a></b>-&gt;pos());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept_item);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;hasFocus() <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppThis.htm">this</a></b>-&gt;isSelected())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the arrow or the concept have focus?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_arrow-&gt;GetPen() <a href="CppOperatorNotEqual.htm">!=</a> m_arrow-&gt;GetFocusPen())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_focus_pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_contour_pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_contour_pen);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_concept_item-&gt;paint(painter,option,<a href="CppWidget.htm">widget</a>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem::SetConcept(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept) <a href="CppComment.htm">//</a>NEW 2013-01-07<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_edge-&gt;SetConcept(concept);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem::SetName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name)<br/>
{<br/>
&nbsp;&nbsp;m_edge-&gt;GetConcept()-&gt;SetName(name);<br/>
}<br/>
<br/>
<br/>
<a href="CppQPainterPath.htm">QPainterPath</a> <a href="CppQt.htm">Qt</a>PvdbEdgeItem::<a href="CppShape.htm">shape</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_concept_item-&gt;<a href="CppShape.htm">shape</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;.united(m_arrow-&gt;<a href="CppShape.htm">shape</a>().translated(-<b><a href="CppThis.htm">this</a></b>-&gt;pos()));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbeditconceptitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbeditconceptitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBEDITCONCEPTITEM_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBEDITCONCEPTITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">///</a>Displays a Concept that might be edited<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbEditConceptItem : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>concept will be modified<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbEditConceptItem(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppSignal.htm">Signal</a><a href="CppLed.htm">led</a> when the user wants to edit<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> (<a href="CppQt.htm">Qt</a>PvdbConceptItem *)&gt; m_signal_request_edit;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A Edit ConceptItem does not change its brushes and pens<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBrushesAndPens() {}<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBEDITCONCEPTITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbeditconceptitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbeditconceptitem.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbeditconceptitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbbrushfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbEditConceptItem::<a href="CppQt.htm">Qt</a>PvdbEditConceptItem(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;: <a href="CppQt.htm">Qt</a>PvdbConceptItem(concept)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetConcept());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setBrush(<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGrayGradientBrush());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>?FIX 2013-01-06 22:47<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_name_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbEditConceptItem::OnConceptNameChanged,<b><a href="CppThis.htm">this</a></b>)); <a href="CppComment.htm">//</a>Obligatory<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbEditConceptItem::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_edit(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;GetConcept()-&gt;SetName( <b><a href="CppThis.htm">this</a></b>-&gt;GetConcept()-&gt;GetName() <a href="CppOperatorPlus.htm">+</a> "*");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_scene_update(); <a href="CppComment.htm">//</a>???really needed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>; <a href="CppComment.htm">//</a>Done<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbexamplesitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbexamplesitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBEXAMPLESITEM_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBEXAMPLESITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtRoundedEditRectItem.htm">qtroundededitrectitem</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbExamplesItem : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtRoundedEditRectItem.htm">QtRoundedEditRectItem</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbExamplesItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* parent <a href="CppOperatorAssign.htm">=</a> 0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsScene.htm">QGraphicsScene</a>* scene <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the concept <b><a href="CppThis.htm">this</a></b> item displays the examples of.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If the concept is <b><a href="CppNullptr.htm">nullptr</a></b>, <b><a href="CppThis.htm">this</a></b> item hides<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetBuddyItem(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapItem* <b><a href="CppConst.htm">const</a></b> item);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Request update of <a href="CppQGraphicsScene.htm">QGraphicsScene</a>, because <b><a href="CppThis.htm">this</a></b> item has changed<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>() &gt; m_signal_request_scene_update;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paint(<a href="CppQPainter.htm">QPainter</a> *painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a> *option, <a href="CppQWidget.htm">QWidget</a> *<a href="CppWidget.htm">widget</a>);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The concept <b><a href="CppThis.htm">this</a></b> item displays the examples of.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If m_concept is <b><a href="CppNullptr.htm">nullptr</a></b>, <b><a href="CppThis.htm">this</a></b> item hides<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapItem* m_item;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Item has updated, Examples must follow<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnItemUpdated();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetExamples(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; examples);<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBEXAMPLESITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbexamplesitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbexamplesitem.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbexamplesitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFont.htm">QFont</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbedgeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbbrushfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbExamplesItem::<a href="CppQt.htm">Qt</a>PvdbExamplesItem(<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* parent,<br/>
&nbsp;&nbsp;<a href="CppQGraphicsScene.htm">QGraphicsScene</a>* scene)<br/>
&nbsp;&nbsp;: <a href="CppQtRoundedEditRectItem.htm">QtRoundedEditRectItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "..." },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtRoundedEditRectItem.htm">QtRoundedEditRectItem</a>::Padding(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFont.htm">QFont</a>("monospace",9),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scene<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_item(<b><a href="CppNullptr.htm">nullptr</a></b>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(255,0,0)));<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setBrush(<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateWhiteGradientBrush());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFlags(0);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setZValue(2.0);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;SetBuddyItem(concept);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbExamplesItem::OnItemUpdated()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_signal_request_scene_update();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbExamplesItem::paint(<a href="CppQPainter.htm">QPainter</a> *painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a> *option, <a href="CppQWidget.htm">QWidget</a> *<a href="CppWidget.htm">widget</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetExamples(<b><a href="CppThis.htm">this</a></b>-&gt;m_item-&gt;GetConcept()-&gt;GetExamples());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p <a href="CppOperatorAssign.htm">=</a> m_item-&gt;pos();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a>F r <a href="CppOperatorAssign.htm">=</a> m_item-&gt;GetConceptItem()-&gt;rect();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setPos(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.x() <a href="CppOperatorPlus.htm">+</a> (0.5 * r.width() ) <a href="CppOperatorPlus.htm">+</a> 4.0 <a href="CppOperatorPlus.htm">+</a> (0.5 * <b><a href="CppThis.htm">this</a></b>-&gt;rect().width() ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.y() <a href="CppOperatorPlus.htm">+</a> (0.5 * r.height()) <a href="CppOperatorPlus.htm">+</a> 4.0 <a href="CppOperatorPlus.htm">+</a> (0.5 * <b><a href="CppThis.htm">this</a></b>-&gt;rect().height())<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQtRoundedEditRectItem.htm">QtRoundedEditRectItem</a>::paint(painter,option,<a href="CppWidget.htm">widget</a>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbExamplesItem::SetBuddyItem(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapItem* <b><a href="CppConst.htm">const</a></b> item)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_item <a href="CppOperatorNotEqual.htm">!=</a> item)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_item <a href="CppOperatorAssign.htm">=</a> item;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_item <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !m_item-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_item-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbExamplesItem::OnItemUpdated,<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetExamples(item-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_signal_request_scene_update();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbExamplesItem::SetExamples(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Examples&gt;&amp; examples)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt;&amp; v <a href="CppOperatorAssign.htm">=</a> examples-&gt;Get();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p-&gt;GetText();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetText(w);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbitemhighlighter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbitemhighlighter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTHIGHLIGHTER_H<br/>
<a href="CppDefine.htm">#define</a> QTHIGHLIGHTER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQObject.htm">QObject</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTimer.htm">QTimer</a>&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTimer.htm">QTimer</a>&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbItemHighlighter : <b><a href="CppPublic.htm">public</a></b> <a href="CppQObject.htm">QObject</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbItemHighlighter(<a href="CppQObject.htm">QObject</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the item being highlighted<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns <b><a href="CppNullptr.htm">nullptr</a></b> <b><a href="CppIf.htm">if</a></b> no item is highlighted<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem* GetItem() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_item; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the item to highlight.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If set with a <b><a href="CppNullptr.htm">nullptr</a></b>, highlighting the current item stops<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If set with the same item twice, nothing <b><a href="CppNew.htm">new</a></b> happens<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetItem(<a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> item);<br/>
<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A simple <a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_cnt;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The item being highlighted<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem* m_item;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppTime.htm">time</a>r used <b><a href="CppFor.htm">for</a></b> highlighting every 100 ms<br/>
&nbsp;&nbsp;<a href="CppQTimer.htm">QTimer</a> * <b><a href="CppConst.htm">const</a></b> m_<a href="CppTime.htm">time</a>r;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTHIGHLIGHTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbitemhighlighter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbitemhighlighter.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbitemhighlighter.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTimer.htm">QTimer</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbItemHighlighter::<a href="CppQt.htm">Qt</a>PvdbItemHighlighter(<a href="CppQObject.htm">QObject</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQObject.htm">QObject</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cnt(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_item(<b><a href="CppNullptr.htm">nullptr</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r(<b><a href="CppNew.htm">new</a></b> <a href="CppQTimer.htm">QTimer</a>(<b><a href="CppThis.htm">this</a></b>))<br/>
{<br/>
&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r-&gt;setInterval(10); <a href="CppComment.htm">//</a>ms<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r,<a href="CppSignalMacro.htm">SIGNAL</a>(<a href="CppTime.htm">time</a>out()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(On<a href="CppTime.htm">Time</a>r()));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbItemHighlighter::SetItem(<a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> item)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_item <a href="CppOperatorEqual.htm">==</a> item) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (item)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_<a href="CppTime.htm">time</a>r-&gt;start();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the current item in its normal rotation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_item) m_item-&gt;setRotation(0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_<a href="CppTime.htm">time</a>r-&gt;stop();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_item <a href="CppOperatorAssign.htm">=</a> item;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbItemHighlighter::On<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_item)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_cnt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> USE_ROTATION_ANIMATION_675982734653425297529<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> USE_MOVING_POSITION_ANIMATION_723497235973450873659360843975308<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQPointF.htm">QPointF</a> pos <a href="CppOperatorAssign.htm">=</a> m_item-&gt;pos();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (m_cnt <a href="CppOperatorModulus.htm">%</a> 4)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: pos.setX(pos.x() <a href="CppOperatorPlus.htm">+</a> 2.0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: pos.setY(pos.y() <a href="CppOperatorPlus.htm">+</a> 2.0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: pos.setX(pos.x() <a href="CppOperatorMinus.htm">-</a> 2.0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: pos.setY(pos.y() <a href="CppOperatorMinus.htm">-</a> 2.0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_item-&gt;setPos(pos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> USE_ROTATION_ANIMATION_675982734653425297529<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> 2.0 * <a href="CppM_PI.htm">M_PI</a> * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_cnt) <a href="CppOperatorDivide.htm">/</a> 360.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> speed_up <a href="CppOperatorAssign.htm">=</a> 5.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSin.htm">std::sin</a>(angle * speed_up) * 5.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_item-&gt;setRotation(r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_item-&gt;update();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbmenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbmenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog; }<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog(<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbMenuDialog();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> and all other <a href="CppQDialog.htm">QDialog</a>s<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> closeEvent(QCloseEvent * event) { <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>::closeEvent(event); }<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_assessor_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_student_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_test_cluster_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_overview_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_about_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_test_conceptmap_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_test_conceptedit_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_view_files_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_view_test_concept_maps_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_rate_concept_map_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_rate_concept_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_rate_examples_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_rating_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_concept_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_test_node_item_clicked();<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_test_<a href="CppQtRoundedTextRectItem.htm">qtroundedtextrectitem</a>_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_test_<a href="CppQtRoundedEditRectItem.htm">qtroundededitrectitem</a>_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_test_edge_item_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_test_arrowitems_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_test_qtconceptmapedit<a href="CppWidget.htm">widget</a>_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_test_qtconceptmaprate<a href="CppWidget.htm">widget</a>_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_create_test_files_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_modify_stylesheet_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbMenuDialog *ui;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; m_file;<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbmenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbmenudialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbmenudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQLayout.htm">QLayout</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQVBoxLayout.htm">QVBoxLayout</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="CppAbout.htm">about</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfilefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "pvdbmenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="Tools.htm">tool</a><a href="ToolStyleSheetSetter.htm">stylesheetsetter</a>maindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbassessormenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbclusterdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcluster<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconcepteditdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="ToolTestConceptMap.htm">testconceptmap</a>rate<a href="CppWidget.htm">widget</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcreateassessmentcompletedialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdboverviewdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptmapdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateexamplesdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbratingdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbstudentmenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbtestconceptitemdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="ToolTestConceptMap.htm">testconceptmap</a>edit<a href="CppWidget.htm">widget</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbtestedgeitemdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbtestnodeitemdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbviewfilesdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbviewtestsdialog.h"<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolTestQtArrowItems.htm">testqtarrowitems</a>menudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolTestQtRoundedEditRectItem.htm">testqtroundededitrectitem</a>menudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolTestQtRoundedTextRectItem.htm">testqtroundedtextrectitem</a>menudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbmenudialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbMenuDialog::<a href="CppQt.htm">Qt</a>PvdbMenuDialog(<a href="CppQWidget.htm">QWidget</a>* parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbMenuDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbMenuDialog::~<a href="CppQt.htm">Qt</a>PvdbMenuDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_assessor_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_rate_concept_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain a random file<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::File::GetTests();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file <a href="CppOperatorAssign.htm">=</a> v[ <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> v.size() ];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set Heteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>[15]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s().at(15);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain a random sub-concept-map<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; concept_maps <a href="CppOperatorAssign.htm">=</a> file-&gt;GetConceptMap()-&gt;CreateSubs();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display <b><a href="CppThis.htm">this</a></b> random concept map<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map <a href="CppOperatorAssign.htm">=</a> concept_maps[ <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> concept_maps.size() ];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create and show the dialog<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbRateConceptDialog&gt; d(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptDialog(concept_map));<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(d.get());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_rate_concept_map_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::File::GetTests();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file <a href="CppOperatorAssign.htm">=</a> v[ <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> v.size() ];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s().at(15);<br/>
&nbsp;&nbsp;file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog d(file);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_rate_examples_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::GetTests().at(4);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog&gt; d(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog(concept));<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(d.get());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_rating_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file <a href="CppOperatorAssign.htm">=</a> pvdb::FileFactory::GetTests().at(4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRatingDialog d(file);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_student_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filter_str <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("*.") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getOpenFileName(0,"Kies een assessment bestand",<a href="CppQString.htm">QString</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter_str.c_str()).toStdString();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::File::Load(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Gotta <b><a href="CppCatch.htm">catch</a></b> 'm all<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_test_cluster_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; files <a href="CppOperatorAssign.htm">=</a> pvdb::File::GetTests();<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&nbsp;&nbsp;file <a href="CppOperatorAssign.htm">=</a> files[ <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> files.size() ];<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> "qtvdbmenudialog<a href="CppImplementationFile.htm">.cpp</a> 79?";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(pvdb::ConceptMapFactory::Create(<a href="CppQuestion.htm">question</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>file-&gt;Set<a href="CppQuestion.htm">Question</a>("Wat zal ik als test focusvraag schrijven?");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbClusterDialog d(file);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_overview_clicked()<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> old_title <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;windowTitle();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setWindowTitle("Loading, please wait...");<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbOverviewDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_about_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>Pvdb<a href="CppAbout.htm">About</a>Dialog::Get();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide();<br/>
&nbsp;&nbsp;d-&gt;exec();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_test_conceptmap_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::File::GetTests();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file <a href="CppOperatorAssign.htm">=</a> v[ <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> v.size() ];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s().at(15);<br/>
&nbsp;&nbsp;file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d(file);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_test_conceptedit_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> concepts <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&nbsp;&nbsp;concept <a href="CppOperatorAssign.htm">=</a> concepts[ <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> concepts.size() ];<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (concept-&gt;GetExamples()-&gt;Get().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept <a href="CppOperatorAssign.htm">=</a> concepts[ <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> concepts.size() ];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptEditDialog d(concept);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_view_files_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbViewFilesDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_view_test_concept_maps_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbViewTestsDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Started <a href="CppQt.htm">Qt</a>PvdbMenuDialog::Test");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbOverviewDialog d; <a href="CppComment.htm">//</a>Creates all screens, does all tests<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>THE MULTI DIALOG TESTS HERE<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>MULTI DIALOG TEST #1<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>1) Create an assessor <a href="CppQuestion.htm">question</a> file<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>2) Load the assessor file (as a student)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>3) Fill in a name<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>4) Start with concept map<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>5) Save<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>6) Test <b><a href="CppIf.htm">if</a></b> clustering is disabled<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> "DEBUG_QUESTION";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> pvdb::File::GetTestFileName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> "DEBUG_NAME";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>1) Create an assessor <a href="CppQuestion.htm">question</a> file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Set<a href="CppQuestion.htm">Question</a>(<a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Save(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>2) Load the assessor file (as a student)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>3) Fill in a name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::File::Load(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetStudentName().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.SetName(name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.GetName() <a href="CppOperatorEqual.htm">==</a> name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Save(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>4) Start with concept map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>5) Save<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::File::Load(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetStudentName() <a href="CppOperatorEqual.htm">==</a> name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetStudentName() <a href="CppOperatorEqual.htm">==</a> name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap()-&gt;GetNodes().size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap()-&gt;GetEdges().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.DoRandomStuff();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap()-&gt;GetNodes().size() &gt; 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!file-&gt;GetConceptMap()-&gt;GetEdges().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Save(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>6) Test <b><a href="CppIf.htm">if</a></b> clustering is disabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::File::Load(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetStudentName() <a href="CppOperatorEqual.htm">==</a> name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap()-&gt;GetNodes().size() &gt; 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!file-&gt;GetConceptMap()-&gt;GetEdges().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbClusterDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!d.Get<a href="CppWidget.htm">Widget</a>()-&gt;isEnabled()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cluster <a href="CppWidget.htm">widget</a> should be disabled <b><a href="CppFor.htm">for</a></b> a file with a filled in ConceptMap");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(pvdb::File::GetTestFileName().c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Long test #2<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>1) Create an assessor <a href="CppQuestion.htm">question</a> file<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>2) Load the assessor file (as a student)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>3) Fill in a name<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>4) Start with clustering<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>5) Start with concept map<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>6) Save<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> "DEBUG_QUESTION";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> pvdb::File::GetTestFileName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> "DEBUG_NAME";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>1) Create an assessor <a href="CppQuestion.htm">question</a> file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Set<a href="CppQuestion.htm">Question</a>(<a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Save(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>2) Load the assessor file (as a student)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>3) Fill in a name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::File::Load(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetStudentName().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.SetName(name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.GetName() <a href="CppOperatorEqual.htm">==</a> name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Save(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>4) Start with clustering<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::File::Load(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetStudentName() <a href="CppOperatorEqual.htm">==</a> name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbClusterDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetStudentName() <a href="CppOperatorEqual.htm">==</a> name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetCluster()-&gt;Empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap()-&gt;GetNodes().size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap()-&gt;GetEdges().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.DoRandomStuff();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!file-&gt;GetCluster()-&gt;Empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap()-&gt;GetNodes().size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap()-&gt;GetEdges().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Save(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>5) Start with concept map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>6) Save<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::File::Load(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetStudentName() <a href="CppOperatorEqual.htm">==</a> name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetStudentName() <a href="CppOperatorEqual.htm">==</a> name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap()-&gt;GetNodes().size() &gt; 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap()-&gt;GetEdges().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.DoRandomStuff();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap()-&gt;GetNodes().size() &gt; 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!file-&gt;GetConceptMap()-&gt;GetEdges().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Save(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>7) Test <b><a href="CppIf.htm">if</a></b> clustering is disabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(pvdb::File::Load(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetStudentName() <a href="CppOperatorEqual.htm">==</a> name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap()-&gt;GetNodes().size() &gt; 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!file-&gt;GetConceptMap()-&gt;GetEdges().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbClusterDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!d.Get<a href="CppWidget.htm">Widget</a>()-&gt;isEnabled()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cluster <a href="CppWidget.htm">widget</a> should be disabled <b><a href="CppFor.htm">for</a></b> a file with a filled in ConceptMap");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(pvdb::File::GetTestFileName().c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppQt.htm">Qt</a>PvdbMenuDialog::Test successfully");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_concept_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_test_node_item_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_test_<a href="CppQtRoundedTextRectItem.htm">qtroundedtextrectitem</a>_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="ToolTestQtRoundedTextRectItem.htm">TestQtRoundedTextRectItem</a>MenuDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_test_<a href="CppQtRoundedEditRectItem.htm">qtroundededitrectitem</a>_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="ToolTestQtRoundededitRectItem.htm">TestQtRoundedEditRectItem</a>MenuDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_test_edge_item_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_test_arrowitems_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="ToolTestQtArrowItems.htm">TestQtArrowItems</a>MenuDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_test_qtconceptmapedit<a href="CppWidget.htm">widget</a>_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_test_qtconceptmaprate<a href="CppWidget.htm">widget</a>_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_create_test_files_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the four human student concept maps<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>4+1; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>Base 1 counting<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i) <a href="CppOperatorPlus.htm">+</a> "." <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> qtpath <a href="CppOperatorAssign.htm">=</a> ":/files/";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> file((qtpath <a href="CppOperatorPlus.htm">+</a> filename).c_str());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(file.isReadable());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(file.isWritable());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file.size() &gt; 0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.copy(filename.c_str());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQFile.htm">QFile</a>::exists(filename.c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::FileFactory::GetTests();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i <a href="CppOperatorPlus.htm">+</a> 5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "."<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;Save(s);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog::on_button_modify_stylesheet_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="ToolStyleSheetSetter.htm">ToolStyleSheetSetter</a>MainDialog d(qApp-&gt;styleSheet().toStdString());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
&nbsp;&nbsp;qApp-&gt;setStyleSheet(d.GetStyleSheet().c_str());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbnewarrow.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbnewarrow.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBNEWARROW_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBNEWARROW_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQBrush.htm">QBrush</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtArrowItem.htm">qtarrowitem</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a>PvdbNewArrow is the arrow shown before a <b><a href="CppNew.htm">new</a></b> one is added<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbNewArrow: <b><a href="CppPublic.htm">public</a></b> <a href="CppQtArrowItem.htm">QtArrowItem</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNewArrow(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; current_to);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the source node<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * GetFrom() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_from; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * GetFrom()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <b><a href="CppReturn.htm">return</a></b> m_from; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be suppplied<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paint(<a href="CppQPainter.htm">QPainter</a>* painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a>* option <a href="CppOperatorAssign.htm">=</a> 0, <a href="CppQWidget.htm">QWidget</a>* <a href="CppWidget.htm">widget</a> <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The source node<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Cannot be <b><a href="CppConst.htm">const</a></b> as the user might want to edit it<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> m_from;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBNEWARROW_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbnewarrow.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbnewarrow.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnewarrow.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFont.htm">QFont</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/linestring.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/<a href="CppPointer.htm">point</a>_xy.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the zero or one intersections between two finite lines<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetLineLineIntersections.htm">GetLineLineIntersections</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&gt;<br/>
<a href="CppGetLineLineIntersections.htm">GetLineLineIntersections</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&nbsp;&nbsp;&gt; line1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&nbsp;&nbsp;&gt; line2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; <a href="CppPoint.htm">Point</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<a href="CppPoint.htm">Point</a>&gt; Line;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::intersection(line1,line2,<a href="CppPointer.htm">point</a>s);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s.empty() <a href="CppOperatorLogicalOr.htm">||</a> <a href="CppPointer.htm">point</a>s.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppPointer.htm">point</a>s;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>Helper <a href="CppFunction.htm">function</a> to create a <b><a href="CppConst.htm">const</a></b> line without a temporary <a href="CppStdVector.htm">std::vector</a><br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&gt;<br/>
CreateLine(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&nbsp;&nbsp;&gt;(v.begin(),v.end());<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the zero, one or two intersections between a line and a rectanle<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetLineRectIntersections.htm">GetLineRectIntersections</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&gt;<br/>
<a href="CppGetLineRectIntersections.htm">GetLineRectIntersections</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&nbsp;&nbsp;&gt; line,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::box&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&nbsp;&nbsp;&gt; rect)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; <a href="CppPoint.htm">Point</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<a href="CppPoint.htm">Point</a>&gt; Line;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::box&lt;<a href="CppPoint.htm">Point</a>&gt; Rect;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a> p0 <a href="CppOperatorAssign.htm">=</a> <a href="CppPoint.htm">Point</a>(rect.min_corner().x(), rect.min_corner().y());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a> p1 <a href="CppOperatorAssign.htm">=</a> <a href="CppPoint.htm">Point</a>(rect.max_corner().x(), rect.min_corner().y());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a> p2 <a href="CppOperatorAssign.htm">=</a> <a href="CppPoint.htm">Point</a>(rect.min_corner().x(), rect.max_corner().y());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a> p3 <a href="CppOperatorAssign.htm">=</a> <a href="CppPoint.htm">Point</a>(rect.max_corner().x(), rect.max_corner().y());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Line&gt; lines<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateLine(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;( {p0,p1} )),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateLine(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;( {p0,p2} )),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateLine(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;( {p1,p3} )),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateLine(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;( {p2,p3} ))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(lines.begin(),lines.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;<a href="CppPointer.htm">point</a>s,line](<b><a href="CppConst.htm">const</a></b> Line&amp; side)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppGetLineLineIntersections.htm">GetLineLineIntersections</a>(line,side);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(<a href="CppPointer.htm">point</a>s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove doublures<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put '<b><a href="CppTypename.htm">typename</a></b>' before '<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;::<a href="CppIterator.htm">iterator</a>type' to prevent getting the error below:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>error: need '<b><a href="CppTypename.htm">typename</a></b>' before '<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; &gt;::<a href="CppIterator.htm">iterator</a>'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;because '<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; &gt;' is a dependent <a href="CppScope.htm">scope</a><br/>
&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;::<a href="CppIterator.htm">iterator</a> new_end <a href="CppOperatorAssign.htm">=</a> <a href="CppStdUnique.htm">std::unique</a>( <a href="CppPointer.htm">point</a>s.begin(),<a href="CppPointer.htm">point</a>s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.x() <a href="CppOperatorEqual.htm">==</a> rhs.x() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.y() <a href="CppOperatorEqual.htm">==</a> rhs.y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.erase(new_end,<a href="CppPointer.htm">point</a>s.end());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s.size() <a href="CppOperatorLessEqual.htm">&lt;=</a> 2);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppPointer.htm">point</a>s;<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbNewArrow::<a href="CppQt.htm">Qt</a>PvdbNewArrow(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> from,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; current_to)<br/>
&nbsp;&nbsp;: <a href="CppQtArrowItem.htm">QtArrowItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from-&gt;pos().x(),from-&gt;pos().y(),<b><a href="CppFalse.htm">false</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current_to.x(),current_to.y(),<b><a href="CppTrue.htm">true</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_from(from)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_from);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>New arrows are above all items<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setZValue(2.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>A <b><a href="CppNew.htm">new</a></b> arrow must not be moveable<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFlag(<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsSelectable,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFlag(<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsMovable,<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reject enterHoverEvents<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setAcceptHoverEvents(<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!(<b><a href="CppThis.htm">this</a></b>-&gt;flags() &amp; <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsSelectable));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!(<b><a href="CppThis.htm">this</a></b>-&gt;flags() &amp; <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsMovable ));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbNewArrow::paint(<a href="CppQPainter.htm">QPainter</a>* painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a>* option, <a href="CppQWidget.htm">QWidget</a>* <a href="CppWidget.htm">widget</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppPoint.htm">Point</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<a href="CppPoint.htm">Point</a>&gt; Line;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::box&lt;<a href="CppPoint.htm">Point</a>&gt; Rect;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Line line <a href="CppOperatorAssign.htm">=</a> CreateLine(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(m_from-&gt;pos().x(),m_from-&gt;pos().y()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(<b><a href="CppThis.htm">this</a></b>-&gt;line().p2().x(),<b><a href="CppThis.htm">this</a></b>-&gt;line().p2().y())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a>F qr1 <a href="CppOperatorAssign.htm">=</a> m_from-&gt;boundingRect().translated(m_from-&gt;pos());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rect r1(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(qr1.topLeft().x()&nbsp;&nbsp;&nbsp;&nbsp;,qr1.topLeft().y()&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(qr1.bottomRight().x(),qr1.bottomRight().y())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt; p1 <a href="CppOperatorAssign.htm">=</a> <a href="CppGetLineRectIntersections.htm">GetLineRectIntersections</a>(line,r1);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p1.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Yes,it happens, when the line does not leave the <a href="CppRectangle.htm">rectangle</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> happens when the two node rectanges overlap<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p1.push_back(<a href="CppPoint.htm">Point</a>(m_from-&gt;pos().x(),m_from-&gt;pos().y()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p1.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p2 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;line().p2();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setLine(QLineF(<a href="CppQPointF.htm">QPointF</a>(p1[0].x(),p1[0].y()),p2));<br/>
&nbsp;&nbsp;<a href="CppQtArrowItem.htm">QtArrowItem</a>::paint(painter,option,<a href="CppWidget.htm">widget</a>);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbnodeitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbnodeitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBNODEITEM_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBNODEITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtRoundedTextRectItem.htm">qtroundedtextrectitem</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapitem.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a>PvdbNodeItem displays a Node<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapItem<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Node cannot be <b><a href="CppConst.htm">const</a></b> as it contains a Concept that the user might want to edit<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/concept_item contains the <a href="CppState.htm">State</a>gy to display (and respond to the concept)<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; concept_item);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppQRect.htm">QRect</a>F boundingRect() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQBrush.htm">QBrush</a> brush() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DisableAll();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> EnableAll();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&nbsp;&nbsp;GetConcept() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt;&nbsp;&nbsp;GetConcept()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; GetConceptItem() <b><a href="CppConst.htm">const</a></b> <b><a href="CppFinal.htm">final</a></b> { <b><a href="CppReturn.htm">return</a></b> m_concept_item; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&nbsp;&nbsp;GetNode() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_node; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Node&gt;&amp; GetNode()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <b><a href="CppReturn.htm">return</a></b> m_node; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetConcept(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept); <a href="CppComment.htm">//</a>NEW 2013-01-07<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_signal_request_rate_node is <a href="CppEmit.htm">emitted</a> due to a m_signal_request_rate_node<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/of the Node its <a href="CppQt.htm">Qt</a>RateConceptItem<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> (<a href="CppQt.htm">Qt</a>PvdbNodeItem *)&gt; m_signal_node_requests_rate_concept;<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> (<a href="CppQt.htm">Qt</a>PvdbNodeItem *)&gt; m_signal_node_requests_rate_examples;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/No other <b><a href="CppQtSignals.htm">signals</a></b>, these are present in the ConceptItems<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppQt.htm">Qt</a>PvdbNodeItem() {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> focusInEvent(QFocusEvent *event) <b><a href="CppFinal.htm">final</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> focusOutEvent(QFocusEvent *event) <b><a href="CppFinal.htm">final</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event) <b><a href="CppFinal.htm">final</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt;&amp; GetConceptItem() { <b><a href="CppReturn.htm">return</a></b> m_concept_item; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Next to <a href="CppQt.htm">Qt</a>PvdbConcept::paint, check <b><a href="CppFor.htm">for</a></b> collision<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paint(<a href="CppQPainter.htm">QPainter</a>* painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a> *, <a href="CppQWidget.htm">QWidget</a> *) <b><a href="CppFinal.htm">final</a></b>;<br/>
<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Strategy <b><a href="CppFor.htm">for</a></b> displaying a Concept<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; m_concept_item;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a> m_contour_pen;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a> m_focus_pen;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The node being edited, or displayed and not changed, or rated<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; m_node;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnItemHasUpdated();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnNodeChanged();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnRequestsSceneUpdate();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnItemRequestsRateConcept();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnItemRequestsRateExamples();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBNODEITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbnodeitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbnodeitem.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPen.htm">QPen</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbbrushfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbeditconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbNodeItem::<a href="CppQt.htm">Qt</a>PvdbNodeItem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt;&amp; node,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; concept_item)<br/>
&nbsp;&nbsp;: m_concept_item(concept_item),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_contour_pen(concept_item-&gt;GetContourPen()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_focus_pen(concept_item-&gt;GetFocusPen()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_node(node)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept_item);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept_item-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> m_node-&gt;GetConcept().get());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsFocusable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsMovable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsSelectable);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(flags() &amp; <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsFocusable);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(flags() &amp; <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsSelectable);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(flags() &amp; <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsMovable);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setPos(m_node-&gt;GetX(),m_node-&gt;GetY());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;pos().x() <a href="CppOperatorEqual.htm">==</a> m_node-&gt;GetX());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;pos().y() <a href="CppOperatorEqual.htm">==</a> m_node-&gt;GetY());<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbNodeItem::OnItemHasUpdated,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbNodeItem::OnRequestsSceneUpdate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQt.htm">Qt</a>PvdbEditConceptItem * edit_concept <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbEditConceptItem*&gt;(concept_item.get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edit_concept-&gt;m_signal_request_edit.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbConceptMapItem::OnConceptRequestsEdit,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQt.htm">Qt</a>PvdbRateConceptItem * rate_concept <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem*&gt;(concept_item.get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rate_concept-&gt;m_signal_request_rate_concept.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbNodeItem::OnItemRequestsRateConcept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rate_concept-&gt;m_signal_request_rate_examples.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbNodeItem::OnItemRequestsRateExamples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;pos().x() <a href="CppOperatorEqual.htm">==</a> m_node-&gt;GetX());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;pos().y() <a href="CppOperatorEqual.htm">==</a> m_node-&gt;GetY());<br/>
}<br/>
<br/>
<a href="CppQRect.htm">QRect</a>F <a href="CppQt.htm">Qt</a>PvdbNodeItem::boundingRect() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_concept_item-&gt;boundingRect().adjusted(-1.0,-1.0,1.0,1.0); <a href="CppComment.htm">//</a>2013-01-25: <a href="CppAdd.htm">Add</a>ed adjusted<br/>
}<br/>
<br/>
<a href="CppQBrush.htm">QBrush</a> <a href="CppQt.htm">Qt</a>PvdbNodeItem::brush() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_concept_item-&gt;brush();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem::DisableAll()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_concept_item-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_concept_item-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem::EnableAll()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_concept_item-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_concept_item-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem::focusInEvent(QFocusEvent*)<br/>
{<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_focus_pen); <a href="CppComment.htm">//</a>Updates itself<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_concept_item-&gt;hasFocus());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem::focusOutEvent(QFocusEvent*)<br/>
{<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_contour_pen); <a href="CppComment.htm">//</a>Updates itself<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_signal_item_has_updated(0); <a href="CppComment.htm">//</a>2013-01-20: causes Examples to get hidden <a href="CppComment.htm">//</a>BUG<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; <a href="CppQt.htm">Qt</a>PvdbNodeItem::GetConcept() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; p <a href="CppOperatorAssign.htm">=</a> m_node-&gt;GetConcept();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; <a href="CppQt.htm">Qt</a>PvdbNodeItem::GetConcept()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; p <a href="CppOperatorAssign.htm">=</a> m_node-&gt;GetConcept();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept_item);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept_item-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("HIERO 23:22");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_F2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetConcept()-&gt;SetName( <b><a href="CppThis.htm">this</a></b>-&gt;GetConcept()-&gt;GetName() <a href="CppOperatorPlus.htm">+</a> "*");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m_concept_item-&gt;keyPressEvent(event);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_F1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapItem::keyPressEvent(event);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem::OnItemHasUpdated()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_signal_item_has_updated(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem::OnItemRequestsRateConcept()<br/>
{<br/>
&nbsp;&nbsp;m_signal_node_requests_rate_concept(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem::OnItemRequestsRateExamples()<br/>
{<br/>
&nbsp;&nbsp;m_signal_node_requests_rate_examples(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem::OnRequestsSceneUpdate()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_signal_request_scene_update();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem::paint(<a href="CppQPainter.htm">QPainter</a>* painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a>* item, <a href="CppQWidget.htm">QWidget</a>* <a href="CppWidget.htm">widget</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_concept_item-&gt;SetText(<b><a href="CppThis.htm">this</a></b>-&gt;GetConcept()-&gt;GetName());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept_item);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_concept_item-&gt;hasFocus());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_concept_item-&gt;isSelected());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;boundingRect() <a href="CppOperatorEqual.htm">==</a> m_concept_item-&gt;boundingRect()); <a href="CppComment.htm">//</a>2013-01-25: Don't care<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;paint(painter,item,<a href="CppWidget.htm">widget</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> item can move (as the center node cannot)<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;flags() &amp; <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsMovable)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Item can move, check <b><a href="CppFor.htm">for</a></b> collision<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQList.htm">QList</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>*&gt; others <a href="CppOperatorAssign.htm">=</a> collidingItems();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(others.begin(),others.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> other_item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(other_item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> other_node <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(other_item))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx <a href="CppOperatorAssign.htm">=</a> x() <a href="CppOperatorMinus.htm">-</a> other_node-&gt;x() &gt; 0.0 ? 1.0 : <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy <a href="CppOperatorAssign.htm">=</a> y() <a href="CppOperatorMinus.htm">-</a> other_node-&gt;y() &gt; 0.0 ? 1.0 : <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;flags() &amp; <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsMovable); <a href="CppComment.htm">//</a>Not <b><a href="CppTrue.htm">true</a></b> <b><a href="CppFor.htm">for</a></b> center node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setPos( <b><a href="CppThis.htm">this</a></b>-&gt;x()&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> dx, <b><a href="CppThis.htm">this</a></b>-&gt;y()&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem::SetConcept(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_node-&gt;SetConcept(concept);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem::SetName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name)<br/>
{<br/>
&nbsp;&nbsp;m_node-&gt;GetConcept()-&gt;SetName(name);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdboverviewdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdboverviewdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBOVERVIEWDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBOVERVIEWDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbOverviewDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbOverviewDialog(<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBOVERVIEWDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdboverviewdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdboverviewdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdboverviewdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQVBoxLayout.htm">QVBoxLayout</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qtpvdboverview<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbOverviewDialog::<a href="CppQt.htm">Qt</a>PvdbOverviewDialog(<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent)<br/>
{<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<a href="CppQLayout.htm">QLayout</a> * <b><a href="CppConst.htm">const</a></b> layout <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQVBoxLayout.htm">QVBoxLayout</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setLayout(layout);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbOverview<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> <a href="CppWidget.htm">widget</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbOverview<a href="CppWidget.htm">Widget</a>;<br/>
&nbsp;&nbsp;layout-&gt;addWidget(<a href="CppWidget.htm">widget</a>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbOverviewDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(e);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdboverviewwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdboverviewwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBOVERVIEWWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBOVERVIEWWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsView.htm">QGraphicsView</a>&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>;<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbOverview<a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQGraphicsView.htm">QGraphicsView</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbOverview<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mouse<a href="CppDouble.htm">Double</a>ClickEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a> *event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create all dialogs<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* &gt; GetAllDialogs();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/NASTY BUG ALERT: It crashes <a href="CppWine.htm">Wine</a> <b><a href="CppIf.htm">if</a></b> m_dialogs is created as<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>&gt; &gt; m_dialogs;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/No idea why...<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* &gt; m_dialogs;<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBOVERVIEWWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdboverviewwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdboverviewwidget.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdboverviewdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDialog.htm">QDialog</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsScene.htm">QGraphicsScene</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsProxyWidget.htm">QGraphicsProxyWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsTextItem.htm">QGraphicsTextItem</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQIcon.htm">QIcon</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTimer.htm">QTimer</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtpvdboverview<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfilefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbtestconceptitemdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbviewtestsdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconcepteditdialog.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "pvdbmenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbtestedgeitemdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbtestnodeitemdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="ToolTestConceptMap.htm">testconceptmap</a>edit<a href="CppWidget.htm">widget</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="ToolTestConceptMap.htm">testconceptmap</a>rate<a href="CppWidget.htm">widget</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbassessormenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptmapdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateexamplesdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbclusterdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcreateassessmentcompletedialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcreateassessmentmenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcreateassessmentpartialdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbratingdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbmenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbstudentmenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbstudentstartcompletedialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbOverview<a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>PvdbOverview<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQGraphicsView.htm">QGraphicsView</a>(<b><a href="CppNew.htm">new</a></b> <a href="CppQGraphicsScene.htm">QGraphicsScene</a>,parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialogs(GetAllDialogs())<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(scene());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(m_dialogs.begin(),m_dialogs.end(),[](<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(m_dialogs.begin(),m_dialogs.end(),[](<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> y_sum <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> max_width <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> m_dialogs.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> dialog to <a href="CppWidget.htm">widget</a> <b><a href="CppExplicit.htm">explicit</a></b>ly <b><a href="CppFor.htm">for</a></b> <a href="CppWine.htm">Wine</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_dialogs[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> * <b><a href="CppConst.htm">const</a></b> <a href="CppWidget.htm">widget</a> <a href="CppOperatorAssign.htm">=</a> m_dialogs[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppWidget.htm">widget</a>);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsProxyWidget.htm">QGraphicsProxyWidget</a> * <b><a href="CppConst.htm">const</a></b> proxy <a href="CppOperatorAssign.htm">=</a> scene()-&gt;addWidget(<a href="CppWidget.htm">widget</a>,<a href="CppQt.htm">Qt</a>::Dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(proxy);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;proxy-&gt;setPos(32,y_sum);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y_sum <a href="CppOperatorPlusAssign.htm">+=</a> proxy-&gt;rect().height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y_sum <a href="CppOperatorPlusAssign.htm">+=</a> 64; <a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a>ed by window height<br/>
&nbsp;&nbsp;&nbsp;&nbsp;max_width <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax.htm">std::max</a>(max_width,proxy-&gt;rect().width());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> window_title<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_dialogs[i]-&gt;windowTitle().toStdString()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> m_dialogs[i]-&gt;objectName().toStdString()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ")";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;proxy-&gt;setWindowTitle(window_title.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(0,0,max_width,y_sum);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* &gt; <a href="CppQt.htm">Qt</a>PvdbOverview<a href="CppWidget.htm">Widget</a>::GetAllDialogs()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* &gt; v;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbAssessorMenuDialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbClusterDialog(pvdb::FileFactory::GetTests().at(3)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptEditDialog(pvdb::ConceptFactory::GetTests().at(4)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog(pvdb::FileFactory::GetTests().at(2)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentCompleteDialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbCreateAssessmentMenuDialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbMenuDialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetAllTests().at(15);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptDialog(concept_map));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog(pvdb::FileFactory::GetTests().at(2)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog(pvdb::ConceptFactory::GetTests().at(4)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbRatingDialog(pvdb::FileFactory::GetTests().at(4)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> REALLY_DEMONSTRATE_INFINITE_RECURSION_7236834589746034<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>*(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbOverviewDialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog(pvdb::FileFactory::GetTests().at(2)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog(pvdb::FileFactory::GetTests().at(2)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> PVDB_ALSO_SHOW_TEST_DIALOGS<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbViewTestsDialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),[](<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(v.begin(),v.end(),[](<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>* p) { <b><a href="CppReturn.htm">return</a></b> p; } )); <a href="CppComment.htm">//</a>MAJ<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbOverview<a href="CppWidget.htm">Widget</a>::mouse<a href="CppDouble.htm">Double</a>ClickEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a> *)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQImage.htm">QImage</a> image(scene()-&gt;sceneRect().size().toSize(), <a href="CppQImage.htm">QImage</a>::Format_ARGB32); <a href="CppComment.htm">//</a> Create the image with the exact size of the shrunk scene<br/>
&nbsp;&nbsp;image.fill(<a href="CppQt.htm">Qt</a>::transparent);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a> Start all pixels transparent<br/>
&nbsp;&nbsp;<a href="CppQPainter.htm">QPainter</a> painter(&amp;image);<br/>
&nbsp;&nbsp;scene()-&gt;render(&amp;painter);<br/>
&nbsp;&nbsp;image.save("file_name.png");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbprintconceptmapdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbprintconceptmapdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBPRINTCONCEPTMAPDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBPRINTCONCEPTMAPDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbPrintConceptMapDialog;<br/>
}<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbPrintConceptMapDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbPrintConceptMapDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; file,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbPrintConceptMapDialog();<br/>
&nbsp;&nbsp;<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_print_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbPrintConceptMapDialog *ui;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBPRINTCONCEPTMAPDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbprintconceptmapdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbprintconceptmapdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbprintconceptmapdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPrinter.htm">QPrinter</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPrintDialog.htm">QPrintDialog</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbprintconceptmapdialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbPrintConceptMapDialog::<a href="CppQt.htm">Qt</a>PvdbPrintConceptMapDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; file,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbPrintConceptMapDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;label_student_name-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("Concept map van ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> file-&gt;GetStudentName()).c_str()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTime_t.htm">std::time_t</a> my_<a href="CppTime.htm">time</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTime.htm">std::time</a>( &amp;my_<a href="CppTime.htm">time</a> );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdTm.htm">std::tm</a> * <b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">time</a>_and_date <a href="CppOperatorAssign.htm">=</a> <a href="CppStdLocaltime.htm">std::localtime</a>(&amp;my_<a href="CppTime.htm">time</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAsctime.htm">std::asctime</a>(<a href="CppTime.htm">time</a>_and_date);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_date-&gt;setText( (<a href="CppStdString.htm">std::string</a>("Datum: ") <a href="CppOperatorPlus.htm">+</a> s).c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concept map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; copy_concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::DeepCopy(file-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;concept_map-&gt;ReadFromConceptMap(copy_concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;concept_map-&gt;setHorizontalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;concept_map-&gt;setVerticalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;concept_map-&gt;setMinimumHeight(ui-&gt;concept_map-&gt;scene()-&gt;itemsBoundingRect().height() <a href="CppOperatorPlus.htm">+</a> 2);<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbPrintConceptMapDialog::~<a href="CppQt.htm">Qt</a>PvdbPrintConceptMapDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbPrintConceptMapDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbPrintConceptMapDialog::on_button_print_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPrinter.htm">QPrinter</a> printer;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> filename <a href="CppOperatorAssign.htm">=</a> "<a href="ProjectVanDenBogaart.htm">ProjectVanDenBogaart</a>.pdf";<br/>
&nbsp;&nbsp;printer.setOutputFormat(<a href="CppQPrinter.htm">QPrinter</a>::PdfFormat);<br/>
&nbsp;&nbsp;printer.setOrientation(<a href="CppQPrinter.htm">QPrinter</a>::Portrait);<br/>
&nbsp;&nbsp;printer.setPaperSize(<a href="CppQPrinter.htm">QPrinter</a>::A4);<br/>
&nbsp;&nbsp;printer.setFullPage(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;printer.setOutputFileName(filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start printer dialog<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPrintDialog.htm">QPrintDialog</a>&gt; print_dialog(<b><a href="CppNew.htm">new</a></b> <a href="CppQPrintDialog.htm">QPrintDialog</a>(&amp;printer));<br/>
&nbsp;&nbsp;print_dialog-&gt;setWindowTitle(tr("Print document"));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (print_dialog-&gt;exec() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQDialog.htm">QDialog</a>::Accepted) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the image to painter to printer<br/>
&nbsp;&nbsp;<a href="CppQPainter.htm">QPainter</a> painter;<br/>
&nbsp;&nbsp;painter.begin(&amp;printer);<br/>
&nbsp;&nbsp;ui-&gt;scrollArea<a href="CppWidget.htm">Widget</a>Contents-&gt;render(&amp;painter);<br/>
&nbsp;&nbsp;painter.end();<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbprintratingdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbprintratingdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBPRINTRATINGDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBPRINTRATINGDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog;<br/>
}<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; file,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog();<br/>
<br/>
&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * GetTableConcepts();<br/>
&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * GetTableExamples();<br/>
&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * GetTableValues();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_print_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog *ui;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBPRINTRATINGDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbprintratingdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbprintratingdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbprintratingdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPrinter.htm">QPrinter</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPrintDialog.htm">QPrintDialog</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QScrollBar&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmaprate<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbprintratingdialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog::<a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt;&amp; file,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;ui-&gt;label_assessor_name-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("ASSESSOR: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> file-&gt;GetAssessorName()).c_str()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;ui-&gt;label_student_name-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppStdString.htm">std::string</a>("VAN: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> file-&gt;GetStudentName()).c_str()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTime_t.htm">std::time_t</a> my_<a href="CppTime.htm">time</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTime.htm">std::time</a>( &amp;my_<a href="CppTime.htm">time</a> );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdTm.htm">std::tm</a> * <b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">time</a>_and_date <a href="CppOperatorAssign.htm">=</a> <a href="CppStdLocaltime.htm">std::localtime</a>(&amp;my_<a href="CppTime.htm">time</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAsctime.htm">std::asctime</a>(<a href="CppTime.htm">time</a>_and_date);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_date-&gt;setText( (<a href="CppStdString.htm">std::string</a>("Datum: ") <a href="CppOperatorPlus.htm">+</a> s).c_str()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concept map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; copy_concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::DeepCopy(file-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;concept_map-&gt;ReadFromConceptMap(copy_concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;concept_map-&gt;setHorizontalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;concept_map-&gt;setVerticalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;concept_map-&gt;setMinimumHeight(ui-&gt;concept_map-&gt;scene()-&gt;itemsBoundingRect().height() <a href="CppOperatorPlus.htm">+</a> 2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concept map as text<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_nodes <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(file-&gt;GetConceptMap()-&gt;GetNodes().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> node_index <a href="CppOperatorAssign.htm">=</a> 1; node_index <a href="CppOperatorNotEqual.htm">!=</a> n_nodes; <a href="CppOperatorIncrement.htm">++</a>node_index) <a href="CppComment.htm">//</a>1: skip center node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; node <a href="CppOperatorAssign.htm">=</a> file-&gt;GetConceptMap()-&gt;GetNodes().at(node_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorPlusAssign.htm">+=</a> "Cluster bij concept: " <a href="CppOperatorPlus.htm">+</a> node-&gt;GetConcept()-&gt;GetName() <a href="CppOperatorPlus.htm">+</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorPlusAssign.htm">+=</a> "&nbsp;&nbsp;Complexiteit: " <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(node-&gt;GetConcept()-&gt;GetRatingComplexity()) <a href="CppOperatorPlus.htm">+</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorPlusAssign.htm">+=</a> "&nbsp;&nbsp;Concreetheid: " <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(node-&gt;GetConcept()-&gt;GetRatingConcreteness()) <a href="CppOperatorPlus.htm">+</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorPlusAssign.htm">+=</a> "&nbsp;&nbsp;Specificity: " <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(node-&gt;GetConcept()-&gt;GetRatingSpecificity()) <a href="CppOperatorPlus.htm">+</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorPlusAssign.htm">+=</a> "&nbsp;&nbsp;Voorbeelden/toelichting bij het concept:\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; example: node-&gt;GetConcept()-&gt;GetExamples()-&gt;Get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorPlusAssign.htm">+=</a> "&nbsp;&nbsp;&nbsp;&nbsp;" <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(example-&gt;GetCompetency())) <a href="CppOperatorPlus.htm">+</a> ". " <a href="CppOperatorPlus.htm">+</a> example-&gt;GetText() <a href="CppOperatorPlus.htm">+</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorPlusAssign.htm">+=</a> "&nbsp;&nbsp;Relaties van het cluster:\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; edge: file-&gt;GetConceptMap()-&gt;GetEdges())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edge-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> node_index <a href="CppOperatorLogicalOr.htm">||</a> edge-&gt;GetTo() <a href="CppOperatorEqual.htm">==</a> node_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> first_arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (&nbsp;&nbsp;(edge-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> node_index <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> edge-&gt;HasTailArrow())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (edge-&gt;GetTo()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> node_index <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> edge-&gt;HasHeadArrow())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? "&lt;<a href="CppOperatorMinus.htm">-</a> " : "<a href="CppOperatorDecrement.htm">--</a> ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> second_arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (&nbsp;&nbsp;(edge-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> node_index <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> edge-&gt;HasHeadArrow())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (edge-&gt;GetTo()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> node_index <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> edge-&gt;HasTailArrow())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? " <a href="CppOperatorMinus.htm">-</a>&gt; " : " <a href="CppOperatorDecrement.htm">--</a> ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorPlusAssign.htm">+=</a> "&nbsp;&nbsp;&nbsp;&nbsp;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> first_arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> edge-&gt;GetConcept()-&gt;GetName()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> second_arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> file-&gt;GetConceptMap()-&gt;GetNodes().at(edge-&gt;GetTo())-&gt;GetConcept()-&gt;GetName()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;concept_map_as_text-&gt;setPlainText(text.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;concept_map_as_text-&gt;setMinimumHeight(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;concept_map_as_text-&gt;document()-&gt;lineCount() * 14);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog::~<a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppQTableWidget.htm">QTableWidget</a> * <a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog::GetTableConcepts()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;table_concepts;<br/>
}<br/>
<br/>
<a href="CppQTableWidget.htm">QTableWidget</a> * <a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog::GetTableExamples()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;table_examples;<br/>
}<br/>
<br/>
<a href="CppQTableWidget.htm">QTableWidget</a> * <a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog::GetTableValues()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;table_values;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog::on_button_print_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPrinter.htm">QPrinter</a> printer;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> filename <a href="CppOperatorAssign.htm">=</a> "<a href="ProjectVanDenBogaart.htm">ProjectVanDenBogaart</a>.pdf";<br/>
&nbsp;&nbsp;printer.setOutputFormat(<a href="CppQPrinter.htm">QPrinter</a>::PdfFormat);<br/>
&nbsp;&nbsp;printer.setOrientation(<a href="CppQPrinter.htm">QPrinter</a>::Portrait);<br/>
&nbsp;&nbsp;printer.setPaperSize(<a href="CppQPrinter.htm">QPrinter</a>::A4);<br/>
&nbsp;&nbsp;printer.setFullPage(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;printer.setOutputFileName(filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start printer dialog<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPrintDialog.htm">QPrintDialog</a>&gt; print_dialog(<b><a href="CppNew.htm">new</a></b> <a href="CppQPrintDialog.htm">QPrintDialog</a>(&amp;printer));<br/>
&nbsp;&nbsp;print_dialog-&gt;setWindowTitle(tr("Print document"));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (print_dialog-&gt;exec() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQDialog.htm">QDialog</a>::Accepted) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ui-&gt;scrollArea-&gt;setMaximumWidth(printer.width());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ui-&gt;scrollArea-&gt;set<a href="CppWidget.htm">Widget</a>Resizable(<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the image to painter to printer<br/>
&nbsp;&nbsp;<a href="CppQPainter.htm">QPainter</a> painter;<br/>
&nbsp;&nbsp;painter.begin(&amp;printer);<br/>
&nbsp;&nbsp;ui-&gt;scrollArea<a href="CppWidget.htm">Widget</a>Contents-&gt;render(&amp;painter);<br/>
&nbsp;&nbsp;painter.end();<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbrateconceptdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbrateconceptdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBRATECONCEPTDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBRATECONCEPTDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptitem.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptDialog; }<br/>
<br/>
<a href="CppComment.htm">///</a>Rate the focal concept of a sub-ConceptMap.<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/concept is the center node<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/sub_concept_map[0] is the same as concept and might be changed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/sub_concept_map is non-<b><a href="CppConst.htm">const</a></b>, as GetRatedConcept will produce a <b><a href="CppNew.htm">new</a></b> concept<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; sub_concept_map,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbRateConceptDialog();<br/>
<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_ok_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbRateConceptDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The center concept, may be changed when the user clicks OK<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppComment.htm">/*</a> NO CONST <a href="CppComment.htm">*/</a> pvdb::Concept&gt; m_concept;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBRATECONCEPTDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbrateconceptdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbrateconceptdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmaprate<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplesfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbrateconceptdialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbRateConceptDialog::<a href="CppQt.htm">Qt</a>PvdbRateConceptDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; sub_concept_map,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbRateConceptDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept(sub_concept_map-&gt;GetNodes().at(0)-&gt;GetConcept())<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sub_concept_map);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!sub_concept_map-&gt;GetNodes().empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sub_concept_map-&gt;GetNodes()[0]);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;ReadFromConceptMap(sub_concept_map);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;box_complexity-&gt;setCurrentIndex(m_concept-&gt;GetRatingComplexity());<br/>
&nbsp;&nbsp;ui-&gt;box_concreteness-&gt;setCurrentIndex(m_concept-&gt;GetRatingConcreteness());<br/>
&nbsp;&nbsp;ui-&gt;box_specificity-&gt;setCurrentIndex(m_concept-&gt;GetRatingSpecificity());<br/>
<br/>
&nbsp;&nbsp;ui-&gt;box_complexity-&gt;setFocus();<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbRateConceptDialog::~<a href="CppQt.htm">Qt</a>PvdbRateConceptDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(e);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptDialog::on_button_ok_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change concept<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;box_complexity-&gt;currentIndex() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;box_complexity-&gt;currentIndex() <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
<br/>
&nbsp;&nbsp;m_concept-&gt;SetRatingComplexity(ui-&gt;box_complexity-&gt;currentIndex());<br/>
&nbsp;&nbsp;m_concept-&gt;SetRatingConcreteness(ui-&gt;box_concreteness-&gt;currentIndex());<br/>
&nbsp;&nbsp;m_concept-&gt;SetRatingSpecificity(ui-&gt;box_specificity-&gt;currentIndex());<br/>
&nbsp;&nbsp;close();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptDialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s().at(15);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept <a href="CppOperatorAssign.htm">=</a> concept_map-&gt;GetNodes().at(0)-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; old_concept <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::DeepCopy(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(old_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept <a href="CppOperatorEqual.htm">==</a> old_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRateConceptDialog d(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept-&gt;GetRatingComplexity() <a href="CppOperatorEqual.htm">==</a> d.ui-&gt;box_complexity-&gt;currentIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept-&gt;GetRatingConcreteness() <a href="CppOperatorEqual.htm">==</a> d.ui-&gt;box_concreteness-&gt;currentIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept-&gt;GetRatingSpecificity() <a href="CppOperatorEqual.htm">==</a> d.ui-&gt;box_specificity-&gt;currentIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change a box<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_complexity-&gt;setCurrentIndex( (d.ui-&gt;box_complexity-&gt;currentIndex() <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>But <b><a href="CppDo.htm">do</a></b> not click OK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept <a href="CppOperatorEqual.htm">==</a> old_concept <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Without clicking OK, <a href="CppQt.htm">Qt</a>PvdbRateConceptDialog must not change the concept");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s().at(15);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept <a href="CppOperatorAssign.htm">=</a> concept_map-&gt;GetNodes().at(0)-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; old_concept <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::DeepCopy(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(old_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept <a href="CppOperatorEqual.htm">==</a> old_concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRateConceptDialog d(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept-&gt;GetRatingComplexity()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> d.ui-&gt;box_complexity-&gt;currentIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept-&gt;GetRatingConcreteness() <a href="CppOperatorEqual.htm">==</a> d.ui-&gt;box_concreteness-&gt;currentIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept-&gt;GetRatingSpecificity()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> d.ui-&gt;box_specificity-&gt;currentIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change a box<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_complexity-&gt;setCurrentIndex( (d.ui-&gt;box_complexity-&gt;currentIndex() <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;button_ok-&gt;click();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept <a href="CppOperatorNotEqual.htm">!=</a> old_concept <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppQt.htm">Qt</a>PvdbRateConceptDialog must change the concept when clicked OK");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbrateconceptitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbrateconceptitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBRATECONCEPT_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBRATECONCEPT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a>PvdbRateConcept display a Concept that is (1) a node (2) is unmovable (3) has focus on<br/>
<a href="CppComment.htm">///</a>the concept AND its examples (4) has different colors depending on the concept being rated<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptItem : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptItem<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>concept will be modified<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptItem(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppQt.htm">Qt</a>PvdbRateConceptItem() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Key was pressed to indicate user wants to rate the concept<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<a href="CppQt.htm">Qt</a>PvdbConceptItem*)&gt; m_signal_request_rate_concept;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Key was pressed to indicate user wants to rate the concept<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<a href="CppQt.htm">Qt</a>PvdbConceptItem*)&gt; m_signal_request_rate_examples;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Update the brushes and pens<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateBrushesAndPens();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBRATECONCEPT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbrateconceptitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbrateconceptitem.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbbrushfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbRateConceptItem::<a href="CppQt.htm">Qt</a>PvdbRateConceptItem(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;: <a href="CppQt.htm">Qt</a>PvdbConceptItem(concept)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetConcept());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;UpdateBrushesAndPens();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>?FIX 2013-01-06 22:47<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_name_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem::OnConceptNameChanged,<b><a href="CppThis.htm">this</a></b>)); <a href="CppComment.htm">//</a>Obligatory<br/>
<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_examples_changed.connect( <a href="CppComment.htm">//</a>FIX 2013-01-06 22:32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_complexity_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_concreteness_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_specificity_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptItem::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_F1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_rate_concept(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_rate_examples(<b><a href="CppThis.htm">this</a></b>); <a href="CppComment.htm">//</a>Dialog will handle empty examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>; <a href="CppComment.htm">//</a>Always <b><a href="CppReturn.htm">return</a></b>, otherwise F2 in <a href="CppQt.htm">Qt</a>PvdbNodeConcept will cause an edit<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptItem::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbRateConceptItem::Test started");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check brush comparison<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateRedGradientBrush() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateYellowGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateRedGradientBrush() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGreenGradientBrush());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> the correct brushes are used when rating the concept<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::GetTests().at(4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingComplexity(-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingConcreteness(-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingSpecificity(-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem item(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item.brush() <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateRedGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingComplexity(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingConcreteness(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item.brush() <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateYellowGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingSpecificity(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item.brush() <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGreenGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check that <b><a href="CppIf.htm">if</a></b> the examples are changed, the brushes changed<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbRateConceptItem::Test finished successfully");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptItem::UpdateBrushesAndPens()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Brush <b><a href="CppFor.htm">for</a></b> the concept being rated<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (GetConcept()-&gt;GetRatingComplexity()&nbsp;&nbsp; <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (GetConcept()-&gt;GetRatingConcreteness() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (GetConcept()-&gt;GetRatingSpecificity()&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1 ? 1 : 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (n_rated)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetMainBrush(<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateRedGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetMainBrush(<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateYellowGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetMainBrush(<a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGreenGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Brush and pen <b><a href="CppFor.htm">for</a></b> the examples being rated<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetConcept()-&gt;GetExamples()-&gt;Get().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorBrush(<a href="CppQBrush.htm">QBrush</a>(<a href="CppQColor.htm">QColor</a>(0,0,0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,0)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(GetConcept()-&gt;GetExamples()-&gt;Get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_examples <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_judged<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency <b><a href="CppThis.htm">this</a></b>_competency <a href="CppOperatorAssign.htm">=</a> p-&gt;GetCompetency();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>_competency <a href="CppOperatorNotEqual.htm">!=</a> pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_judged <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorBrush(<a href="CppQBrush.htm">QBrush</a>(<a href="CppQColor.htm">QColor</a>(255,128,128)&nbsp;&nbsp;)); <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorPen(&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a>(&nbsp;&nbsp;<a href="CppQColor.htm">QColor</a>(255,&nbsp;&nbsp;0,&nbsp;&nbsp;0),3)); <a href="CppComment.htm">//</a>Thick pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (n_judged &lt; n_examples)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorBrush(<a href="CppQBrush.htm">QBrush</a>(<a href="CppQColor.htm">QColor</a>(255,196,128)&nbsp;&nbsp;)); <a href="CppComment.htm">//</a>Orange<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorPen(&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a>(&nbsp;&nbsp;<a href="CppQColor.htm">QColor</a>(255,196,&nbsp;&nbsp;0),2)); <a href="CppComment.htm">//</a>Less thick pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_judged <a href="CppOperatorEqual.htm">==</a> n_examples);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorBrush(<a href="CppQBrush.htm">QBrush</a>(<a href="CppQColor.htm">QColor</a>(128,255,128)&nbsp;&nbsp;)); <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIndicatorPen(&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a>(&nbsp;&nbsp;<a href="CppQColor.htm">QColor</a>(&nbsp;&nbsp;0,255,&nbsp;&nbsp;0),1)); <a href="CppComment.htm">//</a>Thin pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;update(); <a href="CppComment.htm">//</a>FIX 2013-01-17<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;m_signal_item_has_updated(<b><a href="CppThis.htm">this</a></b>); <a href="CppComment.htm">//</a>FIX 2013-01-17<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;m_signal_request_scene_update(); <a href="CppComment.htm">//</a>FIX 2013-01-17<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbrateconceptmapdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbrateconceptmapdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBRATECONCEPTMAPDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBRATECONCEPTMAPDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog;<br/>
}<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog();<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a> * Get<a href="CppWidget.htm">Widget</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to key press<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Save();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_next_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_save_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog *ui;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; m_file;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBRATECONCEPTMAPDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbrateconceptmapdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbrateconceptmapdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptmapdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfilefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtScopedDisable.htm">qtscopeddisable</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmaprate<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbratingdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbrateconceptmapdialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog::<a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog(<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog),<br/>
&nbsp;&nbsp;m_file(file)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map <a href="CppOperatorAssign.htm">=</a> m_file-&gt;GetConceptMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;ReadFromConceptMap(concept_map);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("Naam student: ") <a href="CppOperatorPlus.htm">+</a> m_file-&gt;GetStudentName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_name-&gt;setText(s.c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Center the dialog<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(screen.adjusted(64,64,-64,-64));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog::~<a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a> * <a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog::Get<a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui); <a href="CppAssert.htm">assert</a>(ui-&gt;<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;<a href="CppWidget.htm">widget</a>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((e-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ControlModifier) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> e-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_S) { Save(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(e);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog::on_button_next_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;m_file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRatingDialog d(m_file);<br/>
&nbsp;&nbsp;ShowChild(&amp;d);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d.GetBackToMenu())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;close();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog::Test started");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::FileFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; old_concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::DeepCopy(file-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;old_concept_map,d.Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog::Test finished successfully");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog::Save()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide(); <a href="CppComment.htm">//</a>Obligatory, otherwise program will freeze<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filter_str <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("*.") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_raw <a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getSaveFileName(0,"Sla de beoordeling op",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filter_str.c_str()).toStdString();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename_raw.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;(filename_raw.size() &lt; pvdb::File::GetFilenameExtension().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> filename_raw.substr( filename_raw.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorNotEqual.htm">!=</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ? filename_raw <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(".") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : filename_raw);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Save(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;close();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog::Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map <a href="CppOperatorAssign.htm">=</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;m_file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file-&gt;GetConceptMap() <a href="CppOperatorEqual.htm">==</a> Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap());<br/>
&nbsp;&nbsp;m_file-&gt;Save(filename);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptMapDialog::on_button_save_clicked()<br/>
{<br/>
&nbsp;&nbsp;Save();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbrateexamplesdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbrateexamplesdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBRATEEXAMPLESDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBRATEEXAMPLESDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Allows the user to rate the examples of a concept<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept, <a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_prof_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_organisations_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_social_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_target_audience_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_prof_development_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_misc_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_ti_knowledge_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_ok_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The concept, which is modified when clicking OK, but remains unmodified when<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the user clicks cancel<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; m_concept;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the rated examples<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; GetRatedExamples() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBRATEEXAMPLESDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbrateexamplesdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbrateexamplesdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateexamplesdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;pvdbexamplefactory.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;pvdbexamplesfactory.h&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbrateexamplesdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item : <b><a href="CppPublic.htm">public</a></b> <a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; example)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setText(example-&gt;GetText().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setIcon(pvdb::<a href="CppQt.htm">Qt</a>Competency::CompetencyToIcon(example-&gt;GetCompetency()));<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::<a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept(concept)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept-&gt;GetExamples());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> the Concept to GUI elements<br/>
&nbsp;&nbsp;ui-&gt;label_concept_name-&gt;setText(concept-&gt;GetName().c_str());<br/>
&nbsp;&nbsp;ui-&gt;list-&gt;clear();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> concept-&gt;GetExamples()-&gt;Get();<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt;&amp; example)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item * <b><a href="CppConst.htm">const</a></b> item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item(example);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;list-&gt;addItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Align the button icons and texts to the left<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQPushButton.htm">QPushButton</a>*&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_misc,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_organisations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_prof,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_prof_development,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_social,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_target_audience,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_ti_knowledge<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<a href="CppQPushButton.htm">QPushButton</a>* button: v) button-&gt;setStyleSheet("text-align: left;");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::~<a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::GetRatedExamples() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> ui-&gt;list-&gt;count();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQList.htm">QList</a><a href="CppWidget.htm">Widget</a>Item* <b><a href="CppConst.htm">const</a></b> qtitem <a href="CppOperatorAssign.htm">=</a> ui-&gt;list-&gt;item(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtitem);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item* <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item*&gt;(qtitem);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt; example<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::ExampleFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;text().toStdString(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::<a href="CppQt.htm">Qt</a>Competency::IconToCompetency(item-&gt;icon())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(example);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pvdb::ExamplesFactory::Create(v);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(examples);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> examples;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(e);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::Test started");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test conversion between reading and writing a concept<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptFactory::GetTests().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog(pvdb::ConceptFactory::GetTests()[i]).GetRatedExamples();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog(pvdb::ConceptFactory::GetTests()[j]).GetRatedExamples();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorNotEqual.htm">!=</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::Test finished successfully");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::on_button_prof_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;list-&gt;currentItem())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item* <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item*&gt;(ui-&gt;list-&gt;currentItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setIcon(pvdb::<a href="CppQt.htm">Qt</a>Competency::CompetencyToIcon(pvdb::Competency::profession));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::on_button_organisations_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;list-&gt;currentItem())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item* <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item*&gt;(ui-&gt;list-&gt;currentItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setIcon(pvdb::<a href="CppQt.htm">Qt</a>Competency::CompetencyToIcon(pvdb::Competency::organisations));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::on_button_social_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;list-&gt;currentItem())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item* <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item*&gt;(ui-&gt;list-&gt;currentItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setIcon(pvdb::<a href="CppQt.htm">Qt</a>Competency::CompetencyToIcon(pvdb::Competency::social_surroundings));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::on_button_target_audience_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;list-&gt;currentItem())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item* <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item*&gt;(ui-&gt;list-&gt;currentItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setIcon(pvdb::<a href="CppQt.htm">Qt</a>Competency::CompetencyToIcon(pvdb::Competency::target_audience));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::on_button_prof_development_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;list-&gt;currentItem())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item* <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item*&gt;(ui-&gt;list-&gt;currentItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setIcon(pvdb::<a href="CppQt.htm">Qt</a>Competency::CompetencyToIcon(pvdb::Competency::prof_growth));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::on_button_misc_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;list-&gt;currentItem())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item* <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item*&gt;(ui-&gt;list-&gt;currentItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setIcon(pvdb::<a href="CppQt.htm">Qt</a>Competency::CompetencyToIcon(pvdb::Competency::misc));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::on_button_ti_knowledge_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;list-&gt;currentItem())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item* <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbList<a href="CppWidget.htm">Widget</a>Item*&gt;(ui-&gt;list-&gt;currentItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setIcon(pvdb::<a href="CppQt.htm">Qt</a>Competency::CompetencyToIcon(pvdb::Competency::ti_knowledge));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRateExamplesDialog::on_button_ok_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; p <a href="CppOperatorAssign.htm">=</a> GetRatedExamples();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept);<br/>
&nbsp;&nbsp;m_concept-&gt;SetExamples(p);<br/>
&nbsp;&nbsp;close();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbratingdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbratingdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBRATINGDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBRATINGDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbRatingDialog; }<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbRatingDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbRatingDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file, <a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbRatingDialog();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> GetBackToMenu() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_back_to_menu; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_save_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_print_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_edit_name_textEdited(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbRatingDialog *ui;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_back_to_menu;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; m_file;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> DisplayConcepts(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt; file,<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> DisplayExamples(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt; file,<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> DisplayValues(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt; file,<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table);<br/>
<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBRATINGDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbratingdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbratingdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbratingdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPrinter.htm">QPrinter</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPrintDialog.htm">QPrintDialog</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmap<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbprintratingdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapedit<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbratingdialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbRatingDialog::<a href="CppQt.htm">Qt</a>PvdbRatingDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbRatingDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_back_to_menu(<b><a href="CppFalse.htm">false</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_file(file)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Student name<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "Naam student: " <a href="CppOperatorPlus.htm">+</a> file-&gt;GetStudentName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_student_name-&gt;setText(s.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assessor name<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_assessor_name-&gt;setText("Naam assessor: ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!file-&gt;GetAssessorName().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_name-&gt;setText(file-&gt;GetAssessorName().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_name-&gt;setReadOnly(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_print-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_print-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DisplayConcepts(file,ui-&gt;table_concepts);<br/>
&nbsp;&nbsp;DisplayExamples(file,ui-&gt;table_examples);<br/>
&nbsp;&nbsp;DisplayValues(file,ui-&gt;table_values);<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbRatingDialog::~<a href="CppQt.htm">Qt</a>PvdbRatingDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRatingDialog::DisplayConcepts(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt; file,<br/>
&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(file-&gt;GetConceptMap()-&gt;GetNodes().size());<br/>
&nbsp;&nbsp;table-&gt;setRowCount(sz <a href="CppOperatorMinus.htm">-</a> 1); <a href="CppComment.htm">//</a>-1 to skip focus <a href="CppQuestion.htm">question</a> node at index 0<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> i-1; <a href="CppComment.htm">//</a>-1 to skip focus <a href="CppQuestion.htm">question</a> node at index 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; concept <a href="CppOperatorAssign.htm">=</a> file-&gt;GetConceptMap()-&gt;GetNodes().at(i)-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(concept-&gt;GetName().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(row,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Rating complexity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(<a href="CppQString.htm">QString</a>::number(concept-&gt;GetRatingComplexity()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setFlags(<a href="CppQt.htm">Qt</a>::ItemIsSelectable | <a href="CppQt.htm">Qt</a>::ItemIsEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(row,0,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Rating concreteness<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(<a href="CppQString.htm">QString</a>::number(concept-&gt;GetRatingConcreteness()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setFlags(<a href="CppQt.htm">Qt</a>::ItemIsSelectable | <a href="CppQt.htm">Qt</a>::ItemIsEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(row,1,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Rating specificity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(<a href="CppQString.htm">QString</a>::number(concept-&gt;GetRatingSpecificity()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setFlags(<a href="CppQt.htm">Qt</a>::ItemIsSelectable | <a href="CppQt.htm">Qt</a>::ItemIsEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(row,2,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;setMinimumWidth(300);<br/>
&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;setMaximumWidth(300);<br/>
&nbsp;&nbsp;table-&gt;setColumnWidth(0,100);<br/>
&nbsp;&nbsp;table-&gt;setColumnWidth(1,100);<br/>
&nbsp;&nbsp;table-&gt;setColumnWidth(2,100);<br/>
&nbsp;&nbsp;table-&gt;setMaximumWidth(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;width()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> table-&gt;columnWidth(0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> table-&gt;columnWidth(1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> table-&gt;columnWidth(2)<br/>
&nbsp;&nbsp;);<br/>
<br/>
<br/>
<br/>
}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Examples' icons<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRatingDialog::DisplayExamples(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt; file,<br/>
&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table)<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> table-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;pvdb::Competency&gt;(i <a href="CppOperatorPlus.htm">+</a> 1); <a href="CppComment.htm">//</a>Skip 0 <a href="CppOperatorEqual.htm">==</a> un<a href="CppInitialize.htm">initialize</a>d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> pvdb::CompetencyToDutchStr(competency);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQIcon.htm">QIcon</a> icon <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppQt.htm">Qt</a>Competency::CompetencyToIcon(competency);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setIcon(icon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(i,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Examples' competencies<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;pvdb::Competency,<b><a href="CppInt.htm">int</a></b>&gt; cnts;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; node: <a href="CppAdd.htm">Add</a>Const(file-&gt;GetConceptMap()-&gt;GetNodes()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; example: node-&gt;GetConcept()-&gt;GetExamples()-&gt;Get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> cnts.find(example-&gt;GetCompetency());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (iter <a href="CppOperatorNotEqual.htm">!=</a> cnts.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>(*iter).second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency <a href="CppOperatorAssign.htm">=</a> example-&gt;GetCompetency();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cnts.insert(<a href="CppStdMake_pair.htm">std::make_pair</a>(competency,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sum <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAccumulate.htm">std::accumulate</a>(cnts.begin(),cnts.end(),0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppInt.htm">int</a></b>&amp; init,<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;pvdb::Competency,<b><a href="CppInt.htm">int</a></b>&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init <a href="CppOperatorPlusAssign.htm">+=</a> p.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sum <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;pvdb::Competency,<b><a href="CppInt.htm">int</a></b>&gt;&amp; p: cnts)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(p.first) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (row <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1) <b><a href="CppContinue.htm">continue</a></b>; <a href="CppComment.htm">//</a>0 <a href="CppOperatorEqual.htm">==</a> un<a href="CppInitialize.htm">initialize</a>d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; table-&gt;rowCount());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(p.second) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sum);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> percentage <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStd.htm">std</a>::round(100.0 * f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(percentage);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setFlags(<a href="CppQt.htm">Qt</a>::ItemIsSelectable | <a href="CppQt.htm">Qt</a>::ItemIsEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(row,col,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRatingDialog::DisplayValues(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::File&gt; file,<br/>
&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; &gt; all_nodes <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(file-&gt;GetConceptMap()-&gt;GetNodes());<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> all_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(all_nodes.size());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;all_nodes.erase(all_nodes.begin());<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(all_nodes.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> all_sz <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt; &gt; nodes <a href="CppOperatorAssign.htm">=</a> all_nodes;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_nodes <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(nodes.size());&nbsp;&nbsp;<a href="CppComment.htm">//</a>Constant 'c'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concreteness experimental: C_e at row <a href="CppOperatorAssign.htm">=</a> 1, col <a href="CppOperatorAssign.htm">=</a> 0<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>50.0 * sum_rated_concreteness <a href="CppOperatorDivide.htm">/</a> n_nodes<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sum_rated_concreteness <a href="CppComment.htm">//</a>Constant 'k_c'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdAccumulate.htm">std::accumulate</a>(nodes.begin(),nodes.end(),0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppInt.htm">int</a></b>&amp; init, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> node-&gt;GetConcept()-&gt;GetRatingConcreteness();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> "N/A";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_nodes <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> c_e<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::round(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 50.0 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sum_rated_concreteness)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_nodes)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(c_e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setFlags(<a href="CppQt.htm">Qt</a>::ItemIsSelectable | <a href="CppQt.htm">Qt</a>::ItemIsEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(1,0,item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concreteness eStimated: C_s at row <a href="CppOperatorAssign.htm">=</a> 1, col <a href="CppOperatorAssign.htm">=</a> 1<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>C_s <a href="CppOperatorAssign.htm">=</a> 100.0 * n_examples <a href="CppOperatorDivide.htm">/</a> (n_examples <a href="CppOperatorPlus.htm">+</a> n_nodes <a href="CppOperatorPlus.htm">+</a> n_relations_not_to_focus)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; &gt; edges <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(file-&gt;GetConceptMap()-&gt;GetEdges());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_nodes_examples <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAccumulate.htm">std::accumulate</a>(nodes.begin(),nodes.end(),0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppInt.htm">int</a></b>&amp; init, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(node-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_edges_examples <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAccumulate.htm">std::accumulate</a>(edges.begin(),edges.end(),0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppInt.htm">int</a></b>&amp; init, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(edge-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_relations_not_to_focus <a href="CppComment.htm">//</a>Constant 'r'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdCount_if.htm">std::count_if</a>(edges.begin(),edges.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> edge-&gt;GetFrom() <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> edge-&gt;GetTo() <a href="CppOperatorNotEqual.htm">!=</a> 0; <a href="CppComment.htm">//</a>Not connected to focus <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_examples <a href="CppComment.htm">//</a>Constant 'v'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> n_nodes_examples <a href="CppOperatorPlus.htm">+</a> n_edges_examples;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> "N/A";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_examples <a href="CppOperatorPlus.htm">+</a> n_nodes <a href="CppOperatorPlus.htm">+</a> n_relations_not_to_focus <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c_s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::round(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;100.0 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_examples)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_examples <a href="CppOperatorPlus.htm">+</a> n_nodes <a href="CppOperatorPlus.htm">+</a> n_relations_not_to_focus)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(c_s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setFlags(<a href="CppQt.htm">Qt</a>::ItemIsSelectable | <a href="CppQt.htm">Qt</a>::ItemIsEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(1,1,item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Complexity experimental value: X_e at row <a href="CppOperatorAssign.htm">=</a> 0, col <a href="CppOperatorAssign.htm">=</a> 0<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>50.0 * sum_rated_complexity <a href="CppOperatorDivide.htm">/</a> n_nodes<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sum_rated_complexity <a href="CppComment.htm">//</a>Constant 'k_i'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdAccumulate.htm">std::accumulate</a>(nodes.begin(),nodes.end(),0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppInt.htm">int</a></b>&amp; init, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> node-&gt;GetConcept()-&gt;GetRatingComplexity();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> "N/A";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_nodes <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_e<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::round(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 50.0 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sum_rated_complexity)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_nodes)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(x_e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setFlags(<a href="CppQt.htm">Qt</a>::ItemIsSelectable | <a href="CppQt.htm">Qt</a>::ItemIsEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(0,0,item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>compleXity eStimated: X_s at row <a href="CppOperatorAssign.htm">=</a> 0, col <a href="CppOperatorAssign.htm">=</a> 1<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>x_s <a href="CppOperatorAssign.htm">=</a> ((2*n_relations_not_to_focus)/(n_nodes*(n_nodes-1))))^0.25*100%<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt; &gt; edges <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(file-&gt;GetConceptMap()-&gt;GetEdges());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_relations_not_to_focus <a href="CppComment.htm">//</a>Constant 'r'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdCount_if.htm">std::count_if</a>(edges.begin(),edges.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Edge&gt;&amp; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> edge-&gt;GetFrom() <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> edge-&gt;GetTo() <a href="CppOperatorNotEqual.htm">!=</a> 0; <a href="CppComment.htm">//</a>Not connected to focus <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> "N/A";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_nodes &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::round(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;100.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* <a href="CppStdPow.htm">std::pow</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_relations_not_to_focus * 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_nodes * (n_nodes <a href="CppOperatorMinus.htm">-</a> 1) ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.25)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(x_s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setFlags(<a href="CppQt.htm">Qt</a>::ItemIsSelectable | <a href="CppQt.htm">Qt</a>::ItemIsEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(0,1,item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Experimental specificity: s_e at row <a href="CppOperatorAssign.htm">=</a> 2, col <a href="CppOperatorAssign.htm">=</a> 0<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>s_e <a href="CppOperatorAssign.htm">=</a> 50.0 * sum_rated_specificity <a href="CppOperatorDivide.htm">/</a> n_nodes<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sum_rated_specificity <a href="CppComment.htm">//</a>Constant 'k_s'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdAccumulate.htm">std::accumulate</a>(nodes.begin(),nodes.end(),0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppInt.htm">int</a></b>&amp; init, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> node-&gt;GetConcept()-&gt;GetRatingSpecificity();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> "N/A";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_nodes <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> s_e<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::round(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(50 * sum_rated_specificity)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_nodes)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(s_e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setFlags(<a href="CppQt.htm">Qt</a>::ItemIsSelectable | <a href="CppQt.htm">Qt</a>::ItemIsEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(2,0,item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Richness Experimental: r_e at row <a href="CppOperatorAssign.htm">=</a> 3, col <a href="CppOperatorAssign.htm">=</a> 0<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>r_e <a href="CppOperatorAssign.htm">=</a> ((a <a href="CppOperatorPlus.htm">+</a> b) <a href="CppOperatorDivide.htm">/</a> 14) * 100%<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>a <a href="CppOperatorAssign.htm">=</a> number of different Competencies<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>b <a href="CppOperatorAssign.htm">=</a> number of Competencies between 1/12th and 1/4th of number of examples<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;pvdb::Competency,<b><a href="CppInt.htm">int</a></b>&gt; m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Tally the competencies<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Node&gt;&amp; node: nodes)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Example&gt; example: node-&gt;GetConcept()-&gt;GetExamples()-&gt;Get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency competency <a href="CppOperatorAssign.htm">=</a> example-&gt;GetCompetency();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> m.find(competency);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (iter <a href="CppOperatorNotEqual.htm">!=</a> m.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>(*iter).second; <a href="CppComment.htm">//</a>Tally the known competency<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.insert(<a href="CppStdMake_pair.htm">std::make_pair</a>(competency,1)); <a href="CppComment.htm">//</a>Tally the first of <b><a href="CppThis.htm">this</a></b> competency<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove category 'misc'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppDebug.htm">debug</a>_m_size_old <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppDebug.htm">debug</a>_will_resize <a href="CppOperatorAssign.htm">=</a> m.count(pvdb::Competency::misc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.erase(pvdb::Competency::misc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppDebug.htm">debug</a>_m_size_new <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( ( <a href="CppDebug.htm">debug</a>_will_resize <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppDebug.htm">debug</a>_m_size_old <a href="CppOperatorEqual.htm">==</a> <a href="CppDebug.htm">debug</a>_m_size_new <a href="CppOperatorPlus.htm">+</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> (!<a href="CppDebug.htm">debug</a>_will_resize <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppDebug.htm">debug</a>_m_size_old <a href="CppOperatorEqual.htm">==</a> <a href="CppDebug.htm">debug</a>_m_size_new&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_examples <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAccumulate.htm">std::accumulate</a>(m.begin(),m.end(),0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppInt.htm">int</a></b>&amp; init,<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;pvdb::Competency,<b><a href="CppInt.htm">int</a></b>&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> p.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> my_min <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStdCeil.htm">std::ceil</a>( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_examples) <a href="CppOperatorDivide.htm">/</a> 12.0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> my_max <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStdFloor.htm">std::floor</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_examples) <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;4.0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b <a href="CppOperatorAssign.htm">=</a> <a href="CppStdCount_if.htm">std::count_if</a>(m.begin(),m.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[my_min,my_max](<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;pvdb::Competency,<b><a href="CppInt.htm">int</a></b>&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p.second <a href="CppOperatorGreaterEqual.htm">&gt;=</a> my_min <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> p.second <a href="CppOperatorLessEqual.htm">&lt;=</a> my_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> r_e<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::round(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;100.0 * ( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(a+b) <a href="CppOperatorDivide.htm">/</a> 12.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(r_e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setFlags(<a href="CppQt.htm">Qt</a>::ItemIsSelectable | <a href="CppQt.htm">Qt</a>::ItemIsEnabled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(3,0,item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;setMaximumWidth(100);<br/>
&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;setMinimumWidth(100);<br/>
&nbsp;&nbsp;table-&gt;setColumnWidth(0,200);<br/>
&nbsp;&nbsp;table-&gt;setColumnWidth(1,200);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;verticalHeader()-&gt;width() <a href="CppOperatorEqual.htm">==</a> 100);<br/>
&nbsp;&nbsp;table-&gt;setMaximumWidth(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;width()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> table-&gt;columnWidth(0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> table-&gt;columnWidth(1)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRatingDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRatingDialog::on_button_save_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Temporarily disable to <a href="CppWidget.htm">widget</a>, otherwise saving cannot succeed<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filter_str <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("*.") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_raw <a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getSaveFileName(0,"Sla het assessment rapport op",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filter_str.c_str()).toStdString();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename_raw.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;(filename_raw.size() &lt; pvdb::File::GetFilenameExtension().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> filename_raw.substr( filename_raw.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorNotEqual.htm">!=</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ? filename_raw <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(".") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : filename_raw);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Save(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_back_to_menu <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;close();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRatingDialog::Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
<br/>
&nbsp;&nbsp;m_file-&gt;Save(filename);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>{ <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppDebug.htm">debug</a>_str <a href="CppOperatorAssign.htm">=</a> "File saved as " <a href="CppOperatorPlus.htm">+</a> filename; <a href="CppTRACE.htm">TRACE</a>(<a href="CppDebug.htm">debug</a>_str); }<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRatingDialog::on_button_print_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> PVDB_SHOW_WHAT_TO_PRINT_7212367586280756<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a>&nbsp;&nbsp;PVDB_SHOW_WHAT_TO_PRINT_7212367586280756<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog d(<b><a href="CppThis.htm">this</a></b>-&gt;m_file);<br/>
<br/>
&nbsp;&nbsp;DisplayConcepts(m_file,d.GetTableConcepts());<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_file-&gt;GetConceptMap()-&gt;GetNodes().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.GetTableConcepts()-&gt;setMinimumHeight( ((sz-1) * 30) <a href="CppOperatorPlus.htm">+</a> 25 ); <a href="CppComment.htm">//</a>Standard row is 30 pixels high, header 25 pixels<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DisplayExamples(m_file,d.GetTableExamples());<br/>
&nbsp;&nbsp;DisplayValues(m_file,d.GetTableValues());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set up a <a href="CppQPrinter.htm">QPrinter</a><br/>
&nbsp;&nbsp;<a href="CppQPrinter.htm">QPrinter</a> printer;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> filename <a href="CppOperatorAssign.htm">=</a> "<a href="ProjectVanDenBogaart.htm">ProjectVanDenBogaart</a>.pdf";<br/>
&nbsp;&nbsp;printer.setOutputFormat(<a href="CppQPrinter.htm">QPrinter</a>::PdfFormat);<br/>
&nbsp;&nbsp;printer.setOrientation(<a href="CppQPrinter.htm">QPrinter</a>::Portrait);<br/>
&nbsp;&nbsp;printer.setPaperSize(<a href="CppQPrinter.htm">QPrinter</a>::A4);<br/>
&nbsp;&nbsp;printer.setFullPage(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;printer.setOutputFileName(filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start printer dialog<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPrintDialog.htm">QPrintDialog</a>&gt; print_dialog(<b><a href="CppNew.htm">new</a></b> <a href="CppQPrintDialog.htm">QPrintDialog</a>(&amp;printer));<br/>
&nbsp;&nbsp;print_dialog-&gt;setWindowTitle(tr("Print document"));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (print_dialog-&gt;exec() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQDialog.htm">QDialog</a>::Accepted) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the image to painter to printer<br/>
&nbsp;&nbsp;<a href="CppQPainter.htm">QPainter</a> painter;<br/>
&nbsp;&nbsp;painter.begin(&amp;printer);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbPrintRatingDialog d(<b><a href="CppThis.htm">this</a></b>-&gt;m_file);<br/>
&nbsp;&nbsp;d.render(&amp;painter);<br/>
&nbsp;&nbsp;painter.end();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbRatingDialog::on_edit_name_textEdited(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (arg1.size() &gt; 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;SetAssessorName(arg1.toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_print-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_print-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbstudentmenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbstudentmenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBSTUDENTMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBSTUDENTMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog; }<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file, <a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the student his/her name<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Save to file<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the student his/her name<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_about_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_quit_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_edit_name_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_save_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog *ui;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; m_file;<br/>
<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBSTUDENTMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbstudentmenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbstudentmenudialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbstudentmenudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "pvdbmenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="CppAbout.htm">about</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbstudentstartcompletedialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbstudentmenudialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog::<a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file, <a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_file(file)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_file-&gt;GetStudentName().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetName(m_file-&gt;GetStudentName());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;on_edit_name_textChanged(ui-&gt;edit_name-&gt;text());<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog::~<a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog::GetName() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;edit_name-&gt;text().toStdString();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((e-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ControlModifier) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> e-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_S) { on_button_save_clicked(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(e);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog::on_button_about_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d(<a href="CppQt.htm">Qt</a>Pvdb<a href="CppAbout.htm">About</a>Dialog::Get());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide();<br/>
&nbsp;&nbsp;d-&gt;exec();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog::on_button_quit_clicked()<br/>
{<br/>
&nbsp;&nbsp;close();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog::on_button_start_clicked()<br/>
{<br/>
&nbsp;&nbsp;m_file-&gt;SetStudentName(ui-&gt;edit_name-&gt;text().toStdString());<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog d(m_file);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog::on_edit_name_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Enable start button when student has entered at least two <a href="CppChar.htm">character</a>s<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;edit_name-&gt;text() <a href="CppOperatorEqual.htm">==</a> arg1);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (arg1.size() &gt; 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_start-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_start-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog::on_button_save_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filter_str <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("*.") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_raw <a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getSaveFileName(0,"Sla de concept map op",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filter_str.c_str()).toStdString();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename_raw.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;(filename_raw.size() &lt; pvdb::File::GetFilenameExtension().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> filename_raw.substr( filename_raw.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorNotEqual.htm">!=</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ? filename_raw <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(".") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : filename_raw);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Save(filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog::Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;m_file-&gt;SetStudentName(ui-&gt;edit_name-&gt;text().toStdString());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
&nbsp;&nbsp;m_file-&gt;Save(filename);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>{ <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppDebug.htm">debug</a>_str <a href="CppOperatorAssign.htm">=</a> "File saved as " <a href="CppOperatorPlus.htm">+</a> filename; <a href="CppTRACE.htm">TRACE</a>(<a href="CppDebug.htm">debug</a>_str); }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentMenuDialog::SetName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;edit_name-&gt;setText(name.c_str());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbstudentstartcompletedialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbstudentstartcompletedialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBSTUDENTSTARTCOMPLETEDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBSTUDENTSTARTCOMPLETEDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog; }<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file, <a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the user need to go back to the student menu?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> GoBackToMenu() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_back_to_menu; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_associate_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_<a href="CppConstructor.htm">construct</a>_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the dialog want to go back to the student menu?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_back_to_menu;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; m_file;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Save to file<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Save();<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBSTUDENTSTARTCOMPLETEDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbstudentstartcompletedialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbstudentstartcompletedialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbstudentstartcompletedialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbclusterfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "pvdbmenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbclusterdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbcreateassessmentmenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbstudentstartcompletedialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog::<a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>* parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_back_to_menu(<b><a href="CppFalse.htm">false</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_file(file)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsEqual(*file,*m_file));<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog::~<a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((e-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ControlModifier) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> e-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_S) { Save(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(e);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog::on_button_start_associate_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_file);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbClusterDialog d(m_file);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d.GoBackToMenu())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_back_to_menu <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;close();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog::on_button_start_<a href="CppConstructor.htm">construct</a>_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d(m_file);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d.GoBackToMenu())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_back_to_menu <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;close();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbStudentStartCompleteDialog::Save()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filter_str <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>("*.") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_raw <a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getSaveFileName(0,"Sla de concept map op",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filter_str.c_str()).toStdString();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename_raw.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;(filename_raw.size() &lt; pvdb::File::GetFilenameExtension().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> filename_raw.substr( filename_raw.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorNotEqual.htm">!=</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ? filename_raw <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(".") <a href="CppOperatorPlus.htm">+</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : filename_raw);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename.size() &gt; 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> filename.substr( filename.size() <a href="CppOperatorMinus.htm">-</a> 3, 3 ) <a href="CppOperatorEqual.htm">==</a> pvdb::File::GetFilenameExtension()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must have correct file extension name");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;Save(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppDebug.htm">debug</a>_str <a href="CppOperatorAssign.htm">=</a> "File saved as " <a href="CppOperatorPlus.htm">+</a> filename; <a href="CppTRACE.htm">TRACE</a>(<a href="CppDebug.htm">debug</a>_str); }<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbtestconceptitemdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbtestconceptitemdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBTESTCONCEPTITEMDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBTESTCONCEPTITEMDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbeditconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptitem.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog; }<br/>
<br/>
<a href="CppComment.htm">///</a>Tests all <a href="CppQt.htm">Qt</a>PvdbConceptItem items, especially the connection between the <a href="CppPointer.htm">pointer</a> and its displayal items:<br/>
<a href="CppComment.htm">///</a>If something via the <a href="CppPointer.htm">pointer</a> is changed, <b><a href="CppThis.htm">this</a></b> must be displayed directly<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event);<br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_competency_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_edit_name_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_complexity_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_concreteness_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_specificity_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_edit_example_text_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog *ui;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; m_concept;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem* m_display_concept;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbEditConceptItem* m_edit_concept;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem* m_rate_concept;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Concept via the route chosen by box_edit<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; GetChosenConcept();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBTESTCONCEPTITEMDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbtestconceptitemdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbtestconceptitemdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbtestconceptitemdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbeditconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbbrushfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbtestconceptitemdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::<a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog),<br/>
&nbsp;&nbsp;m_concept(pvdb::ConceptFactory::GetTests().at(1)),<br/>
&nbsp;&nbsp;m_display_concept(<b><a href="CppNullptr.htm">nullptr</a></b>),<br/>
&nbsp;&nbsp;m_edit_concept(<b><a href="CppNullptr.htm">nullptr</a></b>),<br/>
&nbsp;&nbsp;m_rate_concept(<b><a href="CppNullptr.htm">nullptr</a></b>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;view-&gt;scene());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Node is used in: m_node<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept.use_count() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
<br/>
&nbsp;&nbsp;m_display_concept <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem(m_concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_display_concept);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Node is used in: m_node and <a href="CppQt.htm">Qt</a>PvdbNodeConcept::m_node<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept.use_count() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concept is used in: m_node::m_concept, <a href="CppQt.htm">Qt</a>PvdbDisplayConcept::m_node::m_concept and <a href="CppQt.htm">Qt</a>PvdbConcept::m_concept<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept.get() <a href="CppOperatorEqual.htm">==</a> m_display_concept-&gt;GetConcept().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept.get() <a href="CppOperatorEqual.htm">==</a> m_display_concept-&gt;GetConcept().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept.use_count() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Node is used in: m_node, <a href="CppQt.htm">Qt</a>PvdbNodeConcept::m_node<br/>
&nbsp;&nbsp;m_edit_concept <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbEditConceptItem(m_concept);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_edit_concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept.use_count() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
<br/>
&nbsp;&nbsp;m_rate_concept <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptItem(m_concept);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rate_concept);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_concept.use_count() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_display_concept-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> m_concept.get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_edit_concept-&gt;GetConcept().get()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> m_concept.get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rate_concept-&gt;GetConcept().get()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> m_concept.get());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQt.htm">Qt</a>PvdbConceptItems are not aware of their surroundings, so put them into place manually<br/>
&nbsp;&nbsp;m_display_concept-&gt;setPos(0.0,-40.0);<br/>
&nbsp;&nbsp;m_edit_concept-&gt;setPos(&nbsp;&nbsp; 0.0,&nbsp;&nbsp;0.0);<br/>
&nbsp;&nbsp;m_rate_concept-&gt;setPos(&nbsp;&nbsp; 0.0, 40.0);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;view-&gt;scene()-&gt;addItem(m_display_concept);<br/>
&nbsp;&nbsp;ui-&gt;view-&gt;scene()-&gt;addItem(m_edit_concept);<br/>
&nbsp;&nbsp;ui-&gt;view-&gt;scene()-&gt;addItem(m_rate_concept);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;view-&gt;scene()-&gt;items().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem*&gt;(ui-&gt;view-&gt;scene()-&gt;items()[0]));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem*&gt;(ui-&gt;view-&gt;scene()-&gt;items()[1]));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem*&gt;(ui-&gt;view-&gt;scene()-&gt;items()[2]));<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;pvdb::Competency&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::GetAllCompetencies();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_competency-&gt;addItem(pvdb::CompetencyToDutchStr(v[i]).c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;GetExamples()-&gt;Get().size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;box_complexity-&gt;setCurrentIndex(<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;GetRatingComplexity() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;ui-&gt;box_concreteness-&gt;setCurrentIndex(<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;GetRatingConcreteness() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;ui-&gt;box_specificity-&gt;setCurrentIndex(<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;GetRatingSpecificity() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;edit_name-&gt;setText(<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;GetName().c_str());<br/>
&nbsp;&nbsp;ui-&gt;edit_example_text-&gt;setText(<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;GetExamples()-&gt;Get().at(0)-&gt;GetText().c_str());<br/>
<br/>
&nbsp;&nbsp;ui-&gt;box_competency-&gt;setCurrentIndex(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;GetExamples()-&gt;Get().at(0)-&gt;GetCompetency()));<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::~<a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::GetChosenConcept()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(ui-&gt;box_edit-&gt;currentIndex())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> m_concept;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> ui-&gt;view-&gt;scene()-&gt;items();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppQGraphicsItem.htm">QGraphicsItem</a> * <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter<a href="CppOperatorNotEqual.htm">!=</a>v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem * <b><a href="CppConst.htm">const</a></b> qtconcept <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem*&gt;(*iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtconcept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> qtconcept-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> ui-&gt;view-&gt;scene()-&gt;items();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppQGraphicsItem.htm">QGraphicsItem</a> * <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbEditConceptItem*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter<a href="CppOperatorNotEqual.htm">!=</a>v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbEditConceptItem * <b><a href="CppConst.htm">const</a></b> qtconcept <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbEditConceptItem*&gt;(*iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtconcept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> qtconcept-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> ui-&gt;view-&gt;scene()-&gt;items();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppQGraphicsItem.htm">QGraphicsItem</a> * <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter<a href="CppOperatorNotEqual.htm">!=</a>v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem * <b><a href="CppConst.htm">const</a></b> qtconcept <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem*&gt;(*iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtconcept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> qtconcept-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::GetChosenConcept: chosen concept unknown");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::on_box_competency_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency c <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;pvdb::Competency&gt;(index);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;GetExamples()-&gt;Get().at(0)-&gt;SetCompetency(c);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::on_edit_name_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;SetName(arg1.toStdString());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::on_box_complexity_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_complexity <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(arg1.toStdString());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;SetRatingComplexity(rating_complexity);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::on_box_concreteness_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;SetRatingConcreteness(<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(arg1.toStdString()));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::on_box_specificity_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;SetRatingSpecificity(<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(arg1.toStdString()));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::on_edit_example_text_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetChosenConcept()-&gt;GetExamples()-&gt;Get().at(0)-&gt;SetText(arg1.toStdString());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::Test started");<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog d;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_concept.get() <a href="CppOperatorEqual.htm">==</a> d.m_display_concept-&gt;GetConcept().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_concept.get() <a href="CppOperatorEqual.htm">==</a> d.m_edit_concept-&gt;GetConcept().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_concept.get() <a href="CppOperatorEqual.htm">==</a> d.m_rate_concept-&gt;GetConcept().get());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test resizing due to text being changed<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> d.m_concept-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_concept-&gt;boundingRect().width() <a href="CppOperatorEqual.htm">==</a> d.m_edit_concept-&gt;boundingRect().width());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_concept-&gt;boundingRect().width() <a href="CppOperatorEqual.htm">==</a> d.m_rate_concept-&gt;boundingRect().width());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> w <a href="CppOperatorAssign.htm">=</a> d.m_display_concept-&gt;boundingRect().width();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_concept-&gt;SetName(s <a href="CppOperatorPlus.htm">+</a> "*");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_concept-&gt;boundingRect().width() &gt; w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edit_concept-&gt;boundingRect().width() &gt; w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_rate_concept-&gt;boundingRect().width() &gt; w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test brushes being changed when ratings are given<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept <a href="CppOperatorAssign.htm">=</a> d.m_concept;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingComplexity(-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingConcreteness(-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingSpecificity(-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edit_concept-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGrayGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_concept-&gt;brush() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateRedGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_rate_concept-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateRedGradientBrush());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingComplexity(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingConcreteness(1);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edit_concept-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGrayGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_concept-&gt;brush()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateYellowGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_rate_concept-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateYellowGradientBrush());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingSpecificity(2);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edit_concept-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGrayGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_concept-&gt;brush() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGreenGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_rate_concept-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGreenGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbTestConceptItemDialog::Test finished successfully");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbtestconceptmapeditwidgetdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbtestconceptmapeditwidgetdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBTESTCONCEPTMAPEDITWIDGETDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBTESTCONCEPTMAPEDITWIDGETDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptitem.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog; }<br/>
<br/>
<a href="CppComment.htm">///</a>Tests all <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>s<br/>
<a href="CppComment.htm">///</a>especially the connection between the <a href="CppPointer.htm">pointer</a> and its displayal items:<br/>
<a href="CppComment.htm">///</a>If something via the <a href="CppPointer.htm">pointer</a> is changed, <b><a href="CppThis.htm">this</a></b> must be displayed directly<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_modify_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog *ui;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBTESTCONCEPTMAPEDITWIDGETDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbtestconceptmapeditwidgetdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbtestconceptmapeditwidgetdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="ToolTestConceptMap.htm">testconceptmap</a>edit<a href="CppWidget.htm">widget</a>dialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbbrushfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplesfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbedgeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbeditconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdb<a href="ToolTestConceptMap.htm">testconceptmap</a>edit<a href="CppWidget.htm">widget</a>dialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog::<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(pvdb::ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s().at(15));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;ui-&gt;concept_map-&gt;ReadFromConceptMap(concept_map);<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog::~<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog::Test started");<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog d;<br/>
&nbsp;&nbsp;d.on_button_modify_clicked();<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_concept_map.get() <a href="CppOperatorEqual.htm">==</a> d.m_display_node-&gt;GetNode().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_concept_map.get() <a href="CppOperatorEqual.htm">==</a> d.m_edit_node-&gt;GetNode().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_concept_map.get() <a href="CppOperatorEqual.htm">==</a> d.m_rate_node-&gt;GetNode().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_concept_map-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> d.m_display_node-&gt;GetNode()-&gt;GetConcept().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_concept_map-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> d.m_edit_node-&gt;GetNode()-&gt;GetConcept().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_concept_map-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> d.m_rate_node-&gt;GetNode()-&gt;GetConcept().get());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test resizing due to text being changed<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> d.m_concept_map-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;boundingRect().width() <a href="CppOperatorEqual.htm">==</a> d.m_edit_node-&gt;boundingRect().width());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;boundingRect().width() <a href="CppOperatorEqual.htm">==</a> d.m_rate_node-&gt;boundingRect().width());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> w <a href="CppOperatorAssign.htm">=</a> d.m_display_node-&gt;boundingRect().width();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_concept_map-&gt;GetConcept()-&gt;SetName(s <a href="CppOperatorPlus.htm">+</a> "*");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;boundingRect().width() &gt; w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edit_node-&gt;boundingRect().width() &gt; w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_rate_node-&gt;boundingRect().width() &gt; w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test resizing due to shorter text being set<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_concept_map-&gt;GetConcept()-&gt;SetName("1234567890");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> w <a href="CppOperatorAssign.htm">=</a> d.m_display_node-&gt;boundingRect().width();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_concept_map-&gt;GetConcept()-&gt;SetName("123456789");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;boundingRect().width() &lt; w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test brushes being changed when ratings are given<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept <a href="CppOperatorAssign.htm">=</a> d.m_concept_map-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingComplexity(-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingConcreteness(-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingSpecificity(-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem item(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edit_node-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGrayGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;brush() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateRedGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_rate_node-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateRedGradientBrush());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingComplexity(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingConcreteness(1);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edit_node-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGrayGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;brush()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateYellowGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_rate_node-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateYellowGradientBrush());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingSpecificity(2);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edit_node-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGrayGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;brush() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGreenGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_rate_node-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGreenGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog::Test finished successfully");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Edit<a href="CppWidget.htm">Widget</a>Dialog::on_button_modify_clicked()<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQList.htm">QList</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> ui-&gt;concept_map-&gt;GetScene()-&gt;items();<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppQGraphicsItem.htm">QGraphicsItem</a> * <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> qtitem <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(item))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtitem-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!qtitem-&gt;GetConcept()-&gt;GetName().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtitem-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtitem-&gt;SetName(qtitem-&gt;GetConcept()-&gt;GetName() <a href="CppOperatorPlus.htm">+</a> "N");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::ExamplesFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtitem-&gt;GetConcept()-&gt;SetExamples(v [ <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> v.size() ] );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtitem-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQt.htm">Qt</a>PvdbEdgeItem* <b><a href="CppConst.htm">const</a></b> qtitem <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt;(item))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtitem-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!qtitem-&gt;GetConcept()-&gt;GetName().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtitem-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtitem-&gt;SetName(qtitem-&gt;GetConcept()-&gt;GetName() <a href="CppOperatorPlus.htm">+</a> "E");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Examples&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::ExamplesFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtitem-&gt;GetConcept()-&gt;SetExamples(v [ <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> v.size() ] );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtitem-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;ui-&gt;concept_map-&gt;GetScene()-&gt;update();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbtestconceptmapratewidgetdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbtestconceptmapratewidgetdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBTESTCONCEPTMAPRATEWIDGETDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBTESTCONCEPTMAPRATEWIDGETDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptitem.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog; }<br/>
<br/>
<a href="CppComment.htm">///</a>Tests all <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>s<br/>
<a href="CppComment.htm">///</a>especially the connection between the <a href="CppPointer.htm">pointer</a> and its displayal items:<br/>
<a href="CppComment.htm">///</a>If something via the <a href="CppPointer.htm">pointer</a> is changed, <b><a href="CppThis.htm">this</a></b> must be displayed directly<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_test_modify_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog *ui;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBTESTCONCEPTMAPRATEWIDGETDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbtestconceptmapratewidgetdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbtestconceptmapratewidgetdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="ToolTestConceptMap.htm">testconceptmap</a>rate<a href="CppWidget.htm">widget</a>dialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbeditconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbbrushfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdb<a href="ToolTestConceptMap.htm">testconceptmap</a>rate<a href="CppWidget.htm">widget</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog::<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(pvdb::ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s().at(15));<br/>
&nbsp;&nbsp;ui-&gt;concept_map-&gt;ReadFromConceptMap(concept_map);<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog::~<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog::Test started");<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog d;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>100; <a href="CppOperatorIncrement.htm">++</a>i) d.on_button_test_modify_clicked();<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog::Test finished successfully");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="ToolTestConceptMap.htm">TestConceptMap</a>Rate<a href="CppWidget.htm">Widget</a>Dialog::on_button_test_modify_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQList.htm">QList</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> ui-&gt;concept_map-&gt;GetScene()-&gt;items();<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppQGraphicsItem.htm">QGraphicsItem</a> * <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> qtitem <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(item))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtitem-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!qtitem-&gt;GetConcept()-&gt;GetName().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtitem-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_complexity <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtitem-&gt;GetConcept()-&gt;SetRatingComplexity(rating_complexity);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtitem-&gt;GetConcept()-&gt;SetRatingConcreteness(-1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtitem-&gt;GetConcept()-&gt;SetRatingSpecificity(-1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> qtitem-&gt;GetConcept()-&gt;GetExamples()-&gt;Get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Example&gt;&amp; example)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 4) <a href="CppOperatorModulus.htm">%</a> 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;pvdb::Competency&gt; w <a href="CppOperatorAssign.htm">=</a> pvdb::GetAllCompetencies();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;example-&gt;SetCompetency(w[ <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> w.size() ]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;example-&gt;SetCompetency(pvdb::Competency::un<a href="CppInitialize.htm">initialize</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtitem-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;ui-&gt;concept_map-&gt;GetScene()-&gt;update();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbtestedgeitemdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbtestedgeitemdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBTESTEDGEITEMDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBTESTEDGEITEMDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbedgeitem.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog; }<br/>
<br/>
<a href="CppComment.htm">///</a>Tests all <a href="CppQt.htm">Qt</a>PvdbConceptItem items when being a member of a <a href="CppQt.htm">Qt</a>PvdbNodeItem,<br/>
<a href="CppComment.htm">///</a>especially the connection between the <a href="CppPointer.htm">pointer</a> and its displayal items:<br/>
<a href="CppComment.htm">///</a>If something via the <a href="CppPointer.htm">pointer</a> is changed, <b><a href="CppThis.htm">this</a></b> must be displayed directly<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog();<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_competency_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_edit_name_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_complexity_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_concreteness_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_specificity_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_edit_example_text_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_arrow_head_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_arrow_tail_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog *ui;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; m_edge;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem* m_edge_item;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Edge via the route chosen by box_edit<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; GetEdge();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Called whenever an item requests a scene update<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnRequestSceneUpdate();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBTESTEDGEITEMDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbtestedgeitemdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbtestedgeitemdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbtestedgeitemdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedgefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbedgeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbeditconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbtestedgeitemdialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog),<br/>
&nbsp;&nbsp;m_edge(pvdb::EdgeFactory::GetTests().at(1)),<br/>
&nbsp;&nbsp;m_edge_item(<b><a href="CppNullptr.htm">nullptr</a></b>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;view-&gt;scene());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Edge is used in: m_edge<br/>
&nbsp;&nbsp;m_edge-&gt;GetConcept()-&gt;SetName("Edge with one example");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_edge.use_count() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_edge-&gt;GetConcept().use_count() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create three nodes that the edges can connect to<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * node1 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node <a href="CppOperatorAssign.htm">=</a> pvdb::NodeFactory::GetTests().at(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;GetConcept()-&gt;SetName("1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; item(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem(node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;node1 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem(node,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;node1-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * node2 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node <a href="CppOperatorAssign.htm">=</a> pvdb::NodeFactory::GetTests().at(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;GetConcept()-&gt;SetName("2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; item(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbEditConceptItem(node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;node2 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem(node,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;node2-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::OnRequestSceneUpdate,<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node1-&gt;GetNode());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node2-&gt;GetNode());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node1-&gt;GetNode()-&gt;GetConcept());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node2-&gt;GetNode()-&gt;GetConcept());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the edge<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbEditConceptItem&gt; concept(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbEditConceptItem(m_edge-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_edge_item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem(m_edge,concept,node1,node2);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Node is used in: m_edge and <a href="CppQt.htm">Qt</a>PvdbNodeConcept::m_edge<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_edge.use_count() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concept is used in: m_edge::m_concept, <a href="CppQt.htm">Qt</a>PvdbDisplayConcept::m_edge::m_concept and <a href="CppQt.htm">Qt</a>PvdbConcept::m_concept<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_edge.get() <a href="CppOperatorEqual.htm">==</a> m_edge_item-&gt;GetEdge().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_edge-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> m_edge_item-&gt;GetEdge()-&gt;GetConcept().get());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_edge-&gt;GetConcept().use_count() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> items to the scene<br/>
&nbsp;&nbsp;ui-&gt;view-&gt;scene()-&gt;addItem(node1);<br/>
&nbsp;&nbsp;ui-&gt;view-&gt;scene()-&gt;addItem(node2);<br/>
&nbsp;&nbsp;ui-&gt;view-&gt;scene()-&gt;addItem(m_edge_item);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;view-&gt;scene()-&gt;items().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQList.htm">QList</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> ui-&gt;view-&gt;scene()-&gt;items();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCount_if.htm">std::count_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a> * <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put nodes (not the edges) into place<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The nodes must reposition themselves<br/>
&nbsp;&nbsp;node1-&gt;setPos(-100.0,-100.0);<br/>
&nbsp;&nbsp;m_edge_item-&gt;setPos(0.0,0.0);<br/>
&nbsp;&nbsp;node2-&gt;setPos( 100.0, 100.0);<br/>
<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;pvdb::Competency&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::GetAllCompetencies();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_competency-&gt;addItem(pvdb::CompetencyToDutchStr(v[i]).c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;box_complexity-&gt;setCurrentIndex(<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;GetRatingComplexity() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;ui-&gt;box_concreteness-&gt;setCurrentIndex(<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;GetRatingConcreteness() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;ui-&gt;box_specificity-&gt;setCurrentIndex(<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;GetRatingSpecificity() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;edit_name-&gt;setText(<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;GetName().c_str());<br/>
&nbsp;&nbsp;ui-&gt;edit_example_text-&gt;setText(<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().at(0)-&gt;GetText().c_str());<br/>
<br/>
&nbsp;&nbsp;ui-&gt;box_arrow_head-&gt;setCurrentIndex(<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;HasHeadArrow());<br/>
&nbsp;&nbsp;ui-&gt;box_arrow_tail-&gt;setCurrentIndex(<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;HasTailArrow());<br/>
&nbsp;&nbsp;ui-&gt;box_competency-&gt;setCurrentIndex(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().at(0)-&gt;GetCompetency()));<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::~<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::GetEdge()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(ui-&gt;box_edit-&gt;currentIndex())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> m_edge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> ui-&gt;view-&gt;scene()-&gt;items();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a> * <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter<a href="CppOperatorNotEqual.htm">!=</a>v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbEdgeItem * <b><a href="CppConst.htm">const</a></b> qtedge <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbEdgeItem*&gt;(*iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> qtedge-&gt;GetEdge();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::GetEdge: current index unknown");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::on_box_competency_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency c <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;pvdb::Competency&gt;(index);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().at(0)-&gt;SetCompetency(c);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::on_edit_name_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;SetName(arg1.toStdString());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::on_box_complexity_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_complexity <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(arg1.toStdString());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;SetRatingComplexity(rating_complexity);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::on_box_concreteness_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;SetRatingConcreteness(<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(arg1.toStdString()));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::on_box_specificity_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;SetRatingSpecificity(<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(arg1.toStdString()));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::on_edit_example_text_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().at(0)-&gt;SetText(arg1.toStdString());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::on_box_arrow_head_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;SetHeadArrow(index);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::on_box_arrow_tail_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetEdge()-&gt;SetTailArrow(index);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::OnRequestSceneUpdate()<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;view-&gt;scene()-&gt;update();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::Test started");<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog d;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edge.get() <a href="CppOperatorEqual.htm">==</a> d.m_edge_item-&gt;GetEdge().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edge-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> d.m_edge_item-&gt;GetEdge()-&gt;GetConcept().get());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test resizing due to longer text being set<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> d.m_edge-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> w <a href="CppOperatorAssign.htm">=</a> d.m_edge_item-&gt;GetConceptItem()-&gt;boundingRect().width();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_edge-&gt;GetConcept()-&gt;SetName(s <a href="CppOperatorPlus.htm">+</a> "*");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edge_item-&gt;GetConceptItem()-&gt;boundingRect().width() &gt; w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test resizing due to shorter text being set<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_edge-&gt;GetConcept()-&gt;SetName("1234567890");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> w <a href="CppOperatorAssign.htm">=</a> d.m_edge_item-&gt;GetConceptItem()-&gt;boundingRect().width();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_edge-&gt;GetConcept()-&gt;SetName("123456789");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edge_item-&gt;GetConceptItem()-&gt;boundingRect().width() &lt; w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbTestEdgeItemDialog::Test finished successfully");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbtestnodeitemdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbtestnodeitemdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBTESTNODEITEMDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBTESTNODEITEMDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptitem.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog; }<br/>
<br/>
<a href="CppComment.htm">///</a>Tests all <a href="CppQt.htm">Qt</a>PvdbConceptItem items when being a member of a <a href="CppQt.htm">Qt</a>PvdbNodeItem,<br/>
<a href="CppComment.htm">///</a>especially the connection between the <a href="CppPointer.htm">pointer</a> and its displayal items:<br/>
<a href="CppComment.htm">///</a>If something via the <a href="CppPointer.htm">pointer</a> is changed, <b><a href="CppThis.htm">this</a></b> must be displayed directly<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_competency_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_edit_name_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_complexity_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_concreteness_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_specificity_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_edit_example_text_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog *ui;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; m_node;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem* m_display_node;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem* m_edit_node;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem* m_rate_node;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Node via the route chosen by box_edit<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; GetNode();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnRequestsSceneUpdate();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBTESTNODEITEMDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbtestnodeitemdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbtestnodeitemdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbtestnodeitemdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbeditconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbrateconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbdisplayconceptitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbbrushfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbtestnodeitemdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog),<br/>
&nbsp;&nbsp;m_node(pvdb::NodeFactory::GetTests().at(1)),<br/>
&nbsp;&nbsp;m_display_node(<b><a href="CppNullptr.htm">nullptr</a></b>),<br/>
&nbsp;&nbsp;m_edit_node(<b><a href="CppNullptr.htm">nullptr</a></b>),<br/>
&nbsp;&nbsp;m_rate_node(<b><a href="CppNullptr.htm">nullptr</a></b>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;view-&gt;scene());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Node is used in: m_node<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node.use_count() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node-&gt;GetConceptUseCount() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node-&gt;GetConcept().use_count() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; item(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem(m_node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_display_node <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem(m_node,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_display_node-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::OnRequestsSceneUpdate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Node is used in: m_node and <a href="CppQt.htm">Qt</a>PvdbNodeConcept::m_node<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node.use_count() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concept is used in: m_node::m_concept, <a href="CppQt.htm">Qt</a>PvdbDisplayConcept::m_node::m_concept and <a href="CppQt.htm">Qt</a>PvdbConcept::m_concept<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node.get() <a href="CppOperatorEqual.htm">==</a> m_display_node-&gt;GetNode().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> m_display_node-&gt;GetNode()-&gt;GetConcept().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node-&gt;GetConcept().use_count() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node-&gt;GetConceptUseCount() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; item(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbEditConceptItem(m_node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_edit_node <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem(m_node,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_edit_node-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::OnRequestsSceneUpdate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node.use_count() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node-&gt;GetConceptUseCount() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node-&gt;GetConcept().use_count() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptItem&gt; item(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptItem(m_node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rate_node <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem(m_node,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rate_node-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::OnRequestsSceneUpdate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node.use_count() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node-&gt;GetConceptUseCount() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_node-&gt;GetConcept().use_count() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_display_node-&gt;GetNode().get() <a href="CppOperatorEqual.htm">==</a> m_node.get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_edit_node-&gt;GetNode().get()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> m_node.get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_rate_node-&gt;GetNode().get()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> m_node.get());<br/>
<br/>
&nbsp;&nbsp;ui-&gt;view-&gt;scene()-&gt;addItem(m_display_node);<br/>
&nbsp;&nbsp;ui-&gt;view-&gt;scene()-&gt;addItem(m_edit_node);<br/>
&nbsp;&nbsp;ui-&gt;view-&gt;scene()-&gt;addItem(m_rate_node);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;view-&gt;scene()-&gt;items().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(ui-&gt;view-&gt;scene()-&gt;items()[0]));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(ui-&gt;view-&gt;scene()-&gt;items()[1]));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(ui-&gt;view-&gt;scene()-&gt;items()[2]));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQt.htm">Qt</a>PvdbConceptItems are aware of their surroundings, but I put them into place manually<br/>
&nbsp;&nbsp;m_display_node-&gt;setPos(0.0,-40.0);<br/>
&nbsp;&nbsp;m_edit_node-&gt;setPos(&nbsp;&nbsp; 0.0,&nbsp;&nbsp;0.0);<br/>
&nbsp;&nbsp;m_rate_node-&gt;setPos(&nbsp;&nbsp; 0.0, 40.0);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;pvdb::Competency&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::GetAllCompetencies();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_competency-&gt;addItem(pvdb::CompetencyToDutchStr(v[i]).c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;box_complexity-&gt;setCurrentIndex(<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;GetRatingComplexity() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;ui-&gt;box_concreteness-&gt;setCurrentIndex(<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;GetRatingConcreteness() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;ui-&gt;box_specificity-&gt;setCurrentIndex(<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;GetRatingSpecificity() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;edit_name-&gt;setText(<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;GetName().c_str());<br/>
&nbsp;&nbsp;ui-&gt;edit_example_text-&gt;setText(<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().at(0)-&gt;GetText().c_str());<br/>
<br/>
<br/>
&nbsp;&nbsp;ui-&gt;box_competency-&gt;setCurrentIndex(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().at(0)-&gt;GetCompetency()));<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::~<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::GetNode()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(ui-&gt;box_edit-&gt;currentIndex())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> m_node;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> ui-&gt;view-&gt;scene()-&gt;items();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a> * <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> node_item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node_item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbDisplayConceptItem*&gt;(node_item-&gt;GetConceptItem().get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter<a href="CppOperatorNotEqual.htm">!=</a>v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> qtnode <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(*iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> qtnode-&gt;GetNode();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> ui-&gt;view-&gt;scene()-&gt;items();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a> * <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> node_item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node_item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbEditConceptItem*&gt;(node_item-&gt;GetConceptItem().get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter<a href="CppOperatorNotEqual.htm">!=</a>v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> qtnode <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(*iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> qtnode-&gt;GetNode();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> ui-&gt;view-&gt;scene()-&gt;items();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a> * <b><a href="CppConst.htm">const</a></b> item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem* <b><a href="CppConst.htm">const</a></b> node_item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node_item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbRateConceptItem*&gt;(node_item-&gt;GetConceptItem().get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter<a href="CppOperatorNotEqual.htm">!=</a>v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> qtnode <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>PvdbNodeItem*&gt;(*iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> qtnode-&gt;GetNode();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::GetNode: index unknown");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::on_box_competency_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> pvdb::Competency c <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;pvdb::Competency&gt;(index);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().at(0)-&gt;SetCompetency(c);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::on_edit_name_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;SetName(arg1.toStdString());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::on_box_complexity_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rating_complexity <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(arg1.toStdString());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rating_complexity <a href="CppOperatorLessEqual.htm">&lt;=</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;SetRatingComplexity(rating_complexity);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::on_box_concreteness_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;SetRatingConcreteness(<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(arg1.toStdString()));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::on_box_specificity_currentIndexChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;SetRatingSpecificity(<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(arg1.toStdString()));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::on_edit_example_text_textChanged(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> &amp;arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetNode()-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().at(0)-&gt;SetText(arg1.toStdString());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::Test started");<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog d;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_node.get() <a href="CppOperatorEqual.htm">==</a> d.m_display_node-&gt;GetNode().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_node.get() <a href="CppOperatorEqual.htm">==</a> d.m_edit_node-&gt;GetNode().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_node.get() <a href="CppOperatorEqual.htm">==</a> d.m_rate_node-&gt;GetNode().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_node-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> d.m_display_node-&gt;GetNode()-&gt;GetConcept().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_node-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> d.m_edit_node-&gt;GetNode()-&gt;GetConcept().get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_node-&gt;GetConcept().get() <a href="CppOperatorEqual.htm">==</a> d.m_rate_node-&gt;GetNode()-&gt;GetConcept().get());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test resizing due to text being changed<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> d.m_node-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;boundingRect().width() <a href="CppOperatorEqual.htm">==</a> d.m_edit_node-&gt;boundingRect().width());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;boundingRect().width() <a href="CppOperatorEqual.htm">==</a> d.m_rate_node-&gt;boundingRect().width());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> w <a href="CppOperatorAssign.htm">=</a> d.m_display_node-&gt;boundingRect().width();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_node-&gt;GetConcept()-&gt;SetName(s <a href="CppOperatorPlus.htm">+</a> "*");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;boundingRect().width() &gt; w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edit_node-&gt;boundingRect().width() &gt; w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_rate_node-&gt;boundingRect().width() &gt; w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test resizing due to shorter text being set<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_node-&gt;GetConcept()-&gt;SetName("1234567890");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> w <a href="CppOperatorAssign.htm">=</a> d.m_display_node-&gt;boundingRect().width();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_node-&gt;GetConcept()-&gt;SetName("123456789");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;boundingRect().width() &lt; w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test brushes being changed when ratings are given<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("TODO?");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept <a href="CppOperatorAssign.htm">=</a> d.m_node-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingComplexity(-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingConcreteness(-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingSpecificity(-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbRateConceptItem item(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edit_node-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGrayGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;brush() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateRedGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_rate_node-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateRedGradientBrush());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingComplexity(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingConcreteness(1);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edit_node-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGrayGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;brush()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateYellowGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_rate_node-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateYellowGradientBrush());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;SetRatingSpecificity(2);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_edit_node-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGrayGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_display_node-&gt;brush() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGreenGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.m_rate_node-&gt;brush()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>PvdbBrushFactory::CreateGreenGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::Test finished successfully");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbTestNodeItemDialog::OnRequestsSceneUpdate()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;view-&gt;scene()-&gt;update();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbtoolsitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbtoolsitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBTOOLSITEM_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBTOOLSITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQBrush.htm">QBrush</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsPixmapItem.htm">QGraphicsPixmapItem</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">///</a><a href="Tools.htm">Tools</a> item is a <b><a href="CppClass.htm">class</a></b> that is displayed above a selected node or edge<br/>
<a href="CppComment.htm">///</a>and displays clickable icons to perform actions, <b><a href="CppFor.htm">for</a></b> example<br/>
<a href="CppComment.htm">///</a>adding a relation or modifying arrow edges<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item cannot have its visibility set directly:<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> <b><a href="CppIf.htm">if</a></b> it has a buddy, it is visible<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> <b><a href="CppIf.htm">if</a></b> it has no buddy, it is invisible<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item : <b><a href="CppPublic.htm">public</a></b> <a href="CppQGraphicsPixmapItem.htm">QGraphicsPixmapItem</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item();<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item&amp; other) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the item the <a href="Tools.htm">tools</a> item floats above<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppReturnType.htm">Return type</a> cannot be <b><a href="CppConst.htm">const</a></b>, as the user might want to modify it<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * GetBuddyItem() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the position from the <a href="CppWidget.htm">widget</a> it floats above<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/item cannot be <b><a href="CppConst.htm">const</a></b>, as the user might want to modify it<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetBuddyItem(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> item);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppSignal.htm">Signal</a><a href="CppLed.htm">led</a> when a <a href="Tools.htm">tool</a> is clicked<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; m_signal_clicked;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> hoverMoveEvent(<a href="CppQGraphicsSceneHoverEvent.htm">QGraphicsSceneHoverEvent</a> *event);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mousePressEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paint(<a href="CppQPainter.htm">QPainter</a>* painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a> *, <a href="CppQWidget.htm">QWidget</a> *);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Make <b><a href="CppPrivate.htm">private</a></b> to ensure use of other setPos <a href="CppMemberFunction.htm">member function</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setPos(qreal ax, qreal ay) { <a href="CppQGraphicsPixmapItem.htm">QGraphicsPixmapItem</a>::setPos(ax,ay); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The item the <a href="Tools.htm">tools</a> item floats above<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_item cannot be <b><a href="CppConst.htm">const</a></b>, as the user might want to modify it<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * m_item;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setVisible(<b><a href="CppBool.htm">bool</a></b> visible) { <a href="CppQGraphicsPixmapItem.htm">QGraphicsPixmapItem</a>::setVisible(visible); }<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBTOOLSITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbtoolsitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbtoolsitem.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdb<a href="Tools.htm">tools</a>item.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQCursor.htm">QCursor</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item::<a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item()<br/>
&nbsp;&nbsp;: m_signal_clicked(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_item(<b><a href="CppNullptr.htm">nullptr</a></b>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setPixmap(<a href="CppQPixmap.htm">QPixmap</a>(":/images/PicArrow14x14.png"));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<b><a href="CppThis.htm">this</a></b>-&gt;pixmap().isNull());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsFocusable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsSelectable);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Allow mouse tracking<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setAcceptHoverEvents(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setZValue(3.0);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item::GetBuddyItem() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_item);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_item;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item::hoverMoveEvent(<a href="CppQGraphicsSceneHoverEvent.htm">QGraphicsSceneHoverEvent</a> *)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setCursor(<a href="CppQCursor.htm">QCursor</a>(<a href="CppQt.htm">Qt</a>::<a href="CppPoint.htm">Point</a>ingHandCursor));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item::mousePressEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQGraphicsPixmapItem.htm">QGraphicsPixmapItem</a>::mousePressEvent(event);<br/>
&nbsp;&nbsp;m_signal_clicked();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item::paint(<a href="CppQPainter.htm">QPainter</a>* painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a>* option, <a href="CppQWidget.htm">QWidget</a>* <a href="CppWidget.htm">widget</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_item);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setPos(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_item-&gt;pos().x(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_item-&gt;pos().y() <a href="CppOperatorMinus.htm">-</a> 32.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQGraphicsPixmapItem.htm">QGraphicsPixmapItem</a>::paint(painter,option,<a href="CppWidget.htm">widget</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;isSelected() <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppThis.htm">this</a></b>-&gt;hasFocus())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a> pen;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pen.setColor(<a href="CppQColor.htm">QColor</a>(255,0,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;setPen(pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No idea why these relative coordinats are best<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>I'd expect no adjustment to look best...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;drawRect(<b><a href="CppThis.htm">this</a></b>-&gt;boundingRect().adjusted(0.0,0.0,-2.0,-2.0));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Pvdb<a href="Tools.htm">Tools</a>Item::SetBuddyItem(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbNodeItem * <b><a href="CppConst.htm">const</a></b> item)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (item <a href="CppOperatorNotEqual.htm">!=</a> m_item)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_item <a href="CppOperatorAssign.htm">=</a> item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbviewfilesdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbviewfilesdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBVIEW<a href="CppCfile.htm">FILE</a>SDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBVIEW<a href="CppCfile.htm">FILE</a>SDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui { <b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbViewFilesDialog; }<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbViewFilesDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbViewFilesDialog(<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbViewFilesDialog();<br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_left_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* event);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>rLeft();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>rRight();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_right_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbViewFilesDialog *ui;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBVIEW<a href="CppCfile.htm">FILE</a>SDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbviewfilesdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbviewfilesdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbviewfilesdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbviewfilesdialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbViewFilesDialog::<a href="CppQt.htm">Qt</a>PvdbViewFilesDialog(<a href="CppQWidget.htm">QWidget</a>* parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbViewFilesDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbViewFilesDialog::~<a href="CppQt.htm">Qt</a>PvdbViewFilesDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbViewFilesDialog::On<a href="CppTime.htm">Time</a>rLeft()<br/>
{<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbViewFilesDialog::On<a href="CppTime.htm">Time</a>rRight()<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbViewFilesDialog::on_button_left_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> file <a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getOpenFileName(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNullptr.htm">nullptr</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>("Select a file to view"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>("*.cmp")<br/>
&nbsp;&nbsp;).toStdString();<br/>
&nbsp;&nbsp;ui-&gt;text_left-&gt;clear();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQFile.htm">QFile</a>::exists(file.c_str()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!pvdb::<a href="CppFileToVector.htm">FileToVector</a>(file).empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppXmlToPretty.htm">XmlToPretty</a>(pvdb::<a href="CppFileToVector.htm">FileToVector</a>(file)[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;text](<a href="CppStdString.htm">std::string</a> s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<a href="CppOperatorPlusAssign.htm">+=</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppStdString.htm">std::string</a>("\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;text_left-&gt;setPlainText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbViewFilesDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(event);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbViewFilesDialog::on_button_right_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> file <a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getOpenFileName(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNullptr.htm">nullptr</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>("Select a file to view"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>("*.cmp")<br/>
&nbsp;&nbsp;).toStdString();<br/>
&nbsp;&nbsp;ui-&gt;text_right-&gt;clear();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQFile.htm">QFile</a>::exists(file.c_str()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!pvdb::<a href="CppFileToVector.htm">FileToVector</a>(file).empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::<a href="CppXmlToPretty.htm">XmlToPretty</a>(pvdb::<a href="CppFileToVector.htm">FileToVector</a>(file)[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;text](<a href="CppStdString.htm">std::string</a> s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<a href="CppOperatorPlusAssign.htm">+=</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppStdString.htm">std::string</a>("\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;text_right-&gt;setPlainText(text.c_str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbviewtestsdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbviewtestsdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPVDBVIEWTESTSDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTPVDBVIEWTESTSDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_USE_FORWARD_DECLARATIONS_248738<br/>
<a href="CppInclude.htm">#include</a> "pvdbfwd.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbViewTestsDialog;<br/>
}<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>PvdbViewTestsDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>PvdbViewTestsDialog(<a href="CppQWidget.htm">QWidget</a>* parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PvdbViewTestsDialog();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* event);<br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbViewTestsDialog *ui;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPVDBVIEWTESTSDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/qtpvdbviewtestsdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/qtpvdbviewtestsdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbviewtestsdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QGridLayout&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQVBoxLayout.htm">QVBoxLayout</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQLabel.htm">QLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapdisplay<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmap<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpvdbviewtestsdialog.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbViewTestsDialog::<a href="CppQt.htm">Qt</a>PvdbViewTestsDialog(<a href="CppQWidget.htm">QWidget</a>* parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PvdbViewTestsDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ui-&gt;scrollArea<a href="CppWidget.htm">Widget</a>Contents-&gt;layout());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>QGridLayout * <b><a href="CppConst.htm">const</a></b> mylayout <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QGridLayout(ui-&gt;scrollArea<a href="CppWidget.htm">Widget</a>Contents);<br/>
&nbsp;&nbsp;<a href="CppQVBoxLayout.htm">QVBoxLayout</a> * <b><a href="CppConst.htm">const</a></b> mylayout <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQVBoxLayout.htm">QVBoxLayout</a>(ui-&gt;scrollArea<a href="CppWidget.htm">Widget</a>Contents);<br/>
&nbsp;&nbsp;ui-&gt;scrollArea<a href="CppWidget.htm">Widget</a>Contents-&gt;setLayout(mylayout);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mylayout-&gt;parent());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> all concept maps<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> minheight <a href="CppOperatorAssign.htm">=</a> 200;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(mylayout-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mylayout-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppQLabel.htm">QLabel</a>("Heteromorphous test concept maps"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(mylayout-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> 2; <a href="CppComment.htm">//</a><b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mylayout-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppQLabel.htm">QLabel</a>((<a href="CppStdString.htm">std::string</a>("[")+<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i)+<a href="CppStdString.htm">std::string</a>("]")).c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> <a href="CppWidget.htm">widget</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppWidget.htm">widget</a>-&gt;parent());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWidget.htm">widget</a>-&gt;setMinimumHeight(minheight);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWidget.htm">widget</a>-&gt;ReadFromConceptMap(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mylayout-&gt;addWidget(<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppWidget.htm">widget</a>-&gt;parent());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mylayout-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppQLabel.htm">QLabel</a>("Simple homomorphous test concept maps"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetSimpleHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mylayout-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppQLabel.htm">QLabel</a>((<a href="CppStdString.htm">std::string</a>("[")+<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i)+<a href="CppStdString.htm">std::string</a>("]")).c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> <a href="CppWidget.htm">widget</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWidget.htm">widget</a>-&gt;setMinimumHeight(minheight);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWidget.htm">widget</a>-&gt;ReadFromConceptMap(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mylayout-&gt;addWidget(<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mylayout-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppQLabel.htm">QLabel</a>("Complex homomorphous test concept maps"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetComplexHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mylayout-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppQLabel.htm">QLabel</a>((<a href="CppStdString.htm">std::string</a>("[")+<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i)+<a href="CppStdString.htm">std::string</a>("]")).c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> <a href="CppWidget.htm">widget</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDisplay<a href="CppWidget.htm">Widget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWidget.htm">widget</a>-&gt;setMinimumHeight(minheight);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWidget.htm">widget</a>-&gt;ReadFromConceptMap(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mylayout-&gt;addWidget(<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PvdbViewTestsDialog::~<a href="CppQt.htm">Qt</a>PvdbViewTestsDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbViewTestsDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>* event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQDialog.htm">QDialog</a>::keyPressEvent(event);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/test_pvdbcluster.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/test_pvdbcluster.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppQRegExp.htm">QRegExp</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbclusterfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamples.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexample.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Cluster::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Cluster::Test started");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppOperatorEqual.htm">operator==</a></b> and <b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; &gt; tmp_tests_1 <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(tmp_tests_1.begin(),tmp_tests_1.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>FIX 2013-01-02<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(tmp_tests_1.begin(),tmp_tests_1.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } )); <a href="CppComment.htm">//</a>BUG IN CROSSCOMPILER 2013-01-02<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(tmp_tests_1.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; &gt; tmp_tests_a <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::GetTests(); <a href="CppComment.htm">//</a>For cross<a href="CppCompiler.htm">compiler</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(tmp_tests_a.begin(),tmp_tests_a.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(tmp_tests_a.begin(),tmp_tests_a.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt; a <a href="CppOperatorAssign.htm">=</a> tmp_tests_a.at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; &gt; tmp_tests_b <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::GetTests(); <a href="CppComment.htm">//</a>For cross<a href="CppCompiler.htm">compiler</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(tmp_tests_b.begin(),tmp_tests_b.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(tmp_tests_b.begin(),tmp_tests_b.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; b <a href="CppOperatorAssign.htm">=</a> tmp_tests_b.at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a); <a href="CppAssert.htm">assert</a>(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; &gt; tmp_tests_c <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::GetTests(); <a href="CppComment.htm">//</a>For cross<a href="CppCompiler.htm">compiler</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(tmp_tests_c.begin(),tmp_tests_c.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(tmp_tests_c.begin(),tmp_tests_c.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; &gt; tmp_tests_d <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::GetTests(); <a href="CppComment.htm">//</a>For cross<a href="CppCompiler.htm">compiler</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(tmp_tests_d.begin(),tmp_tests_d.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(tmp_tests_d.begin(),tmp_tests_d.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Cluster&gt; c <a href="CppOperatorAssign.htm">=</a> tmp_tests_c.at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Cluster&gt; d <a href="CppOperatorAssign.htm">=</a> tmp_tests_d.at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c); <a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>d); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i<a href="CppOperatorEqual.htm">==</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorNotEqual.htm">!=</a>c); <a href="CppAssert.htm">assert</a>(a<a href="CppOperatorNotEqual.htm">!=</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b<a href="CppOperatorNotEqual.htm">!=</a>c); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorNotEqual.htm">!=</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c<a href="CppOperatorNotEqual.htm">!=</a>a); <a href="CppAssert.htm">assert</a>(c<a href="CppOperatorNotEqual.htm">!=</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d<a href="CppOperatorNotEqual.htm">!=</a>a); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorNotEqual.htm">!=</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test all Clusters with each combination of Concepts<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt; &gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetCombinations.htm">GetCombinations</a>(pvdb::ConceptFactory::GetTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; &gt;&amp; concepts)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; c(<b><a href="CppNew.htm">new</a></b> pvdb::Cluster(concepts));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> To<a href="CppXml.htm">Xml</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; d <a href="CppOperatorAssign.htm">=</a> From<a href="CppXml.htm">Xml</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Cluster::Test finished successfully");<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/test_pvdbconcept.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/test_pvdbconcept.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::Concept::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pvdb::TestHelper<a href="CppFunction.htm">Function</a>s();<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Started pvdb::Concept::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppOperatorEqual.htm">operator==</a></b> and <b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(ConceptFactory::GetTests().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> tmp_a <a href="CppOperatorAssign.htm">=</a> ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> tmp_b <a href="CppOperatorAssign.htm">=</a> ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; a <a href="CppOperatorAssign.htm">=</a> tmp_a.at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt; b <a href="CppOperatorAssign.htm">=</a> tmp_b.at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b); <a href="CppComment.htm">//</a>FAILS AT CROSSCOMPILER<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>b); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; c <a href="CppOperatorAssign.htm">=</a> ConceptFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt; d <a href="CppOperatorAssign.htm">=</a> ConceptFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c); <a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>d); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i<a href="CppOperatorEqual.htm">==</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>c); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorEqual.htm">==</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(c<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>a); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorEqual.htm">==</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorNotEqual.htm">!=</a>c); <a href="CppAssert.htm">assert</a>(a<a href="CppOperatorNotEqual.htm">!=</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b<a href="CppOperatorNotEqual.htm">!=</a>c); <a href="CppAssert.htm">assert</a>(b<a href="CppOperatorNotEqual.htm">!=</a>d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c<a href="CppOperatorNotEqual.htm">!=</a>a); <a href="CppAssert.htm">assert</a>(c<a href="CppOperatorNotEqual.htm">!=</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d<a href="CppOperatorNotEqual.htm">!=</a>a); <a href="CppAssert.htm">assert</a>(d<a href="CppOperatorNotEqual.htm">!=</a>b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppOperatorLess.htm">operator&lt;</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check correct ordering by name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; a <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt; b <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; c <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt; d <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a); <a href="CppAssert.htm">assert</a>(b); <a href="CppAssert.htm">assert</a>(c); <a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a &lt; c); <a href="CppAssert.htm">assert</a>(a &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b &lt; c); <a href="CppAssert.htm">assert</a>(b &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check correct ordering by examples' size, sizes 0 versus 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; a <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt; b <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; c <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt; d <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a); <a href="CppAssert.htm">assert</a>(b); <a href="CppAssert.htm">assert</a>(c); <a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a &lt; c); <a href="CppAssert.htm">assert</a>(a &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b &lt; c); <a href="CppAssert.htm">assert</a>(b &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check correct ordering by examples' size, sizes 1 versus 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; a <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt; b <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; c <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2",Competency::misc},{"3",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt; d <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2",Competency::misc},{"3",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a); <a href="CppAssert.htm">assert</a>(b); <a href="CppAssert.htm">assert</a>(c); <a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a &lt; c); <a href="CppAssert.htm">assert</a>(a &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b &lt; c); <a href="CppAssert.htm">assert</a>(b &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check correct ordering <b><a href="CppFor.htm">for</a></b> equal examples' size, lexicographically in the 2nd text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; a <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2",Competency::misc},{"3",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt; b <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2",Competency::misc},{"3",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt; c <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2",Competency::misc},{"4",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::Concept&gt; d <a href="CppOperatorAssign.htm">=</a> ConceptFactory::Create("1", { {"2",Competency::misc},{"4",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a); <a href="CppAssert.htm">assert</a>(b); <a href="CppAssert.htm">assert</a>(c); <a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a &lt; c); <a href="CppAssert.htm">assert</a>(a &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b &lt; c); <a href="CppAssert.htm">assert</a>(b &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <a href="CppXml.htm">XML</a> conversion<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(ConceptFactory::GetTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::Concept&gt;&amp; original)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <a href="CppCopyConstructor.htm">copy constructor</a> and <b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; c <a href="CppOperatorAssign.htm">=</a> ConceptFactory::DeepCopy(original);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> original);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c-&gt;m_name <a href="CppOperatorAssign.htm">=</a> c-&gt;m_name <a href="CppOperatorPlus.htm">+</a> " (modified)";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorNotEqual.htm">!=</a> original);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test To<a href="CppXml.htm">Xml</a> and From<a href="CppXml.htm">Xml</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> To<a href="CppXml.htm">Xml</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; d <a href="CppOperatorAssign.htm">=</a> From<a href="CppXml.htm">Xml</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Concept::Test finished successfully");<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/test_pvdbconceptmap.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/test_pvdbconceptmap.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQRegExp.htm">QRegExp</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbclusterfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbcompetency.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedgefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplesfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
<b><a href="CppNamespace.htm">namespace</a></b> pvdb {<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> pvdb::ConceptMap::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Started pvdb::ConceptMap::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Brute force tests<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(pvdb::ConceptMapFactory::GetAllTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt;&amp; m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <a href="CppCopyConstructor.htm">copy constructor</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; c(pvdb::ConceptMapFactory::DeepCopy(m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <a href="CppXml.htm">XML</a> conversions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> To<a href="CppXml.htm">Xml</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; d <a href="CppOperatorAssign.htm">=</a> From<a href="CppXml.htm">Xml</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Can<a href="CppConstructor.htm">Construct</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept(pvdb::ConceptFactory::Create("FOCAL QUESTION"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node <a href="CppOperatorAssign.htm">=</a> NodeFactory::Create(concept,123,234);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Can<a href="CppConstructor.htm">Construct</a>( { node }, {} ) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume focal <a href="CppQuestion.htm">question</a> without examples can be <a href="CppConstructor.htm">construct</a>ed");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept(pvdb::ConceptFactory::Create("FOCAL QUESTION", { {"No",pvdb::Competency::misc},{"examples",pvdb::Competency::misc},{"allowed",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node <a href="CppOperatorAssign.htm">=</a> NodeFactory::Create(concept,123,234);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Can<a href="CppConstructor.htm">Construct</a>( { node }, {} )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume focal <a href="CppQuestion.htm">question</a> with examples can be <a href="CppConstructor.htm">construct</a>ed"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<b><a href="CppFor.htm">for</a></b> example, when creating a sub-concept map");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>HasSameContent<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_a(pvdb::NodeFactory::Create("FOCAL QUESTION"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node_a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_b(pvdb::NodeFactory::GetTests().at(1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node_b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c(pvdb::NodeFactory::GetTests().at(2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(node_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("FOCAL QUESTION"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::GetTests().at(1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::GetTests().at(2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_a-&gt;GetNodes().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_a-&gt;GetNodes().at(0)-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_a-&gt;GetNodes().at(0)-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_a-&gt;GetNodes().at(0)-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().size() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_b(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("FOCAL QUESTION"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::GetTests().at(1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::GetTests().at(2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_b-&gt;GetNodes().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_b-&gt;GetNodes().at(0)-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_b-&gt;GetNodes().at(0)-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_b-&gt;GetNodes().at(0)-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().size() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(map_a,map_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_a <a href="CppOperatorNotEqual.htm">!=</a> map_b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_c(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("FOCAL QUESTION"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::GetTests().at(1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::GetTests().at(2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::GetTests().at(2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasSameContent(map_a,map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasSameContent(map_b,map_c));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_a(pvdb::ConceptFactory::Create("FOCAL QUESTION"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_b(pvdb::ConceptFactory::Create("1", { {"2",pvdb::Competency::misc},{"3",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_c(pvdb::ConceptFactory::Create();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create("FOCAL QUESTION"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("4", { {"5",pvdb::Competency::misc},{"6",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("1", { {"2",pvdb::Competency::misc},{"3",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_a(pvdb::NodeFactory::Create(concept_a,123,234));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_b(pvdb::NodeFactory::Create(concept_b,321,432));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c(pvdb::NodeFactory::Create(concept_c,345,456));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_d(pvdb::NodeFactory::Create(concept_d,567,678));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_e(pvdb::NodeFactory::Create(concept_e,789,890));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_f();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_f(pvdb::NodeFactory::Create(concept_f,901,012));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("FOCAL QUESTION"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::GetTests().at(1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("4", { {"5",pvdb::Competency::misc},{"6",pvdb::Competency::misc} },345,456)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_b(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("FOCAL QUESTION"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::GetTests().at(1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("4", { {"5",pvdb::Competency::misc},{"6",pvdb::Competency::misc} },901,012)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(map_a,map_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_a <a href="CppOperatorNotEqual.htm">!=</a> map_b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_g(pvdb::ConceptFactory::Create("7",{ {"8",pvdb::Competency::misc},{"9",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_g <a href="CppOperatorAssign.htm">=</a> NodeFactory::Create(concept_f,901,012);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_c(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::NodeFactory::Create("FOCAL QUESTION"), node_b, node_g<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasSameContent(map_a,map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasSameContent(map_b,map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_a <a href="CppOperatorNotEqual.htm">!=</a> map_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_b <a href="CppOperatorNotEqual.htm">!=</a> map_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_a(pvdb::ConceptFactory::Create("FOCAL QUESTION"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_b(pvdb::ConceptFactory::Create("1",{{"2",pvdb::Competency::misc},{"3",pvdb::Competency::misc}}));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_c(pvdb::ConceptFactory::Create("4",{{"5",pvdb::Competency::misc},{"6",pvdb::Competency::misc}}));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create("FOCAL QUESTION"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::Create("4",{{"5",pvdb::Competency::misc},{"6",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::Create("1",{{"2",pvdb::Competency::misc},{"3",pvdb::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_a(pvdb::NodeFactory::Create(concept_a,123,234));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_b(pvdb::NodeFactory::Create(concept_b,123,234));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c(pvdb::NodeFactory::Create(concept_c,345,456));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_d(pvdb::NodeFactory::Create(concept_d,567,678));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_e(pvdb::NodeFactory::Create(concept_e,789,890));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_f(pvdb::NodeFactory::Create(concept_f,901,012));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_a(pvdb::ConceptMapFactory::Create( { node_a, node_b, node_c } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_b(pvdb::ConceptMapFactory::Create( { node_d, node_f, node_e } )); <a href="CppComment.htm">//</a>Swap e and f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(map_a,map_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_a <a href="CppOperatorNotEqual.htm">!=</a> map_b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_c(pvdb::ConceptMapFactory::Create( { node_d, node_d, node_d } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasSameContent(map_a,map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasSameContent(map_b,map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_a <a href="CppOperatorNotEqual.htm">!=</a> map_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_b <a href="CppOperatorNotEqual.htm">!=</a> map_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_n11(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_n12(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_n13(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_n21(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_n22(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_n23(pvdb::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_11(pvdb::NodeFactory::Create(concept_n11,123,234));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_12(pvdb::NodeFactory::Create(concept_n12,321,432));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_13(pvdb::NodeFactory::Create(concept_n13,345,456));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_21(pvdb::NodeFactory::Create(concept_n21,567,678));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_22(pvdb::NodeFactory::Create(concept_n22,789,890));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_23(pvdb::NodeFactory::Create(concept_n23,901,012));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e11(pvdb::ConceptFactory::Create("9"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e12(pvdb::ConceptFactory::Create("8"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e13(pvdb::ConceptFactory::Create("7"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e21(pvdb::ConceptFactory::Create("9"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e22(pvdb::ConceptFactory::Create("8"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e23(pvdb::ConceptFactory::Create("7"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_11(pvdb::EdgeFactory::Create(concept_e11,1.2,3.4,0,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_12(pvdb::EdgeFactory::Create(concept_e12,2.3,4.5,0,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_13(pvdb::EdgeFactory::Create(concept_e13,3.4,5.6,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_21(pvdb::EdgeFactory::Create(concept_e21,4.5,6.7,0,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_22(pvdb::EdgeFactory::Create(concept_e22,5.6,7.8,0,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_23(pvdb::EdgeFactory::Create(concept_e23,6.7,8.9,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_a(pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_11, node_12, node_13 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_11, edge_12, edge_13 }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_b(pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_21, node_22, node_23 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_21, edge_22, edge_23 }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(map_a,map_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_a <a href="CppOperatorNotEqual.htm">!=</a> map_b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_c(pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_21, node_22, node_23 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_21, edge_22 }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasSameContent(map_a,map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasSameContent(map_b,map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_a <a href="CppOperatorNotEqual.htm">!=</a> map_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_b <a href="CppOperatorNotEqual.htm">!=</a> map_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_n21(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_n22(pvdb::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_n23(pvdb::ConceptFactory::Create("2"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_21(pvdb::NodeFactory::Create(concept_n21,123,234));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_22(pvdb::NodeFactory::Create(concept_n22,321,432));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_23(pvdb::NodeFactory::Create(concept_n23,345,456));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e21(pvdb::ConceptFactory::Create("2-&gt;3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e22(pvdb::ConceptFactory::Create("1-&gt;2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e23(pvdb::ConceptFactory::Create("1-&gt;3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_21(pvdb::EdgeFactory::Create(concept_e21,1.2,3.4,2,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_22(pvdb::EdgeFactory::Create(concept_e22,2.3,4.5,0,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_23(pvdb::EdgeFactory::Create(concept_e23,3.4,4.5,0,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_n11(pvdb::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_n12(pvdb::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_n13(pvdb::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_11(pvdb::NodeFactory::Create(concept_n11,123,234));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_12(pvdb::NodeFactory::Create(concept_n12,321,432));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_13(pvdb::NodeFactory::Create(concept_n13,345,456));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e11(pvdb::ConceptFactory::Create("1-&gt;2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e12(pvdb::ConceptFactory::Create("1-&gt;3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e13(pvdb::ConceptFactory::Create("2-&gt;3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_11(pvdb::EdgeFactory::Create(concept_e11,1.2,3.4,0,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_12(pvdb::EdgeFactory::Create(concept_e12,2.3,4.5,0,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_13(pvdb::EdgeFactory::Create(concept_e13,3.4,5.6,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_a(pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_11, node_12, node_13 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_11, edge_12, edge_13 }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; map_b(pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_21, node_22, node_23 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_21, edge_22, edge_23 }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSameContent(map_a,map_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(map_a <a href="CppOperatorNotEqual.htm">!=</a> map_b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(pvdb::ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt; a(pvdb::ConceptMapFactory::DeepCopy(v[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> v[i]); <a href="CppAssert.htm">assert</a>(v[i] <a href="CppOperatorEqual.htm">==</a> a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt; b(pvdb::ConceptMapFactory::DeepCopy(v[j]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> v[j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pvdb::ConceptMap::HasSameContent(a,b))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Testing concept maps #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " and #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> j <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " must not be the same";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!pvdb::ConceptMap::HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorNotEqual.htm">!=</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("ConceptMap::Test: heteromorphous testing concept maps are successfully identified as being different");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test simple homomorphous maps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(pvdb::ConceptMapFactory::GetSimpleHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt; a(pvdb::ConceptMapFactory::DeepCopy(v[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt; b(pvdb::ConceptMapFactory::DeepCopy(v[j]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> v[j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!pvdb::ConceptMap::HasSameContent(a,b))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Testing simple concept maps #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " and #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> j <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " must be homomorphous";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorNotEqual.htm">!=</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("ConceptMap::Test: simple homomorphous testing concept maps are successfully identified as being different, yet homomorphous");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test complex homomorphous maps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Const(pvdb::ConceptMapFactory::GetComplexHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt; a(pvdb::ConceptMapFactory::DeepCopy(v[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> pvdb::ConceptMap&gt; b(pvdb::ConceptMapFactory::DeepCopy(v[j]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> v[j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!pvdb::ConceptMap::HasSameContent(a,b))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Testing complex concept maps #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " and #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> j <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " must be homomorphous";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorNotEqual.htm">!=</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("ConceptMap::Test: complex homomorphous testing concept maps are successfully identified as being different, yet homomorphous");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>OLD NOTE: There is no perfect check <b><a href="CppFor.htm">for</a></b> shuffled, yet homomorphous concept maps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>LATER NOTE: Yet, I cannot think of an example that wouldn't get caught<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;so perhaps the check _is_ perfect?<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Con<a href="CppVersion.htm">version</a> from Cluster<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; &gt; clusters <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount_if.htm">std::count_if</a>(clusters.begin(),clusters.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> !p; } ) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAll_of.htm">std::all_of</a>(clusters.begin(),clusters.end(),[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt;&amp; p) { <b><a href="CppReturn.htm">return</a></b> p; } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(clusters.begin(),clusters.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; &amp; cluster)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; m(pvdb::ConceptMapFactory::CreateFromCluster("Focal <a href="CppQuestion.htm">question</a>",cluster));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMap::To<a href="CppXml.htm">Xml</a>(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; n <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMap::From<a href="CppXml.htm">Xml</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m <a href="CppOperatorEqual.htm">==</a> n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CreateSubs<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> maps <a href="CppOperatorAssign.htm">=</a> ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; n_subs_expected <a href="CppOperatorAssign.htm">=</a> { 1,2,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5 } ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic_assert.htm">static_assert</a></b>(maps.size() <a href="CppOperatorEqual.htm">==</a> 16);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_subs_expected.size() <a href="CppOperatorEqual.htm">==</a> 17);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_subs_expected[ 0] <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_subs_expected[ 1] <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_subs_expected[ 2] <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_subs_expected[ 6] <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_subs_expected[ 7] <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_subs_expected[14] <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_subs_expected[15] <a href="CppOperatorEqual.htm">==</a> 5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(n_subs_expected[16] <a href="CppOperatorEqual.htm">==</a> 5);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maps.size() <a href="CppOperatorEqual.htm">==</a> n_subs_expected.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(n_subs_expected.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; map <a href="CppOperatorAssign.htm">=</a> maps[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; subs <a href="CppOperatorAssign.htm">=</a> map-&gt;CreateSubs();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(subs.size()) <a href="CppOperatorNotEqual.htm">!=</a> n_subs_expected[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(subs.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(n_subs_expected[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(subs.size()) <a href="CppOperatorEqual.htm">==</a> n_subs_expected[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ConceptMap::Test finished successfully");<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> PVDB_KEEP_NAMESPACE_IN_CPP_<a href="CppCfile.htm">FILE</a>S<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> pvdb<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/test_qtpvdbconceptmapdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/test_qtpvdbconceptmapdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbclusterfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbcluster.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconcept.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedgefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbedge.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbexamplefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbfile.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnodefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbnode.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconcepteditdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmap<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbedgeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbnodeitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If <b><a href="CppThis.htm">this</a></b> dialog is fed with a file with only a focal <a href="CppQuestion.htm">question</a>, it will create a one-node concept map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> "TESTQUESTION";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(<b><a href="CppNew.htm">new</a></b> pvdb::File);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(pvdb::ConceptMapFactory::Create(<a href="CppQuestion.htm">question</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap()-&gt;GetNodes().size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If <b><a href="CppThis.htm">this</a></b> dialog is fed with a file with a cluster and without a concept map (that is, one node (the focal <a href="CppQuestion.htm">question</a>) only_<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>it will create a concept map from the cluster<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> "TESTQUESTION";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(<b><a href="CppNew.htm">new</a></b> pvdb::File);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(pvdb::ConceptMapFactory::Create(<a href="CppQuestion.htm">question</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_a(pvdb::ConceptFactory::Create("Concept A"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster(pvdb::ClusterFactory::Create( { concept_a } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetCluster(cluster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> cluster-&gt;Get().size() <a href="CppOperatorPlus.htm">+</a> 1); <a href="CppComment.htm">//</a>+1 because of focus <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> "TESTQUESTION";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(<b><a href="CppNew.htm">new</a></b> pvdb::File);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::GetTest( {0,1,2} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetCluster(cluster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cluster-&gt;Get().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(pvdb::ConceptMapFactory::Create(<a href="CppQuestion.htm">question</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> cluster-&gt;Get().size() <a href="CppOperatorPlus.htm">+</a> 1); <a href="CppComment.htm">//</a>+1 because of focus <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap()-&gt;GetEdges().size() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If <b><a href="CppThis.htm">this</a></b> dialog is fed with a file with a cluster and a concept map<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>it will read the concept map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> "TESTQUESTION";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(<b><a href="CppNew.htm">new</a></b> pvdb::File);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Cluster&gt; cluster <a href="CppOperatorAssign.htm">=</a> pvdb::ClusterFactory::GetTest( { 0,1,2 } );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetCluster(cluster);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::Create("Concept F"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::GetTests().at(3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::GetTests().at(4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_a(pvdb::NodeFactory::Create(<a href="CppQuestion.htm">question</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_b(pvdb::NodeFactory::GetTests().at(3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c(pvdb::NodeFactory::GetTests().at(4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_d,1.2,3.4,0,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_e,2.3,4.5,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_f,3.4,5.6,2,<b><a href="CppFalse.htm">false</a></b>,0,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_a, node_b, node_c },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetConceptMap(concept_map);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> concept_map-&gt;GetNodes().size() ); <a href="CppComment.htm">//</a>+0 because focus <a href="CppQuestion.htm">question</a> is node[0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap()-&gt;GetEdges().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> concept_map-&gt;GetEdges().size());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If <b><a href="CppThis.htm">this</a></b> dialog is fed with a file without a cluster, but with concept map<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>it will read the concept map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> "TESTQUESTION";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(<b><a href="CppNew.htm">new</a></b> pvdb::File);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::GetTests().at(0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::GetTests().at(1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::GetTests().at(2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_a(pvdb::NodeFactory::Create(<a href="CppQuestion.htm">question</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_b(pvdb::NodeFactory::GetTests().at(1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c(pvdb::NodeFactory::GetTests().at(1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_d,1.2,3.4,0,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_e,2.3,4.5,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_f,3.4,5.6,2,<b><a href="CppFalse.htm">false</a></b>,0,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_a, node_b, node_c },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetConceptMap(concept_map);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map_out<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> d.Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map_out-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> concept_map-&gt;GetNodes().size() ); <a href="CppComment.htm">//</a>+0 because focus <a href="CppQuestion.htm">question</a> is node[0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map_out-&gt;GetEdges().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> concept_map-&gt;GetEdges().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(concept_map,concept_map_out));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If <b><a href="CppThis.htm">this</a></b> dialog is fed with a file without a cluster, but with concept map<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>it will read the concept map and alter the node positions. If the dialog is<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>fed with <b><a href="CppThis.htm">this</a></b> second concept map, it will keep the nodes in the same place<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> "TESTQUESTION";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(<b><a href="CppNew.htm">new</a></b> pvdb::File);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_d(pvdb::ConceptFactory::GetTests().at(0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_e(pvdb::ConceptFactory::GetTests().at(1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Concept&gt; concept_f(pvdb::ConceptFactory::GetTests().at(2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_a(pvdb::NodeFactory::Create(<a href="CppQuestion.htm">question</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_b(pvdb::NodeFactory::GetTests().at(1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Node&gt; node_c(pvdb::NodeFactory::GetTests().at(1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_a(pvdb::EdgeFactory::Create(concept_d,1.2,3.4,0,<b><a href="CppFalse.htm">false</a></b>,1,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_b(pvdb::EdgeFactory::Create(concept_e,2.3,4.5,1,<b><a href="CppFalse.htm">false</a></b>,2,<b><a href="CppTrue.htm">true</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::Edge&gt; edge_c(pvdb::EdgeFactory::Create(concept_f,3.4,5.6,2,<b><a href="CppFalse.htm">false</a></b>,0,<b><a href="CppTrue.htm">true</a></b>));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvdb::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_a, node_b, node_c },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_a, edge_b, edge_c }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetConceptMap(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the dialog position the nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; concept_map_out<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> d.Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map_out-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> concept_map-&gt;GetNodes().size() ); <a href="CppComment.htm">//</a>+0 because focus <a href="CppQuestion.htm">question</a> is node[0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map_out-&gt;GetEdges().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> concept_map-&gt;GetEdges().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(concept_map,concept_map_out));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(concept_map <a href="CppOperatorNotEqual.htm">!=</a> concept_map_out<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppQt.htm">Qt</a>ConceptMapDialog repositions the nodes");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Save the repositioned nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;Save(pvdb::File::GetTestFileName());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Load the repositioned nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file_again <a href="CppOperatorAssign.htm">=</a> pvdb::File::Load(pvdb::File::GetTestFileName());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(file-&gt;GetConceptMap(),file_again-&gt;GetConceptMap()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap() <a href="CppOperatorEqual.htm">==</a> file_again-&gt;GetConceptMap()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Save and load must yield identical concept maps");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let another dialog keep the node positions in the same place<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d_again(file_again);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file-&gt;GetConceptMap() <a href="CppOperatorEqual.htm">==</a> file_again-&gt;GetConceptMap()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog must not reposition concept maps");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(pvdb::File::GetTestFileName().c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::File::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt;&amp; file)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (file-&gt;GetConceptMap()-&gt;GetNodes().size() &gt; 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> file-&gt;GetCluster()-&gt;Empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; file_concept_map <a href="CppOperatorAssign.htm">=</a> file-&gt;GetConceptMap();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Will the concept map remain the same after writing and reading<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog&gt; dialog(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapDialog(file));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog-&gt;Get<a href="CppWidget.htm">Widget</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; dialog_concept_map <a href="CppOperatorAssign.htm">=</a> dialog-&gt;Get<a href="CppWidget.htm">Widget</a>()-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog_concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!pvdb::ConceptMap::HasSameContent(dialog_concept_map,file_concept_map))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(pvdb::ConceptMap::To<a href="CppXml.htm">Xml</a>(file_concept_map));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(pvdb::ConceptMap::To<a href="CppXml.htm">Xml</a>(dialog_concept_map));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(dialog_concept_map,file_concept_map)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "ConceptMap written must have the same content as the ConceptMap read");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>When putting in each of the heteromorphous concept maps, shuffling it, saving it, loading<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>it, the resulting concept map must be homomorphous with the input map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put a concept maps in dialog, shuffle it, saving it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file(<b><a href="CppNew.htm">new</a></b> pvdb::File);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file-&gt;SetConceptMap(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog d(file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Shuffle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Save(pvdb::File::GetTestFileName());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>loading it, the resulting concept map must be homomorphous with the input map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::File&gt; file <a href="CppOperatorAssign.htm">=</a> pvdb::File::Load(pvdb::File::GetTestFileName());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(file-&gt;GetConceptMap(),v[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(pvdb::File::GetTestFileName().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If the relation is moved, the <b><a href="CppNew.htm">new</a></b> locations must be saved<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Done with Shuffle above<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbConceptMapDialog::Test completed successfully");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/test_qtpvdbconceptmapeditwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/test_qtpvdbconceptmapeditwidget.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmapedit<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test cloning<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <a href="CppBaseClass.htm">base class</a> (after having tested cloning of derived <b><a href="CppClass.htm">class</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; <a href="CppWidget.htm">widget</a>(<b><a href="CppNew.htm">new</a></b> This_t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::Test(<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbConceptMapEdit<a href="CppWidget.htm">Widget</a>::Test finished successfully");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/test_qtpvdbconceptmapratewidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/test_qtpvdbconceptmapratewidget.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmaprate<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <a href="CppBaseClass.htm">base class</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt; <a href="CppWidget.htm">widget</a>(<b><a href="CppNew.htm">new</a></b> This_t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::Test(<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a> w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetAllTests().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>w.ReadFromConceptMap(<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbConceptMapRate<a href="CppWidget.htm">Widget</a>::Test finished successfully");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/test_qtpvdbconceptmapwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/test_qtpvdbconceptmapwidget.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale C<a href="CppOperatorIncrement.htm">++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110<br/>
<a href="CppInclude.htm">#include</a> "qtpvdbconceptmap<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmap.h"<br/>
<a href="CppInclude.htm">#include</a> "pvdbconceptmapfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::Test(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>&gt;&amp; <a href="CppWidget.htm">widget</a>)<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Started <a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test conversion between <a href="CppWidget.htm">widget</a> and concept map <b><a href="CppFor.htm">for</a></b> simple homomorphous concept maps<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetSimpleHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> w <a href="CppOperatorAssign.htm">=</a> <a href="CppWidget.htm">widget</a>-&gt;CreateNewDerived();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w-&gt;ReadFromConceptMap(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; n <a href="CppOperatorAssign.htm">=</a> w-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!pvdb::ConceptMap::HasSameContent(v[i],n))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("GetSimpleHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(v[i],n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test conversion between <a href="CppWidget.htm">widget</a> and concept map <b><a href="CppFor.htm">for</a></b> complex homomorphous concept maps<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetComplexHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> w <a href="CppOperatorAssign.htm">=</a> <a href="CppWidget.htm">widget</a>-&gt;CreateNewDerived();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w-&gt;ReadFromConceptMap(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; n <a href="CppOperatorAssign.htm">=</a> w-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!pvdb::ConceptMap::HasSameContent(v[i],n))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("GetComplexHomomorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(v[i],n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test conversion between <a href="CppWidget.htm">widget</a> and concept map <b><a href="CppFor.htm">for</a></b> heteromorphous concept maps<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> w <a href="CppOperatorAssign.htm">=</a> <a href="CppWidget.htm">widget</a>-&gt;CreateNewDerived();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w-&gt;ReadFromConceptMap(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; n <a href="CppOperatorAssign.htm">=</a> w-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!pvdb::ConceptMap::HasSameContent(v[i],n))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("GetHeteromorphous<a href="ToolTestConceptMap.htm">TestConceptMap</a>s");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(v[i],n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test conversion between <a href="CppWidget.htm">widget</a> and concept map <b><a href="CppFor.htm">for</a></b> brute-force concept map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; &gt; maps <a href="CppOperatorAssign.htm">=</a> pvdb::ConceptMapFactory::GetAllTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(maps.begin(),maps.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<a href="CppWidget.htm">widget</a>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt;&amp; m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> w <a href="CppOperatorAssign.htm">=</a> <a href="CppWidget.htm">widget</a>-&gt;CreateNewDerived();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w-&gt;ReadFromConceptMap(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;pvdb::ConceptMap&gt; n <a href="CppOperatorAssign.htm">=</a> w-&gt;WriteToConceptMap();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pvdb::ConceptMap::HasSameContent(m,n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppQt.htm">Qt</a>PvdbConceptMap<a href="CppWidget.htm">Widget</a>::Test finished successfully");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/crosscompiletowindows.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/crosscompiletowindows.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
#From http://richelbilderbeek.nl/CppQtCrosscompileToWindowsExample15.htm<br/>
<br/>
echo "Cross compiling to Windows: developer version"<br/>
<br/>
echo "1/2: Creating Windows makefile"<br/>
i686-pc-mingw32-qmake ProjectVanDenBogaart.pro<br/>
<br/>
echo "2/2: making makefile"<br/>
<br/>
make<br/>
<br/>
echo "Done cross compiling, starting Windows executable using Wine"<br/>
<br/>
cd release<br/>
<br/>
wine ProjectVanDenBogaart.exe<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/sloccount.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/sloccount.sh" border = "1"><tr><td><code>
sloccount --overhead 1.0 --personcost 22994.56 ../ProjectVanDenBogaart &gt; ProjectVanDenBogaartSloccount.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectVanDenBogaart/zip.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectVanDenBogaart/zip.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
<br/>
echo "Removing user information"<br/>
rm *.user<br/>
<br/>
echo "Removing possible temp file"<br/>
rm copy.txt<br/>
rm tmp.txt<br/>
<br/>
<br/>
echo "Creating of all main folders"<br/>
<br/>
mkdir temp_zip<br/>
mkdir temp_zip/Classes<br/>
mkdir temp_zip/Projects<br/>
mkdir temp_zip/Tools<br/>
<br/>
echo "Creating of all subfolders"<br/>
<br/>
mkdir temp_zip/Classes/CppAbout<br/>
mkdir temp_zip/Classes/CppFuzzy_equal_to<br/>
mkdir temp_zip/Classes/CppLazy_init<br/>
mkdir temp_zip/Classes/CppQtAboutDialog<br/>
mkdir temp_zip/Classes/CppQtArrowItem<br/>
mkdir temp_zip/Classes/CppQtHideAndShowDialog<br/>
mkdir temp_zip/Classes/CppQtKeyboardFriendlyGraphicsView<br/>
mkdir temp_zip/Classes/CppQtLabeledQuadBezierArrowItem<br/>
mkdir temp_zip/Classes/CppQtPathArrowItem<br/>
mkdir temp_zip/Classes/CppQtQuadBezierArrowItem<br/>
mkdir temp_zip/Classes/CppQtRoundedEditRectItem<br/>
mkdir temp_zip/Classes/CppQtRoundedRectItem<br/>
mkdir temp_zip/Classes/CppQtRoundedTextRectItem<br/>
mkdir temp_zip/Classes/CppQtScopedDisable<br/>
mkdir temp_zip/Classes/CppTrace<br/>
mkdir temp_zip/Projects/ProjectVanDenBogaart<br/>
mkdir temp_zip/Tools/ToolStyleSheetSetter<br/>
mkdir temp_zip/Tools/ToolTestQtArrowItems<br/>
mkdir temp_zip/Tools/ToolTestQtRoundedEditRectItem<br/>
mkdir temp_zip/Tools/ToolTestQtRoundedTextRectItem<br/>
<br/>
echo "Copying files"<br/>
<br/>
cp ../../Classes/CppAbout/Licence.txt temp_zip/Classes/CppAbout/Licence.txt<br/>
cp ../../Classes/CppAbout/about.cpp temp_zip/Classes/CppAbout/about.cpp<br/>
cp ../../Classes/CppAbout/about.h temp_zip/Classes/CppAbout/about.h<br/>
cp ../../Classes/CppFuzzy_equal_to/Licence.txt temp_zip/Classes/CppFuzzy_equal_to/Licence.txt<br/>
cp ../../Classes/CppFuzzy_equal_to/fuzzy_equal_to.h temp_zip/Classes/CppFuzzy_equal_to/fuzzy_equal_to.h<br/>
cp ../../Classes/CppLazy_init/Licence.txt temp_zip/Classes/CppLazy_init/Licence.txt<br/>
cp ../../Classes/CppQtAboutDialog/Licence.txt temp_zip/Classes/CppQtAboutDialog/Licence.txt<br/>
cp ../../Classes/CppQtAboutDialog/qtaboutdialog.cpp temp_zip/Classes/CppQtAboutDialog/qtaboutdialog.cpp<br/>
cp ../../Classes/CppQtAboutDialog/qtaboutdialog.h temp_zip/Classes/CppQtAboutDialog/qtaboutdialog.h<br/>
cp ../../Classes/CppQtAboutDialog/qtaboutdialog.ui temp_zip/Classes/CppQtAboutDialog/qtaboutdialog.ui<br/>
cp ../../Classes/CppQtArrowItem/Licence.txt temp_zip/Classes/CppQtArrowItem/Licence.txt<br/>
cp ../../Classes/CppQtArrowItem/qtarrowitem.cpp temp_zip/Classes/CppQtArrowItem/qtarrowitem.cpp<br/>
cp ../../Classes/CppQtArrowItem/qtarrowitem.h temp_zip/Classes/CppQtArrowItem/qtarrowitem.h<br/>
cp ../../Classes/CppQtHideAndShowDialog/Licence.txt temp_zip/Classes/CppQtHideAndShowDialog/Licence.txt<br/>
cp ../../Classes/CppQtHideAndShowDialog/qthideandshowdialog.cpp temp_zip/Classes/CppQtHideAndShowDialog/qthideandshowdialog.cpp<br/>
cp ../../Classes/CppQtHideAndShowDialog/qthideandshowdialog.h temp_zip/Classes/CppQtHideAndShowDialog/qthideandshowdialog.h<br/>
cp ../../Classes/CppQtKeyboardFriendlyGraphicsView/Licence.txt temp_zip/Classes/CppQtKeyboardFriendlyGraphicsView/Licence.txt<br/>
cp ../../Classes/CppQtKeyboardFriendlyGraphicsView/qtkeyboardfriendlygraphicsview.cpp temp_zip/Classes/CppQtKeyboardFriendlyGraphicsView/qtkeyboardfriendlygraphicsview.cpp<br/>
cp ../../Classes/CppQtKeyboardFriendlyGraphicsView/qtkeyboardfriendlygraphicsview.h temp_zip/Classes/CppQtKeyboardFriendlyGraphicsView/qtkeyboardfriendlygraphicsview.h<br/>
cp ../../Classes/CppQtLabeledQuadBezierArrowItem/Licence.txt temp_zip/Classes/CppQtLabeledQuadBezierArrowItem/Licence.txt<br/>
cp ../../Classes/CppQtLabeledQuadBezierArrowItem/qtlabeledquadbezierarrowitem.cpp temp_zip/Classes/CppQtLabeledQuadBezierArrowItem/qtlabeledquadbezierarrowitem.cpp<br/>
cp ../../Classes/CppQtLabeledQuadBezierArrowItem/qtlabeledquadbezierarrowitem.h temp_zip/Classes/CppQtLabeledQuadBezierArrowItem/qtlabeledquadbezierarrowitem.h<br/>
cp ../../Classes/CppQtPathArrowItem/Licence.txt temp_zip/Classes/CppQtPathArrowItem/Licence.txt<br/>
cp ../../Classes/CppQtPathArrowItem/qtpatharrowitem.cpp temp_zip/Classes/CppQtPathArrowItem/qtpatharrowitem.cpp<br/>
cp ../../Classes/CppQtPathArrowItem/qtpatharrowitem.h temp_zip/Classes/CppQtPathArrowItem/qtpatharrowitem.h<br/>
cp ../../Classes/CppQtQuadBezierArrowItem/Licence.txt temp_zip/Classes/CppQtQuadBezierArrowItem/Licence.txt<br/>
cp ../../Classes/CppQtQuadBezierArrowItem/qtquadbezierarrowitem.cpp temp_zip/Classes/CppQtQuadBezierArrowItem/qtquadbezierarrowitem.cpp<br/>
cp ../../Classes/CppQtQuadBezierArrowItem/qtquadbezierarrowitem.h temp_zip/Classes/CppQtQuadBezierArrowItem/qtquadbezierarrowitem.h<br/>
cp ../../Classes/CppQtRoundedEditRectItem/Licence.txt temp_zip/Classes/CppQtRoundedEditRectItem/Licence.txt<br/>
cp ../../Classes/CppQtRoundedEditRectItem/qtroundededitrectitem.cpp temp_zip/Classes/CppQtRoundedEditRectItem/qtroundededitrectitem.cpp<br/>
cp ../../Classes/CppQtRoundedEditRectItem/qtroundededitrectitem.h temp_zip/Classes/CppQtRoundedEditRectItem/qtroundededitrectitem.h<br/>
cp ../../Classes/CppQtRoundedRectItem/Licence.txt temp_zip/Classes/CppQtRoundedRectItem/Licence.txt<br/>
cp ../../Classes/CppQtRoundedRectItem/qtroundedrectitem.cpp temp_zip/Classes/CppQtRoundedRectItem/qtroundedrectitem.cpp<br/>
cp ../../Classes/CppQtRoundedRectItem/qtroundedrectitem.h temp_zip/Classes/CppQtRoundedRectItem/qtroundedrectitem.h<br/>
cp ../../Classes/CppQtRoundedTextRectItem/Licence.txt temp_zip/Classes/CppQtRoundedTextRectItem/Licence.txt<br/>
cp ../../Classes/CppQtRoundedTextRectItem/qtroundedtextrectitem.cpp temp_zip/Classes/CppQtRoundedTextRectItem/qtroundedtextrectitem.cpp<br/>
cp ../../Classes/CppQtRoundedTextRectItem/qtroundedtextrectitem.h temp_zip/Classes/CppQtRoundedTextRectItem/qtroundedtextrectitem.h<br/>
cp ../../Classes/CppQtScopedDisable/Licence.txt temp_zip/Classes/CppQtScopedDisable/Licence.txt<br/>
cp ../../Classes/CppQtScopedDisable/qtscopeddisable.h temp_zip/Classes/CppQtScopedDisable/qtscopeddisable.h<br/>
cp ../../Classes/CppTrace/Licence.txt temp_zip/Classes/CppTrace/Licence.txt<br/>
cp ../../Classes/CppTrace/trace.h temp_zip/Classes/CppTrace/trace.h<br/>
cp ../../Projects/ProjectVanDenBogaart/1.cmp temp_zip/Projects/ProjectVanDenBogaart/1.cmp<br/>
cp ../../Projects/ProjectVanDenBogaart/2.cmp temp_zip/Projects/ProjectVanDenBogaart/2.cmp<br/>
cp ../../Projects/ProjectVanDenBogaart/3.cmp temp_zip/Projects/ProjectVanDenBogaart/3.cmp<br/>
cp ../../Projects/ProjectVanDenBogaart/4.cmp temp_zip/Projects/ProjectVanDenBogaart/4.cmp<br/>
cp ../../Projects/ProjectVanDenBogaart/5.cmp temp_zip/Projects/ProjectVanDenBogaart/5.cmp<br/>
cp ../../Projects/ProjectVanDenBogaart/Cluster.png temp_zip/Projects/ProjectVanDenBogaart/Cluster.png<br/>
cp ../../Projects/ProjectVanDenBogaart/ClusterSkip.png temp_zip/Projects/ProjectVanDenBogaart/ClusterSkip.png<br/>
cp ../../Projects/ProjectVanDenBogaart/ConceptMapEdit.png temp_zip/Projects/ProjectVanDenBogaart/ConceptMapEdit.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicArrow.png temp_zip/Projects/ProjectVanDenBogaart/PicArrow.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicArrow14x14.png temp_zip/Projects/ProjectVanDenBogaart/PicArrow14x14.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicArrow28x28.png temp_zip/Projects/ProjectVanDenBogaart/PicArrow28x28.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicBlue.png temp_zip/Projects/ProjectVanDenBogaart/PicBlue.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicBlue14x14.png temp_zip/Projects/ProjectVanDenBogaart/PicBlue14x14.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicCyan.png temp_zip/Projects/ProjectVanDenBogaart/PicCyan.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicCyan14x14.png temp_zip/Projects/ProjectVanDenBogaart/PicCyan14x14.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicGreen.png temp_zip/Projects/ProjectVanDenBogaart/PicGreen.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicGreen14x14.png temp_zip/Projects/ProjectVanDenBogaart/PicGreen14x14.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicOrange.png temp_zip/Projects/ProjectVanDenBogaart/PicOrange.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicOrange14x14.png temp_zip/Projects/ProjectVanDenBogaart/PicOrange14x14.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicPurple.png temp_zip/Projects/ProjectVanDenBogaart/PicPurple.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicPurple14x14.png temp_zip/Projects/ProjectVanDenBogaart/PicPurple14x14.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicRed.png temp_zip/Projects/ProjectVanDenBogaart/PicRed.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicRed14x14.png temp_zip/Projects/ProjectVanDenBogaart/PicRed14x14.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicWhite.png temp_zip/Projects/ProjectVanDenBogaart/PicWhite.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicWhite14x14.png temp_zip/Projects/ProjectVanDenBogaart/PicWhite14x14.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicYellow.png temp_zip/Projects/ProjectVanDenBogaart/PicYellow.png<br/>
cp ../../Projects/ProjectVanDenBogaart/PicYellow14x14.png temp_zip/Projects/ProjectVanDenBogaart/PicYellow14x14.png<br/>
cp ../../Projects/ProjectVanDenBogaart/ProjectVanDenBogaart.css temp_zip/Projects/ProjectVanDenBogaart/ProjectVanDenBogaart.css<br/>
cp ../../Projects/ProjectVanDenBogaart/ProjectVanDenBogaart.pro temp_zip/Projects/ProjectVanDenBogaart/ProjectVanDenBogaart.pro<br/>
cp ../../Projects/ProjectVanDenBogaart/ProjectVanDenBogaart.qrc temp_zip/Projects/ProjectVanDenBogaart/ProjectVanDenBogaart.qrc<br/>
cp ../../Projects/ProjectVanDenBogaart/ProjectVanDenBogaartArchitecture.lyx~ temp_zip/Projects/ProjectVanDenBogaart/ProjectVanDenBogaartArchitecture.lyx~<br/>
cp ../../Projects/ProjectVanDenBogaart/ProjectVanDenBogaartSloccount.txt temp_zip/Projects/ProjectVanDenBogaart/ProjectVanDenBogaartSloccount.txt<br/>
cp ../../Projects/ProjectVanDenBogaart/R.png temp_zip/Projects/ProjectVanDenBogaart/R.png<br/>
cp ../../Projects/ProjectVanDenBogaart/crosscompiletowindows.sh temp_zip/Projects/ProjectVanDenBogaart/crosscompiletowindows.sh<br/>
cp ../../Projects/ProjectVanDenBogaart/doxygen_config.txt temp_zip/Projects/ProjectVanDenBogaart/doxygen_config.txt<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbcluster.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbcluster.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbcluster.h temp_zip/Projects/ProjectVanDenBogaart/pvdbcluster.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbclusterfactory.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbclusterfactory.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbclusterfactory.h temp_zip/Projects/ProjectVanDenBogaart/pvdbclusterfactory.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbcompetency.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbcompetency.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbcompetency.h temp_zip/Projects/ProjectVanDenBogaart/pvdbcompetency.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbconcept.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbconcept.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbconcept.h temp_zip/Projects/ProjectVanDenBogaart/pvdbconcept.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbconceptfactory.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbconceptfactory.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbconceptfactory.h temp_zip/Projects/ProjectVanDenBogaart/pvdbconceptfactory.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbconceptmap.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbconceptmap.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbconceptmap.h temp_zip/Projects/ProjectVanDenBogaart/pvdbconceptmap.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbconceptmapfactory.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbconceptmapfactory.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbconceptmapfactory.h temp_zip/Projects/ProjectVanDenBogaart/pvdbconceptmapfactory.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbedge.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbedge.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbedge.h temp_zip/Projects/ProjectVanDenBogaart/pvdbedge.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbedgefactory.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbedgefactory.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbedgefactory.h temp_zip/Projects/ProjectVanDenBogaart/pvdbedgefactory.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbexample.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbexample.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbexample.h temp_zip/Projects/ProjectVanDenBogaart/pvdbexample.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbexamplefactory.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbexamplefactory.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbexamplefactory.h temp_zip/Projects/ProjectVanDenBogaart/pvdbexamplefactory.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbexamples.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbexamples.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbexamples.h temp_zip/Projects/ProjectVanDenBogaart/pvdbexamples.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbexamplesfactory.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbexamplesfactory.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbexamplesfactory.h temp_zip/Projects/ProjectVanDenBogaart/pvdbexamplesfactory.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbfile.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbfile.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbfile.h temp_zip/Projects/ProjectVanDenBogaart/pvdbfile.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbfilefactory.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbfilefactory.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbfilefactory.h temp_zip/Projects/ProjectVanDenBogaart/pvdbfilefactory.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbfwd.h temp_zip/Projects/ProjectVanDenBogaart/pvdbfwd.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbhelper.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbhelper.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbhelper.h temp_zip/Projects/ProjectVanDenBogaart/pvdbhelper.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbhints.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbhints.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbhints.h temp_zip/Projects/ProjectVanDenBogaart/pvdbhints.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbmenudialog.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbmenudialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbmenudialog.h temp_zip/Projects/ProjectVanDenBogaart/pvdbmenudialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbnode.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbnode.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbnode.h temp_zip/Projects/ProjectVanDenBogaart/pvdbnode.h<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbnodefactory.cpp temp_zip/Projects/ProjectVanDenBogaart/pvdbnodefactory.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/pvdbnodefactory.h temp_zip/Projects/ProjectVanDenBogaart/pvdbnodefactory.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtmain.cpp temp_zip/Projects/ProjectVanDenBogaart/qtmain.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtmain_testconceptmap.cpp temp_zip/Projects/ProjectVanDenBogaart/qtmain_testconceptmap.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtmainassessor.cpp temp_zip/Projects/ProjectVanDenBogaart/qtmainassessor.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtmainstudent.cpp temp_zip/Projects/ProjectVanDenBogaart/qtmainstudent.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbaboutdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbaboutdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbaboutdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbaboutdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbassessormenudialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbassessormenudialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbassessormenudialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbassessormenudialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbassessormenudialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbassessormenudialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbbrushfactory.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbbrushfactory.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbbrushfactory.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbbrushfactory.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbcenternodeitem.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbcenternodeitem.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbcenternodeitem.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbcenternodeitem.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbclusterdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbclusterdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbclusterdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbclusterdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbclusterdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbclusterdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbclusterwidget.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbclusterwidget.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbclusterwidget.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbclusterwidget.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbcompetency.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbcompetency.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbcompetency.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbcompetency.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconcepteditdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconcepteditdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconcepteditdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconcepteditdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconcepteditdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconcepteditdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptitem.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptitem.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptitem.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptitem.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapdesignerwidget.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapdesignerwidget.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapdisplaywidget.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapdisplaywidget.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapdisplaywidget.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapdisplaywidget.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapeditwidget.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapeditwidget.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapeditwidget.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapeditwidget.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapitem.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapitem.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapitem.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapitem.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapratewidget.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapratewidget.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapratewidget.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapratewidget.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapwidget.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapwidget.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbconceptmapwidget.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbconceptmapwidget.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentcompletedialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentcompletedialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentcompletedialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentcompletedialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentcompletedialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentcompletedialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentmenudialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentmenudialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentmenudialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentmenudialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentmenudialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentmenudialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentpartialdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentpartialdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentpartialdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentpartialdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentpartialdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbcreateassessmentpartialdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbdisplayconceptitem.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbdisplayconceptitem.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbdisplayconceptitem.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbdisplayconceptitem.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbedgeitem.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbedgeitem.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbedgeitem.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbedgeitem.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbeditconceptitem.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbeditconceptitem.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbeditconceptitem.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbeditconceptitem.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbexamplesitem.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbexamplesitem.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbexamplesitem.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbexamplesitem.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbitemhighlighter.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbitemhighlighter.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbitemhighlighter.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbitemhighlighter.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbmenudialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbmenudialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbmenudialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbmenudialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbmenudialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbmenudialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbnewarrow.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbnewarrow.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbnewarrow.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbnewarrow.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbnodeitem.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbnodeitem.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbnodeitem.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbnodeitem.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdboverviewdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdboverviewdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdboverviewdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdboverviewdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdboverviewwidget.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdboverviewwidget.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdboverviewwidget.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdboverviewwidget.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbprintconceptmapdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbprintconceptmapdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbprintconceptmapdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbprintconceptmapdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbprintconceptmapdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbprintconceptmapdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbprintratingdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbprintratingdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbprintratingdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbprintratingdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbprintratingdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbprintratingdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbrateconceptdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbrateconceptdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbrateconceptdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbrateconceptdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbrateconceptdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbrateconceptdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbrateconceptitem.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbrateconceptitem.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbrateconceptitem.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbrateconceptitem.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbrateconceptmapdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbrateconceptmapdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbrateconceptmapdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbrateconceptmapdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbrateconceptmapdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbrateconceptmapdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbrateexamplesdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbrateexamplesdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbrateexamplesdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbrateexamplesdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbrateexamplesdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbrateexamplesdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbratingdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbratingdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbratingdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbratingdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbratingdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbratingdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbstudentmenudialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbstudentmenudialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbstudentmenudialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbstudentmenudialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbstudentmenudialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbstudentmenudialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbstudentstartcompletedialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbstudentstartcompletedialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbstudentstartcompletedialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbstudentstartcompletedialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbstudentstartcompletedialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbstudentstartcompletedialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestconceptitemdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestconceptitemdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestconceptitemdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestconceptitemdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestconceptitemdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestconceptitemdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestconceptmapeditwidgetdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestconceptmapeditwidgetdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestconceptmapeditwidgetdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestconceptmapeditwidgetdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestconceptmapeditwidgetdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestconceptmapeditwidgetdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestconceptmapratewidgetdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestconceptmapratewidgetdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestconceptmapratewidgetdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestconceptmapratewidgetdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestconceptmapratewidgetdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestconceptmapratewidgetdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestedgeitemdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestedgeitemdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestedgeitemdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestedgeitemdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestedgeitemdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestedgeitemdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestnodeitemdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestnodeitemdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestnodeitemdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestnodeitemdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtestnodeitemdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtestnodeitemdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtoolsitem.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtoolsitem.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbtoolsitem.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbtoolsitem.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbviewfilesdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbviewfilesdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbviewfilesdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbviewfilesdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbviewfilesdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbviewfilesdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbviewtestsdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/qtpvdbviewtestsdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbviewtestsdialog.h temp_zip/Projects/ProjectVanDenBogaart/qtpvdbviewtestsdialog.h<br/>
cp ../../Projects/ProjectVanDenBogaart/qtpvdbviewtestsdialog.ui temp_zip/Projects/ProjectVanDenBogaart/qtpvdbviewtestsdialog.ui<br/>
cp ../../Projects/ProjectVanDenBogaart/sloccount.sh temp_zip/Projects/ProjectVanDenBogaart/sloccount.sh<br/>
cp ../../Projects/ProjectVanDenBogaart/test_pvdbcluster.cpp temp_zip/Projects/ProjectVanDenBogaart/test_pvdbcluster.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/test_pvdbconcept.cpp temp_zip/Projects/ProjectVanDenBogaart/test_pvdbconcept.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/test_pvdbconceptmap.cpp temp_zip/Projects/ProjectVanDenBogaart/test_pvdbconceptmap.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/test_qtpvdbconceptmapdialog.cpp temp_zip/Projects/ProjectVanDenBogaart/test_qtpvdbconceptmapdialog.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/test_qtpvdbconceptmapeditwidget.cpp temp_zip/Projects/ProjectVanDenBogaart/test_qtpvdbconceptmapeditwidget.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/test_qtpvdbconceptmapratewidget.cpp temp_zip/Projects/ProjectVanDenBogaart/test_qtpvdbconceptmapratewidget.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/test_qtpvdbconceptmapwidget.cpp temp_zip/Projects/ProjectVanDenBogaart/test_qtpvdbconceptmapwidget.cpp<br/>
cp ../../Projects/ProjectVanDenBogaart/zip.sh temp_zip/Projects/ProjectVanDenBogaart/zip.sh<br/>
cp ../../Tools/ToolStyleSheetSetter/R.png temp_zip/Tools/ToolStyleSheetSetter/R.png<br/>
cp ../../Tools/ToolStyleSheetSetter/ToolStyleSheetSetter.qrc temp_zip/Tools/ToolStyleSheetSetter/ToolStyleSheetSetter.qrc<br/>
cp ../../Tools/ToolStyleSheetSetter/toolstylesheetsettermaindialog.cpp temp_zip/Tools/ToolStyleSheetSetter/toolstylesheetsettermaindialog.cpp<br/>
cp ../../Tools/ToolStyleSheetSetter/toolstylesheetsettermaindialog.h temp_zip/Tools/ToolStyleSheetSetter/toolstylesheetsettermaindialog.h<br/>
cp ../../Tools/ToolStyleSheetSetter/toolstylesheetsettermaindialog.ui temp_zip/Tools/ToolStyleSheetSetter/toolstylesheetsettermaindialog.ui<br/>
cp ../../Tools/ToolTestQtArrowItems/Licence.txt temp_zip/Tools/ToolTestQtArrowItems/Licence.txt<br/>
cp ../../Tools/ToolTestQtArrowItems/R.png temp_zip/Tools/ToolTestQtArrowItems/R.png<br/>
cp ../../Tools/ToolTestQtArrowItems/ToolTestQtArrowItems.png temp_zip/Tools/ToolTestQtArrowItems/ToolTestQtArrowItems.png<br/>
cp ../../Tools/ToolTestQtArrowItems/ToolTestQtArrowItems.qrc temp_zip/Tools/ToolTestQtArrowItems/ToolTestQtArrowItems.qrc<br/>
cp ../../Tools/ToolTestQtArrowItems/crosscompiletowindows.sh temp_zip/Tools/ToolTestQtArrowItems/crosscompiletowindows.sh<br/>
cp ../../Tools/ToolTestQtArrowItems/qttestqtarrowitemsmaindialog.cpp temp_zip/Tools/ToolTestQtArrowItems/qttestqtarrowitemsmaindialog.cpp<br/>
cp ../../Tools/ToolTestQtArrowItems/qttestqtarrowitemsmaindialog.h temp_zip/Tools/ToolTestQtArrowItems/qttestqtarrowitemsmaindialog.h<br/>
cp ../../Tools/ToolTestQtArrowItems/qttestqtarrowitemsmaindialog.ui temp_zip/Tools/ToolTestQtArrowItems/qttestqtarrowitemsmaindialog.ui<br/>
cp ../../Tools/ToolTestQtArrowItems/qttestqtarrowitemsmenudialog.cpp temp_zip/Tools/ToolTestQtArrowItems/qttestqtarrowitemsmenudialog.cpp<br/>
cp ../../Tools/ToolTestQtArrowItems/qttestqtarrowitemsmenudialog.h temp_zip/Tools/ToolTestQtArrowItems/qttestqtarrowitemsmenudialog.h<br/>
cp ../../Tools/ToolTestQtArrowItems/qttestqtarrowitemsmenudialog.ui temp_zip/Tools/ToolTestQtArrowItems/qttestqtarrowitemsmenudialog.ui<br/>
cp ../../Tools/ToolTestQtArrowItems/testqtarrowitemsmenudialog.cpp temp_zip/Tools/ToolTestQtArrowItems/testqtarrowitemsmenudialog.cpp<br/>
cp ../../Tools/ToolTestQtArrowItems/testqtarrowitemsmenudialog.h temp_zip/Tools/ToolTestQtArrowItems/testqtarrowitemsmenudialog.h<br/>
cp ../../Tools/ToolTestQtRoundedEditRectItem/Licence.txt temp_zip/Tools/ToolTestQtRoundedEditRectItem/Licence.txt<br/>
cp ../../Tools/ToolTestQtRoundedEditRectItem/R.png temp_zip/Tools/ToolTestQtRoundedEditRectItem/R.png<br/>
cp ../../Tools/ToolTestQtRoundedEditRectItem/ToolTestQtRoundedEditRectItem.qrc temp_zip/Tools/ToolTestQtRoundedEditRectItem/ToolTestQtRoundedEditRectItem.qrc<br/>
cp ../../Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemmaindialog.cpp temp_zip/Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemmaindialog.cpp<br/>
cp ../../Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemmaindialog.h temp_zip/Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemmaindialog.h<br/>
cp ../../Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemmaindialog.ui temp_zip/Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemmaindialog.ui<br/>
cp ../../Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemmenudialog.cpp temp_zip/Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemmenudialog.cpp<br/>
cp ../../Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemmenudialog.h temp_zip/Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemmenudialog.h<br/>
cp ../../Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemmenudialog.ui temp_zip/Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemmenudialog.ui<br/>
cp ../../Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemwidget.cpp temp_zip/Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemwidget.cpp<br/>
cp ../../Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemwidget.h temp_zip/Tools/ToolTestQtRoundedEditRectItem/qttestqtroundededitrectitemwidget.h<br/>
cp ../../Tools/ToolTestQtRoundedEditRectItem/testqtroundededitrectitemmenudialog.cpp temp_zip/Tools/ToolTestQtRoundedEditRectItem/testqtroundededitrectitemmenudialog.cpp<br/>
cp ../../Tools/ToolTestQtRoundedEditRectItem/testqtroundededitrectitemmenudialog.h temp_zip/Tools/ToolTestQtRoundedEditRectItem/testqtroundededitrectitemmenudialog.h<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/Licence.txt temp_zip/Tools/ToolTestQtRoundedTextRectItem/Licence.txt<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/R.png temp_zip/Tools/ToolTestQtRoundedTextRectItem/R.png<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/ToolTestQtRoundedTextRectItem.png temp_zip/Tools/ToolTestQtRoundedTextRectItem/ToolTestQtRoundedTextRectItem.png<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/ToolTestQtRoundedTextRectItem.qrc temp_zip/Tools/ToolTestQtRoundedTextRectItem/ToolTestQtRoundedTextRectItem.qrc<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemmaindialog.cpp temp_zip/Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemmaindialog.cpp<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemmaindialog.h temp_zip/Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemmaindialog.h<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemmaindialog.ui temp_zip/Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemmaindialog.ui<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemmenudialog.cpp temp_zip/Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemmenudialog.cpp<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemmenudialog.h temp_zip/Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemmenudialog.h<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemmenudialog.ui temp_zip/Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemmenudialog.ui<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemwidget.cpp temp_zip/Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemwidget.cpp<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemwidget.h temp_zip/Tools/ToolTestQtRoundedTextRectItem/qttestqtroundedtextrectitemwidget.h<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/testqtroundedtextrectitemmenudialog.cpp temp_zip/Tools/ToolTestQtRoundedTextRectItem/testqtroundedtextrectitemmenudialog.cpp<br/>
cp ../../Tools/ToolTestQtRoundedTextRectItem/testqtroundedtextrectitemmenudialog.h temp_zip/Tools/ToolTestQtRoundedTextRectItem/testqtroundedtextrectitemmenudialog.h<br/>
<br/>
FILENAME="ProjectVanDenBogaartSource"<br/>
ZIP_FILENAME=$FILENAME".zip"<br/>
<br/>
echo "Compressing files"<br/>
<br/>
cd temp_zip<br/>
zip -r $FILENAME Classes<br/>
zip -r $FILENAME Projects<br/>
zip -r $FILENAME Tools<br/>
cd ..<br/>
cp "temp_zip/"$ZIP_FILENAME $ZIP_FILENAME<br/>
<br/>
echo "Cleaning up"<br/>
<br/>
echo "Emptying subfolders"<br/>
<br/>
rm temp_zip/Classes/CppAbout/*.*<br/>
rm temp_zip/Classes/CppFuzzy_equal_to/*.*<br/>
rm temp_zip/Classes/CppLazy_init/*.*<br/>
rm temp_zip/Classes/CppQtAboutDialog/*.*<br/>
rm temp_zip/Classes/CppQtArrowItem/*.*<br/>
rm temp_zip/Classes/CppQtHideAndShowDialog/*.*<br/>
rm temp_zip/Classes/CppQtKeyboardFriendlyGraphicsView/*.*<br/>
rm temp_zip/Classes/CppQtLabeledQuadBezierArrowItem/*.*<br/>
rm temp_zip/Classes/CppQtPathArrowItem/*.*<br/>
rm temp_zip/Classes/CppQtQuadBezierArrowItem/*.*<br/>
rm temp_zip/Classes/CppQtRoundedEditRectItem/*.*<br/>
rm temp_zip/Classes/CppQtRoundedRectItem/*.*<br/>
rm temp_zip/Classes/CppQtRoundedTextRectItem/*.*<br/>
rm temp_zip/Classes/CppQtScopedDisable/*.*<br/>
rm temp_zip/Classes/CppTrace/*.*<br/>
rm temp_zip/Projects/ProjectVanDenBogaart/*.*<br/>
rm temp_zip/Tools/ToolStyleSheetSetter/*.*<br/>
rm temp_zip/Tools/ToolTestQtArrowItems/*.*<br/>
rm temp_zip/Tools/ToolTestQtRoundedEditRectItem/*.*<br/>
rm temp_zip/Tools/ToolTestQtRoundedTextRectItem/*.*<br/>
<br/>
echo "Removing subfolders"<br/>
<br/>
rmdir temp_zip/Classes/CppAbout<br/>
rmdir temp_zip/Classes/CppFuzzy_equal_to<br/>
rmdir temp_zip/Classes/CppLazy_init<br/>
rmdir temp_zip/Classes/CppQtAboutDialog<br/>
rmdir temp_zip/Classes/CppQtArrowItem<br/>
rmdir temp_zip/Classes/CppQtHideAndShowDialog<br/>
rmdir temp_zip/Classes/CppQtKeyboardFriendlyGraphicsView<br/>
rmdir temp_zip/Classes/CppQtLabeledQuadBezierArrowItem<br/>
rmdir temp_zip/Classes/CppQtPathArrowItem<br/>
rmdir temp_zip/Classes/CppQtQuadBezierArrowItem<br/>
rmdir temp_zip/Classes/CppQtRoundedEditRectItem<br/>
rmdir temp_zip/Classes/CppQtRoundedRectItem<br/>
rmdir temp_zip/Classes/CppQtRoundedTextRectItem<br/>
rmdir temp_zip/Classes/CppQtScopedDisable<br/>
rmdir temp_zip/Classes/CppTrace<br/>
rmdir temp_zip/Projects/ProjectVanDenBogaart<br/>
rmdir temp_zip/Tools/ToolStyleSheetSetter<br/>
rmdir temp_zip/Tools/ToolTestQtArrowItems<br/>
rmdir temp_zip/Tools/ToolTestQtRoundedEditRectItem<br/>
rmdir temp_zip/Tools/ToolTestQtRoundedTextRectItem<br/>
<br/>
echo "Removing main folders"<br/>
<br/>
rmdir temp_zip/Classes<br/>
rmdir temp_zip/Projects<br/>
rmdir temp_zip/Tools<br/>
<br/>
echo "Removing temporary folder"<br/>
<br/>
rm temp_zip/*.*<br/>
rmdir temp_zip<br/>
<br/>
echo "Done"<br/>
<br/>
# CreateQtProjectZipFile, version 1.3<br/>
# Copyright (C) 2012 Richel Bilderbeek<br/>
# Programmed on the 10th of June 2012<br/>
# by Richel Bilderbeek<br/>
# <br/>
# CreateQtProjectZipFile can be downloaded from http://www.richelbilderbeek.nl/ToolCreateQtProjectZipFile.htm<br/>
# Licenced under GPL 3.0<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
