<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>KTouchLectureCreator</title>
  <meta name="description" content="C++ KTouchLectureCreator"/>
  <meta name="keywords" content="C++ KTouchLectureCreator "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolKTouchLectureCreator.htm">KTouchLectureCreator</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.694 at Fri Jan  2 10:06:19 2015
 -->
<p><a href="ToolKTouchLectureCreator.htm">KTouchLectureCreator</a> is a <a href="Tools.htm">tool</a> to create random 
KTouch lectures for a C++ programmer.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKTouchLectureCreatorLecture.zip">Download a lecture created by 'KTouchLectureCreator' (zip)</a></li>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKTouchLectureCreatorSource_1_0.zip">Download the 'KTouchLectureCreator' source code (version 1.0)(zip)</a></li>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKTouchLectureCreatorSource_1_0.htm">View the 'KTouchLectureCreator' source code as web page (version 1.0)(htm)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://ktouch.sourceforge.net">KTouch homepage</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.10 (utopic)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.1.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.9.1</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.9.1</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolKTouchLectureCreator/ToolKTouchLectureCreator.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKTouchLectureCreator/ToolKTouchLectureCreator.pro" border = "1"><tr><td><code>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= qt<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWerror.htm">-Werror</a><br/>
<br/>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += ../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ktouchlecture.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ktouchlevels.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ktouchlevel.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ktouchlecture.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ktouchlevels.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ktouchlevel.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a>/<a href="CppTrace.htm">trace</a>.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKTouchLectureCreator/ktouchlecture.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKTouchLectureCreator/ktouchlecture.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
KTouchLectureCreator, create KTouch lecture <b><a href="CppFor.htm">for</a></b> C<a href="CppOperatorIncrement.htm">++</a> programmers<br/>
Copyright (C) 2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolKTouchLectureCreator.htm">ToolKTouchLectureCreator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> KTOUCHLECTURE_H<br/>
<a href="CppDefine.htm">#define</a> KTOUCHLECTURE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "ktouchlevels.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> KTouchLecture<br/>
{<br/>
&nbsp;&nbsp;KTouchLecture();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; To<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_comment;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_font_suggestion;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> KTouchLevels m_levels;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_title;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> KTouchLevels CreateLevels();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KTOUCHLECTURE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKTouchLectureCreator/ktouchlecture.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKTouchLectureCreator/ktouchlecture.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
KTouchLectureCreator, create KTouch lecture <b><a href="CppFor.htm">for</a></b> C<a href="CppOperatorIncrement.htm">++</a> programmers<br/>
Copyright (C) 2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolKTouchLectureCreator.htm">ToolKTouchLectureCreator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "ktouchlecture.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<br/>
KTouchLecture::KTouchLecture()<br/>
&nbsp;&nbsp;: m_comment("KTouch lecture file created by KTouchLectureCreator, www.richelbilderbeek.nl/<a href="ToolKTouchLectureCreator.htm">ToolKTouchLectureCreator</a>.htm"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_font_suggestion("Monospace"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_levels(CreateLevels()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_title("<a href="Cpp.htm">C++</a>")<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> KTouchLevels KTouchLecture::CreateLevels()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> KTouchLevels();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; KTouchLecture::To<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("&lt;?xml <a href="CppVersion.htm">version</a>=\"1.0\" encoding=\"UTF-8\"?&gt;");<br/>
&nbsp;&nbsp;v.push_back("&lt;KTouchLecture&gt;");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "&lt;Title&gt;" <a href="CppOperatorPlus.htm">+</a> m_title <a href="CppOperatorPlus.htm">+</a> "&lt;/Title&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "&lt;Comment&gt;" <a href="CppOperatorPlus.htm">+</a> m_comment<a href="CppOperatorPlus.htm">+</a> "&lt;/Comment&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "&lt;FontSuggestions&gt;" <a href="CppOperatorPlus.htm">+</a> m_font_suggestion <a href="CppOperatorPlus.htm">+</a> "&lt;/FontSuggestions&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w <a href="CppOperatorAssign.htm">=</a> m_levels.To<a href="CppXml.htm">Xml</a>();<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(w.begin(),w.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>("&nbsp;&nbsp;") <a href="CppOperatorPlus.htm">+</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;v.push_back("&lt;/KTouchLecture&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKTouchLectureCreator/ktouchlevel.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKTouchLectureCreator/ktouchlevel.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
KTouchLectureCreator, create KTouch lecture <b><a href="CppFor.htm">for</a></b> C<a href="CppOperatorIncrement.htm">++</a> programmers<br/>
Copyright (C) 2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolKTouchLectureCreator.htm">ToolKTouchLectureCreator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> KTOUCHLEVEL_H<br/>
<a href="CppDefine.htm">#define</a> KTOUCHLEVEL_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> KTouchLevel<br/>
{<br/>
&nbsp;&nbsp;KTouchLevel(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <b><a href="CppChar.htm">char</a></b>s, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; new_<b><a href="CppChar.htm">char</a></b>s);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; To<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_lines;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_new_<b><a href="CppChar.htm">char</a></b>s;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; CreateLines(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <b><a href="CppChar.htm">char</a></b>s);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> CreateLine(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <b><a href="CppChar.htm">char</a></b>s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Are all <b><a href="CppChar.htm">char</a></b>s in s present in all?<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> DoesFit(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> all);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KTOUCHLEVEL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKTouchLectureCreator/ktouchlevel.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKTouchLectureCreator/ktouchlevel.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
KTouchLectureCreator, create KTouch lecture <b><a href="CppFor.htm">for</a></b> C<a href="CppOperatorIncrement.htm">++</a> programmers<br/>
Copyright (C) 2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolKTouchLectureCreator.htm">ToolKTouchLectureCreator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "ktouchlevel.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> T Sort(T t)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(t.begin(),t.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t;<br/>
}<br/>
<br/>
KTouchLevel::KTouchLevel(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <b><a href="CppChar.htm">char</a></b>s, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; new_<b><a href="CppChar.htm">char</a></b>s)<br/>
&nbsp;&nbsp;: m_lines(CreateLines(<b><a href="CppChar.htm">char</a></b>s)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_new_<b><a href="CppChar.htm">char</a></b>s(new_<b><a href="CppChar.htm">char</a></b>s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> KTouchLevel::CreateLine(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <b><a href="CppChar.htm">char</a></b>s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;" ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppOperatorLogicalOr.htm">||</a>",<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppComment.htm">//</a>",<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppComment.htm">/*</a> <a href="CppComment.htm">*/</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppOperatorIncrement.htm">++</a>a",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppOperatorIncrement.htm">++</a>b",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a<a href="CppOperatorNotEqual.htm">!=</a>b",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a<a href="CppOperatorEqual.htm">==</a>b",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"alignas",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"alignof",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppAsm.htm">asm</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppAuto.htm">auto</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppBool.htm">bool</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostAny.htm">boost::any</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostArray.htm">boost::array</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostCompressed_pair.htm">boost::compressed_pair</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostDynamic_bitset.htm">boost::dynamic_bitset</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostMulti_array.htm">boost::multi_array</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostPtr_array.htm">boost::ptr_array</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostPtr_deque.htm">boost::ptr_deque</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostPtr_list.htm">boost::ptr_list</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostPtr_map.htm">boost::ptr_map</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostPtr_multimap.htm">boost::ptr_multimap</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostPtr_multiset.htm">boost::ptr_multiset</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostPtr_set.htm">boost::ptr_set</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostPtr_vector.htm">boost::ptr_vector</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoost.htm">boost</a>::shared_<a href="CppArray.htm">array</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoostTuple.htm">boost::tuple</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppBoost.htm">boost</a>::variant",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppBreak.htm">break</a></b>;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppBreak.htm">break</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="Cpp11.htm">C++11</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="Cpp11.htm">C++11</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="Cpp98.htm">C++98</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="Cpp98.htm">C++98</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppCase.htm">case</a></b>:",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppCase.htm">case</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppCatch.htm">catch</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppChar.htm">char</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppChar16_t.htm">char16_t</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppChar32_t.htm">char32_t</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppClass.htm">class</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppConst.htm">const</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppConst_cast.htm">const_cast</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<a href="CppStdString.htm">std::string</a>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppConstexpr.htm">constexpr</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppContinue.htm">continue</a></b>;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppContinue.htm">continue</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"decltype",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppDefault.htm">default</a></b>:",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppDefault.htm">default</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppDefine.htm">#define</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppDelete.htm">delete</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppDo.htm">do</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppDouble.htm">double</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> T*&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> T*&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> T* <b><a href="CppConst.htm">const</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;T*&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;T* <b><a href="CppConst.htm">const</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"#elif",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppPreElse.htm">#else</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppElse.htm">else</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppEnum.htm">enum</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppExplicit.htm">explicit</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppExport.htm">export</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppExtern.htm">extern</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppFalse.htm">false</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppFinal.htm">final</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppFloat.htm">float</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppFor.htm">for</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppFriend.htm">friend</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppGoto.htm">goto</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppIf.htm">if</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppOperatorIncrement.htm">++</a>i",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppOperatorIncrement.htm">++</a>j",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"i<a href="CppOperatorNotEqual.htm">!=</a>j",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"i<a href="CppOperatorEqual.htm">==</a>j",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppIfdef.htm">#ifdef</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppIfndef.htm">#ifndef</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppInclude.htm">#include</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppInline.htm">inline</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppInt.htm">int</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppLong.htm">long</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppMutable.htm">mutable</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppNamespace.htm">namespace</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppNew.htm">new</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppNoexcept.htm">noexcept</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppNullptr.htm">nullptr</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppOperatorEqual.htm">operator==</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppOperatorMinus.htm">operator-</a></b>=",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppOperatorDecrement.htm">operator--</a></b>",<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppOperatorDivide.htm">operator/</a></b>=",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppOperator.htm">operator</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppOperatorMultiply.htm">operator*</a></b>=",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppOperatorPlus.htm">operator+</a></b>=",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppOperatorIncrement.htm">operator++</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppPrivate.htm">private</a></b>:",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppPrivate.htm">private</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppProtected.htm">protected</a></b>:",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppProtected.htm">protected</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppPublic.htm">public</a></b>:",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppPublic.htm">public</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppRegister.htm">register</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppReinterpret_cast.htm">reinterpret_cast</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppReinterpret_cast.htm">reinterpret_cast</a></b>&lt;T*&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppReturn.htm">return</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppShort.htm">short</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppSigned.htm">signed</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppSizeof.htm">sizeof</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppStatic.htm">static</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppStatic_assert.htm">static_assert</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppStatic_cast.htm">static_cast</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdAccumulate.htm">std::accumulate</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdAdjacent_find.htm">std::adjacent_find</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdAll_of.htm">std::all_of</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdAny_of.htm">std::any_of</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdBinary_search.htm">std::binary_search</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdBitset.htm">std::bitset</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdBit_vector.htm">std::bit_vector</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdCopy.htm">std::copy</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdCopy_backward.htm">std::copy_backward</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdCopy_if.htm">std::copy_if</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdCopy_n.htm">std::copy_n</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdCount.htm">std::count</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdCount_if.htm">std::count_if</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdDeque.htm">std::deque</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdDeque.htm">std::deque</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdDeque.htm">std::deque</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdDeque.htm">std::deque</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdEqual.htm">std::equal</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdEqual_range.htm">std::equal_range</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdFill.htm">std::fill</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdFind.htm">std::find</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdFind_end.htm">std::find_end</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdFind_first_of.htm">std::find_first_of</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdFind_if.htm">std::find_if</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdFind_if_not.htm">std::find_if_not</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdFor_each.htm">std::for_each</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdGenerate.htm">std::generate</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdGenerate_n.htm">std::generate_n</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStd.htm">std</a>::hash",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdHash_map.htm">std::hash_map</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdHash_multimap.htm">std::hash_multimap</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdHash_multiset.htm">std::hash_multiset</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdHash_set.htm">std::hash_set</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdIncludes.htm">std::includes</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdInplace_merge.htm">std::inplace_merge</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdIota.htm">std::iota</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdIs_heap.htm">std::is_heap</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdIs_heap_until.htm">std::is_heap_until</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdIs_sorted.htm">std::is_sorted</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdIs_sorted_until.htm">std::is_sorted_until</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdIter_swap.htm">std::iter_swap</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdLexicographical_compare.htm">std::lexicographical_compare</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdList.htm">std::list</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdList.htm">std::list</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdList.htm">std::list</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdList.htm">std::list</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdLower_bound.htm">std::lower_bound</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMake_heap.htm">std::make_heap</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMap.htm">std::map</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdString.htm">std::string</a>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMax.htm">std::max</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMax_element.htm">std::max_element</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMerge.htm">std::merge</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMin.htm">std::min</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMin_element.htm">std::min_element</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMinmax.htm">std::minmax</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMinmax_element.htm">std::minmax_element</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMismatch.htm">std::mismatch</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMove.htm">std::move</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMove_backward.htm">std::move_backward</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMultimap.htm">std::multimap</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdMultiset.htm">std::multiset</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdNext_permutation.htm">std::next_permutation</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdNone_of.htm">std::none_of</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdNth_element.htm">std::nth_element</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdPair.htm">std::pair</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdString.htm">std::string</a>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdPartial_sort.htm">std::partial_sort</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdPartial_sort_copy.htm">std::partial_sort_copy</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdPartition.htm">std::partition</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdPartition.htm">std::partition</a>_copy",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdPartition.htm">std::partition</a>_<a href="CppPointer.htm">point</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdPop_heap.htm">std::pop_heap</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdPrev_permutation.htm">std::prev_permutation</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdPriority_queue.htm">std::priority_queue</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdPush_heap.htm">std::push_heap</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdQueue.htm">std::queue</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdQueue.htm">std::queue</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdQueue.htm">std::queue</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdQueue.htm">std::queue</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(v.begin(),v.end())",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdRemove.htm">std::remove</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdRemove_copy.htm">std::remove_copy</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdRemove_copy_if.htm">std::remove_copy_if</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdRemove_if.htm">std::remove_if</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdReplace.htm">std::replace</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdReplace_copy.htm">std::replace_copy</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdReplace_copy_if.htm">std::replace_copy_if</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdReplace_if.htm">std::replace_if</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdReverse.htm">std::reverse</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdReverse_copy.htm">std::reverse_copy</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdRope.htm">std::rope</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdRotate.htm">std::rotate</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdRotate_copy.htm">std::rotate_copy</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSearch.htm">std::search</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSearch_n.htm">std::search_n</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSet.htm">std::set</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSet.htm">std::set</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSet.htm">std::set</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSet_difference.htm">std::set_difference</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSet_intersection.htm">std::set_intersection</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSet_symmetric_difference.htm">std::set_symmetric_difference</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSet_union.htm">std::set_union</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSlist.htm">std::slist</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSort.htm">std::sort</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSort.htm">std::sort</a>(v.begin(),v.end())",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSort_heap.htm">std::sort_heap</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdStable_partition.htm">std::stable_partition</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdStable_sort.htm">std::stable_sort</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdStack.htm">std::stack</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdStack.htm">std::stack</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdStack.htm">std::stack</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdStack.htm">std::stack</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdString.htm">std::string</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSwap.htm">std::swap</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdSwap_ranges.htm">std::swap_ranges</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdTransform.htm">std::transform</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdUnique.htm">std::unique</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdUnique_copy.htm">std::unique_copy</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdUpper_bound.htm">std::upper_bound</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdValarray.htm">std::valarray</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdVector.htm">std::vector</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"s.empty()",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"s.size()",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"s.at(0)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"s[0]",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppStruct.htm">struct</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppSwitch.htm">switch</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"t.empty()",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"t.size()",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"t.at(0)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"t[0]",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppTemplate.htm">template</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppThis.htm">this</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppThread_local.htm">thread_local</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppThrow.htm">throw</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppTrue.htm">true</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppTry.htm">try</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppTypedef.htm">typedef</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppTypeid.htm">typeid</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppTypename.htm">typename</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppUnion.htm">union</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppUnsigned.htm">unsigned</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppUsing.htm">using</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"v.empty()",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"v.size()",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"v.at(0)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"v[0]",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppVirtual.htm">virtual</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppVoid.htm">void</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppVolatile.htm">volatile</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppWchar_t.htm">wchar_t</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppWhile.htm">while</a></b>"<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Collect all fitting words<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w;<br/>
&nbsp;&nbsp;<a href="CppStdCopy_if.htm">std::copy_if</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppChar.htm">char</a></b>s](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> DoesFit(s,<b><a href="CppChar.htm">char</a></b>s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(w.begin(),w.end());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Keep the first 30 <b><a href="CppChar.htm">char</a></b>s of words<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(w.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> sum <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum <a href="CppOperatorPlusAssign.htm">+=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(w.at(i).size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sum &gt; 30)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.resize(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create histogram of used <b><a href="CppChar.htm">char</a></b>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppChar.htm">char</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; histogram <a href="CppOperatorAssign.htm">=</a> Tally(w,<b><a href="CppChar.htm">char</a></b>s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> words until 60 <b><a href="CppChar.htm">char</a></b>s is reached<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<b><a href="CppChar.htm">char</a></b>s_used <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAccumulate.htm">std::accumulate</a>(w.begin(),w.end(),0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppInt.htm">int</a></b>&amp; init, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> a line must have <a href="CppAbout.htm">about</a> 60 <b><a href="CppChar.htm">char</a></b>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<b><a href="CppChar.htm">char</a></b>s_extra <a href="CppOperatorAssign.htm">=</a> 60 <a href="CppOperatorMinus.htm">-</a> n_<b><a href="CppChar.htm">char</a></b>s_used;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> level <a href="CppOperatorAssign.htm">=</a> number_of_<b><a href="CppChar.htm">char</a></b>s <a href="CppOperatorDivide.htm">/</a> 2<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> level <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppChar.htm">char</a></b>s.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<b><a href="CppChar.htm">char</a></b>s_extra; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> word length <a href="CppOperatorAssign.htm">=</a> 2 <a href="CppOperatorPlus.htm">+</a> (level <a href="CppOperatorDivide.htm">/</a> 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> word_length <a href="CppOperatorAssign.htm">=</a> 2 <a href="CppOperatorPlus.htm">+</a> (level <a href="CppOperatorDivide.htm">/</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorModulus.htm">%</a> word_length <a href="CppOperatorEqual.htm">==</a> 0) { w.push_back(""); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppChar.htm">char</a></b>s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;w.back()<a href="CppOperatorPlusAssign.htm">+=</a><b><a href="CppChar.htm">char</a></b>s[index];<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(w.begin(),w.end());<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> result;<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;result](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result <a href="CppOperatorPlusAssign.htm">+=</a> (s <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(" "));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove trailing whitespace<br/>
&nbsp;&nbsp;result.resize(result.size()-1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; KTouchLevel::CreateLines(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <b><a href="CppChar.htm">char</a></b>s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_lines <a href="CppOperatorAssign.htm">=</a> 10;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_lines; <a href="CppOperatorIncrement.htm">++</a>i) { v.push_back(CreateLine(<b><a href="CppChar.htm">char</a></b>s)); }<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> KTouchLevel::DoesFit(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> all)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> Sort(s);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> u <a href="CppOperatorAssign.htm">=</a> Sort(all);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdSet.htm">std::set</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; a(s.begin(),s.end());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdSet.htm">std::set</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; b(all.begin(),all.end());<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> overlap;<br/>
&nbsp;&nbsp;<a href="CppStdSet_intersection.htm">std::set_intersection</a>(t.begin(),t.end(),u.begin(),u.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(overlap));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> overlap.size() <a href="CppOperatorEqual.htm">==</a> s.size();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; KTouchLevel::To<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("&lt;Level&gt;");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "&lt;New<a href="CppChar.htm">Character</a>s&gt;" <a href="CppOperatorPlus.htm">+</a> m_new_<b><a href="CppChar.htm">char</a></b>s <a href="CppOperatorPlus.htm">+</a> "&lt;/New<a href="CppChar.htm">Character</a>s&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(m_lines.begin(),m_lines.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>("&nbsp;&nbsp;&lt;Line&gt;") <a href="CppOperatorPlus.htm">+</a> s <a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("&lt;/Line&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;v.push_back("&lt;/Level&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> KTouchLevel::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DoesFit<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( DoesFit("a","a"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!DoesFit("b","a"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( DoesFit("a","ab"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( DoesFit("b","ab"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( DoesFit("a","ba"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( DoesFit("b","ba"));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKTouchLectureCreator/ktouchlevels.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKTouchLectureCreator/ktouchlevels.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
KTouchLectureCreator, create KTouch lecture <b><a href="CppFor.htm">for</a></b> C<a href="CppOperatorIncrement.htm">++</a> programmers<br/>
Copyright (C) 2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolKTouchLectureCreator.htm">ToolKTouchLectureCreator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> KTOUCHLEVELS_H<br/>
<a href="CppDefine.htm">#define</a> KTOUCHLEVELS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "ktouchlevel.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> KTouchLevels<br/>
{<br/>
&nbsp;&nbsp;KTouchLevels();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; To<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;KTouchLevel&gt; m_v;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;KTouchLevel&gt; CreateLevels();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KTOUCHLEVELS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKTouchLectureCreator/ktouchlevels.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKTouchLectureCreator/ktouchlevels.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
KTouchLectureCreator, create KTouch lecture <b><a href="CppFor.htm">for</a></b> C<a href="CppOperatorIncrement.htm">++</a> programmers<br/>
Copyright (C) 2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolKTouchLectureCreator.htm">ToolKTouchLectureCreator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "ktouchlevels.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> T Sort(T t)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(t.begin(),t.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t;<br/>
}<br/>
<br/>
KTouchLevels::KTouchLevels()<br/>
&nbsp;&nbsp;: m_v(CreateLevels())<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;KTouchLevel&gt; KTouchLevels::CreateLevels()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; new_<b><a href="CppChar.htm">char</a></b>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot allow <a href="CppOperatorDivide.htm">/</a> because file will mess up<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot allow &lt; because file will mess up<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot allow &amp; because file will mess up<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"fj","dk","sl","a;","gh'", <a href="CppComment.htm">//</a>Home<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"cn","vm","b,",".x","z\\", <a href="CppComment.htm">//</a>Low<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"eu","ri","to","yp","w[","q]", <a href="CppComment.htm">//</a>High<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"39","48","57","60","2-","1=","`", <a href="CppComment.htm">//</a>Numbers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"FJ","DK","SL","A:","GH\"", <a href="CppComment.htm">//</a>Shift <a href="CppOperatorPlus.htm">+</a> Home<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"CN","VM","B","&gt;X","Z?", <a href="CppComment.htm">//</a>Shift <a href="CppOperatorPlus.htm">+</a> Low<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"EU","RI","TO","YP","W{","Q}", <a href="CppComment.htm">//</a>Shift <a href="CppOperatorPlus.htm">+</a> High<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"#(","$*","%","^)","@_","!+","~|" <a href="CppComment.htm">//</a>Shift <a href="CppOperatorPlus.htm">+</a> Numbers<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> all_<b><a href="CppChar.htm">char</a></b>s <a href="CppOperatorAssign.htm">=</a> "`1234567890<a href="CppOperatorMinusAssign.htm">-=</a>qwertyuiop[]asdfghjkl;'zxcvbnm,./~!@#$%^*()_+QWERTYUIOP{}ASDFGHJKL:\"ZXCVBNM&gt;?|";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> all_<b><a href="CppChar.htm">char</a></b>s_sorted <a href="CppOperatorAssign.htm">=</a> Sort(all_<b><a href="CppChar.htm">char</a></b>s);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> new_<b><a href="CppChar.htm">char</a></b>s_str;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(new_<b><a href="CppChar.htm">char</a></b>s.begin(),new_<b><a href="CppChar.htm">char</a></b>s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;new_<b><a href="CppChar.htm">char</a></b>s_str](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) { new_<b><a href="CppChar.htm">char</a></b>s_str<a href="CppOperatorPlusAssign.htm">+=</a>s; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> new_<b><a href="CppChar.htm">char</a></b>s_str_sorted <a href="CppOperatorAssign.htm">=</a> Sort(new_<b><a href="CppChar.htm">char</a></b>s_str);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> difference;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSet_difference.htm">std::set_difference</a>(new_<b><a href="CppChar.htm">char</a></b>s_str_sorted.begin(),new_<b><a href="CppChar.htm">char</a></b>s_str_sorted.end(),all_<b><a href="CppChar.htm">char</a></b>s_sorted.begin(),all_<b><a href="CppChar.htm">char</a></b>s_sorted.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(difference));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(difference);<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(new_<b><a href="CppChar.htm">char</a></b>s_str.size() <a href="CppOperatorEqual.htm">==</a> all_<b><a href="CppChar.htm">char</a></b>s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAccumulate.htm">std::accumulate</a>(new_<b><a href="CppChar.htm">char</a></b>s.begin(),new_<b><a href="CppChar.htm">char</a></b>s.end(),0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> init, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(all_<b><a href="CppChar.htm">char</a></b>s.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All <a href="CppChar.htm">character</a>s must be present"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; all_<b><a href="CppChar.htm">char</a></b>s <a href="CppOperatorAssign.htm">=</a> new_<b><a href="CppChar.htm">char</a></b>s;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (all_<b><a href="CppChar.htm">char</a></b>s.size() &gt; 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(all_<b><a href="CppChar.htm">char</a></b>s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> from=0; from<a href="CppOperatorNotEqual.htm">!=</a>sz-1; <a href="CppOperatorIncrement.htm">++</a>from)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> to_append <a href="CppOperatorAssign.htm">=</a> all_<b><a href="CppChar.htm">char</a></b>s.at(from);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> to=from+1; to<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>to)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_<b><a href="CppChar.htm">char</a></b>s.at(to)<a href="CppOperatorPlusAssign.htm">+=</a>new_<b><a href="CppChar.htm">char</a></b>s.at(from);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(all_<b><a href="CppChar.htm">char</a></b>s.size() <a href="CppOperatorEqual.htm">==</a> new_<b><a href="CppChar.htm">char</a></b>s.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> all_<b><a href="CppChar.htm">char</a></b>s.size();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;KTouchLevel&gt; levels;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;KTouchLevel level(all_<b><a href="CppChar.htm">char</a></b>s.at(i),new_<b><a href="CppChar.htm">char</a></b>s.at(i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;levels.push_back(level);<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> levels;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; KTouchLevels::To<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("&lt;Levels&gt;");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_v.begin(),m_v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;v](<b><a href="CppConst.htm">const</a></b> KTouchLevel&amp; level)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> w <a href="CppOperatorAssign.htm">=</a> level.To<a href="CppXml.htm">Xml</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(w.begin(),w.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>("&nbsp;&nbsp;") <a href="CppOperatorPlus.htm">+</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;v.push_back("&lt;/Levels&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKTouchLectureCreator/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKTouchLectureCreator/main.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
KTouchLectureCreator, create KTouch lecture <b><a href="CppFor.htm">for</a></b> C<a href="CppOperatorIncrement.htm">++</a> programmers<br/>
Copyright (C) 2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolKTouchLectureCreator.htm">ToolKTouchLectureCreator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "ktouchlecture.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSrand.htm">std::srand</a>(<a href="CppStdTime.htm">std::time</a>(0));<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppVersion.htm">Version</a>:<br/>
<a href="CppComment.htm">//</a>YYYY-MM-DD: Vx.y: [description]<br/>
<a href="CppComment.htm">//</a>2013-02-18: V1.0: initial <a href="CppVersion.htm">version</a><br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Guidelines:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> a line must have <a href="CppAbout.htm">about</a> 60 <b><a href="CppChar.htm">char</a></b>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> level <a href="CppOperatorAssign.htm">=</a> number_of_<b><a href="CppChar.htm">char</a></b>s <a href="CppOperatorDivide.htm">/</a> 2<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> word length <a href="CppOperatorAssign.htm">=</a> 2 <a href="CppOperatorPlus.htm">+</a> (level <a href="CppOperatorDivide.htm">/</a> 3)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> a level must have <a href="CppAbout.htm">about</a> 10 lines<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> every level must have <a href="CppAbout.htm">about</a> two <b><a href="CppNew.htm">new</a></b> <a href="CppChar.htm">character</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> I <b><a href="CppDo.htm">do</a></b> not care <b><a href="CppIf.htm">if</a></b> words exist<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> <b><a href="CppIf.htm">if</a></b> a C<a href="CppOperatorIncrement.htm">++</a> <a href="CppConstructor.htm">construct</a> exists, add it<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> use all keys in the <b><a href="CppFinal.htm">final</a></b> level<br/>
&nbsp;&nbsp;START_<a href="CppTRACE.htm">TRACE</a>();<br/>
&nbsp;&nbsp;<a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> KTouchLecture().To<a href="CppXml.htm">Xml</a>();<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f("cpp.ktouch.xml");<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(f,"\n"));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKTouchLectureCreator/zip.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKTouchLectureCreator/zip.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
<br/>
echo "Removing user information"<br/>
rm *.user<br/>
<br/>
echo "Removing possible temp file"<br/>
rm copy.txt<br/>
rm tmp.txt<br/>
<br/>
<br/>
echo "Creating of all main folders"<br/>
<br/>
mkdir temp_zip<br/>
mkdir temp_zip/Classes<br/>
mkdir temp_zip/Tools<br/>
<br/>
echo "Creating of all subfolders"<br/>
<br/>
mkdir temp_zip/Classes/CppTrace<br/>
mkdir temp_zip/Tools/ToolKTouchLectureCreator<br/>
<br/>
echo "Copying files"<br/>
<br/>
cp ../../Classes/CppTrace/Licence.txt temp_zip/Classes/CppTrace/Licence.txt<br/>
cp ../../Classes/CppTrace/trace.h temp_zip/Classes/CppTrace/trace.h<br/>
cp ../../Tools/ToolKTouchLectureCreator/Licence.txt temp_zip/Tools/ToolKTouchLectureCreator/Licence.txt<br/>
cp ../../Tools/ToolKTouchLectureCreator/ToolKTouchLectureCreator.pro temp_zip/Tools/ToolKTouchLectureCreator/ToolKTouchLectureCreator.pro<br/>
cp ../../Tools/ToolKTouchLectureCreator/ktouchlecture.cpp temp_zip/Tools/ToolKTouchLectureCreator/ktouchlecture.cpp<br/>
cp ../../Tools/ToolKTouchLectureCreator/ktouchlecture.h temp_zip/Tools/ToolKTouchLectureCreator/ktouchlecture.h<br/>
cp ../../Tools/ToolKTouchLectureCreator/ktouchlevel.cpp temp_zip/Tools/ToolKTouchLectureCreator/ktouchlevel.cpp<br/>
cp ../../Tools/ToolKTouchLectureCreator/ktouchlevel.h temp_zip/Tools/ToolKTouchLectureCreator/ktouchlevel.h<br/>
cp ../../Tools/ToolKTouchLectureCreator/ktouchlevels.cpp temp_zip/Tools/ToolKTouchLectureCreator/ktouchlevels.cpp<br/>
cp ../../Tools/ToolKTouchLectureCreator/ktouchlevels.h temp_zip/Tools/ToolKTouchLectureCreator/ktouchlevels.h<br/>
cp ../../Tools/ToolKTouchLectureCreator/main.cpp temp_zip/Tools/ToolKTouchLectureCreator/main.cpp<br/>
cp ../../Tools/ToolKTouchLectureCreator/zip.sh temp_zip/Tools/ToolKTouchLectureCreator/zip.sh<br/>
<br/>
FILENAME="ToolKTouchLectureCreatorSource"<br/>
ZIP_FILENAME=$FILENAME".zip"<br/>
<br/>
echo "Compressing files"<br/>
<br/>
cd temp_zip<br/>
zip -r $FILENAME Classes<br/>
zip -r $FILENAME Tools<br/>
cd ..<br/>
cp "temp_zip/"$ZIP_FILENAME $ZIP_FILENAME<br/>
<br/>
echo "Cleaning up"<br/>
<br/>
echo "Emptying subfolders"<br/>
<br/>
rm temp_zip/Classes/CppTrace/*.*<br/>
rm temp_zip/Tools/ToolKTouchLectureCreator/*.*<br/>
<br/>
echo "Removing subfolders"<br/>
<br/>
rmdir temp_zip/Classes/CppTrace<br/>
rmdir temp_zip/Tools/ToolKTouchLectureCreator<br/>
<br/>
echo "Removing main folders"<br/>
<br/>
rmdir temp_zip/Classes<br/>
rmdir temp_zip/Tools<br/>
<br/>
echo "Removing temporary folder"<br/>
<br/>
rm temp_zip/*.*<br/>
rmdir temp_zip<br/>
<br/>
echo "Done"<br/>
<br/>
# CreateQtProjectZipFile, version 1.3<br/>
# Copyright (C) 2012 Richel Bilderbeek<br/>
# Programmed on the 10th of June 2012<br/>
# by Richel Bilderbeek<br/>
# <br/>
# CreateQtProjectZipFile can be downloaded from http://www.richelbilderbeek.nl/ToolCreateQtProjectZipFile.htm<br/>
# Licenced under GPL 3.0<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
