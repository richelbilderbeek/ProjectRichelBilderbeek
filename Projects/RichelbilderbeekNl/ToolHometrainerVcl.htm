<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>HometrainerVcl</title>
  <meta name="description" content="C++ HometrainerVcl"/>
  <meta name="keywords" content="C++ HometrainerVcl "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolHometrainerVcl.htm">HometrainerVcl</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Tue Aug  5 12:03:15 2014
 -->
<p><a href="ToolHometrainerVcl.htm">Hometrainer (VCL)</a> is <a href="CppDesktopApplication.htm">desktop</a> <a href="Tools.htm">tool</a> 
to train self-made exercises with open questions and multiple choice questions, 
with or without images. The exercises can created by use of a simple text editor (Notepad, for example). 
<a href="ToolHometrainerVcl.htm">Hometrainer (VCL)</a> can also be used for examination.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Simple example of Hometrainer in creating exercises</h2>
<p>&nbsp;</p>
<p>Supply the program with a text file like shown below (note that the first line is obligatory):</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Hometrainer example file" border = "1"><tr><td><code>
Hometrainer (C) 2009-2014 Richel Bilderbeek<br/>
Humanbody.bmp,Which line points to the liver?,1,2,3,4<br/>
Humanbody.bmp,Which line points to the liver?,1/one/One<br/>
Humanbody.bmp,Which organ does line 1 point to?,The liver/the liver/Liver/liver<br/>
-,In which organ is ethanol detoxified?,The liver/the liver/Liver/liver<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The program will show you the image, the question and the (shuffled) answers. You have to click the right answer. Great to train yourself in nearly anything!</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Screenshots</h2>
<p>&nbsp;</p>
<ul>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolHometrainer_1_8.png">View a screenshot of 'Hometrainer' (version 1.8)(png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolHometrainerMenu_1_8.png">View a screenshot of 'Hometrainer' its main menu (version 1.8)(png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolHometrainerTestCreater_1_8.png">View a screenshot of 'Hometrainer Test Creater' (version 1.8)(png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolHometrainerResult_1_8.png">View a screenshot of 'Hometrainer' its generated test result (version 1.8)(png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolHometrainerTestScorer_1_8.png">View a screenshot of 'Hometrainer Test Scorer' (version 1.8)(png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolHometrainerTestScorer_1_8_2.png">View another screenshot of 'Hometrainer Test Scorer' (version 1.8)(png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolHometrainerCreateDoc_1_8.png">View a screenshot of 'Hometrainer Doc Creater' (version 1.8)(png)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Hometrainer executable and source</h2>
<p>&nbsp;</p>
<ul>
  <li>Newer: <a href="ToolHometrainer.htm">Hometrainer</a></li>
  <li><img src="PicWindows.png" alt="Windows"/> <a href="ToolHometrainerExe_1_8.zip">Download the 'Hometrainer' executable (version 1.8)(zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Hometrainer manual</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolHometrainerManual.doc">Download the 'Hometrainer' manual (English)(version 0.5)(doc)</a></li>
  <li>Download the 'Hometrainer' manual (Dutch)(doc)</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>English Hometrainer exercises</h2>
<p>&nbsp;</p>
<ul>
  <li>None yet</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Dutch Hometrainer exercises</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolHometrainer_BiBb1_1_0.zip">Nectar BB hoofdstuk 1: Vier Rijken (version 1.0)</a></li>
  <li><a href="ToolHometrainer_BiBb5_1_1.zip">Nectar BB hoofdstuk 5: Mens En Milieu (version 1.1)</a></li>
  <li><a href="ToolHometrainer_BiBb6_1_0.zip">Nectar BB hoofdstuk 6: Eten (version 1.0)</a></li>
  <li><a href="ToolHometrainer_BiBk1_1_1.zip">Nectar KB hoofdstuk 1: Vier Rijken Vergelijken (version 1.1)</a></li>
  <li><a href="ToolHometrainer_BiKb6_1_2.zip">Nectar KB hoofdstuk 6: Ademen en eten (version 1.2)</a></li>
  <li><a href="ToolHometrainer_BiKb7_1_0.zip">Nectar KB hoofdstuk 7: Bloed (version 1.2)</a></li>
  <li><a href="ToolHometrainer_NaskTl1_v1_3.zip">Nova 3TL hoofdstuk 1: Electriciteit (version 1.3)(zip)</a></li>
  <li><a href="ToolHometrainer_TtBasis_1_2.zip">Theatertechniek: Basis (version 1.2)(zip)</a></li>
  <li><a href="ToolHometrainer_TtGeluid_0_9.zip">Theatertechniek: Geluidstechniek (version 0.9)(zip)</a></li>
  <li><a href="ToolHometrainer_TtLicht_0_9.zip">Theatertechniek: Lichttechniek (version 0.9)(zip)</a></li>
  <li><a href="ToolHometrainer_WijkenArnhem_1_0.zip">Wijken van Arnhem (version 1.0)(zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Old versions of Dutch Hometrainer exercises</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolHometrainer_BiBb5_1_0.zip">Nectar BB hoofdstuk 5: Mens En Milieu (version 1.0)</a></li>
  <li><a href="ToolHometrainer_BiKb6_0_3.zip">Nectar KB hoofdstuk 6: Ademen en eten (version 0.3)</a></li>
  <li><a href="ToolHometrainer_BiKb6_1_0.zip">Nectar KB hoofdstuk 6: Ademen en eten (version 1.0)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Older Hometrainer versions</h2>
<p>&nbsp;</p>
<ul>
  <li><img src="PicWindows.png" alt="Windows"/> <a href="ToolHometrainer_0_9.png">View a screenshot of 'Hometrainer' (version 0.9)(png)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Hometrainer manual versions</h2>
<p>&nbsp;</p>
<ul>
  <li>Version X.Y: DD-MM-YYYY</li>
  <li>Version 0.5: 23-09-2009</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Links to similar freeware programs</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolHometrainer.htm">Hometrainer</a> (my previous version of Hometrainer)</li>
  <li><a href="http://wordfox.byethost17.com/wordfox/index.php">WordFox</a></li>
  <li><a href="http://www.efkasoft.com/drillassistant/drillassistant.html">Drill Assistant</a></li>
  <li><a href="http://www.efkasoft.com/overhoor/overhoor.html">Overhoor</a>: Dutch</li>
  <li><a href="http://www.luziusschneider.com/QuizHome.htm">Quiz</a>: for multiple-choice questions only</li>
  <li><a href="http://www.questiontools.org/">Questiontools Suite</a>: extensive test generation suite, but commercial for companies</li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/ProjectCreateDoc.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/ProjectCreateDoc.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitFormCreateDoc<a href="CppImplementationFile.htm">.cpp</a>", FormCreateDoc);<br/>
USEFORM("UnitForm<a href="CppAbout.htm">About</a><a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppAbout.htm">About</a>);<br/>
USEFORM("UnitFormWhatsNew<a href="CppImplementationFile.htm">.cpp</a>", FormWhatsNew);<br/>
USEFORM("UnitFormExample<a href="CppImplementationFile.htm">.cpp</a>", FormExample);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "<a href="ToolHometrainer.htm">Hometrainer</a> 2 CreateDoc";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormCreateDoc), &amp;FormCreateDoc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/ProjectCreateRtf.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/ProjectCreateRtf.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitFormCreateRtf<a href="CppImplementationFile.htm">.cpp</a>", FormCreateRtf);<br/>
USEFORM("UnitForm<a href="CppAbout.htm">About</a><a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppAbout.htm">About</a>);<br/>
USEFORM("UnitFormWhatsNew<a href="CppImplementationFile.htm">.cpp</a>", FormWhatsNew);<br/>
USEFORM("UnitFormExample<a href="CppImplementationFile.htm">.cpp</a>", FormExample);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "<a href="ToolHometrainer.htm">Hometrainer</a> 2 CreateRtf";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormCreateRtf), &amp;FormCreateRtf);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/ProjectCreateTest.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/ProjectCreateTest.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitFormCreateTest<a href="CppImplementationFile.htm">.cpp</a>", FormCreateTest);<br/>
USEFORM("UnitForm<a href="CppAbout.htm">About</a><a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppAbout.htm">About</a>);<br/>
USEFORM("UnitFormWhatsNew<a href="CppImplementationFile.htm">.cpp</a>", FormWhatsNew);<br/>
USEFORM("UnitFormExample<a href="CppImplementationFile.htm">.cpp</a>", FormExample);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "<a href="ToolHometrainer.htm">Hometrainer</a> 2 Test Creater";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormCreateTest), &amp;FormCreateTest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/ProjectHometrainer2.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/ProjectHometrainer2.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitForm<a href="CppAbout.htm">About</a><a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppAbout.htm">About</a>);<br/>
USEFORM("UnitFormCorrect<a href="CppImplementationFile.htm">.cpp</a>", FormCorrect);<br/>
USEFORM("UnitFormImage<a href="CppImplementationFile.htm">.cpp</a>", FormImage);<br/>
USEFORM("UnitFormIncorrect<a href="CppImplementationFile.htm">.cpp</a>", FormIncorrect);<br/>
USEFORM("UnitFormExample<a href="CppImplementationFile.htm">.cpp</a>", FormExample);<br/>
USEFORM("UnitFormMain<a href="CppImplementationFile.htm">.cpp</a>", FormMain);<br/>
USEFORM("UnitFormMenu<a href="CppImplementationFile.htm">.cpp</a>", FormMenu);<br/>
USEFORM("UnitForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a><a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>);<br/>
USEFORM("UnitForm<a href="CppOpenQuestion.htm">OpenQuestion</a><a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppOpenQuestion.htm">OpenQuestion</a>);<br/>
USEFORM("UnitForm<a href="CppQuestion.htm">Question</a><a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppQuestion.htm">Question</a>);<br/>
USEFORM("UnitFormWhatsNew<a href="CppImplementationFile.htm">.cpp</a>", FormWhatsNew);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "<a href="ToolHometrainer.htm">Hometrainer</a> 2";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormMenu), &amp;FormMenu);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/ProjectScoreTests.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/ProjectScoreTests.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitFormScoreTests<a href="CppImplementationFile.htm">.cpp</a>", FormScoreTests);<br/>
USEFORM("UnitFormWhatsNew<a href="CppImplementationFile.htm">.cpp</a>", FormWhatsNew);<br/>
USEFORM("UnitForm<a href="CppAbout.htm">About</a><a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppAbout.htm">About</a>);<br/>
USEFORM("UnitFormExample<a href="CppImplementationFile.htm">.cpp</a>", FormExample);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "<a href="ToolHometrainer.htm">Hometrainer</a> 2 Test Scorer";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormScoreTests), &amp;FormScoreTests);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitDotMatrix.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitDotMatrix.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Dot<a href="CppMatrix.htm">Matrix</a>, <a href="Tools.htm">tool</a> to demonstrate dot-<a href="CppMatrix.htm">matrix</a> text drawing<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitDot<a href="CppMatrix.htm">Matrix</a>H<br/>
<a href="CppDefine.htm">#define</a> UnitDot<a href="CppMatrix.htm">Matrix</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppArray.htm">array</a>.hpp&gt;<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Extctrls { <b><a href="CppClass.htm">class</a></b> <a href="CppTImage.htm">TImage</a>; }<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Dot-<a href="CppMatrix.htm">matrix</a> <a href="CppChar.htm">character</a>s are<br/>
<a href="CppComment.htm">//</a>size 5 (width) x 7 (height) pixels, excluding empty spacer pixels<br/>
<a href="CppComment.htm">//</a>size 6 (width) x 8 (height) pixels, including empty spacer pixels<br/>
<b><a href="CppVoid.htm">void</a></b> Dot<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_co,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y_co,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Dot-<a href="CppMatrix.htm">matrix</a> <a href="CppChar.htm">character</a>s are<br/>
<a href="CppComment.htm">//</a>size 5 (width) x 7 (height) pixels, excluding empty spacer pixels<br/>
<a href="CppComment.htm">//</a>size 6 (width) x 8 (height) pixels, including empty spacer pixels<br/>
<b><a href="CppVoid.htm">void</a></b> Dot<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_co,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y_co,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Dot-<a href="CppMatrix.htm">matrix</a> <a href="CppChar.htm">character</a>s are<br/>
<a href="CppComment.htm">//</a>size 5 (width) x 7 (height) pixels, excluding empty spacer pixels<br/>
<a href="CppComment.htm">//</a>size 6 (width) x 8 (height) pixels, including empty spacer pixels<br/>
<b><a href="CppVoid.htm">void</a></b> Dot<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_co,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y_co,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Dot-<a href="CppMatrix.htm">matrix</a> <a href="CppChar.htm">character</a>s are<br/>
<a href="CppComment.htm">//</a>size 5 (width) x 7 (height) pixels, excluding empty spacer pixels<br/>
<a href="CppComment.htm">//</a>size 6 (width) x 8 (height) pixels, including empty spacer pixels<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,5&gt; ,7&gt; Get<a href="CppMatrix.htm">Matrix</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Set a pixel's RGB values<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl<br/>
<b><a href="CppVoid.htm">void</a></b> SetPixel(<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Set a line of pixels' RGB values<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl<br/>
<b><a href="CppVoid.htm">void</a></b> SetPixel(<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Set a square of pixels' RGB values<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl<br/>
<b><a href="CppVoid.htm">void</a></b> SetPixel(<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitDotMatrix.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitDotMatrix.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Dot<a href="CppMatrix.htm">Matrix</a>, <a href="Tools.htm">tool</a> to demonstrate dot-<a href="CppMatrix.htm">matrix</a> text drawing<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitDot<a href="CppMatrix.htm">Matrix</a>.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Dot<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_co,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y_co,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,5&gt; ,7&gt; v(Get<a href="CppMatrix.htm">Matrix</a>(c));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>7; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>5; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1 <a href="CppOperatorAssign.htm">=</a> x_co <a href="CppOperatorPlus.htm">+</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1 <a href="CppOperatorAssign.htm">=</a> y_co <a href="CppOperatorPlus.htm">+</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v[y][x] <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetPixel(image,x1,y1,&nbsp;&nbsp;0,&nbsp;&nbsp;0,&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetPixel(image,x1,y1,255,255,255);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Dot<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_co,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y_co,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> s.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dot<a href="CppMatrix.htm">Matrix</a>(image,x_co <a href="CppOperatorPlus.htm">+</a> (x*6),y_co,s[x]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Dot<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_co,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y_co,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dot<a href="CppMatrix.htm">Matrix</a>(image,x_co,y_co+(y*8),v[y]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostArray.htm">boost::array</a>&lt;<a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,5&gt; ,7&gt; Get<a href="CppMatrix.htm">Matrix</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a 5 (width) x 7 (height) 2D <a href="CppArray.htm">array</a><br/>
&nbsp;&nbsp;<a href="CppBoostArray.htm">boost::array</a>&lt;<a href="CppBoostArray.htm">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,5&gt; ,7&gt; v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Note: indices are y-x-ordered!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ' ':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '!':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '"':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 1; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '#':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 1; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 1; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '$':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 1; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 1; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '%':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 1; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '&amp;':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '\'':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '(':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ')':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '*':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '+':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ',':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '-':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '.':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '/':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '0':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '1':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 1; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '2':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 1; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '3':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '4':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '5':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '6':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 1; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '7':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 1; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '8':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '9':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ':':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ';':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '&lt;':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '=':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 1; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '&gt;':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '?':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '@':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'A':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'B':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'C':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'D':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'E':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'F':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'G':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'H':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'I':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'J':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'K':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'L':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'M':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 1; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'N':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'O':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'P':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'Q':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'R':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'S':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'T':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'U':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'V':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 1; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'W':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'X':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'Y':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'Z':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '[':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 1; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 1; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ']':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '^':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 1; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '_':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '`':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'a':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'b':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'c':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'd':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'e':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'f':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 1; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 1; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'g':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 1; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 1; v[1][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'h':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'i':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'j':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'k':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 1; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'l':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'm':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'n':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'o':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'p':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'q':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'r':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 's':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 't':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 1; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 1; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'u':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'v':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 1; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'w':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 1; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 1; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'x':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 1; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 1; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'y':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 1; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'z':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 1; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 1; v[2][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 1; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 1; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '{':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 1; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 1; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 1; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '|':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 1; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 1; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '}':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 1; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 1; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 1; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 1; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 1; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 1; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 1; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '\\': <a href="CppComment.htm">//</a>Own addition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 1; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '~': <a href="CppComment.htm">//</a>Own addition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 1; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 1; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 1; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 1; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0][0] <a href="CppOperatorAssign.htm">=</a> 0; v[0][1] <a href="CppOperatorAssign.htm">=</a> 0; v[0][2] <a href="CppOperatorAssign.htm">=</a> 0; v[0][3] <a href="CppOperatorAssign.htm">=</a> 0; v[0][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[1][0] <a href="CppOperatorAssign.htm">=</a> 0; v[1][1] <a href="CppOperatorAssign.htm">=</a> 0; v[1][2] <a href="CppOperatorAssign.htm">=</a> 0; v[1][3] <a href="CppOperatorAssign.htm">=</a> 0; v[1][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2][0] <a href="CppOperatorAssign.htm">=</a> 0; v[2][1] <a href="CppOperatorAssign.htm">=</a> 0; v[2][2] <a href="CppOperatorAssign.htm">=</a> 0; v[2][3] <a href="CppOperatorAssign.htm">=</a> 0; v[2][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3][0] <a href="CppOperatorAssign.htm">=</a> 0; v[3][1] <a href="CppOperatorAssign.htm">=</a> 0; v[3][2] <a href="CppOperatorAssign.htm">=</a> 0; v[3][3] <a href="CppOperatorAssign.htm">=</a> 0; v[3][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[4][0] <a href="CppOperatorAssign.htm">=</a> 0; v[4][1] <a href="CppOperatorAssign.htm">=</a> 0; v[4][2] <a href="CppOperatorAssign.htm">=</a> 0; v[4][3] <a href="CppOperatorAssign.htm">=</a> 0; v[4][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[5][0] <a href="CppOperatorAssign.htm">=</a> 0; v[5][1] <a href="CppOperatorAssign.htm">=</a> 0; v[5][2] <a href="CppOperatorAssign.htm">=</a> 0; v[5][3] <a href="CppOperatorAssign.htm">=</a> 0; v[5][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[6][0] <a href="CppOperatorAssign.htm">=</a> 0; v[6][1] <a href="CppOperatorAssign.htm">=</a> 0; v[6][2] <a href="CppOperatorAssign.htm">=</a> 0; v[6][3] <a href="CppOperatorAssign.htm">=</a> 0; v[6][4] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Set a pixel's RGB values<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl<br/>
<b><a href="CppVoid.htm">void</a></b> SetPixel(<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Image is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap must be 24 bit");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "x coordinat is below zero");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "y coordinat is below zero");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x &lt; image-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "x coordinat is beyond image width");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y &lt; image-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "y coordinat is beyond image height");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
<br/>
&nbsp;&nbsp;line[x*3+2] <a href="CppOperatorAssign.htm">=</a> red;<br/>
&nbsp;&nbsp;line[x*3+1] <a href="CppOperatorAssign.htm">=</a> green;<br/>
&nbsp;&nbsp;line[x*3+0] <a href="CppOperatorAssign.htm">=</a> blue;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Set a line of pixels' RGB values<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl<br/>
<b><a href="CppVoid.htm">void</a></b> SetPixel(<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Image is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap must be 24 bit");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x1 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "x1 coordinat is below zero");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x2 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "x2 coordinat is below zero");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "y coordinat is below zero");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x1 &lt; image-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "x1 coordinat is beyond image width");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x2 <a href="CppOperatorLessEqual.htm">&lt;=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "x2 coordinat is beyond image width");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y &lt; image-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "y coordinat is beyond image height");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> myLine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=x1; x<a href="CppOperatorNotEqual.htm">!=</a>x2; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+2] <a href="CppOperatorAssign.htm">=</a> red;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+1] <a href="CppOperatorAssign.htm">=</a> green;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+0] <a href="CppOperatorAssign.htm">=</a> blue;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Set a square of pixels' RGB values<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl<br/>
<b><a href="CppVoid.htm">void</a></b> SetPixel(<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=y1; y<a href="CppOperatorNotEqual.htm">!=</a>y2; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetPixel(image,x1,x2,y,red,green,blue);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitEncranger.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitEncranger.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppEncranger.htm">Encranger</a>, encryption and de-encryption <a href="Tools.htm">tool</a><br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> Unit<a href="CppEncranger.htm">Encranger</a>H<br/>
<a href="CppDefine.htm">#define</a> Unit<a href="CppEncranger.htm">Encranger</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppEncranger.htm">Encranger</a> stands <b><a href="CppFor.htm">for</a></b> 'ENCryption by RAndom Number GEneratoR'<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppEncranger.htm">Encranger</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppEncranger.htm">Encranger</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> Encrypt(<a href="CppStdString.htm">std::string</a> s) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> Deencrypt(<a href="CppStdString.htm">std::string</a> s) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; <a href="CppChar.htm">character</a>s;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&nbsp;&nbsp;table;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> Encrypt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> d) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> Deencrypt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> d) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> GetIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; CreateTable(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key, <b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> sz) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; Create<a href="CppChar.htm">Character</a>s() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppIncrease.htm">Increase</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppStdUnary_function.htm">std::unary_function</a>&lt;<b><a href="CppVoid.htm">void</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppIncrease.htm">Increase</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> initValue <a href="CppOperatorAssign.htm">=</a> 0) : mValue(initValue) {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperatorFunctionCall.htm">operator()</a></b>(<b><a href="CppInt.htm">int</a></b>&amp; <a href="CppAny.htm">any</a>thing)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAny.htm">any</a>thing <a href="CppOperatorAssign.htm">=</a> mValue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>mValue;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mValue;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitEncranger.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitEncranger.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppEncranger.htm">Encranger</a>, encryption and de-encryption <a href="Tools.htm">tool</a><br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppLoopReader.htm">LoopReader</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppEncranger.htm">Encranger</a>.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEncranger.htm">Encranger</a>::<a href="CppEncranger.htm">Encranger</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key)<br/>
&nbsp;&nbsp;: <a href="CppChar.htm">character</a>s(Create<a href="CppChar.htm">Character</a>s()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table(CreateTable(key,<a href="CppChar.htm">character</a>s.size()))<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppEncranger.htm">Encranger</a>::Encrypt(<a href="CppStdString.htm">std::string</a> s) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdString.htm">std::string</a>::<a href="CppIterator.htm">iterator</a> String<a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<a href="CppLoopReader.htm">LoopReader</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator&gt; table_reader(table.begin(), table.end());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String<a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> s.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (String<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> s.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i, table_reader.Next())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*i <a href="CppOperatorAssign.htm">=</a> Encrypt(*i,*table_reader.Read());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppEncranger.htm">Encranger</a>::Deencrypt(<a href="CppStdString.htm">std::string</a> s) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdString.htm">std::string</a>::<a href="CppIterator.htm">iterator</a> String<a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<a href="CppLoopReader.htm">LoopReader</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator&gt; table_reader(table.begin(), table.end());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String<a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> s.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (String<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> s.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i, table_reader.Next())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*i <a href="CppOperatorAssign.htm">=</a> Deencrypt(*i,*table_reader.Read());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> <a href="CppEncranger.htm">Encranger</a>::Encrypt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> d) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> GetIndex(c);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<b><a href="CppChar.htm">char</a></b>s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppChar.htm">character</a>s.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i_new <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorPlus.htm">+</a> d) <a href="CppOperatorModulus.htm">%</a> n_<b><a href="CppChar.htm">char</a></b>s;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i_new <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i_new &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppChar.htm">character</a>s.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppChar.htm">character</a>s[i_new];<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> <a href="CppEncranger.htm">Encranger</a>::Deencrypt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> d) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> GetIndex(c);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<b><a href="CppChar.htm">char</a></b>s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppChar.htm">character</a>s.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i_new <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorMinus.htm">-</a> d <a href="CppOperatorPlus.htm">+</a> n_<b><a href="CppChar.htm">char</a></b>s) <a href="CppOperatorModulus.htm">%</a> n_<b><a href="CppChar.htm">char</a></b>s;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i_new <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i_new &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppChar.htm">character</a>s.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppChar.htm">character</a>s[i_new];<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppEncranger.htm">Encranger</a>::GetIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;::const_iterator i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind.htm">std::find</a>(<a href="CppChar.htm">character</a>s.begin(), <a href="CppChar.htm">character</a>s.end(), c);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(i<a href="CppOperatorNotEqual.htm">!=</a><a href="CppChar.htm">character</a>s.end());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> <a href="CppChar.htm">character</a>s.end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdInvalid_argument.htm">std::invalid_argument</a>("Unknown <a href="CppChar.htm">character</a>: " <a href="CppOperatorPlus.htm">+</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> i <a href="CppOperatorMinus.htm">-</a> <a href="CppChar.htm">character</a>s.begin();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppEncranger.htm">Encranger</a>::CreateTable(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key, <b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> sz) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(sz);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(v.begin(), v.end(), <a href="CppIncrease.htm">Increase</a>() );<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz &gt; 5); <a href="CppComment.htm">//</a>Only <b><a href="CppFor.htm">for</a></b> these tests below<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0] <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[1] <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[2] <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[3] <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[4] <a href="CppOperatorEqual.htm">==</a> 4);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The key is the seed<br/>
&nbsp;&nbsp;<a href="CppStdSrand.htm">std::srand</a>(key);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Shuffle<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(v.begin(),v.end());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; <a href="CppEncranger.htm">Encranger</a>::Create<a href="CppChar.htm">Character</a>s() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Upper<b><a href="CppCase.htm">case</a></b><br/>
&nbsp;&nbsp;v.push_back('A');<br/>
&nbsp;&nbsp;v.push_back('B');<br/>
&nbsp;&nbsp;v.push_back('C');<br/>
&nbsp;&nbsp;v.push_back('D');<br/>
&nbsp;&nbsp;v.push_back('E');<br/>
&nbsp;&nbsp;v.push_back('F');<br/>
&nbsp;&nbsp;v.push_back('G');<br/>
&nbsp;&nbsp;v.push_back('H');<br/>
&nbsp;&nbsp;v.push_back('I');<br/>
&nbsp;&nbsp;v.push_back('J');<br/>
&nbsp;&nbsp;v.push_back('K');<br/>
&nbsp;&nbsp;v.push_back('L');<br/>
&nbsp;&nbsp;v.push_back('M');<br/>
&nbsp;&nbsp;v.push_back('N');<br/>
&nbsp;&nbsp;v.push_back('O');<br/>
&nbsp;&nbsp;v.push_back('P');<br/>
&nbsp;&nbsp;v.push_back('Q');<br/>
&nbsp;&nbsp;v.push_back('R');<br/>
&nbsp;&nbsp;v.push_back('S');<br/>
&nbsp;&nbsp;v.push_back('T');<br/>
&nbsp;&nbsp;v.push_back('U');<br/>
&nbsp;&nbsp;v.push_back('V');<br/>
&nbsp;&nbsp;v.push_back('W');<br/>
&nbsp;&nbsp;v.push_back('X');<br/>
&nbsp;&nbsp;v.push_back('Y');<br/>
&nbsp;&nbsp;v.push_back('Z');<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Lower<b><a href="CppCase.htm">case</a></b><br/>
&nbsp;&nbsp;v.push_back('a');<br/>
&nbsp;&nbsp;v.push_back('b');<br/>
&nbsp;&nbsp;v.push_back('c');<br/>
&nbsp;&nbsp;v.push_back('d');<br/>
&nbsp;&nbsp;v.push_back('e');<br/>
&nbsp;&nbsp;v.push_back('f');<br/>
&nbsp;&nbsp;v.push_back('g');<br/>
&nbsp;&nbsp;v.push_back('h');<br/>
&nbsp;&nbsp;v.push_back('i');<br/>
&nbsp;&nbsp;v.push_back('j');<br/>
&nbsp;&nbsp;v.push_back('k');<br/>
&nbsp;&nbsp;v.push_back('l');<br/>
&nbsp;&nbsp;v.push_back('m');<br/>
&nbsp;&nbsp;v.push_back('n');<br/>
&nbsp;&nbsp;v.push_back('o');<br/>
&nbsp;&nbsp;v.push_back('p');<br/>
&nbsp;&nbsp;v.push_back('q');<br/>
&nbsp;&nbsp;v.push_back('r');<br/>
&nbsp;&nbsp;v.push_back('s');<br/>
&nbsp;&nbsp;v.push_back('t');<br/>
&nbsp;&nbsp;v.push_back('u');<br/>
&nbsp;&nbsp;v.push_back('v');<br/>
&nbsp;&nbsp;v.push_back('w');<br/>
&nbsp;&nbsp;v.push_back('x');<br/>
&nbsp;&nbsp;v.push_back('y');<br/>
&nbsp;&nbsp;v.push_back('z');<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Digits<br/>
&nbsp;&nbsp;v.push_back('0');<br/>
&nbsp;&nbsp;v.push_back('1');<br/>
&nbsp;&nbsp;v.push_back('2');<br/>
&nbsp;&nbsp;v.push_back('3');<br/>
&nbsp;&nbsp;v.push_back('4');<br/>
&nbsp;&nbsp;v.push_back('5');<br/>
&nbsp;&nbsp;v.push_back('6');<br/>
&nbsp;&nbsp;v.push_back('7');<br/>
&nbsp;&nbsp;v.push_back('8');<br/>
&nbsp;&nbsp;v.push_back('9');<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Above digits<br/>
&nbsp;&nbsp;v.push_back('!');<br/>
&nbsp;&nbsp;v.push_back('@');<br/>
&nbsp;&nbsp;v.push_back('#');<br/>
&nbsp;&nbsp;v.push_back('$');<br/>
&nbsp;&nbsp;v.push_back('%');<br/>
&nbsp;&nbsp;v.push_back('^');<br/>
&nbsp;&nbsp;v.push_back('&amp;');<br/>
&nbsp;&nbsp;v.push_back('*');<br/>
&nbsp;&nbsp;v.push_back('(');<br/>
&nbsp;&nbsp;v.push_back(')');<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Other interpunction<br/>
&nbsp;&nbsp;v.push_back('~');<br/>
&nbsp;&nbsp;v.push_back('`');<br/>
&nbsp;&nbsp;v.push_back('-');<br/>
&nbsp;&nbsp;v.push_back('_');<br/>
&nbsp;&nbsp;v.push_back('=');<br/>
&nbsp;&nbsp;v.push_back('+');<br/>
&nbsp;&nbsp;v.push_back('[');<br/>
&nbsp;&nbsp;v.push_back(']');<br/>
&nbsp;&nbsp;v.push_back('{');<br/>
&nbsp;&nbsp;v.push_back('}');<br/>
&nbsp;&nbsp;v.push_back(';');<br/>
&nbsp;&nbsp;v.push_back(':');<br/>
&nbsp;&nbsp;v.push_back('\'');<br/>
&nbsp;&nbsp;v.push_back('\"');<br/>
&nbsp;&nbsp;v.push_back('&lt;');<br/>
&nbsp;&nbsp;v.push_back('&gt;');<br/>
&nbsp;&nbsp;v.push_back(',');<br/>
&nbsp;&nbsp;v.push_back('.');<br/>
&nbsp;&nbsp;v.push_back('/');<br/>
&nbsp;&nbsp;v.push_back('?');<br/>
&nbsp;&nbsp;v.push_back('\\');<br/>
&nbsp;&nbsp;v.push_back('|');<br/>
&nbsp;&nbsp;v.push_back(' ');<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormAbout.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormAbout.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to practice multiple-choice <a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="CppAbout.htm">About</a>H<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="CppAbout.htm">About</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="CppAbout.htm">About</a> : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAuthor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTopLeft;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelCopyright;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelLicence;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelProgrammingDate;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelHomepage;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTitle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel<a href="CppVersion.htm">Version</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonWhatsNew;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonExample;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonWhatsNewClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonExampleClick(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TForm<a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="CppAbout.htm">About</a> *Form<a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormAbout.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormAbout.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormWhatsNew.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormExample.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="CppAbout.htm">About</a> *Form<a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="CppAbout.htm">About</a>::TForm<a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="CppAbout.htm">About</a>::ButtonWhatsNewClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormWhatsNew&gt; f(<b><a href="CppNew.htm">new</a></b> TFormWhatsNew(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="CppAbout.htm">About</a>::ButtonExampleClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormExample&gt; f(<b><a href="CppNew.htm">new</a></b> TFormExample(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormCorrect.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormCorrect.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormCorrectH<br/>
<a href="CppDefine.htm">#define</a> UnitFormCorrectH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormCorrect : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelCorrect;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rAutoClose;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rAutoClose<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormCorrect(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormCorrect *FormCorrect;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormCorrect.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormCorrect.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFormCorrect.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormCorrect *FormCorrect;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormCorrect::TFormCorrect(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCorrect::<a href="CppTime.htm">Time</a>rAutoClose<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;Close();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormCreateDoc.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormCreateDoc.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormCreateDocH<br/>
<a href="CppDefine.htm">#define</a> UnitFormCreateDocH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Dialogs.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormCreateDoc : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelBottom;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TOpenDialog *OpenDialog1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TSaveDialog *SaveDialog1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPageControl *PageControl1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheetPlaintext;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheetDoc;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelCodedText;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelPlainTextTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonLoad;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonCreateDoc;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonSave;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *Button<a href="CppAbout.htm">About</a>1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *Button<a href="CppAbout.htm">About</a>2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *LabelN<a href="CppQuestion.htm">question</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEdit *EditN<a href="CppQuestion.htm">question</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelAdvanced;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonAdvanced;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TCheckBox *CheckBoxUseCode;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEdit *EditCode;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonCreateDocClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonLoadClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonSaveClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Button<a href="CppAbout.htm">About</a>Click(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonAdvancedClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall CheckBoxUseCodeClick(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_plaintext;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Model (in MVC)<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_doctext; <a href="CppComment.htm">//</a>Model (in MVC)<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_code;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_path;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormCreateDoc(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormCreateDoc *FormCreateDoc;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppAdd.htm">Add</a>Char(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v_original,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> not,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; CreateDoc(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text_in,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppQuestion.htm">question</a>s_desired);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; CreateDoc(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text_in,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppQuestion.htm">question</a>s_desired,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; code);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.htm">FileToVector</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileExists.htm">FileExists</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppFileExists.htm">FileExists</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> GetRandomFromButNot(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;&amp; not);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppStrToUpper.htm">StrToUpper</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppStrToUpper.htm">StrToUpper</a>(<a href="CppStdString.htm">std::string</a> s);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> VectorToStringList(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v,TStrings * <b><a href="CppConst.htm">const</a></b> l);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSaveContainer.htm">SaveContainer</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppSaveContainer.htm">SaveContainer</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; c, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(c.begin(),c.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppContainer.htm">Container</a>::value_type&gt;(f,"\n"));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From <a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPath.htm">GetPath</a>.htm<br/>
<a href="CppComment.htm">//</a>Returns the path, without a trailing backslash '\'<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetPath.htm">GetPath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormCreateDoc.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormCreateDoc.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCctypeH.htm">cctype</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppEncranger.htm">Encranger</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormCreateDoc.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormCreateDoc *FormCreateDoc;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormCreateDoc::TFormCreateDoc(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
 : TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateDoc::ButtonCreateDocClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_plaintext.size() &gt; 1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start at index one, because index zero is the copyright line<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(&amp;m_plaintext[1],m_plaintext.end());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CheckBoxUseCode-&gt;Checked)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_doctext <a href="CppOperatorAssign.htm">=</a> CreateDoc(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_plaintext,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EditN<a href="CppQuestion.htm">question</a>s-&gt;Text.<a href="CppToInt.htm">ToInt</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStrToUpper.htm">StrToUpper</a>(EditCode-&gt;Text.c_str()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_doctext <a href="CppOperatorAssign.htm">=</a> CreateDoc(m_plaintext,EditN<a href="CppQuestion.htm">question</a>s-&gt;Text.<a href="CppToInt.htm">ToInt</a>());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;VectorToStringList(m_doctext,RichEdit2-&gt;Lines);<br/>
<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>PageControl1-&gt;ActivePageIndex;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Assumes v is shuffled and v[0] is the copyright line<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; CreateDoc(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text_in,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppQuestion.htm">question</a>s_desired)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text_out;<br/>
<br/>
&nbsp;&nbsp;text_out.push_back("&lt;head&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;title&gt;<a href="ToolHometrainer.htm">Hometrainer</a> 2 test&lt;/title&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;/head&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;html&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;body&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;font size=\"4\" face=\"Courier New\" &gt;");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parsing the <a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(text_in.size()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_<a href="CppQuestion.htm">question</a>s_desired <a href="CppOperatorPlus.htm">+</a> 1);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>1, because first line is signature<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the string to split<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to_split_original <a href="CppOperatorAssign.htm">=</a> text_in[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (str_to_split_original.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace \, by {comma}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to_split <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(str_to_split_original,"\\,","{comma}");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write string to split to <a href="CppDebug.htm">debug</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppDebug.htm">debug</a>_output <a href="CppOperatorAssign.htm">=</a> "My<a href="CppDebug.htm">Debug</a>:" <a href="CppOperatorPlus.htm">+</a> str_to_split;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(<a href="CppDebug.htm">debug</a>_output.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v_original <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(str_to_split,",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace {comma} by a comma <b><a href="CppFor.htm">for</a></b> each <a href="CppStdString.htm">std::string</a> in v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(v_original,"{comma}",",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> m_path <a href="CppOperatorPlus.htm">+</a> '\\' <a href="CppOperatorPlus.htm">+</a> v[0];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; answer&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> v[2];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (answer.empty()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back("&lt;img src <a href="CppOperatorAssign.htm">=</a> \"" <a href="CppOperatorPlus.htm">+</a> filename <a href="CppOperatorPlus.htm">+</a> "\" <a href="CppOperatorDivide.htm">/</a>&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>text_out.push_back("&lt;img src <a href="CppOperatorAssign.htm">=</a> \"" <a href="CppOperatorPlus.htm">+</a> filename <a href="CppOperatorPlus.htm">+</a> "\" alt <a href="CppOperatorAssign.htm">=</a> \"My Image\" <a href="CppOperatorDivide.htm">/</a>&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <b><a href="CppFalse.htm">false</a></b>_answers(&amp;v[3],v.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppFalse.htm">false</a></b>_answers.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Open <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the doc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a>_line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "&lt;p&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ". "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "&lt;/p&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(<a href="CppQuestion.htm">question</a>_line);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> line_to_write_on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "&lt;p&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("_",40)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "&lt;/p&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(line_to_write_on);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Multiple choice <a href="CppQuestion.htm">question</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prepare the answers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; answers;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;answers.push_back(answer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(<b><a href="CppFalse.htm">false</a></b>_answers.begin(),<b><a href="CppFalse.htm">false</a></b>_answers.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(answers));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(answers.begin(),answers.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the doc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a>_line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "&lt;p&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ". "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "&lt;/p&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(<a href="CppQuestion.htm">question</a>_line);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back("&lt;ul&nbsp;&nbsp;type=\"disc\" &gt;");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_answers <a href="CppOperatorAssign.htm">=</a> answers.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_answers; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "&lt;li&gt; " <a href="CppOperatorPlus.htm">+</a> answers[i] <a href="CppOperatorPlus.htm">+</a> "&lt;/li&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back("&lt;/ul&gt;");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back("&lt;p&gt;&lt;/p&gt;"); <a href="CppComment.htm">//</a>Empty line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;text_out.push_back("&lt;/font&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;/body&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;/html&gt;");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> text_out;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Assumes v is shuffled and v[0] is the copyright line<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; CreateDoc(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text_in,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppQuestion.htm">question</a>s_desired,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; code)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text_out;<br/>
&nbsp;&nbsp;text_out.push_back("&lt;head&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;title&gt;<a href="ToolHometrainer.htm">Hometrainer</a> 2 test&lt;/title&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;/head&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;html&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;body&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;font size=\"4\" face=\"Courier New\" &gt;");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parsing the <a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(text_in.size()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_<a href="CppQuestion.htm">question</a>s_desired <a href="CppOperatorPlus.htm">+</a> 1);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>1, because first line is signature<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the string to split<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to_split_original <a href="CppOperatorAssign.htm">=</a> text_in[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (str_to_split_original.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace \, by {comma}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to_split <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(str_to_split_original,"\\,","{comma}");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write string to split to <a href="CppDebug.htm">debug</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppDebug.htm">debug</a>_output <a href="CppOperatorAssign.htm">=</a> "My<a href="CppDebug.htm">Debug</a>:" <a href="CppOperatorPlus.htm">+</a> str_to_split;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(<a href="CppDebug.htm">debug</a>_output.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v_original <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(str_to_split,",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace {comma} by a comma <b><a href="CppFor.htm">for</a></b> each <a href="CppStdString.htm">std::string</a> in v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(v_original,"{comma}",",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> m_path <a href="CppOperatorPlus.htm">+</a> '\\' <a href="CppOperatorPlus.htm">+</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> answer_<b><a href="CppChar.htm">char</a></b> <a href="CppOperatorAssign.htm">=</a> code[ (i <a href="CppOperatorMinus.htm">-</a> 1)<a href="CppOperatorModulus.htm">%</a> code.size() ]; <a href="CppComment.htm">//</a>-1 because v[0] is copyright line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> answer <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(answer_<b><a href="CppChar.htm">char</a></b>) <a href="CppOperatorPlus.htm">+</a> ") " <a href="CppOperatorPlus.htm">+</a> v[2];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (answer.empty()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back("&lt;img src <a href="CppOperatorAssign.htm">=</a> \"" <a href="CppOperatorPlus.htm">+</a> filename <a href="CppOperatorPlus.htm">+</a> "\" <a href="CppOperatorDivide.htm">/</a>&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>text_out.push_back("&lt;img src <a href="CppOperatorAssign.htm">=</a> \"" <a href="CppOperatorPlus.htm">+</a> filename <a href="CppOperatorPlus.htm">+</a> "\" alt <a href="CppOperatorAssign.htm">=</a> \"My Image\" <a href="CppOperatorDivide.htm">/</a>&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <b><a href="CppFalse.htm">false</a></b>_answers_no_<b><a href="CppChar.htm">char</a></b>(&amp;v[3],v.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <b><a href="CppFalse.htm">false</a></b>_answers <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Char(<b><a href="CppFalse.htm">false</a></b>_answers_no_<b><a href="CppChar.htm">char</a></b>,answer_<b><a href="CppChar.htm">char</a></b>,code);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppFalse.htm">false</a></b>_answers.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Open <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the doc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a>_line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "&lt;p&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ". "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "&lt;/p&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(<a href="CppQuestion.htm">question</a>_line);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> line_to_write_on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "&lt;p&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>("_",40)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "&lt;/p&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(line_to_write_on);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Multiple choice <a href="CppQuestion.htm">question</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prepare the answers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; answers;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;answers.push_back(answer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(<b><a href="CppFalse.htm">false</a></b>_answers.begin(),<b><a href="CppFalse.htm">false</a></b>_answers.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(answers));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(answers.begin(),answers.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the doc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a>_line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "&lt;p&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ". "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "&lt;/p&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(<a href="CppQuestion.htm">question</a>_line);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back("&lt;ul&nbsp;&nbsp;type=\"disc\" &gt;");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_answers <a href="CppOperatorAssign.htm">=</a> answers.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_answers; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "&lt;li&gt;" <a href="CppOperatorPlus.htm">+</a> answers[i] <a href="CppOperatorPlus.htm">+</a> "&lt;/li&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back("&lt;/ul&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back("&lt;p&gt;&lt;/p&gt;"); <a href="CppComment.htm">//</a>Empty line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;text_out.push_back("&lt;/font&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;/body&gt;");<br/>
&nbsp;&nbsp;text_out.push_back("&lt;/html&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> text_out;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppAdd.htm">Add</a>Char(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v_original,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> not,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; nots;<br/>
&nbsp;&nbsp;nots.push_back(not);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> v_original.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c <a href="CppOperatorAssign.htm">=</a> GetRandomFromButNot(s,nots);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nots.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(<a href="CppStdToupper.htm">std::toupper</a>(c))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>(1,<a href="CppStdToupper.htm">std::toupper</a>(c))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ") " <a href="CppOperatorPlus.htm">+</a> v_original[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(line);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> GetRandomFromButNot(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;&amp; not)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.size());<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> sz;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c <a href="CppOperatorAssign.htm">=</a> s[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdFind.htm">std::find</a>(not.begin(),not.end(),c)<a href="CppOperatorEqual.htm">==</a>not.end()) <a href="CppComment.htm">//</a>c is not in 'not'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> c;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateDoc::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;RichEdit1-&gt;Width <a href="CppOperatorAssign.htm">=</a> ClientWidth <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;RichEdit2-&gt;Width <a href="CppOperatorAssign.htm">=</a> ClientWidth <a href="CppOperatorMinus.htm">-</a> RichEdit1-&gt;Width;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateDoc::ButtonLoadClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!OpenDialog1-&gt;Execute()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;m_plaintext <a href="CppOperatorAssign.htm">=</a> <a href="CppFileToVector.htm">FileToVector</a>(OpenDialog1-&gt;FileName.c_str());<br/>
&nbsp;&nbsp;VectorToStringList(m_plaintext,RichEdit1-&gt;Lines);<br/>
&nbsp;&nbsp;EditN<a href="CppQuestion.htm">question</a>s-&gt;Text <a href="CppOperatorAssign.htm">=</a> m_plaintext.size() <a href="CppOperatorMinus.htm">-</a> 1;<br/>
<br/>
&nbsp;&nbsp;ButtonCreateDoc-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> (m_plaintext.size() &gt; 1);<br/>
&nbsp;&nbsp;m_path <a href="CppOperatorAssign.htm">=</a> <a href="CppGetPath.htm">GetPath</a>(OpenDialog1-&gt;FileName.c_str());<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateDoc::ButtonSaveClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!SaveDialog1-&gt;Execute()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppSaveContainer.htm">SaveContainer</a>(m_doctext,SaveDialog1-&gt;FileName.c_str());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateDoc::Button<a href="CppAbout.htm">About</a>Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TForm<a href="CppAbout.htm">About</a>&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppAbout.htm">About</a>(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.htm">FileToVector</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileExists.htm">FileExists</a>(fileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; myVector;<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> in(fileName.c_str());<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> myString;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !in.eof(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(in,myString);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myVector.push_back(myString);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> myVector;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> VectorToStringList(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v,TStrings * <b><a href="CppConst.htm">const</a></b> l)<br/>
{<br/>
&nbsp;&nbsp;l-&gt;Clear();<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> v.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;l-&gt;<a href="CppAdd.htm">Add</a>((*i).c_str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileExists.htm">FileExists</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppFileExists.htm">FileExists</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdFstream.htm">std::fstream</a> fin;<br/>
&nbsp;&nbsp;fin.open(fileName.c_str(),<a href="CppStd.htm">std</a>::ios::in);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( fin.is_open() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fin.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fin.close();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSrand.htm">std::srand</a>(<a href="CppStdTime.htm">std::time</a>(0));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppReplaceAll.htm">ReplaceAll</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pos <a href="CppOperatorAssign.htm">=</a> s.find(replaceWhat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pos<a href="CppOperatorEqual.htm">==</a>-1) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.replace(pos,replaceWhat.size(),replaceWithWhat);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From <a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdString.htm">std::string</a>::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> end <a href="CppOperatorAssign.htm">=</a> input.end();<br/>
&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> i1 <a href="CppOperatorAssign.htm">=</a> input.begin();<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy until first comma<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> i2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSearch.htm">std::search</a>(i1,end,seperator.begin(), seperator.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i1<a href="CppOperatorNotEqual.htm">!=</a>i2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(i1,i2,<a href="CppStdBack_inserter.htm">std::back_inserter</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i1 <a href="CppOperatorAssign.htm">=</a> i2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (i1<a href="CppOperatorNotEqual.htm">!=</a>end)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy from comma to (comma <a href="CppOperatorLogicalOr.htm">||</a> end)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> i2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSearch.htm">std::search</a>(i1 <a href="CppOperatorPlus.htm">+</a> 1,end,seperator.begin(), seperator.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i1<a href="CppOperatorNotEqual.htm">!=</a>i2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i2 <a href="CppOperatorEqual.htm">==</a> end <a href="CppOperatorLogicalOr.htm">||</a> <a href="CppStdEqual.htm">std::equal</a>(seperator.begin(),seperator.end(),i2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(i1+1,i2,<a href="CppStdBack_inserter.htm">std::back_inserter</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i1 <a href="CppOperatorAssign.htm">=</a> i2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;::<a href="CppIterator.htm">iterator</a> <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> v.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*i <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(*i,replaceWhat,replaceWithWhat);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPath.htm">GetPath</a>.htm<br/>
<a href="CppComment.htm">//</a>Returns the path, without a trailing backslash '\'<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetPath.htm">GetPath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> endOfPathIndex <a href="CppOperatorAssign.htm">=</a> fileName.rfind("\\",fileName.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(endOfPathIndex &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(fileName.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> fileName.substr(0,endOfPathIndex);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateDoc::ButtonAdvancedClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;PanelAdvanced-&gt;Visible <a href="CppOperatorAssign.htm">=</a> !PanelAdvanced-&gt;Visible;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateDoc::CheckBoxUseCodeClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;EditCode-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> CheckBoxUseCode-&gt;Checked;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppStrToUpper.htm">StrToUpper</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppStrToUpper.htm">StrToUpper</a>(<a href="CppStdString.htm">std::string</a> s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(s.begin(), s.end(), s.begin(),<a href="CppStdPtr_fun.htm">std::ptr_fun</a>(<a href="CppStdToupper.htm">std::toupper</a>));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormCreateRtf.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormCreateRtf.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormCreateRtfH<br/>
<a href="CppDefine.htm">#define</a> UnitFormCreateRtfH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Dialogs.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormCreateRtf : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelBottom;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TOpenDialog *OpenDialog1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TSaveDialog *SaveDialog1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPageControl *PageControl1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheetPlaintext;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheetDoc;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelCodedText;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelPlainTextTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonLoad;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonCreateDoc;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonSave;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *Button<a href="CppAbout.htm">About</a>1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *Button<a href="CppAbout.htm">About</a>2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *LabelN<a href="CppQuestion.htm">question</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEdit *EditN<a href="CppQuestion.htm">question</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelAdvanced;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonAdvanced;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TCheckBox *CheckBoxUseCode;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEdit *EditCode;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonCreateDocClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonLoadClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonSaveClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Button<a href="CppAbout.htm">About</a>Click(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonAdvancedClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall CheckBoxUseCodeClick(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_plaintext;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Model (in MVC)<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_doctext; <a href="CppComment.htm">//</a>Model (in MVC)<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_code;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdString.htm">std::string</a> m_path;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormCreateRtf(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormCreateRtf *FormCreateRtf;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppAdd.htm">Add</a>Char(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v_original,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> not,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; CreateDoc(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text_in,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppQuestion.htm">question</a>s_desired);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; CreateDoc(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text_in,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppQuestion.htm">question</a>s_desired,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; code);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.htm">FileToVector</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileExists.htm">FileExists</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppFileExists.htm">FileExists</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> GetRandomFromButNot(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;&amp; not);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppStrToUpper.htm">StrToUpper</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppStrToUpper.htm">StrToUpper</a>(<a href="CppStdString.htm">std::string</a> s);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> VectorToStringList(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v,TStrings * <b><a href="CppConst.htm">const</a></b> l);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSaveContainer.htm">SaveContainer</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppSaveContainer.htm">SaveContainer</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; c, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(c.begin(),c.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppContainer.htm">Container</a>::value_type&gt;(f,"\n"));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From <a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPath.htm">GetPath</a>.htm<br/>
<a href="CppComment.htm">//</a>Returns the path, without a trailing backslash '\'<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetPath.htm">GetPath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormCreateRtf.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormCreateRtf.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCctypeH.htm">cctype</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppEncranger.htm">Encranger</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormCreateRtf.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormCreateRtf *FormCreateRtf;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormCreateRtf::TFormCreateRtf(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateRtf::ButtonCreateDocClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_plaintext.size() &gt; 1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start at index one, because index zero is the copyright line<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(&amp;m_plaintext[1],m_plaintext.end());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CheckBoxUseCode-&gt;Checked)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_doctext <a href="CppOperatorAssign.htm">=</a> CreateDoc(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_plaintext,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EditN<a href="CppQuestion.htm">question</a>s-&gt;Text.<a href="CppToInt.htm">ToInt</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStrToUpper.htm">StrToUpper</a>(EditCode-&gt;Text.c_str()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_doctext <a href="CppOperatorAssign.htm">=</a> CreateDoc(m_plaintext,EditN<a href="CppQuestion.htm">question</a>s-&gt;Text.<a href="CppToInt.htm">ToInt</a>());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;VectorToStringList(m_doctext,RichEdit2-&gt;Lines);<br/>
<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>PageControl1-&gt;ActivePageIndex;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Assumes v is shuffled and v[0] is the copyright line<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; CreateDoc(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text_in,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppQuestion.htm">question</a>s_desired)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text_out;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parsing the <a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(text_in.size()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_<a href="CppQuestion.htm">question</a>s_desired <a href="CppOperatorPlus.htm">+</a> 1);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>1, because first line is signature<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the string to split<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to_split_original <a href="CppOperatorAssign.htm">=</a> text_in[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (str_to_split_original.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace \, by {comma}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to_split <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(str_to_split_original,"\\,","{comma}");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write string to split to <a href="CppDebug.htm">debug</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppDebug.htm">debug</a>_output <a href="CppOperatorAssign.htm">=</a> "My<a href="CppDebug.htm">Debug</a>:" <a href="CppOperatorPlus.htm">+</a> str_to_split;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(<a href="CppDebug.htm">debug</a>_output.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v_original <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(str_to_split,",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace {comma} by a comma <b><a href="CppFor.htm">for</a></b> each <a href="CppStdString.htm">std::string</a> in v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(v_original,"{comma}",",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> m_path <a href="CppOperatorPlus.htm">+</a> '\\' <a href="CppOperatorPlus.htm">+</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; answer&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> v[2];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (answer.empty()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <b><a href="CppFalse.htm">false</a></b>_answers(&amp;v[3],v.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppFalse.htm">false</a></b>_answers.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Open <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the doc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a>_line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ". "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQuestion.htm">question</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(<a href="CppQuestion.htm">question</a>_line);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(<a href="CppStdString.htm">std::string</a>(" ")); <a href="CppComment.htm">//</a>Empty line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Multiple choice <a href="CppQuestion.htm">question</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prepare the answers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; answers;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;answers.push_back(answer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(<b><a href="CppFalse.htm">false</a></b>_answers.begin(),<b><a href="CppFalse.htm">false</a></b>_answers.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(answers));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(answers.begin(),answers.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the doc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a>_line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ". "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQuestion.htm">question</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(<a href="CppQuestion.htm">question</a>_line);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_answers <a href="CppOperatorAssign.htm">=</a> answers.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_answers; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "O " <a href="CppOperatorPlus.htm">+</a> answers[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(<a href="CppStdString.htm">std::string</a>(" ")); <a href="CppComment.htm">//</a>Empty line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> text_out;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Assumes v is shuffled and v[0] is the copyright line<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; CreateDoc(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text_in,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppQuestion.htm">question</a>s_desired,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; code)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; text_out;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parsing the <a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(text_in.size()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_<a href="CppQuestion.htm">question</a>s_desired <a href="CppOperatorPlus.htm">+</a> 1);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>1, because first line is signature<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the string to split<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to_split_original <a href="CppOperatorAssign.htm">=</a> text_in[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (str_to_split_original.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace \, by {comma}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to_split <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(str_to_split_original,"\\,","{comma}");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write string to split to <a href="CppDebug.htm">debug</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppDebug.htm">debug</a>_output <a href="CppOperatorAssign.htm">=</a> "My<a href="CppDebug.htm">Debug</a>:" <a href="CppOperatorPlus.htm">+</a> str_to_split;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(<a href="CppDebug.htm">debug</a>_output.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v_original <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(str_to_split,",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace {comma} by a comma <b><a href="CppFor.htm">for</a></b> each <a href="CppStdString.htm">std::string</a> in v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(v_original,"{comma}",",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> m_path <a href="CppOperatorPlus.htm">+</a> '\\' <a href="CppOperatorPlus.htm">+</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> answer_<b><a href="CppChar.htm">char</a></b> <a href="CppOperatorAssign.htm">=</a> code[ (i <a href="CppOperatorMinus.htm">-</a> 1)<a href="CppOperatorModulus.htm">%</a> code.size() ]; <a href="CppComment.htm">//</a>-1 because v[0] is copyright line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> answer <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(answer_<b><a href="CppChar.htm">char</a></b>) <a href="CppOperatorPlus.htm">+</a> ") " <a href="CppOperatorPlus.htm">+</a> v[2];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (answer.empty()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <b><a href="CppFalse.htm">false</a></b>_answers_no_<b><a href="CppChar.htm">char</a></b>(&amp;v[3],v.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <b><a href="CppFalse.htm">false</a></b>_answers <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Char(<b><a href="CppFalse.htm">false</a></b>_answers_no_<b><a href="CppChar.htm">char</a></b>,answer_<b><a href="CppChar.htm">char</a></b>,code);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppFalse.htm">false</a></b>_answers.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Open <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the doc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a>_line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ". "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQuestion.htm">question</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(<a href="CppQuestion.htm">question</a>_line);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(<a href="CppStdString.htm">std::string</a>(" ")); <a href="CppComment.htm">//</a>Empty line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Multiple choice <a href="CppQuestion.htm">question</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prepare the answers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; answers;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;answers.push_back(answer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(<b><a href="CppFalse.htm">false</a></b>_answers.begin(),<b><a href="CppFalse.htm">false</a></b>_answers.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(answers));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(answers.begin(),answers.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the doc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a>_line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ". "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQuestion.htm">question</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(<a href="CppQuestion.htm">question</a>_line);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_answers <a href="CppOperatorAssign.htm">=</a> answers.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_answers; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> answers[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text_out.push_back(<a href="CppStdString.htm">std::string</a>(" ")); <a href="CppComment.htm">//</a>Empty line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> text_out;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppAdd.htm">Add</a>Char(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v_original,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> not,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; nots;<br/>
&nbsp;&nbsp;nots.push_back(not);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> v_original.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c <a href="CppOperatorAssign.htm">=</a> GetRandomFromButNot(s,nots);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nots.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(<a href="CppStdToupper.htm">std::toupper</a>(c))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>(1,<a href="CppStdToupper.htm">std::toupper</a>(c))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ") " <a href="CppOperatorPlus.htm">+</a> v_original[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(line);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> GetRandomFromButNot(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;&amp; not)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.size());<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> sz;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c <a href="CppOperatorAssign.htm">=</a> s[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdFind.htm">std::find</a>(not.begin(),not.end(),c)<a href="CppOperatorEqual.htm">==</a>not.end()) <a href="CppComment.htm">//</a>c is not in 'not'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> c;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateRtf::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;RichEdit1-&gt;Width <a href="CppOperatorAssign.htm">=</a> ClientWidth <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;RichEdit2-&gt;Width <a href="CppOperatorAssign.htm">=</a> ClientWidth <a href="CppOperatorMinus.htm">-</a> RichEdit1-&gt;Width;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateRtf::ButtonLoadClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!OpenDialog1-&gt;Execute()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;m_plaintext <a href="CppOperatorAssign.htm">=</a> <a href="CppFileToVector.htm">FileToVector</a>(OpenDialog1-&gt;FileName.c_str());<br/>
&nbsp;&nbsp;VectorToStringList(m_plaintext,RichEdit1-&gt;Lines);<br/>
&nbsp;&nbsp;EditN<a href="CppQuestion.htm">question</a>s-&gt;Text <a href="CppOperatorAssign.htm">=</a> m_plaintext.size() <a href="CppOperatorMinus.htm">-</a> 1;<br/>
<br/>
&nbsp;&nbsp;ButtonCreateDoc-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> (m_plaintext.size() &gt; 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_path <a href="CppOperatorAssign.htm">=</a> <a href="CppGetPath.htm">GetPath</a>(OpenDialog1-&gt;FileName.c_str());<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateRtf::ButtonSaveClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!SaveDialog1-&gt;Execute()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppSaveContainer.htm">SaveContainer</a>(m_doctext,SaveDialog1-&gt;FileName.c_str());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateRtf::Button<a href="CppAbout.htm">About</a>Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TForm<a href="CppAbout.htm">About</a>&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppAbout.htm">About</a>(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.htm">FileToVector</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileExists.htm">FileExists</a>(fileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; myVector;<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> in(fileName.c_str());<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> myString;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !in.eof(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(in,myString);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myVector.push_back(myString);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> myVector;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> VectorToStringList(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v,TStrings * <b><a href="CppConst.htm">const</a></b> l)<br/>
{<br/>
&nbsp;&nbsp;l-&gt;Clear();<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> v.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;l-&gt;<a href="CppAdd.htm">Add</a>((*i).c_str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileExists.htm">FileExists</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppFileExists.htm">FileExists</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdFstream.htm">std::fstream</a> fin;<br/>
&nbsp;&nbsp;fin.open(fileName.c_str(),<a href="CppStd.htm">std</a>::ios::in);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( fin.is_open() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fin.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fin.close();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSrand.htm">std::srand</a>(<a href="CppStdTime.htm">std::time</a>(0));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppReplaceAll.htm">ReplaceAll</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pos <a href="CppOperatorAssign.htm">=</a> s.find(replaceWhat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pos<a href="CppOperatorEqual.htm">==</a>-1) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.replace(pos,replaceWhat.size(),replaceWithWhat);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From <a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdString.htm">std::string</a>::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> end <a href="CppOperatorAssign.htm">=</a> input.end();<br/>
&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> i1 <a href="CppOperatorAssign.htm">=</a> input.begin();<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy until first comma<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> i2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSearch.htm">std::search</a>(i1,end,seperator.begin(), seperator.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i1<a href="CppOperatorNotEqual.htm">!=</a>i2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(i1,i2,<a href="CppStdBack_inserter.htm">std::back_inserter</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i1 <a href="CppOperatorAssign.htm">=</a> i2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (i1<a href="CppOperatorNotEqual.htm">!=</a>end)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy from comma to (comma <a href="CppOperatorLogicalOr.htm">||</a> end)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> i2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSearch.htm">std::search</a>(i1 <a href="CppOperatorPlus.htm">+</a> 1,end,seperator.begin(), seperator.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i1<a href="CppOperatorNotEqual.htm">!=</a>i2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i2 <a href="CppOperatorEqual.htm">==</a> end <a href="CppOperatorLogicalOr.htm">||</a> <a href="CppStdEqual.htm">std::equal</a>(seperator.begin(),seperator.end(),i2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(i1+1,i2,<a href="CppStdBack_inserter.htm">std::back_inserter</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i1 <a href="CppOperatorAssign.htm">=</a> i2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;::<a href="CppIterator.htm">iterator</a> <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> v.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*i <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(*i,replaceWhat,replaceWithWhat);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPath.htm">GetPath</a>.htm<br/>
<a href="CppComment.htm">//</a>Returns the path, without a trailing backslash '\'<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetPath.htm">GetPath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> endOfPathIndex <a href="CppOperatorAssign.htm">=</a> fileName.rfind("\\",fileName.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(endOfPathIndex &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(fileName.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> fileName.substr(0,endOfPathIndex);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateRtf::ButtonAdvancedClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;PanelAdvanced-&gt;Visible <a href="CppOperatorAssign.htm">=</a> !PanelAdvanced-&gt;Visible;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateRtf::CheckBoxUseCodeClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;EditCode-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> CheckBoxUseCode-&gt;Checked;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppStrToUpper.htm">StrToUpper</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppStrToUpper.htm">StrToUpper</a>(<a href="CppStdString.htm">std::string</a> s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(s.begin(), s.end(), s.begin(),<a href="CppStdPtr_fun.htm">std::ptr_fun</a>(<a href="CppStdToupper.htm">std::toupper</a>));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormCreateTest.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormCreateTest.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormCreateTestH<br/>
<a href="CppDefine.htm">#define</a> UnitFormCreateTestH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Dialogs.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormCreateTest : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelBottom;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TOpenDialog *OpenDialog1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TSaveDialog *SaveDialog1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPageControl *PageControl1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheetOriginal;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheetCipherText;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelCodedText;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelPlainTextTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *LabelKey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonLoad;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEdit *EditKey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonEncrypt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonSave;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *Button<a href="CppAbout.htm">About</a>1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *Button<a href="CppAbout.htm">About</a>2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *LabelN<a href="CppQuestion.htm">question</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEdit *EditN<a href="CppQuestion.htm">question</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonEncryptClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonLoadClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonSaveClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Button<a href="CppAbout.htm">About</a>Click(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_plaintext;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Model (in MVC)<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_ciphertext; <a href="CppComment.htm">//</a>Model (in MVC)<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormCreateTest(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormCreateTest *FormCreateTest;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.htm">FileToVector</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileExists.htm">FileExists</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppFileExists.htm">FileExists</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> VectorToStringList(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v,TStrings * <b><a href="CppConst.htm">const</a></b> l);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSaveContainer.htm">SaveContainer</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppSaveContainer.htm">SaveContainer</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; c, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(c.begin(),c.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppContainer.htm">Container</a>::value_type&gt;(f,"\n"));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormCreateTest.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormCreateTest.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppEncranger.htm">Encranger</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormCreateTest.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormCreateTest *FormCreateTest;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormCreateTest::TFormCreateTest(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateTest::ButtonEncryptClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key <a href="CppOperatorAssign.htm">=</a> EditKey-&gt;Text.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppEncranger.htm">Encranger</a> e(key);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start at index one, because index zero is the copyright line<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(&amp;m_plaintext[1],m_plaintext.end());<br/>
<br/>
&nbsp;&nbsp;m_ciphertext <a href="CppOperatorAssign.htm">=</a> m_plaintext;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;::<a href="CppIterator.htm">iterator</a> <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> m_ciphertext.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> m_ciphertext.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*i) <a href="CppOperatorAssign.htm">=</a> e.Encrypt(*i); <a href="CppComment.htm">//</a>TEMP<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_ciphertext.resize(EditN<a href="CppQuestion.htm">question</a>s-&gt;Text.<a href="CppToInt.htm">ToInt</a>()+1);<br/>
<br/>
&nbsp;&nbsp;VectorToStringList(m_ciphertext,RichEdit2-&gt;Lines);<br/>
<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>PageControl1-&gt;ActivePageIndex;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateTest::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;RichEdit1-&gt;Width <a href="CppOperatorAssign.htm">=</a> ClientWidth <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;RichEdit2-&gt;Width <a href="CppOperatorAssign.htm">=</a> ClientWidth <a href="CppOperatorMinus.htm">-</a> RichEdit1-&gt;Width;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateTest::ButtonLoadClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!OpenDialog1-&gt;Execute()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;m_plaintext <a href="CppOperatorAssign.htm">=</a> <a href="CppFileToVector.htm">FileToVector</a>(OpenDialog1-&gt;FileName.c_str());<br/>
&nbsp;&nbsp;VectorToStringList(m_plaintext,RichEdit1-&gt;Lines);<br/>
&nbsp;&nbsp;EditN<a href="CppQuestion.htm">question</a>s-&gt;Text <a href="CppOperatorAssign.htm">=</a> m_plaintext.size() <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;ButtonEncrypt-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateTest::ButtonSaveClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!SaveDialog1-&gt;Execute()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppSaveContainer.htm">SaveContainer</a>(m_ciphertext,SaveDialog1-&gt;FileName.c_str());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormCreateTest::Button<a href="CppAbout.htm">About</a>Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TForm<a href="CppAbout.htm">About</a>&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppAbout.htm">About</a>(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.htm">FileToVector</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileExists.htm">FileExists</a>(fileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; myVector;<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> in(fileName.c_str());<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> myString;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !in.eof(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(in,myString);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myVector.push_back(myString);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> myVector;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> VectorToStringList(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v,TStrings * <b><a href="CppConst.htm">const</a></b> l)<br/>
{<br/>
&nbsp;&nbsp;l-&gt;Clear();<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> v.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;l-&gt;<a href="CppAdd.htm">Add</a>((*i).c_str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileExists.htm">FileExists</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppFileExists.htm">FileExists</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdFstream.htm">std::fstream</a> fin;<br/>
&nbsp;&nbsp;fin.open(fileName.c_str(),<a href="CppStd.htm">std</a>::ios::in);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( fin.is_open() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fin.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fin.close();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSrand.htm">std::srand</a>(<a href="CppStdTime.htm">std::time</a>(0));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormExample.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormExample.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormExampleH<br/>
<a href="CppDefine.htm">#define</a> UnitFormExampleH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormExample : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormExample(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormExample *FormExample;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormExample.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormExample.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFormExample.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormExample *FormExample;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormExample::TFormExample(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormImage.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormImage.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormImageH<br/>
<a href="CppDefine.htm">#define</a> UnitFormImageH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormImage : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormImage(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormImage *FormImage;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormImage.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormImage.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFormImage.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormImage *FormImage;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormImage::TFormImage(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;Image-&gt;Picture-&gt;Graphic <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Graphic;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ClientWidth <a href="CppOperatorAssign.htm">=</a> Image-&gt;Picture-&gt;Graphic-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ClientHeight <a href="CppOperatorAssign.htm">=</a> Image-&gt;Picture-&gt;Graphic-&gt;Height;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormIncorrect.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormIncorrect.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormIncorrectH<br/>
<a href="CppDefine.htm">#define</a> UnitFormIncorrectH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormIncorrect : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelIncorrect;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rAutoClose;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rAutoClose<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormIncorrect(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; correct_answer);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormIncorrect *FormIncorrect;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormIncorrect.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormIncorrect.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFormIncorrect.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormIncorrect *FormIncorrect;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormIncorrect::TFormIncorrect(T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; correct_answer)<br/>
&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;RichEdit-&gt;Text <a href="CppOperatorAssign.htm">=</a> correct_answer.c_str();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormIncorrect::<a href="CppTime.htm">Time</a>rAutoClose<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;Close();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormMain.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormMain.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormMainH<br/>
<a href="CppDefine.htm">#define</a> UnitFormMainH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQuestion.htm">Question</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> TForm<a href="CppQuestion.htm">Question</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormMain : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *Quit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel<a href="CppQuestion.htm">Question</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rMain;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelQuit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rMain<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall QuitClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt; &gt;::const_iterator <a href="CppQuestion.htm">Question</a><a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TForm<a href="CppQuestion.htm">Question</a>&gt; m_child;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt; &gt; m_<a href="CppQuestion.htm">question</a>s;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_results;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_n_correct;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_n_incorrect;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_quit;<br/>
&nbsp;&nbsp;<a href="CppQuestion.htm">Question</a><a href="CppIterator.htm">Iterator</a> m_current_<a href="CppQuestion.htm">question</a>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Put<a href="CppQuestion.htm">Question</a>OnScreen();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowScore();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SaveTestResults() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_key;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_username;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_filename;<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> m_is_test;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormMain(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt; &gt;&amp; <a href="CppQuestion.htm">question</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_test,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; username,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormMain *FormMain;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppReplaceAll.htm">ReplaceAll</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSaveContainer.htm">SaveContainer</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppSaveContainer.htm">SaveContainer</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; c, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(c.begin(),c.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppContainer.htm">Container</a>::value_type&gt;(f,"\n"));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormMain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormMain.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppEncranger.htm">Encranger</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMain.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppOpenQuestion.htm">OpenQuestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppQuestion.htm">Question</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppOpenQuestion.htm">OpenQuestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppQuestion.htm">Question</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormMain *FormMain;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormMain::TFormMain(<br/>
&nbsp;&nbsp;T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt; &gt;&amp; <a href="CppQuestion.htm">question</a>s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_test,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; username,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
 : TForm(Owner),<br/>
&nbsp;&nbsp; m_<a href="CppQuestion.htm">question</a>s(<a href="CppQuestion.htm">question</a>s),<br/>
&nbsp;&nbsp; m_n_correct(0),<br/>
&nbsp;&nbsp; m_n_incorrect(0),<br/>
&nbsp;&nbsp; m_quit(<b><a href="CppFalse.htm">false</a></b>),<br/>
&nbsp;&nbsp; m_is_test(is_test),<br/>
&nbsp;&nbsp; m_key(key),<br/>
&nbsp;&nbsp; m_username(username),<br/>
&nbsp;&nbsp; m_filename(filename)<br/>
{<br/>
<br/>
&nbsp;&nbsp;m_results.push_back("NAME," <a href="CppOperatorPlus.htm">+</a> m_username);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reset <a href="CppQuestion.htm">question</a> order<br/>
&nbsp;&nbsp;<a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(m_<a href="CppQuestion.htm">question</a>s.begin(), m_<a href="CppQuestion.htm">question</a>s.end() );<br/>
&nbsp;&nbsp;m_current_<a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> m_<a href="CppQuestion.htm">question</a>s.begin();<br/>
<br/>
&nbsp;&nbsp;ShowScore();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::<a href="CppTime.htm">Time</a>rMain<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Main loop<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Disable multiple entries in loop<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rMain-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the first <a href="CppQuestion.htm">question</a> on screen<br/>
&nbsp;&nbsp;Put<a href="CppQuestion.htm">Question</a>OnScreen();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (m_quit <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <a href="CppComment.htm">//</a>Allow quitting<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prevent freezing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppApplication.htm">Application</a>-&gt;ProcessMessages();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> answer is already given<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_child-&gt;Get_state() <a href="CppOperatorNotEqual.htm">!=</a> TForm<a href="CppQuestion.htm">Question</a>::unanswered)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Keep track of the score<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_child-&gt;Get_state() <a href="CppOperatorEqual.htm">==</a> TForm<a href="CppQuestion.htm">Question</a>::correct)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_n_correct;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_is_test)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(m_child-&gt;Get_<a href="CppQuestion.htm">question</a>_string(),",","{comma}")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ",Y";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(s.begin(),s.end(),',')<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_results.push_back(s);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Save<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SaveTestResults();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_n_incorrect;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_is_test)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(m_child-&gt;Get_<a href="CppQuestion.htm">question</a>_string(),",","{comma}")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ",N";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(s.begin(),s.end(),',')<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_results.push_back(s);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Save<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SaveTestResults();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put score on screen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShowScore();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_current_<a href="CppQuestion.htm">question</a>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_current_<a href="CppQuestion.htm">question</a> <a href="CppOperatorEqual.htm">==</a> m_<a href="CppQuestion.htm">question</a>s.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_is_test)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SaveTestResults();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShowMessage("Test done. File is saved.");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_quit <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reset <a href="CppQuestion.htm">question</a> order<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(m_<a href="CppQuestion.htm">question</a>s.begin(), m_<a href="CppQuestion.htm">question</a>s.end() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_current_<a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> m_<a href="CppQuestion.htm">question</a>s.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_quit)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put <b><a href="CppNew.htm">new</a></b> <a href="CppQuestion.htm">question</a> on screen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Put<a href="CppQuestion.htm">Question</a>OnScreen();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Quit<br/>
&nbsp;&nbsp;Close();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::QuitClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;m_quit <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_child)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_child-&gt;Left&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> Panel<a href="CppQuestion.htm">Question</a>-&gt;Left;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_child-&gt;Top&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Panel<a href="CppQuestion.htm">Question</a>-&gt;Top;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_child-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Panel<a href="CppQuestion.htm">Question</a>-&gt;Width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_child-&gt;Height <a href="CppOperatorAssign.htm">=</a> Panel<a href="CppQuestion.htm">Question</a>-&gt;Height;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMain::Put<a href="CppQuestion.htm">Question</a>OnScreen()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQuestion.htm">Question</a> * q <a href="CppOperatorAssign.htm">=</a> (*m_current_<a href="CppQuestion.htm">question</a>).get();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppOpenQuestion.htm">OpenQuestion</a>*&gt;(q))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Open <a href="CppQuestion.htm">Question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_child <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TForm<a href="CppQuestion.htm">Question</a>&gt;(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppOpenQuestion.htm">OpenQuestion</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,*m_current_<a href="CppQuestion.htm">question</a>,m_is_test));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Failed <b><a href="CppTry.htm">try</a></b> to set the Edit's focus,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>TForm<a href="CppOpenQuestion.htm">OpenQuestion</a> * f <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;TForm<a href="CppOpenQuestion.htm">OpenQuestion</a>*&gt;(m_child.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>f-&gt;Edit-&gt;SetFocus();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Multiple choice <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_child <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TForm<a href="CppQuestion.htm">Question</a>&gt;(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,*m_current_<a href="CppQuestion.htm">question</a>,m_is_test));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_child <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TForm<a href="CppQuestion.htm">Question</a>&gt;(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppQuestion.htm">Question</a>(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,m_current_<a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;m_child-&gt;Parent <a href="CppOperatorAssign.htm">=</a> Panel<a href="CppQuestion.htm">Question</a>;<br/>
&nbsp;&nbsp;m_child-&gt;Left&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> Panel<a href="CppQuestion.htm">Question</a>-&gt;Left;<br/>
&nbsp;&nbsp;m_child-&gt;Top&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Panel<a href="CppQuestion.htm">Question</a>-&gt;Top;<br/>
&nbsp;&nbsp;m_child-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Panel<a href="CppQuestion.htm">Question</a>-&gt;Width;<br/>
&nbsp;&nbsp;m_child-&gt;Height <a href="CppOperatorAssign.htm">=</a> Panel<a href="CppQuestion.htm">Question</a>-&gt;Height;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMain::ShowScore()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_is_test)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppQuestion.htm">question</a>s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_<a href="CppQuestion.htm">question</a>s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_answered <a href="CppOperatorAssign.htm">=</a> m_n_correct <a href="CppOperatorPlus.htm">+</a> m_n_incorrect;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Panel-&gt;Caption<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "Answered " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(n_answered)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " of " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(n_<a href="CppQuestion.htm">question</a>s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " <a href="CppQuestion.htm">question</a>s.";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (m_n_correct <a href="CppOperatorPlus.htm">+</a> m_n_incorrect <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Panel-&gt;Caption<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "Correct: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(m_n_correct)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ", incorrect: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(m_n_incorrect)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ", Score: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> FloatToStr(100.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_n_correct)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_n_correct <a href="CppOperatorPlus.htm">+</a> m_n_incorrect))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "%";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Panel-&gt;Caption<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "Correct: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ", incorrect: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ", Score: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> FloatToStr(100.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "%";<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMain::SaveTestResults() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v(m_results);<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obscure all v by 7 asterisks<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_ast <a href="CppOperatorAssign.htm">=</a> <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 7;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>(1 <a href="CppOperatorPlus.htm">+</a> n_ast,'*')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> v[i]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(8 <a href="CppOperatorMinus.htm">-</a> n_ast,'*');<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Shuffle the obscured <a href="CppStdString.htm">std::string</a>s at random<br/>
&nbsp;&nbsp;<a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(v.begin(),v.end());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Encode strings<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppEncranger.htm">Encranger</a> e(m_key);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i] <a href="CppOperatorAssign.htm">=</a> e.Encrypt(v[i]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Always ignore <b><a href="CppIf.htm">if</a></b> the use has changed his/her filename<br/>
&nbsp;&nbsp;<a href="CppSaveContainer.htm">SaveContainer</a>(v,m_filename);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPath.htm">GetPath</a>.htm<br/>
<a href="CppComment.htm">//</a>Returns the path, without a trailing backslash '\'<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetPath.htm">GetPath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> endOfPathIndex <a href="CppOperatorAssign.htm">=</a> fileName.rfind("\\",fileName.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(endOfPathIndex &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(fileName.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> fileName.substr(0,endOfPathIndex);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSrand.htm">std::srand</a>(<a href="CppStdTime.htm">std::time</a>(0));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppReplaceAll.htm">ReplaceAll</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pos <a href="CppOperatorAssign.htm">=</a> s.find(replaceWhat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pos<a href="CppOperatorEqual.htm">==</a>-1) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.replace(pos,replaceWhat.size(),replaceWithWhat);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormMenu.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormMenu.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormMenuH<br/>
<a href="CppDefine.htm">#define</a> UnitFormMenuH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Dialogs.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQuestion.htm">Question</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormMenu : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TOpenDialog *OpenDialog;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageLoad<a href="CppExercise.htm">Exercise</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageStart<a href="CppExercise.htm">Exercise</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTitle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageLoadTest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageStartTest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelBottom;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppAbout.htm">About</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageQuit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel<a href="CppExercise.htm">Exercise</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TSaveDialog *SaveDialog1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageLoad<a href="CppExercise.htm">Exercise</a>Click(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageStart<a href="CppExercise.htm">Exercise</a>Click(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageQuitClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Image<a href="CppAbout.htm">About</a>Click(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageStartTestClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageLoadTestClick(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt; &gt; m_<a href="CppQuestion.htm">question</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String signature;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_key;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormMenu(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormMenu *FormMenu;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From <a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPath.htm">GetPath</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetPath.htm">GetPath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppReplaceAll.htm">ReplaceAll</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormMenu.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormMenu.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppOpenQuestion.htm">OpenQuestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppQuestion.htm">Question</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMenu.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMain.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppEncranger.htm">Encranger</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormMenu *FormMenu;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormMenu::TFormMenu(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
 : TForm(Owner),<br/>
&nbsp;&nbsp; signature("<a href="ToolHometrainer.htm">Hometrainer</a>2 (C) 2009 Richel Bilderbeek"),<br/>
&nbsp;&nbsp; m_key(0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("f.txt")<a href="CppOperatorEqual.htm">==</a>"f.txt");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\f.txt")<a href="CppOperatorEqual.htm">==</a>"C:");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\games\\f.txt")<a href="CppOperatorEqual.htm">==</a>"C:\\games");<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdString.htm">std::string</a>::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> end <a href="CppOperatorAssign.htm">=</a> input.end();<br/>
&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> i1 <a href="CppOperatorAssign.htm">=</a> input.begin();<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy until first comma<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> i2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSearch.htm">std::search</a>(i1,end,seperator.begin(), seperator.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i1<a href="CppOperatorNotEqual.htm">!=</a>i2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(i1,i2,<a href="CppStdBack_inserter.htm">std::back_inserter</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i1 <a href="CppOperatorAssign.htm">=</a> i2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (i1<a href="CppOperatorNotEqual.htm">!=</a>end)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy from comma to (comma <a href="CppOperatorLogicalOr.htm">||</a> end)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> i2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSearch.htm">std::search</a>(i1 <a href="CppOperatorPlus.htm">+</a> 1,end,seperator.begin(), seperator.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i1<a href="CppOperatorNotEqual.htm">!=</a>i2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i2 <a href="CppOperatorEqual.htm">==</a> end <a href="CppOperatorLogicalOr.htm">||</a> <a href="CppStdEqual.htm">std::equal</a>(seperator.begin(),seperator.end(),i2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(i1+1,i2,<a href="CppStdBack_inserter.htm">std::back_inserter</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i1 <a href="CppOperatorAssign.htm">=</a> i2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMenu::ImageLoad<a href="CppExercise.htm">Exercise</a>Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!OpenDialog-&gt;Execute()) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TStringList&gt; s(<b><a href="CppNew.htm">new</a></b> TStringList);<br/>
&nbsp;&nbsp;s-&gt;LoadFromFile(OpenDialog-&gt;FileName);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> path <a href="CppOperatorAssign.htm">=</a> <a href="CppGetPath.htm">GetPath</a>(OpenDialog-&gt;FileName.c_str());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s-&gt;Count <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MessageDlg("File is empty and cannot be used",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mtError,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMsgDlgButtons() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mbOK,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s-&gt;Count <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MessageDlg("File has only one line and thus cannot be used",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mtError,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMsgDlgButtons() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mbOK,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s-&gt;Count &gt; 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s-&gt;<b><a href="CppOperator.htm">operator</a></b> [](0) <a href="CppOperatorNotEqual.htm">!=</a> signature)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MessageDlg("The first line of the file must read\n" <a href="CppOperatorPlus.htm">+</a> signature<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "\nTherefore the file will not be used",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mtError,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMsgDlgButtons() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mbOK,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parsing the <a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;m_<a href="CppQuestion.htm">question</a>s.clear();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="CppQuestion.htm">question</a>s.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> s-&gt;Count;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>1, because first line is signature<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the string to split<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to_split_original <a href="CppOperatorAssign.htm">=</a> s-&gt;<b><a href="CppOperator.htm">operator</a></b> [](i).c_str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (str_to_split_original.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace \, by {comma}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to_split <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(str_to_split_original,"\\,","{comma}");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write string to split to <a href="CppDebug.htm">debug</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppDebug.htm">debug</a>_output <a href="CppOperatorAssign.htm">=</a> "My<a href="CppDebug.htm">Debug</a>:" <a href="CppOperatorPlus.htm">+</a> str_to_split;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(<a href="CppDebug.htm">debug</a>_output.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v_original <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(str_to_split,",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace {comma} by a comma <b><a href="CppFor.htm">for</a></b> each <a href="CppStdString.htm">std::string</a> in v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(v_original,"{comma}",",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename <a href="CppOperatorAssign.htm">=</a> path <a href="CppOperatorPlus.htm">+</a> '\\' <a href="CppOperatorPlus.htm">+</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; answer&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> v[2];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (answer.empty()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <b><a href="CppFalse.htm">false</a></b>_answers(&amp;v[3],v.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppFalse.htm">false</a></b>_answers.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Open <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; answers(<a href="CppSeperateString.htm">SeperateString</a>(answer,"/"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt; q(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppOpenQuestion.htm">OpenQuestion</a>(filename,<a href="CppQuestion.htm">question</a>,answers));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppQuestion.htm">question</a>s.push_back(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Multiple choice <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt; q(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(filename,<a href="CppQuestion.htm">question</a>,answer,<b><a href="CppFalse.htm">false</a></b>_answers));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppQuestion.htm">question</a>s.push_back(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_<a href="CppQuestion.htm">question</a>s.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) ImageStart<a href="CppExercise.htm">Exercise</a>-&gt;Visible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMenu::ImageStart<a href="CppExercise.htm">Exercise</a>Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> username <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="CppQuestion.htm">question</a>s.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMain&gt; f(<b><a href="CppNew.htm">new</a></b> TFormMain(0,m_<a href="CppQuestion.htm">question</a>s,<b><a href="CppFalse.htm">false</a></b>,key,username,"no_file.txt"));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMenu::Image<a href="CppAbout.htm">About</a>Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TForm<a href="CppAbout.htm">About</a>&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppAbout.htm">About</a>(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMenu::ImageQuitClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;Close();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSrand.htm">std::srand</a>(<a href="CppStdTime.htm">std::time</a>(0));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPath.htm">GetPath</a>.htm<br/>
<a href="CppComment.htm">//</a>Returns the path, without a trailing backslash '\'<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetPath.htm">GetPath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> endOfPathIndex <a href="CppOperatorAssign.htm">=</a> fileName.rfind("\\",fileName.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(endOfPathIndex &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(fileName.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> fileName.substr(0,endOfPathIndex);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMenu::ImageStartTestClick(TObject *Sender)<br/>
{<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppComment.htm">//</a>Ask name<br/>
&nbsp;&nbsp;String username_Vcl <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> inputGiven <a href="CppOperatorAssign.htm">=</a> InputQuery(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="ToolHometrainer.htm">Hometrainer</a>2",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Please enter your full name",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;username_Vcl);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!inputGiven) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> username <a href="CppOperatorAssign.htm">=</a> username_Vcl.c_str();<br/>
<br/>
&nbsp;&nbsp;SaveDialog1-&gt;FileName <a href="CppOperatorAssign.htm">=</a> String(username.c_str()) <a href="CppOperatorPlus.htm">+</a> ".txt";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!SaveDialog1-&gt;Execute()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> path <a href="CppOperatorAssign.htm">=</a> <a href="CppGetPath.htm">GetPath</a>(SaveDialog1-&gt;FileName.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> path <a href="CppOperatorPlus.htm">+</a> "\\" <a href="CppOperatorPlus.htm">+</a> username <a href="CppOperatorPlus.htm">+</a> ".txt";<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="CppQuestion.htm">question</a>s.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormMain&gt; f(<b><a href="CppNew.htm">new</a></b> TFormMain(0,m_<a href="CppQuestion.htm">question</a>s,<b><a href="CppTrue.htm">true</a></b>,m_key,username,filename));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMenu::ImageLoadTestClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Ask <b><a href="CppFor.htm">for</a></b> file<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!OpenDialog-&gt;Execute()) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Ask <b><a href="CppFor.htm">for</a></b> key<br/>
&nbsp;&nbsp;String userInput <a href="CppOperatorAssign.htm">=</a> "0";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> inputGiven <a href="CppOperatorAssign.htm">=</a> InputQuery(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="ToolHometrainer.htm">Hometrainer</a> 2", <a href="CppComment.htm">//</a>The caption of the InputBox<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"What is the encryption key?",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;userInput);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!inputGiven) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key_user <a href="CppOperatorAssign.htm">=</a> userInput.<a href="CppToInt.htm">ToInt</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TStringList&gt; s(<b><a href="CppNew.htm">new</a></b> TStringList);<br/>
&nbsp;&nbsp;s-&gt;LoadFromFile(OpenDialog-&gt;FileName);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> path <a href="CppOperatorAssign.htm">=</a> <a href="CppGetPath.htm">GetPath</a>(OpenDialog-&gt;FileName.c_str());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s-&gt;Count <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MessageDlg("File is empty and cannot be used",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mtError,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMsgDlgButtons() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mbOK,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s-&gt;Count <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MessageDlg("File has only one line and thus cannot be used",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mtError,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMsgDlgButtons() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mbOK,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Deencrypt file<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Need of <b><a href="CppNew.htm">new</a></b> TStringList, because TStringList::<b><a href="CppOperator.htm">operator</a></b>[]()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>does not seem to support writing, use TStringList::<a href="CppAdd.htm">Add</a>() instead<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TStringList&gt; s_new(<b><a href="CppNew.htm">new</a></b> TStringList);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEncranger.htm">Encranger</a> e(key_user);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> s-&gt;Count;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String s1 <a href="CppOperatorAssign.htm">=</a> s-&gt;<b><a href="CppOperator.htm">operator</a></b> [](i).c_str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String s2 <a href="CppOperatorAssign.htm">=</a> e.Deencrypt(s1.c_str()).c_str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_new-&gt;<a href="CppAdd.htm">Add</a>(s2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Overwrite old TStringList<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> s_new;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s-&gt;Count &gt; 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s-&gt;<b><a href="CppOperator.htm">operator</a></b> [](0) <a href="CppOperatorNotEqual.htm">!=</a> signature)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ShowMessage(s-&gt;<b><a href="CppOperator.htm">operator</a></b> [](0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MessageDlg("Incorrect key given, therefore test is not loaded.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mtError,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMsgDlgButtons() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mbOK,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parsing the <a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;m_<a href="CppQuestion.htm">question</a>s.clear();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="CppQuestion.htm">question</a>s.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> s-&gt;Count;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>1, because first line is signature<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to_split_original <a href="CppOperatorAssign.htm">=</a> s-&gt;<b><a href="CppOperator.htm">operator</a></b> [](i).c_str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (str_to_split_original.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace \, by {comma}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_to_split <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(str_to_split_original,"\\,","{comma}");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppDebug.htm">debug</a>_output <a href="CppOperatorAssign.htm">=</a> "My<a href="CppDebug.htm">Debug</a>:" <a href="CppOperatorPlus.htm">+</a> str_to_split;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(<a href="CppDebug.htm">debug</a>_output.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v_original <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(str_to_split,",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace {comma} by a comma <b><a href="CppFor.htm">for</a></b> each <a href="CppStdString.htm">std::string</a> in v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(v_original,"{comma}",",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename <a href="CppOperatorAssign.htm">=</a> path <a href="CppOperatorPlus.htm">+</a> '\\' <a href="CppOperatorPlus.htm">+</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; answer&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> v[2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <b><a href="CppFalse.htm">false</a></b>_answers(&amp;v[3],v.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppFalse.htm">false</a></b>_answers.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Open <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; answers(<a href="CppSeperateString.htm">SeperateString</a>(answer,"/"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt; q(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppOpenQuestion.htm">OpenQuestion</a>(filename,<a href="CppQuestion.htm">question</a>,answers));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppQuestion.htm">question</a>s.push_back(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Multiple choice <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt; q(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(filename,<a href="CppQuestion.htm">question</a>,answer,<b><a href="CppFalse.htm">false</a></b>_answers));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppQuestion.htm">question</a>s.push_back(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_<a href="CppQuestion.htm">question</a>s.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_key <a href="CppOperatorAssign.htm">=</a> key_user;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageStartTest-&gt;Visible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppReplaceAll.htm">ReplaceAll</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pos <a href="CppOperatorAssign.htm">=</a> s.find(replaceWhat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pos<a href="CppOperatorEqual.htm">==</a>-1) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.replace(pos,replaceWhat.size(),replaceWithWhat);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;::<a href="CppIterator.htm">iterator</a> <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> v.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*i <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(*i,replaceWhat,replaceWithWhat);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormMultipleChoiceQuestion.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormMultipleChoiceQuestion.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>H<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppQuestion.htm">Question</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppQuestion.htm">Question</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> : <b><a href="CppPublic.htm">public</a></b> TForm<a href="CppQuestion.htm">Question</a><br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRadioGroup *RadioGroup;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall RadioGroupClick(TObject *Sender);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> * m_mc<a href="CppQuestion.htm">question</a>;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt;&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_test);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> *Form<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> GetMaxStringLength(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormMultipleChoiceQuestion.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormMultipleChoiceQuestion.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;jpeg.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormImage.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormCorrect.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormIncorrect.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDot<a href="CppMatrix.htm">Matrix</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> <a href="CppLink.htm">link</a> "UnitForm<a href="CppQuestion.htm">Question</a>"<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> *Form<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::TForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(<br/>
&nbsp;&nbsp;T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt;&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_test)<br/>
&nbsp;&nbsp;: TForm<a href="CppQuestion.htm">Question</a>(Owner,<a href="CppQuestion.htm">question</a>,is_test),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_mc<a href="CppQuestion.htm">question</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>*&gt;(<a href="CppQuestion.htm">question</a>.get()))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_mc<a href="CppQuestion.htm">question</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cast to <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> has failed");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_mc<a href="CppQuestion.htm">question</a>-&gt;m_answers.size() <a href="CppOperatorEqual.htm">==</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A multiple choice <a href="CppQuestion.htm">question</a> only has one correct answer");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppFileExists.htm">FileExists</a>(m_mc<a href="CppQuestion.htm">question</a>-&gt;m_filename.c_str()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Image-&gt;Picture-&gt;LoadFromFile(m_mc<a href="CppQuestion.htm">question</a>-&gt;m_filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just <b><a href="CppContinue.htm">continue</a></b>...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write a message<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(" "); <a href="CppComment.htm">//</a>First empty line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> font_width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 6;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> font_height <a href="CppOperatorAssign.htm">=</a> 8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Valid filename?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does it contain a dot?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdFind.htm">std::find</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mc<a href="CppQuestion.htm">question</a>-&gt;m_filename.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mc<a href="CppQuestion.htm">question</a>-&gt;m_filename.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> m_mc<a href="CppQuestion.htm">question</a>-&gt;m_filename.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(" File not found: ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> " " <a href="CppOperatorPlus.htm">+</a> m_mc<a href="CppQuestion.htm">question</a>-&gt;m_filename <a href="CppOperatorPlus.htm">+</a> " ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(" (No image) ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(" "); <a href="CppComment.htm">//</a>Last empty line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetMaxStringLength(v) * font_width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> v.size() * font_height;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Image-&gt;Picture-&gt;Graphic-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Image-&gt;Picture-&gt;Graphic-&gt;Height <a href="CppOperatorAssign.htm">=</a> height;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dot<a href="CppMatrix.htm">Matrix</a>(Image,0,0,v);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;RichEdit-&gt;Text <a href="CppOperatorAssign.htm">=</a> m_mc<a href="CppQuestion.htm">question</a>-&gt;m_<a href="CppQuestion.htm">question</a>.c_str();<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; answers(m_mc<a href="CppQuestion.htm">question</a>-&gt;mWrongAnswers);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;answers.push_back(m_mc<a href="CppQuestion.htm">question</a>-&gt;m_answers[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;random_shuffle(answers.begin(), answers.end() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_answers <a href="CppOperatorAssign.htm">=</a> answers.size();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;RadioGroup-&gt;Items-&gt;Clear();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_answers; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RadioGroup-&gt;Items-&gt;<a href="CppAdd.htm">Add</a>(answers[i].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::ImageClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show image full screen<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormImage&gt; f(<b><a href="CppNew.htm">new</a></b> TFormImage(0,Image));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::RadioGroupClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RadioGroup-&gt;ItemIndex <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (RadioGroup-&gt;Items-&gt;<b><a href="CppOperator.htm">operator</a></b> [](RadioGroup-&gt;ItemIndex)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> m_mc<a href="CppQuestion.htm">question</a>-&gt;m_answers[0].c_str())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Correct<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_is_test)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reward user when not test<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormCorrect&gt; f(<b><a href="CppNew.htm">new</a></b> TFormCorrect(0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> correct;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Close();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Incorrect<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_is_test)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show correct answer when not test<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormIncorrect&gt; f(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TFormIncorrect(0,m_mc<a href="CppQuestion.htm">question</a>-&gt;m_answers[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> incorrect;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Close();<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> GetMaxStringLength(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;::const_iterator Iter;<br/>
&nbsp;&nbsp;Iter i <a href="CppOperatorAssign.htm">=</a> v.begin();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Iter j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> max <a href="CppOperatorAssign.htm">=</a> (*i).size();<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> (*i).size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp;(sz &gt; max) max <a href="CppOperatorAssign.htm">=</a> sz;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> max;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormOpenQuestion.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormOpenQuestion.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="CppOpenQuestion.htm">OpenQuestion</a>H<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="CppOpenQuestion.htm">OpenQuestion</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppQuestion.htm">Question</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppOpenQuestion.htm">OpenQuestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppQuestion.htm">Question</a>.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQuestion.htm">Question</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppOpenQuestion.htm">OpenQuestion</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="CppOpenQuestion.htm">OpenQuestion</a> : <b><a href="CppPublic.htm">public</a></b> TForm<a href="CppQuestion.htm">Question</a><br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEdit *Edit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonDone;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall EditKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonDoneClick(TObject *Sender);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppOpenQuestion.htm">OpenQuestion</a> * <b><a href="CppConst.htm">const</a></b> m_o<a href="CppQuestion.htm">question</a>;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TForm<a href="CppOpenQuestion.htm">OpenQuestion</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt;&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_test);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="CppOpenQuestion.htm">OpenQuestion</a> *Form<a href="CppOpenQuestion.htm">OpenQuestion</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> GetMaxStringLength(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormOpenQuestion.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormOpenQuestion.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;jpeg.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppOpenQuestion.htm">OpenQuestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormImage.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormCorrect.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormIncorrect.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDot<a href="CppMatrix.htm">Matrix</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> <a href="CppLink.htm">link</a> "UnitForm<a href="CppQuestion.htm">Question</a>"<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="CppOpenQuestion.htm">OpenQuestion</a> *Form<a href="CppOpenQuestion.htm">OpenQuestion</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="CppOpenQuestion.htm">OpenQuestion</a>::TForm<a href="CppOpenQuestion.htm">OpenQuestion</a>(<br/>
&nbsp;&nbsp;T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt;&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_test)<br/>
&nbsp;&nbsp;: TForm<a href="CppQuestion.htm">Question</a>(Owner,<a href="CppQuestion.htm">question</a>,is_test),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_o<a href="CppQuestion.htm">question</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppOpenQuestion.htm">OpenQuestion</a>*&gt;(<a href="CppQuestion.htm">question</a>.get()))<br/>
{<br/>
&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> unanswered;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppFileExists.htm">FileExists</a>(m_o<a href="CppQuestion.htm">question</a>-&gt;m_filename.c_str()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Image-&gt;Picture-&gt;LoadFromFile(m_o<a href="CppQuestion.htm">question</a>-&gt;m_filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just <b><a href="CppContinue.htm">continue</a></b>...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write a message<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(" "); <a href="CppComment.htm">//</a>First empty line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> font_width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 6;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> font_height <a href="CppOperatorAssign.htm">=</a> 8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Valid filename?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does it contain a dot?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdFind.htm">std::find</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_o<a href="CppQuestion.htm">question</a>-&gt;m_filename.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_o<a href="CppQuestion.htm">question</a>-&gt;m_filename.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> m_o<a href="CppQuestion.htm">question</a>-&gt;m_filename.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(" File not found: ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> " " <a href="CppOperatorPlus.htm">+</a> m_o<a href="CppQuestion.htm">question</a>-&gt;m_filename <a href="CppOperatorPlus.htm">+</a> " ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(" (No image) ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(" "); <a href="CppComment.htm">//</a>Last empty line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetMaxStringLength(v) * font_width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> v.size() * font_height;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Image-&gt;Picture-&gt;Graphic-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Image-&gt;Picture-&gt;Graphic-&gt;Height <a href="CppOperatorAssign.htm">=</a> height;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dot<a href="CppMatrix.htm">Matrix</a>(Image,0,0,v);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;RichEdit-&gt;Text <a href="CppOperatorAssign.htm">=</a> m_o<a href="CppQuestion.htm">question</a>-&gt;m_<a href="CppQuestion.htm">question</a>.c_str();<br/>
&nbsp;&nbsp;Edit-&gt;Text <a href="CppOperatorAssign.htm">=</a> "";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="CppOpenQuestion.htm">OpenQuestion</a>::ImageClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show image full screen<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormImage&gt; f(<b><a href="CppNew.htm">new</a></b> TFormImage(0,Image));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="CppOpenQuestion.htm">OpenQuestion</a>::EditKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Key <a href="CppOperatorEqual.htm">==</a> VK_RETURN) ButtonDone-&gt;Click();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="CppOpenQuestion.htm">OpenQuestion</a>::ButtonDoneClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_o<a href="CppQuestion.htm">question</a>-&gt;IsCorrect(Edit-&gt;Text.c_str()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Correct<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_is_test)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reward user <b><a href="CppIf.htm">if</a></b> not a test<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormCorrect&gt; f(<b><a href="CppNew.htm">new</a></b> TFormCorrect(0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> correct;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Close();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Incorrect<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_is_test)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show user correct answer <b><a href="CppIf.htm">if</a></b> not a test<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;TFormIncorrect&gt; f(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> TFormIncorrect(0,m_o<a href="CppQuestion.htm">question</a>-&gt;m_answers[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> incorrect;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Close();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> GetMaxStringLength(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;::const_iterator Iter;<br/>
&nbsp;&nbsp;Iter i <a href="CppOperatorAssign.htm">=</a> v.begin();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Iter j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> max <a href="CppOperatorAssign.htm">=</a> (*i).size();<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> (*i).size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp;(sz &gt; max) max <a href="CppOperatorAssign.htm">=</a> sz;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> max;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormQuestion.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormQuestion.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="CppQuestion.htm">Question</a>H<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="CppQuestion.htm">Question</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppQuestion.htm">Question</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="CppQuestion.htm">Question</a> : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> <a href="CppQuestion.htm">Question</a>_state { unanswered, correct, incorrect };<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt; m_<a href="CppQuestion.htm">question</a>; <a href="CppComment.htm">//</a>Keeps the <a href="CppPointer.htm">pointer</a> alive<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQuestion.htm">Question</a>_state m_state;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> m_is_test;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TForm<a href="CppQuestion.htm">Question</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt;&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_test);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQuestion.htm">Question</a>_state Get_state() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_state; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> Get_<a href="CppQuestion.htm">question</a>_string() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="CppQuestion.htm">Question</a> *Form<a href="CppQuestion.htm">Question</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRemovePath.htm">RemovePath</a>.htm<br/>
<a href="CppComment.htm">//</a>Returns the filename without path<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRemovePath.htm">RemovePath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormQuestion.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormQuestion.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppQuestion.htm">Question</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormImage.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormCorrect.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormIncorrect.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="CppQuestion.htm">Question</a> *Form<a href="CppQuestion.htm">Question</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="CppQuestion.htm">Question</a>::TForm<a href="CppQuestion.htm">Question</a>(<br/>
&nbsp;&nbsp;T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestion.htm">Question</a>&gt;&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_test)<br/>
&nbsp;&nbsp;: TForm(Owner),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppQuestion.htm">question</a>(<a href="CppQuestion.htm">question</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_test(is_test)<br/>
{<br/>
&nbsp;&nbsp;m_state <a href="CppOperatorAssign.htm">=</a> unanswered;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> TForm<a href="CppQuestion.htm">Question</a>::Get_<a href="CppQuestion.htm">question</a>_string() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use '-' instead of comma, because of <a href="CppSeperateString.htm">SeperateString</a> in UnitFormScoreTests<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<a href="CppRemovePath.htm">RemovePath</a>(m_<a href="CppQuestion.htm">question</a>-&gt;m_filename) <a href="CppOperatorPlus.htm">+</a> "-" <a href="CppOperatorPlus.htm">+</a> m_<a href="CppQuestion.htm">question</a>-&gt;m_<a href="CppQuestion.htm">question</a>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRemovePath.htm">RemovePath</a>.htm<br/>
<a href="CppComment.htm">//</a>Returns the filename without path<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRemovePath.htm">RemovePath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> path_sz <a href="CppOperatorAssign.htm">=</a> filename.rfind("\\",filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (path_sz <a href="CppOperatorEqual.htm">==</a> sz) <b><a href="CppReturn.htm">return</a></b> filename;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> filename.substr(path_sz <a href="CppOperatorPlus.htm">+</a> 1,sz <a href="CppOperatorMinus.htm">-</a> 1 <a href="CppOperatorMinus.htm">-</a> path_sz);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormScoreTests.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormScoreTests.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormScoreTestsH<br/>
<a href="CppDefine.htm">#define</a> UnitFormScoreTestsH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Dialogs.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Grids.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormScoreTests : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonLoad;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *LabelKey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEdit *EditKey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonSave;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *Button<a href="CppAbout.htm">About</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TOpenDialog *OpenDialog1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEdit *EditPenalty;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *LabelPenalty;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonScore;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TSaveDialog *SaveDialog1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPageControl *PageControl1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheetStudents;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet<a href="CppQuestion.htm">Question</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TStringGrid *StringGridStudents;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TStringGrid *StringGrid<a href="CppQuestion.htm">Question</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *LabelN<a href="CppQuestion.htm">question</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonLoadClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonScoreClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Button<a href="CppAbout.htm">About</a>Click(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonSaveClick(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ReadFile(<b><a href="CppConst.htm">const</a></b> String&amp; filename);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Score<a href="CppQuestion.htm">Question</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_correct);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Calculate<a href="CppQuestion.htm">Question</a>Scores();<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormScoreTests(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormScoreTests *FormScoreTests;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> FindUserName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> Count<a href="CppQuestion.htm">Question</a>s(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.htm">FileToVector</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileExists.htm">FileExists</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppFileExists.htm">FileExists</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From <a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppReplaceString.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppReplaceOnce.htm">ReplaceOnce</a>(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppReplaceString.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRemovePath.htm">RemovePath</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRemovePath.htm">RemovePath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppRemoveExtension.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> RemoveExtension(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormScoreTests.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormScoreTests.cpp" border = "1"><tr><td><code>
 <a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppEncranger.htm">Encranger</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormScoreTests.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormScoreTests *FormScoreTests;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormScoreTests::TFormScoreTests(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;StringGridStudents-&gt;Cells[0][0] <a href="CppOperatorAssign.htm">=</a> "#";<br/>
&nbsp;&nbsp;StringGridStudents-&gt;Cells[1][0] <a href="CppOperatorAssign.htm">=</a> "Name";<br/>
&nbsp;&nbsp;StringGridStudents-&gt;Cells[2][0] <a href="CppOperatorAssign.htm">=</a> "Score";<br/>
&nbsp;&nbsp;StringGridStudents-&gt;Cells[3][0] <a href="CppOperatorAssign.htm">=</a> "Comment";<br/>
<br/>
&nbsp;&nbsp;StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;Cells[0][0] <a href="CppOperatorAssign.htm">=</a> "#";<br/>
&nbsp;&nbsp;StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;Cells[1][0] <a href="CppOperatorAssign.htm">=</a> "f";<br/>
&nbsp;&nbsp;StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;Cells[2][0] <a href="CppOperatorAssign.htm">=</a> "<a href="CppQuestion.htm">Question</a>";<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("Test.txt")<a href="CppOperatorEqual.htm">==</a>"Test.txt");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("C:\\Test.txt")<a href="CppOperatorEqual.htm">==</a>"Test.txt");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("C:\\Test\\Test.txt")<a href="CppOperatorEqual.htm">==</a>"Test.txt");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("C:\\Test\\Test\\Test.txt")<a href="CppOperatorEqual.htm">==</a>"Test.txt");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemoveExtension("Test.txt")<a href="CppOperatorEqual.htm">==</a>"Test");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemoveExtension("C:\\Test.txt")<a href="CppOperatorEqual.htm">==</a>"C:\\Test");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemoveExtension("C:\\Test\\Test.txt")<a href="CppOperatorEqual.htm">==</a>"C:\\Test\\Test");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemoveExtension("C:\\Test\\Test\\Test.txt")<a href="CppOperatorEqual.htm">==</a>"C:\\Test\\Test\\Test");<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormScoreTests::ButtonLoadClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!OpenDialog1-&gt;Execute()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;ButtonScore-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormScoreTests::ReadFile(<b><a href="CppConst.htm">const</a></b> String&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> StringGridStudents-&gt;RowCount <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> file_stripped <a href="CppOperatorAssign.htm">=</a> RemoveExtension(<a href="CppRemovePath.htm">RemovePath</a>(filename.c_str()));<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>StringGridStudents-&gt;RowCount;<br/>
&nbsp;&nbsp;StringGridStudents-&gt;Cells[0][row] <a href="CppOperatorAssign.htm">=</a> row;<br/>
&nbsp;&nbsp;StringGridStudents-&gt;Cells[1][row] <a href="CppOperatorAssign.htm">=</a> file_stripped.c_str();<br/>
&nbsp;&nbsp;StringGridStudents-&gt;Cells[2][row] <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;StringGridStudents-&gt;Cells[3][row] <a href="CppOperatorAssign.htm">=</a> "";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key <a href="CppOperatorAssign.htm">=</a> EditKey-&gt;Text.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> penalty <a href="CppOperatorAssign.htm">=</a> EditPenalty-&gt;Text.<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppEncranger.htm">Encranger</a> e(key);<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Load file<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppFileToVector.htm">FileToVector</a>(filename.c_str());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Deencrypt file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i] <a href="CppOperatorAssign.htm">=</a> e.Deencrypt(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove asterisks<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i] <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(v[i],"*","");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> username <a href="CppOperatorAssign.htm">=</a> FindUserName(v);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (username.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGridStudents-&gt;Cells[3][row] <a href="CppOperatorAssign.htm">=</a> "Username not found";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGridStudents-&gt;Cells[2][row] <a href="CppOperatorAssign.htm">=</a> "1.0 or 1.1";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (username <a href="CppOperatorNotEqual.htm">!=</a> file_stripped)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGridStudents-&gt;Cells[3][row] <a href="CppOperatorAssign.htm">=</a> "Filename differs from username";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGridStudents-&gt;Cells[2][row] <a href="CppOperatorAssign.htm">=</a> "1.1";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_correct <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppQuestion.htm">question</a>s <a href="CppOperatorAssign.htm">=</a> Count<a href="CppQuestion.htm">Question</a>s(v);<br/>
&nbsp;&nbsp;LabelN<a href="CppQuestion.htm">question</a>s-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "#<a href="CppQuestion.htm">question</a>s: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(n_<a href="CppQuestion.htm">question</a>s);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v[i].empty()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; line_markup <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(v[i],",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace {comma} by a comma <b><a href="CppFor.htm">for</a></b> each <a href="CppStdString.htm">std::string</a> in v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; line <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(line_markup,"{comma}",",");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(line.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1 ? line[0].c_str() : "line[0] <a href="CppOperatorAssign.htm">=</a> {}");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(line.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 2 ? line[1].c_str() : "line[1] <a href="CppOperatorAssign.htm">=</a> {}");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(line.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 3 ? line[2].c_str() : "line[2] <a href="CppOperatorAssign.htm">=</a> {}");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(line.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 4 ? line[3].c_str() : "line[3] <a href="CppOperatorAssign.htm">=</a> {}");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(line.size() <a href="CppOperatorEqual.htm">==</a> 2); WORKAROUND<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line[0]<a href="CppOperatorEqual.htm">==</a>"NAME") <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_correct <a href="CppOperatorAssign.htm">=</a> (line[line.size()-1]<a href="CppOperatorEqual.htm">==</a>"Y"); <a href="CppComment.htm">//</a>WORKAROUND<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(line[line.size()-1]<a href="CppOperatorEqual.htm">==</a>"Y" <a href="CppOperatorLogicalOr.htm">||</a> line[line.size()-1]<a href="CppOperatorEqual.htm">==</a>"N"); <a href="CppComment.htm">//</a>WORKAROUND <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_correct) <a href="CppOperatorIncrement.htm">++</a>n_correct;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Score<a href="CppQuestion.htm">Question</a>(line[0],is_correct);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate student's score<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppQuestion.htm">question</a>s <a href="CppOperatorMinus.htm">-</a> penalty &gt; 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fraction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_correct <a href="CppOperatorMinus.htm">-</a> penalty)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_<a href="CppQuestion.htm">question</a>s <a href="CppOperatorMinus.htm">-</a> penalty);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> init_score <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (9.0 * fraction);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> score_above_one <a href="CppOperatorAssign.htm">=</a> (init_score &lt; 1.0 ? 1.0 : init_score);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> score_below_ten <a href="CppOperatorAssign.htm">=</a> (score_above_one &gt; 10.0 ? 10.0 : score_above_one);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> score <a href="CppOperatorAssign.htm">=</a> score_below_ten;<br/>
<br/>
&nbsp;&nbsp;StringGridStudents-&gt;Cells[2][row] <a href="CppOperatorAssign.htm">=</a> score;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormScoreTests::Score<a href="CppQuestion.htm">Question</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_correct)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Search <b><a href="CppFor.htm">for</a></b> s manually<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;RowCount <a href="CppOperatorMinus.htm">-</a> 1; <a href="CppComment.htm">//</a>-1 because of fixed row<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>(StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;Cells[2][i+1].c_str())) <a href="CppComment.htm">//</a>+1 because of fixed row<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;Cells[0][i+1]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (is_correct ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;Cells[0][i+1].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;RowCount;<br/>
&nbsp;&nbsp;StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;Cells[0][n_rows] <a href="CppOperatorAssign.htm">=</a> (is_correct ? "1" : "0");<br/>
&nbsp;&nbsp;StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;Cells[2][n_rows] <a href="CppOperatorAssign.htm">=</a> s.c_str();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormScoreTests::Calculate<a href="CppQuestion.htm">Question</a>Scores()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_tests <a href="CppOperatorAssign.htm">=</a> OpenDialog1-&gt;Files-&gt;Count;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;RowCount <a href="CppOperatorMinus.htm">-</a> 1; <a href="CppComment.htm">//</a>-1 because of 1 fixed cell<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;Cells[0][i+1].IsEmpty()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_correct <a href="CppOperatorAssign.htm">=</a> StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;Cells[0][i+1].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fraction_correct<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_correct)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_tests);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;Cells[1][i+1] <a href="CppOperatorAssign.htm">=</a> fraction_correct;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormScoreTests::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Students<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index_width <a href="CppOperatorAssign.htm">=</a> 32;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> score_width <a href="CppOperatorAssign.htm">=</a> 64;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGridStudents-&gt;ColWidths[0] <a href="CppOperatorAssign.htm">=</a> index_width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGridStudents-&gt;ColWidths[2] <a href="CppOperatorAssign.htm">=</a> score_width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width_left <a href="CppOperatorAssign.htm">=</a> StringGridStudents-&gt;ClientWidth <a href="CppOperatorMinus.htm">-</a> index_width <a href="CppOperatorMinus.htm">-</a> score_width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGridStudents-&gt;ColWidths[1] <a href="CppOperatorAssign.htm">=</a> (width_left <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> 1; <a href="CppComment.htm">//</a>-1 just to be sure<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGridStudents-&gt;ColWidths[3] <a href="CppOperatorAssign.htm">=</a> (width_left <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> 1; <a href="CppComment.htm">//</a>-1 just to be sure<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQuestion.htm">Question</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> score_width <a href="CppOperatorAssign.htm">=</a> 64;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;ColWidths[0] <a href="CppOperatorAssign.htm">=</a> score_width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;ColWidths[1] <a href="CppOperatorAssign.htm">=</a> score_width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width_left <a href="CppOperatorAssign.htm">=</a> StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;ClientWidth <a href="CppOperatorMinus.htm">-</a> score_width <a href="CppOperatorMinus.htm">-</a> score_width <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;ColWidths[2] <a href="CppOperatorAssign.htm">=</a> width_left;<br/>
<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormScoreTests::ButtonScoreClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;StringGridStudents-&gt;RowCount <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;StringGrid<a href="CppQuestion.htm">Question</a>s-&gt;RowCount <a href="CppOperatorAssign.htm">=</a> 2;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read files one at a <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_files <a href="CppOperatorAssign.htm">=</a> OpenDialog1-&gt;Files-&gt;Count;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_files; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String filename <a href="CppOperatorAssign.htm">=</a> OpenDialog1-&gt;Files-&gt;<b><a href="CppOperator.htm">operator</a></b>[](i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ReadFile(filename);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;Calculate<a href="CppQuestion.htm">Question</a>Scores();<br/>
<br/>
&nbsp;&nbsp;ButtonSave-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;LabelN<a href="CppQuestion.htm">question</a>s-&gt;Visible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormScoreTests::Button<a href="CppAbout.htm">About</a>Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TForm<a href="CppAbout.htm">About</a>&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppAbout.htm">About</a>(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormScoreTests::ButtonSaveClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!SaveDialog1-&gt;Execute()) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TStringList&gt; v(<b><a href="CppNew.htm">new</a></b> TStringList);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> StringGridStudents-&gt;RowCount;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> StringGridStudents-&gt;ColCount;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;String s <a href="CppOperatorAssign.htm">=</a> StringGridStudents-&gt;Cells[0][i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=1; j<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>","+StringGridStudents-&gt;Cells[j][i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v-&gt;<a href="CppAdd.htm">Add</a>(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;v-&gt;SaveToFile(SaveDialog1-&gt;FileName);<br/>
<br/>
&nbsp;&nbsp;ShowMessage("Results saved to file " <a href="CppOperatorPlus.htm">+</a> SaveDialog1-&gt;FileName);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> FindUserName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> v.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( (*i).size() &gt; 5 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*i).substr(0,5)<a href="CppOperatorEqual.htm">==</a>"NAME,")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (*i).substr(5, (*i).size() <a href="CppOperatorMinus.htm">-</a> 5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> Count<a href="CppQuestion.htm">Question</a>s(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_<a href="CppQuestion.htm">question</a>s <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> v.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( (*i).empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> ( (*i).size() &gt; 5 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*i).substr(0,5)<a href="CppOperatorEqual.htm">==</a>"NAME," ) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>n_<a href="CppQuestion.htm">question</a>s;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n_<a href="CppQuestion.htm">question</a>s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.htm">FileToVector</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileExists.htm">FileExists</a>(fileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; myVector;<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> in(fileName.c_str());<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> myString;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !in.eof(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(in,myString);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myVector.push_back(myString);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> myVector;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileExists.htm">FileExists</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppFileExists.htm">FileExists</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdFstream.htm">std::fstream</a> fin;<br/>
&nbsp;&nbsp;fin.open(fileName.c_str(),<a href="CppStd.htm">std</a>::ios::in);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( fin.is_open() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fin.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fin.close();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From <a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdString.htm">std::string</a>::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> end <a href="CppOperatorAssign.htm">=</a> input.end();<br/>
&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> i1 <a href="CppOperatorAssign.htm">=</a> input.begin();<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy until first comma<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> i2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSearch.htm">std::search</a>(i1,end,seperator.begin(), seperator.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i1<a href="CppOperatorNotEqual.htm">!=</a>i2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(i1,i2,<a href="CppStdBack_inserter.htm">std::back_inserter</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i1 <a href="CppOperatorAssign.htm">=</a> i2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (i1<a href="CppOperatorNotEqual.htm">!=</a>end)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy from comma to (comma <a href="CppOperatorLogicalOr.htm">||</a> end)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> i2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSearch.htm">std::search</a>(i1 <a href="CppOperatorPlus.htm">+</a> 1,end,seperator.begin(), seperator.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i1<a href="CppOperatorNotEqual.htm">!=</a>i2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i2 <a href="CppOperatorEqual.htm">==</a> end <a href="CppOperatorLogicalOr.htm">||</a> <a href="CppStdEqual.htm">std::equal</a>(seperator.begin(),seperator.end(),i2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(i1+1,i2,<a href="CppStdBack_inserter.htm">std::back_inserter</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i1 <a href="CppOperatorAssign.htm">=</a> i2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppReplaceOnce.htm">ReplaceOnce</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppReplaceOnce.htm">ReplaceOnce</a>(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pos <a href="CppOperatorAssign.htm">=</a> s.find(replaceWhat);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pos<a href="CppOperatorEqual.htm">==</a>-1) <b><a href="CppReturn.htm">return</a></b> s;<br/>
&nbsp;&nbsp;s.replace(pos,replaceWhat.size(),replaceWithWhat);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppReplaceAll.htm">ReplaceAll</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pos <a href="CppOperatorAssign.htm">=</a> s.find(replaceWhat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pos<a href="CppOperatorEqual.htm">==</a>-1) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.replace(pos,replaceWhat.size(),replaceWithWhat);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppReplaceAll.htm">ReplaceAll</a>(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWhat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; replaceWithWhat)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;::<a href="CppIterator.htm">iterator</a> <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> v.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*i <a href="CppOperatorAssign.htm">=</a> <a href="CppReplaceAll.htm">ReplaceAll</a>(*i,replaceWhat,replaceWithWhat);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRemovePath.htm">RemovePath</a>.htm<br/>
<a href="CppComment.htm">//</a>Returns the filename without path<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRemovePath.htm">RemovePath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> path_sz <a href="CppOperatorAssign.htm">=</a> filename.rfind("\\",filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (path_sz <a href="CppOperatorEqual.htm">==</a> sz) <b><a href="CppReturn.htm">return</a></b> filename;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> filename.substr(path_sz <a href="CppOperatorPlus.htm">+</a> 1,sz <a href="CppOperatorMinus.htm">-</a> 1 <a href="CppOperatorMinus.htm">-</a> path_sz);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppRemoveExtension.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> RemoveExtension(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dot_index <a href="CppOperatorAssign.htm">=</a> filename.rfind(".",filename.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dot_index <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "No dot found in filename");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> filename.substr(0,dot_index);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormWhatsNew.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormWhatsNew.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormWhatsNewH<br/>
<a href="CppDefine.htm">#define</a> UnitFormWhatsNewH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormWhatsNew : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormWhatsNew(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormWhatsNew *FormWhatsNew;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitFormWhatsNew.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitFormWhatsNew.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFormWhatsNew.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormWhatsNew *FormWhatsNew;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormWhatsNew::TFormWhatsNew(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitLoopReader.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitLoopReader.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppEncranger.htm">Encranger</a>, encryption and de-encryption <a href="Tools.htm">tool</a><br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> Unit<a href="CppLoopReader.htm">LoopReader</a>H<br/>
<a href="CppDefine.htm">#define</a> Unit<a href="CppLoopReader.htm">LoopReader</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Reads a <a href="CppContainer.htm">container</a> in a loop:<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;when the end is reached, it starts<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;reading from the beginning again<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppIterator.htm">Iterator</a>&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLoopReader.htm">LoopReader</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppLoopReader.htm">LoopReader</a>(<a href="CppIterator.htm">Iterator</a> begin, <a href="CppIterator.htm">Iterator</a> end)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: begin_(begin), read_(begin), end_(end)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> Read() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> read_; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Next()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>read_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (read_ <a href="CppOperatorEqual.htm">==</a> end_) read_ <a href="CppOperatorAssign.htm">=</a> begin_;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> begin_;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> end_;<br/>
&nbsp;&nbsp;<a href="CppIterator.htm">Iterator</a> read_;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitLoopReader.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitLoopReader.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppEncranger.htm">Encranger</a>, encryption and de-encryption <a href="Tools.htm">tool</a><br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppLoopReader.htm">LoopReader</a>.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitMultipleChoiceQuestion.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitMultipleChoiceQuestion.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> Unit<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>H<br/>
<a href="CppDefine.htm">#define</a> Unit<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppQuestion.htm">Question</a>.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> TForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQuestion.htm">Question</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; answer,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; wrong_answers);<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; mWrongAnswers;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> *);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TForm<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitMultipleChoiceQuestion.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitMultipleChoiceQuestion.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; answer,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; wrong_answers)<br/>
: <a href="CppQuestion.htm">Question</a>(filename,<a href="CppQuestion.htm">question</a>,<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(1,answer)),<br/>
&nbsp;&nbsp;mWrongAnswers(wrong_answers)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!filename.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Filename must not be empty");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppFileExists.htm">FileExists</a>(filename) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must exists");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!<a href="CppQuestion.htm">question</a>.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> must not be empty");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!correct_answer.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Correct answer must not be empty");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!wrong_answers.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Wrong answers must not be empty");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitOpenQuestion.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitOpenQuestion.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> Unit<a href="CppOpenQuestion.htm">OpenQuestion</a>H<br/>
<a href="CppDefine.htm">#define</a> Unit<a href="CppOpenQuestion.htm">OpenQuestion</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppQuestion.htm">Question</a>.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> TForm<a href="CppOpenQuestion.htm">OpenQuestion</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppOpenQuestion.htm">OpenQuestion</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQuestion.htm">Question</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppOpenQuestion.htm">OpenQuestion</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; answers);<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(<a href="CppOpenQuestion.htm">OpenQuestion</a> *);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> TForm<a href="CppOpenQuestion.htm">OpenQuestion</a>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitOpenQuestion.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitOpenQuestion.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppOpenQuestion.htm">OpenQuestion</a>.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppOpenQuestion.htm">OpenQuestion</a>::<a href="CppOpenQuestion.htm">OpenQuestion</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; answers)<br/>
: <a href="CppQuestion.htm">Question</a>(filename,<a href="CppQuestion.htm">question</a>,answers)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!filename.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Filename must not be empty");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppFileExists.htm">FileExists</a>(filename) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must exists");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!<a href="CppQuestion.htm">question</a>.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppOpenQuestion.htm">OpenQuestion</a> must not be empty");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!correct_answers.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Correct answer must not be empty");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitQuestion.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitQuestion.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> Unit<a href="CppQuestion.htm">Question</a>H<br/>
<a href="CppDefine.htm">#define</a> Unit<a href="CppQuestion.htm">Question</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQuestion.htm">Question</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> IsCorrect(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_filename;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_<a href="CppQuestion.htm">question</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_answers;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Made <a href="CppConstructor.htm">constructor</a> <b><a href="CppPrivate.htm">private</a></b>, because one cannot <a href="CppMake.htm">make</a> a <a href="CppQuestion.htm">Question</a>, only<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>derived <b><a href="CppClass.htm">classes</a></b> of <a href="CppQuestion.htm">Question</a><br/>
&nbsp;&nbsp;<a href="CppQuestion.htm">Question</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; answers);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppQuestion.htm">Question</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>(<a href="CppQuestion.htm">Question</a> *);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileExists.htm">FileExists</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppFileExists.htm">FileExists</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><b><a href="CppExport.htm">export</a></b> <b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <a href="CppStdVector.htm">std::vector</a>&lt;T&gt; <a href="CppCreateVector.htm">CreateVector</a>(<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T&amp; t0,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T&amp; t1);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt; <a href="CppCreateVector.htm">CreateVector</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T&amp; t0,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T&amp; t1)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;T&gt; v(2);<br/>
&nbsp;&nbsp;v[0] <a href="CppOperatorAssign.htm">=</a> t0;<br/>
&nbsp;&nbsp;v[1] <a href="CppOperatorAssign.htm">=</a> t1;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt; <a href="CppCreateVector.htm">CreateVector</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T&amp; t0,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T&amp; t1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T&amp; t2)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;T&gt; v(3);<br/>
&nbsp;&nbsp;v[0] <a href="CppOperatorAssign.htm">=</a> t0;<br/>
&nbsp;&nbsp;v[1] <a href="CppOperatorAssign.htm">=</a> t1;<br/>
&nbsp;&nbsp;v[2] <a href="CppOperatorAssign.htm">=</a> t2;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolHometrainerVcl/UnitQuestion.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolHometrainerVcl/UnitQuestion.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="ToolHometrainer.htm">Hometrainer</a> 2, <a href="Tools.htm">tool</a> to <a href="CppMake.htm">make</a> <a href="CppExercise.htm">exercise</a>s and tests<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppQuestion.htm">Question</a>.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppQuestion.htm">Question</a>::<a href="CppQuestion.htm">Question</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; answers)<br/>
: m_filename(filename),<br/>
&nbsp;&nbsp;m_<a href="CppQuestion.htm">question</a>(<a href="CppQuestion.htm">question</a>),<br/>
&nbsp;&nbsp;m_answers(answers)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!filename.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Filename must not be empty");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppFileExists.htm">FileExists</a>(filename) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must exists");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_<a href="CppQuestion.htm">question</a>.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppQuestion.htm">Question</a> must not be empty");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_answers.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Answers must not be empty");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppQuestion.htm">Question</a>::IsCorrect(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<a href="CppStdFind.htm">std::find</a>(m_answers.begin(),m_answers.end(),s) <a href="CppOperatorNotEqual.htm">!=</a> m_answers.end());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileExists.htm">FileExists</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppFileExists.htm">FileExists</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdFstream.htm">std::fstream</a> fin;<br/>
&nbsp;&nbsp;fin.open(fileName.c_str(),<a href="CppStd.htm">std</a>::ios::in);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( fin.is_open() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fin.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fin.close();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
