<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Exercise #6: refactoring quadratic solver</title>
  <meta name="description" content="C++ Exercise #6: refactoring quadratic solver"/>
  <meta name="keywords" content="C++ Exercise #6: refactoring quadratic solver code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExerciseRefactoringQuadraticSolver.htm">Exercise #6: refactoring quadratic solver</a></h1>
<p>&nbsp;</p>
<p>Difficulty: 2/10</p>
<p>Date added: 21th of July 2008</p>
<p>&nbsp;</p>
<p>
  In this <a href="CppExercise.htm">exercise</a> you must refactor a class that is
  given as an example in reference [1]. You will learn how to think to correctly refactor a
  class and that literature does not always set a good examples.
</p>
<p>&nbsp;</p>
<p>
  A quadratic equation is an equation in the form 'ax<sup>2</sup> + bx + c = 0'.
  For which x or x's is this true? The number of solutions this equation has is
  determined by the discrimant: D = b<sup>2</sup> - 4ac. If D is smaller then
  zero, the equation has no solutions. If D equals zero, the solution to the
  equation is x = -b/2a. If D is bigger then zero, the solutions are x =
  (-b-sqrt(D)) / (2a) and x = (-b+sqrt(D)) / (2a).
</p>
<p>&nbsp;</p>
<p>
  Below of a piece of code (from [1]) demonstrating a class to solve a quadratic equation.
  Can you refactor this class to follow good <a href="CppClassDesign.htm">class
  design</a>, <a href="CppMemberFunctionDesign.htm">member function design</a>, 
  <a href="CppFunctionDesign.htm">function design</a> and good thinking?
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="refactoring quadratic solver code to be improved" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppStd.htm">std</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Qs<br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> coeff(<b><a href="CppDouble.htm">double</a></b> aa, <b><a href="CppDouble.htm">double</a></b> bb, <b><a href="CppDouble.htm">double</a></b> cc)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a <a href="CppOperatorAssign.htm">=</a> aa;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b <a href="CppOperatorAssign.htm">=</a> bb;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c <a href="CppOperatorAssign.htm">=</a> cc;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> solve()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> b * b <a href="CppOperatorMinus.htm">-</a> 4 * a * c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> D &lt; 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> rD <a href="CppOperatorAssign.htm">=</a> sqrt(D);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x1 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorPlus.htm">+</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x2 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorMinus.htm">-</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> root1() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> x1; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> root2() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> x2; }<br/>
 <br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> a,b,c,x1,x2;<br/>
};<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="CppExerciseRefactoringQuadraticSolverAnswer.htm">View the answer of this exercise</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li>Leen Ammeraal. C++ (6th edition). ISBN: 90-395-1935-8. 2001</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
