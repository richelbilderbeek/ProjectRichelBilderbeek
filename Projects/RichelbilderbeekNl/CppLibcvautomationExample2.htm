<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>LibcvautomationExample2</title>
  <meta name="description" content="C++ LibcvautomationExample2"/>
  <meta name="keywords" content="C++ LibcvautomationExample2 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppLibcvautomationExample2.htm">LibcvautomationExample2</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Tue Aug 12 15:41:37 2014
 -->
<p><img src="PicQt.png" alt="Qt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppLibcvautomationExample2.htm">libcvautomation example 2: Qt Creator project around example (using C)</a> is a
<a href="CppLibcvautomation.htm">libcvautomation</a> example of a <a href="CppQtCreator.htm">Qt Creator</a> project around
an example supplied by Bradlee Speice (the author of libcvautomation). Note that the project is set to compile C code, instead of C++.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppLibcvautomationExample2.zip">Download the Qt Creator project 'CppLibcvautomationExample2' (zip)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppLibcvautomationExample2/CppLibcvautomationExample2.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppLibcvautomationExample2/CppLibcvautomationExample2.pro" border = "1"><tr><td><code>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= app_bundle<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= qt<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
<br/>
#<br/>
#<br/>
# <a href="CppLibcvautomation.htm">libcvautomation</a><br/>
#<br/>
# add path to #include paths, link statically to code<br/>
#<br/>
#<br/>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += ../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppLibcvautomation.htm">libcvautomation</a>/include<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppLibcvautomation.htm">libcvautomation</a>/<a href="CppLibcvautomation.htm">libcvautomation</a>/<a href="CppLibcvautomation.htm">libcvautomation</a>-xtest.c \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppLibcvautomation.htm">libcvautomation</a>/<a href="CppLibcvautomation.htm">libcvautomation</a>/<a href="CppLibcvautomation.htm">libcvautomation</a>-xlib.c \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppLibcvautomation.htm">libcvautomation</a>/<a href="CppLibcvautomation.htm">libcvautomation</a>/<a href="CppLibcvautomation.htm">libcvautomation</a>-opencv.c<br/>
<br/>
# Compile as C code<br/>
QMAKE_CXX = gcc<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> = -x c<br/>
<br/>
# Link to X11 library<br/>
# undefined reference to `XOpenDisplay'<br/>
<a href="CppQmakeLibs.htm">LIBS</a> += -lX11<br/>
<br/>
# Link to Xtst library<br/>
# undefined reference to `XTestQueryExtension'<br/>
<a href="CppQmakeLibs.htm">LIBS</a> += -lXtst<br/>
<br/>
# Link to OpenCV library<br/>
# undefined reference to `cvFree_'<br/>
unix {<br/>
&nbsp;&nbsp; <a href="CppQmakeConfig.htm">CONFIG</a> += link_pkgconfig<br/>
&nbsp;&nbsp; PKG<a href="CppQmakeConfig.htm">CONFIG</a> += opencv<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppLibcvautomationExample2/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppLibcvautomationExample2/main.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 * <a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a>=<br/>
 *<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Filename:&nbsp;&nbsp;cva-input.c<br/>
 *<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;Description:&nbsp;&nbsp;This is an example program to demonstrate the XTest and XInput<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;				<a href="CppFunction.htm">function</a>ality in <a href="CppLibcvautomation.htm">libcvautomation</a><br/>
 *<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Created:&nbsp;&nbsp;06/26/2012 09:20:20 AM<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Revision:&nbsp;&nbsp;none<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppCompiler.htm">Compiler</a>:&nbsp;&nbsp;gcc<br/>
 *<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Author:&nbsp;&nbsp;Bradlee Speice (), bspeice.nc@gmail.com<br/>
 *&nbsp;&nbsp; Organization:<br/>
 *<br/>
 * <a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a>=<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStd.htm">std</a>lib.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdioH.htm">stdio.h</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;uni<a href="CppStd.htm">std</a>.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;getopt.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;limits.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;math.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppLibcvautomation.htm">libcvautomation</a>/<a href="CppLibcvautomation.htm">libcvautomation</a>.h&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> usage ();<br/>
<b><a href="CppVoid.htm">void</a></b> checkXTEEnabled (Display *display);<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>( <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b>** <a href="CppArgc.htm">argv</a> )<br/>
{<br/>
	<a href="CppComment.htm">/*</a> Set up <b><a href="CppFor.htm">for</a></b> getopt <a href="CppComment.htm">*/</a><br/>
	<b><a href="CppInt.htm">int</a></b> mouseButton;<br/>
		mouseButton <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	<b><a href="CppChar.htm">char</a></b> *separator;<br/>
		separator <a href="CppOperatorAssign.htm">=</a> ",";<br/>
	<b><a href="CppChar.htm">char</a></b> *xDisplayLocation;<br/>
		xDisplayLocation <a href="CppOperatorAssign.htm">=</a> "";<br/>
	Display *display;<br/>
		display <a href="CppOperatorAssign.htm">=</a> <a href="CppNULL.htm">NULL</a>;<br/>
<br/>
	<b><a href="CppInt.htm">int</a></b> search<a href="CppMemberFunction.htm">Member function</a>, tolerance, <a href="CppTime.htm">time</a>out;<br/>
	search<a href="CppMemberFunction.htm">Member function</a> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	tolerance <a href="CppOperatorAssign.htm">=</a> INT_MAX;<br/>
	<a href="CppTime.htm">time</a>out <a href="CppOperatorAssign.htm">=</a> 5;<br/>
<br/>
	<b><a href="CppInt.htm">int</a></b> <b><a href="CppReturn.htm">return</a></b>Code <a href="CppOperatorAssign.htm">=</a> 1;<br/>
<br/>
	<a href="CppComment.htm">/*</a> Start getopt <a href="CppComment.htm">*/</a><br/>
	<b><a href="CppWhile.htm">while</a></b> (1)<br/>
	{<br/>
		<b><a href="CppStatic.htm">static</a></b> <b><a href="CppStruct.htm">struct</a></b> option long_options[] <a href="CppOperatorAssign.htm">=</a><br/>
		{<br/>
				{"help",		no_argument,		0,	'h'},<br/>
				{"usage",		no_argument,		0,	'u'},<br/>
				{"<a href="CppVersion.htm">version</a>",		no_argument,		0,	'v'},<br/>
				{"display",		required_argument,	0,	'd'},<br/>
				{"search-<a href="CppMemberFunction.htm">member function</a>",required_argument,	0,	'm'},<br/>
				{"tolerance",	required_argument,	0,	't'},<br/>
				{"button",		required_argument,	0,	'b'},<br/>
				{"string",		required_argument,	0,	's'},<br/>
				{"sane-tolerance", required_argument, 0,'o'},<br/>
				{"print-format",required_argument,	0,	'p'},<br/>
				{"<a href="CppTime.htm">time</a>out",		required_argument,	0,	'i'},<br/>
				<a href="CppComment.htm">/*</a> Other valid values are "optional_argument"<br/>
				 * and "required_argument" <a href="CppComment.htm">*/</a><br/>
				{0, 0, 0, 0}<br/>
		};<br/>
<br/>
		<b><a href="CppInt.htm">int</a></b> option_index <a href="CppOperatorAssign.htm">=</a> 0;<br/>
		opterr <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
		<b><a href="CppInt.htm">int</a></b> c <a href="CppOperatorAssign.htm">=</a> getopt_long (<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>, "hud:m:t:b:cs:", <a href="CppComment.htm">/*</a> Use a single colon <b><a href="CppFor.htm">for</a></b> required_argument,<br/>
														&nbsp;&nbsp; * <b><a href="CppDouble.htm">double</a></b> colon <b><a href="CppFor.htm">for</a></b> optional_argument <a href="CppComment.htm">*/</a><br/>
							long_options, &amp;option_index);<br/>
<br/>
		<a href="CppComment.htm">/*</a> We're done with parsing options <a href="CppComment.htm">*/</a><br/>
		<b><a href="CppIf.htm">if</a></b> (c <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1)<br/>
			<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
		<b><a href="CppSwitch.htm">switch</a></b> (c)<br/>
		{<br/>
			<b><a href="CppCase.htm">case</a></b> 0:<br/>
				<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
			<b><a href="CppCase.htm">case</a></b> 'h':<br/>
				usage();<br/>
				<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
			<b><a href="CppCase.htm">case</a></b> 'u':<br/>
				usage();<br/>
				<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
			<b><a href="CppCase.htm">case</a></b> 'v':<br/>
				usage();<br/>
				<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
			<b><a href="CppCase.htm">case</a></b> 'd':<br/>
				<b><a href="CppIf.htm">if</a></b> (display <a href="CppOperatorEqual.htm">==</a> <a href="CppNULL.htm">NULL</a>)<br/>
					display <a href="CppOperatorAssign.htm">=</a> XOpenDisplay( optarg );<br/>
				<b><a href="CppElse.htm">else</a></b><br/>
				{<br/>
					XCloseDisplay( display );<br/>
					XOpenDisplay( optarg );<br/>
				}<br/>
<br/>
			<b><a href="CppCase.htm">case</a></b> 'm':<br/>
				search<a href="CppMemberFunction.htm">Member function</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppAtoi.htm">atoi</a>(optarg);<br/>
				<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
			<b><a href="CppCase.htm">case</a></b> 't':<br/>
				tolerance <a href="CppOperatorAssign.htm">=</a> <a href="CppAtoi.htm">atoi</a>(optarg);<br/>
				<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
			<b><a href="CppCase.htm">case</a></b> 'b':<br/>
				mouseButton <a href="CppOperatorAssign.htm">=</a> <a href="CppAtoi.htm">atoi</a>(optarg);<br/>
				<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
			<b><a href="CppCase.htm">case</a></b> 's':<br/>
				<b><a href="CppIf.htm">if</a></b> (display <a href="CppOperatorEqual.htm">==</a> <a href="CppNULL.htm">NULL</a>)<br/>
					display <a href="CppOperatorAssign.htm">=</a> XOpenDisplay( xDisplayLocation );<br/>
				cva<a href="CppPoint.htm">Point</a> <b><a href="CppReturn.htm">return</a></b><a href="CppPoint.htm">Point</a>;<br/>
				<b><a href="CppReturn.htm">return</a></b><a href="CppPoint.htm">Point</a> <a href="CppOperatorAssign.htm">=</a> xte_commandString( display, optarg, mouseButton, search<a href="CppMemberFunction.htm">Member function</a>, tolerance, <a href="CppTime.htm">time</a>out );<br/>
<br/>
				<b><a href="CppIf.htm">if</a></b> (<b><a href="CppReturn.htm">return</a></b><a href="CppPoint.htm">Point</a>.x <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <b><a href="CppReturn.htm">return</a></b><a href="CppPoint.htm">Point</a>.y <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>2)<br/>
				{<br/>
					<a href="CppComment.htm">/*</a> Not an error, just that the command didn't use <b><a href="CppReturn.htm">return</a></b><a href="CppPoint.htm">Point</a> <a href="CppComment.htm">*/</a><br/>
					printf("%s\n", optarg);<br/>
					<b><a href="CppReturn.htm">return</a></b>Code <a href="CppOperatorAssign.htm">=</a> 0;<br/>
				}<br/>
<br/>
				<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<b><a href="CppReturn.htm">return</a></b><a href="CppPoint.htm">Point</a>.x <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <b><a href="CppReturn.htm">return</a></b><a href="CppPoint.htm">Point</a>.y <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1)<br/>
				{<br/>
					printf("%s%s%i%s%i\n", optarg, separator, <b><a href="CppReturn.htm">return</a></b><a href="CppPoint.htm">Point</a>.x, separator, <b><a href="CppReturn.htm">return</a></b><a href="CppPoint.htm">Point</a>.y);<br/>
					<b><a href="CppReturn.htm">return</a></b>Code <a href="CppOperatorAssign.htm">=</a> 0;<br/>
				}<br/>
<br/>
				<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
			<b><a href="CppCase.htm">case</a></b> 'o':<br/>
				tolerance <a href="CppOperatorAssign.htm">=</a> <a href="CppAtoi.htm">atoi</a>(optarg);<br/>
				<a href="CppComment.htm">/*</a> Provide a more sane way to configure tolerance:<br/>
				 * <a href="CppOperatorDecrement.htm">--</a>sane-tolerance=100 ~<a href="CppOperatorAssign.htm">=</a> INT_MAX <a href="CppComment.htm">*/</a><br/>
				tolerance <a href="CppOperatorAssign.htm">=</a> pow(1.2397076, tolerance);<br/>
				<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
			<b><a href="CppCase.htm">case</a></b> 'i':<br/>
				<a href="CppTime.htm">time</a>out <a href="CppOperatorAssign.htm">=</a> <a href="CppAtoi.htm">atoi</a>(optarg);<br/>
				<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
			<b><a href="CppCase.htm">case</a></b> '?':<br/>
				<a href="CppComment.htm">/*</a> Error routine <a href="CppComment.htm">*/</a><br/>
				<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
			<b><a href="CppDefault.htm">default</a></b>:<br/>
				fprintf( <a href="CppStd.htm">std</a>err, "Unknown option..." );<br/>
				exit(0);<br/>
		};<br/>
	}<br/>
<br/>
	<b><a href="CppIf.htm">if</a></b> ( display <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppNULL.htm">NULL</a> )<br/>
		XCloseDisplay( display );<br/>
<br/>
	<b><a href="CppReturn.htm">return</a></b> <b><a href="CppReturn.htm">return</a></b>Code;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
 * <a href="CppOperatorEqual.htm">==</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;FUNCTION&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name:&nbsp;&nbsp;usage<br/>
 *&nbsp;&nbsp;Description:&nbsp;&nbsp;I really shouldn't need to write <b><a href="CppThis.htm">this</a></b><br/>
 * <a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a><a href="CppOperatorEqual.htm">==</a>=<br/>
 <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> usage ( )<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf( <a href="CppStd.htm">std</a>err, "\<br/>
Libcv<b><a href="CppAuto.htm">auto</a></b>mation <a href="CppVersion.htm">version</a>: <a href="CppOperatorModulus.htm">%</a>s\n\<br/>
cva-input <a href="CppOperatorMinus.htm">-</a>s &lt;command_string&gt;\n\<br/>
\n\<br/>
The cva-input program demonstrates the XTest section of <a href="CppLibcvautomation.htm">libcvautomation</a>.\n\<br/>
The <b><a href="CppReturn.htm">return</a></b> code is 1 <b><a href="CppIf.htm">if</a></b> there are no commands given, or <b><a href="CppIf.htm">if</a></b> all commands fail.\n\<br/>
It is 0 otherwise.\n\<br/>
\n\<br/>
Usage: \n\<br/>
\n\<br/>
\t-h, <a href="CppOperatorDecrement.htm">--</a>help:\t\tDisplay <b><a href="CppThis.htm">this</a></b> usage message.\n\<br/>
\t-u, <a href="CppOperatorDecrement.htm">--</a>usage:\t\tDisplay <b><a href="CppThis.htm">this</a></b> usage message.\n\<br/>
\t-d, <a href="CppOperatorDecrement.htm">--</a>display:\t\tSpecify the X display to use.\n\<br/>
\t-m, <a href="CppOperatorDecrement.htm">--</a>search-<a href="CppMemberFunction.htm">member function</a>:\tSpecify a <a href="CppMemberFunction.htm">member function</a> to search by. See `cva-match <a href="CppOperatorDecrement.htm">--</a>help\'\n\<br/>
\t\t\t\tfor more information on <b><a href="CppThis.htm">this</a></b>.\n\<br/>
\t-t, <a href="CppOperatorDecrement.htm">--</a>tolerance:\tSpecify how strict the match is.\n\<br/>
\t-b, <a href="CppOperatorDecrement.htm">--</a>button:\t\tSpecify the mouse button to press (<b><a href="CppDefault.htm">default</a></b> 1).\n\<br/>
\t-c, <a href="CppOperatorDecrement.htm">--</a>center:\t\tInstead of matching the top-left corner of an image,\n\<br/>
\t\t\t\tmatch the center of the image.\n\<br/>
\t-o, <a href="CppOperatorDecrement.htm">--</a>sane-tolerance:\tSet the tolerance <b><a href="CppUsing.htm">using</a></b> a scale of 1-100,\n\<br/>
\t-i, <a href="CppOperatorDecrement.htm">--</a><a href="CppTime.htm">time</a>out:\t\tSpecify the <a href="CppTime.htm">time</a>out to use when <b><a href="CppUsing.htm">using</a></b> the 'waitfor' <a href="CppFunction.htm">function</a>\n\<br/>
\t-s, <a href="CppOperatorDecrement.htm">--</a>string:\t\tCommand string <a href="CppOperatorMinus.htm">-</a> see below.\n\<br/>
\t\t\t\tPlease <a href="CppMake.htm">make</a> sure to use the '-t' or '-o' options when <b><a href="CppUsing.htm">using</a></b> <b><a href="CppThis.htm">this</a></b>.\n\<br/>
\n\<br/>
This program works kind of like a mini-language. All options\n\<br/>
are parsed left-to-right, and executed right there. Thus, specifying \"<a href="CppOperatorDecrement.htm">--</a>display\"\n\<br/>
at different places in the options will cause <b><a href="CppThis.htm">this</a></b> program to use the most recent\n\<br/>
given display.\n\<br/>
Available commands:\n\<br/>
\tmouseclick:\tClick the mouse in-place.\n\<br/>
\timouseclick:\tClick the mouse at an image's top-left corner.\n\<br/>
\ticmouseclick:\tClick the mouse at an image's center.\n\<br/>
\tmousexy:\tMove the mouse to the given coordinate.\n\<br/>
\tmouserxy:\tMove the mouse by the given x and y values (relative motion).\n\<br/>
\tmouseimage:\tMove the mouse to an image's top-left corner.\n\<br/>
\tcmouseimage:\tMove the mouse to an image's center.\n\<br/>
\tmousedown:\tPush and leave down a mouse button.\n\<br/>
\tmouseup:\tRelease a mouse button.\n\<br/>
\tmousejiggle:\tJiggle the mouse (helps to activate some <a href="CppWidget.htm">widget</a>s).\n\<br/>
\tmousescrollu:\tScroll the mouse wheel up.\n\<br/>
\tmousescrolld:\tScroll the mouse wheel down.\n\<br/>
\tmouselocation:\tReturn the location of the mouse.\n\<br/>
\tkeyclick:\tClick a keyboard button.\n\<br/>
\tkeydown:\tPush and leave down a keyboard button.\n\<br/>
\tkeyup:\tRelease a keyboard button.\n\<br/>
\tkeystring:\tInput a string of keys to X11.\n\<br/>
\twaitfor:\tWait <b><a href="CppFor.htm">for</a></b> an image to be displayed.\n\<br/>
\n\<br/>
If you have <a href="CppAny.htm">any</a> <a href="CppQuestion.htm">question</a>s, comments, concerns, email &lt;%s&gt;.\n\n", LIBCVAUTOMATION_VERSION, LIBCVAUTOMATION_BUGREPORT );<br/>
<br/>
	exit (0);<br/>
<br/>
}		<a href="CppComment.htm">/*</a> <a href="CppOperatorDecrement.htm">--</a>-<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;end of <a href="CppFunction.htm">function</a> usage&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>-<a href="CppOperatorDecrement.htm">--</a> <a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> checkXTEEnabled ( Display *display )<br/>
{<br/>
	<a href="CppComment.htm">/*</a> Make sure we have the XTest Extensions enabled.<br/>
	 * This is a quick wrapper. <a href="CppComment.htm">*/</a><br/>
	<b><a href="CppIf.htm">if</a></b> (! xte_XTestSupported( display ))<br/>
	{<br/>
		printf("The XTest extension is not supported! Aborting...");<br/>
		exit(255);<br/>
	}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a> Doxygen Information <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>* \file cva-input.c<br/>
 * \brief The cva-input program to demonstrate Libcv<b><a href="CppAuto.htm">auto</a></b>mation's XTest <a href="CppFunction.htm">function</a>ality<br/>
 * \author Bradlee Speice &lt;bspeice@uncc.edu&gt;<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> The biggest purpose of documenting <b><a href="CppThis.htm">this</a></b> code is to trick doxygen into making a man page <b><a href="CppFor.htm">for</a></b> it. <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>* \page cva-input<br/>
 *<br/>
 * \author Bradlee Speice &lt;bspeice@uncc.edu&gt;<br/>
 * \section usage Usage:<br/>
 * This program works kind of like a mini-language. All options are parsed left-to-right, and executed right there. Thus, specifying "<a href="CppOperatorDecrement.htm">--</a>display" at different places in the options will cause <b><a href="CppThis.htm">this</a></b> program to use the most recent given display.<br/>
 * The <b><a href="CppReturn.htm">return</a></b> code is 1 <b><a href="CppIf.htm">if</a></b> there are no commands given, or <b><a href="CppIf.htm">if</a></b> all commands fail. It is 0 otherwise.<br/>
 * \section example Example Usage:<br/>
 * Click the mouse:<br/>
 *<br/>
 * cva-input <a href="CppOperatorMinus.htm">-</a>s 'click 1'<br/>
 *<br/>
 * Press key 'a':<br/>
 *<br/>
 * cva-input <a href="CppOperatorMinus.htm">-</a>s 'keyclick a'<br/>
 *<br/>
 * \section options Full Options:<br/>
 *<br/>
 * <a href="CppOperatorMinus.htm">-</a>h, <a href="CppOperatorDecrement.htm">--</a>help:			Display <b><a href="CppThis.htm">this</a></b> usage message.<br/>
 *<br/>
 * <a href="CppOperatorMinus.htm">-</a>u, <a href="CppOperatorDecrement.htm">--</a>usage:			Display <b><a href="CppThis.htm">this</a></b> usage message.<br/>
 *<br/>
 * <a href="CppOperatorMinus.htm">-</a>d, <a href="CppOperatorDecrement.htm">--</a>display:		Specify the X display to use.<br/>
 *<br/>
 * <a href="CppOperatorMinus.htm">-</a>m, <a href="CppOperatorDecrement.htm">--</a>search-<a href="CppMemberFunction.htm">member function</a>:	Specify a <a href="CppMemberFunction.htm">member function</a> to search by. See &lt;tt&gt;cva-match <a href="CppOperatorDecrement.htm">--</a>help&lt;/tt&gt; <b><a href="CppFor.htm">for</a></b> more information on <b><a href="CppThis.htm">this</a></b>.<br/>
 *<br/>
 * <a href="CppOperatorMinus.htm">-</a>t, <a href="CppOperatorDecrement.htm">--</a>tolerance:		Specify how strict the match is.<br/>
 *<br/>
 * <a href="CppOperatorMinus.htm">-</a>b, <a href="CppOperatorDecrement.htm">--</a>button:		Specify the mouse button to press (<b><a href="CppDefault.htm">default</a></b> 1).<br/>
 *<br/>
 * <a href="CppOperatorMinus.htm">-</a>c, <a href="CppOperatorDecrement.htm">--</a>center:		Instead of matching the top-left corner of an image, match the center of the image.<br/>
 *<br/>
 * <a href="CppOperatorMinus.htm">-</a>o, <a href="CppOperatorDecrement.htm">--</a>sane-tolerance: Set the tolerance <b><a href="CppUsing.htm">using</a></b> a scale of 1-100, rather than INT_MIN to INT_MAX (100 ~<a href="CppOperatorAssign.htm">=</a> INT_MAX)<br/>
 *<br/>
 * <a href="CppOperatorMinus.htm">-</a>s, <a href="CppOperatorDecrement.htm">--</a>string:		Command string <a href="CppOperatorMinus.htm">-</a> see below.<br/>
 *<br/>
 * <a href="CppOperatorMinus.htm">-</a>i, <a href="CppOperatorDecrement.htm">--</a><a href="CppTime.htm">time</a>out:		Specify the <a href="CppTime.htm">time</a>out to use when <b><a href="CppUsing.htm">using</a></b> the 'waitfor' command<br/>
 *<br/>
 *<br/>
 * \section commands Full Command List:<br/>
 * \c mouseclick:	Click the mouse in-place.<br/>
 *<br/>
 * \c imouseclick:	Click the mouse at an image's top-left corner.<br/>
 *<br/>
 * \c icmouseclick:	Click the mouse at an image's center.<br/>
 *<br/>
 * \c mousexy:	Move the mouse to the given coordinate.<br/>
 *<br/>
 * \c mouserxy:	Move the mouse by the given x and y values (relative motion).<br/>
 *<br/>
 * \c mouseimage:	Move the mouse to an image's top-left corner.<br/>
 *<br/>
 * \c cmouseimage:	Move the mouse to an image's center.<br/>
 *<br/>
 * \c mousedown:	Push and leave down a mouse button.<br/>
 *<br/>
 * \c mouseup:	Release a mouse button.<br/>
 *<br/>
 * \c mousejiggle:	Jiggle the mouse (helps to activate some <a href="CppWidget.htm">widget</a>s).<br/>
 *<br/>
 * \c mousescrollu: Scroll the mouse wheel up<br/>
 *<br/>
 * \c mousescrolld: Scroll the mouse wheel down<br/>
 *<br/>
 * \c mouselocation: Return the current location of the mouse<br/>
 *<br/>
 * \c keyclick:	Click a keyboard button.<br/>
 *<br/>
 * \c keydown:	Push and leave down a keyboard button.<br/>
 *<br/>
 * \c keyup:	Release a keyboard button.<br/>
 *<br/>
 * \c keystring:	Input a string of keys to X11.<br/>
 *<br/>
 * \c waitfor:	Wait <b><a href="CppFor.htm">for</a></b> an image to be displayed<br/>
 *<br/>
 * \section contact Contact Information:<br/>
 * <a href="CppQuestion.htm">Question</a>s? Comments? Concerns? Suggestions? Send all feedback to Bradlee Speice at &lt;bspeice@uncc.edu&gt;<br/>
 <a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppLibcvautomationExample2/CppLibcvautomationExample2.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppLibcvautomationExample2/CppLibcvautomationExample2.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
./CppLibcvautomationExample2 -s "mouselocation" <br/>
./CppLibcvautomationExample2 -s "mousexy 100 100" <br/>
./CppLibcvautomationExample2 -s "mouseclick"<br/>
./CppLibcvautomationExample2 -s "mouselocation"<br/>
<br/>
<br/>
exit<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
