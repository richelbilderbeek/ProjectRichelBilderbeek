<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::replace_if</title>
  <meta name="description" content="C++ std::replace_if"/>
  <meta name="keywords" content="C++ std::replace_if code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppReplace_if.htm">std::replace_if</a></h1>
<p>&nbsp;</p>
<p><a href="CppReplace_if.htm">std::replace_if</a> is an <a href="CppStl.htm">STL</a>
<a href="CppAlgorithm.htm">algorithm</a> to replace elements of a
sequence (on a <a href="CppVector.htm">std::vector</a>, for example) that
satisfy a certain predicate. Use <a href="CppReplace.htm">std::replace</a>
if no <a href="CppPredicate.htm">predicate</a> is needed (that is: a certain
value must always be replaced).</p>
<p>&nbsp;</p>
<p>Prefer <a href="CppAlgorithm.htm">algorithms</a> over hand-written loops [1-3]. 
<a href="CppExerciseNoForLoops.htm">Exercise #9: No for-loops</a> shows how to remove hand-written loops.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<p>The code below shows how to replace all values that are negative to zero:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
 <br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppReplaceNegativeByZero.htm">ReplaceNegativeByZero</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppReplaceNegativeByZero.htm">ReplaceNegativeByZero</a>(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppReplace_if.htm">std::replace_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind2nd.htm">std::bind2nd</a>(<a href="CppLess.htm">std::less</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(),0),0);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReplace_if.htm">replace_if</a> <a href="CppFunction.htm">function</a> <a href="CppDefinition.htm">definition</a></h2>
<p>&nbsp;</p>
<p>Simplified and modified from the <a href="CppStl.htm">STL</a> that ships
with <a href="CppBuilder.htm">C++ Builder 6.0</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppTemplate.htm">template</a></b><br/>
&lt;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> ForwardIter,<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Predicate,<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Tp<br/>
&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> replace_if(<br/>
&nbsp;&nbsp;ForwardIter first,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ForwardIter last,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Predicate pred,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Tp&amp; newvalue)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; first <a href="CppOperatorNotEqual.htm">!=</a> last; <a href="CppOperatorIncrement.htm">++</a>first)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pred(*first))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*first <a href="CppOperatorAssign.htm">=</a> newvalue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://www.cplusplus.com/reference/algorithm/replace_if">Cplusplus.com page about std::replace_if</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4. Chapter 18.12.1 : 'Prefer algorithms over loops'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a> and <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 84: 'Prefer algorithm calls to handwritten loops.'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a> and <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 88: 'Prefer function objects over functions as algorithm and comparer arguments.'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
