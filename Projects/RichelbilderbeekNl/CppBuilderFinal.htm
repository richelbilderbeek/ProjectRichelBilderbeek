<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>BuilderFinal</title>
  <meta name="description" content="C++ BuilderFinal"/>
  <meta name="keywords" content="C++ BuilderFinal code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBuilderFinal.htm">BuilderFinal</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppBuilderFinal-->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>ProjectChrisWiley.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="ProjectChrisWiley.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitMain<a href="CppImplementationFile.htm">.cpp</a>", FormMain);<br/>
USEFORM("UnitThreeDotsChasing<a href="CppImplementationFile.htm">.cpp</a>", FormThreeDotsChasing);<br/>
USEFORM("UnitAboutBox2<a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppAbout.htm">About</a>Box2);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "The Chris Wiley Project";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormMain), &amp;FormMain);<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitAboutBox2.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitAboutBox2.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitAboutBox2H<br/>
<a href="CppDefine.htm">#define</a> UnitAboutBox2H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="CppAbout.htm">About</a>Box2 : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TStaticText *StaticText1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TStaticText *StaticText2;<br/>
&nbsp;&nbsp;TStaticText *StaticText3;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TForm<a href="CppAbout.htm">About</a>Box2(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="CppAbout.htm">About</a>Box2 *Form<a href="CppAbout.htm">About</a>Box2;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitAboutBox2.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitAboutBox2.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitAboutBox2.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="CppAbout.htm">About</a>Box2 *Form<a href="CppAbout.htm">About</a>Box2;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="CppAbout.htm">About</a>Box2::TForm<a href="CppAbout.htm">About</a>Box2(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitBird.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitBird.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitBirdH<br/>
<a href="CppDefine.htm">#define</a> UnitBirdH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitEnums.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitRandom.h"<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Couple; <a href="CppComment.htm">//</a><a href="CppForwardDeclaration.htm">Forward declaration</a><br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Bird<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
<br/>
&nbsp;&nbsp;Bird(<b><a href="CppConst.htm">const</a></b> Bird&amp; mother, <b><a href="CppConst.htm">const</a></b> Bird&amp; father, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; mutation);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppVector.htm">std::vector</a>&lt;Bird&gt; createMales(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppVector.htm">std::vector</a>&lt;Bird&gt; createFemales(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppVector.htm">std::vector</a>&lt;Bird&gt; createTestMales(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; species1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; trait1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; species2, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; trait2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; species3, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; trait3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; species4, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; trait4);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppVector.htm">std::vector</a>&lt;Bird&gt; createTestFemales(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; species, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; preference);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> index;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> descent;<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Species species;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> trait;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> preference;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> assessingError;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No empty <a href="CppConstructor.htm">constructor</a>, Birds are either created from parents or<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>from the <b><a href="CppStatic.htm">static</a></b> createMales/createFemales <a href="CppFunction.htm">function</a>s<br/>
&nbsp;&nbsp;Bird() {}<br/>
};<br/>
<br/>
<b><a href="CppTypedef.htm">typedef</a></b> Bird Male;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> Bird Female;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Offspring<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt; females;<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&nbsp;&nbsp; males;<br/>
};<br/>
<br/>
<b><a href="CppTypedef.htm">typedef</a></b> Offspring Population;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Couple<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;Couple(<b><a href="CppConst.htm">const</a></b> Female&amp; <a href="CppAny.htm">any</a>Female, <b><a href="CppConst.htm">const</a></b> Male&amp; <a href="CppAny.htm">any</a>Male)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: female(<a href="CppAny.htm">any</a>Female),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;male(<a href="CppAny.htm">any</a>Male)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Nothing<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Female female;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Male&nbsp;&nbsp; male;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitBird.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitBird.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Bird::Bird(<b><a href="CppConst.htm">const</a></b> Bird&amp; mother, <b><a href="CppConst.htm">const</a></b> Bird&amp; father, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; mutation)<br/>
{<br/>
&nbsp;&nbsp;descent <a href="CppOperatorAssign.htm">=</a> (mother.descent <a href="CppOperatorPlus.htm">+</a> father.descent) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(descent<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> descent<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chanceBeingPied <a href="CppOperatorAssign.htm">=</a> 1.0-((descent+1.0)/2.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(chanceBeingPied<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> chanceBeingPied<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
&nbsp;&nbsp;species <a href="CppOperatorAssign.htm">=</a> (rnd::uniform() &gt; chanceBeingPied ? collaredFly<b><a href="CppCatch.htm">catch</a></b>er : piedFly<b><a href="CppCatch.htm">catch</a></b>er);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make a bit<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> number <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%64;<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> (number%2<a href="CppOperatorEqual.htm">==</a>0 ? mother.index : father.index);<br/>
&nbsp;&nbsp;number<a href="CppOperatorBitShiftRightAssign.htm">&gt;&gt;=</a>1;<br/>
&nbsp;&nbsp;trait <a href="CppOperatorAssign.htm">=</a> (number%2<a href="CppOperatorEqual.htm">==</a>0 ? mother.trait : father.trait);<br/>
&nbsp;&nbsp;trait<a href="CppOperatorPlusAssign.htm">+=</a>rnd::normal(0.0,mutation);<br/>
&nbsp;&nbsp;number<a href="CppOperatorBitShiftRightAssign.htm">&gt;&gt;=</a>1;<br/>
&nbsp;&nbsp;preference <a href="CppOperatorAssign.htm">=</a> (number%2<a href="CppOperatorEqual.htm">==</a>0 ? mother.preference : father.preference);<br/>
&nbsp;&nbsp;preference<a href="CppOperatorPlusAssign.htm">+=</a>rnd::normal(0.0,mutation);<br/>
&nbsp;&nbsp;number<a href="CppOperatorBitShiftRightAssign.htm">&gt;&gt;=</a>1;<br/>
&nbsp;&nbsp;assessingError <a href="CppOperatorAssign.htm">=</a> (number%2<a href="CppOperatorEqual.htm">==</a>0 ? mother.assessingError : father.assessingError);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppVector.htm">std::vector</a>&lt;Male&gt; Bird::createMales(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create males<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters.fractionMaleA<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> parameters.fractionMaleA<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create an empty vector of males<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt; males; <a href="CppComment.htm">//</a>(parameters.nMales);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate the number of males of speciesA<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSpeciesA <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.5 <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(parameters.nMales) * parameters.fractionMaleA)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* (parameters.densityDependentSelection <a href="CppOperatorEqual.htm">==</a> beforeMating ? 2.0 : 1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSpeciesB <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.5 <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(parameters.nMales) * (1.0-parameters.fractionMaleA))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* (parameters.densityDependentSelection <a href="CppOperatorEqual.htm">==</a> beforeMating ? 2.0 : 1.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("Of " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(nMales) <a href="CppOperatorPlus.htm">+</a> " males, there are " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(nSpeciesA) <a href="CppOperatorPlus.htm">+</a> " of speciesA");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fill the vector<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSpeciesA; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Male maleA;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleA.index <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleA.species <a href="CppOperatorAssign.htm">=</a> piedFly<b><a href="CppCatch.htm">catch</a></b>er;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleA.descent <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleA.trait <a href="CppOperatorAssign.htm">=</a> rnd::normal(parameters.meanTraitA, parameters.stdDevTraitA);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleA.preference <a href="CppOperatorAssign.htm">=</a> rnd::normal(parameters.meanPreferenceA, parameters.stdDevPreferenceA);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleA.assessingError <a href="CppOperatorAssign.htm">=</a> parameters.assessingErrorA;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;males.push_back(maleA);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0 ; i&lt;nSpeciesB; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Male maleB;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleB.index <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleB.species <a href="CppOperatorAssign.htm">=</a> collaredFly<b><a href="CppCatch.htm">catch</a></b>er;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleB.descent <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleB.trait <a href="CppOperatorAssign.htm">=</a> rnd::normal(parameters.meanTraitB, parameters.stdDevTraitB);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleB.preference <a href="CppOperatorAssign.htm">=</a> rnd::normal(parameters.meanPreferenceB, parameters.stdDevPreferenceB);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleB.assessingError <a href="CppOperatorAssign.htm">=</a> parameters.assessingErrorB;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;males.push_back(maleB);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> males;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppVector.htm">std::vector</a>&lt;Female&gt; Bird::createFemales(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
<a href="CppComment.htm">//</a>Create females<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters.fractionFemaleA<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> parameters.fractionFemaleA<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create an empty vector of females<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt; females;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate the number of females of speciesA<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSpeciesA<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.5 <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(parameters.nFemales) * parameters.fractionFemaleA)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* (parameters.densityDependentSelection <a href="CppOperatorEqual.htm">==</a> beforeMating ? 2.0 : 1.0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSpeciesB<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.5 <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(parameters.nFemales) * (1.0-parameters.fractionFemaleA))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* (parameters.densityDependentSelection <a href="CppOperatorEqual.htm">==</a> beforeMating ? 2.0 : 1.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fill the vector<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSpeciesA; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Female femaleA;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;femaleA.index <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;femaleA.species <a href="CppOperatorAssign.htm">=</a> piedFly<b><a href="CppCatch.htm">catch</a></b>er;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;femaleA.descent <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;femaleA.preference <a href="CppOperatorAssign.htm">=</a> rnd::normal(parameters.meanPreferenceA, parameters.stdDevPreferenceA);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;femaleA.assessingError <a href="CppOperatorAssign.htm">=</a> parameters.assessingErrorA;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;femaleA.trait <a href="CppOperatorAssign.htm">=</a> rnd::normal(parameters.meanTraitA, parameters.stdDevTraitA);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;females.push_back(femaleA);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0 ; i&lt;nSpeciesB; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Female femaleB;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;femaleB.index <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;femaleB.species <a href="CppOperatorAssign.htm">=</a> collaredFly<b><a href="CppCatch.htm">catch</a></b>er;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;femaleB.descent <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;femaleB.preference <a href="CppOperatorAssign.htm">=</a> rnd::normal(parameters.meanPreferenceB, parameters.stdDevPreferenceB);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;femaleB.assessingError <a href="CppOperatorAssign.htm">=</a> parameters.assessingErrorB;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;femaleB.trait <a href="CppOperatorAssign.htm">=</a> rnd::normal(parameters.meanTraitB, parameters.stdDevTraitB);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;females.push_back(femaleB);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> females;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppVector.htm">std::vector</a>&lt;Male&gt; Bird::createTestMales(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; species1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; trait1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; species2, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; trait2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; species3, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; trait3,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; species4, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; trait4<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create an empty vector of males<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt; males;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate the number of males of speciesA<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("Of " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(nMales) <a href="CppOperatorPlus.htm">+</a> " males, there are " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(nSpeciesA) <a href="CppOperatorPlus.htm">+</a> " of speciesA");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fill the vector<br/>
&nbsp;&nbsp;Male male1, male2, male3, male4;<br/>
&nbsp;&nbsp;male1.descent <a href="CppOperatorAssign.htm">=</a> species1; male1.trait <a href="CppOperatorAssign.htm">=</a> trait1; male1.species <a href="CppOperatorAssign.htm">=</a> (rnd::uniform() &gt; 1.0-((male1.descent+1.0)/2.0) ? collaredFly<b><a href="CppCatch.htm">catch</a></b>er : piedFly<b><a href="CppCatch.htm">catch</a></b>er);<br/>
&nbsp;&nbsp;male2.descent <a href="CppOperatorAssign.htm">=</a> species2; male2.trait <a href="CppOperatorAssign.htm">=</a> trait2; male2.species <a href="CppOperatorAssign.htm">=</a> (rnd::uniform() &gt; 1.0-((male2.descent+1.0)/2.0) ? collaredFly<b><a href="CppCatch.htm">catch</a></b>er : piedFly<b><a href="CppCatch.htm">catch</a></b>er);<br/>
&nbsp;&nbsp;male3.descent <a href="CppOperatorAssign.htm">=</a> species3; male3.trait <a href="CppOperatorAssign.htm">=</a> trait3; male3.species <a href="CppOperatorAssign.htm">=</a> (rnd::uniform() &gt; 1.0-((male3.descent+1.0)/2.0) ? collaredFly<b><a href="CppCatch.htm">catch</a></b>er : piedFly<b><a href="CppCatch.htm">catch</a></b>er);<br/>
&nbsp;&nbsp;male4.descent <a href="CppOperatorAssign.htm">=</a> species4; male4.trait <a href="CppOperatorAssign.htm">=</a> trait4; male4.species <a href="CppOperatorAssign.htm">=</a> (rnd::uniform() &gt; 1.0-((male4.descent+1.0)/2.0) ? collaredFly<b><a href="CppCatch.htm">catch</a></b>er : piedFly<b><a href="CppCatch.htm">catch</a></b>er);<br/>
&nbsp;&nbsp;males.push_back(male1);<br/>
&nbsp;&nbsp;males.push_back(male2);<br/>
&nbsp;&nbsp;males.push_back(male3);<br/>
&nbsp;&nbsp;males.push_back(male4);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> males;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppVector.htm">std::vector</a>&lt;Female&gt; Bird::createTestFemales(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; species, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; preference)<br/>
<a href="CppComment.htm">//</a>Create females<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create an empty vector of females<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt; females;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fill the vector with one female<br/>
&nbsp;&nbsp;Female female;<br/>
&nbsp;&nbsp;female.descent <a href="CppOperatorAssign.htm">=</a> species;<br/>
&nbsp;&nbsp;female.species <a href="CppOperatorAssign.htm">=</a> (rnd::uniform() &gt; 1.0-((female.descent+1.0)/2.0) ? collaredFly<b><a href="CppCatch.htm">catch</a></b>er : piedFly<b><a href="CppCatch.htm">catch</a></b>er);<br/>
&nbsp;&nbsp;female.preference <a href="CppOperatorAssign.htm">=</a> preference;<br/>
&nbsp;&nbsp;female.assessingError <a href="CppOperatorAssign.htm">=</a> parameters.assessingErrorA;<br/>
&nbsp;&nbsp;females.push_back(female);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> females;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitDensityDependentSelection.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitDensityDependentSelection.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitDensityDependentSelectionH<br/>
<a href="CppDefine.htm">#define</a> UnitDensityDependentSelectionH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitTallies.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>DensityDependentSelectionBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>DensityDependentSelectionBase() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppBool.htm">bool</a></b> canDoSelection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppString.htm">std::string</a>&amp; errorMessage<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> SpeciesTally&amp; speciesTally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>Selection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> SpeciesTally&amp; speciesTally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>DensityDependentSelectionAfterMating : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>DensityDependentSelectionBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>DensityDependentSelectionAfterMating() {}<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "DensityDependentSelectionAfterMating"; }<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> canDoSelection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppString.htm">std::string</a>&amp; errorMessage<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> SpeciesTally&amp; speciesTally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>Selection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> SpeciesTally&amp; speciesTally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>DensityDependentSelectionBeforeMating : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>DensityDependentSelectionBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>DensityDependentSelectionBeforeMating() {}<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "DensityDependentSelectionBeforeMating"; }<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> canDoSelection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppString.htm">std::string</a>&amp; errorMessage<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> SpeciesTally&amp; speciesTally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>Selection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> SpeciesTally&amp; speciesTally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitDensityDependentSelection.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitDensityDependentSelection.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitDensityDependentSelection.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppState.htm">State</a>DensityDependentSelectionAfterMating::canDoSelection(<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a>&amp; errorMessage<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> SpeciesTally&amp; speciesTally<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppState.htm">State</a>DensityDependentSelectionAfterMating::<b><a href="CppDo.htm">do</a></b>Selection(<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> SpeciesTally&amp; speciesTally<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Nothing, density dependent selection is found in MatingSystemFixedNumberOffspring<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>This type of selection occurs before mating<br/>
<a href="CppComment.htm">//</a>Idea is, that the population structure is constant before mating.<br/>
<a href="CppComment.htm">//</a>This means that the number of malesA, malesB, femalesA and femalesB<br/>
<a href="CppComment.htm">//</a>is constant. This is reached by removing superfluous individuals.<br/>
<a href="CppComment.htm">//</a>If however, too few individuals are present, selection cannot take<br/>
<a href="CppComment.htm">//</a>place and the population is called extinct.<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppState.htm">State</a>DensityDependentSelectionBeforeMating::canDoSelection(<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a>&amp; errorMessage<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> SpeciesTally&amp; speciesTally<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(speciesTally.isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;SpeciesTally speciesTally;<br/>
&nbsp;&nbsp;speciesTally.tallySpecies(females,males);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( speciesTally.getNfemalesA() &lt; parameters.getNfemalesAwanted())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;errorMessage <a href="CppOperatorAssign.htm">=</a> "Too few femalesA <b><a href="CppFor.htm">for</a></b> selection."<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" Needed: " <a href="CppOperatorPlus.htm">+</a> itoa(parameters.getNfemalesAwanted())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " ,got: " <a href="CppOperatorPlus.htm">+</a> itoa(speciesTally.getNfemalesA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dot(errorMessage);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( speciesTally.getNfemalesB() &lt; parameters.getNfemalesBwanted())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;errorMessage <a href="CppOperatorAssign.htm">=</a> "Too few femalesB <b><a href="CppFor.htm">for</a></b> selection."<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" Needed: " <a href="CppOperatorPlus.htm">+</a> itoa(parameters.getNfemalesBwanted())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " ,got: " <a href="CppOperatorPlus.htm">+</a> itoa(speciesTally.getNfemalesB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dot(errorMessage);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( speciesTally.getNmalesA() &lt; parameters.getNmalesAwanted())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;errorMessage <a href="CppOperatorAssign.htm">=</a> "Too few malesA <b><a href="CppFor.htm">for</a></b> selection."<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" Needed: " <a href="CppOperatorPlus.htm">+</a> itoa(parameters.getNmalesAwanted())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " ,got: " <a href="CppOperatorPlus.htm">+</a> itoa(speciesTally.getNmalesA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dot(errorMessage);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( speciesTally.getNmalesB() &lt; parameters.getNmalesBwanted())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;errorMessage <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;"Too few malesB <b><a href="CppFor.htm">for</a></b> selection."<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" Needed: " <a href="CppOperatorPlus.htm">+</a> itoa(parameters.getNmalesBwanted())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " ,got: " <a href="CppOperatorPlus.htm">+</a> itoa(speciesTally.getNmalesB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dot(errorMessage);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppState.htm">State</a>DensityDependentSelectionBeforeMating::<b><a href="CppDo.htm">do</a></b>Selection(<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> SpeciesTally&amp; speciesTally<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesAwanted&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> parameters.getNmalesAwanted();<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesBwanted&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> parameters.getNmalesBwanted();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nMalesAwanted <a href="CppOperatorPlus.htm">+</a> nMalesBwanted <a href="CppOperatorEqual.htm">==</a> parameters.nMales);<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesAwanted <a href="CppOperatorAssign.htm">=</a> parameters.getNfemalesAwanted();<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesBwanted <a href="CppOperatorAssign.htm">=</a> parameters.getNfemalesBwanted();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nFemalesAwanted <a href="CppOperatorPlus.htm">+</a> nFemalesBwanted <a href="CppOperatorEqual.htm">==</a> parameters.nFemales);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;males.size(); ) <a href="CppComment.htm">//</a>No increment<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (males[i].species <a href="CppOperatorEqual.htm">==</a> piedFly<b><a href="CppCatch.htm">catch</a></b>er) <a href="CppComment.htm">//</a>Male is of type A<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nMalesAwanted<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Erase the male<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; males.erase(&amp;males[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Keep the male<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>nMalesAwanted;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a>Male is of type B<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nMalesBwanted<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Erase the male<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; males.erase(&amp;males[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Keep the male<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>nMalesBwanted;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;females.size(); ) <a href="CppComment.htm">//</a>No increment<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (females[i].species <a href="CppOperatorEqual.htm">==</a> piedFly<b><a href="CppCatch.htm">catch</a></b>er) <a href="CppComment.htm">//</a>Female is of type A<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nFemalesAwanted<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Erase the female<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; females.erase(&amp;females[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Keep the female<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>nFemalesAwanted;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a>Female is of type B<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nFemalesBwanted<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Erase the female<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; females.erase(&amp;females[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Keep the female<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>nFemalesBwanted;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> __HACK_089236408766433745<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> fs <a href="CppOperatorAssign.htm">=</a> females.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> ms <a href="CppOperatorAssign.htm">=</a> males.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> fw <a href="CppOperatorAssign.htm">=</a> parameters.nFemales;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> mw <a href="CppOperatorAssign.htm">=</a> parameters.nMales;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppRandom_shuffle.htm">std::random_shuffle</a>(females.begin(), females.end());<br/>
&nbsp;&nbsp;<a href="CppRandom_shuffle.htm">std::random_shuffle</a>(males.begin(), males.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(females.size()<a href="CppOperatorEqual.htm">==</a>parameters.nFemales);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(males.size()<a href="CppOperatorEqual.htm">==</a>parameters.nMales);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitEnums.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitEnums.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitEnumsH<br/>
<a href="CppDefine.htm">#define</a> UnitEnumsH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppEnum.htm">enum</a></b> <b><a href="CppEnum.htm">enum</a></b>Species<br/>
{<br/>
&nbsp;&nbsp;piedFly<b><a href="CppCatch.htm">catch</a></b>er, <a href="CppComment.htm">//</a>descent/speciesValue <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1<br/>
&nbsp;&nbsp;collaredFly<b><a href="CppCatch.htm">catch</a></b>er&nbsp;&nbsp;<a href="CppComment.htm">//</a>descent/speciesValue <a href="CppOperatorAssign.htm">=</a> 1.0<br/>
};<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> <b><a href="CppEnum.htm">enum</a></b>DensityDependentSelection<br/>
{<br/>
&nbsp;&nbsp;beforeMating,<br/>
&nbsp;&nbsp;afterMating<br/>
};<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> <b><a href="CppEnum.htm">enum</a></b>MatingSystem<br/>
{<br/>
&nbsp;&nbsp;monogamy,<br/>
&nbsp;&nbsp;polygyny <a href="CppComment.htm">//</a>Male can mate multiple <a href="CppTime.htm">time</a>s<br/>
};<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> <b><a href="CppEnum.htm">enum</a></b>FemaleSampling<br/>
{<br/>
&nbsp;&nbsp;bestOfNconspicific,<br/>
&nbsp;&nbsp;bestOfNextremeTrait,<br/>
&nbsp;&nbsp;bestOfNclosestTrait,<br/>
&nbsp;&nbsp;fixedThresholdConspicific,<br/>
&nbsp;&nbsp;fixedThresholdTraitSign,<br/>
&nbsp;&nbsp;fixedThresholdProbabilistic<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitEnums.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitEnums.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitEnums.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitFemaleSampling.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitFemaleSampling.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFemaleSamplingH<br/>
<a href="CppDefine.htm">#define</a> UnitFemaleSamplingH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitRandom.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>FemaleSamplingBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>FemaleSamplingBase() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getWinnerIndex(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males, <b><a href="CppConst.htm">const</a></b> Female&amp; female, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppString.htm">std::string</a> getFemaleSampling() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNconspicific : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>FemaleSamplingBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>FemaleSamplingBestOfNconspicific() {}<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getWinnerIndex(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males, <b><a href="CppConst.htm">const</a></b> Female&amp; female, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> getFemaleSampling() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "Best of N conspicific"; }<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNextremeTrait : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>FemaleSamplingBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>FemaleSamplingBestOfNextremeTrait() {}<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getWinnerIndex(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males, <b><a href="CppConst.htm">const</a></b> Female&amp; female, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> getFemaleSampling() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "Best of N extreme trait"; }<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNclosestTrait : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>FemaleSamplingBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>FemaleSamplingBestOfNclosestTrait() {}<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getWinnerIndex(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males, <b><a href="CppConst.htm">const</a></b> Female&amp; female, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> getFemaleSampling() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "Best of N closest trait"; }<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdConspicific : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>FemaleSamplingBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>FemaleSamplingFixedThresholdConspicific() {}<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getWinnerIndex(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males, <b><a href="CppConst.htm">const</a></b> Female&amp; female, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> getFemaleSampling() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "Fixed threshold conspicific"; }<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdTraitSign : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>FemaleSamplingBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>FemaleSamplingFixedThresholdTraitSign() {}<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getWinnerIndex(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males, <b><a href="CppConst.htm">const</a></b> Female&amp; female, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> getFemaleSampling() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "Fixed threshold trait sign"; }<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdProbabilistic : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>FemaleSamplingBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>FemaleSamplingFixedThresholdProbabilistic() {}<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getWinnerIndex(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males, <b><a href="CppConst.htm">const</a></b> Female&amp; female, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> getFemaleSampling() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "Fixed threshold probabilistic"; }<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInline.htm">inline</a></b> <b><a href="CppDouble.htm">double</a></b> getChanceToMate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; femalePreference, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; maleTrait, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; sigmaSquared);<br/>
<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt; createIndices(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; bestOfHowMuch, <b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nMales);<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt; createIndicesUnique(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; bestOfHowMuch, <b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nMales);<br/>
<a href="CppComment.htm">//</a><a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; createSpeciesVector(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males, <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;&amp; maleIndex);<br/>
<a href="CppComment.htm">//</a><a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; createTraitsVector(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males, <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;&amp; maleIndex);<br/>
<a href="CppComment.htm">//</a><b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getBestMaleIndex(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; maleTraits, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; femalePreference, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; assessingError);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitFemaleSampling.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitFemaleSampling.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFemaleSampling.h"<br/>
<br/>
<a href="CppDefine.htm">#define</a> EXTREME_TEST<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNconspicific::getWinnerIndex(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Female&amp; female,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> bestOfHowMuch <a href="CppOperatorAssign.htm">=</a> parameters.bestOfHowMuch;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the male indices<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt; maleIndices <a href="CppOperatorAssign.htm">=</a> createIndicesUnique(bestOfHowMuch, males.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt; maleIndicesCopy <a href="CppOperatorAssign.htm">=</a> maleIndices;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove the males that are either heterospecific or assessed wrong<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;maleIndices.size(); ) <a href="CppComment.htm">//</a>No <a href="CppOperatorIncrement.htm">++</a>i indeed<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rnd::uniform() &gt; female.assessingError) <a href="CppComment.htm">//</a>The female does NOT <a href="CppMake.htm">make</a> an error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (female.species <a href="CppOperatorEqual.htm">==</a> piedFly<b><a href="CppCatch.htm">catch</a></b>er) <a href="CppComment.htm">//</a>Female is of species A (piedFlyCatcher)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (males[ maleIndices[i] ].species <a href="CppOperatorEqual.htm">==</a> collaredFly<b><a href="CppCatch.htm">catch</a></b>er) <a href="CppComment.htm">//</a>Male is of species B<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maleIndices.erase(&amp;maleIndices[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a>Male is of species A (piedFly<b><a href="CppCatch.htm">catch</a></b>er)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppOperatorIncrement.htm">++</a>i; } <a href="CppComment.htm">//</a>The male is a conspicific and remains in the vecor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a>Female is of species B (collaredFly<b><a href="CppCatch.htm">catch</a></b>er)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (males[ maleIndices[i] ].species <a href="CppOperatorEqual.htm">==</a> collaredFly<b><a href="CppCatch.htm">catch</a></b>er) <a href="CppComment.htm">//</a>Male is of species B<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppOperatorIncrement.htm">++</a>i; }<a href="CppComment.htm">//</a>The male is a conspicific and remains in the vecor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a>Male is of species A<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maleIndices.erase(&amp;maleIndices[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>maleIndices.erase(&amp;maleIndices.at(i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i; <a href="CppComment.htm">//</a>The wrongly assessed male remains<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("Remaining male Indices"); Dot(maleIndices);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>With the remaining candidats, she mates at random<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (maleIndices.size()&gt;0) <a href="CppComment.htm">//</a>She found a suitable candidat<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> candidatIndex <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%maleIndices.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> winnerIndex <a href="CppOperatorAssign.htm">=</a> maleIndices[candidatIndex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> winnerIndex;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maleIndicesCopy[ <a href="CppRand.htm">std::rand</a>()%maleIndicesCopy.size() ];<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNextremeTrait::getWinnerIndex(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Female&amp; female,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> bestOfHowMuch <a href="CppOperatorAssign.htm">=</a> ( parameters.bestOfHowMuch &lt; males.size() ? parameters.bestOfHowMuch : males.size());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the male indices<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt; maleIndices <a href="CppOperatorAssign.htm">=</a> createIndicesUnique(bestOfHowMuch, males.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("Male Indices"); Dot(maleIndices);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rnd::uniform() &gt; female.assessingError) <a href="CppComment.htm">//</a>The female does NOT <a href="CppMake.htm">make</a> an error<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Get the best male<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (female.preference &lt; 0.0) <a href="CppComment.htm">//</a>Find male with lowest trait<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> candidatIndex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> bestTrait <a href="CppOperatorAssign.htm">=</a> males[ maleIndices[0] ].trait;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=1; i&lt;bestOfHowMuch; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (males[ maleIndices[i] ].trait &lt; bestTrait)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bestTrait <a href="CppOperatorAssign.htm">=</a> males[ maleIndices[i] ].trait;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;candidatIndex <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> winnerIndex <a href="CppOperatorAssign.htm">=</a> maleIndices[candidatIndex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> winnerIndex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a>Find male with highest trait<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> candidatIndex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> bestTrait <a href="CppOperatorAssign.htm">=</a> males[ maleIndices[0] ].trait;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=1; i&lt;bestOfHowMuch; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (males[ maleIndices[i] ].trait &gt; bestTrait)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bestTrait <a href="CppOperatorAssign.htm">=</a> males[ maleIndices[i] ].trait;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;candidatIndex <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> winnerIndex <a href="CppOperatorAssign.htm">=</a> maleIndices[candidatIndex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> winnerIndex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Female mates at random<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> candidatIndex <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%bestOfHowMuch;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> winnerIndex <a href="CppOperatorAssign.htm">=</a> maleIndices[candidatIndex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> winnerIndex;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNclosestTrait::getWinnerIndex(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Female&amp; female,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> bestOfHowMuch <a href="CppOperatorAssign.htm">=</a> ( parameters.bestOfHowMuch &lt; males.size() ? parameters.bestOfHowMuch : males.size());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the male indices<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt; maleIndices <a href="CppOperatorAssign.htm">=</a> createIndicesUnique(bestOfHowMuch, males.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rnd::uniform() &gt; female.assessingError) <a href="CppComment.htm">//</a>The female does NOT <a href="CppMake.htm">make</a> an error<br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Get the best male<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> candidatIndex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> closestTrait <a href="CppOperatorAssign.htm">=</a> <a href="CppFabs.htm">std::fabs</a>(males[ maleIndices[0] ].trait <a href="CppOperatorMinus.htm">-</a> female.preference);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=1; i&lt;bestOfHowMuch; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppFabs.htm">std::fabs</a>(males[ maleIndices[i] ].trait <a href="CppOperatorMinus.htm">-</a> female.preference) &lt; closestTrait)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;closestTrait <a href="CppOperatorAssign.htm">=</a> <a href="CppFabs.htm">std::fabs</a>(males[ maleIndices[0] ].trait <a href="CppOperatorMinus.htm">-</a> female.preference);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;candidatIndex <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> winnerIndex <a href="CppOperatorAssign.htm">=</a> maleIndices[candidatIndex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> winnerIndex;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Female mates at random<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> candidatIndex <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%bestOfHowMuch;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> winnerIndex <a href="CppOperatorAssign.htm">=</a> maleIndices[candidatIndex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> winnerIndex;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdConspicific::getWinnerIndex(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Female&amp; female,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMales <a href="CppOperatorAssign.htm">=</a> males.size();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppEnum.htm">enum</a></b>Species femaleSpecies <a href="CppOperatorAssign.htm">=</a> female.species;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; nMales*2; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>The female searches all males 2x<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> maleIndex <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%nMales;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppEnum.htm">enum</a></b>Species maleSpecies <a href="CppOperatorAssign.htm">=</a> males[maleIndex].species;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rnd::uniform() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> female.assessingError) <a href="CppComment.htm">//</a>The female does NOT <a href="CppMake.htm">make</a> an error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>The female chooses him when either having a trait smaller of bigger then 0.5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (femaleSpecies <a href="CppOperatorEqual.htm">==</a> piedFly<b><a href="CppCatch.htm">catch</a></b>er)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>She fancies a male of speciesA<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( maleSpecies <a href="CppOperatorEqual.htm">==</a> piedFly<b><a href="CppCatch.htm">catch</a></b>er) <b><a href="CppReturn.htm">return</a></b> maleIndex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>She fancies a male of species B<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( maleSpecies <a href="CppOperatorEqual.htm">==</a> collaredFly<b><a href="CppCatch.htm">catch</a></b>er) <b><a href="CppReturn.htm">return</a></b> maleIndex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a>The female <a href="CppMake.htm">make</a>s an error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>The female chooses him whatever species he is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(female.assessingError&gt;0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maleIndex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>She has not found a mate<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("Female #" <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(female.index) <a href="CppOperatorPlus.htm">+</a> " has not found a mate");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> nMales;<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdTraitSign::getWinnerIndex(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Female&amp; female,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMales <a href="CppOperatorAssign.htm">=</a> males.size();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> femalePreference <a href="CppOperatorAssign.htm">=</a> female.preference;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; nMales*2; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>The female searches all males 2x<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> maleIndex <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%nMales;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleTrait <a href="CppOperatorAssign.htm">=</a> males[maleIndex].trait;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rnd::uniform() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> female.assessingError) <a href="CppComment.htm">//</a>The female does NOT <a href="CppMake.htm">make</a> an error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>The female chooses him when either having a trait smaller of bigger then 0.5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (femalePreference<a href="CppOperatorLessEqual.htm">&lt;=</a>0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>She fancies a male with low trait<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( maleTrait <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0) <b><a href="CppReturn.htm">return</a></b> maleIndex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>She fancies a male with high trait<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( maleTrait <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0) <b><a href="CppReturn.htm">return</a></b> maleIndex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a>The female <a href="CppMake.htm">make</a>s an error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>The female chooses him whatever species he is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(female.assessingError&gt;0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maleIndex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>She has not found a mate<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> nMales;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdProbabilistic::getWinnerIndex(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Female&amp; female,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMales <a href="CppOperatorAssign.htm">=</a> males.size();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sigmaSquared <a href="CppOperatorAssign.htm">=</a> parameters.sigmaSquared;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> femalePreference <a href="CppOperatorAssign.htm">=</a> female.preference;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; nMales*2; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>The female searches all males 2x<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> maleIndex <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%nMales;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleTrait <a href="CppOperatorAssign.htm">=</a> males[maleIndex].trait;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rnd::uniform() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> female.assessingError) <a href="CppComment.htm">//</a>The female does NOT <a href="CppMake.htm">make</a> an error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>The female chooses him when either having a trait smaller of bigger then 0.5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chanceToMate <a href="CppOperatorAssign.htm">=</a> <a href="CppExp.htm">std::exp</a>(-(maleTrait-femalePreference)*(maleTrait-femalePreference)/sigmaSquared);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chanceToMate <a href="CppOperatorAssign.htm">=</a> getChanceToMate(femalePreference,maleTrait,sigmaSquared);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rnd::uniform() &lt; chanceToMate) <b><a href="CppReturn.htm">return</a></b> maleIndex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a>The female <a href="CppMake.htm">make</a>s an error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>The female chooses him whatever species he is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(female.assessingError&gt;0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maleIndex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>She has not found a mate<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> nMales;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdProbabilistic::getChanceToMate(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; femalePreference,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; maleTrait,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; sigmaSquared)<br/>
{<br/>
&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <a href="CppExp.htm">std::exp</a>(-(maleTrait-femalePreference)*(maleTrait-femalePreference)/sigmaSquared);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> HELPER FUNCTIONS<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getBestMaleIndex(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; maleTraits, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; femalePreference, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; assessingError)<br/>
<a href="CppComment.htm">//</a><b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getBestMaleIndex(<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; maleTraits,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; femalePreference,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; assessingError)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt; bestMaleIndices;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nCandidats <a href="CppOperatorAssign.htm">=</a> maleTraits.size();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nCandidats; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rnd::uniform() &gt; assessingError) <a href="CppComment.htm">//</a>The female does NOT <a href="CppMake.htm">make</a> an error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>The female chooses her preference<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( maleTraits[i] <a href="CppOperatorEqual.htm">==</a> femalePreference) bestMaleIndices.push_back(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppComment.htm">//</a>The female <a href="CppMake.htm">make</a>s an error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>The female chooses him whatever species he is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bestMaleIndices.push_back(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Select from the indices of best males the winner<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nCompetitors <a href="CppOperatorAssign.htm">=</a> bestMaleIndices.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nCompetitors<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only losers, female chooses at random from all candidats<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> bestMaleIndex <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%nCandidats;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bestMaleIndex&lt;nCandidats);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> bestMaleIndex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>There are winner males, as nCompetitors &gt; 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> luckyCompetitorIndex <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%nCompetitors;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> bestMaleIndex <a href="CppOperatorAssign.htm">=</a> bestMaleIndices[luckyCompetitorIndex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bestMaleIndex&lt;nCandidats);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> bestMaleIndex;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>This <a href="CppFunction.htm">function</a> produces a vector of traits, in <b><a href="CppThis.htm">this</a></b> <b><a href="CppCase.htm">case</a></b> the select males' trait/ornaments<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; createTraitsVector(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males, <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;&amp; maleIndex)<br/>
<a href="CppComment.htm">//</a><a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; createTraitsVector(<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;&amp; maleIndex)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMales <a href="CppOperatorAssign.htm">=</a> maleIndex.size();<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; maleTraits(nMales);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nMales; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> indexMale <a href="CppOperatorAssign.htm">=</a> maleIndex[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleTraits[i] <a href="CppOperatorAssign.htm">=</a> males[indexMale].trait;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maleTraits;<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Creates a vector of size 'bestOfHowMuch' with indices from 0 to 'nMales'<br/>
<a href="CppComment.htm">//</a>An index might occur twice: <b><a href="CppIf.htm">if</a></b> every index should be unique use 'createMaleIndices' instead.<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt; createIndices(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; bestOfHowMuch,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nMales)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt; maleIndex(nMales);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> mate <a href="CppOperatorAssign.htm">=</a> 0; mate &lt; bestOfHowMuch; <a href="CppOperatorIncrement.htm">++</a>mate)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleIndex[mate] <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%nMales;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No checking <b><a href="CppIf.htm">if</a></b> a male is already chosen twice<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> you want to <b><a href="CppDo.htm">do</a></b> so, use 'createMaleIndicesUnique' instead of <b><a href="CppThis.htm">this</a></b> <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maleIndex;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Creates a vector of size 'bestOfHowMuch' from 0 to 'nMales'<br/>
<a href="CppComment.htm">//</a>Every index is unique: <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> is not important use 'createMaleIndices' instead<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt; createIndicesUnique(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; bestOfHowMuch,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; nMales)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt; maleIndex;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bestOfHowMuch&lt;nMales)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleIndex.resize(bestOfHowMuch);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bestOfHowMuch<a href="CppOperatorLessEqual.htm">&lt;=</a>nMales);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleIndex[0] <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%nMales; <a href="CppComment.htm">//</a>0th element is always unique<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> mate <a href="CppOperatorAssign.htm">=</a> 1; mate &lt; bestOfHowMuch; <a href="CppOperatorIncrement.htm">++</a>mate)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 1000000; <a href="CppComment.htm">//</a>1M<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%nMales; <a href="CppComment.htm">//</a>Do draw a random index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>( <a href="CppFind.htm">std::find</a>(maleIndex.begin(),maleIndex.begin()+mate,index) <a href="CppOperatorNotEqual.htm">!=</a> maleIndex.begin()+mate); <a href="CppComment.htm">//</a>While not unqiue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maleIndex[mate] <a href="CppOperatorAssign.htm">=</a> index;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>To few males (nMales &lt; bestOfHowMuch)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleIndex.resize(nMales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> male <a href="CppOperatorAssign.htm">=</a> 0; male&lt; nMales; <a href="CppOperatorIncrement.htm">++</a>male) maleIndex[male] <a href="CppOperatorAssign.htm">=</a> male;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maleIndex;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitHelperFunctions.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitHelperFunctions.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitHelper<a href="CppFunction.htm">Function</a>sH<br/>
<a href="CppDefine.htm">#define</a> UnitHelper<a href="CppFunction.htm">Function</a>sH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> USE_<a href="CppStl.htm">STL</a>_ONLY<br/>
&nbsp;&nbsp;<a href="CppInclude.htm">#include</a> &lt;System.hpp&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> totalSum(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;&amp; myVector);<br/>
<b><a href="CppTemplate.htm">template</a></b>&lt;<b><a href="CppClass.htm">class</a></b> T&gt; T totalSum(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;T&gt;&amp; myVector);<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getIndexLowestValue(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector);<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getIndexHighestValue(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector);<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppVoid.htm">void</a></b> meanAndStdDev(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;T&gt;&amp; myVector, <b><a href="CppDouble.htm">double</a></b>&amp; mean, <b><a href="CppDouble.htm">double</a></b>&amp; stdDev);<br/>
<br/>
<br/>
<a href="CppString.htm">std::string</a> itoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; x);<br/>
<a href="CppString.htm">std::string</a> ftoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x);<br/>
<b><a href="CppBool.htm">bool</a></b> fileExists(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; fileName);<br/>
<a href="CppString.htm">std::string</a> <b><a href="CppDouble.htm">double</a></b>ToBitString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <a href="CppAny.htm">any</a><a href="CppDouble.htm">Double</a>);<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Dot(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; message);<br/>
<b><a href="CppVoid.htm">void</a></b> Dot(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;&amp; myVector);<br/>
<b><a href="CppVoid.htm">void</a></b> Dot(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; myVector);<br/>
<b><a href="CppVoid.htm">void</a></b> Dot(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector);<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitHelperFunctions.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitHelperFunctions.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> EXTENSIVE_LOG<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> fileExists(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFstream.htm">std::fstream</a> fin;<br/>
&nbsp;&nbsp;fin.open(fileName.c_str(),<a href="CppStd.htm">std</a>::ios::in);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( fin.is_open() )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fin.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fin.close();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
 <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> totalSum(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;&amp; myVector)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> sum=0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> myVector.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sum<a href="CppOperatorPlusAssign.htm">+=</a>myVector[i];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(sum);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b>&lt;<b><a href="CppClass.htm">class</a></b> T&gt; T totalSum(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;T&gt;&amp; myVector)<br/>
{<br/>
&nbsp;&nbsp;T sum=0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> myVector.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sum<a href="CppOperatorPlusAssign.htm">+=</a>myVector[i];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(sum);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getIndexLowestValue(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> myVector.size();<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> indexLowest <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> lowestValue <a href="CppOperatorAssign.htm">=</a> myVector[0];<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=1; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> myVector[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value &lt; lowestValue)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowestValue <a href="CppOperatorAssign.htm">=</a> value;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;indexLowest <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> indexLowest;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getIndexHighestValue(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> myVector.size();<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> indexHighest <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> highestValue <a href="CppOperatorAssign.htm">=</a> myVector[0];<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=1; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> myVector[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value &gt; highestValue)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;highestValue <a href="CppOperatorAssign.htm">=</a> value;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;indexHighest <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> indexHighest;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppString.htm">std::string</a> <b><a href="CppDouble.htm">double</a></b>ToBitString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <a href="CppAny.htm">any</a><a href="CppDouble.htm">Double</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppUnion.htm">union</a></b> MyUnion<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> myInts[2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> my<a href="CppDouble.htm">Double</a>;<br/>
&nbsp;&nbsp;} myUnion;<br/>
&nbsp;&nbsp;myUnion.my<a href="CppDouble.htm">Double</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a><a href="CppDouble.htm">Double</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> myInt0 <a href="CppOperatorAssign.htm">=</a> myUnion.myInts[0];<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> myInt1 <a href="CppOperatorAssign.htm">=</a> myUnion.myInts[1];<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> myBitString;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;32; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myInt0%2<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myBitString <a href="CppOperatorAssign.htm">=</a> "0" <a href="CppOperatorPlus.htm">+</a> myBitString;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myBitString <a href="CppOperatorAssign.htm">=</a> "1" <a href="CppOperatorPlus.htm">+</a> myBitString;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myInt0<a href="CppOperatorBitShiftRightAssign.htm">&gt;&gt;=</a>1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;32; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myInt1%2<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myBitString <a href="CppOperatorAssign.htm">=</a> "0" <a href="CppOperatorPlus.htm">+</a> myBitString;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myBitString <a href="CppOperatorAssign.htm">=</a> "1" <a href="CppOperatorPlus.htm">+</a> myBitString;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myInt1<a href="CppOperatorBitShiftRightAssign.htm">&gt;&gt;=</a>1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> myBitString;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> meanAndStdDev(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;T&gt;&amp; myVector, <b><a href="CppDouble.htm">double</a></b>&amp; mean, <b><a href="CppDouble.htm">double</a></b>&amp; stdDev)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> myVector.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(size&gt;1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dSize <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(size);<br/>
&nbsp;&nbsp;mean <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sumX <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sumXsquared <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T value <a href="CppOperatorAssign.htm">=</a> myVector[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sumX<a href="CppOperatorPlusAssign.htm">+=</a>value;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sumXsquared<a href="CppOperatorPlusAssign.htm">+=</a>(value*value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mean<a href="CppOperatorPlusAssign.htm">+=</a>value;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;mean<a href="CppOperatorDivideAssign.htm">/=</a>dSize;<br/>
&nbsp;&nbsp;stdDev <a href="CppOperatorAssign.htm">=</a> <a href="CppSqrt.htm">std::sqrt</a>(((dSize*sumXsquared)-(sumX*sumX))/(dSize *(dSize-1.0)));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppString.htm">std::string</a> ftoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppOstringstream.htm">std::ostringstream</a> o;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(o <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x)) <b><a href="CppReturn.htm">return</a></b> "ERROR";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> o.str();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppString.htm">std::string</a> itoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; x)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppOstringstream.htm">std::ostringstream</a> o;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(o <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x)) <b><a href="CppReturn.htm">return</a></b> "ERROR";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> o.str();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Dot(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; message)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> USE_<a href="CppStl.htm">STL</a>_ONLY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(message.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ODS: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> message <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Dot(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> output <a href="CppOperatorAssign.htm">=</a> "index: ";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> myVector.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output<a href="CppOperatorPlusAssign.htm">+=</a>ftoa(myVector[i])+" ";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;Dot(output);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Dot(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; myVector)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> output <a href="CppOperatorAssign.htm">=</a> "index: ";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> myVector.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output<a href="CppOperatorPlusAssign.htm">+=</a>itoa(myVector[i])+" ";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;Dot(output);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Dot(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;&amp; myVector)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> output <a href="CppOperatorAssign.htm">=</a> "index: ";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> myVector.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output<a href="CppOperatorPlusAssign.htm">+=</a>itoa(myVector[i])+" ";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;Dot(output);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitMain.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitMain.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitMainH<br/>
<a href="CppDefine.htm">#define</a> UnitMainH<br/>
<a href="CppInclude.htm">#include</a> &lt;Chart.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Grids.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Series.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;TeEngine.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;TeeProcs.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;AppEvnts.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;mmsystem.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Dialogs.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;Buttons.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppUtilityH.htm">utility</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulation.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppTime.htm">Time</a>Series.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitParameters.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormMain : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;TStringGrid *StringGridParameters;<br/>
&nbsp;&nbsp;TButton *ButtonRun;<br/>
&nbsp;&nbsp;TStatusBar *StatusBarMain;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TChart *ChartBias;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelLeft;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRadioGroup *RadioGroupGamy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRadioGroup *RadioGroupFemaleSampling;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TProgressBar *ProgressBarSim;<br/>
&nbsp;&nbsp;TPageControl *PageControlMain;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRadioGroup *RadioGroupDensityDependentSelection;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet7;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TChart *ChartPopSize;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series12;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series13;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelLeftTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series16;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series19;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEdit *EditFractionFrom;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEdit *EditFractionTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEdit *EditFractionStep;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet6;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TChart *ChartMate<a href="CppTime.htm">Time</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series20;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series21;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series22;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series23;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TChart *ChartTest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TStringGrid *StringGridTest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonTest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TBarSeries *Series4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TChart *ChartTraitPreference;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPointSeries *Series5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPointSeries *Series6;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series7;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet12;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TChart *ChartMateFraction;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series9;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series10;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series11;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series24;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPointSeries *Series25;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPageControl *PageControlSim;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet13;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet14;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEdit *EditFraction;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPageControl *PageControl2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet9;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTestProbTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonTestSurvivalSpecies;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TChart *ChartTestProbabilities;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series26;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TBitBtn *BitBtn1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheet10;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TChart *ChartBias<a href="CppTime.htm">Time</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series27;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series28;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLineSeries *Series29;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonSave;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TSaveDialog *SaveDialog1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEditOutput;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonTestTrait;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonTestPreference;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonTestProbabilisticMating;<br/>
&nbsp;&nbsp;TButton *ButtonTestHelp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TTabSheet *TabSheetAbout;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEditAbout;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonRunClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonTestClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonTestSurvivalSpeciesClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormMouseMove(TObject *Sender, TShift<a href="CppState.htm">State</a> Shift,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall BitBtn1Click(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonSaveClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonTestTraitClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonTestPreferenceClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonTestProbabilisticMatingClick(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall StringGridParametersSelectCell(TObject *Sender, <b><a href="CppInt.htm">int</a></b> ACol,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ARow, <b><a href="CppBool.htm">bool</a></b> &amp;CanSelect);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonTestHelpClick(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall RadioGroupFemaleSamplingClick(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall RadioGroupDensityDependentSelectionClick(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall RadioGroupGamyClick(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall PageControlSimChange(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall BitBtn1MouseDown(TObject *Sender, TMouseButton Button,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setCursor(<b><a href="CppConst.htm">const</a></b> String&amp; cursorName);<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> checkInput();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TFormMain::plot<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>&amp; mean,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>&amp; <a href="CppStd.htm">std</a>Error,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <b><a href="CppChar.htm">char</a></b>tX);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TFormMain::plot<a href="CppTime.htm">Time</a>Series(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>Series&amp; mean,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>Series&amp; <a href="CppStd.htm">std</a>Error);<br/>
&nbsp;&nbsp;Parameters readStringGrid() <b><a href="CppConst.htm">const</a></b>;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormMain(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormMain *FormMain;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppString.htm">std::string</a> toString(<b><a href="CppConst.htm">const</a></b> String&amp; ansi);<br/>
String to<a href="CppAnsiString.htm">AnsiString</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; myString);<br/>
<b><a href="CppVoid.htm">void</a></b> emptyChart(TChart* <b><a href="CppChar.htm">char</a></b>t);<br/>
<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TStringList&gt; getStringGrid(<b><a href="CppConst.htm">const</a></b> TStringGrid * stringGrid);<br/>
<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TStringList&gt; getChart(<b><a href="CppConst.htm">const</a></b> TChart * <a href="CppAny.htm">any</a>Chart);<br/>
<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TStringList&gt; getChartSeries(<b><a href="CppConst.htm">const</a></b> TChartSeries * series);<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitMain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitMain.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitMain.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitAboutBox2.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitThreeDotsChasing.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormMain *FormMain;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormMain::TFormMain(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String("<a href="CppNDEBUG.htm">NDEBUG</a> defined. No output <a href="CppAny.htm">any</a>more");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Caption <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;Caption <a href="CppOperatorPlus.htm">+</a> " No<a href="CppDebug.htm">Debug</a>";<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String("<a href="CppNDEBUG.htm">NDEBUG</a> not defined.");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Caption <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;Caption <a href="CppOperatorPlus.htm">+</a> " <a href="CppDebug.htm">Debug</a>";<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;setCursor("CursorPiedFly<b><a href="CppCatch.htm">catch</a></b>er.cur");<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[0][0] <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[1][0] <a href="CppOperatorAssign.htm">=</a> "Female" ;<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[2][0] <a href="CppOperatorAssign.htm">=</a> "Male #1";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[3][0] <a href="CppOperatorAssign.htm">=</a> "Male #2";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[4][0] <a href="CppOperatorAssign.htm">=</a> "Male #3";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[5][0] <a href="CppOperatorAssign.htm">=</a> "Male #4";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[0][1] <a href="CppOperatorAssign.htm">=</a> "SpeciesValue";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[1][1] <a href="CppOperatorAssign.htm">=</a> "-1.0" ;<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[2][1] <a href="CppOperatorAssign.htm">=</a> "-1.0";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[3][1] <a href="CppOperatorAssign.htm">=</a> "-0.5";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[4][1] <a href="CppOperatorAssign.htm">=</a> "0.5";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[5][1] <a href="CppOperatorAssign.htm">=</a> "1.0";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[0][2] <a href="CppOperatorAssign.htm">=</a> "Trait/Preference";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[1][2] <a href="CppOperatorAssign.htm">=</a> "1.0" ;<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[2][2] <a href="CppOperatorAssign.htm">=</a> "-1.0";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[3][2] <a href="CppOperatorAssign.htm">=</a> "-0.5";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[4][2] <a href="CppOperatorAssign.htm">=</a> "0.5";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[5][2] <a href="CppOperatorAssign.htm">=</a> "1.0";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fill in StringGridParameters<br/>
&nbsp;&nbsp;StringGridParameters-&gt;RowCount <a href="CppOperatorAssign.htm">=</a> 23;<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 0] <a href="CppOperatorAssign.htm">=</a> "Parameter";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][ 0] <a href="CppOperatorAssign.htm">=</a> "Value";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 1] <a href="CppOperatorAssign.htm">=</a> "Number of females";&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][ 1] <a href="CppOperatorAssign.htm">=</a> "1000";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 2] <a href="CppOperatorAssign.htm">=</a> "Number of males";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][ 2] <a href="CppOperatorAssign.htm">=</a> "1000";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 3] <a href="CppOperatorAssign.htm">=</a> "Best-of-how-much";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][ 3] <a href="CppOperatorAssign.htm">=</a> "5";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 4] <a href="CppOperatorAssign.htm">=</a> "Assessing error A";&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][ 4] <a href="CppOperatorAssign.htm">=</a> "0.001";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 5] <a href="CppOperatorAssign.htm">=</a> "Assessing error B";&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][ 5] <a href="CppOperatorAssign.htm">=</a> "0.001";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 6] <a href="CppOperatorAssign.htm">=</a> "Mean trait A";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][ 6] <a href="CppOperatorAssign.htm">=</a> "-1.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 7] <a href="CppOperatorAssign.htm">=</a> "StdDev trait A";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][ 7] <a href="CppOperatorAssign.htm">=</a> "0.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 8] <a href="CppOperatorAssign.htm">=</a> "Mean trait B";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][ 8] <a href="CppOperatorAssign.htm">=</a> "1.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 9] <a href="CppOperatorAssign.htm">=</a> "StdDev trait B";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][ 9] <a href="CppOperatorAssign.htm">=</a> "0.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][10] <a href="CppOperatorAssign.htm">=</a> "Mean preference A";&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][10] <a href="CppOperatorAssign.htm">=</a> "-1.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][11] <a href="CppOperatorAssign.htm">=</a> "StdDev preference A";&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][11] <a href="CppOperatorAssign.htm">=</a> "0.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][12] <a href="CppOperatorAssign.htm">=</a> "Mean preference B";&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][12] <a href="CppOperatorAssign.htm">=</a> "1.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][13] <a href="CppOperatorAssign.htm">=</a> "StdDev preference B";&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][13] <a href="CppOperatorAssign.htm">=</a> "0.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][14] <a href="CppOperatorAssign.htm">=</a> "Number of simulations"; StringGridParameters-&gt;Cells[1][14] <a href="CppOperatorAssign.htm">=</a> "1";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][15] <a href="CppOperatorAssign.htm">=</a> "Number of generations"; StringGridParameters-&gt;Cells[1][15] <a href="CppOperatorAssign.htm">=</a> "1";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][16] <a href="CppOperatorAssign.htm">=</a> "Number of offspring";&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][16] <a href="CppOperatorAssign.htm">=</a> "6";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][17] <a href="CppOperatorAssign.htm">=</a> "SurviveSpeciesAlpha";&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][17] <a href="CppOperatorAssign.htm">=</a> "1.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][18] <a href="CppOperatorAssign.htm">=</a> "SurviveSpeciesBeta";&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][18] <a href="CppOperatorAssign.htm">=</a> "10.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][19] <a href="CppOperatorAssign.htm">=</a> "SigmaSquared";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][19] <a href="CppOperatorAssign.htm">=</a> "1.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][20] <a href="CppOperatorAssign.htm">=</a> "Cost trait";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][20] <a href="CppOperatorAssign.htm">=</a> "0.1";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][21] <a href="CppOperatorAssign.htm">=</a> "Cost preference";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][21] <a href="CppOperatorAssign.htm">=</a> "0.01";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][22] <a href="CppOperatorAssign.htm">=</a> "Mutation rate";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][22] <a href="CppOperatorAssign.htm">=</a> "0.01";<br/>
<br/>
&nbsp;&nbsp;PageControlSimChange(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::ButtonRunClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the input in own <a href="CppScope.htm">scope</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkInput()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text <a href="CppOperatorAssign.htm">=</a> "Running simulation";<br/>
&nbsp;&nbsp;setCursor("CursorPiedFly<b><a href="CppCatch.htm">catch</a></b>erSleeping.cur");<br/>
&nbsp;&nbsp;Refresh(); <a href="CppComment.htm">//</a>To draw <b><a href="CppThis.htm">this</a></b> text to the StatusBar<br/>
<br/>
&nbsp;&nbsp;emptyChart(ChartBias);<br/>
&nbsp;&nbsp;emptyChart(ChartMateFraction);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read parameters<br/>
&nbsp;&nbsp;Parameters parameters <a href="CppOperatorAssign.htm">=</a> readStringGrid();<br/>
&nbsp;&nbsp;parameters.matingSystem&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> (RadioGroupGamy-&gt;ItemIndex&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 0 ? monogamy : polygyny);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupFemaleSampling-&gt;ItemIndex)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: parameters.femaleSampling <a href="CppOperatorAssign.htm">=</a> bestOfNconspicific;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: parameters.femaleSampling <a href="CppOperatorAssign.htm">=</a> bestOfNextremeTrait;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: parameters.femaleSampling <a href="CppOperatorAssign.htm">=</a> bestOfNclosestTrait;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: parameters.femaleSampling <a href="CppOperatorAssign.htm">=</a> fixedThresholdConspicific;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: parameters.femaleSampling <a href="CppOperatorAssign.htm">=</a> fixedThresholdTraitSign;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: parameters.femaleSampling <a href="CppOperatorAssign.htm">=</a> fixedThresholdProbabilistic; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Unknown index of RadioGroupTestSampling"); <a href="CppExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;parameters.densityDependentSelection <a href="CppOperatorAssign.htm">=</a> (RadioGroupDensityDependentSelection-&gt;ItemIndex <a href="CppOperatorEqual.htm">==</a> 0 ? afterMating : beforeMating );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show parameters<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;Clear();<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Number of males: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(parameters.nMales));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Number of males: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(parameters.nMales));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Number of females: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(parameters.nFemales));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Best of how much: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(parameters.bestOfHowMuch));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Assessing error A: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.assessingErrorA));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Assessing error B: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.assessingErrorB));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Mean trait A: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.meanTraitA));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("StdDev trait A: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.stdDevTraitA));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Mean trait males B: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.meanTraitB));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("StdDev trait males B: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.stdDevTraitB));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Mean preference A: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.meanPreferenceA));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("StdDev preference A: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.stdDevPreferenceA));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Mean preference males B: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.meanPreferenceB));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("StdDev preference males B: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.stdDevPreferenceB));<br/>
<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Number of simulation: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(parameters.nSimulations));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Number of generations: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(parameters.nGenerations));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Number of offspring per couple: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(parameters.nOffspring));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("SurviveSpeciesAlpha: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.surviveSpeciesAlpha));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("SurviveSpeciesBeta: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.surviveSpeciesBeta));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("SigmaSquared: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.sigmaSquared));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Cost trait: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.costTrait));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Cost preference: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.costPreference));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Mutation rate: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.mutationRate));<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>(parameters.matingSystem&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> monogamy ? "Mating system: monogamy" : "Mating system: polygyny" );<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(parameters.femaleSampling)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> bestOfNconspicific:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Best-Of-N conspicific");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> bestOfNextremeTrait:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Best-Of-N extreme trait");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> bestOfNclosestTrait:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Best-Of-N closest trait");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> fixedThresholdConspicific:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Fixed threshold conspicific");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> fixedThresholdTraitSign:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Fixed threshold trait sign");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> fixedThresholdProbabilistic:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Fixed threshold probabilistic");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>(parameters.densityDependentSelection<a href="CppOperatorEqual.htm">==</a>beforeMating ? "Density dependent selection: before mating" : "Density dependent selection: after mating");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start simulation<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> deltaFraction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (PageControlSim-&gt;ActivePageIndex <a href="CppOperatorEqual.htm">==</a> 1 ? EditFractionStep-&gt;Text.<a href="CppToDouble.htm">ToDouble</a>() : 1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fractionFrom<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (PageControlSim-&gt;ActivePageIndex <a href="CppOperatorEqual.htm">==</a> 1 ? EditFractionFrom-&gt;Text.<a href="CppToDouble.htm">ToDouble</a>() : EditFraction-&gt;Text.<a href="CppToDouble.htm">ToDouble</a>());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fractionTo<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (PageControlSim-&gt;ActivePageIndex <a href="CppOperatorEqual.htm">==</a> 1 ? EditFractionTo-&gt;Text.<a href="CppToDouble.htm">ToDouble</a>() : 1.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> lastErrorMessage;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> fraction <a href="CppOperatorAssign.htm">=</a> fractionFrom; fraction &lt; fractionTo; fraction<a href="CppOperatorPlusAssign.htm">+=</a>deltaFraction)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDouble.htm">double</a></b> fraction <a href="CppOperatorAssign.htm">=</a> 0.9;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ProgressBarSim-&gt;Position <a href="CppOperatorAssign.htm">=</a> fraction * ProgressBarSim-&gt;Max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ProgressBarSim-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;emptyChart(ChartBias<a href="CppTime.htm">Time</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;emptyChart(ChartMate<a href="CppTime.htm">Time</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;emptyChart(ChartPopSize);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;emptyChart(ChartTraitPreference);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters.fractionMaleA&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> fraction;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters.fractionFemaleA <a href="CppOperatorAssign.htm">=</a> fraction;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>parameters.nGenerations <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimulations <a href="CppOperatorAssign.htm">=</a> parameters.nSimulations;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppTime.htm">Time</a>Series&gt; all<a href="CppTime.htm">Time</a>Series; <a href="CppComment.htm">//</a>Size 0, use push_back<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> simulation <a href="CppOperatorAssign.htm">=</a> 0; simulation &lt; nSimulations; <a href="CppOperatorIncrement.htm">++</a>simulation)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Stick parameter in simulation and run it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;Simulation&gt; simulation(<b><a href="CppNew.htm">new</a></b> Simulation(parameters));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>simulation-&gt;showPopulation(StringGrid<a href="CppDebug.htm">Debug</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simulation-&gt;execute();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the results from the sim<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>Series <b><a href="CppThis.htm">this</a></b>Sim<a href="CppTime.htm">Time</a>Series <a href="CppOperatorAssign.htm">=</a> simulation-&gt;get<a href="CppTime.htm">Time</a>Series();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTime.htm">time</a>Series.push_back(<b><a href="CppThis.htm">this</a></b>Sim<a href="CppTime.htm">Time</a>Series);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all<a href="CppTime.htm">Time</a>Series.push_back(simulation-&gt;get<a href="CppTime.htm">Time</a>Series());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastErrorMessage <a href="CppOperatorAssign.htm">=</a> simulation-&gt;mError;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Plot the average of the results<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a> <a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>Mean, <a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>StdError;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;getMeanAndStdErrorEnd<a href="CppPoint.htm">Point</a>(all<a href="CppTime.htm">Time</a>Series,<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>Mean,<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>StdError);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>Series <a href="CppTime.htm">time</a>SeriesMean, <a href="CppTime.htm">time</a>SeriesStdError;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;getMeanAndStdError<a href="CppTime.htm">Time</a>Series(all<a href="CppTime.htm">Time</a>Series,<a href="CppTime.htm">time</a>SeriesMean, <a href="CppTime.htm">time</a>SeriesStdError);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;plot<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>(<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>Mean, <a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>StdError,fraction);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;plot<a href="CppTime.htm">Time</a>Series(<a href="CppTime.htm">time</a>SeriesMean, <a href="CppTime.htm">time</a>SeriesStdError);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;setCursor("CursorPiedFly<b><a href="CppCatch.htm">catch</a></b>er.cur");<br/>
&nbsp;&nbsp;StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text <a href="CppOperatorAssign.htm">=</a> to<a href="CppAnsiString.htm">AnsiString</a>(lastErrorMessage);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (BitBtn1-&gt;Tag<a href="CppOperatorEqual.htm">==</a>0) PlaySound("PiedFly<b><a href="CppCatch.htm">catch</a></b>er.wav",0,SND_<a href="CppCfile.htm">FILE</a>NAME | SND_ASYNC);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppComment.htm">//</a>Checks the input, <a href="CppReturn.htm">returns</a> <b><a href="CppTrue.htm">true</a></b> <b><a href="CppIf.htm">if</a></b> all valid<br/>
<b><a href="CppBool.htm">bool</a></b> TFormMain::checkInput()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> checkInt; <b><a href="CppBool.htm">bool</a></b> check; <b><a href="CppDouble.htm">double</a></b> check<a href="CppDouble.htm">Double</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>nFemales<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> Try<a href="CppStrToInt.htm">StrToInt</a>(StringGridParameters-&gt;Cells[1][1],checkInt);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'nFemales' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkInt <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'nFemales' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>nMales<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> Try<a href="CppStrToInt.htm">StrToInt</a>(StringGridParameters-&gt;Cells[1][2],checkInt);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'nMales' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkInt <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'nMales' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>bestOfHowMuch<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (&nbsp;&nbsp; RadioGroupFemaleSampling-&gt;ItemIndex <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> RadioGroupFemaleSampling-&gt;ItemIndex <a href="CppOperatorEqual.htm">==</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> RadioGroupFemaleSampling-&gt;ItemIndex <a href="CppOperatorEqual.htm">==</a> 2 ) <a href="CppComment.htm">//</a>If female uses bestOfHowMuch<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> Try<a href="CppStrToInt.htm">StrToInt</a>(StringGridParameters-&gt;Cells[1][3],checkInt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'bestOfHowMuch' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkInt <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'bestOfHowMuch' should be bigger then 0"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>assessingErrorA<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][4],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'assessingErrorA' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check<a href="CppDouble.htm">Double</a> &lt; 0.0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'assessingErrorA' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check<a href="CppDouble.htm">Double</a> &gt; 1.0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'assessingErrorA' should be smaller or equal to 1.0"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>assessingErrorB<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][5],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'assessingErrorB' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check<a href="CppDouble.htm">Double</a> &lt; 0.0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'assessingErrorB' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check<a href="CppDouble.htm">Double</a> &gt; 1.0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'assessingErrorB' should be smaller or equal to 1.0"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mean trait males A<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][6],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'Mean trait males A' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>StdDev trait males A<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][7],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'StdDev trait males A' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mean trait males B<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][8],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'Mean trait males B' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>StdDev trait males B<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][9],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'StdDev trait males B' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mean preference males A<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][10],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'Mean preference males A' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>StdDev preference males A<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][11],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'StdDev preference males A' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mean preference males B<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][12],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'Mean preference males B' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>StdDev preference males B<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][13],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'StdDev preference males B' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Number of simulations<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> Try<a href="CppStrToInt.htm">StrToInt</a>(StringGridParameters-&gt;Cells[1][14],checkInt);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'Number of simulations' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkInt <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'Number of simulations' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Number of generations<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> Try<a href="CppStrToInt.htm">StrToInt</a>(StringGridParameters-&gt;Cells[1][15],checkInt);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'Number of generations' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkInt <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'Number of generations' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Number of offspring<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> Try<a href="CppStrToInt.htm">StrToInt</a>(StringGridParameters-&gt;Cells[1][16],checkInt);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'Number of offspring' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkInt <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'Number of offspring' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SurviveSpeciesAlpha<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][17],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'SurviveSpeciesAlpha' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check<a href="CppDouble.htm">Double</a> &lt; 0.0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'SurviveSpeciesAlpha' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check<a href="CppDouble.htm">Double</a> &gt; 1.0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'SurviveSpeciesAlpha' should be smaller or equal to 1.0"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SurviveSpeciesBeta<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][18],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'SurviveSpeciesBeta' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check<a href="CppDouble.htm">Double</a> &lt; 0.0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'SurviveSpeciesBeta' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SigmaSquared<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][19],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'SigmaSquared' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check<a href="CppDouble.htm">Double</a> <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'SigmaSquared' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CostTrait<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][20],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'CostTrait' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check<a href="CppDouble.htm">Double</a> &lt; 0.0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'CostTrait' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CostPreference<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][21],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'CostPreference' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check<a href="CppDouble.htm">Double</a> &lt; 0.0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'CostPreference' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>MutationRate<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][22],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'MutationRate' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check<a href="CppDouble.htm">Double</a> &lt; 0.0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'MutationRate' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMain::plot<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>&amp; mean,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>&amp; <a href="CppStd.htm">std</a>Error,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <b><a href="CppChar.htm">char</a></b>tX)<br/>
{<br/>
&nbsp;&nbsp;ChartBias-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,mean.mateTally.calculateBiasA());<br/>
&nbsp;&nbsp;ChartBias-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,mean.mateTally.calculateBiasB());<br/>
&nbsp;&nbsp;ChartBias-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,mean.mateTally.calculateFractionMixedPairs());<br/>
<br/>
&nbsp;&nbsp;ChartMateFraction-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,mean.mateTally.getNmateAA());<br/>
&nbsp;&nbsp;ChartMateFraction-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,mean.mateTally.getNmateAB());<br/>
&nbsp;&nbsp;ChartMateFraction-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,mean.mateTally.getNmateBA());<br/>
&nbsp;&nbsp;ChartMateFraction-&gt;Series[3]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,mean.mateTally.getNmateBB());<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMain::plot<a href="CppTime.htm">Time</a>Series(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>Series&amp; mean,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>Series&amp; <a href="CppStd.htm">std</a>Error)<br/>
{<br/>
&nbsp;&nbsp;emptyChart(ChartPopSize);<br/>
&nbsp;&nbsp;emptyChart(ChartMate<a href="CppTime.htm">Time</a>);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nGenerations <a href="CppOperatorAssign.htm">=</a> mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> i=0; i&lt;nGenerations; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> iD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.00,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyOffspring.getNfemalesA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.00,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyOffspring.getNfemaleHybridsA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.00,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyOffspring.getNfemaleHybridsB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[3]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.00,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyOffspring.getNfemalesB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[4]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.00,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyOffspring.getNmalesA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[5]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.00,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyOffspring.getNmaleHybridsA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[6]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.00,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyOffspring.getNmaleHybridsB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[7]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.00,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyOffspring.getNmalesB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[8]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.00,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyOffspring.getNall());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.20,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterSpeciesSelection.getNfemalesA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.20,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterSpeciesSelection.getNfemaleHybridsA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.20,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterSpeciesSelection.getNfemaleHybridsB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[3]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.20,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterSpeciesSelection.getNfemalesB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[4]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.20,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterSpeciesSelection.getNmalesA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[5]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.20,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterSpeciesSelection.getNmaleHybridsA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[6]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.20,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterSpeciesSelection.getNmaleHybridsB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[7]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.20,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterSpeciesSelection.getNmalesB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[8]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.20,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterSpeciesSelection.getNall());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.40,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterTraitSelection.getNfemalesA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.40,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterTraitSelection.getNfemaleHybridsA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.40,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterTraitSelection.getNfemaleHybridsB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[3]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.40,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterTraitSelection.getNfemalesB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[4]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.40,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterTraitSelection.getNmalesA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[5]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.40,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterTraitSelection.getNmaleHybridsA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[6]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.40,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterTraitSelection.getNmaleHybridsB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[7]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.40,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterTraitSelection.getNmalesB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[8]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.40,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterTraitSelection.getNall());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.60,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterDensityDependentSelection.getNfemalesA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.60,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterDensityDependentSelection.getNfemalesB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.60,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterDensityDependentSelection.getNmalesA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[3]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.60,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterDensityDependentSelection.getNmalesB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ChartPopSize-&gt;Series[4]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.60,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterDensityDependentSelection.getNall());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].mateTally.getNmateAA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].mateTally.getNmateAB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].mateTally.getNmateBA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[3]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].mateTally.getNmateBB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[4]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].mateTally.getNmateAll());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartBias<a href="CppTime.htm">Time</a>-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].mateTally.calculateBiasA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartBias<a href="CppTime.htm">Time</a>-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].mateTally.calculateBiasB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartBias<a href="CppTime.htm">Time</a>-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].mateTally.calculateFractionMixedPairs());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nTraits <a href="CppOperatorAssign.htm">=</a> mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].traits.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> j=0; j&lt;nTraits; <a href="CppOperatorIncrement.htm">++</a>j) ChartTraitPreference-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].traits[j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nPreferences <a href="CppOperatorAssign.htm">=</a> mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].preferences.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> j=0; j&lt;nPreferences; <a href="CppOperatorIncrement.htm">++</a>j) ChartTraitPreference-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].preferences[j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSpeciesValues <a href="CppOperatorAssign.htm">=</a> mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].descents.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> j=0; j&lt;nSpeciesValues; <a href="CppOperatorIncrement.htm">++</a>j) ChartTraitPreference-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,mean.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].descents[j]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMain::setCursor(<b><a href="CppConst.htm">const</a></b> String&amp; cursorName)<br/>
{<br/>
&nbsp;&nbsp;TCursor myCursor <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TCursor&gt;(22);<br/>
&nbsp;&nbsp;Screen-&gt;Cursors[22] <a href="CppOperatorAssign.htm">=</a> LoadCursorFromFile(cursorName.c_str());<br/>
&nbsp;&nbsp;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
&nbsp;&nbsp;FormMain-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
&nbsp;&nbsp;PageControlMain-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
&nbsp;&nbsp;PanelLeft-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
&nbsp;&nbsp;ChartBias-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
&nbsp;&nbsp;ChartPopSize-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
&nbsp;&nbsp;ChartMate<a href="CppTime.htm">Time</a>-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
&nbsp;&nbsp;ButtonRun-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
&nbsp;&nbsp;ProgressBarSim-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
&nbsp;&nbsp;RadioGroupGamy-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
&nbsp;&nbsp;RadioGroupFemaleSampling-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
&nbsp;&nbsp;RichEdit2-&gt;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Parameters TFormMain::readStringGrid() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;Parameters parameters;<br/>
&nbsp;&nbsp;parameters.nFemales&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 1].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;parameters.nMales&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 2].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;parameters.bestOfHowMuch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 3].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;parameters.assessingErrorA&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 4].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.assessingErrorB&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 5].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.meanTraitA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 6].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.stdDevTraitA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 7].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.meanTraitB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 8].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.stdDevTraitB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 9].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.meanPreferenceA&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][10].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.stdDevPreferenceA&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][11].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.meanPreferenceB&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][12].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.stdDevPreferenceB&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][13].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.nSimulations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][14].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;parameters.nGenerations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][15].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;parameters.nOffspring&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][16].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;parameters.surviveSpeciesAlpha <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][17].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.surviveSpeciesBeta&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][18].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.sigmaSquared&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][19].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.costTrait&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][20].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.costPreference&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][21].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.mutationRate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][22].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> parameters;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::ButtonTestClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>FemaleSamplingBase&gt; femaleSampling;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupFemaleSampling-&gt;ItemIndex)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: femaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNconspicific); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: femaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNextremeTrait); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: femaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNclosestTrait); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: femaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdConspicific); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: femaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdTraitSign); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: femaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdProbabilistic); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Unknown index of RadioGroupTestSampling"); <a href="CppExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;Parameters parameters <a href="CppOperatorAssign.htm">=</a> readStringGrid();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> femaleSpeciesValue <a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[1][1].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleSpeciesValue1&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[2][1].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleSpeciesValue2&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[3][1].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleSpeciesValue3&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[4][1].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleSpeciesValue4&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[5][1].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> femalePreference&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[1][2].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleTrait1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[2][2].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleTrait2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[3][2].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleTrait3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[4][2].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleTrait4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[5][2].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt; females <a href="CppOperatorAssign.htm">=</a> Bird::createTestFemales(parameters,femaleSpeciesValue, femalePreference);<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt; males <a href="CppOperatorAssign.htm">=</a> Bird::createTestMales(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleSpeciesValue1, maleTrait1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleSpeciesValue2, maleTrait2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleSpeciesValue3, maleTrait3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleSpeciesValue4, maleTrait4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt; histogramWinner(4);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;4; <a href="CppOperatorIncrement.htm">++</a>i) histogramWinner[i]=0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;1000; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> winnerIndex <a href="CppOperatorAssign.htm">=</a> femaleSampling-&gt;getWinnerIndex(males,females[0],parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>(histogramWinner[winnerIndex]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;emptyChart(ChartTest);<br/>
&nbsp;&nbsp;ChartTest-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(0.0,histogramWinner[0]);<br/>
&nbsp;&nbsp;ChartTest-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(1.0,histogramWinner[1]);<br/>
&nbsp;&nbsp;ChartTest-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(2.0,histogramWinner[2]);<br/>
&nbsp;&nbsp;ChartTest-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(3.0,histogramWinner[3]);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::ButtonTestSurvivalSpeciesClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Series[0]-&gt;Clear();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][17].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> beta&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][18].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;Clear();<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorMinus.htm">-</a> (alpha * <a href="CppExp.htm">std::exp</a>(-beta * descent * descent))");<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("SurviveSpeciesAlpha: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(alpha) <a href="CppOperatorPlus.htm">+</a> ", SurviveSpeciesBeta: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(beta));<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;BottomAxis-&gt;Title-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "SpeciesValue/descent";<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;LeftAxis-&gt;Title-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "Chance of survival";<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> descent <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0; descent&lt;1.0; descent<a href="CppOperatorPlusAssign.htm">+=</a>0.01)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> surviveSpecies <a href="CppOperatorAssign.htm">=</a> Simulation::chanceToSurviveSpecies(descent,alpha,beta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartTestProbabilities-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(descent,surviveSpecies);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::FormMouseMove(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y)<br/>
{<br/>
&nbsp;&nbsp;TCursor myCursor <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TCursor&gt;(22);<br/>
&nbsp;&nbsp;Screen-&gt;Cursors[22] <a href="CppOperatorAssign.htm">=</a> LoadCursorFromFile("CursorPiedFly<b><a href="CppCatch.htm">catch</a></b>er.cur");<br/>
&nbsp;&nbsp;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::ButtonSaveClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TStringList&gt; stringList(<b><a href="CppNew.htm">new</a></b> TStringList);<br/>
<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(" ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Parameters: ");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (PageControlSim-&gt;ActivePageIndex<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("FractionA : " <a href="CppOperatorPlus.htm">+</a> EditFraction-&gt;Text);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Fration A from: " <a href="CppOperatorPlus.htm">+</a> EditFractionFrom-&gt;Text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " to: " <a href="CppOperatorPlus.htm">+</a> EditFractionTo-&gt;Text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " in steps of: " <a href="CppOperatorPlus.htm">+</a> EditFractionStep-&gt;Text);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>Strings(getStringGrid(StringGridParameters).release());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupGamy-&gt;ItemIndex)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <a href="CppComment.htm">//</a>monogamous<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Mating system: monogamous");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppComment.htm">//</a>polygynous<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Mating system: polygynous");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupFemaleSampling-&gt;ItemIndex)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <a href="CppComment.htm">//</a>bestOfNconspicific:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Best-Of-N conspicific");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppComment.htm">//</a>bestOfNextremeTrait:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Best-Of-N extreme trait");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <a href="CppComment.htm">//</a>bestOfNclosestTrait:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Best-Of-N closest trait");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <a href="CppComment.htm">//</a>fixedThresholdConspicific:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Fixed threshold conspicific");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: <a href="CppComment.htm">//</a>fixedThresholdTraitSign:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Fixed threshold trait sign");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: <a href="CppComment.htm">//</a>fixedThresholdProbabilistic:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Fixed threshold probabilistic");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupDensityDependentSelection-&gt;ItemIndex)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Density dependent selection: in reproduction, after mating");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Density dependent selection: after selection, before mating");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(" ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Biases in <a href="CppTime.htm">time</a>: ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppTime.htm">Time</a>,BiasA,BiasB,Fraction of mixed pairs");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>Strings(getChart(ChartBias<a href="CppTime.htm">Time</a>).release());<br/>
<br/>
&nbsp;&nbsp;Dot("Trait and preferences in <a href="CppTime.htm">time</a>");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(" ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Traits in <a href="CppTime.htm">time</a>");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppTime.htm">Time</a>,Traits");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>Strings(getChartSeries(ChartTraitPreference-&gt;Series[0]).release());<br/>
<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(" ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Traits in <a href="CppTime.htm">time</a>");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppTime.htm">Time</a>,Preference");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>Strings(getChartSeries(ChartTraitPreference-&gt;Series[1]).release());<br/>
<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(" ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Descent in <a href="CppTime.htm">time</a>");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppTime.htm">Time</a>,Descent");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>Strings(getChartSeries(ChartTraitPreference-&gt;Series[2]).release());<br/>
<br/>
&nbsp;&nbsp;Dot("Number of matings in <a href="CppTime.htm">time</a>");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(" ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Number of matings in <a href="CppTime.htm">time</a>");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppTime.htm">Time</a>,AA,AB,BA,BB,Sum");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>Strings(getChart(ChartMate<a href="CppTime.htm">Time</a>).release());<br/>
<br/>
&nbsp;&nbsp;Dot("number of individuals in <a href="CppTime.htm">time</a>");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(" ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Number of individuals in <a href="CppTime.htm">time</a>");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("<a href="CppTime.htm">Time</a>,FemalesA,FemalesB,MalesA,MalesB");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>Strings(getChart(ChartPopSize).release());<br/>
<br/>
&nbsp;&nbsp;Dot("Biases <b><a href="CppFor.htm">for</a></b> different fractions of maleA: ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(" ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Biases <b><a href="CppFor.htm">for</a></b> different fractions of maleA: ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Fraction,BiasA,BiasB,Fraction of mixed pairs");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>Strings(getChart(ChartBias).release());<br/>
<br/>
&nbsp;&nbsp;Dot("Number of matings <b><a href="CppFor.htm">for</a></b> different proportions of maleA: ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(" ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Number of matings <b><a href="CppFor.htm">for</a></b> different proportions of maleA: ");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>("Fraction,AA,AB,BA,BB");<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>Strings(getChart(ChartMateFraction).release());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (SaveDialog1-&gt;Execute()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;SaveToFile(SaveDialog1-&gt;FileName);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;RichEditOutput-&gt;Lines <a href="CppOperatorAssign.htm">=</a> stringList.release();<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::BitBtn1Click(TObject *Sender)<br/>
{<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (BitBtn1-&gt;Tag<a href="CppOperatorEqual.htm">==</a>1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BitBtn1-&gt;Glyph-&gt;LoadFromFile("PiedFly<b><a href="CppCatch.htm">catch</a></b>er.bmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BitBtn1-&gt;Tag=0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BitBtn1-&gt;Glyph-&gt;LoadFromFile("PiedFly<b><a href="CppCatch.htm">catch</a></b>erSleeping.bmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BitBtn1-&gt;Tag=1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppString.htm">std::string</a> toString(<b><a href="CppConst.htm">const</a></b> String&amp; ansi)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> * myChar <a href="CppOperatorAssign.htm">=</a> ansi.c_str();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> myString <a href="CppOperatorAssign.htm">=</a> myChar;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> myString;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
String to<a href="CppAnsiString.htm">AnsiString</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; myString)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> * myChar <a href="CppOperatorAssign.htm">=</a> myString.c_str();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String myAnsi <a href="CppOperatorAssign.htm">=</a> myChar;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> myAnsi;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> emptyChart(TChart* <b><a href="CppChar.htm">char</a></b>t)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSeries <a href="CppOperatorAssign.htm">=</a> <b><a href="CppChar.htm">char</a></b>t-&gt;SeriesCount();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSeries; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>t-&gt;Series[i]-&gt;Clear();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TStringList&gt; getStringGrid(<b><a href="CppConst.htm">const</a></b> TStringGrid * stringGrid)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Those Borland people were not <b><a href="CppConst.htm">const</a></b> correct, so I need a <b><a href="CppConst.htm">const</a></b> cast here<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Grumble, grumble...<br/>
&nbsp;&nbsp;TStringGrid * grid <a href="CppOperatorAssign.htm">=</a> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;TStringGrid*&gt;(stringGrid);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String seperator <a href="CppOperatorAssign.htm">=</a> ",";<br/>
<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TStringList&gt; stringList(<b><a href="CppNew.htm">new</a></b> TStringList);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> grid-&gt;RowCount;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> grid-&gt;ColCount;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y&lt;maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;String myString;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x&lt;maxx-1; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myString<a href="CppOperatorPlusAssign.htm">+=</a>grid-&gt;Cells[x][y] <a href="CppOperatorPlus.htm">+</a> seperator; <a href="CppComment.htm">//</a>This <a href="CppFunction.htm">function</a> should have been <b><a href="CppConst.htm">const</a></b>, as it is a read <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myString<a href="CppOperatorPlusAssign.htm">+=</a>grid-&gt;Cells[maxx-1][y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(myString);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> stringList;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TStringList&gt; getChart(<b><a href="CppConst.htm">const</a></b> TChart * <a href="CppAny.htm">any</a>Chart)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Those Borland people were not <b><a href="CppConst.htm">const</a></b> correct, so I need a <b><a href="CppConst.htm">const</a></b> cast here<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Grumble, grumble...<br/>
&nbsp;&nbsp;TChart * <b><a href="CppChar.htm">char</a></b>t <a href="CppOperatorAssign.htm">=</a> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;TChart*&gt;(<a href="CppAny.htm">any</a>Chart);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String seperator <a href="CppOperatorAssign.htm">=</a> ",";<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TStringList&gt; stringList(<b><a href="CppNew.htm">new</a></b> TStringList);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy the <a href="CppPointer.htm">pointer</a>s to the values<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt; TChartValueList* &gt; xValuesVector;<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt; TChartValueList* &gt; yValuesVector;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSeries <a href="CppOperatorAssign.htm">=</a> <b><a href="CppChar.htm">char</a></b>t-&gt;SeriesCount();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSeries; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xValuesVector.push_back(<b><a href="CppChar.htm">char</a></b>t-&gt;Series[i]-&gt;XValues);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;yValuesVector.push_back(<b><a href="CppChar.htm">char</a></b>t-&gt;Series[i]-&gt;YValues);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume there are as m<a href="CppAny.htm">any</a> X's as Y's<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(xValuesVector[i]-&gt;Count()<a href="CppOperatorEqual.htm">==</a>yValuesVector[i]-&gt;Count());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make a nice collumn of X values and then all Y values<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRows <a href="CppOperatorAssign.htm">=</a> xValuesVector[0]-&gt;Count();<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSeries; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(xValuesVector[i]-&gt;Count()<a href="CppOperatorEqual.htm">==</a>nRows);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(yValuesVector[i]-&gt;Count()<a href="CppOperatorEqual.htm">==</a>nRows);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nCols <a href="CppOperatorAssign.htm">=</a> xValuesVector.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nCols <a href="CppOperatorEqual.htm">==</a> yValuesVector.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y&lt;nRows; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;String myString <a href="CppOperatorAssign.htm">=</a> FloatToStr(xValuesVector[0]-&gt;<b><a href="CppOperator.htm">operator</a></b> [](y)) <a href="CppOperatorPlus.htm">+</a> seperator;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> x=0; x&lt;nCols-1; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myString<a href="CppOperatorPlusAssign.htm">+=</a>FloatToStr(yValuesVector[x]-&gt;<b><a href="CppOperator.htm">operator</a></b> [](y)) <a href="CppOperatorPlus.htm">+</a> seperator;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myString<a href="CppOperatorPlusAssign.htm">+=</a>FloatToStr(yValuesVector[nCols-1]-&gt;<b><a href="CppOperator.htm">operator</a></b> [](y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(myString);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> stringList;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TStringList&gt; getChartSeries(<b><a href="CppConst.htm">const</a></b> TChartSeries * series)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TStringList&gt; stringList(<b><a href="CppNew.htm">new</a></b> TStringList);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String seperator <a href="CppOperatorAssign.htm">=</a> ",";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy the <a href="CppPointer.htm">pointer</a>s to the values<br/>
&nbsp;&nbsp;TChartValueList * xValues <a href="CppOperatorAssign.htm">=</a> series-&gt;XValues;<br/>
&nbsp;&nbsp;TChartValueList * yValues <a href="CppOperatorAssign.htm">=</a> series-&gt;YValues;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume there are as m<a href="CppAny.htm">any</a> X's as Y's<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(xValues-&gt;Count()<a href="CppOperatorEqual.htm">==</a>yValues-&gt;Count());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRows <a href="CppOperatorAssign.htm">=</a> xValues-&gt;Count();<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
&nbsp;&nbsp;String myString;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y&lt;nRows; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <b><a href="CppThis.htm">this</a></b>X <a href="CppOperatorAssign.htm">=</a> xValues-&gt;<b><a href="CppOperator.htm">operator</a></b> [](y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x<a href="CppOperatorNotEqual.htm">!=</a><b><a href="CppThis.htm">this</a></b>X)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(myString);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myString <a href="CppOperatorAssign.htm">=</a> FloatToStr(<b><a href="CppThis.htm">this</a></b>X) <a href="CppOperatorPlus.htm">+</a> seperator <a href="CppOperatorPlus.htm">+</a> FloatToStr(yValues-&gt;<b><a href="CppOperator.htm">operator</a></b> [](y)) <a href="CppOperatorPlus.htm">+</a> seperator;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>X;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myString <a href="CppOperatorPlusAssign.htm">+=</a> FloatToStr(yValues-&gt;<b><a href="CppOperator.htm">operator</a></b> [](y))+seperator;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(myString);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> stringList;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::ButtonTestTraitClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Series[0]-&gt;Clear();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> costTrait <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][20].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;Clear();<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> survival <a href="CppOperatorAssign.htm">=</a> <a href="CppExp.htm">std::exp</a>(-costTrait * trait * trait);");<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("costTrait: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(costTrait));<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;BottomAxis-&gt;Title-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "Species trait";<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;LeftAxis-&gt;Title-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "Chance of survival";<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> maleTrait <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0; maleTrait&lt;1.0; maleTrait<a href="CppOperatorPlusAssign.htm">+=</a>0.01)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> survivalTrait <a href="CppOperatorAssign.htm">=</a> Simulation::chanceToSurviveTrait(maleTrait,costTrait);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartTestProbabilities-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(maleTrait,survivalTrait);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::ButtonTestPreferenceClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Series[0]-&gt;Clear();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> costPreference <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][21].<a href="CppToDouble.htm">ToDouble</a>();<br/>
<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;Clear();<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> survival <a href="CppOperatorAssign.htm">=</a> <a href="CppExp.htm">std::exp</a>(-costPreference * preference * preference");<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("costPreference: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(costPreference));<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;BottomAxis-&gt;Title-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "Species preference";<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;LeftAxis-&gt;Title-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "Chance of survival";<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> femalePreference <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0; femalePreference&lt;1.0; femalePreference<a href="CppOperatorPlusAssign.htm">+=</a>0.01)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> survivalPreference <a href="CppOperatorAssign.htm">=</a> Simulation::chanceToSurvivePreference(femalePreference,costPreference);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartTestProbabilities-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(femalePreference,survivalPreference);<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::ButtonTestProbabilisticMatingClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> femalePreference <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sigmaSquared <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][19].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Series[0]-&gt;Clear();<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;Clear();<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chanceToMate <a href="CppOperatorAssign.htm">=</a><a href="CppExp.htm">std::exp</a>(-(maleTrait-femalePreference)*(maleTrait-femalePreference)/sigmaSquared);");<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("FemalePreference: 0.0 (in <b><a href="CppThis.htm">this</a></b> example)");<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("sigmaSquared: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(sigmaSquared));<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;BottomAxis-&gt;Title-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "Male trait";<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;LeftAxis-&gt;Title-&gt;Caption <a href="CppOperatorAssign.htm">=</a> "Chance to mate";<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> maleTrait <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0; maleTrait&lt;1.0; maleTrait<a href="CppOperatorPlusAssign.htm">+=</a>0.01)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chanceToMate <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppState.htm">State</a>FemaleSamplingFixedThresholdProbabilistic::getChanceToMate(femalePreference, maleTrait, sigmaSquared);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartTestProbabilities-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(maleTrait,chanceToMate);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::StringGridParametersSelectCell(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ACol, <b><a href="CppInt.htm">int</a></b> ARow, <b><a href="CppBool.htm">bool</a></b> &amp;CanSelect)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show help<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (ARow)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;1: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Number of females used in every generation"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;2: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Number of males used in every generation"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;3: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Number of males the female can sample from"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;4: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Assessing error made by species A (0.0 <a href="CppOperatorAssign.htm">=</a> perfect sampling, 1.0=random mating)"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;5: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Assessing error made by species B (0.0 <a href="CppOperatorAssign.htm">=</a> perfect sampling, 1.0=random mating)"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;6: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Initial mean trait of species A"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;7: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Initial StdDev of the trait of species A"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;8: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Initial mean trait of species B"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;9: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Initial StdDev of the trait of species B"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 10: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Initial mean preference of species A"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 11: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Initial StdDev of the preference of species A"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 12: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Initial mean preference of species B"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 13: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Initial StdDev of the preference of species B"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 14: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Number of simulations of which the results are an average of"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 15: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Number of generations"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 16: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Number of offspring produced (used when density dependent selection <a href="CppOperatorAssign.htm">=</a> before reproduction)"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 17: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Chance to die of pure hybrids (0.0 <a href="CppOperatorAssign.htm">=</a> Hybrids have equal survival, 1.0 <a href="CppOperatorAssign.htm">=</a> hybrids will die by chance 100%)"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 18: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "<a href="CppIncrease.htm">Increase</a> in fitmess from hybrids to pure species (0.0 <a href="CppOperatorAssign.htm">=</a> hybrids and pure have equal survival, 100.0 <a href="CppOperatorAssign.htm">=</a> pure species have 100<a href="CppOperatorModulus.htm">%</a> survival)"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 19: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Choosiness of female (only used in probabilistic mating, 1000.0 <a href="CppOperatorAssign.htm">=</a> random mating, 0.001 <a href="CppOperatorAssign.htm">=</a> very choosy"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 20: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Cost trait in survival/trait (0.0 <a href="CppOperatorAssign.htm">=</a> trait is costless, 10.0 <a href="CppOperatorAssign.htm">=</a> trait is expensive)"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 21: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Cost preference in survival/preference (0.0 <a href="CppOperatorAssign.htm">=</a> preference is costless, 10.0 <a href="CppOperatorAssign.htm">=</a> preference is expensive)"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 22: StringGridParameters-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "Standard deviation of mutation rate"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::ButtonTestHelpClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ShowMessage(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"These tests show the <a href="CppFunction.htm">function</a>s used."<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"\nThe results shown are derived from the <a href="CppFunction.htm">function</a>s used in the simulation"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"\n(so no code duplication, except in the Chart titles)"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"\nThe parameters used are from the Parameter StringGrid on the left."<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"\nNote that <b><a href="CppFor.htm">for</a></b> these <a href="CppFunction.htm">function</a>s, the parameters are NOT checked."<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"\nTherefore, it is possible to give in a negative cost <b><a href="CppFor.htm">for</a></b> trait,"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"\nwhich will also yield a result, but when starting the simulation,"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"\nthese values WILL be checked."<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::RadioGroupFemaleSamplingClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupFemaleSampling-&gt;ItemIndex)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <a href="CppComment.htm">//</a>Best of N conspicific<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RadioGroupFemaleSampling-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "The female chooses a conspicific from a lek of N males";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppComment.htm">//</a>Best of N most extreme trait<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RadioGroupFemaleSampling-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "The female chooses a male with the most extreme trait from a lek of N males. If her preference is smaller then 0.0, she prefers a male with trait smaller then 0.0";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <a href="CppComment.htm">//</a>Best of N closest trait-preference<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RadioGroupFemaleSampling-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "The female chooses a male with trait closest near her preference from a lek of N males";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <a href="CppComment.htm">//</a>Fixed threshold conspicific<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RadioGroupFemaleSampling-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "The female searches infinitely <b><a href="CppFor.htm">for</a></b> a conspicific";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: <a href="CppComment.htm">//</a>Fixed threshold same trait sign<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RadioGroupFemaleSampling-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "The female searches infinitely <b><a href="CppFor.htm">for</a></b> a male with the same trait sign as her preference (i.e. a negative-preference female prefers a negative-trait male)";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: <a href="CppComment.htm">//</a>Fixed threshold probabilistic<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RadioGroupFemaleSampling-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "The female searches infinitely <b><a href="CppFor.htm">for</a></b> a male with trait close to her preference. The chance she will mate with him is defined by SigmaSquared";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::RadioGroupDensityDependentSelectionClick(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupDensityDependentSelection-&gt;ItemIndex)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <a href="CppComment.htm">//</a>In reproduction, nOffspring <a href="CppOperatorAssign.htm">=</a> popSize parents<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RadioGroupDensityDependentSelection-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "In reproduction, there are offspring produced until the original fractions of speciesA and speciesB are reached <b><a href="CppFor.htm">for</a></b> a population size of nMales <a href="CppOperatorPlus.htm">+</a> nFemales";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppComment.htm">//</a>After selection, nMatureOffspring <a href="CppOperatorAssign.htm">=</a> popSize parents<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RadioGroupDensityDependentSelection-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "After selection, before mating, the population is cut down to the needed fractions of speciesA and speciesB to a population size of nMales <a href="CppOperatorPlus.htm">+</a> nFemales";<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::RadioGroupGamyClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupGamy-&gt;ItemIndex)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <a href="CppComment.htm">//</a>Monogamy<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RadioGroupGamy-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "After a female has selected a male, they will be a couple <b><a href="CppFor.htm">for</a></b> life (that is, one generation)";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppComment.htm">//</a>Polygyny<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RadioGroupGamy-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> "A male can mate with multiple females";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::PageControlSimChange(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ShowMessage("TEST" <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(PageControlSim-&gt;ActivePageIndex));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (PageControlSim-&gt;ActivePageIndex <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Single fraction sim (in <a href="CppTime.htm">time</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PageControlMain-&gt;Pages[0]-&gt;TabVisible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PageControlMain-&gt;Pages[1]-&gt;TabVisible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PageControlMain-&gt;Pages[2]-&gt;TabVisible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PageControlMain-&gt;Pages[3]-&gt;TabVisible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PageControlMain-&gt;Pages[4]-&gt;TabVisible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PageControlMain-&gt;Pages[5]-&gt;TabVisible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Range of fractions sim<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PageControlMain-&gt;Pages[0]-&gt;TabVisible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PageControlMain-&gt;Pages[1]-&gt;TabVisible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PageControlMain-&gt;Pages[2]-&gt;TabVisible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PageControlMain-&gt;Pages[3]-&gt;TabVisible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PageControlMain-&gt;Pages[4]-&gt;TabVisible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PageControlMain-&gt;Pages[5]-&gt;TabVisible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::BitBtn1MouseDown(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMouseButton Button, TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (BitBtn1-&gt;Tag<a href="CppOperatorEqual.htm">==</a>1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BitBtn1-&gt;Glyph-&gt;LoadFromFile("PiedFly<b><a href="CppCatch.htm">catch</a></b>er.bmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BitBtn1-&gt;Tag=0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BitBtn1-&gt;Glyph-&gt;LoadFromFile("PiedFly<b><a href="CppCatch.htm">catch</a></b>erSleeping.bmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BitBtn1-&gt;Tag=1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbRight <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a>&nbsp;&nbsp;X &lt; 10 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &lt; 10)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TForm<a href="CppAbout.htm">About</a>Box2&gt; <a href="CppAbout.htm">about</a>Box(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppAbout.htm">About</a>Box2(<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TFormThreeDotsChasing&gt; threeDotsChasing(<b><a href="CppNew.htm">new</a></b> TFormThreeDotsChasing(<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sumWidth <a href="CppOperatorAssign.htm">=</a> <a href="CppAbout.htm">about</a>Box-&gt;Width <a href="CppOperatorPlus.htm">+</a> threeDotsChasing-&gt;Width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAbout.htm">about</a>Box-&gt;Show();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAbout.htm">about</a>Box-&gt;Left <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;threeDotsChasing-&gt;ShowModal();<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitMainSTL.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitMainSTL.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> UnitMain<a href="CppStl.htm">STL</a>H<br/>
<a href="CppDefine.htm">#define</a> UnitMain<a href="CppStl.htm">STL</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulation.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
Parameters readParametersFromFile(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; fileName);<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitMainSTL.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitMainSTL.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitMain<a href="CppStl.htm">STL</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>This <a href="CppStl.htm">STL</a> compatible <a href="CppVersion.htm">version</a> can be <a href="CppCompile.htm">compile</a>d by<br/>
<a href="CppComment.htm">//</a>#defining USE_<a href="CppStl.htm">STL</a>_ONLY<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> argsused<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b>* <a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argc</a>&lt;2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Please enter name of data file after file name,"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\ne.g. ProjectChrisWiley<a href="CppStl.htm">STL</a> data.txt" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (fileExists(<a href="CppArgc.htm">argv</a>[1])<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Please enter a VALID and EXISTING name of data file after file name." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;Parameters parameters <a href="CppOperatorAssign.htm">=</a> readParametersFromFile(<a href="CppArgc.htm">argv</a>[1]);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String("<a href="CppNDEBUG.htm">NDEBUG</a> defined. No <a href="CppDebug.htm">debugging</a> output.");<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String("<a href="CppNDEBUG.htm">NDEBUG</a> not defined.");<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;Simulation simulation(parameters);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;Simulation&gt; simulation(<b><a href="CppNew.htm">new</a></b> Simulation(<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "UnitRandom.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitMain.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormMain *FormMain;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormMain::TFormMain(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
<br/>
&nbsp;&nbsp;setCursor("CursorPiedFly<b><a href="CppCatch.htm">catch</a></b>er.cur");<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[0][0] <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[1][0] <a href="CppOperatorAssign.htm">=</a> "Female" ;<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[2][0] <a href="CppOperatorAssign.htm">=</a> "Male #1";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[3][0] <a href="CppOperatorAssign.htm">=</a> "Male #2";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[4][0] <a href="CppOperatorAssign.htm">=</a> "Male #3";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[5][0] <a href="CppOperatorAssign.htm">=</a> "Male #4";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[0][1] <a href="CppOperatorAssign.htm">=</a> "SpeciesValue";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[1][1] <a href="CppOperatorAssign.htm">=</a> "-1.0" ;<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[2][1] <a href="CppOperatorAssign.htm">=</a> "-1.0";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[3][1] <a href="CppOperatorAssign.htm">=</a> "-0.5";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[4][1] <a href="CppOperatorAssign.htm">=</a> "0.5";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[5][1] <a href="CppOperatorAssign.htm">=</a> "1.0";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[0][2] <a href="CppOperatorAssign.htm">=</a> "Trait/Preference";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[1][2] <a href="CppOperatorAssign.htm">=</a> "1.0" ;<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[2][2] <a href="CppOperatorAssign.htm">=</a> "-1.0";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[3][2] <a href="CppOperatorAssign.htm">=</a> "-0.5";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[4][2] <a href="CppOperatorAssign.htm">=</a> "0.5";<br/>
&nbsp;&nbsp;StringGridTest-&gt;Cells[5][2] <a href="CppOperatorAssign.htm">=</a> "1.0";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fill in StringGridParameters<br/>
&nbsp;&nbsp;StringGridParameters-&gt;RowCount <a href="CppOperatorAssign.htm">=</a> 23;<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 0] <a href="CppOperatorAssign.htm">=</a> "Parameter";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][ 0] <a href="CppOperatorAssign.htm">=</a> "Value";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 1] <a href="CppOperatorAssign.htm">=</a> "Number of females";&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][ 1] <a href="CppOperatorAssign.htm">=</a> "1000";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 2] <a href="CppOperatorAssign.htm">=</a> "Number of males";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][ 2] <a href="CppOperatorAssign.htm">=</a> "1000";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 3] <a href="CppOperatorAssign.htm">=</a> "Best-of-how-much";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][ 3] <a href="CppOperatorAssign.htm">=</a> "5";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 4] <a href="CppOperatorAssign.htm">=</a> "Assessing error A";&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][ 4] <a href="CppOperatorAssign.htm">=</a> "0.001";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 5] <a href="CppOperatorAssign.htm">=</a> "Assessing error B";&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][ 5] <a href="CppOperatorAssign.htm">=</a> "0.001";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 6] <a href="CppOperatorAssign.htm">=</a> "Mean trait A";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][ 6] <a href="CppOperatorAssign.htm">=</a> "0.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 7] <a href="CppOperatorAssign.htm">=</a> "StdDev trait A";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][ 7] <a href="CppOperatorAssign.htm">=</a> "0.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 8] <a href="CppOperatorAssign.htm">=</a> "Mean trait B";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][ 8] <a href="CppOperatorAssign.htm">=</a> "0.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][ 9] <a href="CppOperatorAssign.htm">=</a> "StdDev trait B";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][ 9] <a href="CppOperatorAssign.htm">=</a> "0.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][10] <a href="CppOperatorAssign.htm">=</a> "Mean preference A";&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][10] <a href="CppOperatorAssign.htm">=</a> "0.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][11] <a href="CppOperatorAssign.htm">=</a> "StdDev preference A";&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][11] <a href="CppOperatorAssign.htm">=</a> "0.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][12] <a href="CppOperatorAssign.htm">=</a> "Mean preference B";&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][12] <a href="CppOperatorAssign.htm">=</a> "0.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][13] <a href="CppOperatorAssign.htm">=</a> "StdDev preference B";&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][13] <a href="CppOperatorAssign.htm">=</a> "0.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][14] <a href="CppOperatorAssign.htm">=</a> "Number of simulations"; StringGridParameters-&gt;Cells[1][14] <a href="CppOperatorAssign.htm">=</a> "1";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][15] <a href="CppOperatorAssign.htm">=</a> "Number of generations"; StringGridParameters-&gt;Cells[1][15] <a href="CppOperatorAssign.htm">=</a> "1";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][16] <a href="CppOperatorAssign.htm">=</a> "Number of offspring";&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][16] <a href="CppOperatorAssign.htm">=</a> "6";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][17] <a href="CppOperatorAssign.htm">=</a> "SurviveSpeciesAlpha";&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][17] <a href="CppOperatorAssign.htm">=</a> "1.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][18] <a href="CppOperatorAssign.htm">=</a> "SurviveSpeciesBeta";&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][18] <a href="CppOperatorAssign.htm">=</a> "10.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][19] <a href="CppOperatorAssign.htm">=</a> "SigmaSquared";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][19] <a href="CppOperatorAssign.htm">=</a> "1.0";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][20] <a href="CppOperatorAssign.htm">=</a> "Cost trait";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringGridParameters-&gt;Cells[1][20] <a href="CppOperatorAssign.htm">=</a> "0.00";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][21] <a href="CppOperatorAssign.htm">=</a> "Cost preference";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][21] <a href="CppOperatorAssign.htm">=</a> "0.00";<br/>
&nbsp;&nbsp;StringGridParameters-&gt;Cells[0][22] <a href="CppOperatorAssign.htm">=</a> "Mutation rate";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringGridParameters-&gt;Cells[1][22] <a href="CppOperatorAssign.htm">=</a> "0.00";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::ButtonRunClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the input in own <a href="CppScope.htm">scope</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkInput()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text <a href="CppOperatorAssign.htm">=</a> "Running simulation";<br/>
&nbsp;&nbsp;setCursor("CursorPiedFly<b><a href="CppCatch.htm">catch</a></b>erSleeping.cur");<br/>
&nbsp;&nbsp;Refresh(); <a href="CppComment.htm">//</a>To draw <b><a href="CppThis.htm">this</a></b> text to the StatusBar<br/>
<br/>
&nbsp;&nbsp;emptyChart(ChartBias);<br/>
&nbsp;&nbsp;emptyChart(ChartMate<a href="CppTime.htm">Time</a>);<br/>
&nbsp;&nbsp;emptyChart(ChartMateFraction);<br/>
&nbsp;&nbsp;emptyChart(ChartPopSize);<br/>
&nbsp;&nbsp;emptyChart(ChartTraitPreference);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read parameters<br/>
&nbsp;&nbsp;Parameters parameters <a href="CppOperatorAssign.htm">=</a> readStringGrid();<br/>
&nbsp;&nbsp;parameters.matingSystem&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> (RadioGroupGamy-&gt;ItemIndex&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 0 ? monogamy : polygyny);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupFemaleSampling-&gt;ItemIndex)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: parameters.femaleSampling <a href="CppOperatorAssign.htm">=</a> bestOfNconspicific;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: parameters.femaleSampling <a href="CppOperatorAssign.htm">=</a> bestOfNextremeTrait;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: parameters.femaleSampling <a href="CppOperatorAssign.htm">=</a> bestOfNclosestTrait;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: parameters.femaleSampling <a href="CppOperatorAssign.htm">=</a> fixedThresholdConspicific;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: parameters.femaleSampling <a href="CppOperatorAssign.htm">=</a> fixedThresholdTraitSign;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: parameters.femaleSampling <a href="CppOperatorAssign.htm">=</a> fixedThresholdProbabilistic; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Unknown index of RadioGroupTestSampling"); <a href="CppExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;parameters.densityDependentSelection <a href="CppOperatorAssign.htm">=</a> (RadioGroupDensityDependentSelection-&gt;ItemIndex <a href="CppOperatorEqual.htm">==</a> 0 ? afterMating : beforeMating );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show parameters<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;Clear();<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Number of males: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(parameters.nMales));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Number of females: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(parameters.nFemales));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Best of how much: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(parameters.bestOfHowMuch));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Assessing error A: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.assessingErrorA));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Assessing error B: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.assessingErrorB));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Mean trait A: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.meanTraitA));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("StdDev trait A: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.stdDevTraitA));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Mean trait males B: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.meanTraitB));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("StdDev trait males B: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.stdDevTraitB));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Mean preference A: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.meanPreferenceA));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("StdDev preference A: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.stdDevPreferenceA));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Mean preference males B: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.meanPreferenceB));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("StdDev preference males B: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.stdDevPreferenceB));<br/>
<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Number of simulation: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(parameters.nSimulations));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Number of generations: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(parameters.nGenerations));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Number of offspring per couple: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(parameters.nOffspring));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("SurviveSpeciesAlpha: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.surviveSpeciesAlpha));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("SurviveSpeciesBeta: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.surviveSpeciesBeta));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("SigmaSquared: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.sigmaSquared));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Cost trait: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.costTrait));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Cost preference: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.costPreference));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Mutation rate: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(parameters.mutationRate));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>(parameters.matingSystem&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> monogamy ? "Mating system: monogamy" : "Mating system: polygyny" );<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(parameters.femaleSampling)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> bestOfNconspicific:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Best-Of-N conspicific");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> bestOfNextremeTrait:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Best-Of-N extreme trait");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> bestOfNclosestTrait:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Best-Of-N closest trait");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> fixedThresholdConspicific:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Fixed threshold conspicific");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> fixedThresholdTraitSign:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Fixed threshold trait sign");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> fixedThresholdProbabilistic:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>("Female sampling: Fixed threshold probabilistic");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines-&gt;<a href="CppAdd.htm">Add</a>(parameters.densityDependentSelection<a href="CppOperatorEqual.htm">==</a>beforeMating ? "Density dependent selection: before mating" : "Density dependent selection: after mating");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start simulation<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> deltaFraction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (PageControlSim-&gt;ActivePageIndex <a href="CppOperatorEqual.htm">==</a> 1 ? EditFractionStep-&gt;Text.<a href="CppToDouble.htm">ToDouble</a>() : 1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fractionFrom<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (PageControlSim-&gt;ActivePageIndex <a href="CppOperatorEqual.htm">==</a> 1 ? EditFractionFrom-&gt;Text.<a href="CppToDouble.htm">ToDouble</a>() : EditFraction-&gt;Text.<a href="CppToDouble.htm">ToDouble</a>());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fractionTo<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (PageControlSim-&gt;ActivePageIndex <a href="CppOperatorEqual.htm">==</a> 1 ? EditFractionTo-&gt;Text.<a href="CppToDouble.htm">ToDouble</a>() : 1.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> lastErrorMessage;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> fraction <a href="CppOperatorAssign.htm">=</a> fractionFrom; fraction &lt; fractionTo; fraction<a href="CppOperatorPlusAssign.htm">+=</a>deltaFraction)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDouble.htm">double</a></b> fraction <a href="CppOperatorAssign.htm">=</a> 0.9;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ProgressBarSim-&gt;Position <a href="CppOperatorAssign.htm">=</a> fraction * ProgressBarSim-&gt;Max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ProgressBarSim-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters.fractionMaleA&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> fraction;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters.fractionFemaleA <a href="CppOperatorAssign.htm">=</a> fraction;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>parameters.nGenerations <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimulations <a href="CppOperatorAssign.htm">=</a> parameters.nSimulations;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppTime.htm">Time</a>Series&gt; all<a href="CppTime.htm">Time</a>Series; <a href="CppComment.htm">//</a>Size 0, use push_back<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> simulation <a href="CppOperatorAssign.htm">=</a> 0; simulation &lt; nSimulations; <a href="CppOperatorIncrement.htm">++</a>simulation)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Stick parameter in simulation and run it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;Simulation&gt; simulation(<b><a href="CppNew.htm">new</a></b> Simulation(parameters));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>simulation-&gt;showPopulation(StringGrid<a href="CppDebug.htm">Debug</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simulation-&gt;execute();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the results from the sim<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>Series <b><a href="CppThis.htm">this</a></b>Sim<a href="CppTime.htm">Time</a>Series <a href="CppOperatorAssign.htm">=</a> simulation-&gt;get<a href="CppTime.htm">Time</a>Series();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTime.htm">time</a>Series.push_back(<b><a href="CppThis.htm">this</a></b>Sim<a href="CppTime.htm">Time</a>Series);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all<a href="CppTime.htm">Time</a>Series.push_back(simulation-&gt;get<a href="CppTime.htm">Time</a>Series());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastErrorMessage <a href="CppOperatorAssign.htm">=</a> simulation-&gt;mError;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Plot the average of the results<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>&nbsp;&nbsp;<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>Average <a href="CppOperatorAssign.htm">=</a> getAverageEnd<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>(all<a href="CppTime.htm">Time</a>Series);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>Series <a href="CppTime.htm">time</a>SeriesAverage <a href="CppOperatorAssign.htm">=</a> getAverage<a href="CppTime.htm">Time</a>Series(all<a href="CppTime.htm">Time</a>Series);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;plot<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>(<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>Average,fraction);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;plot<a href="CppTime.htm">Time</a>Series(<a href="CppTime.htm">time</a>SeriesAverage);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;setCursor("CursorPiedFly<b><a href="CppCatch.htm">catch</a></b>er.cur");<br/>
&nbsp;&nbsp;StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text <a href="CppOperatorAssign.htm">=</a> to<a href="CppAnsiString.htm">AnsiString</a>(lastErrorMessage);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (BitBtn1-&gt;Tag<a href="CppOperatorEqual.htm">==</a>0) PlaySound("PiedFly<b><a href="CppCatch.htm">catch</a></b>er.wav",0,SND_<a href="CppCfile.htm">FILE</a>NAME | SND_ASYNC);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppComment.htm">//</a>Checks the input, <a href="CppReturn.htm">returns</a> <b><a href="CppTrue.htm">true</a></b> <b><a href="CppIf.htm">if</a></b> all valid<br/>
<b><a href="CppBool.htm">bool</a></b> TFormMain::checkInput()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> checkInt; <b><a href="CppBool.htm">bool</a></b> check; <b><a href="CppDouble.htm">double</a></b> check<a href="CppDouble.htm">Double</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>nFemales<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> Try<a href="CppStrToInt.htm">StrToInt</a>(StringGridParameters-&gt;Cells[1][1],checkInt);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'nFemales' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkInt <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'nFemales' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>nMales<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> Try<a href="CppStrToInt.htm">StrToInt</a>(StringGridParameters-&gt;Cells[1][2],checkInt);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'nMales' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkInt <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'nMales' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>bestOfHowMuch<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (RadioGroupFemaleSampling-&gt;ItemIndex <a href="CppOperatorEqual.htm">==</a> 0) <a href="CppComment.htm">//</a>If female uses bestOfHowMuch<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> Try<a href="CppStrToInt.htm">StrToInt</a>(StringGridParameters-&gt;Cells[1][3],checkInt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'bestOfHowMuch' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkInt <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'bestOfHowMuch' should be bigger then 0"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>assessingError<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][4],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'assessingError' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check<a href="CppDouble.htm">Double</a> &lt; 0.0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'assessingError' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check<a href="CppDouble.htm">Double</a> &gt; 1.0) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'assessingError' should be positive"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mean trait males A<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][5],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'Mean trait males A' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>StdDev trait males A<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][6],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'StdDev trait males A' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mean trait males B<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][7],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'Mean trait males B' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>StdDev trait males B<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> TryStrToFloat(StringGridParameters-&gt;Cells[1][8],check<a href="CppDouble.htm">Double</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) { StatusBarMain-&gt;Panels-&gt;Items[0]-&gt;Text="Parameter 'StdDev trait males B' is not a valid input"; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMain::plot<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>&amp; <a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <b><a href="CppChar.htm">char</a></b>tX)<br/>
{<br/>
&nbsp;&nbsp;ChartBias-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.mateTally.calculateBiasA());<br/>
&nbsp;&nbsp;ChartBias-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.mateTally.calculateBiasB());<br/>
&nbsp;&nbsp;ChartBias-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.mateTally.calculateFractionMixedPairs());<br/>
<br/>
&nbsp;&nbsp;ChartMateFraction-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.mateTally.getNmateAA());<br/>
&nbsp;&nbsp;ChartMateFraction-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.mateTally.getNmateAB());<br/>
&nbsp;&nbsp;ChartMateFraction-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.mateTally.getNmateBA());<br/>
&nbsp;&nbsp;ChartMateFraction-&gt;Series[3]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.mateTally.getNmateBB());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.mateTally.getNmateAA());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.mateTally.getNmateAB());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.mateTally.getNmateBA());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[3]-&gt;<a href="CppAdd.htm">Add</a>XY(<b><a href="CppChar.htm">char</a></b>tX,<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.mateTally.getNmateBB());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMain::plot<a href="CppTime.htm">Time</a>Series(<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>Series&amp; <a href="CppTime.htm">time</a>Series)<br/>
{<br/>
&nbsp;&nbsp;emptyChart(ChartPopSize);<br/>
&nbsp;&nbsp;emptyChart(ChartMate<a href="CppTime.htm">Time</a>);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nGenerations <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> i=0; i&lt;nGenerations; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> iD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.60,<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterDensityDependentSelection.getNfemalesA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[3]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.60,<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterDensityDependentSelection.getNfemalesB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[4]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.60,<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterDensityDependentSelection.getNmalesA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[7]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.60,<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterDensityDependentSelection.getNmalesB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartPopSize-&gt;Series[8]-&gt;<a href="CppAdd.htm">Add</a>XY(iD+0.60,<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].speciesTallyAfterDensityDependentSelection.getNall());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].mateTally.getNmateAA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].mateTally.getNmateAB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].mateTally.getNmateBA());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[3]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].mateTally.getNmateBB());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartMate<a href="CppTime.htm">Time</a>-&gt;Series[4]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].mateTally.getNmateAll());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nTraits <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].traits.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> j=0; j&lt;nTraits; <a href="CppOperatorIncrement.htm">++</a>j) ChartTraitPreference-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].traits[j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nPreferences <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].preferences.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> j=0; j&lt;nPreferences; <a href="CppOperatorIncrement.htm">++</a>j) ChartTraitPreference-&gt;Series[1]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].preferences[j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSpeciesValues <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].descents.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> j=0; j&lt;nSpeciesValues; <a href="CppOperatorIncrement.htm">++</a>j) ChartTraitPreference-&gt;Series[2]-&gt;<a href="CppAdd.htm">Add</a>XY(iD,<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i].descents[j]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Parameters TFormMain::readStringGrid() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;Parameters parameters;<br/>
&nbsp;&nbsp;parameters.nFemales&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 1].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;parameters.nMales&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 2].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;parameters.bestOfHowMuch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 3].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;parameters.assessingErrorA&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 4].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.assessingErrorB&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 5].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.meanTraitA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 6].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.stdDevTraitA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 7].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.meanTraitB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 8].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.stdDevTraitB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][ 9].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.meanPreferenceA&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][10].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.stdDevPreferenceA&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][11].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.meanPreferenceB&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][12].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.stdDevPreferenceB&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][13].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.nSimulations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][14].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;parameters.nGenerations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][15].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;parameters.nOffspring&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][16].<a href="CppToInt.htm">ToInt</a>();<br/>
&nbsp;&nbsp;parameters.surviveSpeciesAlpha <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][17].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.surviveSpeciesBeta&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][18].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.sigmaSquared&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][19].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.costTrait&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][20].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.costPreference&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][21].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;parameters.mutationRate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][22].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> parameters;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> emptyChart(TChart* <b><a href="CppChar.htm">char</a></b>t)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSeries <a href="CppOperatorAssign.htm">=</a> <b><a href="CppChar.htm">char</a></b>t-&gt;SeriesCount();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSeries; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>t-&gt;Series[i]-&gt;Clear();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::ButtonTestClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>FemaleSamplingBase&gt; femaleSampling;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(RadioGroupTestSampling-&gt;ItemIndex)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: femaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNconspicific); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: femaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNextremeTrait); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: femaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNclosestTrait); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: femaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdConspicific); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: femaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdTraitSign); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: femaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdProbabilistic); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Unknown index of RadioGroupTestSampling"); <a href="CppExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;Parameters parameters <a href="CppOperatorAssign.htm">=</a> readStringGrid();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> femaleSpeciesValue <a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[1][1].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleSpeciesValue1&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[2][1].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleSpeciesValue2&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[3][1].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleSpeciesValue3&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[4][1].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleSpeciesValue4&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[5][1].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> femalePreference&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[1][2].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleTrait1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[2][2].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleTrait2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[3][2].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleTrait3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[4][2].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maleTrait4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> StringGridTest-&gt;Cells[5][2].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt; females <a href="CppOperatorAssign.htm">=</a> Bird::createTestFemales(parameters,femaleSpeciesValue, femalePreference);<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt; males <a href="CppOperatorAssign.htm">=</a> Bird::createTestMales(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleSpeciesValue1, maleTrait1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleSpeciesValue2, maleTrait2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleSpeciesValue3, maleTrait3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maleSpeciesValue4, maleTrait4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt; histogramWinner(4);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;4; <a href="CppOperatorIncrement.htm">++</a>i) histogramWinner[i]=0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;1000; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> winnerIndex <a href="CppOperatorAssign.htm">=</a> femaleSampling-&gt;getWinnerIndex(males,females[0],parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>(histogramWinner[winnerIndex]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;emptyChart(ChartTest);<br/>
&nbsp;&nbsp;ChartTest-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(0.0,histogramWinner[0]);<br/>
&nbsp;&nbsp;ChartTest-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(1.0,histogramWinner[1]);<br/>
&nbsp;&nbsp;ChartTest-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(2.0,histogramWinner[2]);<br/>
&nbsp;&nbsp;ChartTest-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(3.0,histogramWinner[3]);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::ButtonTestSurvivalSpeciesClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Series[0]-&gt;Clear();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha <a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][17].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> beta&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> StringGridParameters-&gt;Cells[1][18].<a href="CppToDouble.htm">ToDouble</a>();<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;Clear();<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorMinus.htm">-</a> alpha * <a href="CppExp.htm">std::exp</a>(-beta*x*x)");<br/>
&nbsp;&nbsp;ChartTestProbabilities-&gt;Title-&gt;Text-&gt;<a href="CppAdd.htm">Add</a>("Alpha: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(alpha) <a href="CppOperatorPlus.htm">+</a> ", Beta: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(beta));<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0; x&lt;1.0; x<a href="CppOperatorPlusAssign.htm">+=</a>0.01)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorMinus.htm">-</a> alpha * <a href="CppExp.htm">std::exp</a>(-beta*x*x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ChartTestProbabilities-&gt;Series[0]-&gt;<a href="CppAdd.htm">Add</a>XY(x,y);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::FormMouseMove(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y)<br/>
{<br/>
&nbsp;&nbsp;TCursor myCursor <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TCursor&gt;(22);<br/>
&nbsp;&nbsp;Screen-&gt;Cursors[22] <a href="CppOperatorAssign.htm">=</a> LoadCursorFromFile("CursorPiedFly<b><a href="CppCatch.htm">catch</a></b>er.cur");<br/>
&nbsp;&nbsp;Cursor <a href="CppOperatorAssign.htm">=</a> myCursor;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::BitBtn1Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (BitBtn1-&gt;Tag<a href="CppOperatorEqual.htm">==</a>1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BitBtn1-&gt;Glyph-&gt;LoadFromFile("PiedFly<b><a href="CppCatch.htm">catch</a></b>er.bmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BitBtn1-&gt;Tag=0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BitBtn1-&gt;Glyph-&gt;LoadFromFile("PiedFly<b><a href="CppCatch.htm">catch</a></b>erSleeping.bmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BitBtn1-&gt;Tag=1;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppString.htm">std::string</a> toString(<b><a href="CppConst.htm">const</a></b> String&amp; ansi)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> * myChar <a href="CppOperatorAssign.htm">=</a> ansi.c_str();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> myString <a href="CppOperatorAssign.htm">=</a> myChar;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> myString;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
String to<a href="CppAnsiString.htm">AnsiString</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; myString)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> * myChar <a href="CppOperatorAssign.htm">=</a> myString.c_str();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String myAnsi <a href="CppOperatorAssign.htm">=</a> myChar;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> myAnsi;<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitMatingSystem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitMatingSystem.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitMatingSystemH<br/>
<a href="CppDefine.htm">#define</a> UnitMatingSystemH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFemaleSampling.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitTallies.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitRandom.h"<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>MatingSystemBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>MatingSystemBase() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppString.htm">std::string</a> getMatingSystem() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> Offspring mate(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>FemaleSamplingBase&gt;&amp; femaleSampling,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MateTally&amp; tally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>MatingSystemMonogamyFixedNumberOffspring : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>MatingSystemBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>MatingSystemMonogamyFixedNumberOffspring() {}<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> getMatingSystem() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "MonogamyFixedNumberOffspring"; }<br/>
&nbsp;&nbsp;Offspring mate(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>FemaleSamplingBase&gt;&amp; femaleSampling,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MateTally&amp; tally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>MatingSystemPolygynyFixedNumberOffspring : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>MatingSystemBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>MatingSystemPolygynyFixedNumberOffspring() {}<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> getMatingSystem() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "PolygynyFixedNumberOffspring"; }<br/>
&nbsp;&nbsp;Offspring mate(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>FemaleSamplingBase&gt;&amp; femaleSampling,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MateTally&amp; tally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>MatingSystemMonogamyFreeNumberOffspring : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>MatingSystemBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>MatingSystemMonogamyFreeNumberOffspring() {}<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> getMatingSystem() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "MonogamyFreeNumberOffspring"; }<br/>
&nbsp;&nbsp;Offspring mate(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>FemaleSamplingBase&gt;&amp; femaleSampling,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MateTally&amp; tally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>MatingSystemPolygynyFreeNumberOffspring : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a>MatingSystemBase<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>MatingSystemPolygynyFreeNumberOffspring() {}<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> getMatingSystem() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "PolygynyFreeNumberOffspring"; }<br/>
&nbsp;&nbsp;Offspring mate(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>FemaleSamplingBase&gt;&amp; femaleSampling,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MateTally&amp; tally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitMatingSystem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitMatingSystem.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitMatingSystem.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Offspring <a href="CppState.htm">State</a>MatingSystemMonogamyFixedNumberOffspring::mate(<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>FemaleSamplingBase&gt;&amp; femaleSampling,<br/>
&nbsp;&nbsp;MateTally&amp; mateTally<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;MateTally&gt; <a href="CppDebug.htm">debug</a>MateTally(<b><a href="CppNew.htm">new</a></b> MateTally);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mateTally.isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the fraction of species A and B<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesTally speciesTally(males,females);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesAwanted&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(parameters.nMales * speciesTally.getNallMalesA()) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(speciesTally.getNallMales());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesBwanted&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(parameters.nMales * speciesTally.getNallMalesB()) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(speciesTally.getNallMales());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesAwanted <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(parameters.nFemales * speciesTally.getNfemalesA()) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(speciesTally.getNallFemales());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesBwanted <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(parameters.nFemales * speciesTally.getNfemalesB()) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(speciesTally.getNallFemales());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesAwanted&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> parameters.getNmalesAwanted();<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesBwanted&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> parameters.getNmalesBwanted();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nMalesAwanted <a href="CppOperatorPlus.htm">+</a> nMalesBwanted <a href="CppOperatorEqual.htm">==</a> parameters.nMales);<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesAwanted <a href="CppOperatorAssign.htm">=</a> parameters.getNfemalesAwanted();<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesBwanted <a href="CppOperatorAssign.htm">=</a> parameters.getNfemalesBwanted();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nFemalesAwanted <a href="CppOperatorPlus.htm">+</a> nFemalesBwanted <a href="CppOperatorEqual.htm">==</a> parameters.nFemales);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSpeciesAwanted <a href="CppOperatorAssign.htm">=</a> nMalesAwanted <a href="CppOperatorPlus.htm">+</a> nFemalesAwanted;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSpeciesBwanted <a href="CppOperatorAssign.htm">=</a> nMalesBwanted <a href="CppOperatorPlus.htm">+</a> nFemalesBwanted;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation <a href="CppOperatorAssign.htm">=</a> parameters.mutationRate;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(females.size()&gt;0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the couples<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt; Couple &gt; couples;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> female <a href="CppOperatorAssign.htm">=</a> 0; female &lt; females.size() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> males.size() &gt; 0; <a href="CppComment.htm">/*</a>nothing<a href="CppComment.htm">*/</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the female pick her favorite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> winnerIndex <a href="CppOperatorAssign.htm">=</a> femaleSampling-&gt;getWinnerIndex(males, females[female], parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(winnerIndex <a href="CppOperatorLessEqual.htm">&lt;=</a> males.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("The index of the mate in vector 'males' is: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(winnerIndex));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (winnerIndex <a href="CppOperatorEqual.htm">==</a> males.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The female did not mate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters.femaleSampling<a href="CppOperatorNotEqual.htm">!=</a>bestOfNconspicific <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> parameters.femaleSampling<a href="CppOperatorNotEqual.htm">!=</a>bestOfNextremeTrait <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> parameters.femaleSampling<a href="CppOperatorNotEqual.htm">!=</a>bestOfNclosestTrait);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>female;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Form the <a href="CppPair.htm">std::pair</a> from the lovers and store them in the <a href="CppVector.htm">std::vector</a> couples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Couple couple(females[female],males[winnerIndex]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;couples.push_back(couple);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove the couple from the desperate others<br/>
&nbsp;&nbsp;&nbsp;&nbsp;males.erase(&amp;males[winnerIndex]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;females.erase(&amp;females[female]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the couples produce offspring<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Bird&gt; speciesA; <a href="CppComment.htm">//</a>speciesA.reserve(nSpeciesAwanted);<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Bird&gt; speciesB; <a href="CppComment.htm">//</a>speciesB.reserve(nSpeciesBwanted);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nCouples <a href="CppOperatorAssign.htm">=</a> couples.size();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> maxTries <a href="CppOperatorAssign.htm">=</a> (nSpeciesAwanted <a href="CppOperatorPlus.htm">+</a> nSpeciesBwanted) * (nSpeciesAwanted <a href="CppOperatorPlus.htm">+</a> nSpeciesBwanted);<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> myTry <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(speciesA.size()<a href="CppOperatorNotEqual.htm">!=</a>nSpeciesAwanted <a href="CppOperatorLogicalOr.htm">||</a> speciesB.size()<a href="CppOperatorNotEqual.htm">!=</a>nSpeciesBwanted)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>myTry;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myTry<a href="CppOperatorEqual.htm">==</a>maxTries) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> couple <a href="CppOperatorAssign.htm">=</a> 0; couple &lt; nCouples; <a href="CppOperatorIncrement.htm">++</a>couple)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find out whether he is a conspicific and put it in the results<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bird birdy(couples[couple].female,couples[couple].male,mutation);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (birdy.species <a href="CppOperatorEqual.htm">==</a> piedFly<b><a href="CppCatch.htm">catch</a></b>er)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Birdy is of speciesA<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDebug.htm">debug</a>MateTally-&gt;tally(couples[couple].female,couples[couple].male);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (speciesA.size() &lt; nSpeciesAwanted)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>When we can use offspring of speciesA<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speciesA.push_back(birdy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mateTally.tally(couples[couple].female,couples[couple].male);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Birdy is of speciesB<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDebug.htm">debug</a>MateTally-&gt;tally(couples[couple].female,couples[couple].male); <a href="CppComment.htm">//</a>DEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (speciesB.size() &lt; nSpeciesBwanted)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>When we can use offspring of speciesA<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speciesB.push_back(birdy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mateTally.tally(couples[couple].female,couples[couple].male);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;Dot("Broke <b><a href="CppWhile.htm">while</a></b> loop in reproduction");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Now the vectors of speciesA and speciesB are created,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>they have to be changed to vectors of males and females<br/>
&nbsp;&nbsp;Offspring offspring;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myTry<a href="CppOperatorEqual.htm">==</a>maxTries)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create offspring of a failed simulation.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Easy! Just give the empty Offspring back<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> offspring;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(speciesA.size()<a href="CppOperatorEqual.htm">==</a>nSpeciesAwanted);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(speciesB.size()<a href="CppOperatorEqual.htm">==</a>nSpeciesBwanted);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Females<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nFemalesAwanted; <a href="CppOperatorIncrement.htm">++</a>i) offspring.females.push_back(speciesA[i]);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nFemalesBwanted; <a href="CppOperatorIncrement.htm">++</a>i) offspring.females.push_back(speciesB[i]);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Males<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=nFemalesAwanted; i&lt;nSpeciesAwanted; <a href="CppOperatorIncrement.htm">++</a>i) offspring.males.push_back(speciesA[i]);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=nFemalesBwanted; i&lt;nSpeciesBwanted; <a href="CppOperatorIncrement.htm">++</a>i) offspring.males.push_back(speciesB[i]);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(offspring.females.size()<a href="CppOperatorEqual.htm">==</a>nFemalesAwanted+nFemalesBwanted);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(offspring.males.size()<a href="CppOperatorEqual.htm">==</a>nMalesAwanted+nMalesBwanted);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("mateTally: "+mateTally.get());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("<a href="CppDebug.htm">Debug</a>Tally: "+<a href="CppDebug.htm">debug</a>MateTally-&gt;get());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> offspring;<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Offspring <a href="CppState.htm">State</a>MatingSystemPolygynyFixedNumberOffspring::mate(<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>FemaleSamplingBase&gt;&amp; femaleSampling,<br/>
&nbsp;&nbsp;MateTally&amp; mateTally<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mateTally.isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the fraction of species A and B<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesTally speciesTally(males,females);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesAwanted&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(parameters.nMales * speciesTally.getNallMalesA()) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(speciesTally.getNallMales());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesBwanted&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(parameters.nMales * speciesTally.getNallMalesB()) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(speciesTally.getNallMales());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesAwanted <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(parameters.nFemales * speciesTally.getNfemalesA()) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(speciesTally.getNallFemales());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesBwanted <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(parameters.nFemales * speciesTally.getNfemalesB()) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(speciesTally.getNallFemales());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesAwanted&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> parameters.getNmalesAwanted();<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesBwanted&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> parameters.getNmalesBwanted();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nMalesAwanted <a href="CppOperatorPlus.htm">+</a> nMalesBwanted <a href="CppOperatorEqual.htm">==</a> parameters.nMales);<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesAwanted <a href="CppOperatorAssign.htm">=</a> parameters.getNfemalesAwanted();<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesBwanted <a href="CppOperatorAssign.htm">=</a> parameters.getNfemalesBwanted();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nFemalesAwanted <a href="CppOperatorPlus.htm">+</a> nFemalesBwanted <a href="CppOperatorEqual.htm">==</a> parameters.nFemales);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSpeciesAwanted <a href="CppOperatorAssign.htm">=</a> nMalesAwanted <a href="CppOperatorPlus.htm">+</a> nFemalesAwanted;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSpeciesBwanted <a href="CppOperatorAssign.htm">=</a> nMalesBwanted <a href="CppOperatorPlus.htm">+</a> nFemalesBwanted;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation <a href="CppOperatorAssign.htm">=</a> parameters.mutationRate;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemales <a href="CppOperatorAssign.htm">=</a> females.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nFemales&gt;0);<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Bird&gt; speciesA;<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Bird&gt; speciesB;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> maxTries <a href="CppOperatorAssign.htm">=</a> (nSpeciesAwanted <a href="CppOperatorPlus.htm">+</a> nSpeciesBwanted) * (nSpeciesAwanted <a href="CppOperatorPlus.htm">+</a> nSpeciesBwanted);<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> myTry <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(speciesA.size()<a href="CppOperatorNotEqual.htm">!=</a>nSpeciesAwanted <a href="CppOperatorLogicalOr.htm">||</a> speciesB.size()<a href="CppOperatorNotEqual.htm">!=</a>nSpeciesBwanted)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>myTry;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myTry<a href="CppOperatorEqual.htm">==</a>maxTries) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> female <a href="CppOperatorAssign.htm">=</a> 0; female &lt; nFemales; <a href="CppOperatorIncrement.htm">++</a>female)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the female pick her favorite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> winnerIndex <a href="CppOperatorAssign.htm">=</a> femaleSampling-&gt;getWinnerIndex(males, females[female], parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(winnerIndex <a href="CppOperatorLessEqual.htm">&lt;=</a> males.size());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("The index of the mate in vector 'males' is: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(winnerIndex));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (winnerIndex <a href="CppOperatorEqual.htm">==</a> males.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The female did not mate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters.femaleSampling<a href="CppOperatorNotEqual.htm">!=</a>bestOfNconspicific <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> parameters.femaleSampling<a href="CppOperatorNotEqual.htm">!=</a>bestOfNextremeTrait <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> parameters.femaleSampling<a href="CppOperatorNotEqual.htm">!=</a>bestOfNclosestTrait);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find out whether he is a conspicific and put it in the results<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bird birdy(females[female],males[winnerIndex],mutation);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (birdy.species <a href="CppOperatorEqual.htm">==</a> piedFly<b><a href="CppCatch.htm">catch</a></b>er)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Birdy is of speciesA<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (speciesA.size() &lt; nSpeciesAwanted)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>When we can use offspring of speciesA<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speciesA.push_back(birdy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mateTally.tally(females[female],males[winnerIndex]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Birdy is of speciesB<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (speciesB.size() &lt; nSpeciesBwanted)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>When we can use offspring of speciesA<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speciesB.push_back(birdy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mateTally.tally(females[female],males[winnerIndex]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;Dot("Broke <b><a href="CppWhile.htm">while</a></b> loop in reproduction above line ");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Now the vectors of speciesA and speciesB are created,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>they have to be changed to vectors of males and females<br/>
<br/>
&nbsp;&nbsp;Offspring offspring;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myTry<a href="CppOperatorEqual.htm">==</a>maxTries)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create offspring of a failed simulation.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Easy! Just give the empty Offspring back<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> offspring;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(speciesA.size()<a href="CppOperatorEqual.htm">==</a>nSpeciesAwanted);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(speciesB.size()<a href="CppOperatorEqual.htm">==</a>nSpeciesBwanted);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Females<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nFemalesAwanted; <a href="CppOperatorIncrement.htm">++</a>i) offspring.females.push_back(speciesA[i]);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nFemalesBwanted; <a href="CppOperatorIncrement.htm">++</a>i) offspring.females.push_back(speciesB[i]);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Males<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=nFemalesAwanted; i&lt;nSpeciesAwanted; <a href="CppOperatorIncrement.htm">++</a>i) offspring.males.push_back(speciesA[i]);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=nFemalesBwanted; i&lt;nSpeciesBwanted; <a href="CppOperatorIncrement.htm">++</a>i) offspring.males.push_back(speciesB[i]);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(offspring.females.size()<a href="CppOperatorEqual.htm">==</a>nFemalesAwanted+nFemalesBwanted);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(offspring.males.size()<a href="CppOperatorEqual.htm">==</a>nMalesAwanted+nMalesBwanted);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> offspring;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Offspring <a href="CppState.htm">State</a>MatingSystemMonogamyFreeNumberOffspring::mate(<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>FemaleSamplingBase&gt;&amp; femaleSampling,<br/>
&nbsp;&nbsp;MateTally&amp; mateTally<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;MateTally&gt; <a href="CppDebug.htm">debug</a>MateTally(<b><a href="CppNew.htm">new</a></b> MateTally);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mateTally.isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation <a href="CppOperatorAssign.htm">=</a> parameters.mutationRate;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(females.size()&gt;0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the couples<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt; Couple &gt; couples;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> female <a href="CppOperatorAssign.htm">=</a> 0; female &lt; females.size() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> males.size() &gt; 0; )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the female pick her favorite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> winnerIndex <a href="CppOperatorAssign.htm">=</a> femaleSampling-&gt;getWinnerIndex(males, females[female], parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(winnerIndex <a href="CppOperatorLessEqual.htm">&lt;=</a> males.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("The index of the mate in vector 'males' is: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(winnerIndex));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (winnerIndex <a href="CppOperatorEqual.htm">==</a> males.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The female did not mate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters.femaleSampling<a href="CppOperatorNotEqual.htm">!=</a>bestOfNconspicific <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> parameters.femaleSampling<a href="CppOperatorNotEqual.htm">!=</a>bestOfNextremeTrait <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> parameters.femaleSampling<a href="CppOperatorNotEqual.htm">!=</a>bestOfNclosestTrait);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>female;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Form the <a href="CppPair.htm">std::pair</a> from the lovers and store them in the <a href="CppVector.htm">std::vector</a> couples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Couple couple(females[female],males[winnerIndex]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;couples.push_back(couple);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove the couple from the desperate others<br/>
&nbsp;&nbsp;&nbsp;&nbsp;males.erase(&amp;males[winnerIndex]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;females.erase(&amp;females[female]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the couples produce offspring<br/>
&nbsp;&nbsp;Offspring offspring;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nCouples <a href="CppOperatorAssign.htm">=</a> couples.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> couple <a href="CppOperatorAssign.htm">=</a> 0; couple &lt; nCouples; <a href="CppOperatorIncrement.htm">++</a>couple)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nOffspring <a href="CppOperatorAssign.htm">=</a> parameters.nOffspring;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> i=0; i&lt;nOffspring; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find out whether he is a conspicific and put it in the results<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bird birdy(couples[couple].female,couples[couple].male,mutation);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDebug.htm">debug</a>MateTally-&gt;tally(couples[couple].female,couples[couple].male); <a href="CppComment.htm">//</a>DEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mateTally.tally(couples[couple].female,couples[couple].male);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppRand.htm">std::rand</a>()%2<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offspring.males.push_back(birdy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offspring.females.push_back(birdy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Now the vectors of speciesA and speciesB are created,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>they have to be changed to vectors of males and females<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("mateTally: "+mateTally.get());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("<a href="CppDebug.htm">Debug</a>Tally: "+<a href="CppDebug.htm">debug</a>MateTally-&gt;get());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> offspring;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Offspring <a href="CppState.htm">State</a>MatingSystemPolygynyFreeNumberOffspring::mate(<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females,<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>FemaleSamplingBase&gt;&amp; femaleSampling,<br/>
&nbsp;&nbsp;MateTally&amp; mateTally<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;MateTally&gt; <a href="CppDebug.htm">debug</a>MateTally(<b><a href="CppNew.htm">new</a></b> MateTally);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mateTally.isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the fraction of species A and B<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation <a href="CppOperatorAssign.htm">=</a> parameters.mutationRate;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemales <a href="CppOperatorAssign.htm">=</a> females.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nFemales&gt;0);<br/>
&nbsp;&nbsp;Offspring offspring;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> female <a href="CppOperatorAssign.htm">=</a> 0; female &lt; nFemales; <a href="CppOperatorIncrement.htm">++</a>female)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the female pick her favorite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> winnerIndex <a href="CppOperatorAssign.htm">=</a> femaleSampling-&gt;getWinnerIndex(males, females[female], parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(winnerIndex <a href="CppOperatorLessEqual.htm">&lt;=</a> males.size());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("The index of the mate in vector 'males' is: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(winnerIndex));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (winnerIndex <a href="CppOperatorEqual.htm">==</a> males.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The female did not mate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters.femaleSampling<a href="CppOperatorNotEqual.htm">!=</a>bestOfNconspicific <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> parameters.femaleSampling<a href="CppOperatorNotEqual.htm">!=</a>bestOfNextremeTrait <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> parameters.femaleSampling<a href="CppOperatorNotEqual.htm">!=</a>bestOfNclosestTrait);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nOffspring <a href="CppOperatorAssign.htm">=</a> parameters.nOffspring;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let them produce m<a href="CppAny.htm">any</a> offspring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> i=0; i&lt;nOffspring; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find out whether he is a conspicific and put it in the results<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bird birdy(females[female],males[winnerIndex],mutation);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDebug.htm">debug</a>MateTally-&gt;tally(females[female],males[winnerIndex]); <a href="CppComment.htm">//</a>DEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mateTally.tally(females[female],males[winnerIndex]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppRand.htm">std::rand</a>()%2<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offspring.males.push_back(birdy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offspring.females.push_back(birdy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> offspring;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitParameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitParameters.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitParametersH<br/>
<a href="CppDefine.htm">#define</a> UnitParametersH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitEnums.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Parameters<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nGenerations;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Number of generations<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemales;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Number of females<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMales;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Number of males<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> fractionMaleA;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Fraction of males being of species A<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> fractionFemaleA;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Fraction of males being of species B<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> bestOfHowMuch; <a href="CppComment.htm">//</a>Value of N in Best-of-N<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> assessingErrorA ;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The probability a female A assess a male wrong<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> assessingErrorB;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>The probability a female B assess a male wrong<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> meanTraitA;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> meanTraitB;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> meanPreferenceA;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> meanPreferenceB;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> stdDevTraitA;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> stdDevTraitB;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> stdDevPreferenceA;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> stdDevPreferenceB;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sigmaSquared;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimulations; <a href="CppComment.htm">//</a>Number of simulations<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nOffspring;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Number of offspring produced per couple<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> simIndex; <a href="CppComment.htm">//</a>The simulation's index, or: the simIndex-th simulation that is being run<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> surviveSpeciesAlpha;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> surviveSpeciesBeta;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> costTrait;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> costPreference;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mutationRate;<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>MatingSystem matingSystem;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Monogamy/polygyny<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>FemaleSampling femaleSampling; <a href="CppComment.htm">//</a>The way a female samples the male population<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>DensityDependentSelection densityDependentSelection;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> reset();<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNmalesAwanted() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNmalesBwanted() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNfemalesAwanted() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNfemalesBwanted() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> readFromFile(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; fileName);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> writeToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; fileName);<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitParameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitParameters.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitParameters.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::reset()<br/>
{<br/>
&nbsp;&nbsp; nFemales <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp; nMales <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp; fractionMaleA <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; fractionFemaleA <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; bestOfHowMuch <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp; assessingErrorA <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; assessingErrorB <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; meanTraitA <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; meanTraitB <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; meanPreferenceA <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; meanPreferenceB <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; stdDevTraitA <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; stdDevTraitB <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; stdDevPreferenceA <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; stdDevPreferenceB <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; sigmaSquared <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; nSimulations <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a>simIndex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp; costTrait <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; costPreference <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; mutationRate <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp; matingSystem <a href="CppOperatorAssign.htm">=</a> monogamy;<br/>
&nbsp;&nbsp; femaleSampling <a href="CppOperatorAssign.htm">=</a> bestOfNconspicific;<br/>
&nbsp;&nbsp; densityDependentSelection <a href="CppOperatorAssign.htm">=</a> afterMating;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> Parameters::getNmalesAwanted() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nMales) * fractionMaleA;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> nMales * fractionMaleA;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> result <a href="CppOperatorAssign.htm">=</a> nMales * fractionMaleA;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesBwanted <a href="CppOperatorAssign.htm">=</a> getNmalesBwanted();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (result+nMalesBwanted<a href="CppOperatorEqual.htm">==</a>nMales) <b><a href="CppReturn.htm">return</a></b> result;<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (result+nMalesBwanted<a href="CppOperatorEqual.htm">==</a>nMales-1) <b><a href="CppReturn.htm">return</a></b> result+1;<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppAssert.htm">assert</a>(!"Should not get here"); <a href="CppExit.htm">std::exit</a>(1); <b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> Parameters::getNmalesBwanted() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> nMales * (1.0-fractionMaleA);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> Parameters::getNfemalesAwanted() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nFemales) * fractionFemaleA;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> nFemales * fractionFemaleA;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> result <a href="CppOperatorAssign.htm">=</a> nFemales * fractionFemaleA;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesBwanted <a href="CppOperatorAssign.htm">=</a> getNfemalesBwanted();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (result+nFemalesBwanted<a href="CppOperatorEqual.htm">==</a>nFemales) <b><a href="CppReturn.htm">return</a></b> result;<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (result+nFemalesBwanted<a href="CppOperatorEqual.htm">==</a>nFemales-1) <b><a href="CppReturn.htm">return</a></b> result+1;<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppAssert.htm">assert</a>(!"Should not get here"); <a href="CppExit.htm">std::exit</a>(1); <b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> Parameters::getNfemalesBwanted() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nFemales) * (1.0-fractionFemaleA);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> nFemales * (1.0-fractionFemaleA);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::readFromFile(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fileExists(fileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfstream.htm">std::ifstream</a> in (fileName.c_str());<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> myString;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> tempInt;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !in.eof(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> myString;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"nGenerations")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> nGenerations; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"nFemales")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> nFemales; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"nMales")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> nMales; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"fractionMaleA")&nbsp;&nbsp;&nbsp;&nbsp; { in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> fractionMaleA; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"fractionFemaleA")&nbsp;&nbsp; { in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> fractionFemaleA; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"bestOfHowMuch")&nbsp;&nbsp;&nbsp;&nbsp; { in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> bestOfHowMuch; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"assessingErrorA")&nbsp;&nbsp; { in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> assessingErrorA; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"assessingErrorB")&nbsp;&nbsp; { in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> assessingErrorB; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"meanTraitA")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> meanTraitA; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"meanTraitB")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> meanTraitB; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"meanPreferenceA")&nbsp;&nbsp; { in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> meanPreferenceA; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"meanPreferenceB")&nbsp;&nbsp; { in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> meanPreferenceB; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"stdDevTraitA")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> stdDevTraitA; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"stdDevTraitB")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> stdDevTraitB; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"stdDevPreferenceA") { in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> stdDevPreferenceA; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"stdDevPreferenceB") { in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> stdDevPreferenceB; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"sigmaSquared")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> sigmaSquared; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"nSimulations")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> nSimulations; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"nOffspring")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> nOffspring; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"surviveSpeciesAlpha") { in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> surviveSpeciesAlpha; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"surviveSpeciesBeta")&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> surviveSpeciesBeta; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"costTrait")&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> costTrait; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"costPreference")&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> costPreference; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"mutationRate")&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> mutationRate; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"matingSystem")&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> tempInt; matingSystem <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppEnum.htm">enum</a></b>MatingSystem&gt;(tempInt); <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"femaleSampling")&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> tempInt; femaleSampling <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppEnum.htm">enum</a></b>FemaleSampling&gt;(tempInt); <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"densityDependentSelection")&nbsp;&nbsp;{ in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> tempInt; densityDependentSelection <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppEnum.htm">enum</a></b>DensityDependentSelection&gt;(tempInt); <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unknown file parameter"); <a href="CppExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;in.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::writeToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppOfstream.htm">std::ofstream</a> out (fileName.c_str());<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "nGenerations" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> nGenerations <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "nFemales" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> nFemales <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "nMales" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> nMales <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "fractionMaleA" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> fractionMaleA <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "fractionFemaleA" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> fractionFemaleA <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "bestOfHowMuch" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> bestOfHowMuch <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "assessingErrorA" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> assessingErrorA <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "assessingErrorB" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> assessingErrorB <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "meanTraitA" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> meanTraitA <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "meanTraitB" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> meanTraitB <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "meanPreferenceA" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> meanPreferenceA <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "meanPreferenceB" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> meanPreferenceB <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "stdDevTraitA" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> stdDevTraitA <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "stdDevTraitB" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> stdDevTraitB <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "stdDevPreferenceA" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> stdDevPreferenceA <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "stdDevPreferenceB" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> stdDevPreferenceB <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "sigmaSquared" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sigmaSquared <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "nSimulations" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> nSimulations <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "nOffspring" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> nOffspring <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "surviveSpeciesAlpha" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> surviveSpeciesAlpha <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "surviveSpeciesBeta" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> surviveSpeciesBeta <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "costTrait" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> costTrait <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "costPreference" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> costPreference <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "mutationRate" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mutationRate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "matingSystem" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(matingSystem) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "femaleSampling" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(femaleSampling) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "densityDependentSelection" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(densityDependentSelection) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;out.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitRandom.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitRandom.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitRandomH<br/>
<a href="CppDefine.htm">#define</a> UnitRandomH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;math.h&gt;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> rnd<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppLong.htm">long</a></b> <b><a href="CppInt.htm">int</a></b> idum;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> MBIG;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> MSEED;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> MZ;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> FAC;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Returns a uniform random value from 0.0 to 1.0<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> uniform()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> inext,inextp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppLong.htm">long</a></b> ma[56];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> iff=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> mj,mk;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i,ii,k;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (idum &lt; 0 <a href="CppOperatorLogicalOr.htm">||</a> iff <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iff=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mj=MSEED-(idum &lt; 0 ? <a href="CppOperatorMinus.htm">-</a>idum : idum);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mj <a href="CppOperatorModulusAssign.htm">%=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ma[55]=mj;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mk=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=1;i<a href="CppOperatorLessEqual.htm">&lt;=</a>54;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ii=(21*i) <a href="CppOperatorModulus.htm">%</a> 55;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ma[ii]=mk;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mk=mj-mk;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mk &lt; MZ) mk <a href="CppOperatorPlusAssign.htm">+=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mj=ma[ii];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (k=1;k<a href="CppOperatorLessEqual.htm">&lt;=</a>4;k<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=1;i<a href="CppOperatorLessEqual.htm">&lt;=</a>55;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ma[i] <a href="CppOperatorMinusAssign.htm">-=</a> ma[1+(i+30) <a href="CppOperatorModulus.htm">%</a> 55];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ma[i] &lt; MZ) ma[i] <a href="CppOperatorPlusAssign.htm">+=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inext=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inextp=31;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idum=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppOperatorIncrement.htm">++</a>inext <a href="CppOperatorEqual.htm">==</a> 56) inext=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppOperatorIncrement.htm">++</a>inextp <a href="CppOperatorEqual.htm">==</a> 56) inextp=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mj=ma[inext]-ma[inextp];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mj &lt; MZ) mj <a href="CppOperatorPlusAssign.htm">+=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ma[inext]=mj;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mj*FAC;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> gasdev()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> iset=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> gset;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> fac,r,v1,v2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDouble.htm">double</a></b> uniform();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;uniform();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp;(iset <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v1=2.0*uniform()-1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v2=2.0*uniform()-1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r=v1*v1+v2*v2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (r <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fac=sqrt(-2.0*log(r)/r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gset=v1*fac;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iset=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v2*fac;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iset=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> gset;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sets the seed <b><a href="CppFor.htm">for</a></b> the <a href="CppRandomNumber.htm">random number</a> sequence<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> SetSeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; seed)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;idum <a href="CppOperatorAssign.htm">=</a> <b><a href="CppLong.htm">long</a></b>(-<a href="CppAbs.htm">std::abs</a>(seed));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=0; i&lt;100; i<a href="CppOperatorIncrement.htm">++</a>) uniform();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Returns a <a href="CppRandomNumber.htm">random number</a> from a gaussian distrubution<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> normal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; mean,<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <a href="CppStd.htm">std</a>ev)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> gasdev()*<a href="CppStd.htm">std</a>ev <a href="CppOperatorPlus.htm">+</a> mean;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Returns a random <a href="CppInt.htm">integer</a> from 0 to N<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> RandomNumber(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; N)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> out;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x=<a href="CppFloor.htm">std::floor</a>(uniform()*N);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;out=<b><a href="CppInt.htm">int</a></b> (x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> out;<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitRandom.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitRandom.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitRandom.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppLong.htm">long</a></b> <b><a href="CppInt.htm">int</a></b> rnd::idum;<br/>
<b><a href="CppInt.htm">int</a></b> rnd::MBIG&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1000000000;<br/>
<b><a href="CppInt.htm">int</a></b> rnd::MSEED <a href="CppOperatorAssign.htm">=</a> 161803398;<br/>
<b><a href="CppInt.htm">int</a></b> rnd::MZ <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<b><a href="CppDouble.htm">double</a></b> rnd::FAC <a href="CppOperatorAssign.htm">=</a> (1.0/MBIG);<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitResults.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitResults.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitResultsH<br/>
<a href="CppDefine.htm">#define</a> UnitResultsH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitTallies.h"<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Results<a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Results<a href="CppDesignPatternSingleton.htm">Singleton</a>* <a href="CppInstance.htm">instance</a>()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mpInstance<a href="CppOperatorEqual.htm">==</a>0) mpInstance <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> Results<a href="CppDesignPatternSingleton.htm">Singleton</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mpInstance;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;Results<a href="CppDesignPatternSingleton.htm">Singleton</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Results<a href="CppDesignPatternSingleton.htm">Singleton</a>* mpInstance;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitResults.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitResults.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitResults.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitSimulation.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitSimulation.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSimulationH<br/>
<a href="CppDefine.htm">#define</a> UnitSimulationH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;math&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitEnums.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitParameters.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitTallies.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitHelper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppTime.htm">Time</a>Series.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppForwardDeclaration.htm">Forward declaration</a>s of <a href="CppState.htm">State</a>s<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>MatingSystemBase;<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>FemaleSamplingBase;<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppState.htm">State</a>DensityDependentSelectionBase;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Simulation<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> mError;<br/>
&nbsp;&nbsp;Simulation(<b><a href="CppConst.htm">const</a></b> Parameters&amp;);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> execute();<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>Series get<a href="CppTime.htm">Time</a>Series() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m<a href="CppTime.htm">Time</a>Series; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setMatingSystem(<b><a href="CppConst.htm">const</a></b> <b><a href="CppEnum.htm">enum</a></b>MatingSystem&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppEnum.htm">enum</a></b>DensityDependentSelection&amp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setFemaleSampling(<b><a href="CppConst.htm">const</a></b> <b><a href="CppEnum.htm">enum</a></b>FemaleSampling&amp;);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setDensityDependentSelection(<b><a href="CppConst.htm">const</a></b> <b><a href="CppEnum.htm">enum</a></b>DensityDependentSelection&amp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> showPopulation(TStringGrid * stringGrid) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInline.htm">inline</a></b> <b><a href="CppDouble.htm">double</a></b> chanceToSurviveSpecies(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; descent, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; alpha, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; beta);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInline.htm">inline</a></b> <b><a href="CppDouble.htm">double</a></b> chanceToSurviveTrait(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; trait, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; costTrait);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInline.htm">inline</a></b> <b><a href="CppDouble.htm">double</a></b> chanceToSurvivePreference(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; preference, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; costPreference);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDebug.htm">Debugging</a><br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters mParameters;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> speciesSelection();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> viabilitySelection();<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> willDieSpecies(<b><a href="CppConst.htm">const</a></b> Bird&amp; bird);<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> willDiePreference(<b><a href="CppConst.htm">const</a></b> Female&amp; female);<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> willDieTrait(<b><a href="CppConst.htm">const</a></b> Male&amp; male);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mating();<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>MatingSystemBase&gt; mMatingSystem;<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>FemaleSamplingBase&gt; mFemaleSampling;<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;<a href="CppState.htm">State</a>DensityDependentSelectionBase&gt; mDensityDependentSelection;<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;MateTally&gt; mMateTally;<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Bird&gt; mMales;<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Bird&gt; mFemales;<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Bird&gt; mOffspring;<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>Series m<a href="CppTime.htm">Time</a>Series;<br/>
};<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFemaleSampling.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMatingSystem.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitDensityDependentSelection.h"<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> calculate<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; generation, <a href="CppTime.htm">Time</a>Series&amp; <a href="CppTime.htm">time</a>Series, <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;MateTally&gt;&amp; mateTally);<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitSimulation.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitSimulation.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppInclude.htm">#include</a> "UnitSimulation.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Simulation::Simulation(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
&nbsp;&nbsp;: mParameters(parameters),<br/>
&nbsp;&nbsp;mMateTally(<b><a href="CppNew.htm">new</a></b> MateTally),<br/>
&nbsp;&nbsp;mError("Finished simulation without errors.")<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy parameters from mParameters<br/>
&nbsp;&nbsp;setMatingSystem(mParameters.matingSystem, mParameters.densityDependentSelection);<br/>
&nbsp;&nbsp;setFemaleSampling(mParameters.femaleSampling);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reset results<br/>
&nbsp;&nbsp;mMateTally-&gt;reset();<br/>
&nbsp;&nbsp;mMales <a href="CppOperatorAssign.htm">=</a> Bird::createMales(mParameters);<br/>
&nbsp;&nbsp;mFemales <a href="CppOperatorAssign.htm">=</a> Bird::createFemales(mParameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Shuffle the males and females<br/>
&nbsp;&nbsp;<a href="CppRandom_shuffle.htm">std::random_shuffle</a>(mMales.begin()&nbsp;&nbsp;, mMales.end()&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppRandom_shuffle.htm">std::random_shuffle</a>(mFemales.begin(), mFemales.end());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::execute()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nGenerations <a href="CppOperatorAssign.htm">=</a> mParameters.nGenerations;<br/>
&nbsp;&nbsp;m<a href="CppTime.htm">Time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s.resize(nGenerations);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> generation=0; generation&lt;nGenerations; <a href="CppOperatorIncrement.htm">++</a>generation)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>log("Start of species selection. Nmales: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(mMales.size()) <a href="CppOperatorPlus.htm">+</a> ",Nfemales: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(mFemales.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppTime.htm">Time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[generation].speciesTallyOffspring.tallySpecies(mFemales,mMales);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppTime.htm">Time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[generation].getSample(mFemales,mMales);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;speciesSelection();&nbsp;&nbsp; <a href="CppComment.htm">//</a>Selection on species, hybrids have disadvantage<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>log("Start of viabilitySelection. Nmales: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(mMales.size()) <a href="CppOperatorPlus.htm">+</a> ",Nfemales: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(mFemales.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppTime.htm">Time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[generation].speciesTallyAfterSpeciesSelection.tallySpecies(mFemales,mMales);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;viabilitySelection(); <a href="CppComment.htm">//</a>Selection on trait, individuals with high trait have disadvantage<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>log("Selection before mating. Nmales: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(mMales.size()) <a href="CppOperatorPlus.htm">+</a> ",Nfemales: " <a href="CppOperatorPlus.htm">+</a> <a href="CppIntToStr.htm">IntToStr</a>(mFemales.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppTime.htm">Time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[generation].speciesTallyAfterTraitSelection.tallySpecies(mFemales,mMales);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> canDoSelection <a href="CppOperatorAssign.htm">=</a> mDensityDependentSelection-&gt;canDoSelection(mFemales,mMales,mParameters,mError);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (canDoSelection<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDensityDependentSelection-&gt;<b><a href="CppDo.htm">do</a></b>Selection(mFemales,mMales,mParameters);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m<a href="CppTime.htm">Time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[generation].speciesTallyAfterDensityDependentSelection.tallySpecies(mFemales,mMales);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Offspring offspring <a href="CppOperatorAssign.htm">=</a> mMatingSystem-&gt;mate(mMales,mFemales,mParameters,mFemaleSampling,m<a href="CppTime.htm">Time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[generation].mateTally);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSwap.htm">std::swap</a>(mFemales, offspring.females);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSwap.htm">std::swap</a>(mMales, offspring.males);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mFemales.size()<a href="CppOperatorEqual.htm">==</a>0) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mMales.size()<a href="CppOperatorEqual.htm">==</a>0) <b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Selection on species, hybrids have disadvantage<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::speciesSelection()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Easy implementation: hybrids just die<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> male <a href="CppOperatorAssign.htm">=</a> 0; male &lt; mMales.size(); <a href="CppOperatorIncrement.htm">++</a>male)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(male &lt; mMales.size() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> willDieSpecies(mMales[male])<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMales.erase(&amp;mMales[male]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMales.erase(&amp;mMales.at(male));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> female <a href="CppOperatorAssign.htm">=</a> 0; female &lt; mFemales.size(); <a href="CppOperatorIncrement.htm">++</a>female)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(female &lt; mFemales.size() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> willDieSpecies(mFemales[female])<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFemales.erase(&amp;mFemales[female]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFemales.erase(&amp;mFemales.at(female));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Selection on trait, individuals with high trait have disadvantage<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::viabilitySelection()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Easy implementation: hybrids just die<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> male <a href="CppOperatorAssign.htm">=</a> 0; male &lt; mMales.size(); <a href="CppOperatorIncrement.htm">++</a>male)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(male &lt; mMales.size() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> willDieTrait(mMales[male])<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMales.erase(&amp;mMales[male]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMales.erase(&amp;mMales.at(male));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> female <a href="CppOperatorAssign.htm">=</a> 0; female &lt; mFemales.size(); <a href="CppOperatorIncrement.htm">++</a>female)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(female &lt; mFemales.size() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> willDiePreference(mFemales[female])<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFemales.erase(&amp;mFemales[female]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFemales.erase(&amp;mFemales.at(female));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Kills the hybrids<br/>
<b><a href="CppBool.htm">bool</a></b> Simulation::willDieSpecies(<b><a href="CppConst.htm">const</a></b> Bird&amp; bird)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bird.descent<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bird.descent<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chanceToSurvive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> chanceToSurviveSpecies(bird.descent, mParameters.surviveSpeciesAlpha, mParameters.surviveSpeciesBeta);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chanceToSurvive <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorMinus.htm">-</a> (mParameters.surviveSpeciesAlpha *<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppExp.htm">std::exp</a>(-mParameters.surviveSpeciesBeta * bird.descent * bird.descent));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(chanceToSurvive<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> chanceToSurvive<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dot("bird.descent: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(bird.descent)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ", chance to survive: " <a href="CppOperatorPlus.htm">+</a> FloatToStr(chanceToSurvive));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rnd::uniform() &gt; chanceToSurvive) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> Simulation::willDieTrait(<b><a href="CppConst.htm">const</a></b> Male&amp; male)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chanceToSurvive <a href="CppOperatorAssign.htm">=</a> chanceToSurviveTrait(male.trait, mParameters.costTrait);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chanceToSurvive<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppExp.htm">std::exp</a>(-mParameters.costTrait * male.trait * male.trait);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(chanceToSurvive<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> chanceToSurvive<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rnd::uniform() &gt; chanceToSurvive) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> Simulation::willDiePreference(<b><a href="CppConst.htm">const</a></b> Female&amp; female)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chanceToSurvive<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppExp.htm">std::exp</a>(-mParameters.costPreference * female.preference * female.preference);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> chanceToSurvivePreference(female.preference, mParameters.costPreference);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(chanceToSurvive<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> chanceToSurvive<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rnd::uniform() &gt; chanceToSurvive) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::setMatingSystem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppEnum.htm">enum</a></b>MatingSystem&amp; matingSystem,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppEnum.htm">enum</a></b>DensityDependentSelection&amp; selection)<br/>
{<br/>
&nbsp;&nbsp;setDensityDependentSelection(selection);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(selection)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Selection after mating<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> afterMating:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(matingSystem)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> monogamy:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMatingSystem.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>MatingSystemMonogamyFixedNumberOffspring);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> polygyny:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMatingSystem.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>MatingSystemPolygynyFixedNumberOffspring);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Unknown mating system"); <a href="CppExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Selection before mating<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> beforeMating:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(matingSystem)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> monogamy:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMatingSystem.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>MatingSystemMonogamyFreeNumberOffspring);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> polygyny:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMatingSystem.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>MatingSystemPolygynyFreeNumberOffspring);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Unknown mating system"); <a href="CppExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unknown <b><a href="CppEnum.htm">enum</a></b>DensityDependentSelection"); <a href="CppExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;Dot("Mating system set to: " <a href="CppOperatorPlus.htm">+</a> mMatingSystem-&gt;getMatingSystem());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::setFemaleSampling(<b><a href="CppConst.htm">const</a></b> <b><a href="CppEnum.htm">enum</a></b>FemaleSampling&amp; femaleSampling)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(femaleSampling)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> bestOfNconspicific:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFemaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNconspicific);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> bestOfNextremeTrait:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFemaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNextremeTrait);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> bestOfNclosestTrait:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFemaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingBestOfNclosestTrait);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> fixedThresholdConspicific:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFemaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdConspicific);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> fixedThresholdTraitSign:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFemaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdTraitSign);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> fixedThresholdProbabilistic:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFemaleSampling.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>FemaleSamplingFixedThresholdProbabilistic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unknown female sampling"); <a href="CppExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;Dot("Female sampling set to: " <a href="CppOperatorPlus.htm">+</a> mFemaleSampling-&gt;getFemaleSampling());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::setDensityDependentSelection(<b><a href="CppConst.htm">const</a></b> <b><a href="CppEnum.htm">enum</a></b>DensityDependentSelection&amp; selection)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(selection)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> beforeMating:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDensityDependentSelection.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>DensityDependentSelectionBeforeMating);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> afterMating:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDensityDependentSelection.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>DensityDependentSelectionAfterMating);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unknown <b><a href="CppEnum.htm">enum</a></b>DensityDependentSelection"); <a href="CppExit.htm">std::exit</a>(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;Dot("Density dependent selection set to: " <a href="CppOperatorPlus.htm">+</a> mDensityDependentSelection-&gt;getString());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppDouble.htm">double</a></b> Simulation::chanceToSurviveSpecies(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; descent, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; alpha, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; beta)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1.0 <a href="CppOperatorMinus.htm">-</a> (alpha * <a href="CppExp.htm">std::exp</a>(-beta * descent * descent));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppDouble.htm">double</a></b> Simulation::chanceToSurviveTrait(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; trait, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; costTrait)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>&nbsp;&nbsp;<a href="CppExp.htm">std::exp</a>(-costTrait * trait * trait);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInline.htm">inline</a></b> <b><a href="CppDouble.htm">double</a></b> Simulation::chanceToSurvivePreference(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; preference, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; costPreference)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>&nbsp;&nbsp;<a href="CppExp.htm">std::exp</a>(-costPreference * preference * preference);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitTallies.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitTallies.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitTalliesH<br/>
<a href="CppDefine.htm">#define</a> UnitTalliesH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitBird.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> MateTally<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;MateTally() { reset(); }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> tally(<b><a href="CppConst.htm">const</a></b> Bird&amp; mother, <b><a href="CppConst.htm">const</a></b> Bird&amp; father);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> reset();<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> get() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isNull() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> calculateBiasA() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> calculateBiasB() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> calculateFractionMixedPairs() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNmateAA() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nMateAA; } <a href="CppComment.htm">//</a>Female A <a href="CppOperatorMinus.htm">-</a> male A<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNmateAB() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nMateAB; } <a href="CppComment.htm">//</a>Female A <a href="CppOperatorMinus.htm">-</a> male B<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNmateBA() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nMateBA; } <a href="CppComment.htm">//</a>Female B <a href="CppOperatorMinus.htm">-</a> male A<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNmateBB() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nMateBB; } <a href="CppComment.htm">//</a>Female B <a href="CppOperatorMinus.htm">-</a> male B<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNmateAll() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nMateAA <a href="CppOperatorPlus.htm">+</a> nMateAB <a href="CppOperatorPlus.htm">+</a> nMateBA <a href="CppOperatorPlus.htm">+</a> nMateBB; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperatorDivide.htm">operator/</a></b>=(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; <b><a href="CppInt.htm">int</a></b>Value);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> MateTally&amp;&nbsp;&nbsp;mateTally);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMateAA; <a href="CppComment.htm">//</a>Female A <a href="CppOperatorMinus.htm">-</a> male A<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMateAB; <a href="CppComment.htm">//</a>Female A <a href="CppOperatorMinus.htm">-</a> male B<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMateBA; <a href="CppComment.htm">//</a>Female B <a href="CppOperatorMinus.htm">-</a> male A<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMateBB; <a href="CppComment.htm">//</a>Female B <a href="CppOperatorMinus.htm">-</a> male B<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> SpeciesTally<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;SpeciesTally() { reset(); }<br/>
&nbsp;&nbsp;SpeciesTally(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females, <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;reset();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tallySpecies(females,males);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> reset();<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isNull() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> tallySpecies(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females, <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> SpeciesTally&amp; speciesTally);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperatorDivide.htm">operator/</a></b>=(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; <b><a href="CppInt.htm">int</a></b>Value);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Plain retrieval<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNmalesA()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nMalesA;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNmalesB()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nMalesB;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNfemalesA()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nFemalesA;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNfemalesB()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nFemalesB;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Some group retrieval<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNallMalesA()&nbsp;&nbsp; <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nMalesA; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNallMalesB()&nbsp;&nbsp; <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nMalesB; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNallMales()&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nMalesA <a href="CppOperatorPlus.htm">+</a> nMalesB; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNallFemalesA() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nFemalesA; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNallFemalesB() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nFemalesB; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNallFemales()&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nFemalesA <a href="CppOperatorPlus.htm">+</a> nFemalesB; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNall()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> getNallFemales() <a href="CppOperatorPlus.htm">+</a> getNallMales(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNallMalesA()&nbsp;&nbsp; <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nMalesA <a href="CppOperatorPlus.htm">+</a> nMaleHybridsA; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNallMalesB()&nbsp;&nbsp; <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nMalesB <a href="CppOperatorPlus.htm">+</a> nMaleHybridsB; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNallMales()&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nMalesA <a href="CppOperatorPlus.htm">+</a> nMaleHybridsA <a href="CppOperatorPlus.htm">+</a> nMalesB <a href="CppOperatorPlus.htm">+</a> nMaleHybridsB; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNallFemalesA() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nFemalesA <a href="CppOperatorPlus.htm">+</a> nFemaleHybridsA; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNallFemalesB() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nFemalesB <a href="CppOperatorPlus.htm">+</a> nFemaleHybridsB; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNallFemales()&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> nFemalesA <a href="CppOperatorPlus.htm">+</a> nFemaleHybridsA <a href="CppOperatorPlus.htm">+</a> nFemalesB <a href="CppOperatorPlus.htm">+</a> nFemaleHybridsB; }<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNall()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> getNallFemales() <a href="CppOperatorPlus.htm">+</a> getNallMales(); }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The <b><a href="CppPrivate.htm">private</a></b> variables it is all <a href="CppAbout.htm">about</a><br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesA;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>SpeciesValue &lt; <a href="CppOperatorMinus.htm">-</a>0.5<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesB;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>SpeciesValue &gt; 0.5<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesA;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>SpeciesValue &lt; <a href="CppOperatorMinus.htm">-</a>0.5<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesB;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>SpeciesValue &gt; 0.5<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitTallies.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitTallies.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppInclude.htm">#include</a> "UnitTallies.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MateTally::reset()<br/>
{<br/>
&nbsp;&nbsp;nMateAA <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;nMateAB <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;nMateBA <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;nMateBB <a href="CppOperatorAssign.htm">=</a> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MateTally::<b><a href="CppOperatorDivide.htm">operator/</a></b>=(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; <b><a href="CppInt.htm">int</a></b>Value)<br/>
{<br/>
&nbsp;&nbsp;nMateAA<a href="CppOperatorDivideAssign.htm">/=</a><b><a href="CppInt.htm">int</a></b>Value;<br/>
&nbsp;&nbsp;nMateAB<a href="CppOperatorDivideAssign.htm">/=</a><b><a href="CppInt.htm">int</a></b>Value;<br/>
&nbsp;&nbsp;nMateBA<a href="CppOperatorDivideAssign.htm">/=</a><b><a href="CppInt.htm">int</a></b>Value;<br/>
&nbsp;&nbsp;nMateBB<a href="CppOperatorDivideAssign.htm">/=</a><b><a href="CppInt.htm">int</a></b>Value;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MateTally::<b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> MateTally&amp; mateTally)<br/>
{<br/>
&nbsp;&nbsp;nMateAA<a href="CppOperatorPlusAssign.htm">+=</a>mateTally.nMateAA;<br/>
&nbsp;&nbsp;nMateAB<a href="CppOperatorPlusAssign.htm">+=</a>mateTally.nMateAB;<br/>
&nbsp;&nbsp;nMateBA<a href="CppOperatorPlusAssign.htm">+=</a>mateTally.nMateBA;<br/>
&nbsp;&nbsp;nMateBB<a href="CppOperatorPlusAssign.htm">+=</a>mateTally.nMateBB;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppString.htm">std::string</a> MateTally::get() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> result;<br/>
&nbsp;&nbsp;result<a href="CppOperatorPlusAssign.htm">+=</a> "nMateAA: " <a href="CppOperatorPlus.htm">+</a> itoa(nMateAA);<br/>
&nbsp;&nbsp;result<a href="CppOperatorPlusAssign.htm">+=</a> " ,nMateAB: " <a href="CppOperatorPlus.htm">+</a> itoa(nMateAB);<br/>
&nbsp;&nbsp;result<a href="CppOperatorPlusAssign.htm">+=</a> " ,nMateBA: " <a href="CppOperatorPlus.htm">+</a> itoa(nMateBA);<br/>
&nbsp;&nbsp;result<a href="CppOperatorPlusAssign.htm">+=</a> " ,nMateBB: " <a href="CppOperatorPlus.htm">+</a> itoa(nMateBB);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> MateTally::isNull() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( nMateAA<a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> nMateAB<a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> nMateBA<a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> nMateBB<a href="CppOperatorNotEqual.htm">!=</a>0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MateTally::tally(<b><a href="CppConst.htm">const</a></b> Bird&amp; mother, <b><a href="CppConst.htm">const</a></b> Bird&amp; father)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mother.species <a href="CppOperatorEqual.htm">==</a> piedFly<b><a href="CppCatch.htm">catch</a></b>er)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (father.species <a href="CppOperatorEqual.htm">==</a> piedFly<b><a href="CppCatch.htm">catch</a></b>er)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppOperatorIncrement.htm">++</a>nMateAA; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppOperatorIncrement.htm">++</a>nMateAB; }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (father.species <a href="CppOperatorEqual.htm">==</a> piedFly<b><a href="CppCatch.htm">catch</a></b>er)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppOperatorIncrement.htm">++</a>nMateBA; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppOperatorIncrement.htm">++</a>nMateBB; }<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> MateTally::calculateBiasA() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (nMateAB <a href="CppOperatorPlus.htm">+</a> nMateBA <a href="CppOperatorEqual.htm">==</a> 0 ? 0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nMateAB) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nMateAB <a href="CppOperatorPlus.htm">+</a> nMateBA));<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> MateTally::calculateBiasB() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (nMateAB <a href="CppOperatorPlus.htm">+</a> nMateBA <a href="CppOperatorEqual.htm">==</a> 0 ? 0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nMateBA) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nMateAB <a href="CppOperatorPlus.htm">+</a> nMateBA));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> MateTally::calculateFractionMixedPairs() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b> ? 0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nMateAB <a href="CppOperatorPlus.htm">+</a> nMateBA) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nMateAA <a href="CppOperatorPlus.htm">+</a> nMateAB <a href="CppOperatorPlus.htm">+</a> nMateBA <a href="CppOperatorPlus.htm">+</a> nMateBB));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SpeciesTally::tallySpecies(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females, <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Females first<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemales <a href="CppOperatorAssign.htm">=</a> females.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> i=0; i&lt;nFemales; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppEnum.htm">enum</a></b>Species species <a href="CppOperatorAssign.htm">=</a> females[i].species;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (species<a href="CppOperatorEqual.htm">==</a>piedFly<b><a href="CppCatch.htm">catch</a></b>er) <a href="CppOperatorIncrement.htm">++</a>(nFemalesA);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorIncrement.htm">++</a>(nFemalesB);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Tally the men<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMales <a href="CppOperatorAssign.htm">=</a> males.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> i=0; i&lt;nMales; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppEnum.htm">enum</a></b>Species species <a href="CppOperatorAssign.htm">=</a> males[i].species;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (species<a href="CppOperatorEqual.htm">==</a>piedFly<b><a href="CppCatch.htm">catch</a></b>er) <a href="CppOperatorIncrement.htm">++</a>(nMalesA);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorIncrement.htm">++</a>(nMalesB);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Females first<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemales <a href="CppOperatorAssign.htm">=</a> females.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> i=0; i&lt;nFemales; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> descent <a href="CppOperatorAssign.htm">=</a> females[i].descent;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (descent &lt; <a href="CppOperatorMinus.htm">-</a>0.5)&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorIncrement.htm">++</a>(nFemalesA);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (descent &lt; 0.0) <a href="CppOperatorIncrement.htm">++</a>(nFemaleHybridsA);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (descent &lt; 0.5) <a href="CppOperatorIncrement.htm">++</a>(nFemaleHybridsB);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorIncrement.htm">++</a>(nFemalesB);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Tally the men<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMales <a href="CppOperatorAssign.htm">=</a> males.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> i=0; i&lt;nMales; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> descent <a href="CppOperatorAssign.htm">=</a> males[i].descent;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (descent &lt; <a href="CppOperatorMinus.htm">-</a>0.5)&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorIncrement.htm">++</a>(nMalesA);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (descent &lt; 0.0) <a href="CppOperatorIncrement.htm">++</a>(nMaleHybridsA);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (descent &lt; 0.5) <a href="CppOperatorIncrement.htm">++</a>(nMaleHybridsB);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorIncrement.htm">++</a>(nMalesB);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SpeciesTally::reset()<br/>
{<br/>
&nbsp;&nbsp;nMalesA <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;nMalesB <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;nFemalesA <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;nFemalesB <a href="CppOperatorAssign.htm">=</a> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> SpeciesTally::isNull() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nMalesA&gt;0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nMalesB&gt;0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nFemalesA&gt;0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nFemalesB&gt;0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SpeciesTally::<b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> SpeciesTally&amp; speciesTally)<br/>
{<br/>
&nbsp;&nbsp;nMalesA<a href="CppOperatorPlusAssign.htm">+=</a>speciesTally.nMalesA;<br/>
&nbsp;&nbsp;nMalesB<a href="CppOperatorPlusAssign.htm">+=</a>speciesTally.nMalesB;<br/>
&nbsp;&nbsp;nFemalesA<a href="CppOperatorPlusAssign.htm">+=</a>speciesTally.nFemalesA;<br/>
&nbsp;&nbsp;nFemalesB<a href="CppOperatorPlusAssign.htm">+=</a>speciesTally.nFemalesB;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SpeciesTally::<b><a href="CppOperatorDivide.htm">operator/</a></b>=(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; <b><a href="CppInt.htm">int</a></b>Value)<br/>
{<br/>
&nbsp;&nbsp;nMalesA<a href="CppOperatorDivideAssign.htm">/=</a><b><a href="CppInt.htm">int</a></b>Value;<br/>
&nbsp;&nbsp;nMalesB<a href="CppOperatorDivideAssign.htm">/=</a><b><a href="CppInt.htm">int</a></b>Value;<br/>
&nbsp;&nbsp;nFemalesA<a href="CppOperatorDivideAssign.htm">/=</a><b><a href="CppInt.htm">int</a></b>Value;<br/>
&nbsp;&nbsp;nFemalesB<a href="CppOperatorDivideAssign.htm">/=</a><b><a href="CppInt.htm">int</a></b>Value;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitThreeDotsChasing.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitThreeDotsChasing.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitThreeDotsChasingH<br/>
<a href="CppDefine.htm">#define</a> UnitThreeDotsChasingH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;AppEvnts.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppDefine.htm">#define</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;math&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppTime.htm">time</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormThreeDotsChasing : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image1;<br/>
&nbsp;&nbsp;T<a href="CppApplication.htm">Application</a>Events *<a href="CppApplication.htm">Application</a>Events1;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppApplication.htm">Application</a>Events1Idle(TObject *Sender, <b><a href="CppBool.htm">bool</a></b> &amp;Done);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormClick(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormThreeDotsChasing(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b> count;<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt; <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>&gt; &gt; distance;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppPoint.htm">Point</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppShort.htm">short</a></b> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppShort.htm">short</a></b> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> dy;<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppShort.htm">short</a></b> abs(<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b>&amp; i) { <b><a href="CppReturn.htm">return</a></b> (i&lt;0 ? <a href="CppOperatorMinus.htm">-</a>i : i); }<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt; <a href="CppPoint.htm">Point</a> &gt; <a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> reset<a href="CppPoint.htm">Point</a>s();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormThreeDotsChasing *FormThreeDotsChasing;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitThreeDotsChasing.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitThreeDotsChasing.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitThreeDotsChasing.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormThreeDotsChasing *FormThreeDotsChasing;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormThreeDotsChasing::TFormThreeDotsChasing(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.resize(4);<br/>
&nbsp;&nbsp;<a href="CppSrand.htm">std::srand</a>(clock());<br/>
<br/>
&nbsp;&nbsp;FormResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormThreeDotsChasing::<a href="CppApplication.htm">Application</a>Events1Idle(TObject *Sender, <b><a href="CppBool.htm">bool</a></b> &amp;Done)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorIncrement.htm">++</a>count;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;Caption <a href="CppOperatorAssign.htm">=</a> count;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> n<a href="CppPoint.htm">Point</a>s <a href="CppOperatorAssign.htm">=</a> <a href="CppPointer.htm">point</a>s.size();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b> maxy <a href="CppOperatorAssign.htm">=</a> Image1-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b> maxx <a href="CppOperatorAssign.htm">=</a> Image1-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppChar.htm">char</a></b> i=0; i&lt;n<a href="CppPoint.htm">Point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> other <a href="CppOperatorAssign.htm">=</a> (i+1)%n<a href="CppPoint.htm">Point</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(other<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(other&lt;n<a href="CppPoint.htm">Point</a>s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppPointer.htm">point</a>s[i].x &lt; <a href="CppPointer.htm">point</a>s[other].x) <a href="CppOperatorIncrement.htm">++</a>(<a href="CppPointer.htm">point</a>s[i].dx);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppOperatorDecrement.htm">--</a>(<a href="CppPointer.htm">point</a>s[i].dx);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppPointer.htm">point</a>s[i].y &lt; <a href="CppPointer.htm">point</a>s[other].y) <a href="CppOperatorIncrement.htm">++</a>(<a href="CppPointer.htm">point</a>s[i].dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <a href="CppOperatorDecrement.htm">--</a>(<a href="CppPointer.htm">point</a>s[i].dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[i].x<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppPointer.htm">point</a>s[i].dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppPointer.htm">point</a>s[i].x&lt;0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppPointer.htm">point</a>s[i].x=0; <a href="CppPointer.htm">point</a>s[i].dx <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppPointer.htm">point</a>s[i].dx; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<a href="CppPointer.htm">point</a>s[i].x<a href="CppOperatorGreaterEqual.htm">&gt;=</a>maxx)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppPointer.htm">point</a>s[i].x=maxx-1; <a href="CppPointer.htm">point</a>s[i].dx <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppPointer.htm">point</a>s[i].dx; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[i].y<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppPointer.htm">point</a>s[i].dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppPointer.htm">point</a>s[i].y&lt;0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppPointer.htm">point</a>s[i].y=0; <a href="CppPointer.htm">point</a>s[i].dy <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppPointer.htm">point</a>s[i].dy; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<a href="CppPointer.htm">point</a>s[i].y<a href="CppOperatorGreaterEqual.htm">&gt;=</a>maxy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppPointer.htm">point</a>s[i].y=maxy-1; <a href="CppPointer.htm">point</a>s[i].dy <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppPointer.htm">point</a>s[i].dy; }<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * pLine;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppShort.htm">short</a></b> y=0; y&lt;maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pLine=<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(Image1-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppShort.htm">short</a></b> x=0; x&lt;maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b> indexRedX&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> abs(x-<a href="CppPointer.htm">point</a>s[0].x)%maxx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b> indexRedY&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> abs(y-<a href="CppPointer.htm">point</a>s[0].y)%maxy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b> indexGreenX <a href="CppOperatorAssign.htm">=</a> abs(x-<a href="CppPointer.htm">point</a>s[1].x)%maxx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b> indexGreenY <a href="CppOperatorAssign.htm">=</a> abs(y-<a href="CppPointer.htm">point</a>s[1].y)%maxy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b> indexBlueX&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> abs(x-<a href="CppPointer.htm">point</a>s[2].x)%maxx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b> indexBlueY&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> abs(y-<a href="CppPointer.htm">point</a>s[2].y)%maxy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indexRedX&nbsp;&nbsp; <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indexGreenX <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indexBlueX&nbsp;&nbsp;<a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indexRedY&nbsp;&nbsp; <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indexGreenY <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indexBlueY&nbsp;&nbsp;<a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indexRedX&nbsp;&nbsp; &lt; <b><a href="CppThis.htm">this</a></b>-&gt;ClientWidth);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indexGreenX &lt; <b><a href="CppThis.htm">this</a></b>-&gt;ClientWidth);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indexBlueX&nbsp;&nbsp;&lt; <b><a href="CppThis.htm">this</a></b>-&gt;ClientWidth);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indexRedY&nbsp;&nbsp; &lt; <b><a href="CppThis.htm">this</a></b>-&gt;ClientHeight);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indexGreenY &lt; <b><a href="CppThis.htm">this</a></b>-&gt;ClientHeight);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indexBlueY&nbsp;&nbsp;&lt; <b><a href="CppThis.htm">this</a></b>-&gt;ClientHeight);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pLine[x*3+0]<a href="CppOperatorAssign.htm">=</a> distance[indexBlueX ][indexBlueY ]; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pLine[x*3+1]<a href="CppOperatorAssign.htm">=</a> distance[indexGreenX][indexGreenY]; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pLine[x*3+2]<a href="CppOperatorAssign.htm">=</a> distance[indexRedX&nbsp;&nbsp;][indexRedY&nbsp;&nbsp;]; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,Image1-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;Done <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormThreeDotsChasing::FormClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;reset<a href="CppPoint.htm">Point</a>s();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormThreeDotsChasing::reset<a href="CppPoint.htm">Point</a>s()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;ClientWidth;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b> height <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;ClientHeight;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> n<a href="CppPoint.htm">Point</a>s <a href="CppOperatorAssign.htm">=</a> <a href="CppPointer.htm">point</a>s.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;n<a href="CppPoint.htm">Point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[i].x <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[i].y <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>()%height;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[i].dx <a href="CppOperatorAssign.htm">=</a> (<a href="CppRand.htm">std::rand</a>()%5)-2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[i].dy <a href="CppOperatorAssign.htm">=</a> (<a href="CppRand.htm">std::rand</a>()%5)-2;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormThreeDotsChasing::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Generate vectors <b><a href="CppFor.htm">for</a></b> look-up table<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;ClientWidth;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b> height <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;ClientHeight;<br/>
<br/>
&nbsp;&nbsp;distance.resize(width);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;width; <a href="CppOperatorIncrement.htm">++</a>i) distance[i].resize(height);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Generate look-up table<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> widthD&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> heightD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(height);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxDist <a href="CppOperatorAssign.htm">=</a> sqrt( (widthD*widthD) <a href="CppOperatorPlus.htm">+</a> (heightD*heightD) );<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x&lt;width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y&lt;height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> yD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dist <a href="CppOperatorAssign.htm">=</a> sqrt( (xD*xD) <a href="CppOperatorPlus.htm">+</a> (yD*yD) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>distance[x][y] <a href="CppOperatorAssign.htm">=</a> 256.0 * dist <a href="CppOperatorDivide.htm">/</a> maxDist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;distance[x][y] <a href="CppOperatorAssign.htm">=</a> 255.0 * <a href="CppExp.htm">std::exp</a>(-dist/150.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppPoint.htm">Point</a>s<br/>
&nbsp;&nbsp;reset<a href="CppPoint.htm">Point</a>s();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create image<br/>
&nbsp;&nbsp;Image1-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> width;<br/>
&nbsp;&nbsp;Image1-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> height;<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitTimePoint.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitTimePoint.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> Unit<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>H<br/>
<a href="CppDefine.htm">#define</a> Unit<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitTallies.h"<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>() { reset(); }<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; traits;<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; preferences;<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; descents;<br/>
&nbsp;&nbsp;MateTally mateTally;<br/>
&nbsp;&nbsp;SpeciesTally speciesTallyOffspring;<br/>
&nbsp;&nbsp;SpeciesTally speciesTallyAfterSpeciesSelection;<br/>
&nbsp;&nbsp;SpeciesTally speciesTallyAfterTraitSelection;<br/>
&nbsp;&nbsp;SpeciesTally speciesTallyAfterDensityDependentSelection;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> reset();<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isNull() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> getSample(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females, <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperatorDivide.htm">operator/</a></b>=(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; valueInt) <a href="CppComment.htm">//</a>For taking the average of multiple <a href="CppTime.htm">time</a><a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(valueInt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;speciesTallyOffspring<a href="CppOperatorDivideAssign.htm">/=</a>valueInt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;speciesTallyAfterSpeciesSelection<a href="CppOperatorDivideAssign.htm">/=</a>valueInt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;speciesTallyAfterTraitSelection<a href="CppOperatorDivideAssign.htm">/=</a>valueInt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;speciesTallyAfterDensityDependentSelection<a href="CppOperatorDivideAssign.htm">/=</a>valueInt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRandom_shuffle.htm">std::random_shuffle</a>(traits.begin(),traits.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRandom_shuffle.htm">std::random_shuffle</a>(preferences.begin(),preferences.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRandom_shuffle.htm">std::random_shuffle</a>(descents.begin(),descents.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;traits.resize(traits.size()/valueInt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;preferences.resize(preferences.size()/valueInt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;descents.resize(descents.size()/valueInt);<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>&amp; <a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>) <a href="CppComment.htm">//</a>For taking the average of multiple <a href="CppTime.htm">time</a><a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mateTally<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.mateTally;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;speciesTallyOffspring<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.speciesTallyOffspring;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;speciesTallyAfterSpeciesSelection<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.speciesTallyAfterSpeciesSelection;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;speciesTallyAfterTraitSelection<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.speciesTallyAfterTraitSelection;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;speciesTallyAfterDensityDependentSelection<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.speciesTallyAfterDensityDependentSelection;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> traitSize <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.traits.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;traitSize; <a href="CppOperatorIncrement.htm">++</a>i) traits.push_back(<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.traits[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> preferenceSize <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.preferences.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;preferenceSize; <a href="CppOperatorIncrement.htm">++</a>i) preferences.push_back(<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.preferences[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> descentSize <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.descents.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;descentSize; <a href="CppOperatorIncrement.htm">++</a>i) descents.push_back(<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>.descents[i]);<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitTimePoint.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitTimePoint.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>::reset()<br/>
{<br/>
&nbsp;&nbsp;traits.resize(0);<br/>
&nbsp;&nbsp;preferences.resize(0);<br/>
&nbsp;&nbsp;descents.resize(0);<br/>
&nbsp;&nbsp;mateTally.reset();<br/>
&nbsp;&nbsp;speciesTallyOffspring.reset();<br/>
&nbsp;&nbsp;speciesTallyAfterSpeciesSelection.reset();<br/>
&nbsp;&nbsp;speciesTallyAfterTraitSelection.reset();<br/>
&nbsp;&nbsp;speciesTallyAfterDensityDependentSelection.reset();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>::isNull() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (traits.size()&gt;0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (preferences.size()&gt;0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (descents.size()&gt;0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mateTally.isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (speciesTallyOffspring.isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (speciesTallyAfterSpeciesSelection.isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (speciesTallyAfterTraitSelection.isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (speciesTallyAfterDensityDependentSelection.isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>::getSample(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Female&gt;&amp; females, <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Male&gt;&amp; males)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> sampleSize <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get sample of female preferences<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemalesA <a href="CppOperatorAssign.htm">=</a> 0, nFemalesB <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFemales <a href="CppOperatorAssign.htm">=</a> females.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nFemales ; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (females[i].species<a href="CppOperatorEqual.htm">==</a>piedFly<b><a href="CppCatch.htm">catch</a></b>er)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nFemalesA&lt;sampleSize)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preferences.push_back(females[i].preference);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;descents.push_back(females[i].descent);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>nFemalesA;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nFemalesB&lt;sampleSize)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preferences.push_back(females[i].preference);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;descents.push_back(females[i].descent);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>nFemalesB;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nFemalesA<a href="CppOperatorEqual.htm">==</a>sampleSize <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> nFemalesB<a href="CppOperatorEqual.htm">==</a>sampleSize) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nFemalesA<a href="CppOperatorLessEqual.htm">&lt;=</a>sampleSize);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nFemalesB<a href="CppOperatorLessEqual.htm">&lt;=</a>sampleSize);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get sample of male traits<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMalesA <a href="CppOperatorAssign.htm">=</a> 0, nMalesB <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nMales <a href="CppOperatorAssign.htm">=</a> males.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nMales ; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (males[i].species<a href="CppOperatorEqual.htm">==</a>piedFly<b><a href="CppCatch.htm">catch</a></b>er)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nMalesA&lt;sampleSize)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;traits.push_back(males[i].trait);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;descents.push_back(males[i].descent);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>nMalesA;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nMalesB&lt;sampleSize)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;traits.push_back(males[i].trait);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;descents.push_back(males[i].descent);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>nMalesB;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nMalesA<a href="CppOperatorEqual.htm">==</a>sampleSize <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> nMalesB<a href="CppOperatorEqual.htm">==</a>sampleSize) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nMalesA<a href="CppOperatorLessEqual.htm">&lt;=</a>sampleSize);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nMalesB<a href="CppOperatorLessEqual.htm">&lt;=</a>sampleSize);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitTimeSeries.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitTimeSeries.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> Unit<a href="CppTime.htm">Time</a>SeriesH<br/>
<a href="CppDefine.htm">#define</a> Unit<a href="CppTime.htm">Time</a>SeriesH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>.h&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;math&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>.h"<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppTime.htm">Time</a>Series<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>&gt; <a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isNull() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s.size()&gt;0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>Series&amp; <a href="CppTime.htm">time</a>Series) <a href="CppComment.htm">//</a>For taking the average of multiple <a href="CppTime.htm">time</a><a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> n<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>s <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s.size()<a href="CppOperatorEqual.htm">==</a>n<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> i=0; i&lt;n<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i]<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppTime.htm">time</a>Series.<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperatorDivide.htm">operator/</a></b>=(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; valueInt) <a href="CppComment.htm">//</a>For taking the average of multiple <a href="CppTime.htm">time</a><a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> n<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>s <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> i=0; i&lt;n<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[i]<a href="CppOperatorDivideAssign.htm">/=</a>valueInt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> getMeanAndStdErrorEnd<a href="CppPoint.htm">Point</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppTime.htm">Time</a>Series&gt;&amp; <a href="CppTime.htm">time</a>Series, <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>&amp; mean, <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>&amp; <a href="CppStd.htm">std</a>Error);<br/>
<b><a href="CppVoid.htm">void</a></b> getMeanAndStdError<a href="CppTime.htm">Time</a>Series(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppTime.htm">Time</a>Series&gt;&amp; <a href="CppTime.htm">time</a>Series, <a href="CppTime.htm">Time</a>Series&amp; mean, <a href="CppTime.htm">Time</a>Series&amp; <a href="CppStd.htm">std</a>Error);<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a>Series getAverage<a href="CppTime.htm">Time</a>Series(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppTime.htm">Time</a>Series&gt;&amp; <a href="CppTime.htm">time</a>Series);<br/>
<a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a> getAverageEnd<a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppTime.htm">Time</a>Series&gt;&amp; <a href="CppTime.htm">time</a>Series);<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitTimeSeries.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitTimeSeries.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Chris Wiley Project, simulation on mixed-pair mating<br/>
&nbsp;&nbsp;Copyright (C) 2009&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppTime.htm">Time</a>Series.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> getMeanAndStdErrorEnd<a href="CppPoint.htm">Point</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppTime.htm">Time</a>Series&gt;&amp; <a href="CppTime.htm">time</a>Series, <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>&amp; mean, <a href="CppTime.htm">Time</a><a href="CppPoint.htm">Point</a>&amp; <a href="CppStd.htm">std</a>Error)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mean.isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStd.htm">std</a>Error.isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only set: biasA, biasB, fractionMixedPairs<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> n<a href="CppTime.htm">Time</a>Series <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>Series.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> i=0; i&lt;n<a href="CppTime.htm">Time</a>Series; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the index of the <b><a href="CppFinal.htm">final</a></b> index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>Series[i].<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s.size() <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mean <a href="CppOperatorPlusAssign.htm">+=</a> <a href="CppTime.htm">time</a>Series[i].<a href="CppTime.htm">time</a><a href="CppPoint.htm">Point</a>s[<a href="CppTime.htm">time</a>];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;mean<a href="CppOperatorDivideAssign.htm">/=</a>n<a href="CppTime.htm">Time</a>Series;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> getMeanAndStdError<a href="CppTime.htm">Time</a>Series(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppTime.htm">Time</a>Series&gt;&amp; <a href="CppTime.htm">time</a>Series, <a href="CppTime.htm">Time</a>Series&amp; mean, <a href="CppTime.htm">Time</a>Series&amp; <a href="CppStd.htm">std</a>Error)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mean.isNull()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;mean <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>Series[0];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> n<a href="CppTime.htm">Time</a>Series <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>Series.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> i=1; i&lt;n<a href="CppTime.htm">Time</a>Series; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the index of the <b><a href="CppFinal.htm">final</a></b> index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mean <a href="CppOperatorPlusAssign.htm">+=</a> <a href="CppTime.htm">time</a>Series[i];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;mean<a href="CppOperatorDivideAssign.htm">/=</a>n<a href="CppTime.htm">Time</a>Series;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
