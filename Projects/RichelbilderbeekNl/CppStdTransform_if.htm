<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Transform_if</title>
  <meta name="description" content="C++ Transform_if"/>
  <meta name="keywords" content="C++ Transform_if Transform if"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppTransform_if.htm">Transform_if</a></h1>
<p>&nbsp;</p>
<p>My modification of <a href="CppTransform.htm">std::transform</a> to make it work with a <a href="CppPredicate.htm">predicate</a>.</p>
<p>&nbsp;</p>
<p>Prefer <a href="CppAlgorithm.htm">algorithms</a> over hand-written loops [1-3]. 
View <a href="CppExerciseNoForLoops.htm"> Exercise #9: No for-loops</a> to learn how to remove hand-written loops.</p>
<p>&nbsp;</p>
<h2>Transform_if function definition</h2>
<p>&nbsp;</p>
<p>Simplified from the STL that ships with C++ Builder 6.0.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="s2l0.34.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppTransform_if.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> InputIter,<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> OutputIter,<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppPredicate.htm">Predicate</a>,<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> UnaryOperation<br/>
&nbsp;&nbsp;&gt;<br/>
<b><a href="CppConst.htm">const</a></b> OutputIter Transform_if(<br/>
&nbsp;&nbsp;InputIter first,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> InputIter last,<br/>
&nbsp;&nbsp;OutputIter result,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPredicate.htm">Predicate</a> pred,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> UnaryOperation opr)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; first <a href="CppOperatorNotEqual.htm">!=</a> last; <a href="CppOperatorPlus.htm">+</a>+first, <a href="CppOperatorPlus.htm">+</a>+result)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*result <a href="CppOperatorAssign.htm">=</a> pred(*first) ? opr(*first) : *first;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppTransform_if.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> InputIter1, <br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> InputIter2, <br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> OutputIter,<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppPredicate.htm">Predicate</a>,<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> BinaryOperation&gt;<br/>
<b><a href="CppConst.htm">const</a></b> OutputIter Transform_if(<br/>
&nbsp;&nbsp;InputIter1 first1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> InputIter1 last1,<br/>
&nbsp;&nbsp;InputIter2 first2,<br/>
&nbsp;&nbsp;OutputIter result,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPredicate.htm">Predicate</a> pred,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BinaryOperation binary_op)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; first1 <a href="CppOperatorNotEqual.htm">!=</a> last1; <a href="CppOperatorPlus.htm">+</a>+first1, <a href="CppOperatorPlus.htm">+</a>+first2, <a href="CppOperatorPlus.htm">+</a>+result)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*result <a href="CppOperatorAssign.htm">=</a> pred(*first1) ? binary_op(*first1, *first2) : *first1;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li>Bjarne Stroustrup. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4. Chapter 18.12.1 : 'Prefer algorithms over loops'</li>
  <li>Herb Sutter and Andrei Alexandrescu. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 84: 'Prefer algorithm calls to handwritten loops.'</li>
  <li>Herb Sutter and Andrei Alexandrescu. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 88: 'Prefer function objects over functions as algorithm and comparer arguments.'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
