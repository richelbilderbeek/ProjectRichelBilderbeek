<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>copy constructor</title>
  <meta name="description" content="C++ copy constructor"/>
  <meta name="keywords" content="C++ copy constructor code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCopyConstructor.htm">copy constructor</a></h1>
<p>&nbsp;</p>
<p>
  A <a href="CppCopyConstructor.htm">copy constructor</a> is the 
  <a href="CppConstructor.htm">constructor</a>
  called when an <a href="CppInstance.htm">instance</a> is copied.
</p>
<p>&nbsp;</p>
<p>
  A <a href="CppCopyConstructor.htm">copy constructor</a> is a 
  <a href="CppConstructor.htm">constructor</a> in which the first <a href="CppArgument.htm">argument</a>
  is a <a href="CppReference.htm">reference</a> to an <a href="CppObject.htm">object</a> 
  that has the same type as the object to be initialized.
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MyClass<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>MyClass construtor<br/>
&nbsp;&nbsp;MyClass(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0) : m_x(x) {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>MyClass copy <a href="CppConstructor.htm">constructor</a><br/>
&nbsp;&nbsp;MyClass(<b><a href="CppConst.htm">const</a></b> MyClass&amp; other) : m_x(other.m_x) {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>MyClass copy asignment <a href="CppConstructor.htm">constructor</a><br/>
&nbsp;&nbsp;MyClass&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> MyClass&amp; rhs)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Identity test, advised by <a href="CppScottMeyers.htm">Scott Meyers</a>. Effective <a href="Cpp.htm">C++</a> (3rd edition). Item 11.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b> <a href="CppOperatorEqual.htm">==</a> &amp;rhs) <b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&amp;&gt;(m_x) <a href="CppOperatorAssign.htm">=</a> rhs.m_x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>MyClass <a href="CppDataMember.htm">data member</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_x;<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>();<br/>
&nbsp;&nbsp;MyClass a(x) ;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Call of <a href="CppConstructor.htm">constructor</a><br/>
&nbsp;&nbsp;MyClass b(a) ;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Call of copy <a href="CppConstructor.htm">constructor</a><br/>
&nbsp;&nbsp;MyClass c <a href="CppOperatorAssign.htm">=</a> b;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a>ed to call of copy <a href="CppConstructor.htm">constructor</a><br/>
&nbsp;&nbsp;MyClass d <a href="CppOperatorAssign.htm">=</a> c <a href="CppOperatorAssign.htm">=</a> b; <a href="CppComment.htm">//</a>Call of copy assignment <b><a href="CppOperator.htm">operator</a></b><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.m_x <a href="CppOperatorEqual.htm">==</a> b.m_x);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.m_x <a href="CppOperatorEqual.htm">==</a> c.m_x);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.m_x <a href="CppOperatorEqual.htm">==</a> d.m_x);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. 4.3.11: 'A copy constructor is a constructor in which the first argument is a reference to an object that has the same type as the object to be initialized.'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
