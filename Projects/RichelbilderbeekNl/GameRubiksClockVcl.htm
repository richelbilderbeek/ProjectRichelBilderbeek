<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GameRubiksClockVcl</title>
  <meta name="description" content="C++ GameRubiksClockVcl"/>
  <meta name="keywords" content="C++ GameRubiksClockVcl "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="GameRubiksClockVcl.htm">GameRubiksClockVcl</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Tue Aug  5 11:59:37 2014
 -->
<p><img src="PicVcl.png" alt="VCL"/><img src="PicCppBuilder.png" alt="C++ Builder"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="GameRubiksClockVcl.htm">Rubik's Clock (VCL)</a> is a Rubik's Clock <a href="Games.htm">game</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li>Newer: <a href="GameRubiksClock.htm">Rubik's Clock</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicDesktop.png" alt="Desktop"/> <a href="GameRubiksClock_1_0.png">View a screenshot of 'Rubik's Clock' (version 1.0)(png)</a></li>
  <li><img src="PicCppBuilder.png" alt="C++ Builder"/><img src="PicWindows.png" alt="Windows"/><img src="PicDesktop.png" alt="Desktop"/> <a href="GameRubiksClockExe_1_0.zip">Download a Windows executable of 'Rubik's Clock' (version 1.0)(zip)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameRubiksClockVcl/ProjectRubiksClock.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameRubiksClockVcl/ProjectRubiksClock.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitForm<a href="CppRubiksClock.htm">RubiksClock</a>Main<a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppRubiksClock.htm">RubiksClock</a>Main);<br/>
USEFORM("UnitForm<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a><a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a>);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "Rubik's Clock Simulator";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TForm<a href="CppRubiksClock.htm">RubiksClock</a>Main), &amp;Form<a href="CppRubiksClock.htm">RubiksClock</a>Main);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameRubiksClockVcl/UnitFormRubiksClockAbout.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameRubiksClockVcl/UnitFormRubiksClockAbout.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Rubik's Clock Simulator. Simulates Rubik's Clock.<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a>H<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;jpeg.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a> : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label6;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label7;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label9;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label10;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label11;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label12;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TForm<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a> *Form<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameRubiksClockVcl/UnitFormRubiksClockAbout.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameRubiksClockVcl/UnitFormRubiksClockAbout.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Rubik's Clock Simulator. Simulates Rubik's Clock.<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a> *Form<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a>::TForm<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameRubiksClockVcl/UnitFormRubiksClockMain.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameRubiksClockVcl/UnitFormRubiksClockMain.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Rubik's Clock Simulator. Simulates Rubik's Clock.<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="CppRubiksClock.htm">RubiksClock</a>MainH<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="CppRubiksClock.htm">RubiksClock</a>MainH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppRubiksClock.htm">RubiksClock</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="CppRubiksClock.htm">RubiksClock</a>Main : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageClockFront;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageClockBack;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *Button<a href="CppAbout.htm">About</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonShuffle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageClockFrontMouseDown(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMouseButton Button, TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageClockBackMouseDown(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMouseButton Button, TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Button<a href="CppAbout.htm">About</a>Click(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonShuffleClick(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<a href="CppRubiksClock.htm">RubiksClock</a> mClock;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawScreen();<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TForm<a href="CppRubiksClock.htm">RubiksClock</a>Main(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="CppRubiksClock.htm">RubiksClock</a>Main *Form<a href="CppRubiksClock.htm">RubiksClock</a>Main;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Draw<a href="CppRubiksClock.htm">RubiksClock</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s&amp; <a href="CppTime.htm">time</a>s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Pegs&amp; pegs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TColor colorCasing,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TColor colorClock,<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image);<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>Vcl(<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue&nbsp;&nbsp;);<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameRubiksClockVcl/UnitFormRubiksClockMain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameRubiksClockVcl/UnitFormRubiksClockMain.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Rubik's Clock Simulator. Simulates Rubik's Clock.<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppRubiksClock.htm">RubiksClock</a>Main.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="CppRubiksClock.htm">RubiksClock</a>Main *Form<a href="CppRubiksClock.htm">RubiksClock</a>Main;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="CppRubiksClock.htm">RubiksClock</a>Main::TForm<a href="CppRubiksClock.htm">RubiksClock</a>Main(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;OnResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="CppRubiksClock.htm">RubiksClock</a>Main::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ImageClockFront-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ClientWidth <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;ImageClockFront-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ClientHeight <a href="CppOperatorMinus.htm">-</a> Panel1-&gt;Height;<br/>
&nbsp;&nbsp;ImageClockBack-&gt;Left <a href="CppOperatorAssign.htm">=</a> ImageClockFront-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;ImageClockBack-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ClientWidth <a href="CppOperatorMinus.htm">-</a> ImageClockFront-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;ImageClockBack-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ClientHeight <a href="CppOperatorMinus.htm">-</a> Panel1-&gt;Height;<br/>
&nbsp;&nbsp;DrawScreen();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TForm<a href="CppRubiksClock.htm">RubiksClock</a>Main::DrawScreen()<br/>
{<br/>
&nbsp;&nbsp;ImageClockFront-&gt;Visible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;ImageClockBack-&gt;Visible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;Draw<a href="CppRubiksClock.htm">RubiksClock</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.GetFront<a href="CppTime.htm">Time</a>s(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.GetFrontPegs(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TColor&gt;(RGB(255,96,96)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TColor&gt;(RGB(255,64,64)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageClockFront);<br/>
&nbsp;&nbsp;Draw<a href="CppRubiksClock.htm">RubiksClock</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.GetBack<a href="CppTime.htm">Time</a>s(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.GetBackPegs(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TColor&gt;(RGB(96,96,255)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;TColor&gt;(RGB(64,64,255)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageClockBack);<br/>
&nbsp;&nbsp;ImageClockFront-&gt;Visible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;ImageClockBack-&gt;Visible <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Draw<a href="CppRubiksClock.htm">RubiksClock</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s&amp; <a href="CppTime.htm">time</a>s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Pegs&amp; pegs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TColor colorCasing,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TColor colorClock,<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<a href="CppPaint.htm">Paint</a>Vcl(image,0,0,0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw <a href="CppMain.htm">main</a> clock ring<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color <a href="CppOperatorAssign.htm">=</a> clBlack;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> colorCasing;<br/>
&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Ellipse(0,0,maxx,maxy);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the clocks and pegs<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(maxx) <a href="CppOperatorDivide.htm">/</a> 3.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(maxy) <a href="CppOperatorDivide.htm">/</a> 3.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dXtenth <a href="CppOperatorAssign.htm">=</a> 0.1 * dX;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dYtenth <a href="CppOperatorAssign.htm">=</a> 0.1 * dY;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw outer ring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> colorCasing;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color <a href="CppOperatorAssign.htm">=</a> colorClock;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Ellipse(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x+0) * dX,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y+0) * dY,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x+1) * dX,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y+1) * dY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw clock ring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> colorClock;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Ellipse(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x+0) * dX <a href="CppOperatorPlus.htm">+</a> dXtenth,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y+0) * dY <a href="CppOperatorPlus.htm">+</a> dYtenth,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x+1) * dX <a href="CppOperatorMinus.htm">-</a> dXtenth,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y+1) * dY <a href="CppOperatorMinus.htm">-</a> dYtenth);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color <a href="CppOperatorAssign.htm">=</a> clBlack;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> (2.0 * <a href="CppM_PI.htm">M_PI</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppTime.htm">time</a>s.<a href="CppTime.htm">time</a>s[x][y]) <a href="CppOperatorDivide.htm">/</a> 12.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;MoveTo(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x)+0.5) * dX,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y)+0.5) * dY );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;LineTo(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x)+0.5) * dX) <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdSin.htm">std::sin</a>(angle) * ((0.5 * dX) <a href="CppOperatorMinus.htm">-</a> dXtenth) ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y)+0.5) * dY) <a href="CppOperatorMinus.htm">-</a> (<a href="CppStdCos.htm">std::cos</a>(angle) * ((0.5 * dY) <a href="CppOperatorMinus.htm">-</a> dYtenth) ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Width <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the pegs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Pen-&gt;Color <a href="CppOperatorAssign.htm">=</a> clBlack;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Brush-&gt;Color <a href="CppOperatorAssign.htm">=</a> clYellow;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> delta <a href="CppOperatorAssign.htm">=</a> (pegs.pegs[x][y] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> ? 10 : 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>delta; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Ellipse(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( i <a href="CppOperatorPlus.htm">+</a> ((<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x)+1.0) * dX) <a href="CppOperatorPlus.htm">+</a> dXtenth),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( i <a href="CppOperatorPlus.htm">+</a> ((<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y)+1.0) * dY) <a href="CppOperatorPlus.htm">+</a> dYtenth),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( i <a href="CppOperatorPlus.htm">+</a> ((<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x)+1.0) * dX) <a href="CppOperatorMinus.htm">-</a> dXtenth),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( i <a href="CppOperatorPlus.htm">+</a> ((<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y)+1.0) * dY) <a href="CppOperatorMinus.htm">-</a> dYtenth) );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppPaint.htm">Paint</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>Vcl(<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> myLine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>*&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+2] <a href="CppOperatorAssign.htm">=</a> red&nbsp;&nbsp;; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+1] <a href="CppOperatorAssign.htm">=</a> green; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine[x*3+0] <a href="CppOperatorAssign.htm">=</a> blue ; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="CppRubiksClock.htm">RubiksClock</a>Main::ImageClockFrontMouseDown(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMouseButton Button, TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X, <b><a href="CppInt.htm">int</a></b> Y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> ImageClockFront-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> ImageClockFront-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( X &lt; maxx <a href="CppOperatorDivide.htm">/</a> 6 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &lt; maxy <a href="CppOperatorDivide.htm">/</a> 6)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(topLeft,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbRight)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(topLeft,11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &gt; 5 * (maxx <a href="CppOperatorDivide.htm">/</a> 6) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &lt; maxy <a href="CppOperatorDivide.htm">/</a> 6)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(topRight,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbRight)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(topRight,11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &lt; maxx <a href="CppOperatorDivide.htm">/</a> 6 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &gt; 5 * (maxy <a href="CppOperatorDivide.htm">/</a> 6) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Wheel bottom left <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(bottomLeft,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbRight)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(bottomLeft,11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &gt; 5 * (maxx <a href="CppOperatorDivide.htm">/</a> 6) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &gt; 5 * (maxy <a href="CppOperatorDivide.htm">/</a> 6) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Wheel bottom right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(bottomRight,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbRight)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(bottomRight,11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &gt; (maxx <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorMinus.htm">-</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> X &lt; (maxx <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorPlus.htm">+</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &gt; (maxy <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorMinus.htm">-</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &lt; (maxy <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorPlus.htm">+</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.ChangePeg(topLeft, !mClock.GetFrontPegs().pegs[0][0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &gt; (2 *(maxx <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorMinus.htm">-</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> X &lt; (2 * (maxx <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorPlus.htm">+</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &gt; (maxy <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorMinus.htm">-</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &lt; (maxy <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorPlus.htm">+</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.ChangePeg(topRight, !mClock.GetFrontPegs().pegs[1][0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &gt; (maxx <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorMinus.htm">-</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> X &lt; (maxx <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorPlus.htm">+</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &gt; (2 * (maxy <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorMinus.htm">-</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &lt; (2 * (maxy <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorPlus.htm">+</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.ChangePeg(bottomLeft, !mClock.GetFrontPegs().pegs[0][1]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &gt; (2 * (maxx <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorMinus.htm">-</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> X &lt; (2 * (maxx <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorPlus.htm">+</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &gt; (2 * (maxy <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorMinus.htm">-</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &lt; (2 * (maxy <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorPlus.htm">+</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.ChangePeg(bottomRight, !mClock.GetFrontPegs().pegs[1][1]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawScreen();<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="CppRubiksClock.htm">RubiksClock</a>Main::ImageClockBackMouseDown(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TObject *Sender, TMouseButton Button, TShift<a href="CppState.htm">State</a> Shift, <b><a href="CppInt.htm">int</a></b> X,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> ImageClockFront-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> ImageClockFront-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( X &lt; maxx <a href="CppOperatorDivide.htm">/</a> 6 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &lt; maxy <a href="CppOperatorDivide.htm">/</a> 6)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(topRight,11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbRight)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(topRight,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &gt; 5 * (maxx <a href="CppOperatorDivide.htm">/</a> 6) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &lt; maxy <a href="CppOperatorDivide.htm">/</a> 6)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(topLeft,11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbRight)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(topLeft,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &lt; maxx <a href="CppOperatorDivide.htm">/</a> 6 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &gt; 5 * (maxy <a href="CppOperatorDivide.htm">/</a> 6) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Wheel bottom left<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(bottomRight,11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbRight)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(bottomRight,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &gt; 5 * (maxx <a href="CppOperatorDivide.htm">/</a> 6) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &gt; 5 * (maxy <a href="CppOperatorDivide.htm">/</a> 6) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Wheel bottom right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(bottomLeft,11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (Button <a href="CppOperatorEqual.htm">==</a> mbRight)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(bottomLeft,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &gt; (maxx <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorMinus.htm">-</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> X &lt; (maxx <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorPlus.htm">+</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &gt; (maxy <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorMinus.htm">-</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &lt; (maxy <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorPlus.htm">+</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.ChangePeg(topRight, !mClock.GetFrontPegs().pegs[1][0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &gt; (2 *(maxx <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorMinus.htm">-</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> X &lt; (2 * (maxx <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorPlus.htm">+</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &gt; (maxy <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorMinus.htm">-</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &lt; (maxy <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorPlus.htm">+</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.ChangePeg(topLeft, !mClock.GetFrontPegs().pegs[0][0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &gt; (maxx <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorMinus.htm">-</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> X &lt; (maxx <a href="CppOperatorDivide.htm">/</a> 3) <a href="CppOperatorPlus.htm">+</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &gt; (2 * (maxy <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorMinus.htm">-</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &lt; (2 * (maxy <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorPlus.htm">+</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.ChangePeg(bottomRight, !mClock.GetFrontPegs().pegs[1][1]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ( X &gt; (2 * (maxx <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorMinus.htm">-</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> X &lt; (2 * (maxx <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorPlus.htm">+</a> (maxx <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &gt; (2 * (maxy <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorMinus.htm">-</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> Y &lt; (2 * (maxy <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorPlus.htm">+</a> (maxy <a href="CppOperatorDivide.htm">/</a> 10) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.ChangePeg(bottomLeft, !mClock.GetFrontPegs().pegs[0][1]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DrawScreen();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="CppRubiksClock.htm">RubiksClock</a>Main::Button<a href="CppAbout.htm">About</a>Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;TForm<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a>&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppAbout.htm">About</a>(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm<a href="CppRubiksClock.htm">RubiksClock</a>Main::ButtonShuffleClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>10000; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set a random peg<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.ChangePeg(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<a href="CppRubiksClock.htm">RubiksClock</a>Side&gt;(<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 4<a href="CppOperatorModulus.htm">%</a> 4),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 4) <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 0 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn a random wheel<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mClock.TurnWheel(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<a href="CppRubiksClock.htm">RubiksClock</a>Side&gt;(<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 4 <a href="CppOperatorModulus.htm">%</a> 4),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 12);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;DrawScreen();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameRubiksClockVcl/UnitRubiksClock.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameRubiksClockVcl/UnitRubiksClock.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Rubik's Clock Simulator. Simulates Rubik's Clock.<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> Unit<a href="CppRubiksClock.htm">RubiksClock</a>H<br/>
<a href="CppDefine.htm">#define</a> Unit<a href="CppRubiksClock.htm">RubiksClock</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s<br/>
{<br/>
&nbsp;&nbsp;<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s();<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>s[3][3];<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s&amp; rhs);<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Pegs<br/>
{<br/>
&nbsp;&nbsp;<a href="CppRubiksClock.htm">RubiksClock</a>Pegs();<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> pegs[2][2]; <a href="CppComment.htm">//</a>Is peg pressed?<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Pegs&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Pegs&amp; rhs);<br/>
<br/>
<a href="CppRubiksClock.htm">RubiksClock</a>Pegs CreatePegsFromIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index);<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Side<br/>
{<br/>
&nbsp;&nbsp;topLeft, topRight, bottomLeft, bottomRight<br/>
};<br/>
<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppRubiksClock.htm">RubiksClock</a>();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ChangePeg(<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Side side, <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> press); <a href="CppComment.htm">//</a>Seen from front<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TurnWheel(<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Side side, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps); <a href="CppComment.htm">//</a>Seen from front<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TurnWheelTopLeft(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps); <a href="CppComment.htm">//</a>Seen from front<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TurnWheelTopRight(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps); <a href="CppComment.htm">//</a>Seen from front<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TurnWheelBottomLeft(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps); <a href="CppComment.htm">//</a>Seen from front<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TurnWheelBottomRight(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps); <a href="CppComment.htm">//</a>Seen from front<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Check();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s&amp; GetFront<a href="CppTime.htm">Time</a>s() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s&amp; GetBack<a href="CppTime.htm">Time</a>s() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Pegs&amp; GetFrontPegs() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Pegs GetBackPegs() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s mFront;<br/>
&nbsp;&nbsp;<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s mBack;<br/>
&nbsp;&nbsp;<a href="CppRubiksClock.htm">RubiksClock</a>Pegs mPegs;<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameRubiksClockVcl/UnitRubiksClock.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameRubiksClockVcl/UnitRubiksClock.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Rubik's Clock Simulator. Simulates Rubik's Clock.<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Unit<a href="CppRubiksClock.htm">RubiksClock</a>.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s::<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>s[x][y] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.<a href="CppTime.htm">time</a>s[x][y] <a href="CppOperatorNotEqual.htm">!=</a> rhs.<a href="CppTime.htm">time</a>s[x][y]) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppRubiksClock.htm">RubiksClock</a>Pegs::<a href="CppRubiksClock.htm">RubiksClock</a>Pegs()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pegs[x][y] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Pegs&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Pegs&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.pegs[x][y] <a href="CppOperatorNotEqual.htm">!=</a> rhs.pegs[x][y]) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppRubiksClock.htm">RubiksClock</a>Pegs CreatePegsFromIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 0: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 1: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 2: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 3: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 4: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 5: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 6: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 7: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 8: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 9: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 10: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 11: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 12: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 13: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 14: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 15: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
<br/>
&nbsp;&nbsp;<a href="CppRubiksClock.htm">RubiksClock</a>Pegs pegs;<br/>
&nbsp;&nbsp;pegs.pegs[0][0] <a href="CppOperatorAssign.htm">=</a> ( index &amp; 1 <a href="CppOperatorEqual.htm">==</a> 1 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;pegs.pegs[1][0] <a href="CppOperatorAssign.htm">=</a> ( index &amp; 2 <a href="CppOperatorEqual.htm">==</a> 2 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;pegs.pegs[0][1] <a href="CppOperatorAssign.htm">=</a> ( index &amp; 4 <a href="CppOperatorEqual.htm">==</a> 4 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;pegs.pegs[1][1] <a href="CppOperatorAssign.htm">=</a> ( index &amp; 8 <a href="CppOperatorEqual.htm">==</a> 8 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pegs;<br/>
<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppRubiksClock.htm">RubiksClock</a>::<a href="CppRubiksClock.htm">RubiksClock</a>()<br/>
{<br/>
&nbsp;&nbsp;Check();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>::ChangePeg(<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Side side, <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> press)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (side <a href="CppOperatorEqual.htm">==</a> topLeft <a href="CppOperatorLogicalOr.htm">||</a> side <a href="CppOperatorEqual.htm">==</a> bottomLeft ? 0 : 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (side <a href="CppOperatorEqual.htm">==</a> topLeft <a href="CppOperatorLogicalOr.htm">||</a> side <a href="CppOperatorEqual.htm">==</a> topRight ? 0 : 1);<br/>
&nbsp;&nbsp;mPegs.pegs[x][y] <a href="CppOperatorAssign.htm">=</a> press;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>::TurnWheel(<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Side side, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (side)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> topLeft: TurnWheelTopLeft(nSteps); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> topRight: TurnWheelTopRight(nSteps); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> bottomLeft: TurnWheelBottomLeft(nSteps); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> bottomRight: TurnWheelBottomRight(nSteps); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>::TurnWheelTopLeft(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnFront[3][3];<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnBack[3][3];<br/>
<br/>
&nbsp;&nbsp;turnFront[0][0] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;turnFront[1][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[2][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[0][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[1][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[2][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[0][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][1] ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[1][2] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[2][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1] ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;turnBack[0][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[1][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[2][0] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;turnBack[0][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a>&nbsp;&nbsp; mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[1][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[2][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;turnBack[0][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[1][2] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[2][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][1] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnFront[x][y] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { mFront.<a href="CppTime.htm">time</a>s[x][y] <a href="CppOperatorPlusAssign.htm">+=</a> nSteps&nbsp;&nbsp;&nbsp;&nbsp; ; mFront.<a href="CppTime.htm">time</a>s[x][y]<a href="CppOperatorModulusAssign.htm">%=</a>12; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnBack[x][y]&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { mBack.<a href="CppTime.htm">time</a>s[x][y]&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a> (12-nSteps); mBack.<a href="CppTime.htm">time</a>s[x][y] <a href="CppOperatorModulusAssign.htm">%=</a>12; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>::TurnWheelTopRight(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnFront[3][3];<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnBack[3][3];<br/>
<br/>
&nbsp;&nbsp;turnFront[2][0] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;turnFront[1][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[0][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[2][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[1][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[0][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[2][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1] ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[1][2] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[0][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][1] ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;turnBack[2][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][0] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[1][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[0][0] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;turnBack[2][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a>&nbsp;&nbsp; mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[1][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[0][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;turnBack[2][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][1] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[1][2] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[0][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnFront[x][y] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { mFront.<a href="CppTime.htm">time</a>s[x][y] <a href="CppOperatorPlusAssign.htm">+=</a> nSteps&nbsp;&nbsp;&nbsp;&nbsp; ; mFront.<a href="CppTime.htm">time</a>s[x][y]<a href="CppOperatorModulusAssign.htm">%=</a>12; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnBack[x][y]&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { mBack.<a href="CppTime.htm">time</a>s[x][y]&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a> (12-nSteps); mBack.<a href="CppTime.htm">time</a>s[x][y] <a href="CppOperatorModulusAssign.htm">%=</a>12; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>::TurnWheelBottomLeft(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnFront[3][3];<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnBack[3][3];<br/>
<br/>
&nbsp;&nbsp;turnFront[0][2] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;turnFront[1][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[2][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[0][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[1][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[2][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[0][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][0] ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[1][0] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[2][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0] ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;turnBack[0][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[1][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[2][2] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;turnBack[0][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a>&nbsp;&nbsp; mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[1][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[2][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;turnBack[0][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[1][0] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[2][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][0] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnFront[x][y] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { mFront.<a href="CppTime.htm">time</a>s[x][y] <a href="CppOperatorPlusAssign.htm">+=</a> nSteps&nbsp;&nbsp;&nbsp;&nbsp; ; mFront.<a href="CppTime.htm">time</a>s[x][y]<a href="CppOperatorModulusAssign.htm">%=</a>12; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnBack[x][y]&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { mBack.<a href="CppTime.htm">time</a>s[x][y]&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a> (12-nSteps); mBack.<a href="CppTime.htm">time</a>s[x][y] <a href="CppOperatorModulusAssign.htm">%=</a>12; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>::TurnWheelBottomRight(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps)<br/>
{<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnFront[3][3];<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnBack[3][3];<br/>
<br/>
&nbsp;&nbsp;turnFront[2][2] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;turnFront[1][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[0][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[2][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[1][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[0][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[2][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0] ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[1][0] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnFront[0][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][0] ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;turnBack[2][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][1] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[1][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[0][2] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;turnBack[2][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a>&nbsp;&nbsp; mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[1][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[0][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;turnBack[2][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][0] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[1][0] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[1][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[0][0] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;turnBack[0][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1] <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0] ? <b><a href="CppTrue.htm">true</a></b>: <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnFront[x][y] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { mFront.<a href="CppTime.htm">time</a>s[x][y] <a href="CppOperatorPlusAssign.htm">+=</a> nSteps&nbsp;&nbsp;&nbsp;&nbsp; ; mFront.<a href="CppTime.htm">time</a>s[x][y]<a href="CppOperatorModulusAssign.htm">%=</a>12; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnBack[x][y]&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) { mBack.<a href="CppTime.htm">time</a>s[x][y]&nbsp;&nbsp;<a href="CppOperatorPlusAssign.htm">+=</a> (12-nSteps); mBack.<a href="CppTime.htm">time</a>s[x][y] <a href="CppOperatorModulusAssign.htm">%=</a>12; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s&amp; <a href="CppRubiksClock.htm">RubiksClock</a>::GetFront<a href="CppTime.htm">Time</a>s() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mFront;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s&amp; <a href="CppRubiksClock.htm">RubiksClock</a>::GetBack<a href="CppTime.htm">Time</a>s() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mBack;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Pegs&amp; <a href="CppRubiksClock.htm">RubiksClock</a>::GetFrontPegs() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mPegs;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Pegs <a href="CppRubiksClock.htm">RubiksClock</a>::GetBackPegs() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppRubiksClock.htm">RubiksClock</a>Pegs back;<br/>
&nbsp;&nbsp;back.pegs[0][0] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[1][0];<br/>
&nbsp;&nbsp;back.pegs[1][0] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[0][0];<br/>
&nbsp;&nbsp;back.pegs[0][1] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[1][1];<br/>
&nbsp;&nbsp;back.pegs[1][1] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[0][1];<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> back;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>::Check()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s originalFront <a href="CppOperatorAssign.htm">=</a> mFront;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s originalBack <a href="CppOperatorAssign.htm">=</a> mBack;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Pegs originalPegs <a href="CppOperatorAssign.htm">=</a> mPegs;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the corner clocks<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( mFront.<a href="CppTime.htm">time</a>s[0][0] <a href="CppOperatorPlus.htm">+</a> mBack.<a href="CppTime.htm">time</a>s[2][0] <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> mFront.<a href="CppTime.htm">time</a>s[0][0] <a href="CppOperatorPlus.htm">+</a> mBack.<a href="CppTime.htm">time</a>s[2][0] <a href="CppOperatorEqual.htm">==</a> 12);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( mFront.<a href="CppTime.htm">time</a>s[2][0] <a href="CppOperatorPlus.htm">+</a> mBack.<a href="CppTime.htm">time</a>s[0][0] <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> mFront.<a href="CppTime.htm">time</a>s[2][0] <a href="CppOperatorPlus.htm">+</a> mBack.<a href="CppTime.htm">time</a>s[0][0] <a href="CppOperatorEqual.htm">==</a> 12);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( mFront.<a href="CppTime.htm">time</a>s[0][2] <a href="CppOperatorPlus.htm">+</a> mBack.<a href="CppTime.htm">time</a>s[2][2] <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> mFront.<a href="CppTime.htm">time</a>s[0][2] <a href="CppOperatorPlus.htm">+</a> mBack.<a href="CppTime.htm">time</a>s[2][2] <a href="CppOperatorEqual.htm">==</a> 12);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( mFront.<a href="CppTime.htm">time</a>s[2][2] <a href="CppOperatorPlus.htm">+</a> mBack.<a href="CppTime.htm">time</a>s[0][2] <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> mFront.<a href="CppTime.htm">time</a>s[2][2] <a href="CppOperatorPlus.htm">+</a> mBack.<a href="CppTime.htm">time</a>s[0][2] <a href="CppOperatorEqual.htm">==</a> 12);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check all peg combinations<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>16; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs <a href="CppOperatorAssign.htm">=</a> CreatePegsFromIndex(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check all wheels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> after turning around in two steps, everything stays the same<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s front <a href="CppOperatorAssign.htm">=</a> mFront;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppTime.htm">Time</a>s back <a href="CppOperatorAssign.htm">=</a> mBack;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>Side side <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<a href="CppRubiksClock.htm">RubiksClock</a>Side&gt;(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps <a href="CppOperatorAssign.htm">=</a> <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 12;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;TurnWheel(side,nSteps);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn 11<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;TurnWheel(side,12-nSteps);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( mFront <a href="CppOperatorEqual.htm">==</a> front);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( mBack <a href="CppOperatorEqual.htm">==</a> back);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
