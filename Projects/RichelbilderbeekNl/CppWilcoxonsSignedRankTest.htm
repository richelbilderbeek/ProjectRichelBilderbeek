<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>WilcoxonsSignedRankTest</title>
  <meta name="description" content="C++ WilcoxonsSignedRankTest"/>
  <meta name="keywords" content="C++ WilcoxonsSignedRankTest "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppWilcoxonsSignedRankTest.htm">WilcoxonsSignedRankTest</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.627 at Wed Apr  2 15:22:27 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppWilcoxonsSignedRankTest.htm">Wilcoxon's signed rank test</a> is a <a href="CppMath.htm">math</a> <a href="CppCodeSnippets.htm">code snippet</a> that performs an example from [1].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li>David Heath. An introduction to experimental design and statistics for biology. 1995. ISBN: 1-85728-132-2 PB.</li>
</ol>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.10 (saucy)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.7.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.1</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.1</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppWilcoxonsSignedRankTest/CppWilcoxonsSignedRankTest.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppWilcoxonsSignedRankTest/CppWilcoxonsSignedRankTest.pro" border = "1"><tr><td><code>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a><br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= app_bundle<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= qt<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppWilcoxonsSignedRankTest/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppWilcoxonsSignedRankTest/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClimitsH.htm">climits</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppLimitsH.htm">limits</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppAccumulate_if.htm<br/>
<b><a href="CppTemplate.htm">template</a></b><br/>
&lt;<br/>
&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> Input<a href="CppIterator.htm">Iterator</a>,<br/>
&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> ElementType,<br/>
&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> <a href="CppPredicate.htm">Predicate</a><br/>
&gt;<br/>
<b><a href="CppConst.htm">const</a></b> ElementType <a href="CppAccumulate_if.htm">accumulate_if</a>(<br/>
&nbsp;&nbsp;Input<a href="CppIterator.htm">Iterator</a> first,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Input<a href="CppIterator.htm">Iterator</a> last,<br/>
&nbsp;&nbsp;ElementType init,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPredicate.htm">Predicate</a> <a href="CppPredicate.htm">predicate</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (; first <a href="CppOperatorNotEqual.htm">!=</a> last; <a href="CppOperatorIncrement.htm">++</a>first)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppPredicate.htm">predicate</a>(*first)) init <a href="CppOperatorPlusAssign.htm">+=</a> *first;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>Data from:<br/>
<a href="CppComment.htm">//</a> * David Heath. An introduction to experimental design<br/>
<a href="CppComment.htm">//</a> and statistics <b><a href="CppFor.htm">for</a></b> biology. 1995. ISBN: 1-85728-132-2 PB.<br/>
<a href="CppComment.htm">//</a> Page 263, box 10.3: Wilcoxon's <b><a href="CppSigned.htm">signed</a></b> rank test <b><a href="CppFor.htm">for</a></b><br/>
<a href="CppComment.htm">//</a> paired samples: urea concentration in drinkers<br/>
<a href="CppComment.htm">//</a> and non-drinkers<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; GetValuesNonDrinkers()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v;<br/>
&nbsp;&nbsp;v.push_back( 4.4);<br/>
&nbsp;&nbsp;v.push_back(18.6);<br/>
&nbsp;&nbsp;v.push_back( 9.0);<br/>
&nbsp;&nbsp;v.push_back(20.0);<br/>
&nbsp;&nbsp;v.push_back(31.5);<br/>
&nbsp;&nbsp;v.push_back(36.0);<br/>
&nbsp;&nbsp;v.push_back(17.0);<br/>
&nbsp;&nbsp;v.push_back(17.2);<br/>
&nbsp;&nbsp;v.push_back(20.2);<br/>
&nbsp;&nbsp;v.push_back(11.5);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>Data from:<br/>
<a href="CppComment.htm">//</a> * David Heath. An introduction to experimental design<br/>
<a href="CppComment.htm">//</a> and statistics <b><a href="CppFor.htm">for</a></b> biology. 1995. ISBN: 1-85728-132-2 PB.<br/>
<a href="CppComment.htm">//</a> Page 263, box 10.3: Wilcoxon's <b><a href="CppSigned.htm">signed</a></b> rank test <b><a href="CppFor.htm">for</a></b><br/>
<a href="CppComment.htm">//</a> paired samples: urea concentration in drinkers<br/>
<a href="CppComment.htm">//</a> and non-drinkers<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; GetValuesDrinkers()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v;<br/>
&nbsp;&nbsp;v.push_back( 5.0);<br/>
&nbsp;&nbsp;v.push_back(17.2);<br/>
&nbsp;&nbsp;v.push_back( 9.0);<br/>
&nbsp;&nbsp;v.push_back(24.0);<br/>
&nbsp;&nbsp;v.push_back(18.5);<br/>
&nbsp;&nbsp;v.push_back(21.5);<br/>
&nbsp;&nbsp;v.push_back( 7.6);<br/>
&nbsp;&nbsp;v.push_back( 5.8);<br/>
&nbsp;&nbsp;v.push_back( 7.6);<br/>
&nbsp;&nbsp;v.push_back( 7.5);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> Sign { minus <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1, none <a href="CppOperatorAssign.htm">=</a> 0, plus <a href="CppOperatorAssign.htm">=</a> 1};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Sign&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (s <a href="CppOperatorEqual.htm">==</a> minus ? "-" : (s <a href="CppOperatorEqual.htm">==</a> none ? " " : "+") );<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Sign&gt; GetSigns(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; b)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size()<a href="CppOperatorEqual.htm">==</a>b.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "The two vectors must have equal "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "sizes <b><a href="CppFor.htm">for</a></b> a paired test");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> a.size();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Sign&gt; v(sz);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i] <a href="CppOperatorAssign.htm">=</a> (a[i]<a href="CppOperatorEqual.htm">==</a>b[i] ? none<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : (a[i]&lt;b[i]? minus : plus) );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetDifference.htm">GetDifference</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt; <a href="CppGetDifference.htm">GetDifference</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; b)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size()<a href="CppOperatorEqual.htm">==</a>b.size());<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;T&gt; v(a);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i]<a href="CppOperatorMinusAssign.htm">-=</a>b[i];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetAbs.htm">GetAbs</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; <b><a href="CppStruct.htm">struct</a></b> Abs<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> <a href="CppUnary_function.htm">std::unary_function</a>&lt;T,T&gt;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T <b><a href="CppOperatorFunctionCall.htm">operator()</a></b>(<b><a href="CppConst.htm">const</a></b> T&amp; x) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> (x &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;T&gt;(0.0) ? <a href="CppOperatorMinus.htm">-</a>x : x); }<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetAbs.htm">GetAbs</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMakeAbs.htm">MakeAbs</a>(<a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),v.begin(),Abs&lt;T&gt;());<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetAbs.htm">GetAbs</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt; <a href="CppGetAbs.htm">GetAbs</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; a)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;T&gt; v(a);<br/>
&nbsp;&nbsp;<a href="CppMakeAbs.htm">MakeAbs</a>(v);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppMinElementAbove.htm">MinElementAbove</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppMinElementAbove.htm">MinElementAbove</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> above)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max();<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> lowest <a href="CppOperatorAssign.htm">=</a> max;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::const_iterator j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::const_iterator i <a href="CppOperatorAssign.htm">=</a> v.begin();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*i &gt; above <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> *i &lt; lowest)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowest <a href="CppOperatorAssign.htm">=</a> *i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (lowest <a href="CppOperatorNotEqual.htm">!=</a> max ? lowest : above);<br/>
}<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>Thanks to Senbong G <b><a href="CppFor.htm">for</a></b> detecting and fixing a <a href="CppBug.htm">bug</a> in <b><a href="CppThis.htm">this</a></b> code<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; GetRanks(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &amp;v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppSize_t.htm">size_t</a></b> s <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; w(s,0.0);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> lowest_value <a href="CppOperatorAssign.htm">=</a> <a href="CppMinElementAbove.htm">MinElementAbove</a>(v, 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> rank <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(lowest_value <a href="CppOperatorNotEqual.htm">!=</a> 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>rank;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_with_this_value <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCount.htm">std::count</a>(v.begin(), v.end(), lowest_value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> assigned_rank <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(rank <a href="CppOperatorPlus.htm">+</a> (rank <a href="CppOperatorPlus.htm">+</a> n_with_this_value <a href="CppOperatorMinus.htm">-</a> 1)) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppSize_t.htm">size_t</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i <a href="CppOperatorNotEqual.htm">!=</a> s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(v[i] <a href="CppOperatorEqual.htm">==</a> lowest_value)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[i] <a href="CppOperatorAssign.htm">=</a> assigned_rank;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>rank;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> end <b><a href="CppIf.htm">if</a></b><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_lowest_value <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMinElementAbove.htm">MinElementAbove</a>(v, lowest_value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(new_lowest_value <a href="CppOperatorEqual.htm">==</a> lowest_value)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lowest_value <a href="CppOperatorAssign.htm">=</a> new_lowest_value;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_with_this_value <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCount.htm">std::count</a>(v.begin(), v.end(), lowest_value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_with_this_value &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> assigned_rank <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(rank <a href="CppOperatorPlus.htm">+</a> (rank <a href="CppOperatorPlus.htm">+</a> n_with_this_value <a href="CppOperatorMinus.htm">-</a> 1))/2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(assigned_rank &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppSize_t.htm">size_t</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i <a href="CppOperatorNotEqual.htm">!=</a> s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(v[i] <a href="CppOperatorEqual.htm">==</a> lowest_value)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[i] <a href="CppOperatorAssign.htm">=</a> assigned_rank;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rank <a href="CppOperatorPlusAssign.htm">+=</a> n_with_this_value;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; GetSignedRanks(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Sign&gt;&amp; signs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; ranks)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(signs.size() <a href="CppOperatorEqual.htm">==</a> ranks.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> signs.size();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v(sz);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a> sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i] <a href="CppOperatorAssign.htm">=</a> (signs[i] <a href="CppOperatorEqual.htm">==</a> minus ? <a href="CppOperatorMinus.htm">-</a>ranks[i] : ranks[i]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSumPositives.htm">SumPositives</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppSumPositives.htm">SumPositives</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ::<a href="CppAccumulate_if.htm">accumulate_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0,<a href="CppStdBind2nd.htm">std::bind2nd</a>(<a href="CppStdGreater.htm">std::greater</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),0.0));<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSumNegatives.htm">SumNegatives</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppSumNegatives.htm">SumNegatives</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ::<a href="CppAccumulate_if.htm">accumulate_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0,<a href="CppStdBind2nd.htm">std::bind2nd</a>(<a href="CppStdLess.htm">std::less</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),0.0));<br/>
}<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCountNonZeroes.htm">CountNonZeroes</a>.htm<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppCountNonZeroes.htm">CountNonZeroes</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v)<br/>
{<br/>
 <b><a href="CppReturn.htm">return</a></b> <a href="CppStdCount_if.htm">std::count_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBind2nd.htm">std::bind2nd</a>(<a href="CppStdNot_equal_to.htm">std::not_equal_to</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),0.0));<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> Are<a href="CppAbout.htm">About</a>Equal(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; w)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.size() <a href="CppOperatorNotEqual.htm">!=</a> w.size()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( <a href="CppStdAbs.htm">std::abs</a>(v[i] <a href="CppOperatorMinus.htm">-</a> w[i]) &gt; 0.01) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppWilcoxonsSignedRankTest.htm<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test GetRanks<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; values&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> { 10.0, 20.0, 30.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; expected <a href="CppOperatorAssign.htm">=</a> {&nbsp;&nbsp;1.0,&nbsp;&nbsp;2.0,&nbsp;&nbsp;3.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; results <a href="CppOperatorAssign.htm">=</a> GetRanks(values);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Are<a href="CppAbout.htm">About</a>Equal(expected,results));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; values&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> { 30.0, 10.0, 20.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; expected <a href="CppOperatorAssign.htm">=</a> {&nbsp;&nbsp;3.0,&nbsp;&nbsp;1.0,&nbsp;&nbsp;2.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; results <a href="CppOperatorAssign.htm">=</a> GetRanks(values);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Are<a href="CppAbout.htm">About</a>Equal(expected,results));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>From Heath, page 263<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; values&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> { 0.6, 1.4, 4.0, 13.0, 14.5, 9.4, 11.4, 12.6, 4.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; expected <a href="CppOperatorAssign.htm">=</a> { 1.0, 2.0, 3.5,&nbsp;&nbsp;8.0,&nbsp;&nbsp;9.0, 5.0,&nbsp;&nbsp;6.0,&nbsp;&nbsp;7.0, 3.5 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; results <a href="CppOperatorAssign.htm">=</a> GetRanks(values);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Are<a href="CppAbout.htm">About</a>Equal(expected,results) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Heath, page 263, no zero value");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>From Heath, page 263, now with zero added<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; values&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> { 0.6, 1.4, 0.0,&nbsp;&nbsp;4.0, 13.0, 14.5, 9.4, 11.4, 12.6, 4.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; expected <a href="CppOperatorAssign.htm">=</a> { 1.0, 2.0, 0.0,&nbsp;&nbsp;3.5,&nbsp;&nbsp;8.0,&nbsp;&nbsp;9.0, 5.0,&nbsp;&nbsp;6.0,&nbsp;&nbsp;7.0, 3.5 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; results <a href="CppOperatorAssign.htm">=</a> GetRanks(values);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Are<a href="CppAbout.htm">About</a>Equal(expected,results) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Heath, page 263, with zero value");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Thanks to Senbong G <b><a href="CppFor.htm">for</a></b> adding <b><a href="CppThis.htm">this</a></b> test<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; values&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> { 1.0, 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 3.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; expected <a href="CppOperatorAssign.htm">=</a> { 2.0, 2.0, 2.0, 4.5, 4.5, 7.0 ,7.0, 7.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; results <a href="CppOperatorAssign.htm">=</a> GetRanks(values);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Are<a href="CppAbout.htm">About</a>Equal(expected,results) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Senbong G test");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Thanks to Senbong G <b><a href="CppFor.htm">for</a></b> adding <b><a href="CppThis.htm">this</a></b> test<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; values&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> { 0.0, 0.0, 0.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; expected <a href="CppOperatorAssign.htm">=</a> { 0.0, 0.0, 0.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; results <a href="CppOperatorAssign.htm">=</a> GetRanks(values);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Are<a href="CppAbout.htm">About</a>Equal(expected,results) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Senbong G zero-only test");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v1 <a href="CppOperatorAssign.htm">=</a> GetValuesNonDrinkers();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v2 <a href="CppOperatorAssign.htm">=</a> GetValuesDrinkers();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v1.size() <a href="CppOperatorEqual.htm">==</a> v2.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; differences <a href="CppOperatorAssign.htm">=</a> <a href="CppGetDifference.htm">GetDifference</a>(v1,v2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v1.size() <a href="CppOperatorEqual.htm">==</a> differences.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; values<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetAbs.htm">GetAbs</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(differences);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v1.size() <a href="CppOperatorEqual.htm">==</a> values.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; results <a href="CppOperatorAssign.htm">=</a> GetRanks(values);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; expected <a href="CppOperatorAssign.htm">=</a> { 1.0, 2.0, 0.0, 3.5, 8.0, 9.0, 5.0, 6.0,&nbsp;&nbsp;7.0, 3.5 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdCopy.htm">std::copy</a>(values.begin(), values.end(), <a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdCout.htm">std::cout</a>,","));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdCopy.htm">std::copy</a>(expected.begin(), expected.end(), <a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdCout.htm">std::cout</a>,","));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdCopy.htm">std::copy</a>(results.begin(), results.end(), <a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdCout.htm">std::cout</a>,","));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Are<a href="CppAbout.htm">About</a>Equal(expected,results) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Heath 263, from data used");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetValuesNonDrinkers();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetValuesDrinkers();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v1.size() <a href="CppOperatorEqual.htm">==</a> v2.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Sign&gt; signs <a href="CppOperatorAssign.htm">=</a> GetSigns(v1,v2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v1.size() <a href="CppOperatorEqual.htm">==</a> signs.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; differences<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetDifference.htm">GetDifference</a>(v1,v2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v1.size() <a href="CppOperatorEqual.htm">==</a> differences.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; absDifferences<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetAbs.htm">GetAbs</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(differences);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v1.size() <a href="CppOperatorEqual.htm">==</a> absDifferences.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ranks<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetRanks(absDifferences);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v1.size() <a href="CppOperatorEqual.htm">==</a> ranks.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; signedRanks<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetSignedRanks(signs,ranks);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v1.size() <a href="CppOperatorEqual.htm">==</a> signedRanks.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v1.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v1[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v2[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> signs[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> absDifferences[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ranks[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> signedRanks[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sum_positives <a href="CppOperatorAssign.htm">=</a> <a href="CppSumPositives.htm">SumPositives</a>(signedRanks);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sum_negatives <a href="CppOperatorAssign.htm">=</a> <a href="CppSumNegatives.htm">SumNegatives</a>(signedRanks);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_non_zero_pairs <a href="CppOperatorAssign.htm">=</a> <a href="CppCountNonZeroes.htm">CountNonZeroes</a>(differences);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Critical value from:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> * David Heath. An introduction to experimental design<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> and statistics <b><a href="CppFor.htm">for</a></b> biology. 1995. ISBN: 1-85728-132-2 PB.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Page 350, Table A15: Wilcoxon's <b><a href="CppSigned.htm">signed</a></b> rank test:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> critical values of T.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Two-tailed, n_non_zero_pairs <a href="CppOperatorAssign.htm">=</a> 9, significance level 5%<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> critical_value <a href="CppOperatorAssign.htm">=</a> 40;<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nSUM positives: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sum_positives<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nSUM negatives: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sum_negatives<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nn_non_zero_pairs: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n_non_zero_pairs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\ncritical_value: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> critical_value;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sum_positives <a href="CppOperatorGreaterEqual.htm">&gt;=</a> critical_value)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nReject null hypothesis that pairs <b><a href="CppDo.htm">do</a></b> "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "not differ, due to positives";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdAbs.htm">std::abs</a>(sum_negatives) <a href="CppOperatorGreaterEqual.htm">&gt;=</a> critical_value)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nReject null hypothesis that pairs <b><a href="CppDo.htm">do</a></b> "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "not differ, due to negatives";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(sum_positives <a href="CppOperatorGreaterEqual.htm">&gt;=</a> critical_value)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (sum_positives <a href="CppOperatorGreaterEqual.htm">&gt;=</a> critical_value))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nPairs <b><a href="CppDo.htm">do</a></b> not differ significantly";<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
