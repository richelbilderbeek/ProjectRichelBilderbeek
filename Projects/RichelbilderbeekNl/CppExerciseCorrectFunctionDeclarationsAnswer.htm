<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Answer of exercise #2: correct function declarations</title>
  <meta name="description" content="C++ Answer of exercise #2: correct function declarations"/>
  <meta name="keywords" content="C++ Answer of exercise #2: correct function declarations"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExerciseCorrectFunctionDeclarationsAnswer.htm">Answer of exercise #2: correct function declarations</a></h1>
<p>&nbsp;</p>
<p>This is the answer of <a href="CppExerciseCorrectFunctionDeclarations.htm"'>Exercise #2: correct function declarations</a>.</p>
<p>&nbsp;</p>
<h2>0) Get the number of rows in a database</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> GetRows(<b><a href="CppConst.htm">const</a></b> Database d); //Incorrect!<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This function probably only read from a Database (due to the <a href="CppConstArgument.htm">const argument</a>). But instead of reading from
the original database, a (probably expensive) copy of the database is passed into the function. This makes the answer:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> GetRows(<b><a href="CppConst.htm">const</a></b> Database&amp; d);<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>1) <a href="CppDeclaration.htm">Declare</a> the <a href="CppMain.htm">main</a> <a href="CppFunction.htm">function</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMain.htm">main</a>(); //Incorrect!<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p><a href="CppMain.htm">main</a> has return type <a href="CppInt.htm">int</a> [1-5].</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppVoid.htm">int</a></b>  <a href="CppMain.htm">main</a>();<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>2) Set a value in a y-x-ordered 2D-vector</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
//Incorrect!<br/>
<b><a href="CppVoid.htm">void</a></b> Set(<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value);<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Humans tend to think 'x-y-ordered' instead of 'y-x-ordered', probably because x is
before y in the alphabet. It is therefore 'funny' to let a function's arguments
be y-x-ordered. Even if the two-dimensional std::vector is y-x-ordered, it is
more natural/human to first pass an x, then a y.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppVoid.htm">void</a></b> Set(<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value);<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>3) Get the sum of a std::vector</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> Sum(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v); //Incorrect!<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Even worse then item #0: calculating the sum of a std::vector implies only reading
from it (thus, a const argument is required) without wanting to make a possibly
expensive copy (thus, the std::vector must be given by reference).</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> Sum(<b><a href="CppConst.htm">const</a> </b><a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v);<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>4) Swap two values</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> Swap(<b><a href="CppInt.htm">int</a></b>&amp; a, <b><a href="CppInt.htm">int</a></b>&amp; b); //Incorrect<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>What would the returned int be? An error code? The difference between a and b? Or
the sum of a and b? How brilliant and important this returned int is, it
confuses people. Make Swap return nothing. After calling Swap, you can still
return error codes, calculate the difference and sum of a and b.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppVoid.htm">void</a></b> Swap(<b><a href="CppInt.htm">int</a></b>&amp; a, <b><a href="CppInt.htm">int</a></b>&amp; b);<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>5) Put the text 'Hello' on screen and return an error code</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
//Incorrect<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> SayHello(); //Return an integer error code<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>First, how can std::cout on the word 'hello' ever fail? It appears this function will
always return a no-error code (often zero).</p>
<p>&nbsp;</p>
<p>Except for that, why return an error code, when you can also throw an error type (that
is, an <a href="CppException.htm">exception</a>)? The purpose of <a href="CppException.htm">exceptions</a> 
are to replace error codes, because
these are less ambiguent then error code (for example, zero is not always the
no-error code).</p>
<p>&nbsp;</p>
<p>Finally, if std::cout fails, it will throw an <a href="CppException.htm">exception</a>
in the first place! The purpose of SayHello is (next to, std::cout the word hello)
not to catch this exception and convert it to an error code.</p>
<p>&nbsp;</p>
<p>Let SayHello say hello and let the caller of SayHello catch the (improbable) exceptions.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppVoid.htm">void</a></b> SayHello();<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>6) Set a value in an x-y-ordered 2D-vector</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
//Set a value in an x-y-ordered 2D-vector<br/>
//Incorrect<br/>
<b><a href="CppVoid.htm">void</a></b> Set(<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; i, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; j, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; value);<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>First (similar to #2), why name the arguments i and j, when writing x and y is more
natural/human? Sure, programmers might like to use i and j in their for-loops,
but a coordinat in a std::vector suggests using x and y as parameter names.</p>
<p>&nbsp;</p>
<p>Secondly (although I personally feel it is more correct), one should not pass an int or
double by reference. Build-in data types should be passed by value.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
//Set a value in an x-y-ordered 2D-vector<br/>
<b><a href="CppVoid.htm">void</a></b> Set(<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value);<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>7) Calculate the mean and standard deviation of a std::vector</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> MeanAndStdDev(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v, <b><a href="CppDouble.htm">double</a></b>&amp; mean); //Incorrect!<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>A
way to be able to let a function return two values. But it might feel
unnatural: passing the mean by reference and returning the standard deviation. In
my humble opinion, if you use references to 'return' multiple values, uses
references for all values.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppVoid.htm">void</a></b> MeanAndStdDev(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v, <b><a href="CppDouble.htm">double</a></b>&amp; mean, <b><a href="CppDouble.htm">double</a></b>&amp; stdDev);<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>An alternative that I would personally also approve (but do not prefer) is to return
a std::pair. In this std::pair, it is suggested that the first element is the
mean, where the second element is the standard deviation.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <a href="CppPair.htm">std::pair</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; MeanAndStdDev(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v);<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>8) Display a Widget on screen using std::cout</h2>
<p>&nbsp;</p>

<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
<b><a href="CppVoid.htm">void</a></b> CoutWidget(<b><a href="CppConst.htm">const</a></b> Widget&amp; w);<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>If one writes the above function, one has to write the following:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
Widget w;<br/>
w.CoutWidget();<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>But actually, one probably would have wanted to be able to write the following:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
Widget w;<br/>
std::cout &lt;&lt; w;<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Also, if you want to stream Widget to a std::ostream, why not stream it to any std::ostream?</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, <b><a href="CppConst.htm">const</a></b> Widget&amp; w);<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>9) Assign a color to a certain square on a Rubik's cube</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
//Member function in the interface<br/>
<b><a href="CppVoid.htm">void</a></b> SetSquare(<b><a href="CppConst.htm">const</a></b> Square&amp; s, <b><a href="CppConst.htm">const</a> </b>Color&amp; c, RubiksCube&amp; c); //Incorrect!<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Make interface easy to use correctly and hard to use incorrectly (Meyers). Setting a
certain color on a certain square/position of a Rubik's cube is the equivalent
of painting a certain color of a certain square (people who actually cheat this
way, swap the stickers on the cube). This makes the function very error prone.</p>
<p>&nbsp;</p>
<p>When you use a real Rubik's cube, you can only turn multiple squares. This suggests
that you might also want to write functions that turns multiple squares (at a
certain position) in a certain direction.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Answer of exercise #2: correct function declarations" border = "1"><tr><td><code>
//Member function in the interface<br/>
<b><a href="CppVoid.htm">void</a></b> Turn(<b><a href="CppConst.htm">const</a></b> Position&amp; p, <b><a href="CppConst.htm">const</a> </b>Direction&amp; d, RubiksCube&amp; c);<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReference.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li>C++. International Standard. ISO/IEC 14882. Second edition. Paragraph 3.6.1.2</li>
  <li>
    http://www.parashift.com/c++-faq-lite/newbie.html#faq-29.3 : main() must return
    int. Not void, not bool, not float. int. Just int, nothing but int, only int.
    Some compilers accept void main(), but that is non-standard and shouldn't be
    used. Instead use int main()
  </li>
  <li><a href="CppHerbSutter.htm">Herb Sutter. Exceptional C++. ISBN: 0-201-61562-2. Item 21: void main() is nonstandard and nonportable.</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>'s homepage (http://www.research.att.com/~bs/bs_faq2.html#void-main): 'The definition 'void main() { /* ... */ }' is not and never has been C++, nor has it even been C.'</li>
  <li>
    alt.comp.lang.learn.c-c++ FAQ: http://ma.rtij.nl/acllc-c++.FAQ.html#q3.4: 3.4 Why does everyone make so much fuss about &quot;void main()&quot;?. Because
    the return type of the main() function must be int in both C and C++. Anything else is undefined. Bottom line - don't try to start a thread about this in
    alt.comp.lang.learn.c-c++ as it has already been discussed many, many times and generates more flamage than any other topic.
  </li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
