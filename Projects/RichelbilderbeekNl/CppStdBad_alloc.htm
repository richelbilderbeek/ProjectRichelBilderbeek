<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::bad_alloc</title>
  <meta name="description" content="C++ std::bad_alloc"/>
  <meta name="keywords" content="C++ std::bad_alloc bad alloc bad_alloc exception code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBad_alloc.htm">std::bad_alloc</a></h1>
<p>&nbsp;</p>
<p><a href="CppBad_alloc.htm">std::bad_alloc</a> is an <a href="CppException.htm">exception</a> and a  
<a href="CppDerivedClass.htm">derived class</a> from <a href="CppException.htm">std::exception</a>. 
<a href="CppBad_alloc.htm">std::bad_alloc</a> is <a href="CppThrow.htm">thrown</a> by <a href="CppNew.htm">new</a> when <a href="CppNew.htm">new</a>
fails.</p>
<p>&nbsp;</p>
<p><a href="CppBad_alloc.htm">std::bad_alloc</a> is defined in the <a href="CppHeaderFile.htm">header file</a> <a href="CppNewH.htm">new</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppBad_alloc.htm">Download the Qt Creator project 'CppBad_alloc' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppLimitsH.htm">limits</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/con<a href="CppVersion.htm">version</a>/bounds.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>/Example1 creates an array larger than <a href="CppMemory.htm">memory</a> can contain<br/>
<b><a href="CppVoid.htm">void</a></b> Example1()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assure that 2147483647 is the heighest value an <b><a href="CppInt.htm">int</a></b> can contain <b><a href="CppUsing.htm">using</a></b> STL and <a href="CppBoost.htm">Boost</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(2147483647 <a href="CppOperatorEqual.htm">==</a> <a href="CppNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::max());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(2147483647 <a href="CppOperatorEqual.htm">==</a> <a href="CppBoost.htm">boost</a>::numeric::bounds&lt;<b><a href="CppInt.htm">int</a></b>&gt;::highest());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the array with the largest possible size, the size its value<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>being the heighest value an <b><a href="CppInt.htm">int</a></b> can contain<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> * <b><a href="CppConst.htm">const</a></b> i <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <b><a href="CppDouble.htm">double</a></b>[2147483647];<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clean up<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b>[] i;<br/>
}<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>/Examle2 leaks <a href="CppMemory.htm">memory</a><br/>
<a href="CppComment.htm">//</a>(at my computer, the counter called i reached the value of 38)<br/>
<b><a href="CppVoid.htm">void</a></b> Example2()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>100; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> * <b><a href="CppConst.htm">const</a></b> a <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <b><a href="CppDouble.htm">double</a></b>[10000000];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDelete.htm">delete</a></b>[] a; <a href="CppComment.htm">//</a>BAD: a must be deleted[], otherwise <a href="CppMemory.htm">memory</a> will leak<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Choose your way to crash your computer:<br/>
&nbsp;&nbsp;Example1();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Example2();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Screen output</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
terminate called after throwing an instance of 'std::bad_alloc'<br/>
&nbsp;&nbsp;what():&nbsp;&nbsp;std::bad_alloc<br/>
The program has unexpectedly finished.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://www.cplusplus.com/reference/std/new/bad_alloc">cplusplus.com page about std::bad_alloc</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
