<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>boost::shared_ptr</title>
  <meta name="description" content="C++ boost::shared_ptr"/>
  <meta name="keywords" content="C++ shared_ptr std::shared_ptr std::tr1::shared_ptr boost::shared_ptr boost stl std tr1 std::tr1 shared pointer shared_pointer code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>)
  <img src="PicBoost.png" alt="Boost"/> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>)
</h1>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>
  <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a> is a type of <a href="CppShared_ptr.htm">shared_ptr</a> (which is a type of 
  <a href="CppSmartPointer.htm">smart pointer</a>) that can be copied safely and cheap, 
  without copying the object <a href="CppPointer.htm">pointed</a> to. When the last 
  <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a> using an object goes out of <a href="CppScope.htm">scope</a>, 
it will <b><a href="CppDelete.htm">delete</a></b> the object <a href="CppPointer.htm">pointed</a>to.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Creating a <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>.hpp&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; p;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2> <a href="CppSmartPointer.htm">Smart pointers</a> and <a href="CppNull.htm">null</a></h2>
<p>&nbsp;</p>
<p><a href="CppBoost.htm">Boost</a> <a href="CppSmartPointer.htm">smart pointers</a> check for <a href="CppNull.htm">null</a> themselves,
so there is no need to check these to be inititialized. In the example below a <a href="CppMemberVariable.htm">member variable</a> 
of a <a href="CppClass.htm">class</a> is requested from an unitialized <a href="CppSmartPointer.htm">smart pointer</a>. 
The program will <a href="CppAbort.htm">abort</a> and the <a href="CppRuntimeError.htm">runtime error</a> will be shown.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>.hpp&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Test<br/>
{<br/>
&nbsp;&nbsp;Test(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x) : m_x(x) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_x;<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Test&gt; p;<br/>
&nbsp;&nbsp;p-&gt;m_x; <a href="CppComment.htm">//</a>Good: uninitialized <a href="CppPointer.htm">pointer</a> detected by <a href="CppBoost.htm">Boost</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The code below shows that initializing a <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a> with <a href="CppNull.htm">null</a> will not be easy,
but even when it succeeds, <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a> will check itself for <a href="CppNull.htm">null</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>.hpp&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Test<br/>
{<br/>
&nbsp;&nbsp;Test(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x) : m_x(x) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_x;<br/>
};<br/>
<br/>
Test * CreateNull<a href="CppPointer.htm">Pointer</a>() { <b><a href="CppReturn.htm">return</a></b> 0; }<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Test&gt; p;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>p.reset(0); <a href="CppComment.htm">//</a>Good: does not <a href="CppCompile.htm">compile</a>: 0 is an <a href="CppInt.htm">integer</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>p.reset(<a href="CppNULL.htm">NULL</a>); <a href="CppComment.htm">//</a>Good: does not <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;p.reset(CreateNull<a href="CppPointer.htm">Pointer</a>()); <a href="CppComment.htm">//</a>Bad: tricked the <a href="CppCompiler.htm">compiler</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>p-&gt;m_x; <a href="CppComment.htm">//</a>Good: uninitialized <a href="CppPointer.htm">pointer</a> detected by <a href="CppBoost.htm">Boost</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicBoost.png" alt="Boost"/> <a href="CppSmartPointer.htm">Smart pointers</a> and <a href="CppOperatorEqual.htm">==</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>/A test <b><a href="CppClass.htm">class</a></b><br/>
<b><a href="CppStruct.htm">struct</a></b> Test { <b><a href="CppInt.htm">int</a></b> m_x; };<br/>
<br/>
<a href="CppComment.htm">//</a>/Class to manage a Test<br/>
<b><a href="CppStruct.htm">struct</a></b> TestManager<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Construct</a> an initialized Test<br/>
&nbsp;&nbsp;TestManager() : m_test(<b><a href="CppNew.htm">new</a></b> Test) { m_test-&gt;m_x <a href="CppOperatorAssign.htm">=</a> 1; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-only <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a> to the Test managed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Test&gt; GetTest() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_test; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-and-write <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a> to the Test managed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Test&gt; GetTest()&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_test; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Test managed<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Test&gt; m_test;<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;TestManager m;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetTest()-&gt;m_x <a href="CppOperatorEqual.htm">==</a> 1); <a href="CppComment.htm">//</a>Read from m<br/>
&nbsp;&nbsp;m.GetTest()-&gt;m_x <a href="CppOperatorAssign.htm">=</a> 2; <a href="CppComment.htm">//</a>Write to m<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetTest()-&gt;m_x <a href="CppOperatorEqual.htm">==</a> 2); <a href="CppComment.htm">//</a>Read from m<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Test&gt; v(m.GetTest()); <br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetTest() <a href="CppOperatorEqual.htm">==</a> v); <a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>'s to same object are evaluated to <b><a href="CppTrue.htm">true</a></b> by <b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v-&gt;m_x <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Does not <a href="CppCompile.htm">compile</a>: v holds a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Test&gt; w(<a href="CppBoost.htm">boost</a>::const_<a href="CppPointer.htm">pointer</a>_cast&lt;Test&gt;(v));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetTest() <a href="CppOperatorEqual.htm">==</a> w);&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>'s to same object are evaluated to <b><a href="CppTrue.htm">true</a></b> by <b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v <a href="CppOperatorEqual.htm">==</a> w);&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>'s to same object are evaluated to <b><a href="CppTrue.htm">true</a></b> by <b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;w-&gt;m_x <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Does <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v-&gt;m_x <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w-&gt;m_x <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetTest()-&gt;m_x <a href="CppOperatorEqual.htm">==</a> 3);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicBoost.png" alt="Boost"/> <a href="CppCast.htm">Cast</a> from <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppConst.htm">const</a> Test&gt; to <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Test&gt;</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>/A test <b><a href="CppClass.htm">class</a></b><br/>
<b><a href="CppStruct.htm">struct</a></b> Test { <b><a href="CppInt.htm">int</a></b> m_x; };<br/>
<br/>
<a href="CppComment.htm">//</a>/Class to manage a Test<br/>
<b><a href="CppStruct.htm">struct</a></b> TestManager<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Construct</a> an initialized Test<br/>
&nbsp;&nbsp;TestManager() : m_test(<b><a href="CppNew.htm">new</a></b> Test) { m_test-&gt;m_x <a href="CppOperatorAssign.htm">=</a> 1; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-only <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a> to the Test managed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Test&gt; GetTest() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_test; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-and-write <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a> to the Test managed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Test&gt; GetTest()&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_test; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Test managed<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Test&gt; m_test;<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;TestManager m;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetTest()-&gt;m_x <a href="CppOperatorEqual.htm">==</a> 1); <a href="CppComment.htm">//</a>Read from m<br/>
&nbsp;&nbsp;m.GetTest()-&gt;m_x <a href="CppOperatorAssign.htm">=</a> 2; <a href="CppComment.htm">//</a>Write to m<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetTest()-&gt;m_x <a href="CppOperatorEqual.htm">==</a> 2); <a href="CppComment.htm">//</a>Read from m<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Test&gt; v(m.GetTest()); <br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetTest() <a href="CppOperatorEqual.htm">==</a> v); <a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>'s to same object are evaluated to <b><a href="CppTrue.htm">true</a></b> by <b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v-&gt;m_x <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Does not <a href="CppCompile.htm">compile</a>: v holds a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Test&gt; w(<a href="CppBoost.htm">boost</a>::const_<a href="CppPointer.htm">pointer</a>_cast&lt;Test&gt;(v));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetTest() <a href="CppOperatorEqual.htm">==</a> w);&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>'s to same object are evaluated to <b><a href="CppTrue.htm">true</a></b> by <b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v <a href="CppOperatorEqual.htm">==</a> w);&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>'s to same object are evaluated to <b><a href="CppTrue.htm">true</a></b> by <b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;w-&gt;m_x <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Does <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v-&gt;m_x <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w-&gt;m_x <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetTest()-&gt;m_x <a href="CppOperatorEqual.htm">==</a> 3);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://www.boost.org/doc/libs/1_35_0/libs/smart_ptr/shared_ptr.htm">Boost's page about boost::shared_ptr</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>