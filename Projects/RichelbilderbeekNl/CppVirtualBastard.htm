<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>VirtualBastard</title>
  <meta name="description" content="C++ VirtualBastard"/>
  <meta name="keywords" content="C++ VirtualBastard "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppVirtualBastard.htm">VirtualBastard</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Sun Aug 17 15:23:38 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppVirtualBastard.htm">VirtualBastard</a> is a class to do GUI testing.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppVirtualBastard/CppVirtualBastard.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppVirtualBastard/CppVirtualBastard.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppDial.htm">CppDial</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppDial.htm">CppDial</a>/<a href="CppDial.htm">dial</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppDial.htm">CppDial</a>/<a href="CppDial.htm">dial</a>.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppDial.htm">CppDial</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppVirtualBastard/virtualbastard.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppVirtualBastard/virtualbastard.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> VIRTUALBASTARD_H<br/>
<a href="CppDefine.htm">#define</a> VIRTUALBASTARD_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>The <a href="ToolVirtualBastard.htm">VirtualBastard</a> <b><a href="CppClass.htm">class</a></b><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="ToolVirtualBastard.htm">VirtualBastard</a><br/>
{<br/>
&nbsp;&nbsp;<a href="ToolVirtualBastard.htm">VirtualBastard</a>();<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Make the mouse cursor perform a click<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Click();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the mouse cursor its current position<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; GetMousePos();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the mouse cursor to a certain position<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> SetMousePos(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Press a key<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> PressKey(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> key);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Sleep <b><a href="CppFor.htm">for</a></b> some <a href="CppTime.htm">time</a> (in msecs)<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Sleep(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_secs);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Execute(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; cmd);<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> VIRTUALBASTARD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppVirtualBastard/virtualbastard.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppVirtualBastard/virtualbastard.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<b><a href="CppVirtual.htm">virtual</a></b>bastard.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppChronoH.htm">chrono</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppLimitsH.htm">limits</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppThreadH.htm">thread</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<b><a href="CppExtern.htm">extern</a></b> "C"<br/>
{<br/>
&nbsp;&nbsp;<a href="CppInclude.htm">#include</a> "<a href="CppLibcvautomation.htm">libcvautomation</a>/<a href="CppLibcvautomation.htm">libcvautomation</a>.h"<br/>
}<br/>
<br/>
<a href="ToolVirtualBastard.htm">VirtualBastard</a>::<a href="ToolVirtualBastard.htm">VirtualBastard</a>()<br/>
{<br/>
&nbsp;&nbsp;XInit<a href="CppThread.htm">Thread</a>s();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="ToolVirtualBastard.htm">VirtualBastard</a>::Click()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> cmd <a href="CppOperatorAssign.htm">=</a> "mouseclick";<br/>
&nbsp;&nbsp;Execute(cmd);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="ToolVirtualBastard.htm">VirtualBastard</a>::Execute(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; cmd)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Open a display (whatever that may be)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> display_name <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;Display * <b><a href="CppConst.htm">const</a></b> display <a href="CppOperatorAssign.htm">=</a> XOpenDisplay( display_name.c_str() );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(display);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> the line (with the command) to a C style string<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> command <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <b><a href="CppChar.htm">char</a></b>[ cmd.size() <a href="CppOperatorPlus.htm">+</a> 1 ];<br/>
&nbsp;&nbsp;strcpy(command,&amp;cmd[0]);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Run the command<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><b><a href="CppConst.htm">const</a></b> cva<a href="CppPoint.htm">Point</a> p <a href="CppOperatorAssign.htm">=</a><a href="CppComment.htm">*/</a> xte_commandString(display,command,1,0,<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;().max(),1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Close the display (whatever that may be)<br/>
&nbsp;&nbsp;XCloseDisplay( display );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Don't forget to <b><a href="CppDelete.htm">delete</a></b> a C-style string :-(<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b>[] command;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Give some feedback<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Execute command: '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> cmd <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "': ";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.x <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> p.y <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "OK";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="ToolVirtualBastard.htm">VirtualBastard</a>::GetMousePos()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Open a display (whatever that may be)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> display_name <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;Display * <b><a href="CppConst.htm">const</a></b> display <a href="CppOperatorAssign.htm">=</a> XOpenDisplay( display_name.c_str() );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(display);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> cva<a href="CppPoint.htm">Point</a> p <a href="CppOperatorAssign.htm">=</a> xte_mouseLocation(display);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_pair.htm">std::make_pair</a>(p.x,p.y);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="ToolVirtualBastard.htm">VirtualBastard</a>::PressKey(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> <a href="CppComment.htm">/*</a> key <a href="CppComment.htm">*/</a>)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="ToolVirtualBastard.htm">VirtualBastard</a>::SetMousePos(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> cmd<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "mousexy "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(y);<br/>
&nbsp;&nbsp;Execute(cmd);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="ToolVirtualBastard.htm">VirtualBastard</a>::Sleep(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_secs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdThis_thread.htm">std::this_thread</a>::sleep_for(<a href="CppStdChrono.htm">std::chrono</a>::milliseconds(m_secs));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppVirtualBastard/virtualbastardcommand.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppVirtualBastard/virtualbastardcommand.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> VIRTUALBASTARDCOMMAND_H<br/>
<a href="CppDefine.htm">#define</a> VIRTUALBASTARDCOMMAND_H<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="ToolVirtualBastard.htm">VirtualBastard</a>Command<br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="ToolVirtualBastard.htm">VirtualBastard</a>Command();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> VIRTUALBASTARDCOMMAND_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppVirtualBastard/virtualbastardcommand.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppVirtualBastard/virtualbastardcommand.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<b><a href="CppVirtual.htm">virtual</a></b>bastardcommand.h"<br/>
<br/>
<a href="ToolVirtualBastard.htm">VirtualBastard</a>Command::<a href="ToolVirtualBastard.htm">VirtualBastard</a>Command()<br/>
{<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppVirtualBastard/virtualbastardcommandfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppVirtualBastard/virtualbastardcommandfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> VIRTUALBASTARDCOMMANDFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> VIRTUALBASTARDCOMMANDFACTORY_H<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="ToolVirtualBastard.htm">VirtualBastard</a>CommandFactory<br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="ToolVirtualBastard.htm">VirtualBastard</a>CommandFactory();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> VIRTUALBASTARDCOMMANDFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppVirtualBastard/virtualbastardcommandfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppVirtualBastard/virtualbastardcommandfactory.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<b><a href="CppVirtual.htm">virtual</a></b>bastardcommandfactory.h"<br/>
<br/>
<a href="ToolVirtualBastard.htm">VirtualBastard</a>CommandFactory::<a href="ToolVirtualBastard.htm">VirtualBastard</a>CommandFactory()<br/>
{<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
