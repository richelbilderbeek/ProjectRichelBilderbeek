<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>compile error: _algo.c: Call to undefined function 'rand'</title>
  <meta name="description" content="C++ compile error: _algo.c: Call to undefined function 'rand'"/>
  <meta name="keywords" content="C++ compile error: _algo.c: Call to undefined function 'rand'"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCompileError_algoCcallToUndefinedFunctionRand.htm">_algo.c: Call to undefined function 'rand'</a></h1>
<p>&nbsp;</p>
<p><a href="CppCompileError.htm">Compile error</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Full error message</h2>
<p>&nbsp;</p>
<!-- Start code-->
<table border = "1"><tr><td><code>
[C++ Error] _algo.c(432): E2268 Call to undefined function 'rand'
</code></td></tr></table>
<!-- End of code -->
<p>&nbsp;</p>
<p>This takes you to the following code in _algo.c:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> Return a random number in the range [0, __n).  This function encapsulates<br/>
<a href="CppComment.htm">//</a> whether we're using rand (part of the standard C library) or lrand48<br/>
<a href="CppComment.htm">//</a> (not standard, but a much better choice whenever it's available).<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> _Distance&gt;<br/>
<b><a href="CppInline.htm">inline</a></b> _Distance __random_number(_Distance __n) {<br/>
<a href="CppIfdef.htm">#ifdef</a> _STLP_NO_DRAND48<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rand() <a href="CppOperatorModulus.htm">%</a> __n; <a href="CppComment.htm">//</a>THIS LINE<br/>
#<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lrand48() <a href="CppOperatorModulus.htm">%</a> __n;<br/>
<a href="CppEndif.htm">#endif</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Cause</h2>
<p>&nbsp;</p>
<p><a href="CppIde.htm">IDE</a>: <a href="CppBuilder.htm">C++ Builder</a> 6.0</p>
<p><a href="CppCompiler.htm">Compiler</a>: Borland BCC32.EXE version 6.0.10.157</p>
<p>Project type: Console Application</p>
<p>&nbsp;</p>
<p>The <a href="CppCompiler.htm">compiler</a> cannot find the function rand (note that it does not complain that it cannot find <a href="CppRand.htm">std::rand</a>). But it will only need rand when making use of the function above. For example, when you use <a href="CppRandom_shuffle.htm">std::random_shuffle</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppRandom_shuffle.htm">std::random_shuffle</a>(v.begin(),v.end());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Solution</h2>
<p>&nbsp;</p>
<p>It is not a good idea to modify standard <a href="CppHeaderFile.htm">header files</a>. But the <a href="CppCompiler.htm">compiler</a> cannot find rand, but it can find <a href="CppRand.htm">std::rand</a>. So I add the <a href="CppNamespace.htm">namespace</a> <a href="CppStd.htm">std</a> to rand. And I have never had trouble with this.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> Return a random number in the range [0, __n).  This function encapsulates<br/>
<a href="CppComment.htm">//</a> whether we're using rand (part of the standard C library) or lrand48<br/>
<a href="CppComment.htm">//</a> (not standard, but a much better choice whenever it's available).<br/>
&nbsp;<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> _Distance&gt;<br/>
<b><a href="CppInline.htm">inline</a></b> _Distance __random_number(_Distance __n) {<br/>
<a href="CppIfdef.htm">#ifdef</a> _STLP_NO_DRAND48<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> __n; <a href="CppComment.htm">//</a>THIS LINE<br/>
#<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lrand48() <a href="CppOperatorModulus.htm">%</a> __n;<br/>
<a href="CppEndif.htm">#endif</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
