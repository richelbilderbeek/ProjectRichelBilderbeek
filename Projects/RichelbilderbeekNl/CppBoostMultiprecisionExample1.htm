<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>BoostMultiprecisionExample1</title>
  <meta name="description" content="C++ BoostMultiprecisionExample1"/>
  <meta name="keywords" content="C++ BoostMultiprecisionExample1 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBoostMultiprecisionExample1.htm">BoostMultiprecisionExample1</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppBoostMultiprecisionExample1-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppBoostMultiprecisionExample1/CppBoostMultiprecisionExample1.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBoostMultiprecisionExample1/CppBoostMultiprecisionExample1.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri) #Or use the code below<br/>
# QT += core<br/>
# QT += gui<br/>
# greaterThan(QT_MAJOR_VERSION, 4): QT += <a href="CppWidget.htm">widget</a>s<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
# <a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
#&nbsp;&nbsp; <a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
# }<br/>
# <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
# unix {<br/>
#&nbsp;&nbsp; <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
# }<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Boost.pri) #Or use the code below<br/>
# win32 {<br/>
#&nbsp;&nbsp; <a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; ../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
# }<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBoostMultiprecisionExample1/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBoostMultiprecisionExample1/main.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> Slightly adapted from the <a href="CppBoost.htm">Boost</a>.Multiprecision <a href="CppLibrary.htm">library</a> its tutorial:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> http://www.<a href="CppBoost.htm">boost</a>.org/doc/libs/1_55_0/libs/multiprecision/doc/html/<a href="CppBoost.htm">boost</a>_multiprecision/tut/ints/egs/factorials.html<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIomanipH.htm">iomanip</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/multiprecision/cpp_int.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp; <b><a href="CppUsing.htm">using</a></b> <a href="CppBoost.htm">boost</a>::multiprecision::cpp_int;<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a> Print all the factorials that will fit inside a 128-bit <a href="CppInt.htm">integer</a>.<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a> Begin by building a big table of factorials, once we know just how<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a> large the largest is, we'll be able to "pretty format" the results.<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a> Calculate the largest number that will fit inside 128 bits, we could<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a> also have used numeric_limits&lt;<b><a href="CppInt.htm">int</a></b>128_t&gt;::max() <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b> value:<br/>
&nbsp;&nbsp; cpp_int limit <a href="CppOperatorAssign.htm">=</a> (cpp_int(1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 128) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a> Our table of values:<br/>
&nbsp;&nbsp; <a href="CppStdVector.htm">std::vector</a>&lt;cpp_int&gt; results;<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a> Initial values:<br/>
&nbsp;&nbsp; <b><a href="CppUnsigned.htm">unsigned</a></b> i <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp; cpp_int factorial <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a> Cycle through the factorials till we reach the limit:<br/>
&nbsp;&nbsp; <b><a href="CppWhile.htm">while</a></b>(factorial &lt; limit)<br/>
&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;results.push_back(factorial);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factorial <a href="CppOperatorMultiplyAssign.htm">*=</a> i;<br/>
&nbsp;&nbsp; }<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a> Lets see how many digits the largest factorial was:<br/>
&nbsp;&nbsp; <b><a href="CppUnsigned.htm">unsigned</a></b> digits <a href="CppOperatorAssign.htm">=</a> results.back().str().size();<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a> Now print them out, <b><a href="CppUsing.htm">using</a></b> right justification, <b><a href="CppWhile.htm">while</a></b> we're at it<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a> we'll indicate the limit of each <a href="CppInt.htm">integer</a> type, so begin by defining<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a> the limits <b><a href="CppFor.htm">for</a></b> 16, 32, 64 etc bit <a href="CppInt.htm">integer</a>s:<br/>
&nbsp;&nbsp; cpp_int limits[] <a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(cpp_int(1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 16) <a href="CppOperatorMinus.htm">-</a> 1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(cpp_int(1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 32) <a href="CppOperatorMinus.htm">-</a> 1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(cpp_int(1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 64) <a href="CppOperatorMinus.htm">-</a> 1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(cpp_int(1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 128) <a href="CppOperatorMinus.htm">-</a> 1,<br/>
&nbsp;&nbsp; };<br/>
&nbsp;&nbsp; <a href="CppStdString.htm">std::string</a> bit_counts[] <a href="CppOperatorAssign.htm">=</a> { "16", "32", "64", "128" };<br/>
&nbsp;&nbsp; <b><a href="CppUnsigned.htm">unsigned</a></b> current_limit <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp; <b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; results.size(); <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(limits[current_limit] &lt; results[j])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppStdString.htm">std::string</a> message <a href="CppOperatorAssign.htm">=</a> "Limit of " <a href="CppOperatorPlus.htm">+</a> bit_counts[current_limit] <a href="CppOperatorPlus.htm">+</a> " bit <a href="CppInt.htm">integer</a>s";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetfill.htm">std::setfill</a>('.') <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetw.htm">std::setw</a>(digits+1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdRight.htm">std::right</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> message <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetfill.htm">std::setfill</a>(' ') <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorIncrement.htm">++</a>current_limit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetw.htm">std::setw</a>(digits <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdRight.htm">std::right</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> results[j] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp; }<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
