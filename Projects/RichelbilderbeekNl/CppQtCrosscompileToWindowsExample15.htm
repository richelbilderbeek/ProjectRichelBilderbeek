<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Qt Creator FAQ: How to cross-compile a Qt Creator project from Ubuntu to a windows executable: example 15: MXE</title>
  <meta name="description" content="C++ Qt Creator FAQ: How to cross-compile a Qt Creator project from Ubuntu to a windows executable: example 15: MinGW cross-compiling environment MXE"/>
  <meta name="keywords" content="C++ Qt Creator FAQ: How to cross-compile a Qt Creator project from Ubuntu to a windows executable: example 15: MinGW cross-compiling environment MXE i686-pc-mingw32-qmake"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppQtCrosscompileToWindowsExample15.htm">How to cross-compile a Qt Creator project from Ubuntu to a windows executable: example 15: MXE</a></h1>
<p>&nbsp;</p>
<p>
  This is a successful approach to solve the 
  <a href="CppQtFaq.htm">Qt FAQ</a> <a href="CppQtCrosscompileToWindows.htm">How to cross-compile a Qt Creator project from Ubuntu to a windows executable?</a>,
  following [1].
</p>
<p>&nbsp;</p>
<p>See <a href="CppMxe.htm">MXE</a> for more information about <a href="CppMxe.htm">MXE</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppQtCrosscompileToWindowsExample15.zip">Download the Qt Creator project 'CppQtCrosscompileToWindowsExample15' (zip)</a></li>
  <li><a href="CppQtCrosscompileToWindowsExample15Exe.zip">Download the Windows executable created by the Qt Creator project 'CppQtCrosscompileToWindowsExample15' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicUbuntu.png" alt="Ubuntu"/> <a href="CppUbuntu.htm">Ubuntu</a> 10.10 (maverick)</li>
  <li><img src="PicWindows.png" alt="Windows"/> <a href="CppWindows.htm">Windows</a> XP</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicCl.png" alt="Command line"/> command line</li>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.4.5</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoost.htm">Boost</a>: version 1.42</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.4.5</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppQtCrosscompileToWindowsExample15.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
#-------------------------------------------------<br/>
#<br/>
# Project created by QtCreator 2010-09-25T09:43:28<br/>
#<br/>
#-------------------------------------------------<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= gui<br/>
LIBS += -lboost_filesystem-mt -lboost_system-mt<br/>
TARGET = CppQtCrosscompileToWindowsExample15<br/>
CONFIG&nbsp;&nbsp; += console<br/>
CONFIG&nbsp;&nbsp; -= app_bundle<br/>
TEMPLATE = app<br/>
SOURCES += main.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/filesystem.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; folder)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppFilesystem.htm">boost::filesystem</a>::path my_folder<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppFilesystem.htm">boost::filesystem</a>::system_complete(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFilesystem.htm">boost::filesystem</a>::path(folder));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFilesystem.htm">boost::filesystem</a>::is_directory(my_folder)) <b><a href="CppReturn.htm">return</a></b> v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppFilesystem.htm">boost::filesystem</a>::directory_iterator j;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( <a href="CppFilesystem.htm">boost::filesystem</a>::directory_iterator i(my_folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorNotEqual.htm">!=</a> j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( <a href="CppFilesystem.htm">boost::filesystem</a>::is_regular_file( i-&gt;status() ) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> i-&gt;path().filename();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPath.htm">GetPath</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppGetPath.htm">GetPath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppFilesystem.htm">boost::filesystem</a>::path(filename).parent_path().string();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b>, <b><a href="CppChar.htm">char</a></b>* <a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(<a href="CppGetPath.htm">GetPath</a>(<a href="CppArgc.htm">argv</a>[0]));<br/>
&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppString.htm">std::string</a>&gt;(<a href="CppCout.htm">std::cout</a>,"\n"));<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Number of files: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v.size() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Process</h2>
<p>&nbsp;</p>
<p>For installation, follow the approach by described by [1].</p>
<p>&nbsp;</p>
<p>In the folder with your project</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
richel@richel1-desktop:~/2Projects/Website/CppQtCrosscompileToWindowsExample15$ <a href="CppI686-pc-mingw32-qmake.htm">i686-pc-mingw32-qmake</a><br/>
<br/>
richel@richel1-desktop:~/2Projects/Website/CppQtCrosscompileToWindowsExample15$ make<br/>
<br/>
make -f Makefile.Release<br/>
make[1]: Entering directory `/home/richel/qtsdk-2010.04/bin/Projects/Website/CppQtCrosscompileToWindowsExample15'<br/>
i686-pc-mingw32-g++ -c -pipe -O2 -frtti -fexceptions -mthreads -Wall -DUNICODE -DQT_LARGEFILE_SUPPORT -DQT_NO_DEBUG -DQT_CORE_LIB -DQT_THREAD_SUPPORT -I'/home/richel/mingw-cross-env-2.15/usr/i686-pc-mingw32/include/QtCore' -I'/home/richel/mingw-cross-env-2.15/usr/i686-pc-mingw32/include' -I'/home/richel/mingw-cross-env-2.15/usr/i686-pc-mingw32/include/ActiveQt' -I'release' -I'/home/richel/mingw-cross-env-2.15/usr/i686-pc-mingw32/mkspecs/unsupported/win32-g++-cross' -o release/main.o main.cpp<br/>
i686-pc-mingw32-g++ -enable-stdcall-fixup -Wl,-enable-auto-import -Wl,-enable-runtime-pseudo-reloc -Wl,-s -Wl,-subsystem,console -mthreads -Wl -o release/CppQtCrosscompileToWindowsExample15.exe release/main.o&nbsp;&nbsp;-L'/home/richel/mingw-cross-env-2.15/usr/i686-pc-mingw32/lib' -lboost_filesystem-mt -lboost_system-mt -lQtCore -lkernel32 -luser32 -lshell32 -luuid -lole32 -ladvapi32 -lws2_32 -lz <br/>
make[1]: Leaving directory `/home/richel/qtsdk-2010.04/bin/Projects/Website/CppQtCrosscompileToWindowsExample15'<br/>
<br/>
richel@richel1-desktop:~/2Projects/Website/CppQtCrosscompileToWindowsExample15$<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Now the Windows executable can be found in the /release folder.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://mingw-cross-env.nongnu.org">MinGW cross compiling environment homepage</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Acknowledgements</h2>
<p>&nbsp;</p>
<p>Thanks to Mark Brand for contacting me: at the first try this approach failed and Mark let me try this approach 
again.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>[1] http://mingw-cross-env.nongnu.org/#tutorial</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
Tutorial<br/>
Step 1: Download and Unpack<br/>
<br/>
First, you should ensure that your system meets mingw-cross-env's requirements. You probably need to install some stuff.<br/>
<br/>
When everything is fine, download the latest release:<br/>
<br/>
wget http://download.savannah.nongnu.org/releases/mingw-cross-env/mingw-cross-env-2.15.tar.gz<br/>
<br/>
and unpack the tarball:<br/>
<br/>
tar -xzvf mingw-cross-env-2.15.tar.gz<br/>
<br/>
If you don't mind installing it in your home directory, just skip the following step and go straight to step 3.<br/>
Step 2: System-wide Installation (optional)<br/>
<br/>
Now you should save any previous installation of the mingw-cross-env. Assuming you've installed it under /opt/mingw (any other directory will do as well), you should execute the following commands:<br/>
<br/>
su<br/>
mv /opt/mingw /opt/mingw.old<br/>
exit<br/>
<br/>
Then you need to transfer the entire directory to its definitive location. We will assume again you use /opt/mingw, but feel free to use any other directory if you like.<br/>
<br/>
su<br/>
mv mingw-cross-env-2.15 /opt/mingw<br/>
exit<br/>
<br/>
We're almost done. Just change to your newly created directory and get going:<br/>
<br/>
cd /opt/mingw<br/>
<br/>
Step 3: Build mingw-cross-env<br/>
<br/>
Enter the directory where you've unpacked the mingw-cross-env. Now it depends on what you actually want ? or need.<br/>
<br/>
If you choose to enter:<br/>
<br/>
make<br/>
<br/>
you're in for a long wait, because it compiles a lot of packages. On the other hand it doesn't require any intervention, so you're free to do whatever you like ? like watch a movie or go for a night on the town. When it's done you'll find that you've installed a very capable Win32 cross compiler onto your system.<br/>
<br/>
If you only need the most basic tools you can also use:<br/>
<br/>
make gcc<br/>
<br/>
and add any additional packages you need later on. You can also supply a host of packages on the command line, e.g.:<br/>
<br/>
make gtk lua libidn<br/>
<br/>
You'll always end up with a consistent cross compiling environment.<br/>
<br/>
After you're done it just needs a little post-installation.<br/>
Step 4: Environment Variables<br/>
<br/>
Edit your .bashrc script in order to change $PATH:<br/>
<br/>
export PATH=/where mingw-cross-env is installed/usr/bin:$PATH<br/>
<br/>
Note that any compiler related environment variables (like $CC, $LDFLAGS, etc.) may spoil your compiling pleasure, so be sure to delete or disable those.<br/>
<br/>
Congratulations! You're ready to cross compile anything you like.<br/>
Step 5a: Cross compile your Project (Autotools)<br/>
<br/>
If you use the Autotools, all you have to do is:<br/>
<br/>
./configure --host=i686-pc-mingw32<br/>
make<br/>
<br/>
Don't worry about a warning like this:<br/>
<br/>
configure: WARNING: If you wanted to set the --build type, don't use --host.<br/>
If a cross compiler is detected then cross compile mode will be used.<br/>
<br/>
Everything will be just fine.<br/>
Step 5b: Cross compile your Project (Qt)<br/>
<br/>
If you have a Qt application, all you have to do is:<br/>
<br/>
i686-pc-mingw32-qmake<br/>
make<br/>
<br/>
If you are using Qt plugins such as database drivers or graphics plugins, you should also have a look at the Qt documentation about static plugins.<br/>
Step 5c: Cross compile your Project (Makefile)<br/>
<br/>
If you have a handwritten Makefile, you probably will have to make a few adjustments to it:<br/>
<br/>
CC=$(CROSS)gcc<br/>
LD=$(CROSS)ld<br/>
AR=$(CROSS)ar<br/>
<br/>
You may have to add a few others, depending on your project.<br/>
<br/>
Then, all you have to do is:<br/>
<br/>
make CROSS=i686-pc-mingw32-<br/>
<br/>
That's it!<br/>
Step 5d: Cross compile your Project (OSG)<br/>
<br/>
Using static OpenSceneGraph libraries requires a few changes to your source. The graphics subsystem and all plugins required by your application must be referenced explicitly. Use a code block like the following:<br/>
<br/>
#ifdef OSG_LIBRARY_STATIC<br/>
USE_GRAPHICSWINDOW()<br/>
USE_OSGPLUGIN(&lt;plugin1&gt;)<br/>
USE_OSGPLUGIN(&lt;plugin2&gt;)<br/>
...<br/>
#endif<br/>
<br/>
Look at examples/osgstaticviewer/osgstaticviewer.cpp in the OpenSceneGraph source distribution for an example. This example can be compiled with the following command:<br/>
<br/>
i686-pc-mingw32-g++ \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-o osgstaticviewer.exe examples/osgstaticviewer/osgstaticviewer.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;`i686-pc-mingw32-pkg-config --cflags openscenegraph-osgViewer openscenegraph-osgPlugins` \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;`i686-pc-mingw32-pkg-config --libs openscenegraph-osgViewer openscenegraph-osgPlugins`<br/>
<br/>
The i686-pc-mingw32-pkg-config command from mingw-cross-env will automatically add -DOSG_LIBRARY_STATIC to your compiler flags. <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
