<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Answer of exercise #8: Library trouble #1</title>
  <meta name="description" content="C++ Answer of exercise #8: Library trouble #1"/>
  <meta name="keywords" content="C++ Answer of exercise #8: Library trouble #1"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExerciseLibraryTroubleAnswer1.htm">Answer of exercise #8: Library trouble #1</a></h1>
<p>&nbsp;</p>
<p>This is the answer of <a href="CppExerciseLibraryTrouble.htm">Exercise #8: library trouble</a>.</p>
<p>&nbsp;</p>
<p>There are six solutions solutions, as listed below:</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Abandon const-correctness (0/10)</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filezT2cFQ.cpp" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "abc***def";<br/>
<a href="CppComment.htm">/*</a> <b><a href="CppConst.htm">const</a></b> <a href="CppComment.htm">*/</a> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Number of repeats<br/>
<a href="CppSearch_n.htm">std::search_n</a>( s.begin(),s.end(),n,'*');<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Using const is good [1-6], abondoning const-correctness is not.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Use a C-style cast (1/10)</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileDMsABd.cpp" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "abc***def";<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Number of repeats<br/>
<a href="CppSearch_n.htm">std::search_n</a>( s.begin(),s.end(), (<b><a href="CppInt.htm">int</a></b>) n,'*');<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Don't use C-style casts, but use one of the four more-specific C++ casting keywords [7,8].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Use of reinterpret_cast (1/10)</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="file5RrvPz.cpp" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "abc***def";<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Number of repeats<br/>
<a href="CppSearch_n.htm">std::search_n</a>( s.begin(),s.end(),<b><a href="CppReinterpret_cast.htm">reinterpret_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(n) ,'*');<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The use of <a href="CppReinterpret_cast.htm">reinterpret_cast</a> is nonsense here, because int and const int are closely related. Also, it still will not compile, with the same compile error.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Use of dynamic_cast (1/10)</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileHKzCOW.cpp" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "abc***def";<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Number of repeats<br/>
<a href="CppSearch_n.htm">std::search_n</a>( s.begin(),s.end(),<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(n) ,'*');<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The use of <a href="CppDynamic_cast.htm">dynamic_cast</a> is nonsense here, because
int and const int are not members of the same class hierarchy. Also, it still
will not compile, because a dynamic_cast cannot cast from 'const int' to 'int'.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Use of const_cast (8/10)</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="file13nzXk.cpp" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "abc***def";<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Number of repeats<br/>
<a href="CppSearch_n.htm">std::search_n</a>( s.begin(),s.end(),<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(n) ,'*');<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The use of <a href="CppConst_cast.htm">const_cast</a> is my favorite solution. As
it is the most correct solution, as all we want to do is to cast away the const.
But too bad, it does not compile!</p>
<p>If you know why const_cast does not compile and static_cast does, please send me an <a href="Email.png">email</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Use of static_cast (10/10)</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filehtmkVV.cpp" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "abc***def";<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Number of repeats<br/>
<a href="CppSearch_n.htm">std::search_n</a>( s.begin(),s.end(),<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(n) ,'*');<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>I regret that the use of <a href="CppStatic_cast.htm">static_cast</a> is the best
solution, as a const_cast is more clear. But const_cast does not compile, so
one is left to use static_cast.</p>
<p>&nbsp;</p>
<p>If you know why const_cast does not compile and static_cast does, please send me an <a href="Email.png">email</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 7.9.3: 'Use const extensively and consistently'</p>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition).ISBN: 0-321-33487-6. Item 3: 'Use const whenever possible'</p>
  <li><a href="CppJarrodHollingworth.htm">Jarrod Hollingworth</a>, <a href="CppBobSwart.htm">Bob Swart</a>, <a href="CppMarkCashman.htm">Mark Cashman</a>, <a href="CppPaulGustavson.htm">Paul Gustavson</a>. Sams C++ Builder 6 Developer's Guide. ISBN: 0-672-32480-6. Chapter 3: 'Understand and use const in your code'</li>
  <li><a href="CppJesseLiberty.htm">Jesse Liberty</a>. Sams teach yourself C++ in 24 hours. ISBN: 0-672-32224-2. Hour 8, chapter 'Const member functions': 'Use const whenever possible.'</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 2: 'Prefer consts, enums and inlines to #defines'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 15: 'Use const proactively'</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 6.5.5: 'When explicit type conversion is necessary, prefer the more specific cast operators to the C-style cast'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 95: 'Don't use C-style casts'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
