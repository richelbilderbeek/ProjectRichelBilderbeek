<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>TicTacToe</title>
  <meta name="description" content="C++ TicTacToe"/>
  <meta name="keywords" content="C++ TicTacToe "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppTicTacToe.htm">TicTacToe</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.637 at Thu May  1 21:03:33 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppTicTacToe.htm">TicTacToe</a> is a <a href="CppClass.htm">class</a> embodying
the game logic of Tic-Tac-Toe.</p>
<p>&nbsp;</p>
<p><a href="CppTicTacToe.htm">TicTacToe</a> is used by, among others:</p>
<ul>
  <li><a href="ProjectWtWebsite.htm">ProjectWtWebsite</a></li>
  <li><a href="ToolTestTicTacToe.htm">TestTicTacToe</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/CppTicTacToe.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/CppTicTacToe.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>winner.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>square.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>player.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>board.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>game.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>helper.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a><a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>key.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>ai.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>ais.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>winner.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>square.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>player.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>board.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>game.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>helper.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a><a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>fwd.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>key.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>ai.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>ais.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTicTacToe.htm">CppTicTacToe</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoeai.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoeai.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TICTACTOEAI_H<br/>
<a href="CppDefine.htm">#define</a> TICTACTOEAI_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUtilityH.htm">utility</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>fwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>An artifical intelligence <b><a href="CppFor.htm">for</a></b> a tic tac toe game<br/>
<b><a href="CppStruct.htm">struct</a></b> Ai<br/>
{<br/>
&nbsp;&nbsp;Ai() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Ai() {}<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; SuggestMove(<b><a href="CppConst.htm">const</a></b> Game&amp; game) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Try to enforce a draw<br/>
<b><a href="CppStruct.htm">struct</a></b> AiEnforceDraw : <b><a href="CppPublic.htm">public</a></b> Ai<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; SuggestMove(<b><a href="CppConst.htm">const</a></b> Game&amp; game) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "enforce_draw"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Try to enforce a win<br/>
<b><a href="CppStruct.htm">struct</a></b> AiEnforceWin : <b><a href="CppPublic.htm">public</a></b> Ai<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; SuggestMove(<b><a href="CppConst.htm">const</a></b> Game&amp; game) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "enforce_win"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Play randomly<br/>
<b><a href="CppStruct.htm">struct</a></b> AiPlayRandom : <b><a href="CppPublic.htm">public</a></b> Ai<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; SuggestMove(<b><a href="CppConst.htm">const</a></b> Game&amp; game) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "play_random"; }<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TICTACTOEAI_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoeai.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoeai.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>ai.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>board.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>game.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>helper.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Ai::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Ai::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-21: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Ai::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::AiEnforceDraw::SuggestMove(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game&amp; game<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostMulti_array.htm">boost::multi_array</a>&lt;<b><a href="CppInt.htm">int</a></b>,2&gt; like(<a href="CppBoost.htm">boost</a>::extents[3][3]);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (game.GetWinner() <a href="CppOperatorNotEqual.htm">!=</a> Winner::no_winner)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("AiEnforceDraw::SuggestMove: Cannot suggest a move when there is a winner");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Not interested in taken squares<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> game.GetBoard()-&gt;GetSquare(col,row) <a href="CppOperatorNotEqual.htm">!=</a> Square::empty<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> !game.CanDoMove(col,row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppOperatorMinus.htm">-</a>1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Not interested in winning the game<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> me(game.GetCurrentPlayer());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (like[col][row] <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Horizontal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vertical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Diagonal, top-left to bottom-right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( col <a href="CppOperatorEqual.htm">==</a> row<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Diagonal, top-left to bottom-right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( col <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorMinus.htm">-</a> row<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Interested in blocking the other<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> other(Helper().GetOtherPlayer(me));<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (like[col][row] <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Horizontal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vertical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Diagonal, top-left to bottom-right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( col <a href="CppOperatorEqual.htm">==</a> row<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Diagonal, top-left to bottom-right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( col <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorMinus.htm">-</a> row<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Collect moves at likedness<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&gt; moves;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> likedness <a href="CppOperatorAssign.htm">=</a> like[col][row];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (moves.count(likedness) <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves.insert(moves.begin(),<a href="CppStdMake_pair.htm">std::make_pair</a>(likedness,<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves[ likedness ].push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(col,row));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find moves with maximum likedness<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> best_liked( (*moves.rbegin()).second);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Choose one at random<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(best_liked.begin(),best_liked.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!best_liked.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(game.CanDoMove(best_liked[0].first,best_liked[0].second));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> best_liked[0];<br/>
}<br/>
<br/>
<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::AiEnforceWin::SuggestMove(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game&amp; game<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostMulti_array.htm">boost::multi_array</a>&lt;<b><a href="CppInt.htm">int</a></b>,2&gt; like(<a href="CppBoost.htm">boost</a>::extents[3][3]);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (game.GetWinner() <a href="CppOperatorNotEqual.htm">!=</a> Winner::no_winner)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("AiEnforceDraw::SuggestMove: Cannot suggest a move when there is a winner");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Not interested in taken squares<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> game.GetBoard()-&gt;GetSquare(col,row) <a href="CppOperatorNotEqual.htm">!=</a> Square::empty<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> !game.CanDoMove(col,row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppOperatorMinus.htm">-</a>1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Interested in winning the game<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> me(game.GetCurrentPlayer());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (like[col][row] <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Horizontal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vertical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Diagonal, top-left to bottom-right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( col <a href="CppOperatorEqual.htm">==</a> row<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Diagonal, top-left to bottom-right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( col <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorMinus.htm">-</a> row<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(me)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Interested in blocking the other<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> other(Helper().GetOtherPlayer(me));<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (like[col][row] <a href="CppOperatorLessEqual.htm">&lt;=</a> 0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Horizontal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vertical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 0) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Diagonal, top-left to bottom-right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( col <a href="CppOperatorEqual.htm">==</a> row<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Diagonal, top-left to bottom-right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( col <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorMinus.htm">-</a> row<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> game.GetBoard()-&gt;GetSquare((col <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3,(row <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3) <a href="CppOperatorEqual.htm">==</a> Helper().PlayerToSquare(other)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Collect moves at likedness<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&gt; moves;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> likedness <a href="CppOperatorAssign.htm">=</a> like[col][row];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (moves.count(likedness) <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves.insert(moves.begin(),<a href="CppStdMake_pair.htm">std::make_pair</a>(likedness,<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves[ likedness ].push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(col,row));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find moves with maximum likedness<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> best_liked( (*moves.rbegin()).second);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Choose one at random<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(best_liked.begin(),best_liked.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!best_liked.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(game.CanDoMove(best_liked[0].first,best_liked[0].second));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> best_liked[0];<br/>
}<br/>
<br/>
<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::AiPlayRandom::SuggestMove(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game&amp; game<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostMulti_array.htm">boost::multi_array</a>&lt;<b><a href="CppInt.htm">int</a></b>,2&gt; like(<a href="CppBoost.htm">boost</a>::extents[3][3]);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (game.GetWinner() <a href="CppOperatorNotEqual.htm">!=</a> Winner::no_winner)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("AiEnforceDraw::SuggestMove: Cannot suggest a move when there is a winner");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Not interested in taken squares<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like[col][row] <a href="CppOperatorAssign.htm">=</a> game.GetBoard()-&gt;GetSquare(col,row) <a href="CppOperatorNotEqual.htm">!=</a> Square::empty<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> !game.CanDoMove(col,row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppOperatorMinus.htm">-</a>1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Collect moves at likedness<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&gt; moves;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> likedness <a href="CppOperatorAssign.htm">=</a> like[col][row];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (moves.count(likedness) <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves.insert(moves.begin(),<a href="CppStdMake_pair.htm">std::make_pair</a>(likedness,<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves[ likedness ].push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(col,row));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find moves with maximum likedness<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> best_liked( (*moves.rbegin()).second);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Choose one at random<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(best_liked.begin(),best_liked.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!best_liked.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(game.CanDoMove(best_liked[0].first,best_liked[0].second));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> best_liked[0];<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoeais.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoeais.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TICTACTOEAIS_H<br/>
<a href="CppDefine.htm">#define</a> TICTACTOEAIS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>fwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>To work on Ai's<br/>
<b><a href="CppStruct.htm">struct</a></b> Ais<br/>
{<br/>
&nbsp;&nbsp;Ais() {}<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Ai<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> GetAll() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TICTACTOEAIS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoeais.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoeais.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>ais.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>ai.h"<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Ai<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Ais::GetAll() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Ai<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Ai&gt; p(<b><a href="CppNew.htm">new</a></b> AiEnforceDraw);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Ai&gt; p(<b><a href="CppNew.htm">new</a></b> AiEnforceWin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Ai&gt; p(<b><a href="CppNew.htm">new</a></b> AiPlayRandom);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoeboard.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoeboard.h" border = "1"><tr><td><code>
 <a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppTicTacToe.htm">TicTacToe</a>, tic-tac-toe game <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppTicTacToe.htm">CppTicTacToe</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> TICTACTOEBOARD_H<br/>
<a href="CppDefine.htm">#define</a> TICTACTOEBOARD_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/multi_<a href="CppArray.htm">array</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>player.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>square.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>winner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>fwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Board is a dumb tic-tac-toe board <b><a href="CppClass.htm">class</a></b>: it detects the winner, but does not<br/>
<a href="CppComment.htm">///</a>know whose turn it is. <a href="CppTicTacToe.htm">TicTacToe</a>Game does know <b><a href="CppThis.htm">this</a></b><br/>
<b><a href="CppStruct.htm">struct</a></b> Board<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTicTacToe.htm">TicTacToe</a> <b><a href="CppDefault.htm">default</a></b> contructor creates an empty board,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/where the current turn is to player1.<br/>
&nbsp;&nbsp;Board() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTicTacToe.htm">TicTacToe</a> contructor from summized state <a href="CppInt.htm">integer</a>.<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Board(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can a player put his/her <a href="CppChar.htm">character</a> at (x,y)?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanDoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the square exist?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGetSquare(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/DoMove lets a player put his/her token at a certain position on the board.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> Player player) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetBoard <a href="CppReturn.htm">returns</a> the tic-tac-toe board.<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostMulti_array.htm">boost::multi_array</a>&lt;Square,2&gt;&amp; GetBoard() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_board; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetSquare <a href="CppReturn.htm">returns</a> the content at square (x,y)<br/>
&nbsp;&nbsp;Square GetSquare(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a> <a href="CppReturn.htm">returns</a> an <a href="CppInt.htm">integer</a> summarizing the<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/state, which is both tic-tac-toe board and whose turn it is.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/In trinary, <b><a href="CppFor.htm">for</a></b> lowest order digit:\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/# : content\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/0 : content of (0,0)\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/1 : content of (1,0)\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/2 : content of (2,0)\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/3 : content of (0,1)\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/4 : content of (1,1)\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/5 : content of (2,1)\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/6 : content of (0,2)\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/7 : content of (1,2)\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/8 : content of (2,2)\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/9 : current turn\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Content is stored as:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/[#] : description\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 0&nbsp;&nbsp;: empty\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 1&nbsp;&nbsp;: player1\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 2&nbsp;&nbsp;: player2\n<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;Winner GetWinner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetBoard sets a tic-tac-toe board.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetBoard(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostMulti_array.htm">boost::multi_array</a>&lt;Square,2&gt;&amp; board) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetSquare sets the value of square (x,y).<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSquare(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> Square square_state) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetSummarized<a href="CppState.htm">State</a> sets the board its state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSummarized<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Text<a href="CppCanvas.htm">Canvas</a>&gt; ToText<a href="CppCanvas.htm">Canvas</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(Board*)&gt; m_signal_changed;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_board stores the board in an x-y-order<br/>
&nbsp;&nbsp;<a href="CppBoostMulti_array.htm">boost::multi_array</a>&lt;Square,2&gt; m_board;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/NoEmptySquares determines whether there are no empty squares left.<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> NoEmptySquares() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Board&amp; t) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Board&amp; t) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Board&amp; lhs, <b><a href="CppConst.htm">const</a></b> Board&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TICTACTOEBOARD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoeboard.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoeboard.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppTicTacToe.htm">TicTacToe</a>, tic-tac-toe game <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppTicTacToe.htm">CppTicTacToe</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>board.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "textcanvas.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>helper.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppTicTacToe.htm">TicTacToe</a> <b><a href="CppDefault.htm">default</a></b> contructor creates an empty board,<br/>
<a href="CppComment.htm">///</a>where the current turn is to player1.<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::Board() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: m_signal_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_board(<a href="CppBoost.htm">boost</a>::extents[3][3])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_current_player(<a href="CppTicTacToe.htm">TicTacToe</a>Player::player1)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_board[i/3][i%3] <a href="CppOperatorAssign.htm">=</a> Square::empty;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::Board(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state)<br/>
&nbsp;&nbsp;: m_signal_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_board(<a href="CppBoost.htm">boost</a>::extents[3][3])<br/>
{<br/>
&nbsp;&nbsp;SetSummarized<a href="CppState.htm">State</a>(state);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::CanDoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!CanGetSquare(x,y)) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[x][y] <a href="CppOperatorNotEqual.htm">!=</a> Square::empty) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::CanGetSquare(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &lt; 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &lt; 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 3) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 3) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::DoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> Player player) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanDoMove(x,y));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Player " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_current_player<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;m_board[x][y] <a href="CppOperatorAssign.htm">=</a> Helper().PlayerToSquare(player);<br/>
&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Square <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::GetSquare(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanGetSquare(x,y));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_board[x][y];<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> z <a href="CppOperatorAssign.htm">=</a> SquareTo<a href="CppState.htm">State</a>(m_board[0][0]);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;z <a href="CppOperatorPlusAssign.htm">+=</a> (SquareTo<a href="CppState.htm">State</a>(m_board[i/3][i%3]) * Helper().<a href="CppIntPower.htm">IntPower</a>(3,i));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> z;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.6";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-09-19: <a href="CppVersion.htm">version</a> 1.3: made CanDoMove <a href="CppMemberFunction.htm">member function</a> a <a href="CppConstMemberFunction.htm">const member function</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-01-27: <a href="CppVersion.htm">version</a> 1.4: added ToText<a href="CppCanvas.htm">Canvas</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-02-03: <a href="CppVersion.htm">version</a> 1.5: added m_signal_changed",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-17: <a href="CppVersion.htm">version</a> 1.6: use <b><a href="CppEnumClass.htm">enum class</a></b>es, use of <b><a href="CppNoexcept.htm">noexcept</a></b>, extracted Game"<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Winner <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::GetWinner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check rows<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[0][y] <a href="CppOperatorNotEqual.htm">!=</a> Square::empty<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[0][y] <a href="CppOperatorEqual.htm">==</a> m_board[1][y]<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[1][y] <a href="CppOperatorEqual.htm">==</a> m_board[2][y])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Helper().SquareToWinner(m_board[0][y]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check collumns<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[x][0] <a href="CppOperatorNotEqual.htm">!=</a> Square::empty<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[x][0] <a href="CppOperatorEqual.htm">==</a> m_board[x][1]<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[x][1] <a href="CppOperatorEqual.htm">==</a> m_board[x][2])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> Helper().SquareToWinner(m_board[x][0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check diagonal<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[0][0] <a href="CppOperatorNotEqual.htm">!=</a> Square::empty<br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[0][0] <a href="CppOperatorEqual.htm">==</a> m_board[1][1]<br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[1][1] <a href="CppOperatorEqual.htm">==</a> m_board[2][2])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Helper().SquareToWinner(m_board[1][1]);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check other diagonal<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[0][2] <a href="CppOperatorNotEqual.htm">!=</a> Square::empty<br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[0][2] <a href="CppOperatorEqual.htm">==</a> m_board[1][1]<br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[1][1] <a href="CppOperatorEqual.htm">==</a> m_board[2][0])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Helper().SquareToWinner(m_board[1][1]);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> draw<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (NoEmptySquares()) <b><a href="CppReturn.htm">return</a></b> Winner::draw;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No winner<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Winner::no_winner;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::NoEmptySquares() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[i/3][i%3] <a href="CppOperatorEqual.htm">==</a> Square::empty) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::Restart() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>() <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_board[i/3][i%3] <a href="CppOperatorAssign.htm">=</a> Square::empty;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::SetBoard(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostMulti_array.htm">boost::multi_array</a>&lt;Square,2&gt;&amp; board) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board <a href="CppOperatorEqual.htm">==</a> board) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;m_board <a href="CppOperatorAssign.htm">=</a> board;<br/>
&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::SetSquare(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> Square square_state) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[x][y] <a href="CppOperatorEqual.htm">==</a> square_state) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;m_board[x][y] <a href="CppOperatorAssign.htm">=</a> square_state;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Internal test<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSquare(x,y)<a href="CppOperatorEqual.htm">==</a>square_state);<br/>
<br/>
&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::SetSummarized<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> original_state) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>() <a href="CppOperatorEqual.htm">==</a> original_state) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(original_state <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (original_state <a href="CppOperatorGreaterEqual.htm">&gt;=</a> Helper().<a href="CppIntPower.htm">IntPower</a>(3,9))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(original_state &lt; Helper().<a href="CppIntPower.htm">IntPower</a>(3,9));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> s <a href="CppOperatorAssign.htm">=</a> original_state;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_board[i/3][i%3] <a href="CppOperatorAssign.htm">=</a> <a href="CppState.htm">State</a>ToSquare(s <a href="CppOperatorModulus.htm">%</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorDivideAssign.htm">/=</a>3;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Internal check<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>()<a href="CppOperatorEqual.htm">==</a>original_state);<br/>
<br/>
&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::Test");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check empty board state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> s <a href="CppOperatorAssign.htm">=</a> t.<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board u(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(u <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check one-move states<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(i/3,i%3,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> s <a href="CppOperatorAssign.htm">=</a> t.<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board u(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(u <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check two-move states<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>8; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(i/3,i%3,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(i/3,(i+1)%3,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> s <a href="CppOperatorAssign.htm">=</a> t.<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board u(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(u <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check draw detection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,1,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,0,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,2,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,0,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,0,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,2,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,1,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,1,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,2,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::draw);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check player1 wins horizontally detection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,0,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,0,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,1,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,1,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,2,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check player2 wins vertically detection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,0,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,0,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,1,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,1,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,2,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,2,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check player1 wins diagonally detection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,0,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,0,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,1,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,2,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,2,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check no-winner detection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,1,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,0,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,2,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,0,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,0,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,2,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,1,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,1,Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>t.DoMove(2,2); <a href="CppComment.htm">//</a>Final move to <a href="CppMake.htm">make</a> a draw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check CanDoMove<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(i/3,i%3,Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!t.CanDoMove(i/3,i%3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check all states<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>Helper().<a href="CppIntPower.htm">IntPower</a>(3,9); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board t(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>() <a href="CppOperatorEqual.htm">==</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::Text<a href="CppCanvas.htm">Canvas</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::ToText<a href="CppCanvas.htm">Canvas</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Text<a href="CppCanvas.htm">Canvas</a>&gt; c {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Text<a href="CppCanvas.htm">Canvas</a>(3,3)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c-&gt;PutText(x,y,SquareToStr(GetSquare(x,y)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> c;<br/>
}<br/>
<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board&amp; t) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> SquareToStr(t.GetSquare(0,0))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> SquareToStr(t.GetSquare(1,0))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> SquareToStr(t.GetSquare(2,0))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> SquareToStr(t.GetSquare(0,1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> SquareToStr(t.GetSquare(1,1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> SquareToStr(t.GetSquare(2,1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> SquareToStr(t.GetSquare(0,2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> SquareToStr(t.GetSquare(1,2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> SquareToStr(t.GetSquare(2,2))<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetBoard() <a href="CppOperatorEqual.htm">==</a> rhs.GetBoard();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoefwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoefwd.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TICTACTOEFWD_H<br/>
<a href="CppDefine.htm">#define</a> TICTACTOEFWD_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppCanvas.htm">Canvas</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Text<a href="CppCanvas.htm">Canvas</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a><a href="CppCanvas.htm">Canvas</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Ai;<br/>
<b><a href="CppStruct.htm">struct</a></b> Board;<br/>
<b><a href="CppStruct.htm">struct</a></b> Game;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQtTicTacToeWidget.htm">QtTicTacToeWidget</a>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TICTACTOEFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoegame.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoegame.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TICTACTOEGAME_H<br/>
<a href="CppDefine.htm">#define</a> TICTACTOEGAME_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>player.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>winner.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>fwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Manages a Board to follow the rules<br/>
<b><a href="CppStruct.htm">struct</a></b> Game<br/>
{<br/>
&nbsp;&nbsp;Game() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can the current player put his/her <a href="CppChar.htm">character</a> at (x,y)?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanDoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/DoMove lets the current player put his/her token at a certain position on the board.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Board&gt; GetBoard() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetCurrentPlayer <a href="CppReturn.htm">returns</a> whose turn it is.<br/>
&nbsp;&nbsp;Player GetCurrentPlayer() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_current_player; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetCurrentTurn <a href="CppReturn.htm">returns</a> the turn number.<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetCurrentTurn() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a> <a href="CppReturn.htm">returns</a> an <a href="CppInt.htm">integer</a> summarizing the<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/state, which is both tic-tac-toe board and whose turn it is.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/In trinary, <b><a href="CppFor.htm">for</a></b> lowest order digit:\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/# : content\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/0-8: board<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/9 : current turn\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The current turn is stored as:\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/[#] : description\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 0&nbsp;&nbsp;: ERROR\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 1&nbsp;&nbsp;: player1\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 2&nbsp;&nbsp;: player2\n<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;Winner GetWinner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetSummarized<a href="CppState.htm">State</a> sets the game its state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSummarized<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Text<a href="CppCanvas.htm">Canvas</a>&gt; ToText<a href="CppCanvas.htm">Canvas</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(Game*)&gt; m_signal_changed;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Board&gt; m_board;<br/>
&nbsp;&nbsp;Player m_current_player;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Game&amp; t) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Game&amp; lhs, <b><a href="CppConst.htm">const</a></b> Game&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TICTACTOEGAME_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoegame.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoegame.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>game.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "textcanvas.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>ai.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>board.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>helper.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::Game() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: m_signal_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_board(<b><a href="CppNew.htm">new</a></b> Board),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_player(Player::player1)<br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetCurrentTurn() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::CanDoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetBoard()-&gt;CanDoMove(x,y);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::DoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanDoMove(x,y));<br/>
&nbsp;&nbsp;m_board-&gt;DoMove(x,y,m_current_player);<br/>
&nbsp;&nbsp;m_current_player <a href="CppOperatorAssign.htm">=</a> (m_current_player <a href="CppOperatorEqual.htm">==</a> Player::player1 ? Player::player2 : Player::player1);<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::GetBoard() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_board);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_board;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::GetCurrentTurn() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> turn <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetBoard()-&gt;GetSquare(i/3,i%3) <a href="CppOperatorNotEqual.htm">!=</a> Square::empty) <a href="CppOperatorIncrement.htm">++</a>turn;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> turn;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>MSB: player<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>LSB: board<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> z <a href="CppOperatorAssign.htm">=</a> m_board-&gt;<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>();<br/>
&nbsp;&nbsp;z <a href="CppOperatorPlusAssign.htm">+=</a> (PlayerTo<a href="CppState.htm">State</a>(m_current_player) * Helper().<a href="CppIntPower.htm">IntPower</a>(3,9));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> z;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-17: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>, extracted from Board"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Winner <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::GetWinner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetBoard()-&gt;GetWinner();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::Restart() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_board-&gt;Restart();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_current_player <a href="CppOperatorNotEqual.htm">!=</a> Player::player1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_player <a href="CppOperatorAssign.htm">=</a> Player::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::SetSummarized<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> original_state) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>() <a href="CppOperatorEqual.htm">==</a> original_state) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>MSB: player<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>LSB: board<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>9 <b><a href="CppFor.htm">for</a></b> the board, 1 <b><a href="CppFor.htm">for</a></b> the current player<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(original_state &lt; Helper().<a href="CppIntPower.htm">IntPower</a>(3,9 <a href="CppOperatorPlus.htm">+</a> 1));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> s <a href="CppOperatorAssign.htm">=</a> original_state;<br/>
&nbsp;&nbsp;m_board-&gt;SetSummarized<a href="CppState.htm">State</a>(s <a href="CppOperatorModulus.htm">%</a> Helper().<a href="CppIntPower.htm">IntPower</a>(3,9));<br/>
&nbsp;&nbsp;s <a href="CppOperatorDivideAssign.htm">/=</a> Helper().<a href="CppIntPower.htm">IntPower</a>(3,9);<br/>
&nbsp;&nbsp;m_current_player <a href="CppOperatorAssign.htm">=</a> <a href="CppState.htm">State</a>ToPlayer(s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Internal check<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>()<a href="CppOperatorEqual.htm">==</a>original_state);<br/>
<br/>
&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::Test");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check draw detection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Game t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentPlayer() <a href="CppOperatorEqual.htm">==</a> Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentTurn()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentPlayer() <a href="CppOperatorEqual.htm">==</a> Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentTurn()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentPlayer() <a href="CppOperatorEqual.htm">==</a> Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentTurn()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentPlayer() <a href="CppOperatorEqual.htm">==</a> Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentTurn()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentPlayer() <a href="CppOperatorEqual.htm">==</a> Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentTurn()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentPlayer() <a href="CppOperatorEqual.htm">==</a> Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentTurn()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> 5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentPlayer() <a href="CppOperatorEqual.htm">==</a> Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentTurn()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> 6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentPlayer() <a href="CppOperatorEqual.htm">==</a> Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentTurn()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentPlayer() <a href="CppOperatorEqual.htm">==</a> Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentTurn()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> 8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentPlayer() <a href="CppOperatorEqual.htm">==</a> Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetCurrentTurn()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> 9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::draw);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check player1 wins horizontally detection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Game t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check player2 wins vertically detection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Game t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check player1 wins diagonally detection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Game t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check no-winner detection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Game t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(1,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(0,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(2,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>t.DoMove(2,2); <a href="CppComment.htm">//</a>Final move to <a href="CppMake.htm">make</a> a draw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check CanDoMove<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Game t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(i/3,i%3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.CanDoMove(i/3,i%3)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check AI's<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> a <a href="CppOperatorAssign.htm">=</a> 0; a<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>a)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> b <a href="CppOperatorAssign.htm">=</a> 0; b<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Ai&gt; c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (a)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: c.reset(<b><a href="CppNew.htm">new</a></b> AiEnforceDraw); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: c.reset(<b><a href="CppNew.htm">new</a></b> AiEnforceWin); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: c.reset(<b><a href="CppNew.htm">new</a></b> AiPlayRandom); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Ai&gt; d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: d.reset(<b><a href="CppNew.htm">new</a></b> AiEnforceDraw); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: d.reset(<b><a href="CppNew.htm">new</a></b> AiEnforceWin); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: d.reset(<b><a href="CppNew.htm">new</a></b> AiPlayRandom); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Game g;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (g.GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::no_winner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; move_1(c-&gt;SuggestMove(g));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(g.CanDoMove(move_1.first,move_1.second));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.DoMove(move_1.first,move_1.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (g.GetWinner() <a href="CppOperatorNotEqual.htm">!=</a> Winner::no_winner) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; move_2(c-&gt;SuggestMove(g));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(g.CanDoMove(move_2.first,move_2.second));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.DoMove(move_2.first,move_2.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(WinnerToName(g.GetWinner()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Board::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::Text<a href="CppCanvas.htm">Canvas</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game::ToText<a href="CppCanvas.htm">Canvas</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetBoard()-&gt;ToText<a href="CppCanvas.htm">Canvas</a>();<br/>
}<br/>
<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game&amp; t) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*t.GetBoard());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Game&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *lhs.GetBoard() <a href="CppOperatorEqual.htm">==</a> *rhs.GetBoard()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetCurrentPlayer() <a href="CppOperatorEqual.htm">==</a> rhs.GetCurrentPlayer()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoehelper.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoehelper.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TICTACTOEHELPER_H<br/>
<a href="CppDefine.htm">#define</a> TICTACTOEHELPER_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>player.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>square.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>winner.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Helper<br/>
{<br/>
&nbsp;&nbsp;Helper() {}<br/>
<br/>
&nbsp;&nbsp;Player GetOtherPlayer(<b><a href="CppConst.htm">const</a></b> Player player) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppIntPower.htm">IntPower</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppIntPower.htm">IntPower</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> base, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> exponent) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;Square PlayerToSquare(<b><a href="CppConst.htm">const</a></b> Player player) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;Player SquareToPlayer(<b><a href="CppConst.htm">const</a></b> Square square) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;Winner SquareToWinner(<b><a href="CppConst.htm">const</a></b> Square square) <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TICTACTOEHELPER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoehelper.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoehelper.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>helper.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Player <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Helper::GetOtherPlayer(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Player player<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (player)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Player::player1: <b><a href="CppReturn.htm">return</a></b> Player::player2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Player::player2: <b><a href="CppReturn.htm">return</a></b> Player::player1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("GetOtherPlayer: unknown player");<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Helper::<a href="CppIntPower.htm">IntPower</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> base, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> exponent) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(exponent <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "When calculating <a href="CppIntPower.htm">IntPower</a>(x,0) the result "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "might be zero or one, depending on the context");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(exponent &gt; 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> result <a href="CppOperatorAssign.htm">=</a> base;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>exponent; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result<a href="CppOperatorMultiplyAssign.htm">*=</a>base;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Square <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Helper::PlayerToSquare(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Player player) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (player)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Player::player1: <b><a href="CppReturn.htm">return</a></b> Square::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Player::player2: <b><a href="CppReturn.htm">return</a></b> Square::player2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("PlayerToSquare: unknown player");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Player <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Helper::SquareToPlayer(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Square square) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (square)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Square::empty&nbsp;&nbsp;: <a href="CppAssert.htm">assert</a>(!"Cannot <a href="CppConvert.htm">convert</a> empty square to player");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Square::player1: <b><a href="CppReturn.htm">return</a></b> Player::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Square::player2: <b><a href="CppReturn.htm">return</a></b> Player::player2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("SquareToPlayer: unknown square");<br/>
}<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Winner <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Helper::SquareToWinner(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Square square) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (square)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Square::empty&nbsp;&nbsp;: <a href="CppAssert.htm">assert</a>(!"Cannot <a href="CppConvert.htm">convert</a> empty square to winner");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Square::player1: <b><a href="CppReturn.htm">return</a></b> Winner::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Square::player2: <b><a href="CppReturn.htm">return</a></b> Winner::player2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("SquareToWinner: unknown square");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoekey.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoekey.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TICTACTOEKEY_H<br/>
<a href="CppDefine.htm">#define</a> TICTACTOEKEY_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a> {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> Key { up, right, down, left, select };<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TICTACTOEKEY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoekey.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoekey.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>key.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoeplayer.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoeplayer.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TICTACTOEPLAYER_H<br/>
<a href="CppDefine.htm">#define</a> TICTACTOEPLAYER_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a> {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> Player<br/>
{<br/>
&nbsp;&nbsp;player1,<br/>
&nbsp;&nbsp;player2<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> PlayerTo<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> Player player) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
Player <a href="CppState.htm">State</a>ToPlayer(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TICTACTOEPLAYER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoeplayer.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoeplayer.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>player.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::PlayerTo<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Player player) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (player)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Player::player1: <b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Player::player2: <b><a href="CppReturn.htm">return</a></b> 2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppTicTacToe.htm">TicTacToe</a>::PlayerTo<a href="CppState.htm">State</a>: unknown player");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Player <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppState.htm">State</a>ToPlayer(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (state)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> Player::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppReturn.htm">return</a></b> Player::player2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppTicTacToe.htm">TicTacToe</a>::<a href="CppState.htm">State</a>ToPlayer: invalid state");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoesquare.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoesquare.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TICTACTOESQUARE_H<br/>
<a href="CppDefine.htm">#define</a> TICTACTOESQUARE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a> {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> Square<br/>
{<br/>
&nbsp;&nbsp;empty,<br/>
&nbsp;&nbsp;player1,<br/>
&nbsp;&nbsp;player2<br/>
};<br/>
<br/>
<a href="CppStdString.htm">std::string</a> SquareToStr(<b><a href="CppConst.htm">const</a></b> Square square) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppInt.htm">int</a></b> SquareTo<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> Square square) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
Square <a href="CppState.htm">State</a>ToSquare(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TICTACTOESQUARE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoesquare.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoesquare.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>square.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::SquareTo<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Square square) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (square)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Square::empty&nbsp;&nbsp;: <b><a href="CppReturn.htm">return</a></b> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Square::player1: <b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Square::player2: <b><a href="CppReturn.htm">return</a></b> 2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppTicTacToe.htm">TicTacToe</a>::SquareTo<a href="CppState.htm">State</a>: unknown square");<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::SquareToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppTicTacToe.htm">tictactoe</a>::Square square) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (square)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Square::empty&nbsp;&nbsp;: <b><a href="CppReturn.htm">return</a></b> " ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Square::player1: <b><a href="CppReturn.htm">return</a></b> "X";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Square::player2: <b><a href="CppReturn.htm">return</a></b> "O";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppTicTacToe.htm">TicTacToe</a>::SquareToStr: unknown square");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Square <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppState.htm">State</a>ToSquare(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (state)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> Square::empty;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> Square::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppReturn.htm">return</a></b> Square::player2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppTicTacToe.htm">TicTacToe</a>::<a href="CppState.htm">State</a>ToSquare: unknown state");<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoewidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoewidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TICTACTOEWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> TICTACTOEWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>fwd.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>key.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>player.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>winner.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>User interaction focused <a href="CppTicTacToe.htm">TicTacToe</a> game<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWidget.htm">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWidget.htm">Widget</a>();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanSelect(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoMove() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;Player GetCurrentPlayer() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Game&gt; GetGame() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_game; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;Winner GetWinner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKey(<b><a href="CppConst.htm">const</a></b> Key key) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Select(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Text<a href="CppCanvas.htm">Canvas</a>&gt; ToText<a href="CppCanvas.htm">Canvas</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppSignal.htm">Signal</a> <a href="CppEmit.htm">emitted</a> when the <a href="CppWidget.htm">widget</a> is changed<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; m_signal_changed;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Game&gt; m_game;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_x;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_y;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TICTACTOEWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoewidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoewidget.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "textcanvas.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>game.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::<a href="CppWidget.htm">Widget</a>()<br/>
&nbsp;&nbsp;: m_signal_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_game{<b><a href="CppNew.htm">new</a></b> Game},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x{1},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y{1}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::CanSelect(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetGame()-&gt;CanDoMove(x,y);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::DoMove() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetGame()-&gt;CanDoMove(m_x,m_y));<br/>
&nbsp;&nbsp;m_game-&gt;DoMove(m_x,m_y);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Player <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::GetCurrentPlayer() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetGame()-&gt;GetCurrentPlayer();<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetGame()-&gt;<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-xx-xx: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>, in <a href="GameTicTacToe.htm">GameTicTacToe</a> folder",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-17: <a href="CppVersion.htm">version</a> 1.1: moved from the game <a href="CppTicTacToe.htm">TicTacToe</a> to <a href="CppTicTacToe.htm">CppTicTacToe</a>Folder, improved <a href="CppInterface.htm">interface</a>"<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Winner <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::GetWinner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetGame()-&gt;GetWinner();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::PressKey(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Key key) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (key)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Key::up&nbsp;&nbsp;&nbsp;&nbsp;: <b><a href="CppIf.htm">if</a></b> (m_y &gt; 0) <a href="CppOperatorDecrement.htm">--</a>m_y; m_signal_changed(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Key::right : <b><a href="CppIf.htm">if</a></b> (m_x &lt; 2) <a href="CppOperatorIncrement.htm">++</a>m_x; m_signal_changed(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Key::down&nbsp;&nbsp;: <b><a href="CppIf.htm">if</a></b> (m_y &lt; 2) <a href="CppOperatorIncrement.htm">++</a>m_y; m_signal_changed(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Key::left&nbsp;&nbsp;: <b><a href="CppIf.htm">if</a></b> (m_x &gt; 0) <a href="CppOperatorDecrement.htm">--</a>m_x; m_signal_changed(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Key::select:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_game-&gt;CanDoMove(m_x,m_y))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_game-&gt;DoMove(m_x,m_y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::Restart() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_game-&gt;Restart();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::Select(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanSelect(x,y));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_x <a href="CppOperatorNotEqual.htm">!=</a> x <a href="CppOperatorLogicalOr.htm">||</a> m_y <a href="CppOperatorNotEqual.htm">!=</a> y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::Test");<br/>
&nbsp;&nbsp;<a href="CppWidget.htm">Widget</a> w;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!w.Get<a href="CppVersion.htm">Version</a>().empty());<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::Text<a href="CppCanvas.htm">Canvas</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::<a href="CppWidget.htm">Widget</a>::ToText<a href="CppCanvas.htm">Canvas</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Text<a href="CppCanvas.htm">Canvas</a>&gt; canvas {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_game-&gt;ToText<a href="CppCanvas.htm">Canvas</a>()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(canvas);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_game-&gt;GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::player1<br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> m_game-&gt;GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::player2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;PutChar(i,j, m_game-&gt;GetWinner() <a href="CppOperatorEqual.htm">==</a> Winner::player1 ? 'X': 'O');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c <a href="CppOperatorAssign.htm">=</a> canvas-&gt;GetChar(m_x,m_y);<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> d <a href="CppOperatorAssign.htm">=</a> ' ';<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ' ': d <a href="CppOperatorAssign.htm">=</a> '.'; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '.': d <a href="CppOperatorAssign.htm">=</a> ' '; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'O': d <a href="CppOperatorAssign.htm">=</a> 'o'; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'X': d <a href="CppOperatorAssign.htm">=</a> 'x'; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'o': d <a href="CppOperatorAssign.htm">=</a> 'O'; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'x': d <a href="CppOperatorAssign.htm">=</a> 'X'; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;canvas-&gt;PutChar(m_x,m_y,d);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> canvas;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoewinner.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoewinner.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TICTACTOEWINNER_H<br/>
<a href="CppDefine.htm">#define</a> TICTACTOEWINNER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a> {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> Winner<br/>
{<br/>
&nbsp;&nbsp;player1,<br/>
&nbsp;&nbsp;player2,<br/>
&nbsp;&nbsp;draw,<br/>
&nbsp;&nbsp;no_winner<br/>
};<br/>
<br/>
<a href="CppStdString.htm">std::string</a> WinnerToStr(<b><a href="CppConst.htm">const</a></b> Winner winner) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdString.htm">std::string</a> WinnerToName(<b><a href="CppConst.htm">const</a></b> Winner winner) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppTicTacToe.htm">tictactoe</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TICTACTOEWINNER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTicTacToe/tictactoewinner.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTicTacToe/tictactoewinner.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>winner.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::WinnerToName(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Winner winner) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (winner)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winner::player1&nbsp;&nbsp;: <b><a href="CppReturn.htm">return</a></b> "player1";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winner::player2&nbsp;&nbsp;: <b><a href="CppReturn.htm">return</a></b> "player2";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winner::draw&nbsp;&nbsp;&nbsp;&nbsp; : <b><a href="CppReturn.htm">return</a></b> "draw";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winner::no_winner: <b><a href="CppReturn.htm">return</a></b> "no_winner";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::WinnerToName: unknown winner");<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::WinnerToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppTicTacToe.htm">tictactoe</a>::Winner winner) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (winner)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winner::player1&nbsp;&nbsp;: <b><a href="CppReturn.htm">return</a></b> "X";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winner::player2&nbsp;&nbsp;: <b><a href="CppReturn.htm">return</a></b> "O";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winner::draw&nbsp;&nbsp;&nbsp;&nbsp; : <a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> "*";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winner::no_winner: <a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> " ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::WinnerToStr: unknown winner");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::WinnerToStr: unknown winner");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
