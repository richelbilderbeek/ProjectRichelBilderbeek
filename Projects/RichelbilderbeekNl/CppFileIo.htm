<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>FileIo</title>
  <meta name="description" content="C++ FileIo"/>
  <meta name="keywords" content="C++ FileIo "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppFileIo.htm">FileIo</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Tue Aug  5 11:57:37 2014
 -->
<p><a href="CppFileIo.htm">File I/O</a> is working with files, like saving, reading, copying and searching.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppFileIo.htm">File I/O</a> <a href="CppStl.htm">STL</a> <a href="CppFunction.htm">functions</a> and <a href="CppDataType.htm">data types</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppFstream.htm">std::fstream</a>: file <a href="CppStream.htm">stream</a></li>
  <li><a href="CppRemove.htm">std::remove</a>: remove a file</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppFileIo.htm">File I/O</a> <a href="CppCodeSnippets.htm">code snippets</a></h2>
<p>&nbsp;</p>
<ol>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppCopy_file.htm">boost::filesystem::copy_file, copy a file</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicQt.png" alt="Qt"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppIsRegularFile.htm">Check if a file exists, IsRegularFile</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/> 
    <a href="CppCopy_file.htm">Copy a file, boost::filesystem::copy_file</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicVcl.png" alt="VCL"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppCopyFile.htm">Copy a file, CopyFile</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicVcl.png" alt="VCL"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppCopyFile.htm">CopyFile, copy a file</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppDeleteFile.htm">DeleteFile, delete a file</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppDeleteFile.htm">Delete a file, DeleteFile</a>
  </li>
  <li>
    <img src="PicVcl.png" alt="VCL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppFileToStringList.htm">FileToStringList, read a file in a TStringList</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppFileToVector.htm">FileToVector, read a file in a std::vector</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetPath.htm">Get a file's path, GetPath</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetCppFilesInFolder.htm">Get all C++ filenames in a folder, GetCppFilesInFolder</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicQt.png" alt="Qt"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetFilesInFolder.htm">Get all filenames in a folder, GetFilesInFolder</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetExtension.htm">Get the extension of a filename, GetExtension</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetCurrentFolder.htm">Get the name of the folder your application runs in, GetCurrentFolder</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetCppFilesInFolder.htm">GetCppFilesInFolder, get all C++ filenames in a folder</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetCurrentFolder.htm">GetCurrentFolder, get the name of the folder your application runs in</a>
  </li>
  <li>
    <img src="PicQt.png" alt="Qt"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetFoldersInFolder.htm">Get the names of the folders in a folder, GetFoldersInFolder</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetExtension.htm">GetExtension, get the extension of a filename</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicQt.png" alt="Qt"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetFilesInFolder.htm">GetFilesInFolder, get all filenames in a folder</a>
  </li>
  <li>
    <img src="PicQt.png" alt="Qt"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetFoldersInFolder.htm">GetFoldersInFolder, get all the names of the folders in a folder</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetPath.htm">GetPath, get a file's path</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicQt.png" alt="Qt"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppIsFolder.htm">IsFolder, check if a path is a folder</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicQt.png" alt="Qt"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppIsRegularFile.htm">IsRegularFile, check if a file is a regular file</a>
  </li>

  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppReadDoubleFromFile.htm">ReadDoubleFromFile, read a double from file</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppReadDoubleFromFile.htm">Read a double from file, ReadDoubleFromFile</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppFileToVector.htm">Read a file in a std::vector, FileToVector</a>
  </li>
  <li>
    <img src="PicVcl.png" alt="VCL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppFileToStringList.htm">Read a file in a TStringList, FileToStringList</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppRemoveExtension.htm">Remove the extension of a filename, RemoveExtension</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppRemoveExtension.htm">RemoveExtension, remove the extension of a filename</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppRunOtherProgram.htm">Run another program and use its output</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppSaveContainer.htm">Save a container to file, SaveContainer</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppSaveContainer.htm">SaveContainer, save a container to file</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppSimplifyPath.htm">SimplifyPath, simplify a path</a>
  </li>
</ol>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/CppFileIo.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/CppFileIo.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppFileIo.htm">CppFileIo</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppFileIo.htm">CppFileIo</a>/<a href="CppFileIo.htm">fileio</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppFileIo.htm">CppFileIo</a>/filename.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppFileIo.htm">CppFileIo</a>/<a href="CppFileIo.htm">fileio</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppFileIo.htm">CppFileIo</a>/filename.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppFileIo.htm">CppFileIo</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/filecopymode.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/filecopymode.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RIBI_<a href="CppCfile.htm">FILE</a>COPYMODE_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_<a href="CppCfile.htm">FILE</a>COPYMODE_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppFileIo.htm">fileio</a> {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> CopyMode&nbsp;&nbsp; { allow_overwrite, prevent_overwrite };<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppFileIo.htm">fileio</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_<a href="CppCfile.htm">FILE</a>COPYMODE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/fileio.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/fileio.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppFileIo.htm">FileIo</a>, <b><a href="CppClass.htm">class</a></b> with file I/O <a href="CppFunction.htm">function</a>s<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppFileIo.htm">CppFileIo</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> RIBI_<a href="CppCfile.htm">FILE</a>IO_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_<a href="CppCfile.htm">FILE</a>IO_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>fwd.h"<br/>
<a href="CppInclude.htm">#include</a> "filecopymode.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppFileIo.htm">fileio</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppFileIo.htm">FileIo</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEnumClass.htm">enum class</a></b> RenameMode { allow_overwrite, prevent_overwrite };<br/>
<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Converts</a> a <a href="CppWindows.htm">Windows</a> path to a Unix path. A Unix path will remain unaltered.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does so by replacing '\' by '/'<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppConvert.htm">Convert</a>PathToUnix(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; path) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Creates a folder<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will abort <b><a href="CppIf.htm">if</a></b> it already exists<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppCreateFolder.htm">CreateFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Copy a file. If prevent_overwrite is set to <b><a href="CppTrue.htm">true</a></b>, a file<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/cannot be copied over an existing target. If prevent_overwrite<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/is set to <b><a href="CppFalse.htm">false</a></b>, a file can be copied over an existing target,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/which will overwrite the target.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCopyFile.htm">CopyFile</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppCopyFile.htm">CopyFile</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileNameFrom,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileNameTo,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CopyMode copy_mode <a href="CppOperatorAssign.htm">=</a> CopyMode::prevent_overwrite<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Delete a file<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppDeleteFile.htm">DeleteFile</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppDeleteFile.htm">DeleteFile</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Deletes a folder its content recursively<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> an <a href="CppException.htm">exception</a> <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> fails<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppDeleteFolder.htm">DeleteFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> two files are identical<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdBad_alloc.htm">std::bad_alloc</a> <b><a href="CppIf.htm">if</a></b> at least one of the files is<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/too big <b><a href="CppFor.htm">for</a></b> a <a href="CppStdVector.htm">std::vector</a>.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFilesAreIdentical.htm">FilesAreIdentical</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <a href="CppFilesAreIdentical.htm">FilesAreIdentical</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename_a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename_b<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/FileToStr reads a file and <a href="CppConvert.htm">converts</a> it to <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdBad_alloc.htm">std::bad_alloc</a> <b><a href="CppIf.htm">if</a></b> the file is too big to fit in <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdLogic_error.htm">std::logic_error</a> <b><a href="CppIf.htm">if</a></b> the file does not exist<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.htm">FileToVector</a>.htm<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> FileToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppFileToVector.htm">FileToVector</a> reads a file and <a href="CppConvert.htm">converts</a> it to a <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdBad_alloc.htm">std::bad_alloc</a> <b><a href="CppIf.htm">if</a></b> the file is too big to fit in <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdLogic_error.htm">std::logic_error</a> <b><a href="CppIf.htm">if</a></b> the file does not exist<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.htm">FileToVector</a>.htm<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns the extension of a filename, starting with a dot<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetExtension.htm">GetExtension</a>.htm<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppGetExtension.htm">GetExtension</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns the extension of a filename, without a trailing dot<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppGetExtension.htm">GetExtension</a>NoDot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns the extension of a filename, with a trailing dot<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppGetExtension.htm">GetExtension</a>WithDot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the basename of a file or folder<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MyFolder/MyFile.txt <a href="CppOperatorMinus.htm">-</a> &gt; MyFile<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MyFolder/MySubFolder <a href="CppOperatorMinus.htm">-</a>&gt; MySubFolder<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppGetFileBasename.htm">GetFileBasename</a> is a replacement of <a href="CppBoostFilesystem.htm">boost::filesystem</a>::basename<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppGetFileBasename.htm">GetFileBasename</a>.htm<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppGetFileBasename.htm">GetFileBasename</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain all files in a folder.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This does not include those in a subfolder<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>.htm<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain all files in a folder including thos in a subfolder<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>.htm<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>Recursive(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>By<a href="CppRegex.htm">Regex</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppRegex.htm">regex</a>_str<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain all folder in a folder.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This does not include those in a subfolder<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetFoldersInFolder.htm">GetFoldersInFolder</a>.htm<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppGetFoldersInFolder.htm">GetFoldersInFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain all folder in a folder.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This does include those in a subfolder<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetFoldersInFolder.htm">GetFoldersInFolder</a>.htm<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppGetFoldersInFolder.htm">GetFoldersInFolder</a>Recursive(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns the path of a filename<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPath.htm">GetPath</a>.htm<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppGetPath.htm">GetPath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns the path seperator depending on the operating system<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For <a href="CppLinux.htm">Linux</a>, <b><a href="CppThis.htm">this</a></b> is a slash<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For <a href="CppWindows.htm">Windows</a>, <b><a href="CppThis.htm">this</a></b> is a backslash<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPath.htm">GetPath</a>Seperator.htm<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns the superfolder from a path<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example: '/A/B/C' its superfolder is '/A/B'<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppGetSuperFolder.htm">GetSuperFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the name of a file that does not exist<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> a <a href="CppStdRuntime_error.htm">std::runtime_error</a> in the unlikely<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppCase.htm">case</a></b> it fails after one thousand <a href="CppTime.htm">time</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The 'post' is a string to be at the filename's end<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> GetTempFileName("") <a href="CppOperatorMinus.htm">-</a>&gt; tmp01234567<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> GetTempFileName(".txt") <a href="CppOperatorMinus.htm">-</a>&gt; tmp01234567.txt<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetTempFileName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; post <a href="CppOperatorAssign.htm">=</a> "") <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the name of a folder that does not exist<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> a <a href="CppStdRuntime_error.htm">std::runtime_error</a> in the unlikely<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppCase.htm">case</a></b> it fails after one thousand <a href="CppTime.htm">time</a>s<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppGetTempFolderName.htm">GetTempFolderName</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> the path has only the right path seperators<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A <a href="CppLinux.htm">Linux</a> path should not contain <a href="CppWindows.htm">Windows</a> backslashes<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A <a href="CppWindows.htm">Windows</a> path should not contain <a href="CppLinux.htm">Linux</a> slashes<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> HasRightPathSeperators(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; path) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> the path has both <a href="CppLinux.htm">Linux</a> and <a href="CppWindows.htm">Windows</a> path seperators<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> HasTwoPathSeperators(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; path) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns <b><a href="CppIf.htm">if</a></b> the name is a folder name<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppIsFolder.htm">IsFolder</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <a href="CppIsFolder.htm">IsFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Determines <b><a href="CppIf.htm">if</a></b> a filename is a regular file<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppIsRegularFile.htm">IsRegularFile</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <a href="CppIsRegularFile.htm">IsRegularFile</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> the path is a valid <a href="CppUnix.htm">UNIX</a> path<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsUnixPath(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; path) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Removes the path of a filename<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppRemovePath.htm">RemovePath</a>.htm<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppRemovePath.htm">RemovePath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Renames a file<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRenameFile.htm">RenameFile</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppRenameFile.htm">RenameFile</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; to,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> RenameMode rename_mode <a href="CppOperatorAssign.htm">=</a> RenameMode::prevent_overwrite<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Simplify a path<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorDivide.htm">/</a>home/richel/<a href="Projects.htm">Projects</a>/<a href="Tools.htm">Tools</a>/<a href="Tools.htm">Tool</a>TestProFile/../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/is <a href="CppConvert.htm">convert</a>ed to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorDivide.htm">/</a>home/richel/<a href="Projects.htm">Projects</a>/<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppSimplifyPath.htm<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> SimplifyPath(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a <a href="CppStdVector.htm">std::vector</a> to a file<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> VectorToFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CopyMode copy_mode <a href="CppOperatorAssign.htm">=</a> CopyMode::prevent_overwrite<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppFileIo.htm">fileio</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_<a href="CppCfile.htm">FILE</a>IO_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/fileio.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/fileio.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppFileIo.htm">FileIo</a>, <b><a href="CppClass.htm">class</a></b> with file I/O <a href="CppFunction.htm">function</a>s<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppFileIo.htm">CppFileIo</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBoostXpressive.htm">xpressive</a>/<a href="CppBoostXpressive.htm">xpressive</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDir.htm">QDir</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "filecopymode.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppFileIo.htm">FileIo</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppConvert.htm">Convert</a>PathToUnix(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; path) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> path;<br/>
&nbsp;&nbsp;<a href="CppStdReplace.htm">std::replace</a>(<a href="CppStdBegin.htm">std::begin</a>(s),<a href="CppStdEnd.htm">std::end</a>(s),'\\','/');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsUnixPath(s));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppCopyFile.htm">CopyFile</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileNameFrom,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileNameTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CopyMode copy_mode<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(fileNameFrom) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot copy a non-existing file");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (copy_mode <a href="CppOperatorEqual.htm">==</a> CopyMode::prevent_overwrite <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppIsRegularFile.htm">IsRegularFile</a>(fileNameTo))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Copying to an existing file is not allowed");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppIsRegularFile.htm">IsRegularFile</a>(fileNameTo))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDeleteFile.htm">DeleteFile</a> ensures a correct deletion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(fileNameTo);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> in{fileNameFrom.c_str()};<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> out{fileNameTo.c_str()};<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> in.rdbuf();<br/>
&nbsp;&nbsp;out.close();<br/>
&nbsp;&nbsp;in.close();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppCreateFolder.htm">CreateFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(<a href="CppIsFolder.htm">IsFolder</a>(folder))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(folder);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsFolder.htm">IsFolder</a>(folder)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only create folders that <b><a href="CppDo.htm">do</a></b> not exist yet");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> cmd <a href="CppOperatorAssign.htm">=</a> "mkdir " <a href="CppOperatorPlus.htm">+</a> folder;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> error <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSystem.htm">std::system</a>(cmd.c_str());<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error) { <a href="CppTRACE.htm">TRACE</a>(cmd); }<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!error <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume mkdir works under both <a href="CppWindows.htm">Windows</a> and <a href="CppLinux.htm">Linux</a>");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppCreateFolder.htm">CreateFolder</a>: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppCreateFolder.htm">CreateFolder</a> failed in creating the folder '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> folder <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "': "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsFolder.htm">IsFolder</a>(folder) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "it should work");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppDeleteFile.htm">DeleteFile</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only <b><a href="CppDelete.htm">delete</a></b> existing files");<br/>
&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(filename.c_str());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Under <a href="CppWindows.htm">Windows</a>, readonly files must be made deleteable<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> cmd <a href="CppOperatorAssign.htm">=</a> "attrib <a href="CppOperatorMinus.htm">-</a>r " <a href="CppOperatorPlus.htm">+</a> filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSystem.htm">std::system</a>(cmd.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> s <a href="CppOperatorAssign.htm">=</a> "Failed to <b><a href="CppDelete.htm">delete</a></b> " <a href="CppOperatorPlus.htm">+</a> filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must not exist <a href="CppAny.htm">any</a>more");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppDeleteFolder.htm">DeleteFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsFolder.htm">IsFolder</a>(folder)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only <b><a href="CppDelete.htm">delete</a></b> folders that <b><a href="CppDo.htm">do</a></b> exist");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete all files<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; subfolder: <a href="CppGetFoldersInFolder.htm">GetFoldersInFolder</a>(folder))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFolder.htm">DeleteFolder</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(folder.empty() ? folder : folder <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> subfolder<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFoldersInFolder.htm">GetFoldersInFolder</a>(folder).empty());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; filename: <a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(folder))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(folder.empty() ? folder : folder <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> filename<br/>
&nbsp;&nbsp; );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(folder).empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> cmd <a href="CppOperatorAssign.htm">=</a> "rmdir " <a href="CppOperatorPlus.htm">+</a> folder;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> error <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSystem.htm">std::system</a>(cmd.c_str());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!error <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume rmdir works under both <a href="CppWindows.htm">Windows</a> and <a href="CppLinux.htm">Linux</a>");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppDeleteFolder.htm">DeleteFolder</a>: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppDeleteFolder.htm">DeleteFolder</a> failed in deleting the folder '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> folder <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "': "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "failed by system call"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppIsFolder.htm">IsFolder</a>(folder))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppDeleteFolder.htm">DeleteFolder</a>: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppDeleteFolder.htm">DeleteFolder</a> failed in deleting the folder '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> folder <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppFilesAreIdentical.htm">FilesAreIdentical</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename_a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename_b<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_a))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename_a);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_b))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename_b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_a) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must exist to be compared");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_b) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must exist to be compared");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> <a href="CppFileToVector.htm">FileToVector</a>(filename_a);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> w <a href="CppOperatorAssign.htm">=</a> <a href="CppFileToVector.htm">FileToVector</a>(filename_b);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v <a href="CppOperatorEqual.htm">==</a> w;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::FileToStr(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; t: <a href="CppFileToVector.htm">FileToVector</a>(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a> t <a href="CppOperatorPlus.htm">+</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!s.empty()) s.pop_back();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppFileToVector.htm">FileToVector</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsFolder.htm">IsFolder</a>(filename));<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> in{filename.c_str()};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(in.is_open());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Without <b><a href="CppThis.htm">this</a></b> test in release mode,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>the program might run indefinitely when the file does not exists<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!in.is_open())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s{"ERROR: file does not exist: " <a href="CppOperatorPlus.htm">+</a> filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>{s.c_str()};<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !in.eof(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(in,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s); <a href="CppComment.htm">//</a>Might <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdBad_alloc.htm">std::bad_alloc</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove empty line at back of vector<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!v.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> v.back().empty()) v.pop_back();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppGetExtension.htm">GetExtension</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppGetExtension.htm">GetExtension</a>WithDot(filename);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppGetExtension.htm">GetExtension</a>NoDot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a> rex{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>("(.*)?(\\.)([A-Za-z]*)?" )<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppBoostXpressive.htm">boost::xpressive</a>::smatch what;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( <a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_match( filename, what, rex ) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> what[3];<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "";<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppGetExtension.htm">GetExtension</a>WithDot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;( <a href="CppStdCount.htm">std::count</a>(filename.begin(),filename.end(),'.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? "."<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: ""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppGetExtension.htm">GetExtension</a>NoDot(filename);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppGetFileBasename.htm">GetFileBasename</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a> rex{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>("((.*)(/|\\\\))?([A-Za-z0-9_-]*)((\\.)([A-Za-z0-9]*))?" )<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppBoostXpressive.htm">boost::xpressive</a>::smatch what;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(<a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_match( filename, what, rex ))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> what[4];<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsFolder.htm">IsFolder</a>(folder));<br/>
&nbsp;&nbsp;<a href="CppQDir.htm">QDir</a> dir{folder.c_str()};<br/>
&nbsp;&nbsp;dir.setFilter(<a href="CppQDir.htm">QDir</a>::Files);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQFile.htm">QFile</a>InfoList list{dir.entryInfoList()};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> <a href="CppQFile.htm">QFile</a>InfoList to <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; of filenames<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size{list.size()};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i{0}; i <a href="CppOperatorNotEqual.htm">!=</a> size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> file_name{list.at(i).fileName().toStdString()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(file_name);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>Recursive(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; root_folder) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsFolder.htm">IsFolder</a>(root_folder));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Files in root_folder<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; files_here{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(root_folder)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy the files and folders with path added<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(files_here.begin(),files_here.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,root_folder](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_here{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_folder <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_here));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> filename_here;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Folders in root_folder<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; folders_todo;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> folders_here <a href="CppOperatorAssign.htm">=</a> <a href="CppGetFoldersInFolder.htm">GetFoldersInFolder</a>(root_folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(folders_here.begin(),folders_here.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(folders_todo),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,root_folder](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; foldername)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> folder_here <a href="CppOperatorAssign.htm">=</a> root_folder <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> foldername;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsFolder.htm">IsFolder</a>(folder_here));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> folder_here;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Search through all sub folders<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (!folders_todo.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> folder_todo <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folders_todo.back(); <a href="CppComment.htm">//</a>Read from the back, so push_back can be used<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Done with <b><a href="CppThis.htm">this</a></b> folder<br/>
&nbsp;&nbsp;&nbsp;&nbsp;folders_todo.pop_back();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(!(folders_todo.empty() <a href="CppOperatorLogicalOr.htm">||</a> folders_todo.back() <a href="CppOperatorNotEqual.htm">!=</a> folder_todo))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; todo: folders_todo) { <a href="CppTRACE.htm">TRACE</a>(todo); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; result: v) { <a href="CppTRACE.htm">TRACE</a>(result); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (folders_todo.empty() <a href="CppOperatorLogicalOr.htm">||</a> folders_todo.back() <a href="CppOperatorNotEqual.htm">!=</a> folder_todo)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Next folder must not be the one that is just processed");<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> files_here <a href="CppOperatorAssign.htm">=</a> <a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(folder_todo);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> folders_here <a href="CppOperatorAssign.htm">=</a> <a href="CppGetFoldersInFolder.htm">GetFoldersInFolder</a>(folder_todo);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; folder_here: folders_here) { <a href="CppTRACE.htm">TRACE</a>(folder_here); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy the files and folders with path added<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(files_here.begin(),files_here.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,folder_todo](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> file_here {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_todo <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(file_here));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> file_here;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(folders_here.begin(),folders_here.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(folders_todo),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>,folder_todo](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; foldername)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!foldername.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> subfolder_name {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_todo <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> foldername<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(subfolder_name <a href="CppOperatorNotEqual.htm">!=</a> folder_todo);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> subfolder_name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>By<a href="CppRegex.htm">Regex</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppRegex.htm">regex</a>_str<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(!<a href="CppIsFolder.htm">IsFolder</a>(folder))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(folder);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get all filenames<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsFolder.htm">IsFolder</a>(folder));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> <a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(folder);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the <a href="CppRegex.htm">regex</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> rex <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>(<a href="CppRegex.htm">regex</a>_str);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the resulting <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy all filenames matching the <a href="CppRegex.htm">regex</a> in the resulting <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppStdCopy_if.htm">std::copy_if</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[rex](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostXpressive.htm">boost::xpressive</a>::smatch what;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_match(s, what, rex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppGetFoldersInFolder.htm">GetFoldersInFolder</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsFolder.htm">IsFolder</a>(folder));<br/>
&nbsp;&nbsp;<a href="CppQDir.htm">QDir</a> dir{folder.c_str()};<br/>
&nbsp;&nbsp;dir.setFilter(<a href="CppQDir.htm">QDir</a>::Dirs | <a href="CppQDir.htm">QDir</a>::NoDotAndDotDot );<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppQFile.htm">QFile</a>InfoList list{dir.entryInfoList()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> list <a href="CppOperatorAssign.htm">=</a> dir.entryInfoList();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> <a href="CppQFile.htm">QFile</a>InfoList to <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; of filenames<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> size <a href="CppOperatorAssign.htm">=</a> list.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i <a href="CppOperatorNotEqual.htm">!=</a> size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> folder_name <a href="CppOperatorAssign.htm">=</a> list.at(i).fileName().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!folder_name.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(folder_name);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; s: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),s) <a href="CppOperatorEqual.htm">==</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Every folder name is unique");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppGetPath.htm">GetPath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> filename.rfind("\\",filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> filename.rfind("/",filename.size());<br/>
&nbsp;&nbsp;<a href="CppStdSize_t.htm">std::size_t</a> i{0};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos) { i <a href="CppOperatorAssign.htm">=</a> a; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos) { i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax.htm">std::max</a>(i,b); }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> filename.size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> filename.substr(0,i);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppGetPath.htm">GetPath</a>Seperator() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "\\";<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "/";<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppGetSuperFolder.htm">GetSuperFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> folder.rfind("\\",folder.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> folder.rfind("/",folder.size());<br/>
&nbsp;&nbsp;<a href="CppStdSize_t.htm">std::size_t</a> i{0};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos) { i <a href="CppOperatorAssign.htm">=</a> a; }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos) { i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax.htm">std::max</a>(i,b); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; folder.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? ""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: folder.substr(0,i);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::GetTempFileName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; post) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Limit the number of searches, to prevent the program from freezing<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It might occur that the first random names are taken, because<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>of working without a randomize <a href="CppTime.htm">time</a>r first<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>1000; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "tmpfilename"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdRand.htm">std::rand</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdRand.htm">std::rand</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdRand.htm">std::rand</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdRand.htm">std::rand</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> post;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppIsRegularFile.htm">IsRegularFile</a>(s.str())) <b><a href="CppReturn.htm">return</a></b> s.str();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::GetTempFileName: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Could not find a temporary file name"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str());<br/>
}<br/>
<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppGetTempFolderName.htm">GetTempFolderName</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Limit the number of searches, to prevent the program from freezing<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It might occur that the first random names are taken, because<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>of working without a randomize <a href="CppTime.htm">time</a>r first<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>1000; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "tmpfoldername"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdRand.htm">std::rand</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdRand.htm">std::rand</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdRand.htm">std::rand</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdRand.htm">std::rand</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppIsFolder.htm">IsFolder</a>(s.str())) <b><a href="CppReturn.htm">return</a></b> s.str();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppGetTempFolderName.htm">GetTempFolderName</a>: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Could not find a temporary folder name"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str());<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.4";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-10-14: <a href="CppVersion.htm">Version</a> 1.0: initial <a href="CppVersion.htm">version</a>, used <a href="CppFreeFunction.htm">free function</a>s only",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-11-08: <a href="CppVersion.htm">Version</a> 1.1: improved <a href="CppFileToVector.htm">FileToVector</a>, improved <a href="CppGetFileBasename.htm">GetFileBasename</a>, added some <a href="CppFunction.htm">function</a>s",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-12-10: <a href="CppVersion.htm">Version</a> 1.2: improved existing <a href="CppFunction.htm">function</a>, added some <a href="CppFunction.htm">function</a>s",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-24: <a href="CppVersion.htm">Version</a> 1.3: put <a href="CppFreeFunction.htm">free function</a>s in <a href="CppFileIo.htm">FileIo</a> <b><a href="CppClass.htm">class</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-15: <a href="CppVersion.htm">Version</a> 1.4: increased use of <b><a href="CppAuto.htm">auto</a></b> and <a href="CppInitializerList.htm">initializer list</a>s"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::HasRightPathSeperators(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; path) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> wrong <a href="CppOperatorAssign.htm">=</a> '/';<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> wrong <a href="CppOperatorAssign.htm">=</a> '\\';<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> path.find(wrong) <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>::npos;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::HasTwoPathSeperators(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; path) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> path.find('/') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> path.find('\\') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppIsFolder.htm">IsFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQDir.htm">QDir</a>(filename.c_str()).exists();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppIsRegularFile.htm">IsRegularFile</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !<a href="CppQDir.htm">QDir</a>(filename.c_str()).exists() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppQFile.htm">QFile</a>::exists(filename.c_str());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::IsUnixPath(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; path) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (path.find('\\') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppRemovePath.htm">RemovePath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdSize_t.htm">std::size_t</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> filename.rfind("\\",filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos) v.push_back(a);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> filename.rfind("/",filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos) v.push_back(b);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()) <b><a href="CppReturn.htm">return</a></b> filename;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> *<a href="CppStdMax_element.htm">std::max_element</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> i <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j &lt; filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> s <a href="CppOperatorAssign.htm">=</a> filename.substr(j,filename.size() <a href="CppOperatorMinus.htm">-</a> j);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::<a href="CppRenameFile.htm">RenameFile</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; from,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; to,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> RenameMode rename_mode) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppIsRegularFile.htm">IsRegularFile</a>(from))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(from);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(from) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot rename a non-existing file");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from <a href="CppOperatorNotEqual.htm">!=</a> to <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot rename to the same filename");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rename_mode <a href="CppOperatorEqual.htm">==</a> RenameMode::prevent_overwrite <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppIsRegularFile.htm">IsRegularFile</a>(to))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Renaming to an existing file is not allowed");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppIsRegularFile.htm">IsRegularFile</a>(to))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDeleteFile.htm">DeleteFile</a> ensures a correct deletion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(to);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> result{<a href="CppStdRename.htm">std::rename</a>(from.c_str(),to.c_str())};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (result <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsRegularFile.htm">IsRegularFile</a>(to)&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(from));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete 'from' manually<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsRegularFile.htm">IsRegularFile</a>(to)&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(from);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsRegularFile.htm">IsRegularFile</a>(to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(from));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::SimplifyPath(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t{s};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppUnix.htm">UNIX</a><br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a> <a href="CppRegex.htm">regex</a>{<a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>(R"((/\w<a href="CppComment.htm">*/</a>\.\./))")};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> new_t{<a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_replace(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t,<a href="CppRegex.htm">regex</a>,"/")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t <a href="CppOperatorEqual.htm">==</a> new_t) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t <a href="CppOperatorAssign.htm">=</a> new_t;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Win32<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a> <a href="CppRegex.htm">regex</a>{<a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>(R"((\\\w*\\\.\.\\))")};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> new_t{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_replace(t,<a href="CppRegex.htm">regex</a>,"\\")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t <a href="CppOperatorEqual.htm">==</a> new_t) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t <a href="CppOperatorAssign.htm">=</a> new_t;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppUnix.htm">UNIX</a><br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a> <a href="CppRegex.htm">regex</a>{<a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>(R"((^\w<a href="CppComment.htm">*/</a>\.\.))")};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> new_t{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_replace(t,<a href="CppRegex.htm">regex</a>,"")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t <a href="CppOperatorEqual.htm">==</a> new_t) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t <a href="CppOperatorAssign.htm">=</a> new_t;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Win32<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a> <a href="CppRegex.htm">regex</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>(R"((^\w*\\\.\.))");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> new_t <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_replace(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRegex.htm">regex</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t <a href="CppOperatorEqual.htm">==</a> new_t) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t <a href="CppOperatorAssign.htm">=</a> new_t;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> UDNEFINFE467830786530475<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a> <a href="CppRegex.htm">regex</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>("((/|_b)\\w<a href="CppComment.htm">*/</a>..(/|_b))");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> new_t <a href="CppOperatorAssign.htm">=</a> boost::regex_replace(t,<a href="CppBoostRegex.htm">boost::regex</a>("/\\w<a href="CppComment.htm">*/</a>../"),"/");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> new_t <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_replace(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRegex.htm">regex</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t <a href="CppOperatorEqual.htm">==</a> new_t) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t <a href="CppOperatorAssign.htm">=</a> new_t;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t;<br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCopyFile.htm">CopyFile</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename { GetTempFileName() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_copy { GetTempFileName() };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a regular file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_copy));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.open(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "TEMP TEXT";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_copy));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CopyMode copy_mode {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? CopyMode::allow_overwrite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: CopyMode::prevent_overwrite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCopyFile.htm">CopyFile</a>(filename,filename_copy,copy_mode);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_copy));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename_copy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Temporary file must be cleaned up");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_copy) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Temporary file must be cleaned up");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppFilesAreIdentical.htm">FilesAreIdentical</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; filenames { GetTempFileName(), GetTempFileName(), GetTempFileName() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_filenames <a href="CppOperatorAssign.htm">=</a> filenames.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename: filenames)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_filenames; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> filenames[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_filenames; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> filenames[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFilesAreIdentical.htm">FilesAreIdentical</a>(s,t) <a href="CppOperatorEqual.htm">==</a> (i <a href="CppOperatorEqual.htm">==</a> j));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename: filenames)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Temporary file must be cleaned up");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppFileToVector.htm">FileToVector</a> and VectorToFile, indidual<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> GetTempFileName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v { "A","BC", "DEF" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToFile(v,filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w { <a href="CppFileToVector.htm">FileToVector</a>(filename) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v <a href="CppOperatorNotEqual.htm">!=</a> w)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: v) <a href="CppTRACE.htm">TRACE</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(w.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; t: w) <a href="CppTRACE.htm">TRACE</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v <a href="CppOperatorEqual.htm">==</a> w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppFileToVector.htm">FileToVector</a> and VectorToFile, many<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "A" },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "A", "B" },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "A", "B", "C" },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "A", "", "C" }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; w: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> GetTempFileName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorToFile(w,filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; x { <a href="CppFileToVector.htm">FileToVector</a>(filename) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (w <a href="CppOperatorNotEqual.htm">!=</a> x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(w.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: w) <a href="CppTRACE.htm">TRACE</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(x.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; t: x) <a href="CppTRACE.htm">TRACE</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w <a href="CppOperatorEqual.htm">==</a> x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppGetTempFolderName.htm">GetTempFolderName</a>, <a href="CppCreateFolder.htm">CreateFolder</a> and <a href="CppDeleteFolder.htm">DeleteFolder</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Depth 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> f { <a href="CppGetTempFolderName.htm">GetTempFolderName</a>() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsFolder.htm">IsFolder</a>(f) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A temporary folder name must not exist");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCreateFolder.htm">CreateFolder</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsFolder.htm">IsFolder</a>(f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFolder.htm">DeleteFolder</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsFolder.htm">IsFolder</a>(f) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Temporary folder must be cleaned up");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Depth 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> super_folder { <a href="CppGetTempFolderName.htm">GetTempFolderName</a>() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsFolder.htm">IsFolder</a>(super_folder) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A temporary folder name must not exist");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCreateFolder.htm">CreateFolder</a>(super_folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsFolder.htm">IsFolder</a>(super_folder));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> f { <a href="CppGetTempFolderName.htm">GetTempFolderName</a>() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsFolder.htm">IsFolder</a>(f) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A temporary folder name must not exist");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCreateFolder.htm">CreateFolder</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsFolder.htm">IsFolder</a>(f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFolder.htm">DeleteFolder</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsFolder.htm">IsFolder</a>(f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsFolder.htm">IsFolder</a>(super_folder));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFolder.htm">DeleteFolder</a>(super_folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsFolder.htm">IsFolder</a>(super_folder) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Temporary folder must be cleaned up");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppGetFileBasename.htm">GetFileBasename</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("tmp") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("tmp.") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("tmp.x") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("tmp.txt") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("tmp.text") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("tmp.longextension") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("input_triangle.txt") <a href="CppOperatorEqual.htm">==</a> "input_triangle");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("tmp") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("MyFolder/MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("MyFolder/MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("MyFolder/MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("MyFolder/My-Folder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("MyFolder/My_Folder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> "tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("/home/richel/<a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>/<a href="Games.htm">Games</a>/<a href="GameConnectThree.htm">GameConnectThree</a>")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> "<a href="GameConnectThree.htm">GameConnectThree</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("/home/richel/<a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>/<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> "<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("/home/richel/<a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>/<a href="Games.htm">Games</a>/<a href="GameK3OpEenRij.htm">GameK3OpEenRij</a>")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> "<a href="GameK3OpEenRij.htm">GameK3OpEenRij</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetFileBasename.htm">GetFileBasename</a>("/home/richel/<a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>/<a href="Projects.htm">Projects</a>/<a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> "<a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppGetExtension.htm">GetExtension</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("tmp") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("tmp.") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("tmp.x") <a href="CppOperatorEqual.htm">==</a> "x");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("tmp.txt") <a href="CppOperatorEqual.htm">==</a> "txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("tmp.text") <a href="CppOperatorEqual.htm">==</a> "text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("tmp.longextension") <a href="CppOperatorEqual.htm">==</a> "longextension");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("input_triangle.txt") <a href="CppOperatorEqual.htm">==</a> "txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("tmp") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> "txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> "txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("MyFolder/MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("MyFolder/MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> "txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("MyFolder/MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> "txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("MyFolder/My-Folder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> "txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>NoDot("MyFolder/My_Folder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> "txt");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("tmp") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("tmp.") <a href="CppOperatorEqual.htm">==</a> ".");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("tmp.x") <a href="CppOperatorEqual.htm">==</a> ".x");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("tmp.text") <a href="CppOperatorEqual.htm">==</a> ".text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("tmp.longextension") <a href="CppOperatorEqual.htm">==</a> ".longextension");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("input_triangle.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("tmp") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("MyFolder/MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("MyFolder/MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("MyFolder/MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("MyFolder/My-Folder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>WithDot("MyFolder/My_Folder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("tmp") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("tmp.") <a href="CppOperatorEqual.htm">==</a> ".");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("tmp.x") <a href="CppOperatorEqual.htm">==</a> ".x");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("tmp.text") <a href="CppOperatorEqual.htm">==</a> ".text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("tmp.longextension") <a href="CppOperatorEqual.htm">==</a> ".longextension");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("input_triangle.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("tmp") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("MyFolder/MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("MyFolder/MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("MyFolder/MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("MyFolder/My_Folder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetExtension.htm">GetExtension</a>("MyFolder/My-Folder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> ".txt");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>Recursive<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use the following structure:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> local.txt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> my_folder1/in_folder1.txt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> my_folder1/in_folder2.txt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> my_folder2/in_folder1.txt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> my_folder2/in_folder2.txt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> my_folder/my_subfolder/in_subfolder.txt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> local_filename { "local.txt" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> folder_name1 { "my_folder1" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> folder_name2 { "my_folder2" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> in_folder_filename1 { "in_folder.txt1" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> in_folder_filename2 { "in_folder.txt2" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> subfolder_name1 { "my_subfolder1" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> subfolder_name2 { "my_subfolder2" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> in_subfolder_filename1 { "in_subfolder1.txt" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> in_subfolder_filename2 { "in_subfolder2.txt" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Folder creation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> folder_name:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> subfolder_name1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> subfolder_name2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> subfolder_name1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> subfolder_name2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppIsFolder.htm">IsFolder</a>(folder_name))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> cmd <a href="CppOperatorAssign.htm">=</a> "mkdir " <a href="CppOperatorPlus.htm">+</a> folder_name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> error <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSystem.htm">std::system</a>(cmd.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!error);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsFolder.htm">IsFolder</a>(folder_name));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>File creation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;local_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> in_folder_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> in_folder_filename2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> in_folder_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> in_folder_filename2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> subfolder_name1 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> in_subfolder_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> subfolder_name1 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> in_subfolder_filename2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> subfolder_name2 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> in_subfolder_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> subfolder_name2 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> in_subfolder_filename2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> subfolder_name1 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> in_subfolder_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> subfolder_name1 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> in_subfolder_filename2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> subfolder_name2 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> in_subfolder_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> subfolder_name2 <a href="CppOperatorPlus.htm">+</a> <a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> in_subfolder_filename2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reading of the files and folders created<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>Recursive(folder_name1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 6);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clean up<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFolder.htm">DeleteFolder</a>(folder_name1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFolder.htm">DeleteFolder</a>(folder_name2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsFolder.htm">IsFolder</a>(folder_name1) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Temporary folder must be cleaned up");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsFolder.htm">IsFolder</a>(folder_name2) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Temporary folder must be cleaned up");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppGetPath.htm">GetPath</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("/<a href="CppAny.htm">any</a>path/<a href="CppAny.htm">any</a>file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"/<a href="CppAny.htm">any</a>path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("/<a href="CppAny.htm">any</a>-path/<a href="CppAny.htm">any</a>-file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"/<a href="CppAny.htm">any</a>-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("/<a href="CppAny.htm">any</a>-path/<a href="CppAny.htm">any</a>_file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"/<a href="CppAny.htm">any</a>-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("/<a href="CppAny.htm">any</a>_path/<a href="CppAny.htm">any</a>-file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"/<a href="CppAny.htm">any</a>_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("/<a href="CppAny.htm">any</a>_path/<a href="CppAny.htm">any</a>_file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"/<a href="CppAny.htm">any</a>_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>-path\\<a href="CppAny.htm">any</a>-file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>-path\\<a href="CppAny.htm">any</a>_file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>-path\\<a href="CppAny.htm">any</a>file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>_path\\<a href="CppAny.htm">any</a>-file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>_path\\<a href="CppAny.htm">any</a>_file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>_path\\<a href="CppAny.htm">any</a>file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>path\\<a href="CppAny.htm">any</a>file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>path");<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppGetSuperFolder.htm">GetSuperFolder</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("C:\\A\\B")<a href="CppOperatorEqual.htm">==</a>"C:\\A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("C:\\A\\B\\C")<a href="CppOperatorEqual.htm">==</a>"C:\\A\\B");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("C:\\")<a href="CppOperatorEqual.htm">==</a>"C:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("C:")<a href="CppOperatorEqual.htm">==</a>"");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("/A/B")<a href="CppOperatorEqual.htm">==</a>"/A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("/A/B/C")<a href="CppOperatorEqual.htm">==</a>"/A/B");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("/A")<a href="CppOperatorEqual.htm">==</a>"");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("C:\\AnySuperFolder\\AnyFolder")<a href="CppOperatorEqual.htm">==</a>"C:\\AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("C:\\AnySuperFolder\\Any_Folder")<a href="CppOperatorEqual.htm">==</a>"C:\\AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("C:\\AnySuperFolder\\Any-Folder")<a href="CppOperatorEqual.htm">==</a>"C:\\AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("C:\\Any_Super_Folder\\Any_Folder")<a href="CppOperatorEqual.htm">==</a>"C:\\Any_Super_Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("C:\\Any_Super_Folder\\Any-Folder")<a href="CppOperatorEqual.htm">==</a>"C:\\Any_Super_Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("C:\\Any-Super-Folder\\Any_Folder")<a href="CppOperatorEqual.htm">==</a>"C:\\Any-Super-Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("C:\\Any-Super-Folder\\Any-Folder")<a href="CppOperatorEqual.htm">==</a>"C:\\Any-Super-Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("/AnySuperFolder/AnyFolder")<a href="CppOperatorEqual.htm">==</a>"/AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("/AnySuperFolder/Any_Folder")<a href="CppOperatorEqual.htm">==</a>"/AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("/AnySuperFolder/Any-Folder")<a href="CppOperatorEqual.htm">==</a>"/AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("/Any_Super_Folder/Any_Folder")<a href="CppOperatorEqual.htm">==</a>"/Any_Super_Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("/Any_Super_Folder/Any-Folder")<a href="CppOperatorEqual.htm">==</a>"/Any_Super_Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("/Any-Super-Folder/Any_Folder")<a href="CppOperatorEqual.htm">==</a>"/Any-Super-Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSuperFolder.htm">GetSuperFolder</a>("/Any-Super-Folder/Any-Folder")<a href="CppOperatorEqual.htm">==</a>"/Any-Super-Folder");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppIsRegularFile.htm">IsRegularFile</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename { GetTempFileName() };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a regular file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFstream.htm">std::fstream</a> f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.open(filename.c_str(),<a href="CppStd.htm">std</a>::ios::out);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "TEMP TEXT";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Temporary file must be cleaned up");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppRemovePath.htm">RemovePath</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("x.txt") <a href="CppOperatorEqual.htm">==</a> "x.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> "x.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("Another/MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> "x.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("Yet/Another/MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> "x.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("MyFolder\\x.txt") <a href="CppOperatorEqual.htm">==</a> "x.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("Another\\MyFolder\\x.txt") <a href="CppOperatorEqual.htm">==</a> "x.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("Yet\\Another\\MyFolder\\x.txt") <a href="CppOperatorEqual.htm">==</a> "x.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("Another/MyFolder\\x.txt") <a href="CppOperatorEqual.htm">==</a> "x.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("Another\\MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> "x.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("Yet\\Another/MyFolder\\x.txt") <a href="CppOperatorEqual.htm">==</a> "x.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("Yet\\Another\\MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> "x.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("Yet\\An-other\\MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> "x.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("Yet\\An_other\\MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> "x.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("Yet\\Another\\MyFolder/x_y.txt") <a href="CppOperatorEqual.htm">==</a> "x_y.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRemovePath.htm">RemovePath</a>("Yet\\Another\\MyFolder/x-y.txt") <a href="CppOperatorEqual.htm">==</a> "x-y.txt");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppRenameFile.htm">RenameFile</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_from { GetTempFileName() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_to&nbsp;&nbsp; { GetTempFileName() };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_to));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create <b><a href="CppNew.htm">new</a></b> file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename_from.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "TMP";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only filename_from will exist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_to));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Rename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRenameFile.htm">RenameFile</a>(filename_from,filename_to);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only filename_to will exist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_to));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clean up<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename_to);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_to) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Temporary file must be cleaned up");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SimplifyPath<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("/home/richel/<a href="Projects.htm">Projects</a>/<a href="Tools.htm">Tools</a>/<a href="Tools.htm">Tool</a>TestProFile/../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> "/home/richel/<a href="Projects.htm">Projects</a>/<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("\\home\\richel\\<a href="Projects.htm">Projects</a>\\<a href="Tools.htm">Tools</a>\\<a href="Tools.htm">Tool</a>TestProFile\\..\\..\\<a href="CppClass.htm">Classes</a>\\<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>\\<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> "\\home\\richel\\<a href="Projects.htm">Projects</a>\\<a href="CppClass.htm">Classes</a>\\<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>\\<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("/home/richel/<a href="Projects.htm">Projects</a>/<a href="Tools.htm">Tools</a>/../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> "/home/richel/<a href="Projects.htm">Projects</a>/<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("\\home\\richel\\<a href="Projects.htm">Projects</a>\\<a href="Tools.htm">Tools</a>\\..\\<a href="CppClass.htm">Classes</a>\\<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>\\<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> "\\home\\richel\\<a href="Projects.htm">Projects</a>\\<a href="CppClass.htm">Classes</a>\\<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>\\<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("/home/richel/<a href="Projects.htm">Projects</a>/<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> "/home/richel/<a href="Projects.htm">Projects</a>/<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("\\home\\richel\\<a href="Projects.htm">Projects</a>\\<a href="CppClass.htm">Classes</a>\\<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>\\<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> "\\home\\richel\\<a href="Projects.htm">Projects</a>\\<a href="CppClass.htm">Classes</a>\\<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>\\<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("<a href="Tools.htm">Tools</a>/..") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("<a href="Tools.htm">Tools</a>\\..") <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("<a href="Tools.htm">Tools</a>/../A") <a href="CppOperatorEqual.htm">==</a> "/A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("<a href="Tools.htm">Tools</a>\\..\\A") <a href="CppOperatorEqual.htm">==</a> "\\A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("<a href="Tools.htm">Tools</a>/../A/B") <a href="CppOperatorEqual.htm">==</a> "/A/B");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("<a href="Tools.htm">Tools</a>\\..\\A\\B") <a href="CppOperatorEqual.htm">==</a> "\\A\\B");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("../../<a href="Tools.htm">Tools</a>/<a href="ToolCreateQtProjectZipFile.htm">ToolCreateQtProjectZipFile</a>/../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>.pri")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> "../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>.pri");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(SimplifyPath("..\\..\\<a href="Tools.htm">Tools</a>\\<a href="ToolCreateQtProjectZipFile.htm">ToolCreateQtProjectZipFile</a>\\..\\..\\<a href="CppLibrary.htm">Libraries</a>\\<a href="CppBoost.htm">Boost</a>.pri")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> "..\\..\\<a href="CppLibrary.htm">Libraries</a>\\<a href="CppBoost.htm">Boost</a>.pri");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>HasRightPathSeperators<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( HasRightPathSeperators("\\A\\B\\text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasRightPathSeperators("/A/B/text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasRightPathSeperators("\\A\\B\\text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( HasRightPathSeperators("/A/B/text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>HasTwoPathSeperators<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasTwoPathSeperators("\\A\\B\\text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasTwoPathSeperators("/A/B/text.txt"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( HasTwoPathSeperators("/A\\B/text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( HasTwoPathSeperators("\\A/B/text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( HasTwoPathSeperators("/A/B\\text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( HasTwoPathSeperators("/A\\B\\text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( HasTwoPathSeperators("\\A\\B/text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( HasTwoPathSeperators("\\A/B\\text.txt"));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>IsUnixPath<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsUnixPath("\\A\\B\\text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( IsUnixPath("/A/B/text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsUnixPath("/A\\B/text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsUnixPath("\\A/B/text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsUnixPath("/A/B\\text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsUnixPath("/A\\B\\text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsUnixPath("\\A\\B/text.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsUnixPath("\\A/B\\text.txt"));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a>PathToUnix<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsUnixPath(<a href="CppConvert.htm">Convert</a>PathToUnix("\\A\\B\\text.txt")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsUnixPath(<a href="CppConvert.htm">Convert</a>PathToUnix("/A/B/text.txt")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsUnixPath(<a href="CppConvert.htm">Convert</a>PathToUnix("/A\\B/text.txt")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsUnixPath(<a href="CppConvert.htm">Convert</a>PathToUnix("\\A/B/text.txt")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsUnixPath(<a href="CppConvert.htm">Convert</a>PathToUnix("/A/B\\text.txt")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsUnixPath(<a href="CppConvert.htm">Convert</a>PathToUnix("/A\\B\\text.txt")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsUnixPath(<a href="CppConvert.htm">Convert</a>PathToUnix("\\A\\B/text.txt")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsUnixPath(<a href="CppConvert.htm">Convert</a>PathToUnix("\\A/B\\text.txt")));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>::VectorToFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CopyMode copy_mode<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (copy_mode <a href="CppOperatorEqual.htm">==</a> CopyMode::prevent_overwrite)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must not exist");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "VectorToFile: not allowed to overwrite file '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(f,"\n"));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/fileiofwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/fileiofwd.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RIBI_<a href="CppCfile.htm">FILE</a>IOFWD_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_<a href="CppCfile.htm">FILE</a>IOFWD_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppFileIo.htm">fileio</a> {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> CopyMode;<br/>
<b><a href="CppStruct.htm">struct</a></b> Filename;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppFileIo.htm">fileio</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_<a href="CppCfile.htm">FILE</a>IOFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/filename.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/filename.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppFileIo.htm">FileIo</a>, <b><a href="CppClass.htm">class</a></b> with file I/O <a href="CppFunction.htm">function</a>s<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppFileIo.htm">CppFileIo</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfdef.htm">#ifdef</a> REALLY_USE_RIBI_<a href="CppCfile.htm">FILE</a>NAME<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> RIBI_<a href="CppCfile.htm">FILE</a>NAME_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_<a href="CppCfile.htm">FILE</a>NAME_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "filecopymode.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppFileIo.htm">fileio</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>A Filename is the name a regular file<br/>
<a href="CppComment.htm">///</a>Will not <b><a href="CppDo.htm">do</a></b> <a href="CppAny.htm">any</a>thing with the file itself<br/>
<b><a href="CppStruct.htm">struct</a></b> Filename<br/>
{<br/>
&nbsp;&nbsp;Filename(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> delete_file_on_destroy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;~Filename() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the filename<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; Get() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> m_delete_file_on_destroy;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_filename;<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppFreeFunction.htm">Free function</a>s on Filename. These call the <a href="CppFileIo.htm">fileio</a> <a href="CppFunction.htm">function</a>s<br/>
<a href="CppComment.htm">///</a>working on <a href="CppStdString.htm">std::string</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppCopyFile.htm">CopyFile</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Filename&amp; fileNameFrom,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Filename&amp; fileNameTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::CopyMode copy_mode <a href="CppOperatorAssign.htm">=</a> CopyMode::prevent_overwrite);<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDeleteFile.htm">DeleteFile</a>(<b><a href="CppConst.htm">const</a></b> Filename&amp; filename);<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppFilesAreIdentical.htm">FilesAreIdentical</a>(<b><a href="CppConst.htm">const</a></b> Filename&amp; filename_a,<b><a href="CppConst.htm">const</a></b> Filename&amp; filename_b);<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> Filename&amp; filename);<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppGetExtension.htm">GetExtension</a>NoDot(<b><a href="CppConst.htm">const</a></b> Filename&amp; filename);<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppIsRegularFile.htm">IsRegularFile</a>(<b><a href="CppConst.htm">const</a></b> Filename&amp; filename);<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Filename&amp; lhs, <b><a href="CppConst.htm">const</a></b> Filename&amp; rhs);<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Filename&amp; filename);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppFileIo.htm">fileio</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_<a href="CppCfile.htm">FILE</a>NAME_H<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfdef.htm">#ifdef</a> REALLY_USE_<a href="CppCfile.htm">FILE</a>NAME<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/filename.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/filename.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppFileIo.htm">FileIo</a>, <b><a href="CppClass.htm">class</a></b> with file I/O <a href="CppFunction.htm">function</a>s<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppFileIo.htm">CppFileIo</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfdef.htm">#ifdef</a> REALLY_USE_<a href="CppCfile.htm">FILE</a>NAME<br/>
<a href="CppInclude.htm">#include</a> "filename.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppStdString.htm">std::string</a>::Filename(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> delete_file_on_destroy)<br/>
&nbsp;&nbsp;: m_delete_file_on_destroy(delete_file_on_destroy),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_filename(filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_filename.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("A filio::Filename must consist of at least one <a href="CppChar.htm">character</a>");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("filio::Filename must have the name of an existing file");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(m_filename));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_filename.empty());<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a>::~Filename() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_delete_file_on_destroy)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(m_filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppStdString.htm">std::string</a>::Get() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_filename.empty());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(m_filename));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_filename;<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppCopyFile.htm">CopyFile</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Filename&amp; fileNameFrom,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Filename&amp; fileNameTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CopyMode copy_mode)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppCopyFile.htm">CopyFile</a>(fileNameFrom.Get(),fileNameTo.Get(),copy_mode);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppDeleteFile.htm">DeleteFile</a>(<b><a href="CppConst.htm">const</a></b> Filename&amp; filename) { <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename.Get()); }<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFilesAreIdentical.htm">FilesAreIdentical</a>(<b><a href="CppConst.htm">const</a></b> Filename&amp; filename_a,<b><a href="CppConst.htm">const</a></b> Filename&amp; filename_b)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppFilesAreIdentical.htm">FilesAreIdentical</a>(filename_a.Get(),filename_b.Get());<br/>
}<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> Filename&amp; filename) { <b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppFileToVector.htm">FileToVector</a>(filename.Get()); }<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppGetExtension.htm">GetExtension</a>NoDot(<b><a href="CppConst.htm">const</a></b> Filename&amp; filename) { <b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetExtension.htm">GetExtension</a>NoDot(filename.Get()); }<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(<b><a href="CppConst.htm">const</a></b> Filename&amp; filename) { <b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename.Get()); }<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Filename&amp; lhs, <b><a href="CppConst.htm">const</a></b> Filename&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.Get() <a href="CppOperatorEqual.htm">==</a> rhs.Get();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Filename&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> filename.Get();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfdef.htm">#ifdef</a> REALLY_USE_<a href="CppCfile.htm">FILE</a>NAME<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
