<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>data type</title>
  <meta name="description" content="C++ data type"/>
  <meta name="keywords" content="C++ data type code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppDataType.htm">data type</a></h1>
<p>&nbsp;</p>
<p>A <a href="CppDataType.htm">data type</a> is the form that data (for example: numbers, words, images) has. Every <a href="CppVariable.htm">variable</a> has a <a href="CppDataType.htm">data type</a>. <a href="Cpp.htm">C++</a> is type safe, which means that during compiling it checks that all conversions are legal.</p>
<p>&nbsp;</p>
<p>The example below the <a href="CppDefinition.htm">definition</a> of a <a href="CppVariable.htm">variable</a> of <a href="CppDataType.htm">data type</a> <a href="CppDouble.htm">double</a> with the name of 'd' being assigned the value 3.1415. The next line tries to assign the text 'hello world' to d, which is illegal, because 'hello world' if not of <a href="CppDataType.htm">data type</a> <a href="CppDouble.htm">double</a> (but of <a href="CppString.htm">std::string</a>).</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> 3.1415; <a href="CppComment.htm">//</a>Legal<br/>
&nbsp;&nbsp;d <a href="CppOperatorAssign.htm">=</a> "hello world"; <a href="CppComment.htm">//</a>ILLEGAL!<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Use a consistent method (such as uppercase first letter) to distinguish <a href="CppDataType.htm">type</a> names [1].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>List of <a href="CppDataType.htm">data types</a> that are also <a href="CppKeyword.htm">keywords</a></h2>
<p>&nbsp;</p>
<p>Some <a href="CppDataType.htm">data types</a> are only accepted by some <a href="CppStandard.htm">standards</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p>&nbsp;</p>
<ol>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicCpp11.png" alt="C++11"/> <a href="CppBool.htm">bool</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicCpp11.png" alt="C++11"/> <a href="CppChar.htm">char</a></li>
  <li><img src="PicSpacer.png" alt=" "/><img src="PicCpp11.png" alt="C++11"/> <a href="CppChar16_t.htm">char16_t</a></li>
  <li><img src="PicSpacer.png" alt=" "/><img src="PicCpp11.png" alt="C++11"/> <a href="CppChar32_t.htm">char32_t</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicCpp11.png" alt="C++11"/> <a href="CppDouble.htm">double</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicCpp11.png" alt="C++11"/> <a href="CppFloat.htm">float</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicCpp11.png" alt="C++11"/> <a href="CppInt.htm">int</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicCpp11.png" alt="C++11"/> <a href="CppLong.htm">long</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicCpp11.png" alt="C++11"/> <a href="CppLongLongInt.htm">long long int</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicCpp11.png" alt="C++11"/> <a href="CppShort.htm">short</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicCpp11.png" alt="C++11"/> <a href="CppVoid.htm">void</a> (in the form of <a href="CppVoid.htm">void</a>*)</li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicCpp11.png" alt="C++11"/> <a href="CppWchar_t.htm">wchar_t</a></li>
</ol>
<p>&nbsp;</p>
<p>The range of each of these data types can be found with <a href="CppNumeric_limits.htm">std::numeric_limits</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>List of <a href="CppDataType.htm">data types</a> that are not <a href="CppKeyword.htm">keywords</a> (incomplete)</h2>
<p>&nbsp;</p>
<p>This list will never be complete and is just a colorful collection of <a href="CppClass.htm">classes</a>.</p>
<p>&nbsp;</p>
<ol>
  <li><a href="CppBoostRegex.htm">boost::regex</a></li>
  <li><a href="CppCl_I.htm">cln::cl_I</a></li>
  <li><a href="CppFloodMultilayerPerceptron.htm">Flood::MultilayerPerceptron</a></li>
  <li><a href="CppHugeVector.htm">HugeVector</a></li>
  <li><a href="CppQLabel.htm">QLabel</a></li>
  <li><a href="CppString.htm">std::string</a></li>
  <li><a href="CppVector.htm">std::vector</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppJohnLakos.htm">John Lakos</a>. Large-Scale C++ Software Design. 1996. ISBN: 0-201-63362-0. Chapter 2.7: 'Use a consistent method (such as uppercase first letter) to distinguish type names'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
