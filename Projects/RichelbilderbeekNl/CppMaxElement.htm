<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MaxElement</title>
  <meta name="description" content="C++ MaxElement"/>
  <meta name="keywords" content="C++ MaxElement lowest minimal minimum value element in a std::vector vector container"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMaxElement.htm">MaxElement</a></h1>
<p>&nbsp;</p>
<p><a href="CppContainer.htm">Container</a> <a href="CppCodeSnippets.htm">code snippet</a> similar to <a href="CppMax_element.htm">std::max_element</a>, but that works on 2D <a href="CppContainer.htm">containers</a> instead.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>Obtains the maximal element of a 2D container<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppMaxElement.htm">MaxElement</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppMaxElement.htm">MaxElement</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> &amp;&amp; "Container must have a size");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain an initial lowest value<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> maxValue <a href="CppOperatorAssign.htm">=</a> *(<a href="CppMax_element.htm">std::max_element</a>(v[0].begin(),v[0].end()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the iterators<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;::<b><a href="CppConst.htm">const</a></b>_iterator rowEnd <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;::<b><a href="CppConst.htm">const</a></b>_iterator row <a href="CppOperatorAssign.htm">=</a> v.begin();<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>row; <a href="CppComment.htm">//</a>Move to the next position, as index 0 is already read from<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; row <a href="CppOperatorNotEqual.htm">!=</a> rowEnd; <a href="CppOperatorIncrement.htm">++</a>row) <a href="CppComment.htm">//</a>row is already initialized<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::value_type localMaxVal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> *(<a href="CppMax_element.htm">std::max_element</a>(row-&gt;begin(),row-&gt;end()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (localMaxVal &gt; maxValue) maxValue <a href="CppOperatorAssign.htm">=</a> localMaxVal;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maxValue;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppMaxElement.htm">MaxElement</a> test</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetSizes.htm">GetSizes</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppSize_t.htm">std::size_t</a>&gt; <a href="CppGetSizes.htm">GetSizes</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppSize_t.htm">std::size_t</a>&gt; w;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(v[i].size());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>Obtains the maximal element of a 2D container<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppMaxElement.htm">MaxElement</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppMaxElement.htm">MaxElement</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> &amp;&amp; "Container must have a size");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain an initial lowest value<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> maxValue <a href="CppOperatorAssign.htm">=</a> *(<a href="CppMax_element.htm">std::max_element</a>(v[0].begin(),v[0].end()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the iterators<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;::<b><a href="CppConst.htm">const</a></b>_iterator rowEnd <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;::<b><a href="CppConst.htm">const</a></b>_iterator row <a href="CppOperatorAssign.htm">=</a> v.begin();<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>row; <a href="CppComment.htm">//</a>Move to the next position, as index 0 is already read from<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; row <a href="CppOperatorNotEqual.htm">!=</a> rowEnd; <a href="CppOperatorIncrement.htm">++</a>row) <a href="CppComment.htm">//</a>row is already initialized<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::value_type localMaxVal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> *(<a href="CppMax_element.htm">std::max_element</a>(row-&gt;begin(),row-&gt;end()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (localMaxVal &gt; maxValue) maxValue <a href="CppOperatorAssign.htm">=</a> localMaxVal;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maxValue;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From htpp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/Cpp<a href="CppGetRandomUniform.htm">GetRandomUniform</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetRandomUniform.htm">GetRandomUniform</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRand.htm">std::rand</a>())/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRAND_MAX.htm">RAND_MAX</a>);<br/>
}<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>Tests the function <a href="CppMaxElement.htm">MaxElement</a> and <a href="CppGetSizes.htm">GetSizes</a><br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppMaxElement.htm">MaxElement</a>.htm<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "vector sizes: ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppSize_t.htm">std::size_t</a>&gt; sizes <a href="CppOperatorAssign.htm">=</a> <a href="CppGetSizes.htm">GetSizes</a>(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(sizes.begin(),sizes.end(),<a href="CppOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppSize_t.htm">std::size_t</a>&gt;(<a href="CppCout.htm">std::cout</a>," "));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> ran<b><a href="CppDo.htm">do</a></b>m values to all rows<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>v.size(); <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <a href="CppGetRandomUniform.htm">GetRandomUniform</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[j].push_back(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "New value: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ", <b><a href="CppNew.htm">new</a></b> heighest value: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppMaxElement.htm">MaxElement</a>(v) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> one row with one ran<b><a href="CppDo.htm">do</a></b>m value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <a href="CppGetRandomUniform.htm">GetRandomUniform</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1,x));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "New value: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ", <b><a href="CppNew.htm">new</a></b> heighest value: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppMaxElement.htm">MaxElement</a>(v) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
Starting /MyFolder/MyProject...<br/>
vector sizes:<br/> 
New value: 0.840188, new heighest value: 0.840188<br/>
vector sizes: 1<br/> 
New value: 0.394383, new heighest value: 0.840188<br/>
New value: 0.783099, new heighest value: 0.840188<br/>
vector sizes: 2 1<br/> 
New value: 0.79844, new heighest value: 0.840188<br/>
New value: 0.911647, new heighest value: 0.911647<br/>
New value: 0.197551, new heighest value: 0.911647<br/>
vector sizes: 3 2 1<br/> 
New value: 0.335223, new heighest value: 0.911647<br/>
New value: 0.76823, new heighest value: 0.911647<br/>
New value: 0.277775, new heighest value: 0.911647<br/>
New value: 0.55397, new heighest value: 0.911647<br/>
vector sizes: 4 3 2 1<br/> 
New value: 0.477397, new heighest value: 0.911647<br/>
New value: 0.628871, new heighest value: 0.911647<br/>
New value: 0.364784, new heighest value: 0.911647<br/>
New value: 0.513401, new heighest value: 0.911647<br/>
New value: 0.95223, new heighest value: 0.95223<br/>
vector sizes: 5 4 3 2 1<br/> 
New value: 0.916195, new heighest value: 0.95223<br/>
New value: 0.635712, new heighest value: 0.95223<br/>
New value: 0.717297, new heighest value: 0.95223<br/>
New value: 0.141603, new heighest value: 0.95223<br/>
New value: 0.606969, new heighest value: 0.95223<br/>
New value: 0.0163006, new heighest value: 0.95223<br/>
vector sizes: 6 5 4 3 2 1<br/> 
New value: 0.242887, new heighest value: 0.95223<br/>
New value: 0.137232, new heighest value: 0.95223<br/>
New value: 0.804177, new heighest value: 0.95223<br/>
New value: 0.156679, new heighest value: 0.95223<br/>
New value: 0.400944, new heighest value: 0.95223<br/>
New value: 0.12979, new heighest value: 0.95223<br/>
New value: 0.108809, new heighest value: 0.95223<br/>
vector sizes: 7 6 5 4 3 2 1<br/> 
New value: 0.998925, new heighest value: 0.998925<br/>
New value: 0.218257, new heighest value: 0.998925<br/>
New value: 0.512932, new heighest value: 0.998925<br/>
New value: 0.839112, new heighest value: 0.998925<br/>
New value: 0.61264, new heighest value: 0.998925<br/>
New value: 0.296032, new heighest value: 0.998925<br/>
New value: 0.637552, new heighest value: 0.998925<br/>
New value: 0.524287, new heighest value: 0.998925<br/>
vector sizes: 8 7 6 5 4 3 2 1<br/> 
New value: 0.493583, new heighest value: 0.998925<br/>
New value: 0.972775, new heighest value: 0.998925<br/>
New value: 0.292517, new heighest value: 0.998925<br/>
New value: 0.771358, new heighest value: 0.998925<br/>
New value: 0.526745, new heighest value: 0.998925<br/>
New value: 0.769914, new heighest value: 0.998925<br/>
New value: 0.400229, new heighest value: 0.998925<br/>
New value: 0.891529, new heighest value: 0.998925<br/>
New value: 0.283315, new heighest value: 0.998925<br/>
vector sizes: 9 8 7 6 5 4 3 2 1<br/>
New value: 0.352458, new heighest value: 0.998925<br/>
New value: 0.807725, new heighest value: 0.998925<br/>
New value: 0.919026, new heighest value: 0.998925<br/>
New value: 0.0697553, new heighest value: 0.998925<br/>
New value: 0.949327, new heighest value: 0.998925<br/>
New value: 0.525995, new heighest value: 0.998925<br/>
New value: 0.0860558, new heighest value: 0.998925<br/>
New value: 0.192214, new heighest value: 0.998925<br/>
New value: 0.663227, new heighest value: 0.998925<br/>
New value: 0.890233, new heighest value: 0.998925<br/>
/MyFolder/MyProject exited with code 0<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
