<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>lambda expression</title>
  <meta name="description" content="C++ C++0x C++98 lambda expression"/>
  <meta name="keywords" content="C++ C++0x C++98 lambda expression code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppLambdaExpression.htm">lambda expressions</a></h1>
<p>&nbsp;</p>
<p>The use of <a href="CppLambdaExpression.htm">lambda expressions</a> is a technique
that can be used, depending on the <a href="CppStandard.htm">standard</a> used:</p>
<ul>
  <li>
    <img src="PicCpp98.png" alt="C++98"/> 
    <a href="CppLambdaExpression.htm">lambda expressions</a> in the <a href="Cpp98.htm">C++98</a> <a href="CppStandard.htm">standard</a>
  </li>
  <li>
    <img src="PicCpp11.png" alt="C++11"/> 
    <a href="CppLambdaExpression.htm">lambda expressions</a> in the <a href="Cpp11.htm">C++11</a> <a href="CppStandard.htm">standard</a>
  </li>
</ul>
<p>&nbsp;</p>
<p>
  The speed of <a href="Cpp98.htm">C++98</a> <a href="CppLambda.htm">Boost.Lambda</a> and
  <a href="Cpp11.htm">C++11</a> <a href="CppLambdaExpression.htm">lambda expressions</a> are compared 
  and <a href="CppProfiling.htm">profiled</a> (for only one simple <a href="CppFunction.htm">function</a>) in 
  <a href="CppExerciseAddOneAnswer.htm">Answer of exercise #7: AddOne</a>.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>
  <img src="PicCpp98.png" alt="C++98"/> 
  <a href="CppLambdaExpression.htm">lambda expression</a> in the <a href="Cpp98.htm">C++98</a> <a href="CppStandard.htm">standard</a>
</h2>
<p>&nbsp;</p>
<p><a href="CppLambdaExpression.htm">lambda expressions</a> are not directly supported by the <a href="Cpp98.htm">C++98</a>
<a href="CppStandard.htm">standard</a>. <a href="CppLambda.htm">Boost.Lambda</a>, however, can be used instead:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> AbsSort(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppSort.htm">std::sort</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>(&amp;<a href="CppLabs.htm">std::labs</a>,<a href="CppLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt; <a href="CppBind.htm">boost::bind</a>(&amp;<a href="CppLabs.htm">std::labs</a>,<a href="CppLambda.htm">boost::lambda</a>::_2) );<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="Cpp11.htm">C++11</a> <a href="CppInitializerList.htm">initializer list</a> technique<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> { 4,-3,2,-1 };<br/>
&nbsp;&nbsp;AbsSort(v);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0] <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[1] <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[2] <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[3] <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;4);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>
  <img src="PicCpp11.png" alt="C++11"/> 
  <a href="CppLambdaExpression.htm">lambda expression</a> in the <a href="Cpp11.htm">C++11</a> <a href="CppStandard.htm">standard</a>
</h2>
<p>&nbsp;</p>
<p>
  Prefer a named function object to a <a href="CppLambdaExpression.htm">lambda expression</a> if the operation requires <a href="CppComment.htm">comments</a> [3].
  Prefer a named function object to a <a href="CppLambdaExpression.htm">lambda expression</a> if the operation is generally useful [4].
  Keep <a href="CppLambdaExpression.htm">lambda expressions</a> short [5].
  For maintainability and correctness, be careful about capture by reference in a <a href="CppLambdaExpression.htm">lambda expression</a> [6].
  Let the <a href="CppCompiler.htm">compiler</a> deduce the <a href="CppReturnType.htm">return type</a> of a <a href="CppLambdaExpression.htm">lambda expression</a> [7].
</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppLambdaExpression.zip">Download the Qt Creator project 'CppLambdaExpression' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p><a href="CppLambdaExpression.htm">lambda expressions</a> can be used for on-the-fly <a href="CppFunctor.htm">functors</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> AbsSort(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppSort.htm">std::sort</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b) { <b><a href="CppReturn.htm">return</a></b> <a href="CppAbs.htm">std::abs</a>(a) &lt; <a href="CppAbs.htm">std::abs</a>(b); } );<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="Cpp11.htm">C++11</a> <a href="CppInitializerList.htm">initializer list</a> technique<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> { 4,-3,2,-1 };<br/>
&nbsp;&nbsp;AbsSort(v);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0] <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[1] <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[2] <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[3] <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;4);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Let's zoom in at the <a href="CppLambdaExpression.htm">lambda expressions</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
&nbsp;&nbsp;<a href="CppSort.htm">std::sort</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b) { <b><a href="CppReturn.htm">return</a></b> <a href="CppAbs.htm">std::abs</a>(a) &lt; <a href="CppAbs.htm">std::abs</a>(b); } );<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The '[]' denotes that there is an empty capture list: the <a href="CppLambdaExpression.htm">lambda expressions</a> does not need to
be fed a constant from its environment.
The '(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b)'
are the names and data types to <a href="CppLambdaExpression.htm">lambda expressions</a> works on: for <a href="CppSort.htm">sorting</a> 
one needs two <a href="CppArgument.htm">arguments</a>: these are called 'a' and 'b' and are <a href="CppConst.htm">const</a>
<a href="CppInt.htm">integers</a>. Finally, 
the '{ <b><a href="CppReturn.htm">return</a></b> <a href="CppAbs.htm">std::abs</a>(a) &lt; <a href="CppAbs.htm">std::abs</a>(b); }'
describes how the <a href="CppArgument.htm">arguments</a> are used to draw a conclusion.</p>
<p>&nbsp;</p>
<p>The example below does not show a capture list, the example below does:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a><a href="Cpp11.htm">C++11</a> <a href="CppLambdaExpression.htm">lambda expression</a><br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppAdd.htm">Add</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(v.begin(),v.end(),[x](<b><a href="CppInt.htm">int</a></b>&amp;i) { i<a href="CppOperatorPlusAssign.htm">+=</a>x; } );<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>In the example above, 'x' is in the capture list: the capture list consists of variables that are needed in the 
<a href="CppLambdaExpression.htm">lambda expressions</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>
  <img src="PicCpp11.png" alt="C++11"/> 
  Program flow of a <a href="CppLambdaExpression.htm">lambda expression</a> in the <a href="Cpp11.htm">C++11</a> <a href="CppStandard.htm">standard</a>
</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppLambdaExpression.zip">Download the Qt Creator project 'CppLambdaExpression' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>Program flow in a <a href="Cpp11.htm">C++11</a> <a href="CppLambdaExpression.htm">lambda expression</a> differs from a
<a href="Cpp98.htm">C++98</a> <a href="CppLambdaExpression.htm">lambda expression</a> or <a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>:
if you want to <a href="CppReturn.htm">return</a> from a <a href="CppFunction.htm">function</a>, all that happens is that the
<a href="CppFor_each.htm">std::for_each</a> (or other <a href="CppAlgorithm.htm">algorithm</a>) is terminated. The example below shows this.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> TestProgramFlow()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>2-D <a href="CppVector.htm">std::vector</a>, note 42 in the middle, from an <a href="CppInitializerList.htm">initializer list</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;0, 1, 2, 3, 4 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 10,11,12,13,14 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 40,41,42,43,44 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 50,51,52,53,54 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 60,61,62,63,64 }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>First <a href="CppLambdaExpression.htm">lambda expression</a><br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; w)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Nested second <a href="CppLambdaExpression.htm">lambda expression</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> 42)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "FOUND!\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>; <a href="CppComment.htm">//</a>Terminates the second <a href="CppLambdaExpression.htm">lambda expression</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does not <b><a href="CppReturn.htm">return</a></b> from Test <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Will get here, as the <b><a href="CppReturn.htm">return</a></b> statement only terminates<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>the second <a href="CppLambdaExpression.htm">lambda expression</a>, instead of the Test <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
FOUND!<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>Prefer <a href="CppLambdaExpression.htm">Lambda expressions</a> over <a href="CppBinder.htm">binders</a> [8]</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="http://gcc.gnu.org/projects/cxx0x.html">GCC page about C++0x support</a></li>
  <li><!--  2 --><a href="http://blog.aaronballman.com/tag/c0x">Aaron Ballman's blog about C++0x</a></li>
  <li><!--  3 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 11.6. Advice. page 303: '[6] Prefer a named function object to a lambda if the operation requires comments'</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 11.6. Advice. page 303: '[7] Prefer a named function object to a lambda if the operation is generally useful'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 11.6. Advice. page 303: '[8] Keep lambdas short'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 11.6. Advice. page 303: '[9] For maintainability and correctness, be careful about capture by reference'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 11.6. Advice. page 303: '[10] Let the compiler deduce the return type of a lambda'</li>
  <li><!--  8 --><a href="CppScottMeyers.htm">Scott Meyers</a>. <a href="http://cppandbeyond.com/2012/04/16/session-topic-initial-thoughts-on-effective-c11">C++ And Beyond 2012 session: 'Initial thoughts on Effective C++11'. 2012. 'Prefer Lambdas over Binders'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
