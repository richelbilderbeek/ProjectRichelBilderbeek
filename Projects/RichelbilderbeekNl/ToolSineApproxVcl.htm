<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>SineApproxVcl</title>
  <meta name="description" content="C++ SineApproxVcl"/>
  <meta name="keywords" content="C++ SineApproxVcl "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolSineApproxVcl.htm">SineApproxVcl</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name ToolSineApproxVcl-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSineApproxVcl/UnitBenchmarkSineApprox.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSineApproxVcl/UnitBenchmarkSineApprox.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUtilityH.htm">utility</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppTime.htm">time</a>r.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Sin_approx(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ranged_x <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFmod.htm">std::fmod</a>( (2.0 * <a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> <a href="CppStdFmod.htm">std::fmod</a>(x,2.0 * <a href="CppM_PI.htm">M_PI</a>) , 2.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ranged_x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ranged_x <a href="CppOperatorLessEqual.htm">&lt;=</a> 2.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ranged_x &lt; <a href="CppM_PI.htm">M_PI</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (a * ranged_x * ranged_x) <a href="CppOperatorPlus.htm">+</a> ( b* ranged_x) <a href="CppOperatorPlus.htm">+</a> c;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> reranged_x <a href="CppOperatorAssign.htm">=</a> ranged_x <a href="CppOperatorMinus.htm">-</a> <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (-a * reranged_x * reranged_x) <a href="CppOperatorPlus.htm">+</a> ( <a href="CppOperatorMinus.htm">-</a>b * reranged_x) <a href="CppOperatorMinus.htm">-</a> c;<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Sin_approx(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi_squared <a href="CppOperatorAssign.htm">=</a> <a href="CppM_PI.htm">M_PI</a> * <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a> 4.0 <a href="CppOperatorDivide.htm">/</a> pi_squared;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp; 4.0 <a href="CppOperatorDivide.htm">/</a> <a href="CppM_PI.htm">M_PI</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ranged_x <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFmod.htm">std::fmod</a>( (2.0 * <a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> <a href="CppStdFmod.htm">std::fmod</a>(x,2.0 * <a href="CppM_PI.htm">M_PI</a>) , 2.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ranged_x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ranged_x <a href="CppOperatorLessEqual.htm">&lt;=</a> 2.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ranged_x &lt; <a href="CppM_PI.htm">M_PI</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (a * ranged_x * ranged_x) <a href="CppOperatorPlus.htm">+</a> ( b* ranged_x);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> reranged_x <a href="CppOperatorAssign.htm">=</a> ranged_x <a href="CppOperatorMinus.htm">-</a> <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (-a * reranged_x * reranged_x) <a href="CppOperatorPlus.htm">+</a> ( <a href="CppOperatorMinus.htm">-</a>b * reranged_x);<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_min <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>4.0 * <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_max <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;4.0 * <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_step <a href="CppOperatorAssign.htm">=</a> (d_max <a href="CppOperatorMinus.htm">-</a> d_min) <a href="CppOperatorDivide.htm">/</a> 100000.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> t_sin <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> t_sin_approx <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>100; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdSin.htm">std::sin</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sum <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostTimer.htm">boost::timer</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> d=d_min; d&lt;d_max; d<a href="CppOperatorPlusAssign.htm">+=</a>d_step)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppStdSin.htm">std::sin</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> elapsed <a href="CppOperatorAssign.htm">=</a> t.elapsed();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t_sin<a href="CppOperatorPlusAssign.htm">+=</a>elapsed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sin_approx<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sum <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostTimer.htm">boost::timer</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> d=d_min; d&lt;d_max; d<a href="CppOperatorPlusAssign.htm">+=</a>d_step)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum<a href="CppOperatorPlusAssign.htm">+=</a>Sin_approx(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> elapsed <a href="CppOperatorAssign.htm">=</a> t.elapsed();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t_sin_approx<a href="CppOperatorPlusAssign.htm">+=</a>elapsed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppStdSin.htm">std::sin</a>: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t_sin <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Sin_approx: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t_sin_approx <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;<a href="CppStdCin.htm">std::cin</a>.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
Calculation<br/>
<br/>
To approximate f(x)=sin(x), <b><a href="CppFor.htm">for</a></b> values of x e [0,pi] a parabola can be used.<br/>
Like the sine, <b><a href="CppThis.htm">this</a></b> parabola passes the following three coordinats:<br/>
#1) (0,0)<br/>
#2) (0.5 * pi, 1)<br/>
#3) (pi,0).<br/>
<br/>
The formula of a parabola can be written down as follows:<br/>
<br/>
f(x) <a href="CppOperatorAssign.htm">=</a> (A * x * x) <a href="CppOperatorPlus.htm">+</a> (B * x) <a href="CppOperatorPlus.htm">+</a> C<br/>
<br/>
Where A,B and C are constants that define the <a href="CppShape.htm">shape</a> of the parabols.<br/>
<br/>
Entering the coordinats in the formula results in the following equations:<br/>
<br/>
#0) hpi <a href="CppOperatorAssign.htm">=</a> 0.5 * pi (<b><a href="CppFor.htm">for</a></b> simpler notation of #2)<br/>
#1) 0 <a href="CppOperatorAssign.htm">=</a> (A * 0&nbsp;&nbsp; * 0&nbsp;&nbsp;) <a href="CppOperatorPlus.htm">+</a> (B * 0&nbsp;&nbsp;) <a href="CppOperatorPlus.htm">+</a> C<br/>
#2) 1 <a href="CppOperatorAssign.htm">=</a> (A * hpi * hpi) <a href="CppOperatorPlus.htm">+</a> (B * hpi) <a href="CppOperatorPlus.htm">+</a> C<br/>
#3) 0 <a href="CppOperatorAssign.htm">=</a> (A * pi&nbsp;&nbsp;* pi ) <a href="CppOperatorPlus.htm">+</a> (B * pi ) <a href="CppOperatorPlus.htm">+</a> C<br/>
<br/>
From #1 follows that C <a href="CppOperatorAssign.htm">=</a> 0.<br/>
<br/>
This leaves us with two equations (#2 and #3) with two unknown variables.<br/>
The commons strategy is as follows:<br/>
a) Take one equation<br/>
b) Define one variable in terms of the other<br/>
c) Use <b><a href="CppThis.htm">this</a></b> variable in the other equation<br/>
d) Solve the latter equation to find the first variable's value<br/>
e) Use the found variable's value to calculate the second<br/>
<br/>
Define one variable in terms of the other:<br/>
1 <a href="CppOperatorAssign.htm">=</a> (A * hpi * hpi) <a href="CppOperatorPlus.htm">+</a> (B * hpi)<br/>
1 <a href="CppOperatorMinus.htm">-</a> (B * hpi) <a href="CppOperatorAssign.htm">=</a> (A * hpi * hpi)<br/>
<a href="CppOperatorMinus.htm">-</a> (B * hpi) <a href="CppOperatorAssign.htm">=</a> (A * hpi * hpi) <a href="CppOperatorMinus.htm">-</a> 1<br/>
<a href="CppOperatorMinus.htm">-</a> B <a href="CppOperatorAssign.htm">=</a> (A * hpi) <a href="CppOperatorMinus.htm">-</a> (1 <a href="CppOperatorDivide.htm">/</a> hpi)<br/>
B <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a> (A * hpi) <a href="CppOperatorPlus.htm">+</a> (1 <a href="CppOperatorDivide.htm">/</a> hpi)<br/>
<br/>
Use <b><a href="CppThis.htm">this</a></b> term to calculate the first variable:<br/>
0 <a href="CppOperatorAssign.htm">=</a> (A * pi&nbsp;&nbsp;* pi ) <a href="CppOperatorPlus.htm">+</a> (B * pi ) <a href="CppOperatorPlus.htm">+</a> C<br/>
Use B <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a> (A * hpi) <a href="CppOperatorPlus.htm">+</a> (1 <a href="CppOperatorDivide.htm">/</a> hpi)<br/>
0 <a href="CppOperatorAssign.htm">=</a> (A * pi * pi ) <a href="CppOperatorPlus.htm">+</a> ( (<a href="CppOperatorMinus.htm">-</a> (A * hpi) <a href="CppOperatorPlus.htm">+</a> (1 <a href="CppOperatorDivide.htm">/</a> hpi) ) * pi )<br/>
0 <a href="CppOperatorAssign.htm">=</a> (A * pi * pi ) <a href="CppOperatorPlus.htm">+</a> ( <a href="CppOperatorMinus.htm">-</a> (A * hpi * pi) <a href="CppOperatorPlus.htm">+</a> (1 * pi <a href="CppOperatorDivide.htm">/</a> hpi) )<br/>
0 <a href="CppOperatorAssign.htm">=</a> (A * pi * pi ) <a href="CppOperatorMinus.htm">-</a> (A * hpi * pi) <a href="CppOperatorPlus.htm">+</a> (1 * pi <a href="CppOperatorDivide.htm">/</a> hpi)<br/>
<a href="CppOperatorMinus.htm">-</a> (1 * pi <a href="CppOperatorDivide.htm">/</a> hpi) <a href="CppOperatorAssign.htm">=</a> (A * pi * pi ) <a href="CppOperatorMinus.htm">-</a> (A * hpi * pi)<br/>
<a href="CppOperatorMinus.htm">-</a> (1 * pi <a href="CppOperatorDivide.htm">/</a> hpi) <a href="CppOperatorAssign.htm">=</a> A * ( (pi * pi) <a href="CppOperatorMinus.htm">-</a> (hpi * pi) )<br/>
<a href="CppOperatorMinus.htm">-</a> (1 * pi <a href="CppOperatorDivide.htm">/</a> hpi) <a href="CppOperatorAssign.htm">=</a> A * ( (pi * pi) <a href="CppOperatorMinus.htm">-</a> ( (0.5 * pi) * pi) )<br/>
<a href="CppOperatorMinus.htm">-</a> (1 * pi <a href="CppOperatorDivide.htm">/</a> hpi) <a href="CppOperatorAssign.htm">=</a> A * ( (pi * pi) <a href="CppOperatorMinus.htm">-</a> ( 0.5 * pi * pi) )<br/>
<a href="CppOperatorMinus.htm">-</a> (1 * pi <a href="CppOperatorDivide.htm">/</a> hpi) <a href="CppOperatorAssign.htm">=</a> A * 0.5 * pi * pi<br/>
<a href="CppOperatorMinus.htm">-</a> (1 * pi <a href="CppOperatorDivide.htm">/</a> ( 0.5 * pi) ) <a href="CppOperatorAssign.htm">=</a> A * 0.5 * pi * pi<br/>
<a href="CppOperatorMinus.htm">-</a> 2 <a href="CppOperatorAssign.htm">=</a> A * 0.5 * pi * pi<br/>
<a href="CppOperatorMinus.htm">-</a> 2 <a href="CppOperatorDivide.htm">/</a> 0.5 * pi * pi <a href="CppOperatorAssign.htm">=</a> A<br/>
A <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a> 4 <a href="CppOperatorDivide.htm">/</a> (pi * pi)<br/>
<br/>
Calculate the second variable:<br/>
1 <a href="CppOperatorAssign.htm">=</a> (A * hpi * hpi) <a href="CppOperatorPlus.htm">+</a> (B * hpi)<br/>
Use A <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a> 4 <a href="CppOperatorDivide.htm">/</a> (pi * pi)<br/>
1 <a href="CppOperatorAssign.htm">=</a> ( (<a href="CppOperatorMinus.htm">-</a> 4 <a href="CppOperatorDivide.htm">/</a> (pi * pi) ) * hpi * hpi) <a href="CppOperatorPlus.htm">+</a> (B * hpi)<br/>
<a href="CppOperatorMinus.htm">-</a> (B * hpi) <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorAssign.htm">=</a> ( (<a href="CppOperatorMinus.htm">-</a> 4 <a href="CppOperatorDivide.htm">/</a> (pi * pi) ) * hpi * hpi)<br/>
<a href="CppOperatorMinus.htm">-</a> (B * hpi) <a href="CppOperatorAssign.htm">=</a> ( (<a href="CppOperatorMinus.htm">-</a> 4 <a href="CppOperatorDivide.htm">/</a> (pi * pi) ) * hpi * hpi) <a href="CppOperatorMinus.htm">-</a> 1<br/>
<a href="CppOperatorMinus.htm">-</a> (B * hpi) <a href="CppOperatorAssign.htm">=</a> ( (<a href="CppOperatorMinus.htm">-</a> 4 * (hpi * hpi) <a href="CppOperatorDivide.htm">/</a> (pi * pi) ) ) <a href="CppOperatorMinus.htm">-</a> 1<br/>
<a href="CppOperatorMinus.htm">-</a> (B * hpi) <a href="CppOperatorAssign.htm">=</a> ( (<a href="CppOperatorMinus.htm">-</a> 4 * 0.5 * pi * 0.5 * pi) <a href="CppOperatorDivide.htm">/</a> (pi * pi) ) <a href="CppOperatorMinus.htm">-</a> 1<br/>
<a href="CppOperatorMinus.htm">-</a> (B * hpi) <a href="CppOperatorAssign.htm">=</a> ( (<a href="CppOperatorMinus.htm">-</a> 1 * pi * pi) <a href="CppOperatorDivide.htm">/</a> (pi * pi) ) <a href="CppOperatorMinus.htm">-</a> 1<br/>
<a href="CppOperatorMinus.htm">-</a> (B * hpi) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a> 1 <a href="CppOperatorMinus.htm">-</a> 1<br/>
<a href="CppOperatorMinus.htm">-</a> (B * hpi) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a> 2<br/>
<a href="CppOperatorMinus.htm">-</a> B * 0.5 * pi <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a> 2<br/>
B * 0.5 * pi <a href="CppOperatorAssign.htm">=</a> 2<br/>
B&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 2 <a href="CppOperatorDivide.htm">/</a> (0.5 * pi)<br/>
B&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 4 <a href="CppOperatorDivide.htm">/</a> pi<br/>
<br/>
Conclusion:<br/>
A <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a> 4 <a href="CppOperatorDivide.htm">/</a> (pi * pi)<br/>
B&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 4 <a href="CppOperatorDivide.htm">/</a> pi<br/>
<br/>
So<br/>
f(x) <a href="CppOperatorAssign.htm">=</a> ((<a href="CppOperatorMinus.htm">-</a> 4 <a href="CppOperatorDivide.htm">/</a> (pi * pi)) * x * x) <a href="CppOperatorPlus.htm">+</a> ( (4 <a href="CppOperatorDivide.htm">/</a> pi) * x)<br/>
f(x) <a href="CppOperatorAssign.htm">=</a> ( (<a href="CppOperatorMinus.htm">-</a> 4 * x * x) <a href="CppOperatorDivide.htm">/</a> (pi * pi) ) <a href="CppOperatorPlus.htm">+</a> ( (4 * x) <a href="CppOperatorDivide.htm">/</a> pi )<br/>
<br/>
<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
