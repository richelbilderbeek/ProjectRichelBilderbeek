<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Canvas</title>
  <meta name="description" content="C++ Canvas"/>
  <meta name="keywords" content="C++ Canvas "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCanvas.htm">Canvas</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.694 at Fri Jan  2 09:55:06 2015
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/><img src="PicWindows.png" alt="Windows"/></p>
<p>&nbsp;</p>
<p>
  <a href="CppCanvas.htm">Canvas</a> is the <a href="CppAbstractBaseClass.htm">(abstract) base class</a>
  of an ASCII art canvas. <a href="CppDerivedClass.htm">derived classes</a> are, among others,
  <a href="CppDrawCanvas.htm">DrawCanvas</a>, <a href="CppImageCanvas.htm">ImageCanvas</a>
  and <a href="CppTextCanvas.htm">TextCanvas</a>.
</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCanvas/CppCanvas.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCanvas/CppCanvas.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCanvas.htm">CppCanvas</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCanvas.htm">CppCanvas</a>/canvas.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCanvas.htm">CppCanvas</a>/canvascolorsystem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCanvas.htm">CppCanvas</a>/canvascoordinatsystem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCanvas.htm">CppCanvas</a>/canvascoordinatsystems.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCanvas.htm">CppCanvas</a>/canvascolorsystems.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCanvas.htm">CppCanvas</a>/canvas.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCanvas.htm">CppCanvas</a>/canvascolorsystem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCanvas.htm">CppCanvas</a>/canvascoordinatsystem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCanvas.htm">CppCanvas</a>/canvascoordinatsystems.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCanvas.htm">CppCanvas</a>/canvascolorsystems.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCanvas.htm">CppCanvas</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCanvas/canvas.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCanvas/canvas.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppCanvas.htm">Canvas</a>, ASCII art painting surface <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2008-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl/<a href="CppCanvas.htm">CppCanvas</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> RIBI_CANVAS_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_CANVAS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "canvascolorsystem.h"<br/>
<a href="CppInclude.htm">#include</a> "canvascoordinatsystem.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQRegExp.htm">QRegExp</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>A <a href="CppCanvas.htm">Canvas</a> is an ASCII art <b><a href="CppClass.htm">class</a></b> <b><a href="CppFor.htm">for</a></b> drawing (Draw<a href="CppCanvas.htm">Canvas</a>),<br/>
<a href="CppComment.htm">///</a>displaying images (Image<a href="CppCanvas.htm">Canvas</a>) and displaying text (Text<a href="CppCanvas.htm">Canvas</a>)<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppCanvas.htm">Canvas</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>();<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppCanvas.htm">Canvas</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppGetAsciiArtGradient.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; GetAsciiArtGradient() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the height of the canvas is <a href="CppChar.htm">character</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppInt.htm">int</a></b> GetHeight() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the width of the canvas is <a href="CppChar.htm">character</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppInt.htm">int</a></b> GetWidth() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Load a <a href="CppCanvas.htm">Canvas</a> from <a href="CppStdString.htm">std::string</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/DON'T: <a href="CppMake.htm">make</a> it a <a href="CppConstructor.htm">constructor</a> instead<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Load(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> the <a href="CppCanvas.htm">Canvas</a> to <a href="CppStdString.htm">std::string</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; ToStrings() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppSignal.htm">signal</a> is <a href="CppEmit.htm">emitted</a> when <a href="CppAny.htm">any</a> member variable changes<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<a href="CppCanvas.htm">Canvas</a>*)&gt; m_signal_changed;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppGetRegexMatches.htm">GetRegexMatches</a>.htm<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppGetRegexMatches.htm">GetRegexMatches</a>(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRegExp.htm">QRegExp</a>&amp; r<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> a coordinat is in the range of the <a href="CppCanvas.htm">Canvas</a><br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsInRange(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtains the minimum element of a 2D <a href="CppContainer.htm">container</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppMinElement.htm">MinElement</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type <a href="CppMinElement.htm">MinElement</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtains the maximal element of a 2D <a href="CppContainer.htm">container</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppMaxElement.htm">MaxElement</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type <a href="CppMaxElement.htm">MaxElement</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_CANVAS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCanvas/canvas.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCanvas/canvas.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppCanvas.htm">Canvas</a>, ASCII art painting surface <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2008-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl/<a href="CppCanvas.htm">CppCanvas</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "canvas.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQString.htm">QString</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQRegExp.htm">QRegExp</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "canvascolorsystems.h"<br/>
<a href="CppInclude.htm">#include</a> "canvascoordinatsystems.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>::<a href="CppCanvas.htm">Canvas</a>()<br/>
&nbsp;&nbsp;: m_signal_changed{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>::GetAsciiArtGradient() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> { 'M','N','m','d','h','y','s','o','+','/',':','-','.','`',' ' };<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-01-10: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>, split up from Draw<a href="CppCanvas.htm">Canvas</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>::<a href="CppMinElement.htm">MinElement</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppContainer.htm">Container</a> must have a size");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain an initial lowest value<br/>
&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type minValue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> *(<a href="CppStdMin_element.htm">std::min_element</a>(v[0].begin(),v[0].end()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the <a href="CppIterator.htm">iterator</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::const_iterator rowEnd <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::const_iterator row <a href="CppOperatorAssign.htm">=</a> v.begin();<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>row; <a href="CppComment.htm">//</a>Move to the next position, as index 0 is already read from<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; row <a href="CppOperatorNotEqual.htm">!=</a> rowEnd; <a href="CppOperatorIncrement.htm">++</a>row) <a href="CppComment.htm">//</a>row is already <a href="CppInitialize.htm">initialize</a>d<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type localMinVal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> *(<a href="CppStdMin_element.htm">std::min_element</a>(row-&gt;begin(),row-&gt;end()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (localMinVal &lt; minValue) minValue <a href="CppOperatorAssign.htm">=</a> localMinVal;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> minValue;<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>::<a href="CppMaxElement.htm">MaxElement</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppContainer.htm">Container</a> must have a size");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain an initial heighest value<br/>
&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type maxValue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> *(<a href="CppStdMax_element.htm">std::max_element</a>(v[0].begin(),v[0].end()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the <a href="CppIterator.htm">iterator</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::const_iterator rowEnd <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::const_iterator row <a href="CppOperatorAssign.htm">=</a> v.begin();<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>row; <a href="CppComment.htm">//</a>Move to the next position, as index 0 is already read from<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; row <a href="CppOperatorNotEqual.htm">!=</a> rowEnd; <a href="CppOperatorIncrement.htm">++</a>row) <a href="CppComment.htm">//</a>row is already <a href="CppInitialize.htm">initialize</a>d<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type localMaxVal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> *(<a href="CppStdMax_element.htm">std::max_element</a>(row-&gt;begin(),row-&gt;end()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (localMaxVal &gt; maxValue) maxValue <a href="CppOperatorAssign.htm">=</a> localMaxVal;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maxValue;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCanvas/canvascolorsystem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCanvas/canvascolorsystem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RIBI_CANVASCOLORSYSTEM_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_CANVASCOLORSYSTEM_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The color system used to draw on a <a href="CppCanvas.htm">Canvas</a>:<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> normal: full/drawn is displayed by M<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> invert: empty/non-drawn is displayed by M<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> <a href="CppCanvas.htm">Canvas</a>ColorSystem<br/>
{<br/>
&nbsp;&nbsp;normal,<br/>
&nbsp;&nbsp;invert,<br/>
<br/>
&nbsp;&nbsp;n_types <a href="CppComment.htm">//</a>Used <b><a href="CppFor.htm">for</a></b> testing<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_CANVASCOLORSYSTEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCanvas/canvascolorsystem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCanvas/canvascolorsystem.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "canvascolorsystem.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCanvas/canvascolorsystems.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCanvas/canvascolorsystems.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RIBI_CANVASCOLORSYSTEMS_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_CANVASCOLORSYSTEMS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "canvascolorsystem.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bimap.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppCanvas.htm">Canvas</a>ColorSystems<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>ColorSystems();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppCanvas.htm">Canvas</a>ColorSystem&gt; GetAll() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>ColorSystem s) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>ColorSystem ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppCanvas.htm">Canvas</a>ColorSystem,<a href="CppStdString.htm">std::string</a>&gt; m_map;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppCanvas.htm">Canvas</a>ColorSystem,<a href="CppStdString.htm">std::string</a>&gt; CreateMap();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_CANVASCOLORSYSTEMS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCanvas/canvascolorsystems.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCanvas/canvascolorsystems.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "canvascolorsystems.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>ColorSystem,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>ColorSystems::m_map;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>ColorSystems::<a href="CppCanvas.htm">Canvas</a>ColorSystems()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>ColorSystem,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>ColorSystems::CreateMap()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppCanvas.htm">Canvas</a>ColorSystem,<a href="CppStdString.htm">std::string</a>&gt; m;<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppCanvas.htm">Canvas</a>ColorSystem,<a href="CppStdString.htm">std::string</a>&gt;::value_type(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>ColorSystem::invert,"invert"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppCanvas.htm">Canvas</a>ColorSystem,<a href="CppStdString.htm">std::string</a>&gt;::value_type(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>ColorSystem::normal,"normal"));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>ColorSystem&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>ColorSystems::GetAll() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppCanvas.htm">Canvas</a>ColorSystem&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>ColorSystem::invert,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>ColorSystem::normal<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppCanvas.htm">Canvas</a>ColorSystem::n_types));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>ColorSystems::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppCanvas.htm">Canvas</a>ColorSystem&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppCanvas.htm">Canvas</a>ColorSystems().GetAll();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>ColorSystem t <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppCanvas.htm">Canvas</a>ColorSystems().ToStr(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>ColorSystem u <a href="CppOperatorAssign.htm">=</a> <a href="CppCanvas.htm">Canvas</a>ColorSystems().ToType(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(u <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>ColorSystems::ToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>ColorSystem type) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.left.empty()) m_map <a href="CppOperatorAssign.htm">=</a> CreateMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.left.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.left.count(type));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> m_map.left.find(type)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>ColorSystem <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>ColorSystems::ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.right.empty()) m_map <a href="CppOperatorAssign.htm">=</a> CreateMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.right.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.right.count(s) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>ColorSystem t <a href="CppOperatorAssign.htm">=</a> m_map.right.find(s)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCanvas/canvascoordinatsystem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCanvas/canvascoordinatsystem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RIBI_CANVASCOORDINATSYSTEM_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_CANVASCOORDINATSYSTEM_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The coordinat system used in displayal:<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> screen: origin is at top-left of the screen<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> graph: origin is at bottom-left of the screen<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem<br/>
{<br/>
&nbsp;&nbsp;graph,<br/>
&nbsp;&nbsp;screen,<br/>
<br/>
&nbsp;&nbsp;n_types <a href="CppComment.htm">//</a>Used <b><a href="CppFor.htm">for</a></b> testing<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>View canvascoordinatsystem.h <b><a href="CppFor.htm">for</a></b> <a href="CppFunction.htm">function</a>s to work with <b><a href="CppThis.htm">this</a></b> <b><a href="CppEnumClass.htm">enum class</a></b><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_CANVASCOORDINATSYSTEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCanvas/canvascoordinatsystem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCanvas/canvascoordinatsystem.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "canvascoordinatsystem.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCanvas/canvascoordinatsystems.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCanvas/canvascoordinatsystems.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RIBI_CANVASCOORDINATSYSTEMS_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_CANVASCOORDINATSYSTEMS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bimap.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "canvascoordinatsystem.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppCanvas.htm">Canvas</a>CoordinatSystems<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>CoordinatSystems();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem&gt; GetAll() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem s) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem,<a href="CppStdString.htm">std::string</a>&gt; m_map;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem,<a href="CppStdString.htm">std::string</a>&gt; CreateMap();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_CANVASCOORDINATSYSTEMS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCanvas/canvascoordinatsystems.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCanvas/canvascoordinatsystems.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "canvascoordinatsystems.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>CoordinatSystem,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>CoordinatSystems::m_map;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>CoordinatSystems::<a href="CppCanvas.htm">Canvas</a>CoordinatSystems()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>CoordinatSystem,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>CoordinatSystems::CreateMap()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem,<a href="CppStdString.htm">std::string</a>&gt; m;<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem,<a href="CppStdString.htm">std::string</a>&gt;::value_type(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem::graph,"graph"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem,<a href="CppStdString.htm">std::string</a>&gt;::value_type(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem::screen,"screen"));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>CoordinatSystem&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>CoordinatSystems::GetAll() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem::graph,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem::screen<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppCanvas.htm">Canvas</a>CoordinatSystem::n_types));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>CoordinatSystems::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppCanvas.htm">Canvas</a>CoordinatSystems().GetAll();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem t <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppCanvas.htm">Canvas</a>CoordinatSystems().ToStr(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem u <a href="CppOperatorAssign.htm">=</a> <a href="CppCanvas.htm">Canvas</a>CoordinatSystems().ToType(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(u <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>CoordinatSystems::ToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem type) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.left.empty()) m_map <a href="CppOperatorAssign.htm">=</a> CreateMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.left.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.left.count(type));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> m_map.left.find(type)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>CoordinatSystem <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>CoordinatSystems::ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.right.empty()) m_map <a href="CppOperatorAssign.htm">=</a> CreateMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.right.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.right.count(s) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem t <a href="CppOperatorAssign.htm">=</a> m_map.right.find(s)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
