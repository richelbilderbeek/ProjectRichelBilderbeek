<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GetValueInMap</title>
  <meta name="description" content="C++ GetValueInMap"/>
  <meta name="keywords" content="C++ GetValueInMap code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppGetValueInMap.htm">GetValueInMap</a></h1>
<p>&nbsp;</p>
<p>Will this <a href="CppCompile.htm">compile</a>?</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> Get<a href="CppDouble.htm">Double</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myMap, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> myMap[i];<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Answer: No, it will give the following <a href="CppCompileError.htm">compile error</a>:</p>
<p>&nbsp;</p>
<p>When using Borland <a href="CppBcc32Exe.htm">BCC32.EXE</a> version 6.0.10.157:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
[<a href="Cpp.htm">C++</a> Error] Unit1.cpp(6): E2094 '<b><a href="CppOperatorPlus.htm">operator+</a></b>' not implemented in type '_STL::map&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>,_STL::less&lt;<b><a href="CppInt.htm">int</a></b>&gt;,_STL::allocator&lt;_STL::pair&lt;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; &gt; &gt;' <b><a href="CppFor.htm">for</a></b> arguments of type '<b><a href="CppInt.htm">int</a></b>'<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>When using <a href="CppGpp.htm">G++</a> 4.5.2:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
/MyFolder/CppGetValueInMap/<a href="CppMain.htm">main</a>.cpp:5: error: passing '<b><a href="CppConst.htm">const</a></b> <a href="CppMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>, <b><a href="CppDouble.htm">double</a></b>&gt;' as '<b><a href="CppThis.htm">this</a></b>' argument of 'mapped_type&amp; <a href="CppMap.htm">std::map</a>&lt;_Key, _Tp, _Compare, _Alloc&gt;::<b><a href="CppOperator.htm">operator</a></b>[](<b><a href="CppConst.htm">const</a></b> key_type&amp;) [with _Key <a href="CppOperatorAssign.htm">=</a> <b><a href="CppInt.htm">int</a></b>, _Tp <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDouble.htm">double</a></b>, _Compare <a href="CppOperatorAssign.htm">=</a> <a href="CppLess.htm">std::less</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;, _Alloc <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::allocator&lt;<a href="CppPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>, <b><a href="CppDouble.htm">double</a></b>&gt; &gt;, mapped_type <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDouble.htm">double</a></b>, key_type <a href="CppOperatorAssign.htm">=</a> <b><a href="CppInt.htm">int</a></b>]' discards qualifiers<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The reason for this is that the <a href="CppOperatorIndex.htm">index operator</a>/<a href="CppOperatorIndex.htm">operator[]</a> is not a 
<a href="CppConst.htm">const</a> <a href="CppMemberFunction.htm">member function</a>. This is because this <a href="CppMemberFunction.htm">member function</a>
possibly inserts an element to the <a href="CppMap.htm">std::map</a>! It is created to make insertion easy and to
never <a href="CppThrow.htm">throw</a>. Therefore, the code above will not <a href="CppCompile.htm">compile</a>: 
if <b>myMap</b> does not have the key <b>i</b>, an <a href="CppException.htm">exception</a> has to be <a href="CppThrow.htm">thrown</a>. 
So, due to this it does not <a href="CppCompile.htm">compile</a>. The way to solve the above example is shown below.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppGetValueInMap.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> KeyType, <b><a href="CppClass.htm">class</a></b> ValueType&gt;<br/>
ValueType GetValue(<b><a href="CppConst.htm">const</a></b> <a href="CppMap.htm">std::map</a>&lt;KeyType,ValueType&gt;&amp; m, <b><a href="CppConst.htm">const</a></b> KeyType&amp; key)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppMap.htm">std::map</a>&lt;KeyType,ValueType&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> m.find(key);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( i <a href="CppOperatorNotEqual.htm">!=</a> m.end() );<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> i-&gt;second;<br/>
}<br/>
<br/>
<a href="CppMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<a href="CppString.htm">std::string</a>&gt; GetNumberMap()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<a href="CppString.htm">std::string</a>&gt; numberMap;<br/>
&nbsp;&nbsp;numberMap[0] <a href="CppOperatorAssign.htm">=</a> "Zero";<br/>
&nbsp;&nbsp;numberMap[1] <a href="CppOperatorAssign.htm">=</a> "One";<br/>
&nbsp;&nbsp;numberMap[2] <a href="CppOperatorAssign.htm">=</a> "Two";<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Etcetera<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> numberMap;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<a href="CppString.htm">std::string</a>&gt; myMap(GetNumberMap());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( GetValue(myMap,0) <a href="CppOperatorEqual.htm">==</a> "Zero" ) ;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( GetValue(myMap,1) <a href="CppOperatorEqual.htm">==</a> "One" ) ;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( GetValue(myMap,2) <a href="CppOperatorEqual.htm">==</a> "Two" ) ;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
