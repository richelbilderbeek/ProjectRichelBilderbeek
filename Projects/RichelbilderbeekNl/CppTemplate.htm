<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>template</title>
  <meta name="description" content="C++ template"/>
  <meta name="keywords" content="C++ template keyword"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppTemplate.htm">template</a></h1>
<p>&nbsp;</p>
<p><a href="CppTemplate.htm">template</a> is a <a href="CppKeyword.htm">keyword</a> for <a href="CppTemplate.htm">templates</a>.
<a href="CppTemplate.htm">Templates</a> 'provide direct support for generic programming in the form of programming using types
as parameters' [1].</p>
<p>&nbsp;</p>
<p>A <a href="CppTemplate.htm">template</a> can take parameters [2]:</p>
<p>&nbsp;</p>
<ul>
  <li>Type parameters</li>
  <li>Value parameters</li>
  <li>Template parameters</li>
</ul>
<p>&nbsp;</p>
<p><a href="CppTemplate.htm">templates</a> can be used to:</p>
<p>&nbsp;</p>
<ul>
  <li>write <a href="CppTemplateFunction.htm">template functions</a></li>
  <li>write <a href="CppTemplateClass.htm">template classes</a></li>
  <li>do <a href="CppTemplateMetaprogram.htm">template metaprogrammming</a> (programs performed at compile time)</li>
  </ul>
<p>&nbsp;</p>
<p>
  Templates make it possible to use one <a href="CppFunction.htm">function</a> or 
  <a href="CppClass.htm">class</a> to handle many different <a href="CppDataType.htm">data types</a>.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppExample.htm">Examples</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppTemplateClassExample1.htm">Example 1: templated class of type T</a></li>
  <li><a href="CppTemplateClassExample2.htm">Example 2: templated class of type T, full specialisation to int and double</a></li>
  <li><a href="CppTemplateClassExample3.htm">Example 3: templated class with integer template argument, full specialisation to zero and one</a></li>
  <li><a href="CppTemplateClassExample4.htm">Example 4: templated class with enum template argument, full specialisation for each enum value</a></li>
  <!-- <li><a href="CppTemplateClassExample5.htm">Example 5: (nothing yet)</a></li> -->
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    There is no semantic difference between <a href="CppClass.htm">class</a> and <a href="CppTypename.htm">typename</a> in a template-parameter [3,4]: 'template &lt;class T&gt;' and 'template&lt;typename T&gt;' are synonymous [5]
  </li>
  <li>
    Use <a href="CppTemplate.htm">templates</a> to express <a href="CppAlgorithm.htm">algorithms</a> that apply to many <a href="CppArgument.htm">argument</a> <a href="CppDataType.htm">types</a> [6]
  </li>
  <li>
    Use <a href="CppTemplate.htm">templates</a> to express <a href="CppContainer.htm">containers</a> [7]
  </li>
  <li>
    When <a href="CppDefinition.htm">defining</a> a <a href="CppTemplate.htm">template</a>, first design and <a href="CppDebug.htm">debug</a> a non-template version; later generalize by adding parameters [8]
  </li>
  <li>
    <a href="CppTemplate.htm">Templates</a> are type-safe, but checking happens too late [9]
  </li>
  <li>
    When designing a <a href="CppTemplate.htm">template</a>, carefully consider the <a href="CppConcept.htm">concepts</a> 
    assumed for its <a href="CppTemplate.htm">template</a> <a href="CppArgument.htm">arguments</a> [10]
  </li>
  <li>
    If a class template should be copyable, give it a non-<a href="CppTemplate.htm">template</a> copy constructor and a non-<a href="CppTemplate.htm">template</a> copy assignment [11]
  </li>
  <li>
    If a class template should be movable, give it a non-<a href="CppTemplate.htm">template</a> move constructor and a non-<a href="CppTemplate.htm">template</a> move assignment [12]
  </li>
  <li>
    A virtual function member cannot be a <a href="CppTemplate.htm">template</a> member function [13]
  </li>
  <li>
    Define a type as a member of a <a href="CppTemplate.htm">template</a> only if it depends on all the class <a href="CppTemplate.htm">template</a>'s arguments [14]
  </li>
  <li>
    Use function <a href="CppTemplate.htm">templates</a> to deduce class <a href="CppTemplate.htm">template</a> argument types [15]
  </li>
  <li>
    Overload function <a href="CppTemplate.htm">templates</a> to get the same semantics for a variety of argument types [16]
  </li>
  <li>
    Use argument substitution failure to provide just the right set of functions for a program [17]
  </li>
  <li>
    Use <a href="CppTemplate.htm">template</a> aliases to simplify notation and hide implementation details [18]
  </li>
  <li>
    There is no seperate compilation of <a href="CppTemplate.htm">templates</a>: #include <a href="CppTemplate.htm">template</a> definitions in every translation unit that uses them [19]
  </li>
  <li>
    Use ordinary functions as interfaces to code that cannot deal with <a href="CppTemplate.htm">templates</a> [20]
  </li>
  <li>
    Seperately compile large <a href="CppTemplate.htm">templates</a> and <a href="CppTemplate.htm">templates</a> with nontrivial context dependencies [21]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.1, page 665: 'Templates provide direct support for generic programming in the form of programming using types as parameters</li>
  <li><!--  2 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 25.2, page 722: 'A template can take parameters: Type parameters [...], Value parameters [...], Template parameters [...]'</li>
  <li><!--  3 -->C++. International Standard. ISO/IEC 14882. Second edition. Paragraph 14.1.2.</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 25.2, page 722: 'A template argument is defined to be a type argument by prefixing it with typename or class. The result of using either is completely equivalent'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[3] template &lt;class T&gt;' and 'template&lt;typename T&gt;' are synonymous'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[1] Use templates to express algorithms that apply to many argument types'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[2] Use templates to express containers'</li>
  <li><!--  8 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[4] When defining a template, first design and debug a non-template version; later generalize by adding parameters'</li>

  <li><!--  9 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[5] Templates are type-safe, but checking happens too late'</li>
  <li><!-- 10 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[6] When designing a template, carefully consider the concepts (requirements) assumed for its template arguments'</li>
  <li><!-- 11 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[7] If a class template should be copyable, give it a non-template copy constructor and a non-template copy assignment'</li>
  <li><!-- 12 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[8] If a class template should be movable, give it a non-template move constructor and a non-template move assignment'</li>
  <li><!-- 13 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[9] A virtual function member cannot be a template member function'</li>
  <li><!-- 14 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[10] Define a type as a member of a template only if it depends on all the class template's arguments'</li>
  <li><!-- 15 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[11] Use function templates to deduce class template argument types'</li>
  <li><!-- 16 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[12] Overload function templates to get the same semantics for a variety of argument types'</li>
  <li><!-- 17 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[13] Use argument substitution failure to provide just the right set of functions for a program'</li>
  <li><!-- 18 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[14] Use template aliases to simplify notation and hide implementation details'</li>
  <li><!-- 19 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[15] There is no seperate compilation of templates: #include template definitions in every translation unit that uses them'</li>
  <li><!-- 20 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[16] Use ordinary functions as interfaces to code that cannot deal with templates'</li>
  <li><!-- 21 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: '[17] Seperately compile large templates and templates with nontrivial context dependencies'</li>

</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
