<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>variable</title>
  <meta name="description" content="C++ Variable"/>
  <meta name="keywords" content="C++ variable"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppVariable.htm">Variable</a></h1>
<p>&nbsp;</p>
<p>
  A <a href="CppVariable.htm">variable</a> is something to store data in. 
  This data can be of any <a href="CppDataType.htm">data type</a>. The name of the 
  <a href="CppVariable.htm">variable</a> is called its <a href="CppIdentifier.htm">identifier</a>. 
  </p>
<p>&nbsp;</p>
<p>In the code example below, there are two variables, 'number' and 'i':</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> number <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;number<a href="CppOperatorPlusAssign.htm">+=</a>i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> number <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This produces the following screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
0 : 0<br/>
1 : 1<br/>
2 : 3<br/>
3 : 6<br/>
4 : 10<br/>
5 : 15<br/>
6 : 21<br/>
7 : 28<br/>
8 : 36<br/>
9 : 45<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>
  The <a href="CppScope.htm">scope</a> of the <a href="CppVariable.htm">variable</a> 'number' 
  is from the line it is <a href="CppDeclaration.htm">declared</a> to 
  the end of <a href="CppMain.htm">main</a>.
</p>
<p>&nbsp;</p>
<p>
  The <a href="CppScope.htm">scope</a> of the <a href="CppVariable.htm">variable</a> 'i' is 
  inside the <a href="CppFor.htm">for</a>-loop.
</p> 
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Give a meaningful name to an <a href="CppIdentifier.htm">identifier</a> [1]
  </li>
  <li>
    Don't <a href="CppDeclaration.htm">declare</a> a <a href="CppVariable.htm">variable</a> until 
    you have a value to initialize it with [2,4,6-7]
  </li>
  <li>
    <a href="CppDeclaration.htm">Declare</a> <a href="CppVariable.htm">variables</a> as 
    <a href="CppLocal.htm">locally</a> as possible [5]
  </li>
  <li>
    Although it is not always necessary to <a href="CppInitialize.htm">initialize</a> every 
    <a href="CppVariable.htm">variable</a> explicitly, doing so will help you avoid many kinds of problems [8]
  </li>
  <li>
    <a href="CppDeclaration.htm">Declare</a> only one <a href="CppVariable.htm">variable</a> in each 
    <a href="CppDeclaration.htm">declaration</a> [9,10]
  <li>
    When <a href="CppDeclaration.htm">declaring</a> a <a href="CppVariable.htm">variable</a>,
    provide a <a href="CppComment.htm">comment</a> 
    that explains the <a href="CppVariable.htm">variable</a>'s purpose in the program [9]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. Programming. 2009. ISBN: 978-0-321-54372-1. Chapter 5.9.1: 'Use meaningful names'</li>
  <li><!--  2 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Item 6.5.10: 'Don't declare a variable until you have a value to initialize it with'.</li>
  <li><!--  3 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. Programming. 2009. ISBN: 978-0-321-54372-1. Chapter 5.9.1: 'Use meaningful names'</li>
  <li><!--  4 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Paragraph 19: 'Always initialize variables'</li>
  <li><!--  5 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Paragraph 18: 'Declare variables as locally as possible'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 6.6. Advice, page 169: '[21] Avoid uninitialized variables'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 9.8. Advice, page 240: '[1] Don't declare a variable until you have a value to initialize it with'</li>
  <li><!--  8 -->Paul Deitel, Harvey Deitel. C++11 for progrgrammers (2nd edition). 2014. ISBN: 978-0-13-343985-4. Chapter 2.4, Error Prevention Tip 2.1. page 25: 'Although it is not always necessary to initialize every variable explicitly, doing so will help you avoid many kinds of problems.'</li>
  <li><!--  9 -->Paul Deitel, Harvey Deitel. C++11 for progrgrammers (2nd edition). 2014. ISBN: 978-0-13-343985-4. Chapter 2.4, Good Programming Practice 2.3. page 26: 'Declare only one variable in each declaration and provide a comment that explains the variable's purpose in the program.'</li>
  <li><!-- 10 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 6.6. Advice. page 169: '[11] Declare one name (only) per declaration'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
