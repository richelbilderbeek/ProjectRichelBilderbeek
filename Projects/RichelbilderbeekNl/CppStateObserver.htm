<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>StateObserver</title>
  <meta name="description" content="C++ StateObserver"/>
  <meta name="keywords" content="C++ StateObserver "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppStateObserver.htm">StateObserver</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.636 at Sun Apr 27 13:00:40 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppStateObserver.htm">StateObserver</a> is a <a href="CppClass.htm">class</a> for state observer.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/CppStateObserver.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/CppStateObserver.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/alphabetafilter.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/alphabetagammafilter.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/alphafilter.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/floatingpointstateobserver.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/integeralphafilter.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/integerstateobserver.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/integersymmetricalphafilter.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/multialphafilter.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/multiintegerstateobserver.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/alphabetafilter.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/alphabetagammafilter.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/alphafilter.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/floatingpointstateobserver.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/integeralphafilter.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/integerstateobserver.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/integersymmetricalphafilter.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/multialphafilter.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/multiintegerstateobserver.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/stateobserverfwd.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppStateObserver.htm">CppStateObserver</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/alphabetafilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/alphabetafilter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> ALPHABETAFILTER_H<br/>
<a href="CppDefine.htm">#define</a> ALPHABETAFILTER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "floating<a href="CppPointer.htm">point</a><a href="ToolStateObserver.htm">stateobserver</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>An alpha beta filter<br/>
<b><a href="CppStruct.htm">struct</a></b> AlphaBetaFilter : <b><a href="CppPublic.htm">public</a></b> Floating<a href="CppPoint.htm">Point</a><a href="CppStateObserver.htm">StateObserver</a><br/>
{<br/>
&nbsp;&nbsp;AlphaBetaFilter(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha <a href="CppOperatorAssign.htm">=</a> 0.1 ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> beta&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.01,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1.0<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current state estimate<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetEstimate() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_output; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Supply a measurement, which will update the state estimate<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> measurement);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_alpha;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_beta;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_dt;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_slope;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_output;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ALPHABETAFILTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/alphabetafilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/alphabetafilter.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "alphabetafilter.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::AlphaBetaFilter::AlphaBetaFilter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> beta,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt)<br/>
&nbsp;&nbsp;: m_alpha(alpha),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_beta(beta),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dt(dt),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_slope(0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_output(0.0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_alpha <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_alpha &lt;&nbsp;&nbsp;1.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_beta&nbsp;&nbsp;<a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_beta&nbsp;&nbsp;<a href="CppOperatorLessEqual.htm">&lt;=</a> 2.0); <a href="CppComment.htm">//</a>beta &gt; 1.0 amplifies noise<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(4.0 <a href="CppOperatorMinus.htm">-</a> (2.0 * m_alpha <a href="CppOperatorMinus.htm">-</a> m_beta) &gt; 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_dt <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::AlphaBetaFilter::Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> measurement)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> output_predicted <a href="CppOperatorAssign.htm">=</a> m_output <a href="CppOperatorPlus.htm">+</a> ( m_slope * m_dt );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> prediction_error <a href="CppOperatorAssign.htm">=</a> measurement <a href="CppOperatorMinus.htm">-</a> output_predicted;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> output_corrected <a href="CppOperatorAssign.htm">=</a> output_predicted <a href="CppOperatorPlus.htm">+</a> (m_alpha * prediction_error);<br/>
&nbsp;&nbsp;m_output <a href="CppOperatorAssign.htm">=</a> output_corrected;<br/>
&nbsp;&nbsp;m_slope <a href="CppOperatorPlusAssign.htm">+=</a> (m_beta * prediction_error <a href="CppOperatorDivide.htm">/</a> m_dt);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::AlphaBetaFilter::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::AlphaBetaFilter::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2013-05-25: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;v.push_back("2013-06-18: <a href="CppVersion.htm">version</a> 1.1: derive from Floating<a href="CppPoint.htm">Point</a><a href="CppStateObserver.htm">StateObserver</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/alphabetagammafilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/alphabetagammafilter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> ALPHABETAGAMMAFILTER_H<br/>
<a href="CppDefine.htm">#define</a> ALPHABETAGAMMAFILTER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "floating<a href="CppPointer.htm">point</a><a href="ToolStateObserver.htm">stateobserver</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>An alpha beta gamma filter<br/>
<b><a href="CppStruct.htm">struct</a></b> AlphaBetaGammaFilter : <b><a href="CppPublic.htm">public</a></b> Floating<a href="CppPoint.htm">Point</a><a href="CppStateObserver.htm">StateObserver</a><br/>
{<br/>
&nbsp;&nbsp;AlphaBetaGammaFilter(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha <a href="CppOperatorAssign.htm">=</a> 0.1 ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> beta&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.01,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> gamma <a href="CppOperatorAssign.htm">=</a> 0.001,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1.0<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current state estimate<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetEstimate() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_position; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Supply a measurement, which will update the state estimate<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> measurement);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_acceleration;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_alpha;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_beta;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_dt;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_gamma;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_position;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_velocity;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ALPHABETAGAMMAFILTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/alphabetagammafilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/alphabetagammafilter.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "alphabetagammafilter.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::AlphaBetaGammaFilter::AlphaBetaGammaFilter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> beta,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> gamma,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt)<br/>
&nbsp;&nbsp;: m_acceleration(0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_alpha(alpha),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_beta(beta),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dt(dt),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_gamma(gamma),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_position(0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_velocity(0.0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_alpha <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_alpha &lt;&nbsp;&nbsp;1.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_beta&nbsp;&nbsp;<a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_beta&nbsp;&nbsp;<a href="CppOperatorLessEqual.htm">&lt;=</a> 2.0); <a href="CppComment.htm">//</a>beta &gt; 1.0 amplifies noise<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(4.0 <a href="CppOperatorMinus.htm">-</a> (2.0 * m_alpha <a href="CppOperatorMinus.htm">-</a> m_beta) &gt; 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_dt <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::AlphaBetaGammaFilter::Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> measurement)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> output_predicted <a href="CppOperatorAssign.htm">=</a> m_position <a href="CppOperatorPlus.htm">+</a> ( m_velocity * m_dt );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> prediction_error <a href="CppOperatorAssign.htm">=</a> measurement <a href="CppOperatorMinus.htm">-</a> output_predicted;<br/>
&nbsp;&nbsp;m_position <a href="CppOperatorAssign.htm">=</a> output_predicted <a href="CppOperatorPlus.htm">+</a> (m_alpha * prediction_error);<br/>
&nbsp;&nbsp;m_velocity <a href="CppOperatorPlusAssign.htm">+=</a> (m_beta * prediction_error <a href="CppOperatorDivide.htm">/</a> m_dt);<br/>
&nbsp;&nbsp;m_acceleration <a href="CppOperatorPlusAssign.htm">+=</a> (m_gamma * 2.0 * prediction_error <a href="CppOperatorDivide.htm">/</a> (m_dt * m_dt) );<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::AlphaBetaGammaFilter::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::AlphaBetaGammaFilter::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2013-05-25: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;v.push_back("2013-06-18: <a href="CppVersion.htm">version</a> 1.1: derive from Floating<a href="CppPoint.htm">Point</a><a href="CppStateObserver.htm">StateObserver</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/alphafilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/alphafilter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> ALPHAFILTER_H<br/>
<a href="CppDefine.htm">#define</a> ALPHAFILTER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "floating<a href="CppPointer.htm">point</a><a href="ToolStateObserver.htm">stateobserver</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>An alpha filter as described on [1]<br/>
<a href="CppComment.htm">///</a>An alpha filter is equivalant to a low-pass filter (also called high-cut filter, or treble cut filter) [2]<br/>
/<a href="CppComment.htm">//</a> [1] http://en.wikipedia.org/wiki/Alpha_beta_filter#The_alpha_filter<br/>
/<a href="CppComment.htm">//</a> [2] http://en.wikipedia.org/wiki/Low-pass_filter<br/>
<b><a href="CppStruct.htm">struct</a></b> AlphaFilter : <b><a href="CppPublic.htm">public</a></b> Floating<a href="CppPoint.htm">Point</a><a href="CppStateObserver.htm">StateObserver</a><br/>
{<br/>
&nbsp;&nbsp;AlphaFilter(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha <a href="CppOperatorAssign.htm">=</a> 0.1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1.0<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current state estimate<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetEstimate() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_output; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Supply a measurement, which will update the state estimate<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> measurement);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The response to noise measurements<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;* m_alpha <a href="CppOperatorAssign.htm">=</a> 1.0: follow measurements<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;* m_alpha <a href="CppOperatorAssign.htm">=</a> 0.9: low inertia: noise in measurements in decreased only slightly<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;* m_alpha <a href="CppOperatorAssign.htm">=</a> 0.1: high inertia: noise in measurements in decreased considerably<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;* m_alpha <a href="CppOperatorAssign.htm">=</a> 0.0: ignore measurements<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For a low-pass filter:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;m_alpha <a href="CppOperatorAssign.htm">=</a> m_dt <a href="CppOperatorDivide.htm">/</a> (RC <a href="CppOperatorPlus.htm">+</a> m_dt)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Where<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;* m_dt: <a href="CppTime.htm">time</a> step (sec)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;* R: resistance (ohm)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;* C: capacitance (Farad)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_alpha;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppTime.htm">time</a> constant<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_dt;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The current estimate of the state observed<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_output;<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>An alpha filter can easily be <a href="CppConvert.htm">convert</a>ed to the following state transition <a href="CppMatrix.htm">matrix</a>:<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>[x_new] <a href="CppOperatorAssign.htm">=</a> [x_current] * [1.0 <a href="CppOperatorMinus.htm">-</a> alpha] <a href="CppOperatorPlus.htm">+</a> [ alpha ] [ input ] <a href="CppOperatorPlus.htm">+</a> [ noise ]<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;#1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #6<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>#1: The <b><a href="CppNew.htm">new</a></b> state vector<br/>
<a href="CppComment.htm">///</a>#2: The current state vector<br/>
<a href="CppComment.htm">///</a>#3: The state transition <a href="CppMatrix.htm">matrix</a><br/>
<a href="CppComment.htm">///</a>#4: The control <a href="CppMatrix.htm">matrix</a><br/>
<a href="CppComment.htm">///</a>#5: The input vector<br/>
<a href="CppComment.htm">///</a>#6: The process noise vector<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>The alpha filter is supplied as an example in the <a href="Tools.htm">tool</a> <a href="ToolKalmanFilterer.htm">KalmanFilterer</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ALPHAFILTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/alphafilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/alphafilter.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "alphafilter.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::AlphaFilter::AlphaFilter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt)<br/>
&nbsp;&nbsp;: m_alpha(alpha),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dt(dt),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_output(0.0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_alpha <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_alpha &lt;&nbsp;&nbsp;1.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_beta&nbsp;&nbsp;<a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_beta&nbsp;&nbsp;<a href="CppOperatorLessEqual.htm">&lt;=</a> 2.0); <a href="CppComment.htm">//</a>beta &gt; 1.0 amplifies noise<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(4.0 <a href="CppOperatorMinus.htm">-</a> (2.0 * m_alpha <a href="CppOperatorMinus.htm">-</a> m_beta) &gt; 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_dt <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::AlphaFilter::Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> measurement)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> difference <a href="CppOperatorAssign.htm">=</a> measurement <a href="CppOperatorMinus.htm">-</a> m_output;<br/>
&nbsp;&nbsp;m_output <a href="CppOperatorPlusAssign.htm">+=</a> m_alpha * difference;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::AlphaFilter::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::AlphaFilter::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2013-05-25: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;v.push_back("2013-06-18: <a href="CppVersion.htm">version</a> 1.1: derive from Floating<a href="CppPoint.htm">Point</a><a href="CppStateObserver.htm">StateObserver</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/floatingpointstateobserver.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/floatingpointstateobserver.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> FLOATINGPOINTSTATEOBSERVER_H<br/>
<a href="CppDefine.htm">#define</a> FLOATINGPOINTSTATEOBSERVER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>An observer <b><a href="CppFor.htm">for</a></b> floating <a href="CppPointer.htm">point</a> values:<br/>
<a href="CppComment.htm">///</a>The measurements it works must be floating <a href="CppPointer.htm">point</a>,<br/>
<a href="CppComment.htm">///</a>The estimates it gives will be floating <a href="CppPointer.htm">point</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Floating<a href="CppPoint.htm">Point</a><a href="CppStateObserver.htm">StateObserver</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/ABC must have <b><a href="CppPublic.htm">public</a></b> <b><a href="CppVirtual.htm">virtual</a></b> <a href="CppDestructor.htm">destructor</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> * <a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C<a href="CppOperatorIncrement.htm">++</a> coding standards: 101 rules, guidelines, and best practices.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; ISBN: 0-32-111358-6. Item 50: 'Make <a href="CppBaseClass.htm">base class</a> <a href="CppDestructor.htm">destructor</a>s <b><a href="CppPublic.htm">public</a></b> and <b><a href="CppVirtual.htm">virtual</a></b>, or <b><a href="CppProtected.htm">protected</a></b> and non<b><a href="CppVirtual.htm">virtual</a></b>'<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Floating<a href="CppPoint.htm">Point</a><a href="CppStateObserver.htm">StateObserver</a>() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current state estimate<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> GetEstimate() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Supply a measurement, which will update the state estimate<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> measurement) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> FLOATINGPOINTSTATEOBSERVER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/floatingpointstateobserver.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/floatingpointstateobserver.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "floating<a href="CppPointer.htm">point</a><a href="ToolStateObserver.htm">stateobserver</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::Floating<a href="CppPoint.htm">Point</a><a href="CppStateObserver.htm">StateObserver</a>::Get<a href="CppVersion.htm">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::Floating<a href="CppPoint.htm">Point</a><a href="CppStateObserver.htm">StateObserver</a>::Get<a href="CppVersion.htm">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2013-06-18: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/integeralphafilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/integeralphafilter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> INTEGERALPHAFILTER_H<br/>
<a href="CppDefine.htm">#define</a> INTEGERALPHAFILTER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppInt.htm">integer</a><a href="ToolStateObserver.htm">stateobserver</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppInt.htm">Integer</a>AlphaFilter : <b><a href="CppPublic.htm">public</a></b> <a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppInt.htm">Integer</a>AlphaFilter(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> alpha,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>64_t value_active <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current state estimate<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b>64_t GetEstimate() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_value_active; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Supply a measurement, which will update the state estimate<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>64_t measurement);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The bitshift used <b><a href="CppFor.htm">for</a></b> division<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_alpha;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b>64_t m_value_active;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> INTEGERALPHAFILTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/integeralphafilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/integeralphafilter.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppInt.htm">integer</a>alphafilter.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppInt.htm">Integer</a>AlphaFilter::<a href="CppInt.htm">Integer</a>AlphaFilter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> alpha,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>64_t value_active)<br/>
&nbsp;&nbsp;: m_alpha(alpha),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_value_active(value_active)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_alpha <a href="CppOperatorGreaterEqual.htm">&gt;=</a>&nbsp;&nbsp;0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A bitshift should not be done with negative values");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_alpha <a href="CppOperatorLessEqual.htm">&lt;=</a> 63 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "An <b><a href="CppInt.htm">int</a></b>64_t can maximally be shifted 63 bits to the right");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppInt.htm">Integer</a>AlphaFilter::Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>64_t measurement)<br/>
{<br/>
&nbsp;&nbsp;m_value_active <a href="CppOperatorPlusAssign.htm">+=</a> ((measurement <a href="CppOperatorMinus.htm">-</a> m_value_active) <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_alpha);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppInt.htm">Integer</a>AlphaFilter::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppInt.htm">Integer</a>AlphaFilter::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2013-06-04: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;v.push_back("2013-06-18: <a href="CppVersion.htm">version</a> 1.1: refactoring of <a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/integerstateobserver.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/integerstateobserver.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> INTEGERSTATEOBSERVER_H<br/>
<a href="CppDefine.htm">#define</a> INTEGERSTATEOBSERVER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCinttypesH.htm">cinttypes</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>An observer <b><a href="CppFor.htm">for</a></b> <a href="CppInt.htm">integer</a> values:<br/>
<a href="CppComment.htm">///</a>The measurements it works must be <b><a href="CppInt.htm">int</a></b>,<br/>
<a href="CppComment.htm">///</a>The estimates it gives will be <b><a href="CppInt.htm">int</a></b><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current state estimate<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppInt.htm">int</a></b>64_t GetEstimate() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Supply a measurement, which will update the state estimate<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>64_t measurement) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> INTEGERSTATEOBSERVER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/integerstateobserver.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/integerstateobserver.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppInt.htm">integer</a><a href="ToolStateObserver.htm">stateobserver</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-04: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/integersymmetricalphafilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/integersymmetricalphafilter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> INTEGERSYMMETRICALPHAFILTER_H<br/>
<a href="CppDefine.htm">#define</a> INTEGERSYMMETRICALPHAFILTER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppInt.htm">integer</a><a href="ToolStateObserver.htm">stateobserver</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppInt.htm">Integer</a>SymmetricalAlphaFilter : <b><a href="CppPublic.htm">public</a></b> <a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppInt.htm">Integer</a>SymmetricalAlphaFilter(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> alpha,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>64_t value_active <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current state estimate<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b>64_t GetEstimate() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_value_active; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Supply a measurement, which will update the state estimate<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>64_t measurement);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The bitshift used <b><a href="CppFor.htm">for</a></b> division<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_alpha;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b>64_t m_value_active;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> INTEGERSYMMETRICALPHAFILTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/integersymmetricalphafilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/integersymmetricalphafilter.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppInt.htm">integer</a>symmetricalphafilter.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppInt.htm">Integer</a>SymmetricalAlphaFilter::<a href="CppInt.htm">Integer</a>SymmetricalAlphaFilter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> alpha,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>64_t value_active)<br/>
&nbsp;&nbsp;: m_alpha(alpha),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_value_active(value_active)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_alpha <a href="CppOperatorGreaterEqual.htm">&gt;=</a>&nbsp;&nbsp;0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A bitshift should not be done with negative values");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_alpha <a href="CppOperatorLessEqual.htm">&lt;=</a> 63 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "An <b><a href="CppInt.htm">int</a></b>64_t can maximally be shifted 63 bits to the right");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppInt.htm">Integer</a>SymmetricalAlphaFilter::Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>64_t measurement)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>64_t delta <a href="CppOperatorAssign.htm">=</a> ((measurement&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> m_value_active) <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_alpha);<br/>
&nbsp;&nbsp;m_value_active <a href="CppOperatorPlusAssign.htm">+=</a> delta <a href="CppOperatorPlus.htm">+</a> (delta <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> measurement <a href="CppOperatorMinus.htm">-</a> m_value_active &gt; 0 ? 1 : 0);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppInt.htm">Integer</a>SymmetricalAlphaFilter::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppInt.htm">Integer</a>SymmetricalAlphaFilter::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2013-06-04: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;v.push_back("2013-06-18: <a href="CppVersion.htm">version</a> 1.1: refactoring of <a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/multialphafilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/multialphafilter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MULTIALPHAFILTER_H<br/>
<a href="CppDefine.htm">#define</a> MULTIALPHAFILTER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "alphafilter.h"<br/>
<a href="CppInclude.htm">#include</a> "floating<a href="CppPointer.htm">point</a><a href="ToolStateObserver.htm">stateobserver</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MultiAlphaFilter : <b><a href="CppPublic.htm">public</a></b> Floating<a href="CppPoint.htm">Point</a><a href="CppStateObserver.htm">StateObserver</a><br/>
{<br/>
&nbsp;&nbsp;MultiAlphaFilter(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; alphas,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt <a href="CppOperatorAssign.htm">=</a> 1.0<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current state estimate<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetEstimate() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Supply a measurement, which will update the state estimate<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> measurement);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;AlphaFilter&gt; &gt; m_filters;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;AlphaFilter&gt; &gt; CreateFilters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; alphas,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MULTIALPHAFILTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/multialphafilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/multialphafilter.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "multialphafilter.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::MultiAlphaFilter::MultiAlphaFilter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; alphas,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt)<br/>
&nbsp;&nbsp;: m_filters(CreateFilters(alphas,dt))<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::AlphaFilter&gt; &gt; <a href="CppRibi.htm">ribi</a>::MultiAlphaFilter::CreateFilters(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; alphas,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;AlphaFilter&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha: alphas)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;AlphaFilter&gt; filter(<b><a href="CppNew.htm">new</a></b> AlphaFilter(alpha,dt));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(filter);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::MultiAlphaFilter::GetEstimate() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_filters.back()-&gt;GetEstimate();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::MultiAlphaFilter::Update(<b><a href="CppDouble.htm">double</a></b> measurement)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_filters.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; m_filters.size() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_filters[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_filters[i]-&gt;Update(measurement); <a href="CppComment.htm">//</a>One's output is the next one's output<br/>
&nbsp;&nbsp;&nbsp;&nbsp;measurement <a href="CppOperatorAssign.htm">=</a> m_filters[i]-&gt;GetEstimate();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::MultiAlphaFilter::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::MultiAlphaFilter::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-25: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-18: <a href="CppVersion.htm">version</a> 1.1: derive from Floating<a href="CppPoint.htm">Point</a><a href="CppStateObserver.htm">StateObserver</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/multiintegerstateobserver.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/multiintegerstateobserver.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MULTIINTEGERSTATEOBSERVER_H<br/>
<a href="CppDefine.htm">#define</a> MULTIINTEGERSTATEOBSERVER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppInt.htm">integer</a>alphafilter.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppInt.htm">integer</a><a href="ToolStateObserver.htm">stateobserver</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Multi<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a><br/>
{<br/>
&nbsp;&nbsp;Multi<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>&gt; &gt;&amp; filters<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current state estimate<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b>64_t GetEstimate() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Supply a measurement, which will update the state estimate<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Update(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>64_t measurement);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>&gt; &gt; m_filters;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MULTIINTEGERSTATEOBSERVER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/multiintegerstateobserver.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/multiintegerstateobserver.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "multi<a href="CppInt.htm">integer</a><a href="ToolStateObserver.htm">stateobserver</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Multi<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>::Multi<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>&gt; &gt;&amp; filters)<br/>
&nbsp;&nbsp;: m_filters(filters)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b>64_t <a href="CppRibi.htm">ribi</a>::Multi<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>::GetEstimate() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_filters.back()-&gt;GetEstimate();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Multi<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>::Update(<b><a href="CppInt.htm">int</a></b>64_t measurement)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_filters.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; m_filters.size() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_filters[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_filters[i]-&gt;Update(measurement); <a href="CppComment.htm">//</a>One's output is the next one's output<br/>
&nbsp;&nbsp;&nbsp;&nbsp;measurement <a href="CppOperatorAssign.htm">=</a> m_filters[i]-&gt;GetEstimate(); <a href="CppComment.htm">//</a>One's output is the next one's output<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::Multi<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::Multi<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-04: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-18: <a href="CppVersion.htm">version</a> 1.1: derive from <a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStateObserver/stateobserverfwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStateObserver/stateobserverfwd.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> STATEOBSERVERFWD_H<br/>
<a href="CppDefine.htm">#define</a> STATEOBSERVERFWD_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> AlphaFilter;<br/>
<b><a href="CppStruct.htm">struct</a></b> AlphaBetaFilter;<br/>
<b><a href="CppStruct.htm">struct</a></b> AlphaBetaGammaFilter;<br/>
<b><a href="CppStruct.htm">struct</a></b> Floating<a href="CppPoint.htm">Point</a><a href="CppStateObserver.htm">StateObserver</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppInt.htm">Integer</a>AlphaFilter;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppInt.htm">Integer</a>SmartAlphaFilter;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppInt.htm">Integer</a>SymmetricalAlphaFilter;<br/>
<b><a href="CppStruct.htm">struct</a></b> Multi<a href="CppInt.htm">Integer</a><a href="CppStateObserver.htm">StateObserver</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> MultiAlphaFilter;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> STATEOBSERVERFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
