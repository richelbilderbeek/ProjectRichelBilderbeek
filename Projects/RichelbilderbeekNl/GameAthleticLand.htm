<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GameAthleticLand</title>
  <meta name="description" content="C++ GameAthleticLand"/>
  <meta name="keywords" content="C++ GameAthleticLand "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="GameAthleticLand.htm">GameAthleticLand</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.636 at Sun Apr 27 13:00:58 2014
 -->
<p><img src="PicQt.png" alt="Qt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="GameAthleticLand.htm">Athletic Land</a> is an unfinished <a href="Games.htm">game</a> that is a PC clone of the MSX <a href="Games.htm">game</a> 'Athletic Land'.</p>
<p>&nbsp;</p>
<p><a href="GameAthleticLand.htm">Athletic Land</a>, the successor of <a href="GameAthleticLandVcl.htm">Athletic Land (VCL)</a>, uses the cross-platform <a href="CppQt.htm">Qt</a> <a href="CppLibrary.htm">library</a>.
<p><a href="GameAthleticLandVcl.htm">Athletic Land (VCL)</a>, the predecessor of <a href="GameAthleticLand.htm">Athletic Land</a>, uses the Windows-only <a href="CppVcl.htm">VCL</a> <a href="CppLibrary.htm">library</a>.
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="GameAthleticLand_0_9.png">View a screenshot of 'AthleticLand' (version 0.9)(png)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://www.youtube.com/watch?v=isjCc7CiSfM">YouTube video of 'Athletic Land'</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./GameAthleticLand/GameAthleticLandDesktop.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/GameAthleticLandDesktop.pro" border = "1"><tr><td><code>
include(../../<a href="CppDesktopApplication.htm">DesktopApplication</a>.pri)<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Boost.pri)<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">CppAbout</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppFileIo.htm">CppFileIo</a>/<a href="CppFileIo.htm">CppFileIo</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppHelp.htm">CppHelp</a>/<a href="CppHelp.htm">CppHelp</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppMenuDialog.htm">CppMenuDialog</a>/<a href="CppMenuDialog.htm">CppMenuDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppRichelBilderbeekProgram.htm">CppRichelBilderbeekProgram</a>/<a href="CppRichelBilderbeekProgram.htm">CppRichelBilderbeekProgram</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a>/<a href="CppTrace.htm">CppTrace</a>.pri)<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppRectangle.htm">CppRectangle</a>/<a href="CppRectangle.htm">CppRectangle</a>.pri)<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppQtHideAndShowDialog.htm">CppQtHideAndShowDialog</a>/<a href="CppQtHideAndShowDialog.htm">CppQtHideAndShowDialog</a>.pri)<br/>
<br/>
include(<a href="GameAthleticLand.htm">GameAthleticLand</a>Desktop.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += qt<a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./GameAthleticLand/GameAthleticLandWebsite.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/GameAthleticLandWebsite.pro" border = "1"><tr><td><code>
include(../../<a href="CppDesktopApplication.htm">DesktopApplication</a>.pri)<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Boost.pri)<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">CppAbout</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppFileIo.htm">CppFileIo</a>/<a href="CppFileIo.htm">CppFileIo</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppHelp.htm">CppHelp</a>/<a href="CppHelp.htm">CppHelp</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppMenuDialog.htm">CppMenuDialog</a>/<a href="CppMenuDialog.htm">CppMenuDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppRichelBilderbeekProgram.htm">CppRichelBilderbeekProgram</a>/<a href="CppRichelBilderbeekProgram.htm">CppRichelBilderbeekProgram</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a>/<a href="CppTrace.htm">CppTrace</a>.pri)<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppRectangle.htm">CppRectangle</a>/<a href="CppRectangle.htm">CppRectangle</a>.pri)<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppQtHideAndShowDialog.htm">CppQtHideAndShowDialog</a>/<a href="CppQtHideAndShowDialog.htm">CppQtHideAndShowDialog</a>.pri)<br/>
<br/>
include(<a href="GameAthleticLand.htm">GameAthleticLand</a>Desktop.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += qt<a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/GameAthleticLandConsole.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/GameAthleticLandConsole.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandmenudialog.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandmenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandfwd.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/Licence.txt<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/GameAthleticLandDesktop.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/GameAthleticLandDesktop.pri" border = "1"><tr><td><code>
include(../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>Console.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/qtathleticland<a href="CppMain.htm">main</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandarea.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandbackground.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandcollisionbehaviour.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandcreateareas.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandgame.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandmenu.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticland<a href="CppMain.htm">main</a><a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandmovement.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandmovementpattern.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandplayer.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandplayerstate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandsprite.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/qtathleticland<a href="CppMain.htm">main</a><a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/qtathleticlandresources.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/qtathleticlandmenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandplayerstates.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/qtathleticland<a href="CppMain.htm">main</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandarea.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandbackground.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandcollisionbehaviour.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandcreateareas.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandgame.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandmenu.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandmovement.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandmovementpattern.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandplayer.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandplayerstate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandsprite.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/qtathleticland<a href="CppMain.htm">main</a><a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/qtathleticlandresources.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/qtathleticlandmenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/athleticlandplayerstates.h<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/qtathleticland<a href="CppMain.htm">main</a>dialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/qtathleticlandmenudialog.ui<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/GameAthleticLandWebsite.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/GameAthleticLandWebsite.pri" border = "1"><tr><td><code>
include(../../<a href="Games.htm">Games</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>/<a href="GameAthleticLand.htm">GameAthleticLand</a>Console.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> +=<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> +=<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/ProjectAthleticLandVcl.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/ProjectAthleticLandVcl.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitFormGame<a href="CppImplementationFile.htm">.cpp</a>", FormGame);<br/>
USEFORM("UnitFormMenu<a href="CppImplementationFile.htm">.cpp</a>", FormMenu);<br/>
USEFORM("UnitFormSprites<a href="CppImplementationFile.htm">.cpp</a>", FormSprites);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "De Tuin Van Billy";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormMenu), &amp;FormMenu);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormSprites), &amp;FormSprites);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandarea.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandarea.h" border = "1"><tr><td><code>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitAreaH<br/>
<a href="CppDefine.htm">#define</a> UnitAreaH<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>fwd.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Background;<br/>
<b><a href="CppStruct.htm">struct</a></b> Player;<br/>
<b><a href="CppStruct.htm">struct</a></b> Sprite;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Area<br/>
{<br/>
&nbsp;&nbsp;Area(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Background&gt; m_background);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> InitBuffer(<a href="CppQPixmap.htm">QPixmap</a> * <b><a href="CppConst.htm">const</a></b> buffer) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Draw(<a href="CppQPixmap.htm">QPixmap</a> * <b><a href="CppConst.htm">const</a></b> buffer) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> HasFinished() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_area_finished; }<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> HasDied() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyLeft();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyRight();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyJump();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressNoKey();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Player();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Rock();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>RollingBall();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_area_finished;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Background&gt; m_background;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Player&gt; m_player;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Sprite&gt; &gt; m_sprites;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandarea.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandarea.cpp" border = "1"><tr><td><code>
<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/mem_fn.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPixmap.htm">QPixmap</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>area.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>background.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>player.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>playerstate.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>sprite.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::athl::Player&gt; <a href="CppRibi.htm">ribi</a>::athl::Area::m_player;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::Area::Area(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Background&gt; background)<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_area_finished(<b><a href="CppFalse.htm">false</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_background(background),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprites{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAdd.htm">Add</a>Player();<br/>
&nbsp;&nbsp;Start();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Area::Start()<br/>
{<br/>
&nbsp;&nbsp;m_player-&gt;SetToStartingPosition(m_background.get());<br/>
&nbsp;&nbsp;m_area_finished <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Area::Restart()<br/>
{<br/>
&nbsp;&nbsp;m_player-&gt;SetToStartingPosition(m_background.get());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Restart all sprites<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_sprites.begin(),m_sprites.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostMem_fn.htm">boost::mem_fn</a>(&amp;Sprite::Restart));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Area::<a href="CppAdd.htm">Add</a>Player()<br/>
{<br/>
&nbsp;&nbsp;m_player.reset(<b><a href="CppNew.htm">new</a></b> Player);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::athl::Area::HasDied() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_player-&gt;HasDied();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Area::Tick()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move all sprites<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_sprites.begin(),m_sprites.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostMem_fn.htm">boost::mem_fn</a>(&amp;Sprite::Move));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> collisions<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Sprite&gt; &gt;::<a href="CppIterator.htm">iterator</a> <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> m_sprites.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> m_sprites.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i)-&gt;DoesCollide(*m_player.get()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i)-&gt;OnCollide(*m_player.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_player-&gt;HasDied())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_player-&gt;RespondToBackground(m_background.get());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_player-&gt;GetX() <a href="CppOperatorPlus.htm">+</a> m_player-&gt;GetWidth() &gt; m_background-&gt;m_width)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Restart the current area, also sets the player to starting position<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Restart();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set area to be finished<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_area_finished <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_player-&gt;Tick();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Area::InitBuffer(<a href="CppQPixmap.htm">QPixmap</a> * <b><a href="CppConst.htm">const</a></b> buffer) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_background-&gt;m_width;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> m_background-&gt;m_height;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>buffer-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> width;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>buffer-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> height;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Area::Draw(<a href="CppQPixmap.htm">QPixmap</a> * <b><a href="CppConst.htm">const</a></b> buffer) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw background on buffer<br/>
&nbsp;&nbsp;m_background-&gt;Draw(buffer);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw all sprites on buffer<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_sprites.begin(),m_sprites.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;Sprite::Draw,_1,buffer));<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw player on buffer<br/>
&nbsp;&nbsp;m_player-&gt;Draw(buffer);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Area::PressKeyLeft()<br/>
{<br/>
&nbsp;&nbsp;m_player-&gt;PressKeyLeft();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Area::PressKeyRight()<br/>
{<br/>
&nbsp;&nbsp;m_player-&gt;PressKeyRight();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Area::PressKeyJump()<br/>
{<br/>
&nbsp;&nbsp;m_player-&gt;PressKeyJump();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Area::PressNoKey()<br/>
{<br/>
&nbsp;&nbsp;m_player-&gt;PressNoKey();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Area::<a href="CppAdd.htm">Add</a>Rock()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> m_background-&gt;m_right_x;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> m_background-&gt;m_walk_height ;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Sprite&gt; s(<b><a href="CppNew.htm">new</a></b> RockSprite(x,y));<br/>
&nbsp;&nbsp;s.reset(<b><a href="CppNew.htm">new</a></b> RockSprite(x,y <a href="CppOperatorMinus.htm">-</a> s-&gt;m_height)); <a href="CppComment.htm">//</a>Move rock up<br/>
&nbsp;&nbsp;m_sprites.push_back(s);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Area::<a href="CppAdd.htm">Add</a>RollingBall()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> m_background-&gt;m_width <a href="CppOperatorPlus.htm">+</a> 50;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> m_background-&gt;m_walk_height;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Sprite&gt; s(<b><a href="CppNew.htm">new</a></b> RollingBallSprite(x,y,-1.0));<br/>
&nbsp;&nbsp;s.reset(<b><a href="CppNew.htm">new</a></b> RollingBallSprite(x,y <a href="CppOperatorMinus.htm">-</a> s-&gt;m_height,-10.0)); <a href="CppComment.htm">//</a>Move roling ball up<br/>
&nbsp;&nbsp;m_sprites.push_back(s);<br/>
}<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<br/>
<br/>
<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandbackground.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandbackground.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> ATHLETICLANDBACKGROUND_H<br/>
<a href="CppDefine.htm">#define</a> ATHLETICLANDBACKGROUND_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>fwd.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>sprite.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Background : <b><a href="CppPublic.htm">public</a></b> NonMovingSprite<br/>
{<br/>
&nbsp;&nbsp;Background(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> walk_height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> right_x)<br/>
&nbsp;&nbsp;: NonMovingSprite(0,0,filename),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_walk_height(walk_height),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_right_x(right_x)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;~Background() {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_walk_height; <a href="CppComment.htm">//</a>Height where feet walk on<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_right_x; <a href="CppComment.htm">//</a>X coordinat of rock or fire<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> BackgroundAlForest : <b><a href="CppPublic.htm">public</a></b> Background<br/>
{<br/>
&nbsp;&nbsp;BackgroundAlForest();<br/>
};<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Background&gt; CreateBackgroundAlForest();<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandbackground.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandbackground.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>background.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameAthleticLand.htm">athleticland</a>resources.h"<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRibi.htm">ribi</a>::athl::BackgroundAlForest::BackgroundAlForest()<br/>
&nbsp;&nbsp;: Background(":/<a href="GameAthleticLand.htm">GameAthleticLand</a>/Background1.png",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;256, <a href="CppComment.htm">//</a>walk_y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;400&nbsp;&nbsp;<a href="CppComment.htm">//</a>right_x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::athl::Background&gt; <a href="CppRibi.htm">ribi</a>::athl::CreateBackgroundAlForest()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Background&gt;(<b><a href="CppNew.htm">new</a></b> BackgroundAlForest);<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandcollisionbehaviour.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandcollisionbehaviour.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> UnitCollisionBehaviourH<br/>
<a href="CppDefine.htm">#define</a> UnitCollisionBehaviourH<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>fwd.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<a href="CppComment.htm">//</a> CollisionBehaviour determines what will happen to a player<br/>
<a href="CppComment.htm">//</a> * LethalCollision: kills player<br/>
<a href="CppComment.htm">//</a> * MovePlayerAwayCollision: moves player away from collision zone<br/>
<b><a href="CppStruct.htm">struct</a></b> CollisionBehaviour<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> OnCollision(Player&amp; p) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~CollisionBehaviour() {}<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> LethalCollision : <b><a href="CppPublic.htm">public</a></b> CollisionBehaviour<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnCollision(Player&amp; p);<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MovePlayerAwayCollision : <b><a href="CppPublic.htm">public</a></b> CollisionBehaviour<br/>
{<br/>
&nbsp;&nbsp;MovePlayerAwayCollision(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnCollision(Player&amp; p);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_x1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_x2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_y1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_y2;<br/>
};<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TODO_RICHEL<br/>
<b><a href="CppBool.htm">bool</a></b> DoCollide(<b><a href="CppConst.htm">const</a></b> Rect&amp; a, <b><a href="CppConst.htm">const</a></b> Rect&amp; b);<br/>
<b><a href="CppBool.htm">bool</a></b> InRect(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> Rect&amp; r);<br/>
<b><a href="CppVoid.htm">void</a></b> MoveAway(Rect&amp; r1, Rect&amp; r2);<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandcollisionbehaviour.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandcollisionbehaviour.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>collisionbehaviour.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>player.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TODO_RICHEL<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::LethalCollision::OnCollision(Player&amp; p)<br/>
{<br/>
&nbsp;&nbsp;p.Die();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::MovePlayerAwayCollision::MovePlayerAwayCollision(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height)<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x1(x1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x2(x1 <a href="CppOperatorPlus.htm">+</a> width),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y1(y1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y2(y1 <a href="CppOperatorPlus.htm">+</a> height)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(width &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(height &gt; 0);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::MovePlayerAwayCollision::OnCollision(Player&amp; p)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Extract player coordinats<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> p_x1 <a href="CppOperatorAssign.htm">=</a> p.GetX();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> p_y1 <a href="CppOperatorAssign.htm">=</a> p.GetY();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> p_x2 <a href="CppOperatorAssign.htm">=</a> p_x1 <a href="CppOperatorPlus.htm">+</a> p.GetWidth();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> p_y2 <a href="CppOperatorAssign.htm">=</a> p_y1 <a href="CppOperatorPlus.htm">+</a> p.GetHeight();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rect r(m_x1,m_y1,m_x2,m_y2);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the deltas of player (1) and <b><a href="CppThis.htm">this</a></b> sprite (2) to zero<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dx <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dy <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!( p_x2&nbsp;&nbsp;&lt; m_x1 <a href="CppOperatorLogicalOr.htm">||</a> p_x1 &gt; m_x2 <a href="CppOperatorLogicalOr.htm">||</a> p_y2 &lt; m_y1&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> p_y1&nbsp;&nbsp;&gt; m_y2))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(p_x1,p_y1,r)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorIncrement.htm">++</a>dx; <a href="CppOperatorIncrement.htm">++</a>dy; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(p_x2,p_y1,r)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorDecrement.htm">--</a>dx; <a href="CppOperatorIncrement.htm">++</a>dy; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(p_x1,p_y2,r)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorIncrement.htm">++</a>dx; <a href="CppOperatorDecrement.htm">--</a>dy; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(p_x2,p_y2,r)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorDecrement.htm">--</a>dx; <a href="CppOperatorDecrement.htm">--</a>dy; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If all 4 edges are collision<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dx <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dy <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;p.Move(dx,dy);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::athl::InRect(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> Rect&amp; r)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> r.GetX() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x &lt; r.GetRight() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> r.GetY() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y &lt; r.GetBottom();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::MoveAway(Rect&amp; r1, Rect&amp; r2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dx1 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dy1 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dx2 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dy2 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No collision<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r1.Left&nbsp;&nbsp; &lt; 0) <a href="CppOperatorIncrement.htm">++</a>dx1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r1.Top&nbsp;&nbsp;&nbsp;&nbsp;&lt; 0) <a href="CppOperatorIncrement.htm">++</a>dy1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r1.Right&nbsp;&nbsp;&gt; ClientWidth ) <a href="CppOperatorDecrement.htm">--</a>dx1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r1.Bottom &gt; ClientHeight) <a href="CppOperatorDecrement.htm">--</a>dy1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r2.Left&nbsp;&nbsp; &lt; 0) <a href="CppOperatorIncrement.htm">++</a>dx2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r2.Top&nbsp;&nbsp;&nbsp;&nbsp;&lt; 0) <a href="CppOperatorIncrement.htm">++</a>dy2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r2.Right&nbsp;&nbsp;&gt; ClientWidth ) <a href="CppOperatorDecrement.htm">--</a>dx2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r2.Bottom &gt; ClientHeight) <a href="CppOperatorDecrement.htm">--</a>dy2;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!( r1.GetRight()&nbsp;&nbsp;&lt; r2.GetX() <a href="CppOperatorLogicalOr.htm">||</a> r1.GetX() &gt; r2.GetRight()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> r1.GetBottom() &lt; r2.GetY()&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> r1.GetY() &gt; r2.GetBottom()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(r1.GetLeft() ,r1.GetTop()&nbsp;&nbsp; ,r2)) { <a href="CppOperatorIncrement.htm">++</a>dx1; <a href="CppOperatorIncrement.htm">++</a>dy1; <a href="CppOperatorDecrement.htm">--</a>dx2; <a href="CppOperatorDecrement.htm">--</a>dy2;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(r1.GetRight(),r1.GetTop()&nbsp;&nbsp; ,r2)) { <a href="CppOperatorDecrement.htm">--</a>dx1; <a href="CppOperatorIncrement.htm">++</a>dy1; <a href="CppOperatorIncrement.htm">++</a>dx2; <a href="CppOperatorDecrement.htm">--</a>dy2;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(r1.GetLeft() ,r1.GetBottom(),r2)) { <a href="CppOperatorIncrement.htm">++</a>dx1; <a href="CppOperatorDecrement.htm">--</a>dy1; <a href="CppOperatorDecrement.htm">--</a>dx2; <a href="CppOperatorIncrement.htm">++</a>dy2;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(r1.GetRight(),r1.GetBottom(),r2)) { <a href="CppOperatorDecrement.htm">--</a>dx1; <a href="CppOperatorDecrement.htm">--</a>dy1; <a href="CppOperatorIncrement.htm">++</a>dx2; <a href="CppOperatorIncrement.htm">++</a>dy2;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If all 4 edges are collision<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dx1 <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dy1 <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>dx1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>dy1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>dx2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>dy2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;r1.Translate(dx1,dy1);<br/>
&nbsp;&nbsp;r2.Translate(dx2,dy2);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::athl::DoCollide(<b><a href="CppConst.htm">const</a></b> Rect&amp; a, <b><a href="CppConst.htm">const</a></b> Rect&amp; b)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a_x1 <a href="CppOperatorAssign.htm">=</a> a.GetLeft();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a_x2 <a href="CppOperatorAssign.htm">=</a> a.GetRight();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a_y1 <a href="CppOperatorAssign.htm">=</a> a.GetTop();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a_y2 <a href="CppOperatorAssign.htm">=</a> a.GetBottom();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_x1 <a href="CppOperatorAssign.htm">=</a> b.GetLeft();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_x2 <a href="CppOperatorAssign.htm">=</a> b.GetRight();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_y1 <a href="CppOperatorAssign.htm">=</a> b.GetTop();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_y2 <a href="CppOperatorAssign.htm">=</a> b.GetBottom();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Top-left of a in b?<br/>
&nbsp;&nbsp;&nbsp;&nbsp; (a_x1 &gt; b_x1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_x1 &lt; b_x2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y1 &gt; b_y1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y1 &lt; b_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Top-right of a in b?<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (a_x2 &gt; b_x1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_x2 &lt; b_x2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y1 &gt; b_y1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y1 &lt; b_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Bottom-left of a in b?<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (a_x1 &gt; b_x1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_x1 &lt; b_x2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y2 &gt; b_y1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y2 &lt; b_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Bottom-right of a in b?<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (a_x2 &gt; b_x1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_x2 &lt; b_x2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y2 &gt; b_y1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y2 &lt; b_y2) );<br/>
<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandcreateareas.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandcreateareas.h" border = "1"><tr><td><code>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitCreateAreasH<br/>
<a href="CppDefine.htm">#define</a> UnitCreateAreasH<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>area.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Area&gt; CreateAreas();<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandcreateareas.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandcreateareas.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>background.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>createareas.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>sprite.h"<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::athl::Area&gt; <a href="CppRibi.htm">ribi</a>::athl::CreateAreas()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Area&gt; v;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Area a(CreateBackgroundAlForest());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a>RollingBall();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(a);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Area a(CreateBackgroundAlForest());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a>Rock();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(a);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Area a(CreateBackgroundAlForest());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(a);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandfwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandfwd.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> ATHLETICLANDFWD_H<br/>
<a href="CppDefine.htm">#define</a> ATHLETICLANDFWD_H<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQPixmap.htm">QPixmap</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> CollisionBehaviour;<br/>
<b><a href="CppStruct.htm">struct</a></b> ComplexMovePattern;<br/>
<b><a href="CppStruct.htm">struct</a></b> MovementPattern;<br/>
<b><a href="CppStruct.htm">struct</a></b> Player;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ATHLETICLANDFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandgame.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandgame.h" border = "1"><tr><td><code>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandgame.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandgame.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>background.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>createareas.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>game.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>player.h"<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<br/>
__fastcall TFormGame::TFormGame(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_areas(CreateAreas()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cur_area(m_areas.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_n_lives(3)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(&amp;(m_areas[0]) <a href="CppOperatorEqual.htm">==</a> &amp;(*m_cur_area));<br/>
&nbsp;&nbsp;NewArea();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> TFormGame::NewArea() <a href="CppComment.htm">//</a>call when m_cur_area has changed<br/>
{<br/>
&nbsp;&nbsp;m_cur_area-&gt;InitBuffer(ImageBuffer);<br/>
&nbsp;&nbsp;m_cur_area-&gt;Start();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormGame::<a href="CppTime.htm">Time</a>rMain<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Press player keys<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>One can move either left or right<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_keys.count(VK_RIGHT )<a href="CppOperatorEqual.htm">==</a>1) m_cur_area-&gt;PressKeyRight();<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (m_keys.count(VK_LEFT)<a href="CppOperatorEqual.htm">==</a>1) m_cur_area-&gt;PressKeyLeft();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>One can always start jumping<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_keys.count(VK_SPACE)<a href="CppOperatorEqual.htm">==</a>1) m_cur_area-&gt;PressKeyJump();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>One can always stop pressing keys<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_keys.count(VK_LEFT )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> m_keys.count(VK_RIGHT)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> m_keys.count(VK_SPACE)<a href="CppOperatorEqual.htm">==</a>0) m_cur_area-&gt;PressNoKey();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Tick sprites and player<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_form-&gt;Tick();<br/>
&nbsp;&nbsp;m_cur_area-&gt;Tick();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw background, sprites and player<br/>
&nbsp;&nbsp;m_cur_area-&gt;Draw(ImageBuffer);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> game over<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_cur_area-&gt;HasDied())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show player suffering or something like...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>TODO<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>m_n_lives;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is player game over?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>TODO<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Restart area<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cur_area-&gt;<a href="CppAdd.htm">Add</a>Player();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cur_area-&gt;Restart();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> finishing of game<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_cur_area-&gt;HasFinished())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_cur_area;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_cur_area <a href="CppOperatorEqual.htm">==</a> m_areas.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ShowMessage("Game ended");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_cur_area <a href="CppOperatorAssign.htm">=</a> m_areas.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NewArea();<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw buffer to screen<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,m_form-&gt;ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;StretchDraw(ClientRect,ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormGame::FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;m_keys.insert(Key);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_keys.count(VK_LEFT) <a href="CppOperatorPlus.htm">+</a> m_keys.count(VK_RIGHT) <a href="CppOperatorEqual.htm">==</a> 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_keys.erase(VK_LEFT);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_keys.erase(VK_RIGHT);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormGame::FormKeyUp(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;m_keys.erase(Key);<br/>
}<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandmainwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandmainwidget.cpp" border = "1"><tr><td><code>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>movement.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>movementpattern.h"<br/>
<a href="CppComment.htm">/*</a><br/>
<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> TestUnitMovement()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Movement&gt; m;<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test NeverMoment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.reset(<b><a href="CppNew.htm">new</a></b> NeverMovement);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m-&gt;IsDone() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test WaitMovement<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_wait <a href="CppOperatorAssign.htm">=</a> 100;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.reset(<b><a href="CppNew.htm">new</a></b> WaitMovement(n_wait));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_wait-1; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m-&gt;IsDone()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m-&gt;IsDone()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test TeleportMovement<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dest_x <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dest_y <a href="CppOperatorAssign.htm">=</a> 2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.reset(<b><a href="CppNew.htm">new</a></b> TeleportMovement(x,y,dest_x,dest_y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m-&gt;IsDone() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorEqual.htm">==</a> dest_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y <a href="CppOperatorEqual.htm">==</a> dest_y);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test StraightLineMovement<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt <a href="CppOperatorAssign.htm">=</a> 100;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx <a href="CppOperatorAssign.htm">=</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.reset(<b><a href="CppNew.htm">new</a></b> StraightLineMovement(x,y,cnt,dx,dy));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>cnt-1; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m-&gt;IsDone()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m-&gt;IsDone()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(cnt)*dx);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(cnt)*dy);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> TestUnitMovementPattern()<br/>
{<br/>
&nbsp;&nbsp;ComplexMovePattern p;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;p.<a href="CppAdd.htm">Add</a>TeleportMovement(x,y,20.0,10.0);<br/>
&nbsp;&nbsp;p.<a href="CppAdd.htm">Add</a>StraightLineMovement(x,y,10,-2.0,-0.5);<br/>
&nbsp;&nbsp;p.<a href="CppAdd.htm">Add</a>WaitMovement(5);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>20; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.Move();<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> DoCollide(<b><a href="CppConst.htm">const</a></b> Rect&amp; a, <b><a href="CppConst.htm">const</a></b> Rect&amp; b)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a_x1 <a href="CppOperatorAssign.htm">=</a> a.Left;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a_x2 <a href="CppOperatorAssign.htm">=</a> a.Right;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a_y1 <a href="CppOperatorAssign.htm">=</a> a.Top;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a_y2 <a href="CppOperatorAssign.htm">=</a> a.Bottom;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_x1 <a href="CppOperatorAssign.htm">=</a> b.Left;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_x2 <a href="CppOperatorAssign.htm">=</a> b.Right;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_y1 <a href="CppOperatorAssign.htm">=</a> b.Top;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_y2 <a href="CppOperatorAssign.htm">=</a> b.Bottom;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Top-left of a in b?<br/>
&nbsp;&nbsp;&nbsp;&nbsp; (a_x1 &gt; b_x1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_x1 &lt; b_x2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y1 &gt; b_y1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y1 &lt; b_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Top-right of a in b?<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (a_x2 &gt; b_x1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_x2 &lt; b_x2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y1 &gt; b_y1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y1 &lt; b_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Bottom-left of a in b?<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (a_x1 &gt; b_x1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_x1 &lt; b_x2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y2 &gt; b_y1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y2 &lt; b_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Bottom-right of a in b?<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (a_x2 &gt; b_x1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_x2 &lt; b_x2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y2 &gt; b_y1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a_y2 &lt; b_y2) );<br/>
<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b>* <a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;TestUnitMovement();<br/>
&nbsp;&nbsp;TestUnitMovementPattern();<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandmenu.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandmenu.h" border = "1"><tr><td><code>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandmenu.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandmenu.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>game.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>menu.h"<br/>
<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<br/>
__fastcall TFormMenu::TFormMenu(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMenu::PanelStartClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TFormGame&gt; f(<b><a href="CppNew.htm">new</a></b> TFormGame(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMenu::<a href="CppTime.htm">Time</a>rAutoStart<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rAutoStart-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;PanelStartClick(0);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMenu::PanelQuitClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;Close();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>
}<br/>
<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandmenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandmenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> ATHLETICLANDMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> ATHLETICLANDMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "menudialog.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> AthleticLandMenuDialog : <b><a href="CppPublic.htm">public</a></b> MenuDialog<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;Help GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Program&gt; GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ATHLETICLANDMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandmenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandmenudialog.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>menudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRichelBilderbeekProgram.htm">richelbilderbeekprogram</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::AthleticLandMenuDialog::ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argc</a> <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> GetHelp() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileTitle() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " cannot be run in console mode\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppAbout.htm">About</a> <a href="CppRibi.htm">ribi</a>::AthleticLandMenuDialog::GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"AthleticLand",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"MSX game clone",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-11-07",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-xxxx",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="GameAthleticLand.htm">GameAthleticLand</a>.htm",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>History());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtDialWidget.htm">QtDialWidget</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtDialWidget.htm">QtDialWidget</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Help <a href="CppRibi.htm">ribi</a>::AthleticLandMenuDialog::GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Help(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileTitle(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileDescription(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; <a href="CppRibi.htm">ribi</a>::AthleticLandMenuDialog::GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ProgramAthleticLand<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::AthleticLandMenuDialog::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "0.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::AthleticLandMenuDialog::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-11-07: <a href="CppVersion.htm">version</a> 0.1: conformized to <a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>Console"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::AthleticLandMenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::AthleticLandMenuDialog::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::AthleticLandMenuDialog::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandmovement.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandmovement.h" border = "1"><tr><td><code>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitMovementH<br/>
<a href="CppDefine.htm">#define</a> UnitMovementH<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>fwd.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<a href="CppComment.htm">//</a> A Movement changes the x and y coordinat or the client<br/>
<a href="CppComment.htm">//</a> * NeverMovement: the client never changes its coordinats<br/>
<a href="CppComment.htm">//</a> * StraightLineMovement: the client moves in a straight line <b><a href="CppFor.htm">for</a></b> some <a href="CppTime.htm">time</a><br/>
<a href="CppComment.htm">//</a> * TeleportMovement: the client teleports once<br/>
<a href="CppComment.htm">//</a> * WaitMovement: the client waits (it does not change its coordinats)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppFor.htm">for</a></b> some <a href="CppTime.htm">time</a><br/>
<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Movement<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Movement() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Move() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppBool.htm">bool</a></b> IsDone() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Restart() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> NeverMovement : <b><a href="CppPublic.htm">public</a></b> Movement<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move() {}<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsDone() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart();<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> StraightLineMovement : <b><a href="CppPublic.htm">public</a></b> Movement<br/>
{<br/>
&nbsp;&nbsp;StraightLineMovement(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max_cnt,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_x(x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_y(y),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_cnt(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_max_cnt(max_cnt),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_dx(dx),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_dy(dy)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(max_cnt &gt; 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Perform move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x<a href="CppOperatorPlusAssign.htm">+=</a>m_dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y<a href="CppOperatorPlusAssign.htm">+=</a>m_dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make move end<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_cnt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_cnt <a href="CppOperatorEqual.htm">==</a> m_max_cnt) m_cnt <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Movement has ended, prepare <b><a href="CppFor.htm">for</a></b> next <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsDone() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (m_cnt <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cnt <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; m_x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>x-coordinat of sprite<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; m_y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>y-coordinat of sprite<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_cnt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>count of move<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_max_cnt; <a href="CppComment.htm">//</a>maximal count of move<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_dx;&nbsp;&nbsp; <a href="CppComment.htm">//</a>change in x-coordinat of sprite<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_dy;&nbsp;&nbsp; <a href="CppComment.htm">//</a>change in y-coordinat of sprite<br/>
<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> TeleportMovement : <b><a href="CppPublic.htm">public</a></b> Movement<br/>
{<br/>
&nbsp;&nbsp;TeleportMovement(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> target_x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> target_y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_x(x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_y(y),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_target_x(target_x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_target_y(target_y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Perform move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x=m_target_x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y=m_target_y;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsDone() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>; <a href="CppComment.htm">//</a>Assume only one teleport, so after each Move IsDone <a href="CppReturn.htm">returns</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart() {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; m_x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>x-coordinat of sprite<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; m_y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>y-coordinat of sprite<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_target_x;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_target_y;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> WaitMovement : <b><a href="CppPublic.htm">public</a></b> Movement<br/>
{<br/>
&nbsp;&nbsp;WaitMovement(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max_cnt)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_max_cnt(max_cnt),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_cnt(0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(max_cnt &gt; 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move() <a href="CppComment.htm">//</a>Assumes Move is called before IsDone<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make move end<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_cnt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_cnt <a href="CppOperatorEqual.htm">==</a> m_max_cnt) m_cnt <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Movement has ended, prepare <b><a href="CppFor.htm">for</a></b> next <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsDone() <b><a href="CppConst.htm">const</a></b> <a href="CppComment.htm">//</a>Assumes Move is called before IsDone<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (m_cnt <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cnt <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_max_cnt;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_cnt;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandmovement.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandmovement.cpp" border = "1"><tr><td><code>
<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>movement.h"<br/>
<br/>
<br/>
<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandmovementpattern.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandmovementpattern.h" border = "1"><tr><td><code>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitMovementPatternH<br/>
<a href="CppDefine.htm">#define</a> UnitMovementPatternH<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>fwd.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Movement;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MovementPattern<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Move() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~MovementPattern() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Restart() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> NoMovePattern : <b><a href="CppPublic.htm">public</a></b> MovementPattern<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart() {}<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ComplexMovePattern : <b><a href="CppPublic.htm">public</a></b> MovementPattern<br/>
{<br/>
&nbsp;&nbsp;ComplexMovePattern()<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cur_index(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_movements{}<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>StraightLineMovement(<b><a href="CppDouble.htm">double</a></b>&amp; x,<b><a href="CppDouble.htm">double</a></b>&amp; y,<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt,<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>TeleportMovement(<b><a href="CppDouble.htm">double</a></b>&amp; x,<b><a href="CppDouble.htm">double</a></b>&amp; y,<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dest_x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dest_y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>WaitMovement(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart() { m_cur_index <a href="CppOperatorAssign.htm">=</a> 0; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_cur_index;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Movement&gt; &gt; m_movements;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandmovementpattern.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandmovementpattern.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>movement.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>movementpattern.h"<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::ComplexMovePattern::Move()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_movements <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_movements.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_cur_index &lt; n_movements);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_movements[m_cur_index]);<br/>
<br/>
&nbsp;&nbsp;m_movements[m_cur_index]-&gt;Move();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_movements[m_cur_index]-&gt;IsDone())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reset old move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_movements[m_cur_index]-&gt;Restart();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Go to next move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cur_index <a href="CppOperatorAssign.htm">=</a> (m_cur_index <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> n_movements;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::ComplexMovePattern::<a href="CppAdd.htm">Add</a>StraightLineMovement(<b><a href="CppDouble.htm">double</a></b>&amp; x,<b><a href="CppDouble.htm">double</a></b>&amp; y,<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt,<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cnt &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Movement&gt; m(<b><a href="CppNew.htm">new</a></b> StraightLineMovement(x,y,cnt,dx,dy));<br/>
&nbsp;&nbsp;m_movements.push_back(m);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::ComplexMovePattern::<a href="CppAdd.htm">Add</a>TeleportMovement(<b><a href="CppDouble.htm">double</a></b>&amp; x,<b><a href="CppDouble.htm">double</a></b>&amp; y,<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dest_x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dest_y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Movement&gt; m(<b><a href="CppNew.htm">new</a></b> TeleportMovement(x,y,dest_x,dest_y));<br/>
&nbsp;&nbsp;m_movements.push_back(m);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::ComplexMovePattern::<a href="CppAdd.htm">Add</a>WaitMovement(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cnt &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Movement&gt; m(<b><a href="CppNew.htm">new</a></b> WaitMovement(cnt));<br/>
&nbsp;&nbsp;m_movements.push_back(m);<br/>
}<br/>
<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandplayer.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandplayer.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> ATHLETICLANDPLAYER_H<br/>
<a href="CppDefine.htm">#define</a> ATHLETICLANDPLAYER_H<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>sprite.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>fwd.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>playerstate.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQPixmap.htm">QPixmap</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> Background;<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> Player<a href="CppState.htm">State</a>;<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> PlayerLeft;<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> PlayerRight;<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> PlayerJump;<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> PlayerStand;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Player<br/>
{<br/>
&nbsp;&nbsp;Player();<br/>
&nbsp;&nbsp;Player(<b><a href="CppConst.htm">const</a></b> Player&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Player&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Player&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyLeft();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyRight();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyJump();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressNoKey();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> Tick();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> Draw(<a href="CppQPixmap.htm">QPixmap</a> * <b><a href="CppConst.htm">const</a></b> canvas) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetToWalkingHeight(<b><a href="CppConst.htm">const</a></b> Background* <b><a href="CppConst.htm">const</a></b> background);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetToStartingPosition(<b><a href="CppConst.htm">const</a></b> Background* <b><a href="CppConst.htm">const</a></b> background);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> RespondToBackground(<b><a href="CppConst.htm">const</a></b> Background* <b><a href="CppConst.htm">const</a></b> background);<br/>
<br/>
&nbsp;&nbsp;Player<a href="CppState.htm">State</a> Get<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_state; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_x; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_y; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b> GetHeight() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b> GetWidth() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> Move(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dx, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dy);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>Left();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>Right();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>Jump(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>Stand(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> face_right);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> Die() { m_has_died <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> HasDied() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_has_died; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Player<a href="CppState.htm">State</a> * m_cur_state;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> m_has_died;<br/>
&nbsp;&nbsp;Player<a href="CppState.htm">State</a> m_state;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The fraction the player is left<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_x;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The fraction the player is top<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_y;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppState.htm">State</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlayerLeft&gt; m_state_left;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlayerRight&gt; m_state_right;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlayerJump&gt; m_state_jump;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlayerStand&gt; m_state_stand;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> ATHLETICLANDPLAYER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandplayer.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandplayer.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>background.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPixmap.htm">QPixmap</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>player.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>playerstate.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::Player::Player()<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state(Player<a href="CppState.htm">State</a>::stand_right),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x(0.10),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y(0.60)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_state_left(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlayerLeft&gt;(<b><a href="CppNew.htm">new</a></b> PlayerLeft(*<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_state_right(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlayerRight&gt;(<b><a href="CppNew.htm">new</a></b> PlayerRight(*<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_state_jump(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlayerJump&gt;(<b><a href="CppNew.htm">new</a></b> PlayerJump(*<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_state_stand(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlayerStand&gt;(<b><a href="CppNew.htm">new</a></b> PlayerStand(*<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set<a href="CppState.htm">State</a>Stand(1.0); <a href="CppComment.htm">//</a>1.0 <a href="CppOperatorAssign.htm">=</a> sprite looks to right<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_cur_state);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::PressKeyLeft()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (m_state)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Player<a href="CppState.htm">State</a>::stand_left: m_x <a href="CppOperatorMinusAssign.htm">-=</a> 0.01; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Player<a href="CppState.htm">State</a>::stand_right: m_state <a href="CppOperatorAssign.htm">=</a> Player<a href="CppState.htm">State</a>::stand_right; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Player<a href="CppState.htm">State</a>::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"<a href="CppRibi.htm">ribi</a>::athl::Player::PressKeyLeft: never use Player<a href="CppState.htm">State</a>::n_types");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::athl::Player::PressKeyLeft: never use Player<a href="CppState.htm">State</a>::n_types");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::PressKeyRight()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <a href="CppState.htm">State</a>::stand_right: m_x <a href="CppOperatorPlusAssign.htm">+=</a> 0.01; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <a href="CppState.htm">State</a>::stand_left: m_state <a href="CppOperatorAssign.htm">=</a> <a href="CppState.htm">State</a>::stand_left;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::PressKeyJump()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_cur_state-&gt;PressKeyJump();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::PressNoKey()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_cur_state-&gt;PressNoKey();<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::Tick()<br/>
{<br/>
&nbsp;&nbsp;m_cur_state-&gt;Tick(m_x,m_y);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::Draw(<a href="CppQPixmap.htm">QPixmap</a> * <b><a href="CppConst.htm">const</a></b> canvas) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(canvas);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_cur_state);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_x);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_y);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>canvas-&gt;Draw(x,y,m_image-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>canvas-&gt;Draw(x,y,m_cur_state-&gt;GetSprite()-&gt;Picture-&gt;Graphic);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::GetHeight() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_cur_state-&gt;GetHeight();<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::GetWidth() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_cur_state-&gt;GetWidth();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::Move(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dx, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dy)<br/>
{<br/>
&nbsp;&nbsp;m_x <a href="CppOperatorPlusAssign.htm">+=</a><b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(dx);<br/>
&nbsp;&nbsp;m_y <a href="CppOperatorPlusAssign.htm">+=</a><b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(dy);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::SetToWalkingHeight(<b><a href="CppConst.htm">const</a></b> Background* <b><a href="CppConst.htm">const</a></b> background)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite_height <a href="CppOperatorAssign.htm">=</a> m_cur_state-&gt;GetHeight();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> background-&gt;m_walk_height <a href="CppOperatorMinus.htm">-</a> sprite_height;<br/>
&nbsp;&nbsp;m_y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::SetToStartingPosition(<b><a href="CppConst.htm">const</a></b> Background* <b><a href="CppConst.htm">const</a></b> background)<br/>
{<br/>
&nbsp;&nbsp;SetToWalkingHeight(background);<br/>
&nbsp;&nbsp;m_x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Set<a href="CppState.htm">State</a>Stand(<b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::RespondToBackground(<b><a href="CppConst.htm">const</a></b> Background* <b><a href="CppConst.htm">const</a></b> background)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prevent player from leaving the screen to the left<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_x &lt; 0.0) m_x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prevent player from sinking down the screen after jumping<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite_height <a href="CppOperatorAssign.htm">=</a> m_cur_state-&gt;GetHeight();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_y);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max_y <a href="CppOperatorAssign.htm">=</a> background-&gt;m_walk_height <a href="CppOperatorMinus.htm">-</a> sprite_height;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &gt; max_y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y <a href="CppOperatorAssign.htm">=</a> max_y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlayerJump * <b><a href="CppConst.htm">const</a></b> s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;PlayerJump*&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_cur_state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Player must have been jumping");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s-&gt;EndJump();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::Set<a href="CppState.htm">State</a>Left()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_state_left-&gt;StartLeft();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>An upcast, always successful<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_cur_state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Player<a href="CppState.htm">State</a>*&gt;(m_state_left.get());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::Set<a href="CppState.htm">State</a>Right()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_state_right-&gt;StartRight();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>An upcast, always successful<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_cur_state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Player<a href="CppState.htm">State</a>*&gt;(m_state_right.get());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::Set<a href="CppState.htm">State</a>Jump(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_state_jump-&gt;StartJump(dx);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>An upcast, always successful<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_cur_state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Player<a href="CppState.htm">State</a>*&gt;(m_state_jump.get());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player::Set<a href="CppState.htm">State</a>Stand(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> face_right)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_state_stand-&gt;StartStand(face_right);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>An upcast, always successful<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_cur_state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Player<a href="CppState.htm">State</a>*&gt;(m_state_stand.get());<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandplayerstate.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandplayerstate.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> ATHLETICLANDPLAYERSTATE_H<br/>
<a href="CppDefine.htm">#define</a> ATHLETICLANDPLAYERSTATE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>fwd.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> Player<a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;stand_left,<br/>
&nbsp;&nbsp;stand_right,<br/>
<br/>
&nbsp;&nbsp;n_types <a href="CppComment.htm">//</a>Used <b><a href="CppFor.htm">for</a></b> <a href="CppDebug.htm">debugging</a> only<br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Player;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Player<a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;Player<a href="CppState.htm">State</a>(Player&amp; player);<br/>
&nbsp;&nbsp;Player<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> Player<a href="CppState.htm">State</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Player<a href="CppState.htm">State</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Player<a href="CppState.htm">State</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Player<a href="CppState.htm">State</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> PressKeyLeft()&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> PressKeyRight() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> PressKeyJump()&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> PressNoKey()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Tick(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a>&gt; GetSprite() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_sprite; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetHeight() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetWidth() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;Player&amp; m_player;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPixmap.htm">QPixmap</a>&gt; m_sprite;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_walk_speed;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_jump_up_speed;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_gravity;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_ddx; <a href="CppComment.htm">//</a>Change of dx on key press left and right <br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> PlayerJump : <b><a href="CppPublic.htm">public</a></b> Player<a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;PlayerJump(Player&amp; player);<br/>
&nbsp;&nbsp;PlayerJump(<b><a href="CppConst.htm">const</a></b> PlayerJump&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;PlayerJump&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> PlayerJump&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyLeft() { m_dx<a href="CppOperatorMinusAssign.htm">-=</a>m_ddx; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyRight() { m_dx<a href="CppOperatorPlusAssign.htm">+=</a>m_ddx;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyJump() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressNoKey() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick(<b><a href="CppDouble.htm">double</a></b>&amp; x, <b><a href="CppDouble.htm">double</a></b>&amp; y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x<a href="CppOperatorPlusAssign.htm">+=</a>m_dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y<a href="CppOperatorPlusAssign.htm">+=</a>m_dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dy<a href="CppOperatorPlusAssign.htm">+=</a>m_gravity;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartJump(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx) <a href="CppComment.htm">//</a>Is jump forward, backwards or up?<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dy <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>m_jump_up_speed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dx <a href="CppOperatorAssign.htm">=</a> dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite <a href="CppOperatorAssign.htm">=</a> m_dx <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 ? m_jump_right : m_jump_left;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> EndJump();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_dx;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_dy;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPixmap.htm">QPixmap</a>&gt; m_jump_left;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPixmap.htm">QPixmap</a>&gt; m_jump_right;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> PlayerLeft : <b><a href="CppPublic.htm">public</a></b> Player<a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;PlayerLeft(Player&amp; player);<br/>
&nbsp;&nbsp;PlayerLeft(<b><a href="CppConst.htm">const</a></b> PlayerLeft&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;PlayerLeft&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> PlayerLeft&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyLeft() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyRight();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyJump();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressNoKey();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartLeft()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite <a href="CppOperatorAssign.htm">=</a> m_walk_left_1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_x<a href="CppOperatorMinusAssign.htm">-=</a>m_walk_speed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_sprite <a href="CppOperatorAssign.htm">=</a> m_sprite <a href="CppOperatorEqual.htm">==</a> m_walk_left_2 ? m_walk_left_1 : m_walk_left_2;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPixmap.htm">QPixmap</a>&gt; m_walk_left_1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPixmap.htm">QPixmap</a>&gt; m_walk_left_2;<br/>
<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> PlayerRight : <b><a href="CppPublic.htm">public</a></b> Player<a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;PlayerRight(Player&amp; player);<br/>
&nbsp;&nbsp;PlayerRight(<b><a href="CppConst.htm">const</a></b> PlayerRight&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;PlayerRight&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> PlayerRight&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyLeft();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyRight() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyJump();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressNoKey();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartRight()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite <a href="CppOperatorAssign.htm">=</a> m_walk_right_1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_x<a href="CppOperatorPlus.htm">+</a> <a href="CppOperatorAssign.htm">=</a> m_walk_speed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite <a href="CppOperatorAssign.htm">=</a> (m_sprite <a href="CppOperatorEqual.htm">==</a> m_walk_right_2 ? m_walk_right_1 : m_walk_right_2);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPixmap.htm">QPixmap</a>&gt; m_walk_right_1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPixmap.htm">QPixmap</a>&gt; m_walk_right_2;<br/>
<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> PlayerStand : <b><a href="CppPublic.htm">public</a></b> Player<a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;PlayerStand(Player&amp; player);<br/>
&nbsp;&nbsp;PlayerStand(<b><a href="CppConst.htm">const</a></b> PlayerStand&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;PlayerStand&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> PlayerStand&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyLeft();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyRight();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyJump();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressNoKey() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartStand(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> face_right)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_face_right <a href="CppOperatorAssign.htm">=</a> face_right;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite <a href="CppOperatorAssign.htm">=</a> m_face_right ? m_stand_right : m_stand_left;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick(<b><a href="CppDouble.htm">double</a></b>&amp; x, <b><a href="CppDouble.htm">double</a></b>&amp; y) {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_face_right; <a href="CppComment.htm">//</a>Facing right direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPixmap.htm">QPixmap</a>&gt; m_stand_left;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPixmap.htm">QPixmap</a>&gt; m_stand_right;<br/>
};<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandplayerstate.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandplayerstate.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>playerstate.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPixmap.htm">QPixmap</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>player.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>::Player<a href="CppState.htm">State</a>(Player&amp; player)<br/>
&nbsp;&nbsp;: m_player(player),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_walk_speed(7.5),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_jump_up_speed(10.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_gravity(1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ddx(0.25)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>::GetHeight() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_sprite);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_sprite-&gt;height();<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>::GetWidth() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_sprite);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_sprite-&gt;width();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::PlayerJump::PlayerJump(Player&amp; player)<br/>
&nbsp;&nbsp;: Player<a href="CppState.htm">State</a>(player),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dx(0.0), m_dy(0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_jump_left{}, <a href="CppComment.htm">//</a>(FormSprites-&gt;ImageMainCharJumpLeft),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_jump_right{} <a href="CppComment.htm">//</a>(FormSprites-&gt;ImageMainCharJumpRight),<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::PlayerJump::EndJump()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.htm">State</a>Stand(m_dx <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::PlayerLeft::PlayerLeft(Player&amp; player)<br/>
&nbsp;&nbsp;: Player<a href="CppState.htm">State</a>(player),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_walk_left_1{}, <a href="CppComment.htm">//</a>(FormSprites-&gt;ImageMainCharWalkLeft1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_walk_left_2{} <a href="CppComment.htm">//</a>(FormSprites-&gt;ImageMainCharWalkLeft2)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::PlayerLeft::PressKeyRight()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.htm">State</a>Right();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::PlayerLeft::PressKeyJump()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.htm">State</a>Jump(-m_walk_speed);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::PlayerLeft::PressNoKey()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.htm">State</a>Stand(<b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::PlayerRight::PlayerRight(Player&amp; player)<br/>
&nbsp;&nbsp;: Player<a href="CppState.htm">State</a>(player),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_walk_right_1{}, <a href="CppComment.htm">//</a>(FormSprites-&gt;ImageMainCharWalkRight1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_walk_right_2{} <a href="CppComment.htm">//</a>(FormSprites-&gt;ImageMainCharWalkRight2)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::PlayerRight::PressKeyLeft()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.htm">State</a>Left();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::PlayerRight::PressKeyJump()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.htm">State</a>Jump(m_walk_speed);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::PlayerRight::PressNoKey()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.htm">State</a>Stand(<b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::PlayerStand::PlayerStand(Player&amp; player)<br/>
&nbsp;&nbsp;: Player<a href="CppState.htm">State</a>(player),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_face_right{<b><a href="CppTrue.htm">true</a></b>},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_stand_left{}, <a href="CppComment.htm">//</a>(FormSprites-&gt;ImageMainCharStandLeft),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_stand_right{} <a href="CppComment.htm">//</a>(FormSprites-&gt;ImageMainCharStandRight)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::PlayerStand::PressKeyLeft()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.htm">State</a>Left();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::PlayerStand::PressKeyRight()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.htm">State</a>Right();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::PlayerStand::PressKeyJump()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.htm">State</a>Jump( m_face_right ? 0.0001 : <a href="CppOperatorMinus.htm">-</a>0.0001);<br/>
}<br/>
<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandplayerstates.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandplayerstates.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> ATHLETICLANDPLAYERSTATES_H<br/>
<a href="CppDefine.htm">#define</a> ATHLETICLANDPLAYERSTATES_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bimap.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>playerstate.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Player<a href="CppState.htm">State</a>s<br/>
{<br/>
&nbsp;&nbsp;Player<a href="CppState.htm">State</a>s();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player<a href="CppState.htm">State</a>&gt; GetAll() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> Player<a href="CppState.htm">State</a> s) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Player<a href="CppState.htm">State</a> ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;Player<a href="CppState.htm">State</a>,<a href="CppStdString.htm">std::string</a>&gt; m_map;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;Player<a href="CppState.htm">State</a>,<a href="CppStdString.htm">std::string</a>&gt; CreateMap();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ATHLETICLANDPLAYERSTATES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandplayerstates.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandplayerstates.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>playerstates.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>s::m_map;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>s::Player<a href="CppState.htm">State</a>s()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>s::CreateMap()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostBimap.htm">boost::bimap</a>&lt;Player<a href="CppState.htm">State</a>,<a href="CppStdString.htm">std::string</a>&gt; m;<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;Player<a href="CppState.htm">State</a>,<a href="CppStdString.htm">std::string</a>&gt;::value_type(Player<a href="CppState.htm">State</a>::stand_left ,"stand_left"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;Player<a href="CppState.htm">State</a>,<a href="CppStdString.htm">std::string</a>&gt;::value_type(Player<a href="CppState.htm">State</a>::stand_right,"stand_right"));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>&gt; <a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>s::GetAll() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player<a href="CppState.htm">State</a>&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Player<a href="CppState.htm">State</a>::stand_left,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Player<a href="CppState.htm">State</a>::stand_right<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(Player<a href="CppState.htm">State</a>::n_types));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>s::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>s::Test");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Player<a href="CppState.htm">State</a>&gt; v <a href="CppOperatorAssign.htm">=</a> GetAll();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Player<a href="CppState.htm">State</a> t <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> ToStr(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Player<a href="CppState.htm">State</a> u <a href="CppOperatorAssign.htm">=</a> ToType(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(u <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>s::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>s::ToStr(<b><a href="CppConst.htm">const</a></b> Player<a href="CppState.htm">State</a> type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.left.empty()) m_map <a href="CppOperatorAssign.htm">=</a> CreateMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.left.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.left.count(type));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> m_map.left.find(type)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a> <a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>s::ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.right.empty()) m_map <a href="CppOperatorAssign.htm">=</a> CreateMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.right.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.right.count(s) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Player<a href="CppState.htm">State</a> t <a href="CppOperatorAssign.htm">=</a> m_map.right.find(s)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandsprite.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandsprite.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> ATHLETICLA<a href="CppNds.htm">NDS</a>PRITE_H<br/>
<a href="CppDefine.htm">#define</a> ATHLETICLA<a href="CppNds.htm">NDS</a>PRITE_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>fwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Sprite<br/>
{<br/>
&nbsp;&nbsp;Sprite(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
&nbsp;&nbsp;Sprite(<b><a href="CppConst.htm">const</a></b> Sprite&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Sprite&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Sprite&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Sprite() {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Draw(<a href="CppQPixmap.htm">QPixmap</a> * <b><a href="CppConst.htm">const</a></b> canvas) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Move() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Restart() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> GetX() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> GetY() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> DoesCollide(<b><a href="CppConst.htm">const</a></b> Player&amp; p) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnCollide(Player&amp; p);<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> InSprite(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rect GetRect() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CollisionBehaviour&gt; m_collision_behaviour;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_height;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPixmap.htm">QPixmap</a>&gt; m_image;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_width;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MovingSprite : <b><a href="CppPublic.htm">public</a></b> Sprite<br/>
{<br/>
&nbsp;&nbsp;MovingSprite(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
&nbsp;&nbsp;: Sprite(filename),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_movement_pattern{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y))<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~MovingSprite() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart();<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetX() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_x; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetY() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_y; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Draw(<a href="CppQPixmap.htm">QPixmap</a> * <b><a href="CppConst.htm">const</a></b> canvas) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move();<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ComplexMovePattern&gt; m_movement_pattern;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_x;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_y;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> NonMovingSprite : <b><a href="CppPublic.htm">public</a></b> Sprite<br/>
{<br/>
&nbsp;&nbsp;NonMovingSprite(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: Sprite(filename),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_x(x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_y(y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;~NonMovingSprite() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart() {}<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetX() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_x); }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetY() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_y); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_x;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_y;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Draw(<a href="CppQPixmap.htm">QPixmap</a> * <b><a href="CppConst.htm">const</a></b> canvas) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move() {}<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> RockSprite : <b><a href="CppPublic.htm">public</a></b> NonMovingSprite<br/>
{<br/>
&nbsp;&nbsp;RockSprite(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> RollingBallSprite : <b><a href="CppPublic.htm">public</a></b> MovingSprite<br/>
{<br/>
&nbsp;&nbsp;RollingBallSprite(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_dx;<br/>
};<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Sprite&gt; CreateRollingBallSprite(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> speed);<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/athleticlandsprite.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/athleticlandsprite.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>sprite.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPixmap.htm">QPixmap</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>collisionbehaviour.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameAthleticLand.htm">athleticland</a>resources.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>movementpattern.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>player.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRibi.htm">ribi</a>::athl::Sprite::Sprite(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
&nbsp;&nbsp;: m_collision_behaviour{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_height{}, <a href="CppComment.htm">//</a>(image-&gt;Picture-&gt;Bitmap-&gt;Height)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_image(<b><a href="CppNew.htm">new</a></b> <a href="CppQPixmap.htm">QPixmap</a>(filename.c_str())),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_width{} <a href="CppComment.htm">//</a>(image-&gt;Picture-&gt;Bitmap-&gt;Width),<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_image);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_width <a href="CppOperatorEqual.htm">==</a> m_image-&gt;Picture-&gt;Bitmap-&gt;Width);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_height <a href="CppOperatorEqual.htm">==</a> m_image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::athl::Sprite::DoesCollide(<b><a href="CppConst.htm">const</a></b> Player&amp; p) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is one of the sprites' corners in Player?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> s_x1&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetX());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> s_x2 <a href="CppOperatorAssign.htm">=</a> s_x1 <a href="CppOperatorPlus.htm">+</a> m_width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> s_y1 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetY());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> s_y2 <a href="CppOperatorAssign.htm">=</a> s_y1 <a href="CppOperatorPlus.htm">+</a> m_height;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> p_x1 <a href="CppOperatorAssign.htm">=</a> p.GetX();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> p_y1 <a href="CppOperatorAssign.htm">=</a> p.GetY();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> p_x2 <a href="CppOperatorAssign.htm">=</a> p_x1 <a href="CppOperatorPlus.htm">+</a> p.GetWidth();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> p_y2 <a href="CppOperatorAssign.htm">=</a> p_y1 <a href="CppOperatorPlus.htm">+</a> p.GetHeight();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is top-left pixel of sprite in player?<br/>
&nbsp;&nbsp;&nbsp;&nbsp; ( (s_x1 &gt; p_x1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_x1 &lt; p_x2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_y1 &gt; p_y1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_y1 &lt; p_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is top-right pixel of sprite in player?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (s_x2 &gt; p_x1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_x2 &lt; p_x2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_y1 &gt; p_y1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_y1 &lt; p_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is bottom-left pixel of sprite in player?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (s_x1 &gt; p_x1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_x1 &lt; p_x2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_y2 &gt; p_y1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_y2 &lt; p_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is bottom-right pixel of sprite in player?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (s_x2 &gt; p_x1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_x2 &lt; p_x2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_y2 &gt; p_y1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_y2 &lt; p_y2) );<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::Sprite::OnCollide(Player&amp; p)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_collision_behaviour) m_collision_behaviour-&gt;OnCollision(p);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Rect <a href="CppRibi.htm">ribi</a>::athl::Sprite::GetRect() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetX());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetY());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2 <a href="CppOperatorAssign.htm">=</a> x1 <a href="CppOperatorPlus.htm">+</a> m_width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y2 <a href="CppOperatorAssign.htm">=</a> y1 <a href="CppOperatorPlus.htm">+</a> m_height;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::Rect(x1,y1,x2,y2);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::MovingSprite::Draw(<a href="CppQPixmap.htm">QPixmap</a> * <b><a href="CppConst.htm">const</a></b> canvas) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_x);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_y);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>canvas-&gt;Draw(x,y,m_image-&gt;Picture-&gt;Graphic);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::MovingSprite::Move()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_movement_pattern);<br/>
&nbsp;&nbsp;m_movement_pattern-&gt;Move();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::MovingSprite::Restart()<br/>
{<br/>
&nbsp;&nbsp;m_movement_pattern-&gt;Restart();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::NonMovingSprite::Draw(<a href="CppQPixmap.htm">QPixmap</a> * <b><a href="CppConst.htm">const</a></b> canvas) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>canvas-&gt;Draw(m_x,m_y,m_image-&gt;Picture-&gt;Graphic);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::RockSprite::RockSprite(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
&nbsp;&nbsp;: NonMovingSprite(x,y,"")<br/>
{<br/>
&nbsp;&nbsp;m_collision_behaviour.reset(<b><a href="CppNew.htm">new</a></b> LethalCollision);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::RollingBallSprite::RollingBallSprite(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx)<br/>
&nbsp;&nbsp;: MovingSprite(x,y,""),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dx(dx)<br/>
{<br/>
&nbsp;&nbsp;m_movement_pattern.reset(<b><a href="CppNew.htm">new</a></b> ComplexMovePattern);<br/>
&nbsp;&nbsp;m_collision_behaviour.reset(<b><a href="CppNew.htm">new</a></b> LethalCollision);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dist_x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_width <a href="CppOperatorPlus.htm">+</a> x;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(dist_x) <a href="CppOperatorDivide.htm">/</a> <a href="CppStdFabs.htm">std::fabs</a>(dx) );<br/>
<br/>
&nbsp;&nbsp;m_movement_pattern-&gt;<a href="CppAdd.htm">Add</a>StraightLineMovement(m_x,m_y,cnt,dx,0.0);<br/>
&nbsp;&nbsp;m_movement_pattern-&gt;<a href="CppAdd.htm">Add</a>TeleportMovement(m_x,m_y,x,y);<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/qtathleticlandmaindialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/qtathleticlandmaindialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTATHLETICLANDMAINDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTATHLETICLANDMAINDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQGraphicsScene.htm">QGraphicsScene</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQGraphicsPixmapItem.htm">QGraphicsPixmapItem</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>AthleticLandMainDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>AthleticLandMain<a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>AthleticLandMainDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>AthleticLandMainDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>AthleticLandMainDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>AthleticLandMainDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>AthleticLandMainDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>AthleticLandMainDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>AthleticLandMainDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>AthleticLandMainDialog *ui;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>AthleticLandMain<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_main_<a href="CppWidget.htm">widget</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> aaf<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTATHLETICLANDMAINDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/qtathleticlandmaindialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/qtathleticlandmaindialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameAthleticLand.htm">athleticland</a>maindialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QGridLayout&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameAthleticLand.htm">athleticland</a><a href="CppMain.htm">main</a><a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="GameAthleticLand.htm">athleticland</a>maindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMainDialog::<a href="CppQt.htm">Qt</a>AthleticLandMainDialog(<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>AthleticLandMainDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_main_<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>AthleticLandMain<a href="CppWidget.htm">Widget</a>}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<b><a href="CppThis.htm">this</a></b>-&gt;layout());<br/>
&nbsp;&nbsp;<a href="CppQLayout.htm">QLayout</a> * <b><a href="CppConst.htm">const</a></b> layout { <b><a href="CppNew.htm">new</a></b> QGridLayout };<br/>
&nbsp;&nbsp;layout-&gt;setMargin(0);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setLayout(layout);<br/>
<br/>
&nbsp;&nbsp;layout-&gt;addWidget(m_main_<a href="CppWidget.htm">widget</a>);<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMainDialog::~<a href="CppQt.htm">Qt</a>AthleticLandMainDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMainDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Left:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_main_<a href="CppWidget.htm">widget</a>-&gt;OnKeyPress(<a href="CppQt.htm">Qt</a>AthleticLandMain<a href="CppWidget.htm">Widget</a>::Key::left);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Right:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_main_<a href="CppWidget.htm">widget</a>-&gt;OnKeyPress(<a href="CppQt.htm">Qt</a>AthleticLandMain<a href="CppWidget.htm">Widget</a>::Key::right);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMainDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMainDialog::Test");<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>AthleticLandMain<a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMainDialog::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/qtathleticlandmainwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/qtathleticlandmainwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTATHLETICLANDMAINWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTATHLETICLANDMAINWIDGET_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>fwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>AthleticLandMain<a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEnumClass.htm">enum class</a></b> Key { left, right, jump };<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>AthleticLandMain<a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnKeyPress(<b><a href="CppConst.htm">const</a></b> Key key);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paintEvent(<a href="CppQPaintEvent.htm">QPaintEvent</a> *);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> resizeEvent(<a href="CppQResizeEvent.htm">QResizeEvent</a> *);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Player&gt; m_player;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTATHLETICLANDMAINWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/qtathleticlandmainwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/qtathleticlandmainwidget.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameAthleticLand.htm">athleticland</a><a href="CppMain.htm">main</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPaintEvent.htm">QPaintEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>player.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameAthleticLand.htm">athleticland</a>resources.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMain<a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>AthleticLandMain<a href="CppWidget.htm">Widget</a>()<br/>
&nbsp;&nbsp;: m_player(<b><a href="CppNew.htm">new</a></b> Player)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMain<a href="CppWidget.htm">Widget</a>::OnKeyPress(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMain<a href="CppWidget.htm">Widget</a>::Key key)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (key <a href="CppOperatorEqual.htm">==</a> Key::left)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_player-&gt;PressKeyLeft();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (key <a href="CppOperatorEqual.htm">==</a> Key::right)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_player-&gt;PressKeyRight();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;repaint();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMain<a href="CppWidget.htm">Widget</a>::paintEvent(<a href="CppQPaintEvent.htm">QPaintEvent</a> *)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPainter.htm">QPainter</a> p(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>AthleticLandResources resources;<br/>
&nbsp;&nbsp;p.drawPixmap(0,0,<b><a href="CppThis.htm">this</a></b>-&gt;width(),<b><a href="CppThis.htm">this</a></b>-&gt;height(),resources.GetBackground());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Background size (width x height) is 512x300 pixels per <b><a href="CppDefault.htm">default</a></b><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> scale_x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;width())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(resources.GetBackground().width());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> scale_y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;height())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(resources.GetBackground().height());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Player<a href="CppState.htm">State</a> state <a href="CppOperatorAssign.htm">=</a> m_player-&gt;Get<a href="CppState.htm">State</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> player_y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;height()) * m_player-&gt;GetY();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> player_x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;width()) * m_player-&gt;GetX();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> player_height<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(resources.GetPlayer(state).height()) * scale_x;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> player_width<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(resources.GetPlayer(state).width()) * scale_y;<br/>
<br/>
&nbsp;&nbsp;p.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;player_x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;player_y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;player_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;player_height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;resources.GetPlayer(m_player-&gt;Get<a href="CppState.htm">State</a>())<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/qtathleticlandmenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/qtathleticlandmenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTATHLETICLANDMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTATHLETICLANDMENUDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>AthleticLandMenuDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>AthleticLandMenuDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>AthleticLandMenuDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>AthleticLandMenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>AthleticLandMenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_about_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_quit_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTATHLETICLANDMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/qtathleticlandmenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/qtathleticlandmenudialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameAthleticLand.htm">athleticland</a>menudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>menudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameAthleticLand.htm">athleticland</a>maindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="GameAthleticLand.htm">athleticland</a>menudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog::<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog::~<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog::on_button_start_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>AthleticLandMainDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog::on_button_about_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtAboutDialog.htm">QtAboutDialog</a> d(AthleticLandMenuDialog().GetAbout());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog::on_button_quit_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;close();<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog::Test");<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>AthleticLandMainDialog();<br/>
&nbsp;&nbsp;AthleticLandMenuDialog();<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMenuDialog::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/qtathleticlandresources.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/qtathleticlandresources.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTATHLETICLAND<a href="CppQmakeResources.htm">RESOURCES</a>_H<br/>
<a href="CppDefine.htm">#define</a> QTATHLETICLAND<a href="CppQmakeResources.htm">RESOURCES</a>_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPixmap.htm">QPixmap</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>playerstate.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> athl {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>AthleticLandResources<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>AthleticLandResources();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a>&amp; GetBackground() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_background; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a>&amp; GetPlayer(<b><a href="CppConst.htm">const</a></b> Player<a href="CppState.htm">State</a> state) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a> m_background;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;Player<a href="CppState.htm">State</a>,<a href="CppQPixmap.htm">QPixmap</a>&gt; m_player;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;Player<a href="CppState.htm">State</a>,<a href="CppQPixmap.htm">QPixmap</a>&gt; CreatePlayer() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; GetAllFilenames() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Tries to obtain a pixmap from the resources from a filename<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example, when called with 'PlayerStandLeft.png',<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/it might <b><a href="CppTry.htm">try</a></b> to load ':/AthleticLand/images/PlayerStandLeft.png'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/and create a <a href="CppQPixmap.htm">QPixmap</a> from it.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will terminate <b><a href="CppIf.htm">if</a></b> pixmap is not found<br/>
&nbsp;&nbsp;<a href="CppQPixmap.htm">QPixmap</a> FetchPixmap(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetBackgroundFilename() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "Background1.png"; }<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetPlayerStandLeftFilename() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "MainCharStandLeft.png"; }<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetPlayerStandRightFilename() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "MainCharStandRight.png"; }<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppQt.htm">Qt</a>ResourcesBasename() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> ":/<a href="GameAthleticLand.htm">GameAthleticLand</a>/images"; }<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> athl<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTATHLETICLAND<a href="CppQmakeResources.htm">RESOURCES</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/qtathleticlandresources.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/qtathleticlandresources.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qt<a href="GameAthleticLand.htm">athleticland</a>resources.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameAthleticLand.htm">athleticland</a>playerstates.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandResources::<a href="CppQt.htm">Qt</a>AthleticLandResources()<br/>
&nbsp;&nbsp;: m_background(<a href="CppQPixmap.htm">QPixmap</a>(GetBackgroundFilename().c_str())),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_player{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No need to check <b><a href="CppFor.htm">for</a></b> member variables, as all pixmaps are checked here<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename: GetAllFilenames())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> qtfilename {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppQt.htm">Qt</a>ResourcesBasename()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "/"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(qtfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> file(qtfilename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.copy(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>,<a href="CppQPixmap.htm">QPixmap</a>&gt; <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandResources::CreatePlayer() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;Player<a href="CppState.htm">State</a>,<a href="CppQPixmap.htm">QPixmap</a>&gt; m;<br/>
<br/>
&nbsp;&nbsp;m.insert(<a href="CppStdMake_pair.htm">std::make_pair</a>(<a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>::stand_left,FetchPixmap(GetPlayerStandLeftFilename())));<br/>
&nbsp;&nbsp;m.insert(<a href="CppStdMake_pair.htm">std::make_pair</a>(<a href="CppRibi.htm">ribi</a>::athl::Player<a href="CppState.htm">State</a>::stand_right,FetchPixmap(GetPlayerStandRightFilename())));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<a href="CppQPixmap.htm">QPixmap</a> <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandResources::FetchPixmap(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> qtfilename <a href="CppOperatorAssign.htm">=</a> Get<a href="CppQt.htm">Qt</a>ResourcesBasename() <a href="CppOperatorPlus.htm">+</a> "/" <a href="CppOperatorPlus.htm">+</a> filename;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a> pixmap(qtfilename.c_str());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pixmap.height() &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pixmap.width() &gt; 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pixmap;<br/>
<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandResources::GetAllFilenames() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetBackgroundFilename(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetPlayerStandLeftFilename(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetPlayerStandRightFilename()<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a>&amp; <a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandResources::GetPlayer(<b><a href="CppConst.htm">const</a></b> Player<a href="CppState.htm">State</a> state) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(m_player.find(state) <a href="CppOperatorEqual.htm">==</a> m_player.end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Player<a href="CppState.htm">State</a>s().ToStr(state));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_player.find(state) <a href="CppOperatorNotEqual.htm">!=</a> m_player.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (*m_player.find(state)).second;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameAthleticLand/qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameAthleticLand/qtmain.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameAthleticLand.htm">athleticland</a>maindialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::athl::<a href="CppQt.htm">Qt</a>AthleticLandMainDialog w;<br/>
&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
