<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Create Forms Dynamically</title>
  <meta name="description" content="C++ Create Forms Dynamically"/>
  <meta name="keywords" content="C++ Builder Create Forms Dynamically"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCreateFormsDynamically.htm">Create Forms Dynamically</a></h1>
<p>&nbsp;</p>
<p>The C++ Builder (and Turbo C++) TForm class ('Form' from now on) can be created either statically or dynamically.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppCreateFormsDynamically.txt">View the code of 'Create Forms Dynamically' in plain text</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>When to consider creating Forms dynamically</h2>
<p>&nbsp;</p>
<p>Consider creating Forms dynamically when:</p>
<p>&nbsp;</p>
<ul>
  <li>you want to create multiple instances of the same Form</li>
  <li>you've added additional constructor parameters</li>
  <li>you want to have a hierarchy in your Forms</li>
  <li>you want to create Forms one by one</li>
  <li>you want to create Forms in idle time</li>
  <li>you want Forms to be created by a seperate thread</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Do's and don'ts when creating Forms dynamically</h2>
<p>&nbsp;</p>
<p>When you want to dynamically create a Form</p>
<p>&nbsp;</p>
<ul>
  <li>do make it an 'Available Form' ('Project | Options | Forms'), instead of an automatically created Form</li>
  <li>do make a Form refer to itself as 'this', instead of using, for example 'Form1'</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>How to create a Form dynamically</h2>
<p>&nbsp;</p>
<p>A Form can be created dynamically as follows:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="file7k7y5o.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>Put <b><a href="CppThis.htm">this</a></b> line among the other <a href="CppInclude.htm">#include</a>s<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>Your method<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMain::YourMethod()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TFormDynamic&gt; f(<b><a href="CppNew.htm">new</a></b> TFormDynamic(<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Sure you can use a plain <a href="CppPointer.htm">pointer</a>, but then don't forget to <a href="CppDelete.htm">delete</a> it. 
And if you don't want to forget to <a href="CppDelete.htm">delete</a> this <a href="CppPointer.htm">pointer</a> (among others), 
use a <a href="CppAuto_ptr.htm">std::auto_ptr</a>.</p>
<p>&nbsp;</p>
<p>Instead of passing '<a href="CppThis.htm">this</a>', you might sometimes consider passing '0' as an argument to the <a hred="CppConstructor.htm">constructor</a> of TFormDynamic.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Communicate with the creator of a Form</h2>
<p>&nbsp;</p>
<p>In the code snippet above, the Form called TFormDynamic is constructed using a pointer to the TFormMain Form. This enables the newly created TFormDynamic to
be potentially able to communicate with the TFormMain.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Communicate with the creator of a Form in the constructor only</h2>
<p>&nbsp;</p>
<p>The constructor of a Form takes as an argument the TComponent that has created it. Therefore, you can easily use it locally:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileIkOT4i.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>Put <b><a href="CppThis.htm">this</a></b> line among the other <a href="CppInclude.htm">#include</a>s<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
__fastcall TFormDynamic::TFormDynamic(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
: TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;TFormMain * <b><a href="CppConst.htm">const</a></b> formMain <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;TFormMain&gt;(Owner);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(formMain<a href="CppOperatorNotEqual.htm">!=</a>0); <a href="CppComment.htm">//</a>Assume cast succeeded<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use formMain<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Communicate with the creator of a Form using a member variable</h2>
<p>&nbsp;</p>
<p>You can also make the TFormMain pointer a member variable of TFormDynamic:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filel5pYqj.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>UnitFormDynamic.h<br/>
<br/>
<a href="CppComment.htm">//</a>A <a href="CppForwardDeclaration.htm">forward declaration</a><br/>
<a href="CppComment.htm">//</a>Put it after the <a href="CppInclude.htm">#include</a>s and before the next line<br/>
<b><a href="CppClass.htm">class</a></b> TFormMain;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> TFormDynamic : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published: <a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
<a href="CppComment.htm">//</a>Stuff<br/>
<b><a href="CppPrivate.htm">private</a></b>: <a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
TFormMain * <b><a href="CppConst.htm">const</a></b> mFormMain;<br/>
<b><a href="CppPublic.htm">public</a></b>: <a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
__fastcall TFormDynamic(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a>UnitFormDynamic.cpp<br/>
<br/>
<a href="CppComment.htm">//</a>Put <b><a href="CppThis.htm">this</a></b> line among the other <a href="CppInclude.htm">#include</a>s<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
__fastcall TFormDynamic::TFormDynamic(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
: TForm(Owner),<br/>
mFormMain(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;TFormMain&gt;(Owner)<br/>
{<br/>
<a href="CppAssert.htm">assert</a>(mFormMain<a href="CppOperatorNotEqual.htm">!=</a>0); <a href="CppComment.htm">//</a>Assume cast succeeded<br/>
<br/>
<a href="CppComment.htm">//</a>Use mFormMain<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
