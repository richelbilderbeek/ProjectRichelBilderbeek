<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Rampal</title>
  <meta name="description" content="C++ Rampal"/>
  <meta name="keywords" content="C++ Rampal "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ProjectRampal.htm">Rampal</a></h1>
<p>&nbsp;</p>
<h2>./ProjectRampal/301/dialogrampaltest.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectRampal/301/dialogrampaltest.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
#include &lt;fstream&gt;<br/>
#include &lt;vector&gt;<br/>
//---------------------------------------------------------------------------<br/>
#include &lt;boost/foreach.hpp&gt;<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
//---------------------------------------------------------------------------<br/>
#include &lt;QDesktopWidget&gt;<br/>
//---------------------------------------------------------------------------<br/>
#include "binarynewickvector.h"<br/>
#include "dialogrampaltest.h"<br/>
#include "newick.h"<br/>
#include "ui_dialogrampaltest.h"<br/>
#include "test.h"<br/>
//---------------------------------------------------------------------------<br/>
DialogRampalTest::DialogRampalTest(QWidget *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QDialog(parent,Qt::Window),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(new Ui::DialogRampalTest),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_valid_input(false)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(this);<br/>
&nbsp;&nbsp;QObject::connect(ui-&gt;button_start,SIGNAL(clicked()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this,SLOT(onStart()));<br/>
&nbsp;&nbsp;QObject::connect(ui-&gt;button_benchmark,SIGNAL(clicked()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this,SLOT(onBenchmark()));<br/>
&nbsp;&nbsp;QObject::connect(ui-&gt;edit_newick,SIGNAL(textChanged(QString)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this,SLOT(onAnyChange()));<br/>
&nbsp;&nbsp;QObject::connect(ui-&gt;edit_theta,SIGNAL(textChanged(QString)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this,SLOT(onAnyChange()));<br/>
<br/>
&nbsp;&nbsp;//Set table header<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QTableWidgetItem * const i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= new QTableWidgetItem("Test name");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setHorizontalHeaderItem(0,i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QTableWidgetItem * const i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= new QTableWidgetItem("Probability");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setHorizontalHeaderItem(1,i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QTableWidgetItem * const i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= new QTableWidgetItem("Time (sec)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setHorizontalHeaderItem(2,i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QTableWidgetItem * const i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= new QTableWidgetItem("Newick");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setHorizontalHeaderItem(3,i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QTableWidgetItem * const i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= new QTableWidgetItem("Complexity");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setHorizontalHeaderItem(4,i);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;//Put the dialog in the screen center<br/>
&nbsp;&nbsp;const QRect screen = QApplication::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;this-&gt;move( screen.center() - this-&gt;rect().center() );<br/>
<br/>
&nbsp;&nbsp;onAnyChange();<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
DialogRampalTest::~DialogRampalTest()<br/>
{<br/>
&nbsp;&nbsp;delete ui;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
void DialogRampalTest::changeEvent(QEvent *e)<br/>
{<br/>
&nbsp;&nbsp;QDialog::changeEvent(e);<br/>
&nbsp;&nbsp;switch (e-&gt;type()) {<br/>
&nbsp;&nbsp;case QEvent::LanguageChange:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;retranslateUi(this);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;default:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
void DialogRampalTest::resizeEvent(QResizeEvent *)<br/>
{<br/>
&nbsp;&nbsp;const int n_cols = ui-&gt;table-&gt;columnCount();<br/>
&nbsp;&nbsp;//-18 because of header column<br/>
&nbsp;&nbsp;const int width = (ui-&gt;table-&gt;width() - 18) / n_cols;<br/>
&nbsp;&nbsp;for (int i=0; i!=n_cols; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setColumnWidth(i,width);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
void DialogRampalTest::onAnyChange()<br/>
{<br/>
&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = ui-&gt;edit_newick-&gt;text().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BinaryNewickVector n(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;catch (std::exception&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_input_feedback-&gt;setText("Invalid Newick");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_valid_input = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = ui-&gt;edit_theta-&gt;text().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double t = boost::lexical_cast&lt;double&gt;(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (t &lt;= 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_input_feedback-&gt;setText("Invalid theta");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;catch(boost::bad_lexical_cast&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_input_feedback-&gt;setText("Invalid theta");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_valid_input = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Calculate complexity<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = ui-&gt;edit_newick-&gt;text().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const BinaryNewickVector n(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const BigInteger complexity = Newick::CalcComplexity(n.Get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string c_str = bigIntegerToString(complexity);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_input_feedback-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QString("Newick complexity: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ QString(c_str.c_str()) );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_valid_input = true;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
void DialogRampalTest::onBenchmark()<br/>
{<br/>
&nbsp;&nbsp;//Create fresh file<br/>
&nbsp;&nbsp;std::ofstream file("test_output.txt");<br/>
&nbsp;&nbsp;file.close();<br/>
&nbsp;&nbsp;//Obtain the Newicks to be tested<br/>
&nbsp;&nbsp;assert(ui-&gt;box_benchmark_type-&gt;count()==6);<br/>
&nbsp;&nbsp;typedef const std::vector&lt;std::string&gt; (*function_pointer)();<br/>
&nbsp;&nbsp;function_pointer newick_getter = 0;<br/>
&nbsp;&nbsp;switch(ui-&gt;box_benchmark_type-&gt;currentIndex())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 0: newick_getter = GetLightNewicks; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 1: newick_getter = GetMediumNewicks; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 2: newick_getter = GetHardNewicks; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 3: newick_getter = GetManyNewicks; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 4: newick_getter = GetLightBiologicalNewicks; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 5: newick_getter = GetHardBiologicalNewicks; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; newicks = newick_getter();<br/>
&nbsp;&nbsp;const double theta = 10.0;<br/>
&nbsp;&nbsp;const int flags = GetFlags();<br/>
&nbsp;&nbsp;m_data.resize(0);<br/>
<br/>
&nbsp;&nbsp;BOOST_FOREACH(const std::string&amp; newick, newicks)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Test each Newick<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Create tests<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Test&gt; &gt; tests<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= Test::CreateTests(newick,theta,flags);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const boost::shared_ptr&lt;Test&gt; t,tests)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t-&gt;Execute();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Row d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.m_complexity = t-&gt;GetComplexity();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.m_newick = t-&gt;GetNewick();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.m_probability = t-&gt;GetProbability();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.m_test_name = t-&gt;GetTestName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.m_time = t-&gt;GetTime();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Write to file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.open("test_output.txt",std::ios::app);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; t-&gt;GetTestName() &lt;&lt; '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; t-&gt;GetProbability() &lt;&lt; '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; t-&gt;GetTime() &lt;&lt; '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; t-&gt;GetNewick() &lt;&lt; '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; theta &lt;&lt; '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; t-&gt;GetComplexity() &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_data.push_back(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;ShowData();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QApplication::processEvents();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//this-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//this-&gt;ShowData();<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
void DialogRampalTest::onStart()<br/>
{<br/>
&nbsp;&nbsp;if (!m_valid_input) return;<br/>
<br/>
&nbsp;&nbsp;std::ofstream file("test_output.txt");<br/>
&nbsp;&nbsp;const std::string s = ui-&gt;edit_newick-&gt;text().toStdString();<br/>
&nbsp;&nbsp;const double theta<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= boost::lexical_cast&lt;double&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ui-&gt;edit_theta-&gt;text().toStdString()));<br/>
&nbsp;&nbsp;//Create all tests<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Test&gt; &gt; tests<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= Test::CreateTests(s,theta,GetFlags());<br/>
&nbsp;&nbsp;//Execute all tests<br/>
&nbsp;&nbsp;m_data.resize(0);<br/>
&nbsp;&nbsp;BOOST_FOREACH(const boost::shared_ptr&lt;Test&gt; t,tests)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t-&gt;Execute();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Row d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_complexity = t-&gt;GetComplexity();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_newick = t-&gt;GetNewick();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_probability = t-&gt;GetProbability();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_test_name = t-&gt;GetTestName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.m_time = t-&gt;GetTime();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; t-&gt;GetTestName() &lt;&lt; '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; t-&gt;GetProbability() &lt;&lt; '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; t-&gt;GetTime() &lt;&lt; '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; t-&gt;GetNewick() &lt;&lt; '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; theta &lt;&lt; '\t'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; t-&gt;GetComplexity() &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_data.push_back(d);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;this-&gt;ShowData();<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
int DialogRampalTest::GetFlags() const<br/>
{<br/>
&nbsp;&nbsp;int flags = 0;<br/>
&nbsp;&nbsp;if (ui-&gt;box_ravindran-&gt;isChecked()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) flags+= 1;<br/>
&nbsp;&nbsp;if (ui-&gt;box_endversion2-&gt;isChecked()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) flags+= 2;<br/>
&nbsp;&nbsp;if (ui-&gt;box_twodigitnewick_debug-&gt;isChecked()&nbsp;&nbsp;) flags+= 4;<br/>
&nbsp;&nbsp;if (ui-&gt;box_twodigitnewick_release-&gt;isChecked()) flags+= 8;<br/>
&nbsp;&nbsp;return flags;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
int DialogRampalTest::GetNumTestsChecked() const<br/>
{<br/>
&nbsp;&nbsp;int cnt = 0;<br/>
&nbsp;&nbsp;if (ui-&gt;box_ravindran-&gt;isChecked()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) ++cnt;<br/>
&nbsp;&nbsp;if (ui-&gt;box_endversion2-&gt;isChecked()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) ++cnt;<br/>
&nbsp;&nbsp;if (ui-&gt;box_twodigitnewick_debug-&gt;isChecked()&nbsp;&nbsp;) ++cnt;<br/>
&nbsp;&nbsp;if (ui-&gt;box_twodigitnewick_release-&gt;isChecked()) ++cnt;<br/>
&nbsp;&nbsp;return cnt;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
void DialogRampalTest::ShowData()<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;table-&gt;clearContents();<br/>
&nbsp;&nbsp;ui-&gt;table-&gt;setRowCount(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric_cast&lt;int&gt;(m_data.size()));<br/>
&nbsp;&nbsp;int row = 0;<br/>
&nbsp;&nbsp;BOOST_FOREACH(const Row&amp; d, m_data)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QTableWidgetItem * const i = new QTableWidgetItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QString(d.m_test_name.c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setItem(row, 0, i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QTableWidgetItem * const i = new QTableWidgetItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QString(boost::lexical_cast&lt;std::string&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.m_probability).c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setItem(row, 1, i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QTableWidgetItem * const i = new QTableWidgetItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QString(boost::lexical_cast&lt;std::string&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.m_time).c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setItem(row, 2, i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QTableWidgetItem * const i = new QTableWidgetItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QString(boost::lexical_cast&lt;std::string&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.m_newick).c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setItem(row, 3, i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QTableWidgetItem * const i = new QTableWidgetItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QString(boost::lexical_cast&lt;std::string&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.m_complexity).c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setItem(row, 4, i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;++row;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
const std::vector&lt;std::string&gt; GetHardBiologicalNewicks()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,1),(3,1)))),1),((((1,((1,((1,1),(45,6))),(((1,1),(4,1)),2))),1),2),1)),1),2))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,2))),1),((((1,((1,(1,(35,7))),((4,4),1))),1),4),1)),1),1))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((2,1),(1,((1,1),1))),1),((((1,((1,(5,(36,10))),((2,2),1))),1),(1,5)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(2,(3,1)))),1),((((1,((1,(1,(36,10))),((5,6),1))),1),2),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,3))),1),((((1,((1,((1,1),(34,10))),((4,(4,1)),3))),1),(1,1)),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((1,1),1),(1,(2,1))),1),((((1,((1,(3,(47,14))),((6,4),(1,1)))),1),(1,1)),1)),1),2))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(3,((1,1),1)))),1),((((1,((1,(2,(45,8))),((5,2),1))),1),(2,5)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,1),((1,1),1)))),1),((((1,((1,((2,1),(35,10))),((4,(5,1)),2))),1),8),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,(1,1)))),1),((((1,((1,(2,(66,13))),((8,(5,1)),1))),1),(1,5)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(2,((1,1),1)))),1),((((1,((1,(2,(57,8))),((4,(1,2)),2))),1),6),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,3))),1),((((1,((1,(3,(41,10))),((4,(1,1)),(1,2)))),1),5),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,1),2))),1),((((1,((1,(1,(44,12))),((3,5),1))),1),(3,9)),(1,1))),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(2,(1,(4,1)))),1),((((1,((1,((1,1),(61,8))),((3,(4,1)),2))),1),(1,5)),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,((1,1),3)))),1),((((1,((1,((2,1),(39,8))),((7,3),1))),1),(2,3)),(1,1))),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,3))),1),((((1,((1,((2,2),(37,9))),(4,2))),1),(4,2)),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(1,2))),1),((((1,((1,(1,(38,12))),((4,5),2))),1),(1,3)),1)),1),2))),(3,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(2,((1,(1,1)),1)))),1),((((1,((1,(3,(53,13))),8)),1),(2,3)),2)),1),1))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(3,((1,1),2)))),1),((((1,((1,((1,1),(50,9))),((6,(2,1)),3))),1),2),1)),1),1))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,1),(2,1)))),1),((((1,((1,((2,1),(47,7))),((8,4),1))),1),(1,8)),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,(3,1)))),1),((((1,((1,(2,(26,7))),((7,3),1))),1),(3,3)),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(6,((1,3),1)))),1),((((1,((1,((2,2),(39,12))),((3,(2,1)),1))),1),3),1)),1),1))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,1),1)))),1),((((1,((1,((6,2),(47,7))),((4,(6,1)),1))),1),(1,4)),1)),1),2))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(2,(1,(2,1)))),1),((((1,((1,(2,(49,7))),((7,2),3))),1),(1,6)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,(1,1)),1)))),1),((((1,((1,((2,2),(43,12))),((5,6),(1,2)))),1),1),2)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(2,((1,3),1)))),1),((((1,((1,(1,(68,13))),((6,5),3))),1),(1,2)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((2,1),(1,((1,1),2))),1),((((1,((1,((1,2),(59,9))),((11,2),(1,1)))),1),(1,7)),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(2,((1,(2,1)),1)))),1),((((1,((1,((1,2),(42,7))),((8,4),1))),1),(2,3)),1)),1),2))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((1,3),1),(1,(1,((1,1),1)))),1),((((1,((1,((2,1),(48,14))),((4,4),4))),1),(3,1)),1)),1),1))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,(5,(36,12))),((4,4),4))),1),8),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(3,((1,(1,2)),1)))),1),((((1,((1,(3,(33,12))),((4,3),1))),1),(2,3)),(1,1))),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((3,1),((1,1),1)))),1),((((1,((1,((1,1),(49,10))),((9,4),2))),1),(1,5)),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,1),(3,1)))),1),((((1,((1,(1,(32,11))),((5,4),1))),1),(2,8)),(3,1))),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,((1,1),(3,1)))),1),((((1,((1,(1,(54,12))),((7,4),1))),1),(1,6)),2)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((2,1),1),(1,(1,((1,1),1)))),1),((((1,((1,(2,(48,11))),((5,6),2))),1),(1,4)),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((2,1),(1,((2,2),((1,1),1)))),1),((((1,((1,((2,2),(61,14))),((4,3),1))),1),(1,3)),(1,1))),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,1),((1,1),1)))),1),((((1,((1,((1,4),(59,17))),((4,(1,1)),(1,1)))),1),(2,8)),1)),1),3))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,2),((1,1),1)))),1),((((1,((1,((4,2),(45,7))),((5,4),(1,1)))),1),(2,6)),((1,1),1))),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(2,((1,1),1))),1),((((1,((1,(3,(33,10))),((6,3),(1,1)))),1),(1,5)),2)),1),2))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((2,1),1),(1,(3,(2,1)))),1),((((1,((1,((1,1),(50,7))),((6,4),2))),1),(1,4)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,((1,2),2))),1),((((1,((1,((2,2),(62,8))),((10,(2,1)),(1,1)))),1),(1,4)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((3,(2,((2,1),((1,(1,1)),1)))),1),((((1,((1,((1,2),(41,20))),((4,1),2))),1),(1,8)),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,1),1)))),1),((((1,((1,((4,1),(44,16))),((7,3),1))),1),(2,7)),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((2,1),(1,(1,((1,(1,1)),1)))),1),((((1,((1,((1,3),(57,18))),((2,(7,1)),2))),1),4),((1,1),1))),1),1))),((1,2),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((2,1),(1,(4,((1,2),1)))),1),((((1,((1,((4,1),(58,11))),((10,1),1))),1),(1,1)),1)),1),1))),((1,2),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(1,((1,(1,1)),1)))),1),((((1,((1,((1,4),(42,7))),((5,4),1))),1),5),1)),1),2))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,(1,1)),1)))),1),((((1,((1,(5,(60,14))),((4,5),(1,1)))),1),(1,4)),2)),1),1))),((1,(2,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((3,(1,(1,(2,1)))),1),((((1,((1,(1,(53,11))),((4,(2,1)),(2,1)))),1),(1,3)),2)),1),3))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(2,((1,2),1)))),1),((((1,((1,(2,(47,13))),((7,2),1))),1),(1,3)),1)),1),2))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,1),1))),1),((((1,((1,((2,1),(53,8))),((7,2),3))),1),(3,5)),2)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,(2,1)))),1),((((1,((1,((2,2),(40,7))),((4,7),2))),1),3),1)),1),2))),((1,2),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,((1,1),(2,1)))),1),((((1,((1,((1,2),(52,5))),((6,(5,2)),(1,2)))),1),(1,4)),1)),1),1))),(3,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((3,1),((1,1),1)))),1),((((1,((1,((3,1),(62,20))),((10,(1,1)),2))),1),(1,4)),1)),1),1))),((1,2),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((2,1),(1,(2,(1,1)))),1),((((1,((1,((3,2),(56,10))),((5,(5,1)),1))),1),3),(1,1))),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((2,1),1),(1,(3,((1,(3,3)),1)))),1),((((1,((1,((3,1),(48,9))),((1,(1,1)),3))),1),(1,4)),((1,2),1))),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,5))),1),((((1,((1,(1,(44,11))),((7,3),2))),1),(1,3)),(2,1))),1),2))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,2),((1,1),1)))),1),((((1,((1,((5,1),(66,13))),((8,6),2))),1),(1,2)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(4,(2,1)))),1),((((1,((1,(4,(55,7))),((8,2),(1,1)))),1),(1,3)),1)),1),2))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(1,3))),1),((((1,((1,((2,1),(55,12))),((7,3),1))),1),8),3)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,2),((1,(2,1)),1)))),1),((((1,((1,(2,(50,13))),((6,5),2))),1),(3,2)),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((4,1),((((1,((1,((1,2),(57,5))),((4,4),1))),1),(2,8)),2)),1),1))),((1,2),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(2,((1,2),1)))),1),((((1,((1,(4,(63,11))),((3,(5,1)),1))),1),(1,7)),2)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((1,1),1),(1,(2,((1,1),1)))),1),((((1,((1,((1,3),(55,13))),((5,6),1))),1),(1,7)),(2,1))),1),1))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((2,1),(1,((1,1),((1,1),1)))),1),((((1,((1,((2,3),(48,15))),((5,(1,1)),2))),1),(3,5)),((1,1),1))),1),1))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,(2,1)))),1),((((1,((1,((3,4),(49,9))),((4,4),1))),1),5),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,(4,1)))),1),((((1,((1,(3,(53,7))),((4,(4,1)),1))),1),(3,5)),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((1,1),1),(1,((1,1),(2,1)))),1),((((1,((1,(2,(75,16))),((5,6),1))),1),(1,5)),1)),1),1))),(3,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(2,(1,(1,1)))),1),((((1,((1,((1,1),(49,20))),((6,1),(1,1)))),1),4),3)),1),5))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,(2,1)))),1),((((1,((1,(4,(38,10))),((5,(3,1)),3))),1),7),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,(1,1)),1)))),1),((((1,((1,((2,3),(38,9))),((10,8),2))),1),5),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,((1,1),(1,1)))),1),((((1,((1,((1,2),(72,10))),((5,6),3))),1),(1,5)),(1,1))),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,((1,1),((1,(2,1)),1)))),1),((((1,((1,((3,1),(41,11))),((6,(6,2)),2))),1),(2,2)),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(1,(1,2)))),1),((((1,((1,(2,(35,15))),((7,5),1))),1),(1,5)),1)),1),2))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,((1,1),(1,1)))),1),((((1,((1,((5,2),(59,15))),((7,4),1))),1),(1,5)),1)),1),2))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((2,1),(1,(2,(1,1)))),1),((((1,((1,(1,(52,18))),((4,5),2))),1),(1,5)),1)),1),1))),((1,2),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(1,(2,1)))),1),((((1,((1,((1,3),(52,15))),((3,2),(2,1)))),1),(2,4)),1)),1),2))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(2,((1,1),((1,(2,1)),1)))),1),((((1,((1,((4,1),(42,11))),((7,3),2))),1),4),2)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(4,((1,(1,1)),1)))),1),((((1,((1,(2,(58,13))),((8,3),1))),1),(1,8)),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((1,1),1),(1,(1,((1,2),1)))),1),((((1,((1,((1,3),(44,12))),((3,(3,2)),2))),1),4),2)),1),1))),(3,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,2),(1,((1,1),3))),1),((((1,((1,((3,1),(39,9))),((4,(5,1)),1))),1),(3,5)),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,((1,1),(3,1)))),1),((((1,((1,((1,1),(59,16))),((9,2),2))),1),(1,5)),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,2))),1),((((1,((1,(1,(44,5))),((8,3),2))),1),(3,3)),3)),1),2))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((2,1),(1,(2,((1,4),1)))),1),((((1,((1,(3,(48,14))),((12,(1,1)),(1,1)))),1),1),2)),1),2))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(2,((1,(1,2)),1)))),1),((((1,((1,((2,1),(55,7))),((3,3),2))),1),(2,9)),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,5),1)))),1),((((1,((1,((1,3),(41,12))),((3,3),4))),1),(1,4)),1)),1),1))),(3,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((3,1),(1,((1,1),((1,(1,1)),1)))),1),((((1,((1,(1,(78,19))),((4,(10,1)),2))),1),(1,7)),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(2,(1,((1,2),1)))),1),((((1,((1,(1,(37,14))),((3,(3,1)),(1,3)))),1),(1,6)),2)),1),4))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(2,((1,2),1)))),1),((((1,((1,((3,1),(54,7))),((4,2),(1,3)))),1),(1,6)),1)),1),2))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,2))),1),((((1,((1,(3,(53,9))),((7,(6,1)),(1,1)))),1),(3,4)),1)),1),1))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(2,(2,1)))),1),((((1,((1,(1,(71,12))),((10,(3,1)),2))),1),(2,4)),1)),1),2))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((1,1),1),(1,(1,((1,1),1)))),1),((((1,((1,(2,(55,8))),((6,7),2))),1),(5,5)),1)),1),1))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,1),((1,(1,2)),1)))),1),((((1,((1,((2,3),(43,12))),((1,7),1))),1),(2,6)),(1,1))),1),2))),((1,2),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,5),1)))),1),((((1,((1,((4,2),(44,6))),((4,(3,1)),2))),1),(2,2)),1)),1),1))),(3,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(2,(1,((1,1),1)))),1),((((1,((1,(5,(41,7))),((5,7),1))),1),(3,11)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((2,1),(1,(1,((1,(2,1)),1)))),1),((((1,((1,((1,3),(65,16))),((9,(5,1)),(1,1)))),1),(1,4)),(1,1))),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(1,((1,3),1)))),1),((((1,((1,((1,1),(67,5))),((5,7),1))),1),(3,4)),1)),1),3))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,4))),1),((((1,((1,((4,1),(48,16))),((3,6),1))),1),(1,3)),1)),1),3))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,2),(3,(1,((1,2),1)))),1),((((1,((1,((3,1),(57,10))),((3,3),3))),1),(1,3)),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((1,1),1),(1,((2,3),(2,1)))),1),((((1,((1,(2,(46,9))),((4,(2,2)),(1,1)))),1),(2,9)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(2,((1,1),3))),1),((((1,((1,((1,1),(46,5))),((9,3),(2,1)))),1),(2,9)),1)),1),1))),((1,2),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((3,1),(1,((1,1),((1,(2,1)),1)))),1),((((1,((1,((3,2),(68,16))),((5,2),(1,1)))),1),7),1)),1),1))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
const std::vector&lt;std::string&gt; GetHardNewicks()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("((4,4),4)");<br/>
&nbsp;&nbsp;v.push_back("(((4,4),4),4)");<br/>
&nbsp;&nbsp;v.push_back("((((4,4),4),4),4)");<br/>
&nbsp;&nbsp;v.push_back("(((((4,4),4),4),4),4)");<br/>
&nbsp;&nbsp;v.push_back("((((((4,4),4),4),4),4),4)");<br/>
&nbsp;&nbsp;v.push_back("(((((((4,4),4),4),4),4),4),4)");<br/>
&nbsp;&nbsp;v.push_back("((((((((4,4),4),4),4),4),4),4),4)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((4,4),4),4),4),4),4),4),4),4)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((4,4),4),4),4),4),4),4),4),4),4)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((4,4),4),4),4),4),4),4),4),4),4),4)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((((4,4),4),4),4),4),4),4),4),4),4),4),4)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((((4,4),4),4),4),4),4),4),4),4),4),4),4),4)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((((((4,4),4),4),4),4),4),4),4),4),4),4),4),4),4)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((((((4,4),4),4),4),4),4),4),4),4),4),4),4),4),4),4)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((((((((4,4),4),4),4),4),4),4),4),4),4),4),4),3),3),3),3)");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
const std::vector&lt;std::string&gt; GetLightBiologicalNewicks()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,1)),1),((((1,((1,(1,(10,3))),((3,2),1))),1),2),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,1))),1),((((1,((1,(1,(18,3))),((1,(2,2)),2))),1),1),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,(1,4)),1)))),1),((((1,((1,(2,(11,5))),((1,1),1))),1),2),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,1),1)))),1),((((1,((1,((1,1),(12,6))),(4,1))),1),(1,2)),2)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((2,1),(1,1)))),1),((((1,((1,(2,(32,6))),((1,2),(1,1)))),1),(1,1)),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,2),1),((((1,((1,((1,1),(17,3))),(4,1))),1),7),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(1,2))),1),((((1,((1,(1,(29,3))),((5,1),1))),1),(2,1)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,1)),1),((((1,((1,((1,1),(30,7))),((6,(1,1)),(1,2)))),1),(1,1)),(1,1))),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,(2,(19,3))),(4,1))),1),3),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,(1,1)))),1),((((1,((1,((1,1),(18,4))),((2,2),1))),1),7),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,2))),1),((((1,((1,(1,(11,7))),((4,(2,1)),1))),1),3),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,((1,2),1))),1),((((1,((1,(2,(22,4))),((1,2),(1,1)))),1),(1,1)),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((2,1),((((1,((1,(1,(16,9))),((2,4),1))),1),2),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(1,(1,1)))),1),((((1,((1,(3,(37,12))),((2,1),1))),1),(1,1)),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,(1,1)))),1),((((1,((1,((1,1),(19,3))),((3,1),1))),1),(3,3)),(1,1))),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((1,1),1),(1,(1,((1,1),1)))),1),((((1,((1,(1,(27,5))),((4,2),1))),1),3),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,2))),1),((((1,((1,(2,(37,5))),((2,(2,1)),1))),1),(1,1)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,1),2)))),1),((((1,((1,(1,(23,8))),((3,3),1))),1),(1,2)),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,(1,2)))),1),((((1,((1,((1,1),(26,4))),((2,3),1))),1),3),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(1,((1,(2,1)),1)))),1),((((1,((1,(1,(13,7))),((2,3),3))),1),(1,2)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,((1,1),1)))),1),((((1,((1,(2,(28,5))),((2,1),2))),1),1),2)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(2,((1,1),2))),1),((((1,((1,(1,(23,7))),((3,2),1))),1),(1,1)),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,((1,(1,1)),1)))),1),((((1,((1,((1,1),(35,7))),((5,1),1))),1),2),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,((2,1),(24,4))),((3,3),1))),1),3),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,(3,1)))),1),((((1,((1,(1,(34,7))),(1,2))),1),7),(1,1))),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,(1,1)))),1),((((1,((1,(2,(26,8))),((4,3),1))),1),1),1)),2),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,2))),1),((((1,((1,(2,(31,7))),((3,2),1))),1),2),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,(1,(29,9))),((3,(1,1)),1))),1),(1,3)),2)),1),2))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(2,2))),1),((((1,((1,(1,(13,7))),((3,1),2))),1),1),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,((1,1),1)))),1),((((1,((1,(1,(35,11))),((3,(1,1)),1))),1),(1,2)),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,2)),1),((((1,((1,(1,(32,10))),((3,3),1))),1),1),1)),1),1))),((1,2),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,2),1)))),1),((((1,((1,(1,(31,9))),((1,3),1))),1),3),2)),1),1))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,2),1)))),1),((((1,((1,(1,(27,3))),((3,3),1))),1),(1,2)),(1,1))),1),2))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,(2,1)))),1),((((1,((1,(2,(23,4))),((3,2),1))),1),3),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,(1,1)))),1),((((1,((1,(2,(16,3))),((2,2),(1,1)))),1),(2,3)),3)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,2))),1),((((1,((1,(1,(19,7))),((2,2),2))),1),(1,1)),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,(1,1)),1)))),1),((((1,((1,((1,1),(32,5))),((3,6),(1,1)))),1),2),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,1),((1,(1,1)),1)))),1),((((1,((1,(1,(32,13))),((1,(2,2)),1))),1),(3,2)),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(2,1))),1),((((1,((1,(1,(23,4))),((3,4),2))),1),2),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((1,1),1),(1,(2,1))),1),((((1,((1,((4,2),(25,2))),((2,1),2))),1),(1,3)),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,1),((1,1),1)))),1),((((1,((1,((4,1),(30,9))),((4,3),1))),1),1),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,2))),1),((((1,((1,(2,19)),((5,2),2))),1),4),(1,1))),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((2,1),(1,(1,(2,1)))),1),((((1,((1,(4,(44,6))),((1,(1,1)),3))),1),(1,1)),(1,1))),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,((1,1),((1,(1,1)),1)))),1),((((1,((1,(1,(31,8))),((6,1),1))),1),1),2)),1),2))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,3))),1),((((1,((1,(2,(23,6))),(4,1))),1),2),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,(1,1)),2)))),1),((((1,((1,(1,(27,8))),(4,2))),1),5),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((1,2),1),(1,3)),1),((((1,((1,(2,(23,9))),((4,1),1))),1),(1,2)),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,((1,1),(2,1)))),1),((((1,((1,(2,(40,10))),((2,4),1))),1),1),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,(1,1)))),1),((((1,((1,((2,2),(35,8))),((2,2),1))),1),(1,4)),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,2),1)))),1),((((1,((1,((1,2),(27,7))),((2,2),2))),1),(1,1)),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(1,((1,2),1)))),1),((((1,((1,((2,1),(33,5))),((1,(2,1)),1))),1),(2,6)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,((1,1),((1,1),1)))),1),((((1,((1,(1,(38,4))),((2,3),(1,3)))),1),(1,3)),(1,1))),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,2),((1,1),1)))),1),((((1,((1,(2,(22,4))),((2,(3,1)),3))),1),(1,3)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,3))),1),((((1,((1,(2,(21,2))),((4,2),2))),1),3),2)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((2,2),(1,1)))),1),((((1,((1,(1,(36,8))),((2,2),1))),1),2),2)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(2,((1,2),1)))),1),((((1,((1,(1,(25,9))),((4,1),1))),1),(1,6)),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,(1,1)),1)))),1),((((1,((1,((1,1),(22,9))),((5,3),1))),1),5),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((3,3),1),((((1,((1,(1,(21,8))),((3,1),3))),1),(1,1)),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,((1,4),1)))),1),((((1,((1,(4,(28,10))),((1,1),1))),1),(1,1)),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,((1,(1,1)),1)))),1),((((1,((1,((2,1),(46,3))),((1,4),1))),1),(1,4)),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(3,(2,1)))),1),((((1,((1,(2,(35,11))),1)),1),(1,2)),(3,1))),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((3,(1,(1,((1,1),1)))),1),((((1,((1,(2,(25,4))),((2,1),(2,1)))),1),5),1)),1),2))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,1),1)))),1),((((1,((1,(3,(42,6))),((3,3),1))),1),3),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,((1,1),(37,5))),((7,2),1))),1),(1,3)),(3,1))),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(1,1))),1),((((1,((1,(3,(20,7))),((3,2),1))),1),2),2)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((2,1),2))),1),((((1,((1,((3,1),(18,6))),((4,1),2))),1),(2,1)),(1,1))),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,2),((1,1),1)))),1),((((1,((1,((1,4),(30,6))),((3,1),1))),1),(1,5)),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,1),((1,(1,1)),1)))),1),((((1,((1,(2,(26,7))),((5,2),1))),1),7),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(1,((1,2),1)))),1),((((1,((1,((2,1),(31,9))),((2,1),1))),1),(1,2)),2)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,(1,(33,9))),((7,2),2))),1),2),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,(1,1)))),1),((((1,((1,(1,(40,12))),((4,1),1))),1),3),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,((1,1),1))),1),((((1,((1,(1,(29,8))),((6,3),1))),1),4),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(2,((((((2,1),(1,((1,1),((1,(1,1)),1)))),1),((((1,((1,((1,1),(34,6))),((3,(1,1)),(1,1)))),1),3),3)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,4),1)))),1),((((1,((1,((1,1),(44,10))),((1,3),1))),1),5),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,1),1))),1),((((1,((1,((3,1),(44,5))),((2,(3,1)),(3,1)))),1),2),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,2))),1),((((1,((1,(1,(34,7))),((4,(1,3)),1))),1),2),1)),1),2))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,2),1)))),1),((((1,((1,(2,(15,5))),((4,3),2))),1),3),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(1,2))),1),((((1,((1,(1,(16,4))),((1,(4,1)),(2,2)))),1),5),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((3,1),(1,(1,(3,1)))),1),((((1,((1,(2,(26,5))),((2,2),1))),1),(1,3)),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((1,1),((1,(1,2)),1)))),1),((((1,((1,(1,(42,9))),((3,2),3))),1),(1,2)),(1,1))),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((2,1),(1,(1,((1,(1,1)),1)))),1),((((1,((1,((1,2),(15,5))),((5,3),(1,1)))),1),(1,3)),1)),1),1))),((1,2),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,(4,1)))),1),((((1,((1,(3,(28,5))),((1,(3,1)),1))),1),2),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((2,2),(1,2)))),1),((((1,((1,(1,(29,6))),((4,3),1))),1),1),1)),1),1))),((1,(1,1)),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(2,2))),1),((((1,((1,(3,(20,5))),(4,1))),1),(3,1)),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((2,2),4))),1),((((1,((1,((1,1),(36,9))),((1,(1,1)),1))),1),3),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,1))),1),((((1,((1,((1,1),(33,13))),((5,4),1))),1),2),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,(1,1)))),1),((((1,((1,((2,1),(47,10))),((3,(1,1)),1))),1),(1,5)),2)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,2)),1),((((1,((1,((2,1),(13,3))),((5,2),(1,2)))),1),3),2)),1),2))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((2,(1,(1,((1,2),1)))),1),((((1,((1,(1,(30,7))),((3,1),(1,2)))),1),4),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,(2,2)))),1),((((1,((1,(2,(23,8))),((3,1),1))),1),(1,2)),1)),1),1))),(3,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,(2,1)),1)))),1),((((1,((1,((4,1),(42,5))),((4,1),1))),1),(1,4)),1)),1),1))),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,((1,2),1)))),1),((((1,((1,(2,(21,6))),((6,2),1))),1),3),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,((2,1),2))),1),((((1,((1,(2,(29,6))),((2,2),1))),1),(1,4)),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((((1,1),1),(1,(1,((1,2),1)))),1),((((1,((1,(3,(47,6))),((4,1),1))),1),(1,5)),1)),1),1))),(1,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,1)),1),((((1,((1,(1,(51,10))),((3,2),(1,2)))),1),(2,1)),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(2,2))),1),((((1,((1,(2,(22,2))),((2,6),1))),1),5),1)),1),1))),2)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,((((((1,1),(1,(1,(1,1)))),1),((((1,((1,(1,(46,10))),((2,2),2))),1),(1,4)),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(1,((1,3),1)))),1),((((1,((1,((1,1),(18,7))),((6,1),1))),1),(1,3)),1)),1),1))),(3,1))");<br/>
&nbsp;&nbsp;v.push_back("((2,(1,(((((1,(1,((1,1),1))),1),((((1,((1,((3,1),(28,8))),((2,(2,2)),3))),1),(1,1)),1)),1),1))),((1,1),1))");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,(((((1,(1,(3,(1,1)))),1),((((1,((1,((3,1),(23,7))),((3,2),1))),1),(1,2)),1)),1),1))),(2,1))");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
const std::vector&lt;std::string&gt; GetLightNewicks()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("((2,2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((2,2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((2,2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((2,2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((2,2),2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
/*<br/>
const std::vector&lt;std::string&gt; GetManyNewicks()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::string&gt; w = GetLightNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::string&gt; w = GetMediumNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::string&gt; w = GetHardNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
const std::vector&lt;std::string&gt; GetMediumNewicks()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("((3,3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((3,3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((3,3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((3,3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((3,3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((3,3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((3,3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((3,3),3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((3,3),3),3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((3,3),3),3),3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((((3,3),3),3),3),3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
const std::vector&lt;std::string&gt; GetManyNewicks()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("((90,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((90,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((90,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((80,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((80,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((80,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((70,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((70,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((70,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((60,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((60,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((60,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((50,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((50,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((50,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((5,5),5)");<br/>
&nbsp;&nbsp;v.push_back("((40,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((40,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((40,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((30,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((30,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((30,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((3,3),3)");<br/>
&nbsp;&nbsp;v.push_back("((20,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((20,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((20,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((2,3),3)");<br/>
&nbsp;&nbsp;v.push_back("((2,2),3)");<br/>
&nbsp;&nbsp;v.push_back("((2,2),2)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),90)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),80)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),70)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),60)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),50)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),40)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),30)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),20)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),10)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),90)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),80)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),70)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),60)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),50)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),40)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),30)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),20)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),10)");<br/>
&nbsp;&nbsp;v.push_back("((10,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((10,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((10,100),100)");<br/>
&nbsp;&nbsp;v.push_back("(((5,5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("(((3,3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((2,3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((2,2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((2,2),2),3)");<br/>
&nbsp;&nbsp;v.push_back("(((2,2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((5,5),5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("((((3,3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((2,3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((2,2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((2,2),2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((2,2),2),2),3)");<br/>
&nbsp;&nbsp;v.push_back("((((2,2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((5,5),5),5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("(((((3,3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((2,3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((2,2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((2,2),2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((2,2),2),2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((2,2),2),2),2),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((2,2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((5,5),5),5),5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("((((((3,3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,2),2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,2),2),2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,2),2),2),2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,2),2),2),2),2),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((((5,5),5),5),5),5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("(((((((3,3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),2),2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),2),2),2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),2),2),2),2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),2),2),2),2),2),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((((5,5),5),5),5),5),5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("((((((((3,3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),2),2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),2),2),2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),2),2),2),2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),2),2),2),2),2),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((5,5),5),5),5),5),5),5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,3),3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),2),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),2),2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),2),2),2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),2),2),2),2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),2),2),2),2),2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),3),3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),2),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),2),2),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),2),2),2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),2),2),2),2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),2),2),2),2),2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((2,2),2),2),2),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((2,2),2),2),2),2),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((2,2),2),2),2),2),2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((2,2),2),2),2),2),2),2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((2,2),2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((((2,2),2),2),2),2),2),2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectRampal/301/dialogrampaltest.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectRampal/301/dialogrampaltest.h" border = "1"><tr><td><code>
#ifndef DIALOGRAMPALTEST_H<br/>
#define DIALOGRAMPALTEST_H<br/>
//---------------------------------------------------------------------------<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
//---------------------------------------------------------------------------<br/>
#include &lt;QDialog&gt;<br/>
//---------------------------------------------------------------------------<br/>
#include "BigIntegerLibrary.hh"<br/>
//---------------------------------------------------------------------------<br/>
namespace Ui {<br/>
&nbsp;&nbsp;class DialogRampalTest;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
class DialogRampalTest : public QDialog<br/>
{<br/>
&nbsp;&nbsp;Q_OBJECT<br/>
<br/>
public:<br/>
&nbsp;&nbsp;explicit DialogRampalTest(QWidget *parent = 0);<br/>
&nbsp;&nbsp;~DialogRampalTest();<br/>
<br/>
struct Row<br/>
{<br/>
&nbsp;&nbsp;std::string m_test_name;<br/>
&nbsp;&nbsp;double m_probability;<br/>
&nbsp;&nbsp;double m_time;<br/>
&nbsp;&nbsp;std::string m_newick;<br/>
&nbsp;&nbsp;BigInteger m_complexity;<br/>
};<br/>
<br/>
protected:<br/>
&nbsp;&nbsp;void changeEvent(QEvent *e);<br/>
&nbsp;&nbsp;void resizeEvent(QResizeEvent *);<br/>
<br/>
private:<br/>
&nbsp;&nbsp;Ui::DialogRampalTest *ui;<br/>
&nbsp;&nbsp;std::vector&lt;Row&gt; m_data;<br/>
&nbsp;&nbsp;bool m_valid_input;<br/>
&nbsp;&nbsp;int GetFlags() const;<br/>
&nbsp;&nbsp;int GetNumTestsChecked() const;<br/>
&nbsp;&nbsp;void ShowData();<br/>
<br/>
private slots:<br/>
&nbsp;&nbsp;void onAnyChange();<br/>
&nbsp;&nbsp;void onBenchmark();<br/>
&nbsp;&nbsp;void onStart();<br/>
<br/>
};<br/>
//---------------------------------------------------------------------------<br/>
const std::vector&lt;std::string&gt; GetHardBiologicalNewicks();<br/>
//---------------------------------------------------------------------------<br/>
const std::vector&lt;std::string&gt; GetHardNewicks();<br/>
//---------------------------------------------------------------------------<br/>
const std::vector&lt;std::string&gt; GetLightBiologicalNewicks();<br/>
//---------------------------------------------------------------------------<br/>
const std::vector&lt;std::string&gt; GetLightNewicks();<br/>
//---------------------------------------------------------------------------<br/>
const std::vector&lt;std::string&gt; GetManyNewicks();<br/>
//---------------------------------------------------------------------------<br/>
const std::vector&lt;std::string&gt; GetMediumNewicks();<br/>
//---------------------------------------------------------------------------<br/>
#endif // DIALOGRAMPALTEST_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectRampal/301/MyAssert.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectRampal/301/MyAssert.h" border = "1"><tr><td><code>
#ifndef BILDERBIKKEL_ASSERT_H<br/>
#define BILDERBIKKEL_ASSERT_H<br/>
//---------------------------------------------------------------------------<br/>
#include &lt;cassert&gt;<br/>
<br/>
//From http://www.richelbilderbeek.nl/CppAssert.htm<br/>
#ifdef NDEBUG_BILDERBIKKEL<br/>
&nbsp;&nbsp;#define Assert(x) ((void)0)<br/>
#else<br/>
&nbsp;&nbsp;#include &lt;cstdlib&gt;<br/>
&nbsp;&nbsp;#include &lt;fstream&gt;<br/>
&nbsp;&nbsp;#include &lt;iostream&gt;<br/>
&nbsp;&nbsp;#include &lt;stdexcept&gt;<br/>
<br/>
&nbsp;&nbsp;#define Assert(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;if (!(x))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cout&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "ERROR!! Assertion "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;std::string (#x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;" failed\n on line "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;(__LINE__)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;"\n in file "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;__FILE__&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::endl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::ofstream f("assert_out.txt");&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "ERROR!! Assertion "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;std::string (#x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;" failed\n on line "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;(__LINE__)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;"\n in file "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;__FILE__&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::endl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f.close();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::exit(1234);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Assertion failed");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;}<br/>
<br/>
#endif<br/>
//---------------------------------------------------------------------------<br/>
#endif // BILDERBIKKEL_ASSERT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectRampal/301/MyTrace.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectRampal/301/MyTrace.h" border = "1"><tr><td><code>
#ifndef BILDERBIKKEL_TRACE_H<br/>
#define BILDERBIKKEL_TRACE_H<br/>
//---------------------------------------------------------------------------<br/>
#include &lt;cassert&gt;<br/>
<br/>
//From http://www.richelbilderbeek.nl/CppAssert.htm<br/>
#ifdef NTRACE_BILDERBIKKEL<br/>
&nbsp;&nbsp;#define Trace(x) ((void)0)<br/>
#else<br/>
&nbsp;&nbsp;#include &lt;fstream&gt;<br/>
&nbsp;&nbsp;#include &lt;iostream&gt;<br/>
&nbsp;&nbsp;#include &lt;stdexcept&gt;<br/>
<br/>
&nbsp;&nbsp;#define Trace(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::ofstream f("trace_out.txt"); \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "TRACE \'"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;std::string (#x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;"\' line "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;(__LINE__)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;" in file '"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;__FILE__&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;"': "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;std::string (x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;"'"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::endl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f.close();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cout&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "TRACE \'"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;std::string (#x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;"\' line "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;(__LINE__)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;" in file '"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;__FILE__&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;"': "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;std::string (x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;"'"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::endl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
<br/>
#endif<br/>
//---------------------------------------------------------------------------<br/>
#endif // BILDERBIKKEL_TRACE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectRampal/301/ProjectRampalGui.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectRampal/301/ProjectRampalGui.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
<br/>
#include &lt;vcl.h&gt;<br/>
#pragma hdrstop<br/>
//---------------------------------------------------------------------------<br/>
USEFORM("UnitFormAnalyse.cpp", FormAnalyse);<br/>
//---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, int)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application-&gt;Initialize();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application-&gt;Title = "The Rampal Etienne Project multi-run GUI";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application-&gt;CreateForm(__classid(TFormAnalyse), &amp;FormAnalyse);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (Exception &amp;exception)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application-&gt;ShowException(&amp;exception);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw Exception("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch (Exception &amp;exception)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application-&gt;ShowException(&amp;exception);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectRampal/301/ProjectRampalTest.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectRampal/301/ProjectRampalTest.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
&nbsp;&nbsp;The Rampal Etienne Project, calculates the probability of a phylogeny<br/>
&nbsp;&nbsp;(C) 2009 Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
// From http://www.richelbilderbeek.nl<br/>
//---------------------------------------------------------------------------<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cmath&gt;<br/>
#include &lt;cctype&gt;<br/>
#include &lt;fstream&gt;<br/>
#include &lt;iomanip&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;stdexcept&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
//---------------------------------------------------------------------------<br/>
#include &lt;boost/foreach.hpp&gt;<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
//---------------------------------------------------------------------------<br/>
#include &lt;QApplication&gt;<br/>
//---------------------------------------------------------------------------<br/>
#include "binarynewickvector.h"<br/>
#include "dialogrampaltest.h"<br/>
#include "newick.h"<br/>
#include "test.h"<br/>
//---------------------------------------------------------------------------<br/>
//From htpp://www.richelbilderbeek.nl/CppGetRandomUniform.htm<br/>
double GetRandomUniform()<br/>
{<br/>
&nbsp;&nbsp;return static_cast&lt;double&gt;(std::rand())/static_cast&lt;double&gt;(RAND_MAX);<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
template &lt;typename T&gt;<br/>
const T AskUserForInput()<br/>
{<br/>
&nbsp;&nbsp;T t;<br/>
&nbsp;&nbsp;std::getline(std::cin,t);<br/>
&nbsp;&nbsp;return t;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppAskUserForDouble.htm<br/>
const std::string AskUserForNewick()<br/>
{<br/>
&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; "Please enter a newick or press enter to quit:\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = AskUserForInput&lt;std::string&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (s.empty()) return std::string();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BinaryNewickVector n(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch(std::invalid_argument&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; "Invalid input: " &lt;&lt; e.what() &lt;&lt; "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppAskUserForDouble.htm<br/>
double AskUserForTheta()<br/>
{<br/>
&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; "Please enter a value for theta or press enter to quit:\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = AskUserForInput&lt;std::string&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (s.empty()) return 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double x = boost::lexical_cast&lt;double&gt;(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (x &lt;= 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; "Theta must be a positive non-zero value\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch(...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; "Theta must be a positive non-zero value\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppRandomizeTimer.htm<br/>
void RandomizeTimer()<br/>
{<br/>
&nbsp;&nbsp;std::srand(std::time(0));<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppStrToLower.htm<br/>
const std::string StrToLower(std::string s)<br/>
{<br/>
&nbsp;&nbsp;std::transform(s.begin(), s.end(), s.begin(),std::ptr_fun&lt;int,int&gt;(std::tolower));<br/>
&nbsp;&nbsp;return s;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppGetPath.htm<br/>
//Returns the path, without a trailing backslash '\'<br/>
const std::string GetPath(const std::string&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;#ifndef USE_WINDOWS<br/>
&nbsp;&nbsp;const int endOfPathIndex = fileName.rfind("/",fileName.size());<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;const int endOfPathIndex = fileName.rfind("\\",fileName.size());<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(endOfPathIndex &lt; static_cast&lt;int&gt;(fileName.size()));<br/>
&nbsp;&nbsp;return fileName.substr(0,endOfPathIndex);<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppGetCurrentFolder.htm<br/>
const std::string GetCurrentFolder(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;return GetPath(s);<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
void ShowCorrectUse()<br/>
{<br/>
&nbsp;&nbsp;std::cout<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "Incorrect use of ProjectTestMain\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "ProjectTestMain [theta input parameter] [newick input parameter] [test parameters]\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "Theta input parameters: \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "&nbsp;&nbsp;-any positive non-zero value, for example '10.0'\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "&nbsp;&nbsp;-m: manual input of thetas\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "&nbsp;&nbsp;-r: random theta\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "Input parameters: \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "&nbsp;&nbsp;-any newick string, for example '(1,(2,3))\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "&nbsp;&nbsp;-m: manual input of newick strings\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "&nbsp;&nbsp;-r: random newick strings\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "Test parameters: \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; " i &amp;&nbsp;&nbsp;1: use Ravindran\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; " i &amp;&nbsp;&nbsp;2: use SortedNewick\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; " i &amp;&nbsp;&nbsp;4: use SmartSortedNewick\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; " i &amp;&nbsp;&nbsp;8: use RampalMain_Endversion2\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; " i &amp; 16: use TestTwoDigitNewickDebug\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; " i &amp; 32: use TestTwoDigitNewickRelease\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; " 63: use all\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::endl;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
///ProjectRampalTest is the testing facility of ProjectRampal.<br/>
///A newly developed brach of the project can be tested with<br/>
///this program in terms of obtaining the right output and speed.<br/>
///ProjectRampalTest forbids the use of a release mode,<br/>
///because its purpose is to test the code.<br/>
int main(int argc, char* argv[])<br/>
{<br/>
&nbsp;&nbsp;if (argc == 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QApplication a(argc, argv);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DialogRampalTest d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.show();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return a.exec();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;std::cout &lt;&lt; GetCurrentFolder(argv[0]) &lt;&lt; "/" &lt;&lt; argv[0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; " (version 300.0)\n";<br/>
&nbsp;&nbsp;#ifdef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cout<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "ProjectTest cannot be run in no-debug mode!\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "Please recompile without the NDEBUG #define"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::endl;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return 1;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;if (argc!=4) { ShowCorrectUse(); return 0; }<br/>
<br/>
&nbsp;&nbsp;const std::string argv1 = StrToLower(argv[1]);<br/>
&nbsp;&nbsp;const std::string argv2 = StrToLower(argv[2]);<br/>
&nbsp;&nbsp;//Check if the fourth argument is an integer<br/>
&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::lexical_cast&lt;int&gt;(argv[3]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;catch (boost::bad_lexical_cast&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ShowCorrectUse();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const int argv3 = boost::lexical_cast&lt;int&gt;(argv[3]);<br/>
&nbsp;&nbsp;//Test sanity of input<br/>
&nbsp;&nbsp;//First parameter: theta<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try { boost::lexical_cast&lt;double&gt;(argv1); } //Is it a double?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch(...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (argv1!="-m" &amp;&amp; argv1!="-r") { ShowCorrectUse(); return 0; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Second parameter: phylogeny<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try { BinaryNewickVector n(argv2); } //Is it a newick?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch(...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (argv2!="-m" &amp;&amp; argv2!="-r" ) { ShowCorrectUse(); return 0; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Third parameter: test<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (argv3 &lt;= 0 || argv3 &gt; 63) { ShowCorrectUse(); return 0; }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Input is sane<br/>
<br/>
&nbsp;&nbsp;RandomizeTimer();<br/>
<br/>
&nbsp;&nbsp;std::ofstream file("Results.txt");<br/>
&nbsp;&nbsp;file &lt;&lt; "Results of " &lt;&lt; argv[0] &lt;&lt; " " &lt;&lt; argv[1] &lt;&lt; " " &lt;&lt; argv[2] &lt;&lt; " " &lt;&lt; argv[3] &lt;&lt; "\n";<br/>
&nbsp;&nbsp;file.close();<br/>
<br/>
&nbsp;&nbsp;std::cout &lt;&lt; std::setprecision(10);<br/>
<br/>
&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Obtain theta<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Theta input parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// -any positive non-zero value, for example '10.0'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// -f: theta values from file 'test_thetas.txt'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// -m: manual input of thetas<br/>
&nbsp;&nbsp;&nbsp;&nbsp;double theta = 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (argv1 == "-m")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta = AskUserForTheta();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (theta==0.0) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if (argv1 == "-r")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta = GetRandomUniform() * 100.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta = boost::lexical_cast&lt;double&gt;(argv1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Obtain newick<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string newick;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Input parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// -any newick string, for example '(1,(2,3))'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// -m: manual input of newick strings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// -p: predefined newick strings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// -r: random newick strings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (argv2 == "-m")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newick = AskUserForNewick();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (newick.empty()) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if (argv2 == "-r")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newick = Newick::CreateRandomNewick(7,7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newick = argv2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::ofstream file("Results.txt", std::ios_base::app);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file &lt;&lt; std::setprecision(99);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Create all tests<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Test&gt; &gt; tests<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= Test::CreateTests(newick,theta,argv3);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Execute all tests<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(boost::shared_ptr&lt;Test&gt; t,tests)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t-&gt;Execute();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Show test results<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cout<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "Theta: '" &lt;&lt; theta &lt;&lt; "'\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "Newick: '" &lt;&lt; newick &lt;&lt; "'\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "Number of combinations: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; Newick::CalcNumOfCombinations(BinaryNewickVector(newick).Get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "\n\n\n\n\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "TestName\t\t\tProbability\tTime\n";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(boost::shared_ptr&lt;Test&gt; t,tests)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cout<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; t-&gt;GetTestName()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "\t" &lt;&lt; t-&gt;GetProbability()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;&lt; '\t' &lt;&lt; t-&gt;GetEwensProbability()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; '\t' &lt;&lt; t-&gt;GetTime()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; t-&gt;GetTestName()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; '\t' &lt;&lt; t-&gt;GetNewick()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; '\t' &lt;&lt; t-&gt;GetProbability()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; '\t' &lt;&lt; t-&gt;GetEwensProbability()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; '\t' &lt;&lt; t-&gt;GetTime()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Probably we're done,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//except if the user wants to input another value manually<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (argv1!="-m" &amp;&amp; argv2!="-m") break;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
//---------------------------------------------------------------------------<br/>
const std::vector&lt;std::string&gt; CreateTestNewicks()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("((2,2),2)");<br/>
&nbsp;&nbsp;v.push_back("((2,2),3)");<br/>
&nbsp;&nbsp;v.push_back("((2,3),3)");<br/>
&nbsp;&nbsp;v.push_back("((3,3),3)");<br/>
&nbsp;&nbsp;v.push_back("((5,5),5)");<br/>
&nbsp;&nbsp;v.push_back("(((2,2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((2,2),2),3)");<br/>
&nbsp;&nbsp;v.push_back("(((2,2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((2,3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((3,3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((5,5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),10)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),20)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),30)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),40)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),50)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),60)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),70)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),80)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),90)");<br/>
&nbsp;&nbsp;v.push_back("((10,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((20,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((30,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((40,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((50,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((60,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((70,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((80,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((90,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),10)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),20)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),30)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),40)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),50)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),60)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),70)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),80)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),90)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((10,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((10,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((20,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((20,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((30,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((30,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((40,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((40,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((50,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((50,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((60,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((60,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((70,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((70,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((80,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((80,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((90,1000),100)");<br/>
&nbsp;&nbsp;v.push_back("((90,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((1000,100),100)");<br/>
&nbsp;&nbsp;v.push_back("((100,100),1000)");<br/>
&nbsp;&nbsp;v.push_back("((((2,2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((2,2),2),2),3)");<br/>
&nbsp;&nbsp;v.push_back("((((2,2),2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((2,2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((2,3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((3,3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((5,5),5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("(((((2,2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((2,2),2),2),2),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((2,2),2),2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((2,2),2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((2,2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((2,3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((3,3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((5,5),5),5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,2),2),2),2),2),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,2),2),2),2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,2),2),2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,2),2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((2,3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((3,3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((5,5),5),5),5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),2),2),2),2),2),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),2),2),2),2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),2),2),2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),2),2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,2),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((2,3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((3,3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((5,5),5),5),5),5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),2),2),2),2),2),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),2),2),2),2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),2),2),2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),2),2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),2),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,2),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((2,3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((3,3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((5,5),5),5),5),5),5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),2),2),2),2),2),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),2),2),2),2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),2),2),2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),2),2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),2),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),2),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,2),3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((2,3),3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((5,5),5),5),5),5),5),5),5),5)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),2),2),2),2),2),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),2),2),2),2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),2),2),2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),2),2),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),2),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),2),3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((2,2),3),3),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((2,2),2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((2,2),2),2),2),2),2),2),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((2,2),2),2),2),2),2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((2,2),2),2),2),2),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((2,2),2),2),2),3),3),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((((2,2),2),2),2),2),2),2),3),3),3),3),3)");<br/>
&nbsp;&nbsp;v.push_back("(((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;v.push_back("((((((((((((((2,2),2),2),2),2),2),2),2),2),2),2),2),2),2)");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectRampal/301/ProjectRampalTest.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectRampal/301/ProjectRampalTest.pro" border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core<br/>
CONFIG&nbsp;&nbsp; += console<br/>
CONFIG&nbsp;&nbsp; -= app_bundle<br/>
#Disallow release version<br/>
#CONFIG&nbsp;&nbsp; += debug<br/>
#CONFIG&nbsp;&nbsp; -= release<br/>
#Under Windows, under release mode, add this dumb config,<br/>
#otherwise, it will still be in debug mode (beats me why)<br/>
CONFIG -= debug<br/>
#Message showing what the application is thinking<br/>
unix: CONFIG(debug&nbsp;&nbsp;,debug|release):message("Building Ubuntu debug")<br/>
unix: CONFIG(release,debug|release):message("Building Ubuntu release: SHOULD NOT HAPPEN")<br/>
win32:CONFIG(debug&nbsp;&nbsp;,debug|release):message("Building Windows debug")<br/>
win32:CONFIG(release,debug|release):message("Building Windows release: SHOULD NOT HAPPEN")<br/>
#Application name<br/>
#Debug flag for keeping/removing assert<br/>
CONFIG(release,debug|release):DEFINES += NDEBUG<br/>
#Add the path of the BigInt library and BinaryNewickVector<br/>
INCLUDEPATH +=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;../../../Classes/CppBinaryNewickVector&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;../../../Classes/CppNewick&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;../../../Classes/CppStopwatch \<br/>
&nbsp;&nbsp;../../../Libraries/bigint-2010.04.30<br/>
#Libraries<br/>
win32:LIBS += C:/Qt/2010.02.1/qt/lib/libboost_filesystem.lib<br/>
unix:LIBS += -lboost_filesystem<br/>
#Using BigInt library by including its source<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialogrampaltest.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ProjectRampalTest.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../../Classes/CppBinaryNewickVector/binarynewickvector.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../../Libraries/bigint-2010.04.30/BigInteger.cc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../../Libraries/bigint-2010.04.30/BigIntegerAlgorithms.cc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../../Libraries/bigint-2010.04.30/BigIntegerUtils.cc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../../Libraries/bigint-2010.04.30/BigUnsigned.cc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../../Libraries/bigint-2010.04.30/BigUnsignedInABase.cc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../../Classes/CppNewick/newick.cpp<br/>
HEADERS += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;test.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialogrampaltest.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../../Classes/CppBinaryNewickVector/binarynewickvector.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../../Classes/CppStopwatch/stopwatch.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../../Classes/CppNewick/newick.h<br/>
FORMS += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialogrampaltest.ui<br/>
RESOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ProjectRampal.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectRampal/301/test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectRampal/301/test.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
&nbsp;&nbsp;The Rampal Etienne Project, calculates the probability of a phylogeny<br/>
&nbsp;&nbsp;(C) 2009 Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
// From http://www.richelbilderbeek.nl<br/>
//---------------------------------------------------------------------------<br/>
#include &lt;fstream&gt;<br/>
#include &lt;vector&gt;<br/>
//---------------------------------------------------------------------------<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
#include &lt;boost/timer.hpp&gt;<br/>
//---------------------------------------------------------------------------<br/>
#include "binarynewickvector.h"<br/>
#include "newick.h"<br/>
#include "stopwatch.h"<br/>
#include "test.h"<br/>
//---------------------------------------------------------------------------<br/>
///Create all tests according to the flags given.<br/>
///Test parameters:\n<br/>
///i &amp;&nbsp;&nbsp;1: use Ravindran\n<br/>
///i &amp;&nbsp;&nbsp;2: use SortedNewick\n<br/>
///i &amp;&nbsp;&nbsp;4: use SmartSortedNewick\n<br/>
///i &amp;&nbsp;&nbsp;8: use RampalMain_Endversion2\n<br/>
///i &amp; 16: use TestTwoDigitNewickDebug\n<br/>
///i &amp; 32: use TestTwoDigitNewickRelease\n<br/>
///63: use all\n<br/>
std::vector&lt;boost::shared_ptr&lt;Test&gt; &gt; Test::CreateTests(<br/>
&nbsp;&nbsp;const std::string&amp; newick,<br/>
&nbsp;&nbsp;const double theta,<br/>
&nbsp;&nbsp;const int flags)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Test&gt; &gt; v;<br/>
&nbsp;&nbsp;if (flags &amp; 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Test&gt; t(new TestRavindran(newick,theta));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (flags &amp; 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Test&gt; t(new TestEndversion2(newick,theta));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (flags &amp; 4)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Test&gt; t(new TestTwoDigitNewickDebug(newick,theta));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (flags &amp; 8)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Test&gt; t(new TestTwoDigitNewickRelease(newick,theta));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
///FileExists checks if a certain file exists<br/>
///From http://www.richelbilderbeek.nl/CppFileExists.htm<br/>
bool Test::FileExists(const std::string&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;std::fstream f;<br/>
&nbsp;&nbsp;f.open(filename.c_str(),std::ios::in);<br/>
&nbsp;&nbsp;return f.is_open();<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppFileToVector.htm<br/>
const std::vector&lt;std::string&gt; Test::FileToVector(const std::string&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;assert(FileExists(fileName)==true);<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; myVector;<br/>
&nbsp;&nbsp;std::ifstream in(fileName.c_str());<br/>
&nbsp;&nbsp;std::string myString;<br/>
&nbsp;&nbsp;for (int i=0; !in.eof(); ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::getline(in,myString);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myVector.push_back(myString);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return myVector;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
const BigInteger Test::GetComplexity() const<br/>
{<br/>
&nbsp;&nbsp;const BinaryNewickVector n(GetNewick());<br/>
&nbsp;&nbsp;return Newick::CalcComplexity(n.Get());<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
//Ewensprobability = probability * num_of_combinations<br/>
const std::string Test::GetEwensProbability() const<br/>
{<br/>
&nbsp;&nbsp;const BigInteger n_combinations<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= Newick::CalcNumOfCombinations(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BinaryNewickVector(GetNewick()).Get());<br/>
&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int i = n_combinations.toInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double d = boost::numeric_cast&lt;double&gt;(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double ewens_probability = d * GetProbability();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return boost::lexical_cast&lt;std::string&gt;(ewens_probability);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;catch (...)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= bigIntegerToString(n_combinations)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ std::string(" * ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(GetProbability());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return s;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
bool Test::Execute(<br/>
&nbsp;&nbsp;const std::string&amp; exe_filename,<br/>
&nbsp;&nbsp;const std::string&amp; full_command,<br/>
&nbsp;&nbsp;const std::string&amp; output_filename)<br/>
{<br/>
&nbsp;&nbsp;std::clog &lt;&lt; "Starting '" &lt;&lt; GetTestName() &lt;&lt; "' for '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; this-&gt;GetNewick() &lt;&lt; "'\n";<br/>
<br/>
&nbsp;&nbsp;if (!FileExists(exe_filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; "Executable file '" &lt;&lt; exe_filename &lt;&lt; "' not found\n";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(FileExists(exe_filename));<br/>
<br/>
&nbsp;&nbsp;const Stopwatch s;<br/>
<br/>
&nbsp;&nbsp;const int sys_error = std::system(full_command.c_str());<br/>
<br/>
&nbsp;&nbsp;if (sys_error == 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_time = s.elapsed();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(FileExists(result_filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_probability = ReadDoubleFromFile(output_filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_time = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_probability = 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
///ReadDoubleFromFile reads the first line of a file<br/>
///and converts it to a double.<br/>
///From http://www.richelbilderbeek.nl/CppReadDoubleFromFile.htm<br/>
double Test::ReadDoubleFromFile(const std::string&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = FileToVector(fileName);<br/>
&nbsp;&nbsp;assert(v.empty()==false);<br/>
&nbsp;&nbsp;const double d = std::atof(v[0].c_str());<br/>
&nbsp;&nbsp;return d;<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
//Returns if the test was successful<br/>
bool TestRavindran::Execute()<br/>
{<br/>
&nbsp;&nbsp;std::clog &lt;&lt; "Starting TestRavindranLinux for '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; this-&gt;GetNewick() &lt;&lt; "'\n";<br/>
<br/>
&nbsp;&nbsp;if (GetComplexity() &gt; 1000000) return false;<br/>
<br/>
&nbsp;&nbsp;//Write parameters to file<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::ofstream file("theta.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file &lt;&lt; GetTheta();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Older version expects a /n at end<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::ofstream file("phylogeny.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file &lt;&lt; GetNewick() &lt;&lt; "\n\n";<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;#ifdef WIN32<br/>
&nbsp;&nbsp;const std::string exe_filename = "../Exes/phy_prob_12.exe";<br/>
&nbsp;&nbsp;const std::string full_command = "../Exes/phy_prob_12.exe";<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;const std::string exe_filename = "../Exes/phy_prob_linux";<br/>
&nbsp;&nbsp;const std::string full_command = "./../Exes/phy_prob_linux";<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;return Test::Execute(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;exe_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;full_command,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"expected_probability.txt");<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
///Just call the executable ProjectRampalMain_Endversion2<br/>
///with the parameters<br/>
bool TestEndversion2::Execute()<br/>
{<br/>
&nbsp;&nbsp;#ifndef WIN32<br/>
&nbsp;&nbsp;const std::string exe_filename = "../Exes/ProjectRampalMain_Endversion2";<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;const std::string exe_filename = "../Exes/ProjectRampal.exe";<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;const std::string command_full =<br/>
&nbsp;&nbsp;#ifndef WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string("./") +<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;exe_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(GetTheta())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ " \""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ GetNewick()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ "\"";<br/>
<br/>
&nbsp;&nbsp;const std::string output_filename = "Result_probability.txt";<br/>
<br/>
&nbsp;&nbsp;return Test::Execute(exe_filename,command_full,output_filename);<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
///Just call the executable TestTwoDigitNewickDebug<br/>
///with the parameters<br/>
bool TestTwoDigitNewickDebug::Execute()<br/>
{<br/>
&nbsp;&nbsp;#ifndef WIN32<br/>
&nbsp;&nbsp;const std::string exe_filename = "../Exes/TestTwoDigitNewickUbuntuDebug";<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;const std::string exe_filename = "../Exes/TestTwoDigitNewickWinDebug.exe";<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;const std::string command_full =<br/>
&nbsp;&nbsp;#ifndef WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string("./") +<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;exe_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(GetTheta())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ " \""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ GetNewick()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ "\"";<br/>
&nbsp;&nbsp;const std::string output_filename = "Result_probability.txt";<br/>
&nbsp;&nbsp;return Test::Execute(exe_filename,command_full,output_filename);<br/>
<br/>
&nbsp;&nbsp;/*<br/>
&nbsp;&nbsp;std::clog &lt;&lt; "Starting TestTwoDigitNewickDebug for '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; this-&gt;GetNewick() &lt;&lt; "'\n";<br/>
&nbsp;&nbsp;const std::string filename<br/>
&nbsp;&nbsp;#ifndef WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= "../../../Tools/ToolTestTwoDigitNewick-build-desktop/TestTwoDigitNewickUbuntuDebug";<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= "../../../Tools/ToolTestTwoDigitNewick/debug/TestNewickVectorWinDebug.exe";<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;if (!FileExists(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; "File '" &lt;&lt; filename &lt;&lt; "' not found\n";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(FileExists(filename));<br/>
<br/>
&nbsp;&nbsp;const std::string command =<br/>
&nbsp;&nbsp;#ifndef WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string("./") +<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(GetTheta())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ " \""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ GetNewick()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ "\"";<br/>
<br/>
&nbsp;&nbsp;const Stopwatch s;<br/>
<br/>
&nbsp;&nbsp;const int sys_error = std::system(command.c_str());<br/>
&nbsp;&nbsp;if (sys_error == 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;time = s.elapsed();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string result_filename = "Result_probability.txt";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(FileExists(result_filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;probability = ReadDoubleFromFile(result_filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;time = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;probability = 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*/<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
///Just call the executable TestTwoDigitNewickRelease<br/>
///with the parameters<br/>
bool TestTwoDigitNewickRelease::Execute()<br/>
{<br/>
&nbsp;&nbsp;#ifndef WIN32<br/>
&nbsp;&nbsp;const std::string exe_filename = "../Exes/TestTwoDigitNewickUbuntuRelease";<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;const std::string exe_filename = "../Exes/TestTwoDigitNewickWinRelease.exe";<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;const std::string command_full =<br/>
&nbsp;&nbsp;#ifndef WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string("./") +<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;exe_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(GetTheta())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ " \""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ GetNewick()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ "\"";<br/>
&nbsp;&nbsp;const std::string output_filename = "Result_probability.txt";<br/>
&nbsp;&nbsp;return Test::Execute(exe_filename,command_full,output_filename);<br/>
&nbsp;&nbsp;/*<br/>
&nbsp;&nbsp;std::clog &lt;&lt; "Starting TestTwoDigitNewickRelease for '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; this-&gt;GetNewick() &lt;&lt; "'\n";<br/>
&nbsp;&nbsp;const std::string filename<br/>
&nbsp;&nbsp;#ifndef WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= "../../../Tools/ToolTestTwoDigitNewick-build-desktop/TestTwoDigitNewickUbuntuRelease";<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= "../../../Tools/ToolTestTwoDigitNewick/release/TestNewickVectorWinRelease.exe";<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(FileExists(filename));<br/>
&nbsp;&nbsp;if (!FileExists(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; "File '" &lt;&lt; filename &lt;&lt; "' not found\n";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const std::string command =<br/>
&nbsp;&nbsp;#ifndef WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string("./") +<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(GetTheta())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ " \""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ GetNewick()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ "\"";<br/>
<br/>
&nbsp;&nbsp;const Stopwatch s;<br/>
<br/>
&nbsp;&nbsp;const int sys_error = std::system(command.c_str());<br/>
<br/>
&nbsp;&nbsp;if (sys_error == 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_time = s.elapsed();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string result_filename = "Result_probability.txt";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(FileExists(result_filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_probability = ReadDoubleFromFile(result_filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_time = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_probability = 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*/<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
///Just call the executable TestTwoDigitNewickDebug<br/>
///with the parameters<br/>
bool TestManyDigitNewickDebug::Execute()<br/>
{<br/>
&nbsp;&nbsp;#ifndef WIN32<br/>
&nbsp;&nbsp;const std::string exe_filename = "../Exes/TestManyDigitNewickUbuntuDebug";<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;const std::string exe_filename = "../Exes/TestManyDigitNewickWinDebug.exe";<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;const std::string command_full =<br/>
&nbsp;&nbsp;#ifndef WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string("./") +<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;exe_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(GetTheta())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ " \""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ GetNewick()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ "\"";<br/>
<br/>
&nbsp;&nbsp;const std::string output_filename = "Result_probability.txt";<br/>
<br/>
&nbsp;&nbsp;return Test::Execute(exe_filename,command_full,output_filename);<br/>
}<br/>
//---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectRampal/301/test.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectRampal/301/test.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
&nbsp;&nbsp;The Rampal Etienne Project, calculates the probability of a phylogeny<br/>
&nbsp;&nbsp;(C) 2009 Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
// From http://www.richelbilderbeek.nl<br/>
//---------------------------------------------------------------------------<br/>
#ifndef UnitTestH<br/>
#define UnitTestH<br/>
//---------------------------------------------------------------------------<br/>
#include &lt;string&gt;<br/>
//---------------------------------------------------------------------------<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
//---------------------------------------------------------------------------<br/>
#include "BigIntegerLibrary.hh"<br/>
//---------------------------------------------------------------------------<br/>
struct Test<br/>
{<br/>
&nbsp;&nbsp;Test(const std::string&amp; any_newick, const double any_theta)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_newick_str(any_newick),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_theta(any_theta),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_time(0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_probability(0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Do nothing<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;virtual ~Test() {};<br/>
&nbsp;&nbsp;virtual bool Execute() = 0;<br/>
&nbsp;&nbsp;virtual const std::string GetTestName() const = 0;<br/>
&nbsp;&nbsp;double GetProbability() const { return m_probability; }<br/>
&nbsp;&nbsp;const std::string GetEwensProbability() const; //Ewensprobability = probability * num_of_combinations<br/>
&nbsp;&nbsp;int GetTime() const { return m_time; }<br/>
&nbsp;&nbsp;const BigInteger GetComplexity() const;<br/>
<br/>
&nbsp;&nbsp;const std::string&amp; GetNewick() const { return m_newick_str; }<br/>
&nbsp;&nbsp;double GetTheta() const { return m_theta; }<br/>
<br/>
&nbsp;&nbsp;bool Execute(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; exe_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; full_command,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; output_filename);<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;const std::string m_newick_str;<br/>
&nbsp;&nbsp;const double m_theta;<br/>
&nbsp;&nbsp;double m_time;<br/>
&nbsp;&nbsp;double m_probability;<br/>
<br/>
&nbsp;&nbsp;public:<br/>
&nbsp;&nbsp;//helper functions<br/>
&nbsp;&nbsp;static std::vector&lt;boost::shared_ptr&lt;Test&gt; &gt; CreateTests(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; newick,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double theta,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int flags);<br/>
&nbsp;&nbsp;static bool FileExists(const std::string&amp; filename);<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; FileToVector(const std::string&amp; fileName);<br/>
&nbsp;&nbsp;static double ReadDoubleFromFile(const std::string&amp; fileName);<br/>
};<br/>
//---------------------------------------------------------------------------<br/>
struct TestRavindran : public Test<br/>
{<br/>
&nbsp;&nbsp;TestRavindran(const std::string&amp; any_newick, const double any_theta)<br/>
&nbsp;&nbsp;: Test(any_newick,any_theta) {}<br/>
&nbsp;&nbsp;~TestRavindran() {}<br/>
&nbsp;&nbsp;bool Execute();<br/>
&nbsp;&nbsp;const std::string GetTestName() const { return "Ravindran&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"; }<br/>
};<br/>
//---------------------------------------------------------------------------<br/>
struct TestEndversion2: public Test<br/>
{<br/>
&nbsp;&nbsp;TestEndversion2(const std::string&amp; any_newick, const double any_theta)<br/>
&nbsp;&nbsp;: Test(any_newick,any_theta) {}<br/>
&nbsp;&nbsp;~TestEndversion2() {}<br/>
&nbsp;&nbsp;bool Execute();<br/>
&nbsp;&nbsp;const std::string GetTestName() const { return "TestProjectRampal_Endversion2"; }<br/>
};<br/>
//---------------------------------------------------------------------------<br/>
struct TestTwoDigitNewickDebug: public Test<br/>
{<br/>
&nbsp;&nbsp;TestTwoDigitNewickDebug(const std::string&amp; any_newick, const double any_theta)<br/>
&nbsp;&nbsp;: Test(any_newick,any_theta) {}<br/>
&nbsp;&nbsp;~TestTwoDigitNewickDebug() {}<br/>
&nbsp;&nbsp;bool Execute();<br/>
&nbsp;&nbsp;const std::string GetTestName() const { return "TestTwoDigitNewickDebug"; }<br/>
};<br/>
//---------------------------------------------------------------------------<br/>
struct TestTwoDigitNewickRelease: public Test<br/>
{<br/>
&nbsp;&nbsp;TestTwoDigitNewickRelease(const std::string&amp; any_newick, const double any_theta)<br/>
&nbsp;&nbsp;: Test(any_newick,any_theta) {}<br/>
&nbsp;&nbsp;~TestTwoDigitNewickRelease() {}<br/>
&nbsp;&nbsp;bool Execute();<br/>
&nbsp;&nbsp;const std::string GetTestName() const { return "TestTwoDigitNewickRelease"; }<br/>
};<br/>
//---------------------------------------------------------------------------<br/>
struct TestManyDigitNewickDebug: public Test<br/>
{<br/>
&nbsp;&nbsp;TestManyDigitNewickDebug(const std::string&amp; any_newick, const double any_theta)<br/>
&nbsp;&nbsp;: Test(any_newick,any_theta) {}<br/>
&nbsp;&nbsp;~TestManyDigitNewickDebug() {}<br/>
&nbsp;&nbsp;bool Execute();<br/>
&nbsp;&nbsp;const std::string GetTestName() const { return "TestManyDigitNewickRelease"; }<br/>
};<br/>
//---------------------------------------------------------------------------<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectRampal/301/zip.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectRampal/301/zip.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
#pack2port packs all the files to port into a single .zip file,<br/>
#minicking the same folder structure<br/>
#Folder structure<br/>
# *<br/>
#&nbsp;&nbsp; * Classes<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; * CppStopwatch<br/>
#&nbsp;&nbsp; * Libraries<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; * bigint-2010.04.30<br/>
#&nbsp;&nbsp; * Projects<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; * ProjectRampal<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * 300&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>
#&nbsp;&nbsp; * Tools<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; * ToolTestNewickVector&nbsp;&nbsp;&nbsp;&nbsp;<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; * ToolTestTwoDigitNewick<br/>
echo "Removing old zip archive"<br/>
rm 300.zip<br/>
rm *.o<br/>
rm ProjectRampalTest.pro.user<br/>
<br/>
echo "Mimicking file structure"<br/>
mkdir temp_zip<br/>
mkdir temp_zip/Classes<br/>
mkdir temp_zip/Classes/CppStopwatch<br/>
mkdir temp_zip/Libraries<br/>
mkdir temp_zip/Libraries/bigint-2010.04.30<br/>
mkdir temp_zip/Projects<br/>
mkdir temp_zip/Projects/ProjectRampal<br/>
mkdir temp_zip/Projects/ProjectRampal/300<br/>
mkdir temp_zip/Tools<br/>
mkdir temp_zip/Tools/ToolTestNewickVector<br/>
mkdir temp_zip/Tools/ToolTestTwoDigitNewick<br/>
<br/>
echo "Copying files"<br/>
cp ../../../Classes/CppStopwatch/*.* temp_zip/Classes/CppStopwatch<br/>
cp ../../../Libraries/bigint-2010.04.30/*.* temp_zip/Libraries/bigint-2010.04.30<br/>
cp *.* temp_zip/Projects/ProjectRampal/300<br/>
cp ../../../Tools/ToolTestNewickVector/*.* temp_zip/Tools/ToolTestNewickVector<br/>
cp ../../../Tools/ToolTestTwoDigitNewick/*.* temp_zip/Tools/ToolTestTwoDigitNewick<br/>
<br/>
echo "Compressing files"<br/>
cd temp_zip<br/>
zip -r 300 Classes<br/>
zip -r 300 Libraries<br/>
zip -r 300 Projects<br/>
zip -r 300 Tools<br/>
cd ..<br/>
cp temp_zip/300.zip 300.zip<br/>
<br/>
echo "Cleaning up"<br/>
#Classes<br/>
rm temp_zip/Classes/CppStopwatch/*.*<br/>
rmdir temp_zip/Classes/CppStopwatch<br/>
rmdir temp_zip/Classes<br/>
#Libraries<br/>
rm temp_zip/Libraries/bigint-2010.04.30/*.*<br/>
rmdir temp_zip/Libraries/bigint-2010.04.30<br/>
rmdir temp_zip/Libraries<br/>
#Projects<br/>
rm temp_zip/Projects/ProjectRampal/300/*.*<br/>
rmdir temp_zip/Projects/ProjectRampal/300<br/>
rmdir temp_zip/Projects/ProjectRampal<br/>
rmdir temp_zip/Projects<br/>
#Tools<br/>
rm temp_zip/Tools/ToolTestNewickVector/*.*<br/>
rm temp_zip/Tools/ToolTestTwoDigitNewick/*.*<br/>
rmdir temp_zip/Tools/ToolTestNewickVector<br/>
rmdir temp_zip/Tools/ToolTestTwoDigitNewick<br/>
rmdir temp_zip/Tools<br/>
#temp_zip<br/>
rm temp_zip/*.*<br/>
rmdir temp_zip<br/>
<br/>
echo "Done"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
